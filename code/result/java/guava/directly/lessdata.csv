file_path,Name,full_name,Start Line,End Line,Comment,Pre_Comment,child Name,domain,inner_method,node_level
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,<init>,com.google.common.base.Absent:<init>(),36,36,"/**
* Private constructor to prevent instantiation of this class.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,<init>,com.google.common.base.Present:<init>(java.lang.Object),31,33,"/**
* Sets the current reference to the provided object.
* @param reference object to be referenced
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,or,com.google.common.base.Absent:or(java.lang.Object),48,51,"/**
* Returns the provided default value if this Optional is empty.
* @param defaultValue non-null value to return when empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,or,com.google.common.base.Absent:or(com.google.common.base.Supplier),59,63,"/**
* Returns an object of type T, either from this instance (if non-null)
* or by calling the given supplier function to provide a default.
* @param supplier function providing default value if this instance is null
* @return T instance from this object, or result from the supplier
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,doAndThen,com.google.common.base.Converter$IdentityConverter:doAndThen(com.google.common.base.Converter),581,584,"/**
* Returns a checked converter instance of the provided otherConverter.
*@param otherConverter converter to be returned (must not be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,convertAll,com.google.common.base.Converter:convertAll(java.lang.Iterable),270,291,"/**
* Converts an iterable of type A to an iterable of type B.
* @param fromIterable input iterable containing elements of type A
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,or,com.google.common.base.Present:or(java.lang.Object),45,49,"/**
* Returns the wrapped object if present, otherwise the provided default value.
* @param defaultValue fallback object to return when absent
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,<init>,com.google.common.base.Stopwatch:<init>(com.google.common.base.Ticker),145,147,"/**
* Initializes stopwatch with a given Ticker instance.
* @param ticker valid Ticker object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,orderRowsBy,com.google.common.collect.ImmutableTable$Builder:orderRowsBy(java.util.Comparator),203,207,"/**
* Specifies a custom comparator for ordering rows.
* @param rowComparator Comparator to sort rows by
*/",Specifies the ordering of the generated table's rows.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,orderColumnsBy,com.google.common.collect.ImmutableTable$Builder:orderColumnsBy(java.util.Comparator),210,214,"/**
* Orders table columns using a custom comparator.
* @param columnComparator comparison function for columns
*/",Specifies the ordering of the generated table's columns.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,mergeSorted,"com.google.common.collect.Iterables:mergeSorted(java.lang.Iterable,java.util.Comparator)",1070,1083,"/**
* Merges sorted iterables into a single iterable.
* @param iterables list of iterables to merge
* @param comparator comparison function for elements
* @return merged iterable or empty if input is empty
*/","* Returns an iterable over the merged contents of all given {@code iterables}. Equivalent entries
   * will not be de-duplicated.
   *
   * <p>Callers must ensure that the source {@code iterables} are in non-descending order as this
   * method does not sort its input.
   *
   * <p>For any equivalent elements across all {@code iterables}, it is undefined which element is
   * returned first.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,indexOf,"com.google.common.collect.Iterators:indexOf(java.util.Iterator,com.google.common.base.Predicate)",801,811,"/**
* Finds the index of the first element matching a predicate in an iterator.
* @param iterator iterator to search
* @param predicate condition to match
* @return index of the first matching element or -1 if not found
*/","* Returns the index in {@code iterator} of the first element that satisfies the provided {@code
   * predicate}, or {@code -1} if the Iterator has no such elements.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code
   * predicate.apply(Iterators.get(iterator, i))} returns {@code true}, or {@code -1} if there is no
   * such index.
   *
   * <p>If -1 is returned, the iterator will be left exhausted: its {@code hasNext()} method will
   * return {@code false}. Otherwise, the iterator will be set to the element which satisfies the
   * {@code predicate}.
   *
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:treeSetValues(java.util.Comparator),384,394,"/**
* Creates a multimap builder with tree set values.
* @param comparator value comparator for sorting
*/","* Uses a {@link TreeSet} ordered by the specified comparator to store value collections.
     *
     * <p>Multimaps generated by the resulting builder will not be serializable if {@code
     * comparator} is not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,enumSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:enumSetValues(java.lang.Class),397,409,"/**
* Configures enum values for the multimap.
* @param valueClass Class of the enums to use
*/",Uses an {@link EnumSet} to store value collections.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,union,"com.google.common.collect.Sets:union(java.util.Set,java.util.Set)",830,906,"/**
* Computes the union of two sets, returning a new SetView containing all unique elements.
* @param set1 first set
* @param set2 second set
* @return SetView representing the union of both sets
*/","* Returns an unmodifiable <b>view</b> of the union of two sets. The returned set contains all
   * elements that are contained in either backing set. Iterating over the returned set iterates
   * first over all the elements of {@code set1}, then over each element of {@code set2}, in order,
   * that is not contained in {@code set1}.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,intersection,"com.google.common.collect.Sets:intersection(java.util.Set,java.util.Set)",935,1004,"/**
* Computes the intersection of two sets, returning a new SetView containing only elements present in both.
* @param set1 first set to intersect
* @param set2 second set to intersect
*/","* Returns an unmodifiable <b>view</b> of the intersection of two sets. The returned set contains
   * all elements that are contained by both backing sets. The iteration order of the returned set
   * matches that of {@code set1}.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.
   *
   * <p><b>Note:</b> The returned view performs slightly better when {@code set1} is the smaller of
   * the two sets. If you have reason to believe one of your sets will generally be smaller than the
   * other, pass it first. Unfortunately, since this method sets the generic type of the returned
   * set based on the type of the first set passed, this could in rare cases force you to make a
   * cast, for example:
   *
   * {@snippet :
   * Set<Object> aFewBadObjects = ...
   * Set<String> manyBadStrings = ...
   *
   * // impossible for a non-String to be in the intersection
   * SuppressWarnings(""unchecked"")
   * Set<String> badStrings = (Set) Sets.intersection(
   *     aFewBadObjects, manyBadStrings);
   * }
   *
   * <p>This is unfortunate, but should come up only very rarely.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,difference,"com.google.common.collect.Sets:difference(java.util.Set,java.util.Set)",1016,1080,"/**
* Computes the difference between two sets, returning a new set view containing only elements in 'set1' but not in 'set2'.
* @param set1 primary set
* @param set2 secondary set
*/","* Returns an unmodifiable <b>view</b> of the difference of two sets. The returned set contains
   * all elements that are contained by {@code set1} and not contained by {@code set2}. {@code set2}
   * may also contain elements not present in {@code set1}; these are simply ignored. The iteration
   * order of the returned set matches that of {@code set1}.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,symmetricDifference,"com.google.common.collect.Sets:symmetricDifference(java.util.Set,java.util.Set)",1093,1160,"/**
* Computes the symmetric difference of two sets.
* @param set1 first set
* @param set2 second set
* @return SetView containing elements in either set but not both
*/","* Returns an unmodifiable <b>view</b> of the symmetric difference of two sets. The returned set
   * contains all elements that are contained in either {@code set1} or {@code set2} but not in
   * both. The iteration order of the returned set is undefined.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.
   *
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,merge,"com.google.common.collect.TableCollectors$MutableCell:merge(java.lang.Object,java.util.function.BinaryOperator)",197,200,"/**
* Merges input value into existing value using provided merge function.
* @param value Value to be merged
* @param mergeFunction Binary operator for merging values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toImmutableTable,"com.google.common.collect.TableCollectors:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",51,79,"/**
* Converts a stream of objects to an immutable table.
* @param rowFunction maps each object to a unique row key
* @param columnFunction maps each object to a unique column key
* @param valueFunction maps each object to its associated value
* @param mergeFunction merges duplicate values in the table
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,indexOf,"com.google.common.primitives.Booleans:indexOf(boolean[],boolean[])",186,203,"/**
* Searches for a boolean array within another.
* @param array the search space
* @param target the target array to find
* @return index of first match, or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,indexOf,"com.google.common.primitives.Bytes:indexOf(byte[],byte[])",116,133,"/**
* Searches the specified array for the first occurrence of the target byte sequence.
* @param array the byte array to search
* @param target the target byte sequence to find
* @return index of the first matching sequence, or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,indexOf,"com.google.common.primitives.Chars:indexOf(char[],char[])",174,191,"/**
* Searches array for first occurrence of target substring.
* @param array input character array
* @param target substring to search for
* @return index of target in array, or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,indexOf,"com.google.common.primitives.Doubles:indexOf(double[],double[])",160,177,"/**
* Finds the index of the first occurrence of a double array within another.
* @param array The array to search in
* @param target The array to search for
* @return Index of first match or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,indexOf,"com.google.common.primitives.Floats:indexOf(float[],float[])",157,174,"/**
* Searches for the first occurrence of a float array within another.
* @param array search space
* @param target array to find
* @return index of found array or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,indexOf,"com.google.common.primitives.Ints:indexOf(int[],int[])",184,201,"/**
* Searches for the first occurrence of a target array within an array.
* @param array the search array
* @param target the array to find (must be non-empty)
* @return index of target if found, -1 otherwise
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,indexOf,"com.google.common.primitives.Longs:indexOf(long[],long[])",145,162,"/**
* Searches for a sub-array within the given array.
* @param array the main array to search
* @param target the sub-array to find
* @return index of the first occurrence, or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,indexOf,"com.google.common.primitives.Shorts:indexOf(short[],short[])",178,195,"/**
* Searches array for the first occurrence of target.
* @param array the array to search
* @param target the short[] to find
* @return index of first match or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ImmediateFuture.java,addListener,"com.google.common.util.concurrent.ImmediateFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",41,60,"/**
* Executes a Runnable on a specified Executor, logging any exceptions.
* @param listener the Runnable to execute
* @param executor the Executor to use
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,<init>,com.google.common.util.concurrent.Monitor$Guard:<init>(com.google.common.util.concurrent.Monitor),318,321,"/**
* Initializes a Guard object with a Monitor instance.
* @param monitor unique Monitor identifier
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,newGuard,com.google.common.util.concurrent.Monitor:newGuard(java.util.function.BooleanSupplier),370,378,"/**
* Creates a Guard object that satisfies the given BooleanSupplier.
* @param isSatisfied supplier of boolean value to be guarded
*/","* Creates a new {@linkplain Guard guard} for this monitor.
   *
   * @param isSatisfied the new guard's boolean condition (see {@link Guard#isSatisfied
   *     isSatisfied()})
   * @since 21.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,or,com.google.common.base.Absent:or(com.google.common.base.Optional),53,57,"/**
* Returns this optional, or the provided alternative if not present.
* @param secondChoice alternative value if this optional is empty
* @return this optional or the alternative value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesAllOf,com.google.common.base.CharMatcher$Any:matchesAllOf(java.lang.CharSequence),1063,1067,"/**
* Always returns true, effectively ignoring input.
* @param sequence input CharSequence to be evaluated",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,removeFrom,com.google.common.base.CharMatcher$Any:removeFrom(java.lang.CharSequence),1074,1078,"/**
* Clears the specified CharSequence.
* @param sequence input sequence to clear
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,trimFrom,com.google.common.base.CharMatcher$Any:trimFrom(java.lang.CharSequence),1101,1105,"/**
* Returns an empty string.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,and,com.google.common.base.CharMatcher$Any:and(com.google.common.base.CharMatcher),1112,1115,"/**
* Combines this matcher with another to create an AND operation.
* @param other the matcher to combine with (must not be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,or,com.google.common.base.CharMatcher$Any:or(com.google.common.base.CharMatcher),1117,1121,"/**
* Returns this CharMatcher instance with its behavior combined with another.
* @param other CharMatcher to combine with (not null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$NamedFastMatcher:<init>(java.lang.String),981,983,"/**
* Initializes matcher with given description.
* @param description unique identifier of the matcher
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,com.google.common.base.CharMatcher$None:indexIn(java.lang.CharSequence),1143,1147,"/**
* Returns the index of this object within the given sequence.
* If not found, returns -1.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,lastIndexIn,com.google.common.base.CharMatcher$None:lastIndexIn(java.lang.CharSequence),1156,1160,"/**
* Returns index of last occurrence in CharSequence (-1 if not found). 
* @param sequence input string or character sequence to search.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesNoneOf,com.google.common.base.CharMatcher$None:matchesNoneOf(java.lang.CharSequence),1167,1171,"/**
* Indicates that the given character sequence does not match any pattern.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,replaceFrom,"com.google.common.base.CharMatcher$None:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)",1183,1187,"/**
* Returns original sequence as string, ignoring replacement.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,countIn,com.google.common.base.CharMatcher$None:countIn(java.lang.CharSequence),1209,1213,"/**
* Returns the number of occurrences of this in the given character sequence.
* @param sequence the sequence to search (must not be null)
* @return occurrence count (always 0 for this implementation)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,and,com.google.common.base.CharMatcher$None:and(com.google.common.base.CharMatcher),1215,1219,"/**
* Returns a new CharMatcher that combines this matcher with another using logical AND.
* @param other the CharMatcher to combine with this one
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,or,com.google.common.base.CharMatcher$None:or(com.google.common.base.CharMatcher),1221,1224,"/**
* Combines this matcher with another using logical OR operation. 
* @param other the other matcher to combine with (must not be null) 
* @return a new matcher that matches if either of the input matchers match",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Defaults.java,defaultValue,com.google.common.base.Defaults:defaultValue(java.lang.Class),42,65,"/**
* Returns a default value for the specified primitive type.
* @param type Class of the desired primitive type
*/","* Returns the default value of {@code type} as defined by JLS --- {@code 0} for numbers, {@code
   * false} for {@code boolean} and {@code '\0'} for {@code char}. For non-primitive types and
   * {@code void}, {@code null} is returned.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,<init>,"com.google.common.base.Equivalence$EquivalentToPredicate:<init>(com.google.common.base.Equivalence,java.lang.Object)",318,321,"/**
* Initializes an equivalent to predicate with specified equivalence and target value.
* @param equivalence Equivalence function to compare elements
* @param target Target value for comparison
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,<init>,"com.google.common.base.Equivalence$Wrapper:<init>(com.google.common.base.Equivalence,java.lang.Object)",228,231,"/**
* Initializes a new instance of Wrapper with given equivalence and reference.
* @param equivalence equivalence function for the wrapper
* @param reference reference object to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,"com.google.common.base.Functions$ForMapWithDefault:<init>(java.util.Map,java.lang.Object)",198,201,"/**
* Initializes a map with default value for unknown keys.
* @param map input map
* @param defaultValue value to return when key is not present in map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,"com.google.common.base.Functions$FunctionComposition:<init>(com.google.common.base.Function,com.google.common.base.Function)",260,263,"/**
* Combines two functions using function composition.
* @param g The second function to apply (takes B, returns C)
* @param f The first function to apply (takes A, returns B)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,com.google.common.base.Functions$FunctionForMapNoDefault:<init>(java.util.Map),157,159,"/**
* Initializes the underlying map with the provided instance.
* @param map non-null map to assign
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,com.google.common.base.Functions$PredicateFunction:<init>(com.google.common.base.Predicate),316,318,"/**
 * Initializes a new PredicateFunction instance with a given predicate.
 * @param predicate function to apply to input values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,com.google.common.base.Functions$SupplierFunction:<init>(com.google.common.base.Supplier),421,423,"/**
* Initializes Function with a given supplier.
* @param supplier source of function values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,apply,com.google.common.base.Functions$ToStringFunction:apply(java.lang.Object),74,78,"/**
* Converts an object to its string representation.
* @param o object to convert
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/JdkPattern.java,<init>,com.google.common.base.JdkPattern$JdkMatcher:<init>(java.util.regex.Matcher),55,57,"/**
* Initializes the JdkMatcher with a given Matcher instance.
* @param matcher non-null Matcher object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/JdkPattern.java,<init>,com.google.common.base.JdkPattern:<init>(java.util.regex.Pattern),28,30,"/**
* Initializes the JdkPattern instance with the specified pattern.
* @param pattern regular expression pattern to initialize with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,<init>,"com.google.common.base.Joiner$MapJoiner:<init>(com.google.common.base.Joiner,java.lang.String)",381,384,"/**
* Initializes a new instance of the MapJoiner.
* @param joiner Joiner to use for values
* @param keyValueSeparator separator between key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,<init>,com.google.common.base.Joiner:<init>(java.lang.String),80,82,"/**
* Initializes Joiner with specified string separator.
* @param separator string to join elements with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,useForNull,com.google.common.base.Joiner:useForNull(java.lang.String),276,294,"/**
* Returns a Joiner that uses the provided text for null values.
* @param nullText text to display for null parts
*/","* Returns a joiner with the same behavior as this one, except automatically substituting {@code
   * nullText} for any provided null elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,iterable,"com.google.common.base.Joiner:iterable(java.lang.Object,java.lang.Object,java.lang.Object[])",532,553,"/**
* Creates an iterable list from a variable number of objects and two fixed values.
* @param first the first value
* @param second the second value
* @param rest the remaining values (must not be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,<init>,com.google.common.base.MoreObjects$ToStringHelper:<init>(java.lang.String),157,159,"/**
* Initializes the class name with a non-null value.",Use {@link MoreObjects#toStringHelper(Object)} to create an instance.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,presentInstances,com.google.common.base.Optional:presentInstances(java.lang.Iterable),341,360,"/**
* Extracts non-empty instances from iterable of optionals.
* @param optionals iterable of potentially empty Optional objects
* @return Iterable of non-null, non-empty values or empty if none found
*/","* Returns the value of each present instance from the supplied {@code optionals}, in order,
   * skipping over occurrences of {@link Optional#absent}. Iterators are unmodifiable and are
   * evaluated lazily.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> this method has no equivalent in Java 8's
   * {@code Optional} class; use {@code
   * optionals.stream().filter(Optional::isPresent).map(Optional::get)} instead.
   *
   * <p><b>Java 9 users:</b> use {@code optionals.stream().flatMap(Optional::stream)} instead.
   *
   * @since 11.0 (generics widened in 13.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,compilePattern,com.google.common.base.Platform:compilePattern(java.lang.String),92,95,"/**
* Compiles a regular expression pattern using a cached compiler.
* @param pattern regex pattern to compile
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,"com.google.common.base.Predicates$CompositionPredicate:<init>(com.google.common.base.Predicate,com.google.common.base.Function)",694,697,"/**
* Constructs a CompositionPredicate from a Predicate and a Function.
* @param p the predicate to apply first
* @param f the function to compose with the predicate's result
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$ContainsPatternPredicate:<init>(com.google.common.base.CommonPattern),734,736,"/**
* Initializes predicate with specified common pattern.
* @param pattern unique CommonPattern instance to match against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$InPredicate:<init>(java.util.Collection),644,646,"/**
* Initializes predicate with a collection of elements to match. 
* @param target Collection of elements to filter against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$InstanceOfPredicate:<init>(java.lang.Class),567,569,"/**
* Initializes the predicate with a given class type.
* @param clazz Class to match instances against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$NotPredicate:<init>(com.google.common.base.Predicate),382,384,"/**
 * Sets the predicate to negate.
 * @param predicate non-null predicate to negate
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$SubtypeOfPredicate:<init>(java.lang.Class),606,608,"/**
* Initializes the predicate with the given class.
* @param clazz the class to be used in the predicate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,defensiveCopy,com.google.common.base.Predicates:defensiveCopy(java.lang.Iterable),804,810,"/**
* Creates a defensively-copied list from an iterable, ensuring all elements are non-null.
* @param iterable input iterable to copy
* @return List<T> of copied elements or empty list if null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,or,com.google.common.base.Present:or(com.google.common.base.Optional),51,55,"/**
* Returns an instance of this type if present, otherwise returns the provided alternative.
* @param secondChoice fallback value to return if not available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,or,com.google.common.base.Present:or(com.google.common.base.Supplier),57,61,"/**
* Returns current reference value or provides a fallback using the given supplier.
* @param supplier function to use if no reference is set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,<init>,"com.google.common.base.Splitter$MapSplitter:<init>(com.google.common.base.Splitter,com.google.common.base.Splitter)",482,485,"/**
* Initializes a new MapSplitter instance with the specified 
* outer and entry splitters. The outer splitter is assigned 
* directly, while the entry splitter is validated for non-null.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,split,com.google.common.base.Splitter:split(java.lang.CharSequence),368,385,"/**
* Splits the given character sequence into an iterable of substrings.
* @param sequence input string to split
*/","* Splits {@code sequence} into string components and makes them available through an {@link
   * Iterator}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use
   * {@link #splitToList(CharSequence)}. Java 8+ users may prefer {@link #splitToStream} instead.
   *
   * @param sequence the sequence of characters to split
   * @return an iteration over the segments split from the parameter",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,padStart,"com.google.common.base.Strings:padStart(java.lang.String,int,char)",92,103,"/**
* Pads the start of a given string to a specified minimum length using a character.
* @param string input string
* @param minLength target length
* @param padChar padding character
* @return padded string or original if already long enough
*/","* Returns a string, of length at least {@code minLength}, consisting of {@code string} prepended
   * with as many copies of {@code padChar} as are necessary to reach that length. For example,
   *
   * <ul>
   *   <li>{@code padStart(""7"", 3, '0')} returns {@code ""007""}
   *   <li>{@code padStart(""2010"", 3, '0')} returns {@code ""2010""}
   * </ul>
   *
   * <p>See {@link java.util.Formatter} for a richer set of formatting capabilities.
   *
   * @param string the string which should appear at the end of the result
   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in
   *     which case the input string is always returned.
   * @param padChar the character to insert at the beginning of the result until the minimum length
   *     is reached
   * @return the padded string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,padEnd,"com.google.common.base.Strings:padEnd(java.lang.String,int,char)",123,134,"/**
* Pads the input string to a minimum length by appending a specified character.
* @param string input string
* @param minLength target length
* @param padChar character to append for padding
*/","* Returns a string, of length at least {@code minLength}, consisting of {@code string} appended
   * with as many copies of {@code padChar} as are necessary to reach that length. For example,
   *
   * <ul>
   *   <li>{@code padEnd(""4."", 5, '0')} returns {@code ""4.000""}
   *   <li>{@code padEnd(""2010"", 3, '!')} returns {@code ""2010""}
   * </ul>
   *
   * <p>See {@link java.util.Formatter} for a richer set of formatting capabilities.
   *
   * @param string the string which should appear at the beginning of the result
   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in
   *     which case the input string is always returned.
   * @param padChar the character to append to the end of the result until the minimum length is
   *     reached
   * @return the padded string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,com.google.common.base.Suppliers$MemoizingSupplier:<init>(com.google.common.base.Supplier),133,135,"/**
* Wraps a supplier with memoization functionality.
* @param delegate supplier to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:<init>(com.google.common.base.Supplier),188,190,"/**
* Constructs memoizing supplier with given delegate.
* @param delegate Supplier instance to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,"com.google.common.base.Suppliers$SupplierComposition:<init>(com.google.common.base.Function,com.google.common.base.Supplier)",64,67,"/**
* Composes a supplier of type F with a function that returns T.
* @param function function to apply to the supplied value
* @param supplier supplier of values to be passed to the function
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,com.google.common.base.Suppliers$ThreadSafeSupplier:<init>(com.google.common.base.Supplier),410,412,"/**
 * Initializes the supplier with a given delegate instance.
 * @param delegate Supplier to wrap and make thread-safe
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,throwIfInstanceOf,"com.google.common.base.Throwables:throwIfInstanceOf(java.lang.Throwable,java.lang.Class)",72,79,"/**
* Throws the given exception if it's an instance of the specified type.
* @param throwable the exception to check
* @param declaredType the expected type of the exception
* @throws X the checked exception if it matches the declared type
*/","* Throws {@code throwable} if it is an instance of {@code declaredType}. Example usage:
   *
   * <pre>
   * for (Foo foo : foos) {
   *   try {
   *     foo.bar();
   *   } catch (BarException | RuntimeException | Error t) {
   *     failure = t;
   *   }
   * }
   * if (failure != null) {
   *   throwIfInstanceOf(failure, BarException.class);
   *   throwIfUnchecked(failure);
   *   throw new AssertionError(failure);
   * }
   * </pre>
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,throwIfUnchecked,com.google.common.base.Throwables:throwIfUnchecked(java.lang.Throwable),129,137,"/**
* Throws unchecked exceptions as runtime or error. 
* @param throwable the checked exception to re-throw
*/","* Throws {@code throwable} if it is a {@link RuntimeException} or {@link Error}. Example usage:
   *
   * <pre>
   * for (Foo foo : foos) {
   *   try {
   *     foo.bar();
   *   } catch (RuntimeException | Error t) {
   *     failure = t;
   *   }
   * }
   * if (failure != null) {
   *   throwIfUnchecked(failure);
   *   throw new AssertionError(failure);
   * }
   * </pre>
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,getCausalChain,com.google.common.base.Throwables:getCausalChain(java.lang.Throwable),284,308,"/**
* Retrieves the causal chain of a Throwable, detecting loops if present.
* @param throwable input exception to traverse
* @return unmodifiable list of Throwables in the causal chain or an empty list if null
*/","* Gets a {@code Throwable} cause chain as a list. The first entry in the list will be {@code
   * throwable} followed by its cause hierarchy. Note that this is a snapshot of the cause chain and
   * will not reflect any subsequent changes to the cause chain.
   *
   * <p>Here's an example of how it can be used to find specific types of exceptions in the cause
   * chain:
   *
   * <pre>
   * Iterables.filter(Throwables.getCausalChain(e), IOException.class));
   * </pre>
   *
   * @param throwable the non-null {@code Throwable} to extract causes from
   * @return an unmodifiable list containing the cause chain starting with {@code throwable}
   * @throws IllegalArgumentException if there is a loop in the causal chain",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,jlaStackTrace,com.google.common.base.Throwables:jlaStackTrace(java.lang.Throwable),401,430,"/**
* Returns a list of stack trace elements for the given Throwable.
*@param t throwable object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,load,com.google.common.cache.CacheLoader$FunctionToCacheLoader:load(java.lang.Object),167,170,"/**
* Loads value associated with given key using provided computing function.
* @param key unique identifier
* @return Value object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,load,com.google.common.cache.CacheLoader$SupplierToCacheLoader:load(java.lang.Object),218,222,"/**
* Loads computed value from supplier.
* @param key unused unique identifier
* @return computed V object or null if not available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,asyncReloading,"com.google.common.cache.CacheLoader:asyncReloading(com.google.common.cache.CacheLoader,java.util.concurrent.Executor)",184,208,"/**
* Returns a CacheLoader that asynchronously reloads cache entries using the provided executor.
* @param loader original cache loader to use for reloading
* @param executor executor service to run reload tasks on
*/","* Returns a {@code CacheLoader} which wraps {@code loader}, executing calls to {@link
   * CacheLoader#reload} using {@code executor}.
   *
   * <p>This method is useful only when {@code loader.reload} has a synchronous implementation, such
   * as {@linkplain #reload the default implementation}.
   *
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$Segment:newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1999,2002,"/**
* Creates a new entry in the map with the specified key and hash.
* @param key unique key value
* @param hash key's hash code
* @param next reference to the next entry (null if last)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/RemovalListeners.java,asynchronous,"com.google.common.cache.RemovalListeners:asynchronous(com.google.common.cache.RemovalListener,java.util.concurrent.Executor)",40,46,"/**
* Wraps a removal listener in an asynchronous execution context.
* @param listener original removal listener
* @param executor executor to execute the listener asynchronously
* @return Asynchronous RemovalListener instance
*/","* Returns a {@code RemovalListener} which processes all eviction notifications using {@code
   * executor}.
   *
   * @param listener the backing listener
   * @param executor the executor with which removal notifications are asynchronously executed",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/RemovalNotification.java,<init>,"com.google.common.cache.RemovalNotification:<init>(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause)",53,56,"/**
* Creates a removal notification with the specified cause.
* @param key key to be removed (may be null)
* @param value associated value to be removed (may be null)
* @param cause reason for removal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,forEach,com.google.common.collect.AbstractMapBasedMultimap:forEach(java.util.function.BiConsumer),1307,1312,"/**
* Applies a given BiConsumer to each key-value pair in the map.
* @param action Consumer function to apply to each entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,forEachEntry,com.google.common.collect.AbstractMapBasedMultiset:forEachEntry(java.util.function.ObjIntConsumer),163,167,"/**
* Applies a consumer to each entry in the map.
* @param action callback function for processing entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,<init>,com.google.common.collect.AbstractSortedMultiset:<init>(java.util.Comparator),47,49,"/**
* Constructs an abstract sorted multiset with the specified comparator.
* @param comparator comparator to use for ordering elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,subMultiset,"com.google.common.collect.AbstractSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",102,112,"/**
* Returns a sub-multiset of elements within the specified bounds.
* @param fromElement starting element (inclusive)
* @param fromBoundType type of lower bound
* @param toElement ending element (inclusive)
* @param toBoundType type of upper bound
* @return SortedMultiset for the specified range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,column,com.google.common.collect.ArrayTable:column(java.lang.Object),604,613,"/**
* Retrieves the column data for a given key.
* @param columnKey unique column identifier
* @return Map of row keys to values or an empty map if not found
*/","* Returns a view of all mappings that have the given column key. If the column key isn't in
   * {@link #columnKeySet()}, an empty immutable map is returned.
   *
   * <p>Otherwise, for each row key in {@link #rowKeySet()}, the returned map associates the row key
   * with the corresponding value in the table. Changes to the returned map will update the
   * underlying table, and vice versa.
   *
   * @param columnKey key of column to search for in the table
   * @return the corresponding map from row keys to values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,row,com.google.common.collect.ArrayTable:row(java.lang.Object),696,705,"/**
* Fetches row data by key.
* @param rowKey unique row identifier
* @return Map of column values or empty map if not found
*/","* Returns a view of all mappings that have the given row key. If the row key isn't in {@link
   * #rowKeySet()}, an empty immutable map is returned.
   *
   * <p>Otherwise, for each column key in {@link #columnKeySet()}, the returned map associates the
   * column key with the corresponding value in the table. Changes to the returned map will update
   * the underlying table, and vice versa.
   *
   * @param rowKey key of row to search for in the table
   * @return the corresponding map from column keys to values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toMultiset,"com.google.common.collect.CollectCollectors:toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier)",167,182,"/**
* Converts a stream of objects to a multiset.
* @param elementFunction function to extract elements from input objects
* @param countFunction function to get the count of each element
* @param multisetSupplier supplier for the multiset instance
* @return Collector that accumulates elements into a Multiset
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toMultimap,"com.google.common.collect.CollectCollectors:toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",413,432,"/**
* Converts a stream of objects into a multimap.
* @param keyFunction function to extract keys from input elements
* @param valueFunction function to extract values from input elements
* @param multimapSupplier supplier for the resulting multimap
* @return Collector that accumulates elements into a multimap
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,flatteningToMultimap,"com.google.common.collect.CollectCollectors:flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",434,457,"/**
* Creates a Collector that flattens input elements into a Multimap.
* @param keyFunction maps each element to its key
* @param valueFunction maps each element to a Stream of values
* @param multimapSupplier provides the initial Multimap instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,map,"com.google.common.collect.CollectSpliterators:map(java.util.Spliterator,java.util.function.Function)",108,144,"/**
* Maps each element of the input spliterator to a new type using the provided function.
* @param fromSpliterator source spliterator
* @param function mapping function
*/","* Returns a {@code Spliterator} over the elements of {@code fromSpliterator} mapped by {@code
   * function}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,filter,"com.google.common.collect.CollectSpliterators:filter(java.util.Spliterator,java.util.function.Predicate)",147,202,"/**
* Filters a spliterator using the provided predicate. 
* @param fromSpliterator input spliterator to filter 
* @param predicate condition to apply to elements 
* @return filtered spliterator or null if empty",Returns a {@code Spliterator} filtered by the specified predicate.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,forEach,com.google.common.collect.Collections2$FilteredCollection:forEach(java.util.function.Consumer),184,193,"/**
* Applies the given consumer to each element that matches the predicate.
* @param action Consumer to be applied to matching elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,removeIf,com.google.common.collect.Collections2$FilteredCollection:removeIf(java.util.function.Predicate),210,214,"/**
* Removes elements from this collection that match both the specified predicate and filter.
* @param filter additional filter to apply in conjunction with the existing predicate
* @return true if any elements were removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,"com.google.common.collect.Collections2$TransformedCollection:<init>(java.util.Collection,com.google.common.base.Function)",269,272,"/**
* Creates a transformed collection by applying a function to each element.
* @param fromCollection source collection (not null)
* @param function mapping function (not null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,forEach,com.google.common.collect.Collections2$TransformedCollection:forEach(java.util.function.Consumer),294,298,"/**
* Applies a consumer to each element in this collection.
* @param action function to apply to each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,removeIf,com.google.common.collect.Collections2$TransformedCollection:removeIf(java.util.function.Predicate),300,304,"/**
* Removes elements from this collection that match a given predicate.
* @param filter the condition to apply when removing elements
* @return true if any elements were removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,safeContains,"com.google.common.collect.Collections2:safeContains(java.util.Collection,java.lang.Object)",100,107,"/**
* Checks if a collection safely contains an object without throwing exceptions.
* @param collection the collection to search
* @param object the object to search for
* @return true if found, false otherwise or on exception
*/","* Delegates to {@link Collection#contains}. Returns {@code false} if the {@code contains} method
   * throws a {@code ClassCastException} or {@code NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,safeRemove,"com.google.common.collect.Collections2:safeRemove(java.util.Collection,java.lang.Object)",113,120,"/**
* Attempts to safely remove an object from a collection.
* @param collection the collection to remove from
* @param object the object to remove, or null if not present
* @return true if removal was successful, false otherwise
*/","* Delegates to {@link Collection#remove}. Returns {@code false} if the {@code remove} method
   * throws a {@code ClassCastException} or {@code NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,isInOrder,"com.google.common.collect.Comparators:isInOrder(java.lang.Iterable,java.util.Comparator)",73,88,"/**
* Checks if the elements in an iterable are in ascending order according to a comparator.
* @param iterable Iterable container of elements
* @param comparator Comparator function to determine order
* @return True if elements are in order, false otherwise
*/","* Returns {@code true} if each element in {@code iterable} after the first is greater than or
   * equal to the element that preceded it, according to the specified comparator. Note that this is
   * always true when the iterable has fewer than two elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,isInStrictOrder,"com.google.common.collect.Comparators:isInStrictOrder(java.lang.Iterable,java.util.Comparator)",95,110,"/**
* Checks if elements in an iterable are strictly ordered by a comparator.
* @param iterable input iterable
* @param comparator comparison function
* @return true if iterable is strictly ordered, false otherwise
*/","* Returns {@code true} if each element in {@code iterable} after the first is <i>strictly</i>
   * greater than the element that preceded it, according to the specified comparator. Note that
   * this is always true when the iterable has fewer than two elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,emptiesFirst,com.google.common.collect.Comparators:emptiesFirst(java.util.Comparator),176,180,"/**
* Compares Optional values with a custom comparator, prioritizing empties first.
* @param valueComparator compares the wrapped value inside each Optional
* @return Comparator for Optional objects, favoring empty over non-empty
*/","* Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as less
   * than all other values, and orders the rest using {@code valueComparator} on the contained
   * value.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,emptiesLast,com.google.common.collect.Comparators:emptiesLast(java.util.Comparator),189,193,"/**
* Compares Optional values by their contained elements, with empty Options last.
* @param valueComparator comparator for the contained value
*/","* Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as greater
   * than all other values, and orders the rest using {@code valueComparator} on the contained
   * value.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,com.google.common.collect.ContiguousSet:headSet(java.lang.Comparable),152,155,"/**
* Returns a view of the portion of this set from the beginning up to, but not including, the given element. 
* @param toElement the upper bound (exclusive) of the view",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,"com.google.common.collect.ContiguousSet:headSet(java.lang.Comparable,boolean)",160,164,"/**
* Returns a contiguous set of elements in this set strictly less than the given element.
* @param toElement element not included in returned set
* @param inclusive whether to include the toElement in the result
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,com.google.common.collect.ContiguousSet:tailSet(java.lang.Comparable),187,190,"/**
* Returns a contiguous set containing all elements greater than or equal to the specified element.
* @param fromElement lower bound of the set (inclusive)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,"com.google.common.collect.ContiguousSet:tailSet(java.lang.Comparable,boolean)",195,199,"/**
* Returns a contiguous set containing all elements greater than or equal to the given fromElement.
* @param fromElement element that defines the lower bound
* @param inclusive whether to include the fromElement in the result
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,forEachEntry,com.google.common.collect.EnumMultiset:forEachEntry(java.util.function.ObjIntConsumer),283,291,"/**
* Applies the given consumer to each non-zero enumerated constant entry.
* @param action consumer function to apply to each entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,add,com.google.common.collect.EvictingQueue:add(java.lang.Object),103,115,"/**
* Adds an element to the collection, potentially removing the oldest one if at max size.
* @param e element to add
*/","* Adds the given element to this queue. If the queue is currently full, the element at the head
   * of the queue is evicted to make room.
   *
   * @return {@code true} always",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,<init>,"com.google.common.collect.FilteredEntryMultimap:<init>(com.google.common.collect.Multimap,com.google.common.base.Predicate)",55,58,"/**
* Creates a filtered multimap from an unfiltered one, 
* retaining entries that match the specified predicate.
* @param unfiltered original multimap to filter
* @param predicate condition for retention of each entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,addAll,com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:addAll(java.util.Collection),127,131,"/**
* Adds all elements from the given collection to this set, 
* but throws an exception if any element violates the key predicate.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,<init>,"com.google.common.collect.FilteredKeyMultimap:<init>(com.google.common.collect.Multimap,com.google.common.base.Predicate)",45,48,"/**
* Creates a filtered multimap from the given unfiltered map, 
* retaining only keys that match the provided predicate.
* @param unfiltered original multimap to filter
* @param keyPredicate predicate defining allowed keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,<init>,com.google.common.collect.FilteredMultimapValues:<init>(com.google.common.collect.FilteredMultimap),43,45,"/**
* Initializes the filter from a filtered multimap.
* @param multimap pre-filtered multimap instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,from,com.google.common.collect.FluentIterable:from(com.google.common.collect.FluentIterable),172,178,"/**
* Wraps an existing Iterable in a FluentIterable, with input validation. 
* @param iterable the Iterable to wrap, must not be null
*/","* Construct a fluent iterable from another fluent iterable. This is obviously never necessary,
   * but is intended to help call out cases where one migration from {@code Iterable} to {@code
   * FluentIterable} has obviated the need to explicitly convert to a {@code FluentIterable}.
   *
   * @deprecated instances of {@code FluentIterable} don't need to be converted to {@code
   *     FluentIterable}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,forEach,com.google.common.collect.HashBiMap:forEach(java.util.function.BiConsumer),570,578,"/**
* Performs a given operation on each key-value pair in this map.
* @param action BiConsumer to apply to each entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,getInstance,com.google.common.collect.ImmutableClassToInstanceMap:getInstance(java.lang.Class),182,186,"/**
* Retrieves an instance of specified type from the delegate, or null if not found.
* @param type Class of the desired instance
* @return Instance of type T, or null if not available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,add,com.google.common.collect.ImmutableList$Builder:add(java.lang.Object),836,843,"/**
* Adds an element to the collection.
* @param element object to be added
* @return updated builder instance
*/","* Adds {@code element} to the {@code ImmutableList}.
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,forEach,com.google.common.collect.ImmutableList:forEach(java.util.function.Consumer),416,423,"/**
* Iterates over the collection and applies a given action to each element.
* @param consumer action to be performed on each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,forEach,com.google.common.collect.ImmutableMapKeySet:forEach(java.util.function.Consumer),68,72,"/**
* Iterates over each entry in the underlying map and applies a given consumer action.
* @param action Consumer to apply to each key-value pair
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,forEach,com.google.common.collect.ImmutableMapValues:forEach(java.util.function.Consumer),106,111,"/**
* Applies the given consumer to each value in the map.
* @param action a function to apply to each value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,orderKeysBy,com.google.common.collect.ImmutableMultimap$Builder:orderKeysBy(java.util.Comparator),336,340,"/**
* Orders keys by using the provided comparator.
* @param keyComparator a comparator for ordering keys
*/","* Specifies the ordering of the generated multimap's keys.
     *
     * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,orderValuesBy,com.google.common.collect.ImmutableMultimap$Builder:orderValuesBy(java.util.Comparator),347,351,"/**
* Configures builder to order values by specified comparator.
* @param valueComparator comparator for ordering values
*/","* Specifies the ordering of the generated multimap's values for each key.
     *
     * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,add,com.google.common.collect.ImmutableMultiset$Builder:add(java.lang.Object),498,503,"/**
* Adds an element to the collection and returns this builder instance. 
* @param element the element to be added (must not be null)
*/","* Adds {@code element} to the {@code ImmutableMultiset}.
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,addCopies,"com.google.common.collect.ImmutableMultiset$Builder:addCopies(java.lang.Object,int)",530,534,"/**
* Adds specified copies of an element to the builder's contents.
* @param element element to be copied
* @param occurrences number of times to copy the element
*/","* Adds a number of occurrences of an element to this {@code ImmutableMultiset}.
     *
     * @param element the element to add
     * @param occurrences the number of occurrences of the element to add. May be zero, in which
     *     case no change will be made.
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation
     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,setCount,"com.google.common.collect.ImmutableMultiset$Builder:setCount(java.lang.Object,int)",546,550,"/**
* Sets the count of an element in the builder's collection.
* @param element the element to update count for
* @param count new count value
*/","* Adds or removes the necessary occurrences of an element such that the element attains the
     * desired count.
     *
     * @param element the element to add or remove occurrences of
     * @param count the desired count of the element in this multiset
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code count} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,forEach,com.google.common.collect.ImmutableSet$Indexed:forEach(java.util.function.Consumer),348,355,"/**
* Iterates over collection elements and applies the provided action.
* @param consumer action to be executed on each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:add(java.lang.Object),955,962,"/**
* Adds an element to the set and handles duplicates.
* @param e element to be added
* @return this SetBuilderImpl instance for method chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,toImmutableSortedMultiset,"com.google.common.collect.ImmutableSortedMultiset:toImmutableSortedMultiset(java.util.Comparator,java.util.function.Function,java.util.function.ToIntFunction)",86,103,"/**
* Converts a collection to an immutable sorted multiset.
* @param comparator comparator for sorting elements
* @param elementFunction maps input elements to multiset keys
* @param countFunction extracts counts from input elements
* @return ImmutableSortedMultiset object or null if empty
*/","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableSortedMultiset}
   * whose elements are the result of applying {@code elementFunction} to the inputs, with counts
   * equal to the result of applying {@code countFunction} to the inputs.
   *
   * <p>If the mapped elements contain duplicates (according to {@code comparator}), the first
   * occurrence in encounter order appears in the resulting multiset, with count equal to the sum of
   * the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element.
   *
   * @since 22.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,headSet,"com.google.common.collect.ImmutableSortedSet:headSet(java.lang.Object,boolean)",649,652,"/**
* Returns a sorted set of elements that are strictly less than (or equal to, if inclusive) the given element.
* @param toElement element up to which the set is returned
* @param inclusive true if the element itself should be included in the result
* @return ImmutableSortedSet containing elements less than or equal to the given element",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,tailSet,"com.google.common.collect.ImmutableSortedSet:tailSet(java.lang.Object,boolean)",702,705,"/**
* Returns a view of the sorted set containing all elements starting from {@code fromElement}.
* If {@code inclusive} is true, includes {@code fromElement}; otherwise excludes it.
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,forEach,com.google.common.collect.IndexedImmutableSet:forEach(java.util.function.Consumer),42,49,"/**
* Applies the given Consumer to each element in this collection.
* @param consumer callback function to process each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,unmodifiableIterable,com.google.common.collect.Iterables:unmodifiableIterable(java.lang.Iterable),72,81,"/**
* Returns an unmodifiable view of the given iterable.
* @param iterable input iterable to protect from modification
*/",Returns an unmodifiable view of {@code iterable}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,unmodifiableIterable,com.google.common.collect.Iterables:unmodifiableIterable(com.google.common.collect.ImmutableCollection),89,95,"/**
* Returns an unmodifiable view of the given immutable collection.
* @param iterable immutable collection to wrap
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,removeFirstMatching,"com.google.common.collect.Iterables:removeFirstMatching(java.lang.Iterable,com.google.common.base.Predicate)",209,221,"/**
* Removes and returns the first item from a collection that matches a predicate.
* @param removeFrom collection to search
* @param predicate condition for matching items
* @return matched item or null if not found
*/","Removes and returns the first matching element, or returns {@code null} if there is none.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,cycle,com.google.common.collect.Iterables:cycle(java.lang.Iterable),373,391,"/**
* Creates an Iterable that cycles through the elements of the input iterable indefinitely.
* @param iterable input iterable to cycle through
*/","* Returns an iterable whose iterators cycle indefinitely over the elements of {@code iterable}.
   *
   * <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code
   * remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code
   * iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable}
   * is empty.
   *
   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
   * should use an explicit {@code break} or be certain that you will eventually remove all the
   * elements.
   *
   * <p>To cycle over the iterable {@code n} times, use the following: {@code
   * Iterables.concat(Collections.nCopies(n, iterable))}
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Stream.generate(() -> iterable).flatMap(Streams::stream)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,filter,"com.google.common.collect.Iterables:filter(java.lang.Iterable,com.google.common.base.Predicate)",572,598,"/**
* Filters an iterable of elements based on a predicate.
* @param unfiltered input iterable to filter
* @param retainIfTrue predicate to apply for filtering
* @return filtered iterable or null if empty
*/","* Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate
   * {@code retainIfTrue}. The returned iterable's iterator does not support {@code remove()}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#filter}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,transform,"com.google.common.collect.Iterables:transform(java.lang.Iterable,com.google.common.base.Function)",731,752,"/**
* Transforms an iterable of objects by applying a given function.
* @param fromIterable input iterable to transform
* @param function mapping function to apply to each element
* @return new iterable with transformed elements
*/","* Returns a view containing the result of applying {@code function} to each element of {@code
   * fromIterable}.
   *
   * <p>The returned iterable's iterator supports {@code remove()} if {@code fromIterable}'s
   * iterator does. After a successful {@code remove()} call, {@code fromIterable} no longer
   * contains the corresponding element.
   *
   * <p>If the input {@code Iterable} is known to be a {@code List} or other {@code Collection},
   * consider {@link Lists#transform} and {@link Collections2#transform}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#map}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,consumingIterable,com.google.common.collect.Iterables:consumingIterable(java.lang.Iterable),1020,1036,"/**
* Converts an Iterable to a consuming Iterable, where elements are processed as soon as retrieved.
* @param iterable input Iterable (not null)
*/","* Returns a view of the supplied iterable that wraps each generated {@link Iterator} through
   * {@link Iterators#consumingIterator(Iterator)}.
   *
   * <p>Note: If {@code iterable} is a {@link Queue}, the returned iterable will instead use {@link
   * Queue#isEmpty} and {@link Queue#remove()}, since {@link Queue}'s iteration order is undefined.
   * Calling {@link Iterator#hasNext()} on a generated iterator from the returned iterable may cause
   * an item to be immediately dequeued for return on a subsequent call to {@link Iterator#next()}.
   *
   * <p>Whether the input {@code iterable} is a {@link Queue} or not, the returned {@code Iterable}
   * is not thread-safe.
   *
   * @param iterable the iterable to wrap
   * @return a view of the supplied iterable that wraps each generated iterator through {@link
   *     Iterators#consumingIterator(Iterator)}; for queues, an iterable that generates iterators
   *     that return and consume the queue's elements in queue order
   * @see Iterators#consumingIterator(Iterator)
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,<init>,com.google.common.collect.Iterators$PeekingImpl:<init>(java.util.Iterator),1187,1189,"/**
 * Initializes the peeking implementation with an underlying iterator.
 * @param iterator iterator over elements of type E
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,unmodifiableIterator,com.google.common.collect.Iterators:unmodifiableIterator(java.util.Iterator),129,149,"/**
* Returns an unmodifiable iterator over the given iterable.
* @param iterator input iterator to wrap
*/",Returns an unmodifiable view of {@code iterator}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,unmodifiableIterator,com.google.common.collect.Iterators:unmodifiableIterator(com.google.common.collect.UnmodifiableIterator),157,164,"/**
* Wraps an existing iterator in an unmodifiable interface.
* @param iterator underlying iterator (must not be null)
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,removeAll,"com.google.common.collect.Iterators:removeAll(java.util.Iterator,java.util.Collection)",205,216,"/**
* Removes all specified elements from the iterator.
* @param removeFrom iterator to remove elements from
* @param elementsToRemove collection of elements to remove
* @return true if any elements were removed, false otherwise
*/","* Traverses an iterator and removes every element that belongs to the provided collection. The
   * iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @param removeFrom the iterator to (potentially) remove elements from
   * @param elementsToRemove the elements to remove
   * @return {@code true} if any element was removed from {@code iterator}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,removeIf,"com.google.common.collect.Iterators:removeIf(java.util.Iterator,com.google.common.base.Predicate)",227,239,"/**
* Removes elements from the iterator that match the given predicate.
* @param removeFrom iterator to remove elements from
* @param predicate condition for removal
* @return true if any elements were removed, false otherwise
*/","* Removes every element that satisfies the provided predicate from the iterator. The iterator
   * will be left exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @param removeFrom the iterator to (potentially) remove elements from
   * @param predicate a predicate that determines whether an element should be removed
   * @return {@code true} if any elements were removed from the iterator
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,retainAll,"com.google.common.collect.Iterators:retainAll(java.util.Iterator,java.util.Collection)",250,261,"/**
* Removes elements from the iterator that are not present in the given collection.
* @param removeFrom iterator to modify
* @param elementsToRetain collection of elements to keep
* @return true if any elements were removed, false otherwise
*/","* Traverses an iterator and removes every element that does not belong to the provided
   * collection. The iterator will be left exhausted: its {@code hasNext()} method will return
   * {@code false}.
   *
   * @param removeFrom the iterator to (potentially) remove elements from
   * @param elementsToRetain the elements to retain
   * @return {@code true} if any element was removed from {@code iterator}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,addAll,"com.google.common.collect.Iterators:addAll(java.util.Collection,java.util.Iterator)",363,373,"/**
* Adds all elements from the given iterator to the specified collection.
* @param addTo Collection to add elements to
* @param iterator Iterator of elements to add
* @return true if the collection was modified, false otherwise
*/","* Adds all elements in {@code iterator} to {@code collection}. The iterator will be left
   * exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @return {@code true} if {@code collection} was modified as a result of this operation",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,cycle,com.google.common.collect.Iterators:cycle(java.lang.Iterable),403,439,"/**
* Creates an Iterator that cycles through the given Iterable, 
* reusing iterators to avoid ConcurrentModificationExceptions. 
* @param iterable input collection to cycle through 
* @return Iterator over cycled collection
*/","* Returns an iterator that cycles indefinitely over the elements of {@code iterable}.
   *
   * <p>The returned iterator supports {@code remove()} if the provided iterator does. After {@code
   * remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code
   * iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable}
   * is empty.
   *
   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
   * should use an explicit {@code break} or be certain that you will eventually remove all the
   * elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,filter,"com.google.common.collect.Iterators:filter(java.util.Iterator,com.google.common.base.Predicate)",666,682,"/**
* Filters an iterator, retaining elements that match a predicate.
* @param unfiltered input iterator to filter
* @param retainIfTrue predicate to apply to each element
* @return filtered iterator or null if no matches found
*/","* Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate
   * {@code retainIfTrue}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,all,"com.google.common.collect.Iterators:all(java.util.Iterator,com.google.common.base.Predicate)",707,717,"/**
* Checks if all elements in the iterator satisfy a given predicate.
* @param iterator iterable collection of objects
* @param predicate condition to evaluate each object against
* @return true if all elements match, false otherwise
*/","* Returns {@code true} if every element returned by {@code iterator} satisfies the given
   * predicate. If {@code iterator} is empty, {@code true} is returned.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,find,"com.google.common.collect.Iterators:find(java.util.Iterator,com.google.common.base.Predicate)",728,740,"/**
* Finds the first object in an iterator that satisfies a given predicate.
* @param iterator non-null iterator of type T
* @param predicate non-null function to evaluate each element
* @return first matching object or throws NoSuchElementException if none found
*/","* Returns the first element in {@code iterator} that satisfies the given predicate; use this
   * method only when such an element is known to exist. If no such element is found, the iterator
   * will be left exhausted: its {@code hasNext()} method will return {@code false}. If it is
   * possible that <i>no</i> element will match, use {@link #tryFind} or {@link #find(Iterator,
   * Predicate, Object)} instead.
   *
   * @throws NoSuchElementException if no element in {@code iterator} matches the given predicate",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,find,"com.google.common.collect.Iterators:find(java.util.Iterator,com.google.common.base.Predicate,java.lang.Object)",751,762,"/**
* Finds the first element in an iterable that satisfies a predicate, or returns a default value.
* @param iterator iterable to search
* @param predicate condition to match
* @param defaultValue value to return if no match is found
* @return matching element or default value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,transform,"com.google.common.collect.Iterators:transform(java.util.Iterator,com.google.common.base.Function)",821,831,"/**
* Creates an iterator that applies a given transformation function to each element.
* @param fromIterator source iterator
* @param function transformation function
* @return transformed iterator or null if input is null
*/","* Returns a view containing the result of applying {@code function} to each element of {@code
   * fromIterator}.
   *
   * <p>The returned iterator supports {@code remove()} if {@code fromIterator} does. After a
   * successful {@code remove()} call, {@code fromIterator} no longer contains the corresponding
   * element.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,consumingIterator,com.google.common.collect.Iterators:consumingIterator(java.util.Iterator),997,1018,"/**
* Returns an unmodifiable iterator that consumes and removes elements from the input iterator.
* @param iterator the input iterator to consume from
*/","* Returns a view of the supplied {@code iterator} that removes each element from the supplied
   * {@code iterator} as it is returned.
   *
   * <p>The provided iterator must support {@link Iterator#remove()} or else the returned iterator
   * will fail on the first call to {@code next}. The returned {@link Iterator} is also not
   * thread-safe.
   *
   * @param iterator the iterator to remove and return elements from
   * @return an iterator that removes and returns elements from the supplied iterator
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,clear,com.google.common.collect.Iterators:clear(java.util.Iterator),1037,1043,"/**
* Removes all elements from the specified iterator.
* @param iterator iterator to clear
*/",Clears the iterator using its remove method.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,forEnumeration,com.google.common.collect.Iterators:forEnumeration(java.util.Enumeration),1139,1154,"/**
* Converts an Enumeration to an unmodifiable iterator.
* @param enumeration Enumeration object to convert
*/","* Adapts an {@code Enumeration} to the {@code Iterator} interface.
   *
   * <p>This method has no equivalent in {@link Iterables} because viewing an {@code Enumeration} as
   * an {@code Iterable} is impossible. However, the contents can be <i>copied</i> into a collection
   * using {@link Collections#list}.
   *
   * <p><b>Java 9 users:</b> use {@code enumeration.asIterator()} instead, unless it is important to
   * return an {@code UnmodifiableIterator} instead of a plain {@code Iterator}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,asEnumeration,com.google.common.collect.Iterators:asEnumeration(java.util.Iterator),1163,1178,"/**
* Converts an Iterator to a Enumeration, allowing for safe iteration.
* @param iterator iterator containing elements of type T
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,peekingIterator,com.google.common.collect.Iterators:peekingIterator(com.google.common.collect.PeekingIterator),1281,1288,"/**
* Wraps a given iterator, returning it as-is.
* @param iterator the iterator to wrap (must not be null)
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$AbstractListWrapper:<init>(java.util.List),1165,1167,"/**
* Initializes the wrapper with a given list.
* @param backingList underlying list to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$OnePlusArrayList:<init>(java.lang.Object,java.lang.Object[])",343,346,"/**
* Constructs an instance of OnePlusArrayList with initial element and optional additional elements.
* @param first the first element
* @param rest array of subsequent elements (may be null or empty)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$ReverseList:<init>(java.util.List),866,868,"/**
* Reverses the given list in place. 
* @param forwardList List to be reversed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$TransformingRandomAccessList:<init>(java.util.List,com.google.common.base.Function)",626,629,"/**
* Applies a transformation function to each element in the input list.
* @param fromList original list of elements to transform
* @param function mapping function to apply to each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,removeIf,com.google.common.collect.Lists$TransformingRandomAccessList:removeIf(java.util.function.Predicate),666,670,"/**
* Removes elements from the list that match the specified filter predicate.
* @param filter predicate to evaluate each element against
* @return true if any elements were removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$TransformingSequentialList:<init>(java.util.List,com.google.common.base.Function)",569,572,"/**
* Transforms a sequential list of type F into a new list of type T.
* @param fromList original list to transform
* @param function mapping function to apply to each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,removeIf,com.google.common.collect.Lists$TransformingSequentialList:removeIf(java.util.function.Predicate),604,608,"/**
* Removes elements from this list that match the given predicate.
* @param filter The condition to test each element against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$TwoPlusArrayList:<init>(java.lang.Object,java.lang.Object,java.lang.Object[])",373,377,"/**
* Initializes a new TwoPlusArrayList with the given elements.
* @param first  The first element
* @param second The second element
* @param rest   Array of additional elements (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$AsMapView:<init>(java.util.Set,com.google.common.base.Function)",891,894,"/**
* Initializes an AsMap view of the given set using the provided function.
* @param set input set to transform
* @param function mapping function from key to value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$KeySet:<init>(java.util.Map),3918,3920,"/**
* Initializes the key set with the given map.
* @param map input map to populate key set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$KeySet:forEach(java.util.function.Consumer),3931,3936,"/**
* Iterates over the map's key-value pairs and applies the given Consumer to each.
* @param action Consumer function to apply to each map entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$NavigableAsMapView:<init>(java.util.NavigableSet,com.google.common.base.Function)",1045,1048,"/**
* Creates an AsMapView from a navigable set and a value function.
* @param ks navigable set of keys
* @param vFunction function to compute associated values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$TransformedEntriesMap:<init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer)",2141,2145,"/**
* Creates a new map with transformed entries.
* @param fromMap source map to transform
* @param transformer entry transformation function
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$TransformedEntriesMap:forEach(java.util.function.BiConsumer),2206,2211,"/**
* Applies a transformation to each entry in the map and executes the provided BiConsumer.
* @param action consumer function to process transformed entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$Values:<init>(java.util.Map),4111,4113,"/**
* Initializes the values from a given map.
* @param map input map containing key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$Values:forEach(java.util.function.Consumer),4124,4129,"/**
* Iterates over the map entries and applies the given consumer to each value.
* @param action Consumer function to apply to each value in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,newEnumMap,com.google.common.collect.Maps:newEnumMap(java.lang.Class),449,452,"/**
* Creates an empty EnumMap with the specified enum type.
*@param type the enum class for this map
*/","* Creates an {@code EnumMap} instance.
   *
   * @param type the key type for this map
   * @return a new, empty {@code EnumMap}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableEntry,com.google.common.collect.Maps:unmodifiableEntry(java.util.Map$Entry),1496,1512,"/**
* Creates an unmodifiable Entry instance from a given Entry.
* @param entry the original Entry to wrap
*/","* Returns an unmodifiable view of the specified map entry. The {@link Entry#setValue} operation
   * throws an {@link UnsupportedOperationException}. This also has the side effect of redefining
   * {@code equals} to comply with the Entry contract, to avoid a possible nefarious implementation
   * of equals.
   *
   * @param entry the entry for which to return an unmodifiable view
   * @return an unmodifiable view of the entry",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntry,"com.google.common.collect.Maps:transformEntry(com.google.common.collect.Maps$EntryTransformer,java.util.Map$Entry)",2107,2125,"/**
* Transforms an existing map entry by applying a custom transformation.
* @param transformer function to transform key-value pair
* @param entry original Entry object
* @return transformed Entry with new key and value type
*/",Returns a view of an entry transformed by the specified transformer.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asEntryToEntryFunction,com.google.common.collect.Maps:asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer),2128,2133,"/**
* Converts an Entry to another using a provided transformer.
* @param transformer transformation function
* @return Function that transforms entries
*/",Views an entry transformer as a function from entries to entries.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,safeGet,"com.google.common.collect.Maps:safeGet(java.util.Map,java.lang.Object)",3797,3804,"/**
* Safely retrieves a value from a map by key.
* @param map the map to search
* @param key the key to look up
* @return the associated value or null if not found or invalid
*/","* Delegates to {@link Map#get}. Returns {@code null} on {@code ClassCastException} and {@code
   * NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,safeContainsKey,"com.google.common.collect.Maps:safeContainsKey(java.util.Map,java.lang.Object)",3810,3817,"/**
* Checks if a map contains a given key without throwing exceptions.
* @param map the input map
* @param key the key to search for
* @return true if key is present, false otherwise or on error
*/","* Delegates to {@link Map#containsKey}. Returns {@code false} on {@code ClassCastException} and
   * {@code NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,safeRemove,"com.google.common.collect.Maps:safeRemove(java.util.Map,java.lang.Object)",3823,3830,"/**
* Safely removes a value from the map by key.
* @param map the map to remove from
* @param key the key to remove
* @return the removed value or null if not found or an error occurred
*/","* Delegates to {@link Map#remove}. Returns {@code null} on {@code ClassCastException} and {@code
   * NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,<init>,com.google.common.collect.MinMaxPriorityQueue$Builder:<init>(java.util.Comparator),178,180,"/**
* Initializes builder with custom comparator.
* @param comparator Comparator to use when sorting items
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimap.java,forEach,com.google.common.collect.Multimap:forEach(java.util.function.BiConsumer),342,345,"/**
* Performs a side-effecting operation on each map entry.
* @param action BiConsumer to process each key-value pair
*/","* Performs the given action for all key-value pairs contained in this multimap. If an ordering is
   * specified by the {@code Multimap} implementation, actions will be performed in the order of
   * iteration of {@link #entries()}. Exceptions thrown by the action are relayed to the caller.
   *
   * <p>To loop over all keys and their associated value collections, write {@code
   * Multimaps.asMap(multimap).forEach((key, valueCollection) -> action())}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$EnumSetSupplier:<init>(java.lang.Class),259,261,"/**
 * Constructs an EnumSet supplier with the specified class.
 * @param clazz the class of enum values to be supplied
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$TreeSetSupplier:<init>(java.util.Comparator),245,247,"/**
 * Initializes a new TreeSet supplier with the specified comparator.
 * @param comparator  comparator to use when ordering elements in the set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeKeys,com.google.common.collect.MultimapBuilder:treeKeys(java.util.Comparator),152,161,"/**
* Creates a tree-based multimap builder with keys of type K0.
* @param comparator key comparison function
*/","* Uses a {@link TreeMap} sorted by the specified comparator to map keys to value collections.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in sorted order.
   *
   * <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be
   * safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be
   * cast to a {@link java.util.SortedMap}.
   *
   * <p>Multimaps generated by the resulting builder will not be serializable if {@code comparator}
   * is not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,enumKeys,com.google.common.collect.MultimapBuilder:enumKeys(java.lang.Class),168,179,"/**
* Creates a MultimapBuilderWithKeys instance for the given enum class.
* @param keyClass enum class to use as keys
* @return MultimapBuilderWithKeys instance
*/","* Uses an {@link EnumMap} to map keys to value collections.
   *
   * @since 16.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$AsMap:<init>(com.google.common.collect.Multimap),1879,1881,"/**
* Initializes the map from a Multimap instance.
* @param multimap input Multimap to populate the map with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,forEach,com.google.common.collect.Multimaps$Keys:forEach(java.util.function.Consumer),1766,1770,"/**
* Iterates over each key in the multimap, applying the provided consumer to each.
* @param consumer function to apply to each key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$MapMultimap:<init>(java.util.Map),1143,1145,"/**
 * Initializes the multimap with a given input map.
 * @param map the input map to use as the backing data structure
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$TransformedEntriesMultimap:<init>(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer)",1506,1510,"/**
* Creates a multimap of transformed entries.
* @param fromMultimap original multimap to transform
* @param transformer entry transformation function
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableMultimap,com.google.common.collect.Multimaps:unmodifiableMultimap(com.google.common.collect.ImmutableMultimap),670,676,"/**
* Wraps an immutable multimap as an unmodifiable view.
* @param delegate ImmutableMultimap instance to wrap
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableSetMultimap,com.google.common.collect.Multimaps:unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap),937,944,"/**
* Returns an unmodifiable view of the given set multimap.
* @param delegate underlying immutable set multimap
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableListMultimap,com.google.common.collect.Multimaps:unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap),1021,1028,"/**
* Returns an unmodifiable view of the given list multimap.
* @param delegate the list multimap to be wrapped
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multiset.java,forEachEntry,com.google.common.collect.Multiset:forEachEntry(java.util.function.ObjIntConsumer),347,350,"/**
* Iterates over each entry in the collection, applying the given consumer to each element and count.
* @param action consumer function to be applied to each entry
*/","* Runs the specified action for each distinct element in this multiset, and the number of
   * occurrences of that element. For some {@code Multiset} implementations, this may be more
   * efficient than iterating over the {@link #entrySet()} either explicitly or with {@code
   * entrySet().forEach(action)}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multiset.java,forEach,com.google.common.collect.Multiset:forEach(java.util.function.Consumer),467,479,"/**
* Applies a consumer to each element in the collection, repeating it the specified count.
* @param action Consumer to apply to each element
*/","* {@inheritDoc}
   *
   * <p>Elements that occur multiple times in the multiset will be passed to the {@code Consumer}
   * correspondingly many times, though not necessarily sequentially.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,<init>,"com.google.common.collect.Multisets$FilteredMultiset:<init>(com.google.common.collect.Multiset,com.google.common.base.Predicate)",333,336,"/**
* Constructs a filtered multiset from an unfiltered collection and a predicate.
* @param unfiltered the original multiset
* @param predicate the filter condition
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,unmodifiableMultiset,com.google.common.collect.Multisets:unmodifiableMultiset(com.google.common.collect.ImmutableMultiset),122,128,"/**
* Returns an unmodifiable view of the given immutable multiset.
* @param multiset immutable multiset to wrap
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,union,"com.google.common.collect.Multisets:union(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",416,473,"/**
* Merges two multisets into a new multiset containing all elements from both.
* @param multiset1 first multiset
* @param multiset2 second multiset
*/","* Returns an unmodifiable view of the union of two multisets. In the returned multiset, the count
   * of each element is the <i>maximum</i> of its counts in the two backing multisets. The iteration
   * order of the returned multiset matches that of the element set of {@code multiset1} followed by
   * the members of the element set of {@code multiset2} that are not contained in {@code
   * multiset1}, with repeated occurrences of the same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,intersection,"com.google.common.collect.Multisets:intersection(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",487,529,"/**
* Computes the intersection of two Multisets.
* @param multiset1 first Multiset
* @param multiset2 second Multiset
* @return new Multiset containing elements present in both input sets
*/","* Returns an unmodifiable view of the intersection of two multisets. In the returned multiset,
   * the count of each element is the <i>minimum</i> of its counts in the two backing multisets,
   * with elements that would have a count of 0 not included. The iteration order of the returned
   * multiset matches that of the element set of {@code multiset1}, with repeated occurrences of the
   * same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,sum,"com.google.common.collect.Multisets:sum(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",543,605,"/**
* Sums two multiset instances.
* @param multiset1 first multiset to sum
* @param multiset2 second multiset to sum
* @return new Multiset containing the combined elements and counts
*/","* Returns an unmodifiable view of the sum of two multisets. In the returned multiset, the count
   * of each element is the <i>sum</i> of its counts in the two backing multisets. The iteration
   * order of the returned multiset matches that of the element set of {@code multiset1} followed by
   * the members of the element set of {@code multiset2} that are not contained in {@code
   * multiset1}, with repeated occurrences of the same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,difference,"com.google.common.collect.Multisets:difference(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",619,679,"/**
* Computes the difference between two multisets.
* @param multiset1 first multiset
* @param multiset2 second multiset (elements in this set are subtracted from multiset1)
* @return new Multiset representing elements present in multiset1 but not in multiset2","* Returns an unmodifiable view of the difference of two multisets. In the returned multiset, the
   * count of each element is the result of the <i>zero-truncated subtraction</i> of its count in
   * the second multiset from its count in the first multiset, with elements that would have a count
   * of 0 not included. The iteration order of the returned multiset matches that of the element set
   * of {@code multiset1}, with repeated occurrences of the same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,containsOccurrences,"com.google.common.collect.Multisets:containsOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",687,698,"/**
* Checks if a multiset contains all occurrences of another multiset.
* @param superMultiset the superset to search in
* @param subMultiset the subset to find occurrences of
* @return true if the subset is contained, false otherwise
*/","* Returns {@code true} if {@code subMultiset.count(o) <= superMultiset.count(o)} for all {@code
   * o}.
   *
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,retainOccurrencesImpl,"com.google.common.collect.Multisets:retainOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",723,742,"/**
* Retains occurrences of elements in one multiset based on their counts in another.
* @param multisetToModify the multiset to modify
* @param occurrencesToRetain the multiset specifying desired occurrence counts
* @return true if modifications were made, false otherwise
*/",Delegate implementation which cares about the element type.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,removeOccurrences,"com.google.common.collect.Multisets:removeOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",805,825,"/**
* Removes specified occurrences from a Multiset.
* @param multisetToModify the Multiset to modify
* @param occurrencesToRemove the occurrences to remove
* @return true if any elements were removed, false otherwise
*/","* For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one
   * occurrence of {@code e} in {@code multisetToModify}.
   *
   * <p>Equivalently, this method modifies {@code multisetToModify} so that {@code
   * multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) -
   * occurrencesToRemove.count(e))}.
   *
   * <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll
   * removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear
   * in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit
   * sometimes more efficient than, the following:
   *
   * {@snippet :
   * for (E e : occurrencesToRemove) {
   *   multisetToModify.remove(e);
   * }
   * }
   *
   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation
   * @since 10.0 (missing in 18.0 when only the overload taking an {@code Iterable} was present)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,retainAllImpl,"com.google.common.collect.Multisets:retainAllImpl(com.google.common.collect.Multiset,java.util.Collection)",931,939,"/**
* Removes excess elements from the multiset, keeping only those present in the specified collection.
* @param elementsToRetain Collection of elements to retain
*/",An implementation of {@link Multiset#retainAll}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,compare,"com.google.common.collect.NaturalOrdering:compare(java.lang.Comparable,java.lang.Comparable)",37,43,"/**
* Compares two objects using their natural ordering.
* @param left the first object to compare
* @param right the second object to compare
* @return a negative integer if left is less than right, zero if equal, or positive if greater
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,from,com.google.common.collect.Ordering:from(com.google.common.collect.Ordering),203,209,"/**
* Wraps an existing Ordering instance, ensuring it's not null.
* @param ordering the Ordering instance to wrap
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drain,"com.google.common.collect.Queues:drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit)",313,346,"/**
* Drains a specified number of elements from the blocking queue into the provided collection.
* @param q the blocking queue to drain from
* @param buffer the collection to add drained elements to
* @param numElements the maximum number of elements to drain
* @param timeout the time to wait for elements, in the given unit
* @return the number of elements successfully added to the buffer","* Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code
   * numElements} elements are not available, it will wait for them up to the specified timeout.
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up, in units of {@code unit}
   * @param unit a {@code TimeUnit} determining how to interpret the timeout parameter
   * @return the number of elements transferred
   * @throws InterruptedException if interrupted while waiting",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drainUninterruptibly,"com.google.common.collect.Queues:drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit)",383,425,"/**
* Drains a specified number of elements from the blocking queue into the provided buffer.
* @param q BlockingQueue to drain from
* @param buffer Collection to store drained elements
* @param numElements Number of elements to drain
* @param timeout Timeout duration in specified unit
* @param unit Time unit for timeout
* @return Number of elements successfully added to the buffer
*/","* Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, long, TimeUnit)}, but
   * with a different behavior in case it is interrupted while waiting. In that case, the operation
   * will continue as usual, and in the end the thread's interruption status will be set (no {@code
   * InterruptedException} is thrown).
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up, in units of {@code unit}
   * @param unit a {@code TimeUnit} determining how to interpret the timeout parameter
   * @return the number of elements transferred",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,contains,com.google.common.collect.Range:contains(java.lang.Comparable),407,411,"/**
* Checks if a given value falls within the bounds.
* @param value value to search for
*/","* Returns {@code true} if {@code value} is within the bounds of this range. For example, on the
   * range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)}
   * returns {@code false}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,forEach,com.google.common.collect.RegularImmutableBiMap:forEach(java.util.function.BiConsumer),165,171,"/**
* Applies a user-defined operation to each entry in the map.
* @param action BiConsumer function to process key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,forEach,com.google.common.collect.RegularImmutableMap:forEach(java.util.function.BiConsumer),289,295,"/**
* Applies the given BiConsumer to each entry in the map.
* @param action a function that consumes key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,headIndex,"com.google.common.collect.RegularImmutableSortedSet:headIndex(java.lang.Object,boolean)",252,259,"/**
* Returns the index of the first occurrence of 'toElement' in the collection.
* If 'inclusive' is true, returns the index if found; otherwise, returns the insertion point.
* @param toElement element to search for
* @param inclusive whether to return the actual index or the insertion point
* @return index or insertion point (-index-1)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,tailIndex,"com.google.common.collect.RegularImmutableSortedSet:tailIndex(java.lang.Object,boolean)",272,279,"/**
* Returns the index of the specified element or its tail in the sorted list.
* @param fromElement the target element
* @param inclusive true to include the element itself, false for its tail
* @return index of the element or its tail (negative if not found)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseNaturalOrdering.java,compare,"com.google.common.collect.ReverseNaturalOrdering:compare(java.lang.Comparable,java.lang.Comparable)",32,41,"/**
* Compares two Comparable objects.
* @param left the first object to compare
* @param right the second object to compare
* @return a negative value if left is less than right, 0 if equal, or positive if greater
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,retainAll,com.google.common.collect.Sets$ImprovedAbstractSet:retainAll(java.util.Collection),89,92,"/**
* Retains all elements from the specified collection.
* @param c collection to retain elements from
* @return true if any elements were retained, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newTreeSet,com.google.common.collect.Sets:newTreeSet(java.util.Comparator),438,442,"/**
* Creates a new TreeSet instance with the specified comparator.
* @param comparator comparison function for ordering elements
*/","* Creates a <i>mutable</i>, empty {@code TreeSet} instance with the given comparator.
   *
   * <p><b>Note:</b> if mutability is not required, use {@code
   * ImmutableSortedSet.orderedBy(comparator).build()} instead.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,
   * use the {@code TreeSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>. One caveat to this is that the {@code TreeSet} constructor uses a null {@code
   * Comparator} to mean ""natural ordering,"" whereas this factory rejects null. Clean your code
   * accordingly.
   *
   * @param comparator the comparator to use to sort the set
   * @return a new, empty {@code TreeSet}
   * @throws NullPointerException if {@code comparator} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,forEach,com.google.common.collect.SingletonImmutableBiMap:forEach(java.util.function.BiConsumer),67,70,"/**
* Applies a given BiConsumer to the key-value pair of the stored entry.
* @param action consumer function to apply to the entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$ColumnKeySet:retainAll(java.util.Collection),736,751,"/**
* Removes mappings in this multimap whose keys are not present in the given collection.
* @param c collection of keys to retain
* @return true if any mappings were removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,zip,"com.google.common.collect.Streams:zip(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiFunction)",332,363,"/**
* Combines two streams into one, applying a function to each pair of elements.
* @param streamA first input stream
* @param streamB second input stream
* @param function BiFunction to apply to each pair of elements
* @return Stream of combined results or null if either input stream is empty
*/","* Returns a stream in which each element is the result of passing the corresponding element of
   * each of {@code streamA} and {@code streamB} to {@code function}.
   *
   * <p>For example:
   *
   * {@snippet :
   * Streams.zip(
   *   Stream.of(""foo1"", ""foo2"", ""foo3""),
   *   Stream.of(""bar1"", ""bar2""),
   *   (arg1, arg2) -> arg1 + "":"" + arg2)
   * }
   *
   * <p>will return {@code Stream.of(""foo1:bar1"", ""foo2:bar2"")}.
   *
   * <p>The resulting stream will only be as long as the shorter of the two input streams; if one
   * stream is longer, its extra elements will be ignored.
   *
   * <p>Note that if you are calling {@link Stream#forEach} on the resulting stream, you might want
   * to consider using {@link #forEachPair} instead of this method.
   *
   * <p><b>Performance note:</b> The resulting stream is not <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>.
   * This may harm parallel performance.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.Stream,com.google.common.collect.Streams$FunctionWithIndex)",444,503,"/**
* Maps a stream of elements to a new stream with index-based transformation.
* @param stream input stream of elements
* @param function mapping function that takes element and index as parameters
* @return mapped stream of transformed elements
*/","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indices in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     Stream.of(""a"", ""b"", ""c""),
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>would return {@code Stream.of(""0:a"", ""1:b"", ""2:c"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.IntStream,com.google.common.collect.Streams$IntFunctionWithIndex)",527,582,"/**
* Maps IntStream to a stream of objects using the provided function with index.
* @param stream IntStream to process
* @param function IntFunctionWithIndex to apply to each element
* @return Stream of mapped objects or null if not found
*/","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indexes in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     IntStream.of(10, 11, 12),
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>...would return {@code Stream.of(""0:10"", ""1:11"", ""2:12"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.LongStream,com.google.common.collect.Streams$LongFunctionWithIndex)",606,661,"/**
* Maps a LongStream to a Stream of arbitrary objects using a function that takes an index.
* @param stream input LongStream
* @param function mapping function with index as second parameter
* @return Stream of mapped values or null if not found
*/","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indexes in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     LongStream.of(10, 11, 12),
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>...would return {@code Stream.of(""0:10"", ""1:11"", ""2:12"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.DoubleStream,com.google.common.collect.Streams$DoubleFunctionWithIndex)",685,740,"/**
* Maps DoubleStream to a stream of arbitrary objects with an index.
* @param stream input double stream
* @param function mapping function that takes a double and index
* @return Stream of mapped objects
*/","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indexes in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     DoubleStream.of(0.0, 1.0, 2.0)
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>...would return {@code Stream.of(""0:0.0"", ""1:1.0"", ""2:2.0"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedObject:<init>(java.lang.Object,java.lang.Object)",85,88,"/**
* Initializes synchronized object with given delegate and optional mutex.
* @param delegate object to synchronize
* @param mutex synchronization mutex or null for default synchronization
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toTable,"com.google.common.collect.TableCollectors:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)",102,135,"/**
* Converts stream into a table with specified row, column, and value functions.
* @param rowFunction function to generate row key
* @param columnFunction function to generate column key
* @param valueFunction function to generate table cell value
* @param mergeFunction binary operator for merging cells with duplicate keys
* @param tableSupplier supplier of the underlying table object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,mergeTables,"com.google.common.collect.TableCollectors:mergeTables(com.google.common.collect.Table,java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)",203,221,"/**
* Merges a new table value with an existing one using the provided merge function.
* @param table the Table instance to update
* @param row the key for the merging operation (row)
* @param column the key for the merging operation (column)
* @param value the new value to merge
* @param mergeFunction a BinaryOperator to apply on existing and new values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,"com.google.common.collect.Tables$TransformedTable:<init>(com.google.common.collect.Table,com.google.common.base.Function)",420,423,"/**
* Transforms table data using a given function.
* @param fromTable input table with rows of type R and columns of type C
* @param function transformation function to apply on each row's value V1
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,com.google.common.collect.Tables$TransposeTable:<init>(com.google.common.collect.Table),225,227,"/**
* Transposes the given table.
* @param original Table to transpose; must not be null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedIterator.java,<init>,com.google.common.collect.TransformedIterator:<init>(java.util.Iterator),36,38,"/**
* Creates a transformed iterator from an existing iterator.
* @param backingIterator original iterator to transform
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,put,"com.google.common.collect.TreeRangeMap$1:put(com.google.common.collect.Range,java.lang.Object)",137,144,"/**
* Inserts a value into the map for the specified range.
* @param range non-empty range with lower bound
* @param value value to be inserted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putCoalescing,"com.google.common.collect.TreeRangeMap$1:putCoalescing(com.google.common.collect.Range,java.lang.Object)",146,156,"/**
* Puts a value into the map with coalescing range logic.
* @param range range to consider for coalescing
* @param value value to store
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$1:remove(com.google.common.collect.Range),211,259,"/**
* Removes the specified range from this RangeMap.
* @param rangeToRemove the range to remove
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,merge,"com.google.common.collect.TreeRangeMap$1:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)",283,335,"/**
* Merges a range of entries into the existing map.
* @param range the merge range
* @param value the unmapped value to fill gaps in the merge range
* @param remappingFunction function to remap existing values in the merge range
*/",* @since 28.1,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,subRangeMap,com.google.common.collect.TreeRangeMap$1:subRangeMap(com.google.common.collect.Range),384,391,"/**
* Creates a sub-range map from the given range.
* @param subRange Range object defining the subset of data
* @return RangeMap instance or this if the full range is requested
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,<init>,"com.google.common.collect.TreeTraverser$PostOrderNode:<init>(java.lang.Object,java.util.Iterator)",214,217,"/**
* Initializes PostOrderNode with given root node and child iterator.
* @param root root node of the tree
* @param childIterator iterator over children nodes
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,next,com.google.common.collect.TreeTraverser$PreOrderIterator:next(),158,170,"/**
* Advances to the next element in the iteration, processing its children.
* @return The current element or null if exhausted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,using,com.google.common.collect.TreeTraverser:using(com.google.common.base.Function),93,103,"/**
* Creates a TreeTraverser using the provided function to fetch children from each node.
* @param nodeToChildrenFunction function that returns children of a given node
*/","* Returns a tree traverser that uses the given function to navigate from a node to its children.
   * This is useful if the function instance already exists, or so that you can supply a lambda
   * expressions. If those circumstances don't apply, you probably don't need to use this; subclass
   * {@code TreeTraverser} and implement its {@link #children} method directly.
   *
   * @since 20.0
   * @deprecated Use {@link com.google.common.graph.Traverser#forTree} instead. If you are using a
   *     lambda, these methods have exactly the same signature.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,preOrderTraversal,com.google.common.collect.TreeTraverser:preOrderTraversal(java.lang.Object),118,139,"/**
* Performs a pre-order traversal of the tree rooted at the given node.
* @param root the root node of the tree
* @return an iterable containing the nodes in pre-order
*/","* Returns an unmodifiable iterable over the nodes in a tree structure, using pre-order traversal.
   * That is, each node's subtrees are traversed after the node itself is returned.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration
   * is in progress or when the iterators generated by {@link #children} are advanced.
   *
   * @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPreOrder} instead, which has
   *     the same behavior.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,postOrderTraversal,com.google.common.collect.TreeTraverser:postOrderTraversal(java.lang.Object),183,204,"/**
* Performs a post-order traversal of the tree rooted at the given node.
* @param root The root node of the tree to traverse
*/","* Returns an unmodifiable iterable over the nodes in a tree structure, using post-order
   * traversal. That is, each node's subtrees are traversed before the node itself is returned.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration
   * is in progress or when the iterators generated by {@link #children} are advanced.
   *
   * @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPostOrder} instead, which
   *     has the same behavior.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,breadthFirstTraversal,com.google.common.collect.TreeTraverser:breadthFirstTraversal(java.lang.Object),258,267,"/**
* Performs a breadth-first traversal of the tree rooted at the specified node.
* @param root the root node of the tree to traverse
*/","* Returns an unmodifiable iterable over the nodes in a tree structure, using breadth-first
   * traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration
   * is in progress or when the iterators generated by {@link #children} are advanced.
   *
   * @deprecated Use {@link com.google.common.graph.Traverser#breadthFirst} instead, which has the
   *     same behavior.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedCharEscaper.java,escape,com.google.common.escape.ArrayBasedCharEscaper:escape(java.lang.String),103,113,"/**
* Escapes potentially hazardous characters in a string.
* @param s input string to be sanitized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedEscaperMap.java,createReplacementArray,com.google.common.escape.ArrayBasedEscaperMap:createReplacementArray(java.util.Map),66,78,"/**
* Creates a replacement array from the given character-to-string mapping.
* @param map key-value pairs where each key is a character and value is its replacement string
* @return a 2D char array representing the replacement strings, or EMPTY_REPLACEMENT_ARRAY if input map is empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedUnicodeEscaper.java,escape,com.google.common.escape.ArrayBasedUnicodeEscaper:escape(java.lang.String),142,154,"/**
* Escapes potentially problematic characters in a string.
* @param s input string to sanitize
* @return sanitized string or original if no issues found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,addEscape,"com.google.common.escape.CharEscaperBuilder:addEscape(char,java.lang.String)",84,91,"/**
* Adds custom escape character and replacement string.
* @param c the character to be escaped
* @param r the replacement string
*/",Add a new mapping from an index to an object to the escaping.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,addEscape,"com.google.common.escape.Escapers$Builder:addEscape(char,java.lang.String)",140,146,"/**
* Adds a character to be escaped with its replacement string.
* @param c character to escape
* @param replacement string to use as replacement for the character
*/","* Adds a replacement string for the given input character. The specified character will be
     * replaced by the given string whenever it occurs in the input, irrespective of whether it lies
     * inside or outside the 'safe' range.
     *
     * @param c the character to be replaced
     * @param replacement the string to replace the given character
     * @return the builder instance
     * @throws NullPointerException if {@code replacement} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,codePointAt,"com.google.common.escape.UnicodeEscaper:codePointAt(java.lang.CharSequence,int,int)",245,286,"/**
* Fetches Unicode code point at specified index within the given CharSequence.
* @param seq input sequence to process
* @param index current position to evaluate
* @param end end of valid sequence indices
* @return Unicode code point value or throws exception if invalid
*/","* Returns the Unicode code point of the character at the given index.
   *
   * <p>Unlike {@link Character#codePointAt(CharSequence, int)} or {@link String#codePointAt(int)}
   * this method will never fail silently when encountering an invalid surrogate pair.
   *
   * <p>The behaviour of this method is as follows:
   *
   * <ol>
   *   <li>If {@code index >= end}, {@link IndexOutOfBoundsException} is thrown.
   *   <li><b>If the character at the specified index is not a surrogate, it is returned.</b>
   *   <li>If the first character was a high surrogate value, then an attempt is made to read the
   *       next character.
   *       <ol>
   *         <li><b>If the end of the sequence was reached, the negated value of the trailing high
   *             surrogate is returned.</b>
   *         <li><b>If the next character was a valid low surrogate, the code point value of the
   *             high/low surrogate pair is returned.</b>
   *         <li>If the next character was not a low surrogate value, then {@link
   *             IllegalArgumentException} is thrown.
   *       </ol>
   *   <li>If the first character was a low surrogate value, {@link IllegalArgumentException} is
   *       thrown.
   * </ol>
   *
   * @param seq the sequence of characters from which to decode the code point
   * @param index the index of the first character to decode
   * @param end the index beyond the last valid character to decode
   * @return the Unicode code point for the given index or the negated value of the trailing high
   *     surrogate character at the end of the sequence",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/DeadEvent.java,<init>,"com.google.common.eventbus.DeadEvent:<init>(java.lang.Object,java.lang.Object)",41,44,"/**
* Initializes a DeadEvent object with source and event.
* @param source the source of the event
* @param event the event occurrence
*/","* Creates a new DeadEvent.
   *
   * @param source object broadcasting the DeadEvent (generally the {@link EventBus}).
   * @param event the event that could not be delivered.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,handleSubscriberException,"com.google.common.eventbus.EventBus:handleSubscriberException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext)",216,228,"/**
* Handles subscriber exceptions by invoking the configured handler and logging any subsequent errors.
* @param e the original exception
* @param context SubscriberExceptionContext containing relevant information
*/",Handles the given exception thrown by a subscriber with the given context.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,invokeSubscriberMethod,com.google.common.eventbus.Subscriber:invokeSubscriberMethod(java.lang.Object),81,95,"/**
* Invokes subscriber method with given event.
* @param event event object to pass to the method
*/","* Invokes the subscriber method. This method can be overridden to make the invocation
   * synchronized.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberExceptionContext.java,<init>,"com.google.common.eventbus.SubscriberExceptionContext:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.Object,java.lang.reflect.Method)",39,45,"/**
* Creates a SubscriberExceptionContext instance with the given event bus, event, subscriber, and subscriber method.
* @param eventBus EventBus instance
* @param event event object
* @param subscriber subscriber object
* @param subscriberMethod subscriber's method that threw an exception
*/","* @param eventBus The {@link EventBus} that handled the event and the subscriber. Useful for
   *     broadcasting a new event based on the error.
   * @param event The event object that caused the subscriber to throw.
   * @param subscriber The source subscriber context.
   * @param subscriberMethod the subscribed method.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,"com.google.common.graph.AbstractBaseGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",157,162,"/**
* Checks if there's an edge connecting two nodes.
* @param nodeU first node
* @param nodeV second node
* @return true if connected, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,hasEdgeConnecting,"com.google.common.graph.AbstractNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)",224,229,"/**
* Checks if two nodes are connected by an edge.
* @param nodeU first node
* @param nodeV second node
* @return true if connected, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,<init>,com.google.common.graph.AbstractUndirectedNetworkConnections:<init>(java.util.Map),39,41,"/**
* Initializes abstract undirected network connections from edge map.
* @param incidentEdgeMap mapping of edges to their vertices
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,com.google.common.graph.DirectedGraphConnections$NodeConnection:<init>(java.lang.Object),75,77,"/**
* Initializes a new NodeConnection instance with a given node.
* @param node non-null node object to connect to
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,value,com.google.common.graph.DirectedGraphConnections:value(java.lang.Object),413,425,"/**
* Retrieves the node's value, handling various data types and edge cases.
* @param node Node object to fetch value from
* @return Value associated with the node, or null if PRED
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,<init>,"com.google.common.graph.EdgesConnecting:<init>(java.util.Map,java.lang.Object)",42,45,"/**
* Initializes the edges connecting to a target node.
* @param nodeToEdgeMap map of nodes to their outgoing edges
* @param targetNode object representing the target node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,<init>,"com.google.common.graph.EndpointPair:<init>(java.lang.Object,java.lang.Object)",46,49,"/**
* Constructs an endpoint pair with given nodes U and V.
* @param nodeU non-null source node
* @param nodeV non-null target node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,copyOf,com.google.common.graph.ImmutableGraph:copyOf(com.google.common.graph.ImmutableGraph),71,77,"/**
* Creates an immutable graph copy from the provided graph.
* @param graph input graph to copy, must not be null
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,copyOf,com.google.common.graph.ImmutableNetwork:copyOf(com.google.common.graph.ImmutableNetwork),69,75,"/**
* Copies an immutable network object.
* @param network the original network to copy (must not be null)
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,copyOf,com.google.common.graph.ImmutableValueGraph:copyOf(com.google.common.graph.ImmutableValueGraph),66,72,"/**
* Creates a deep copy of the given immutable value graph.
* @param graph the graph to copy (must not be null)
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,<init>,com.google.common.graph.MapIteratorCache:<init>(java.util.Map),58,60,"/**
 * Initializes the iterator cache with an underlying map.
 * @param backingMap non-null map to cache iterators from
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,getWithoutCaching,com.google.common.graph.MapIteratorCache:getWithoutCaching(java.lang.Object),93,96,"/**
 * Retrieves value associated with given key from underlying map without caching.
 * @param key object to look up in map
 * @return V object or null if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MultiEdgesConnecting.java,<init>,"com.google.common.graph.MultiEdgesConnecting:<init>(java.util.Map,java.lang.Object)",43,46,"/**
* Initializes multi-edge connection by setting output edges to nodes and target node.
* @param outEdgeToNode map of outgoing edges to their destinations
* @param targetNode the target node for edge connections
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,visitNext,com.google.common.graph.Traverser$Traversal$2:visitNext(java.util.Deque),480,480,"/**
* Visits and returns next node in the traversal, 
* advancing all iterators in the horizon.","* Visits the next node from the top iterator of {@code horizon} and returns the visited node.
     * Null is returned to indicate reaching the end of the top iterator.
     *
     * <p>For example, if horizon is {@code [[a, b], [c, d], [e]]}, {@code visitNext()} will return
     * {@code [a, b, null, c, d, null, e, null]} sequentially, encoding the topological structure.
     * (Note, however, that the callers of {@code visitNext()} often insert additional iterators
     * into {@code horizon} between calls to {@code visitNext()}. This causes them to receive
     * additional values interleaved with those shown above.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,<init>,com.google.common.graph.Traverser:<init>(com.google.common.graph.SuccessorsFunction),70,72,"/**
* Initializes Traverser instance with SuccessorsFunction.
* @param successorFunction function to compute successors of a node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,<init>,com.google.common.graph.UndirectedGraphConnections:<init>(java.util.Map),43,45,"/**
* Initializes graph connections with given node values.
* @param adjacentNodeValues map of nodes to their adjacent values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,<init>,com.google.common.hash.Funnels$SequentialFunnel:<init>(com.google.common.hash.Funnel),182,184,"/**
* Initializes the sequential funnel with the provided element funnel.
* @param elementFunnel funnel containing elements to sequence through
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,<init>,com.google.common.hash.Funnels$SinkAsStream:<init>(com.google.common.hash.PrimitiveSink),253,255,"/**
* Initializes a new instance with the specified sink.
* @param sink PrimitiveSink to write data into
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,<init>,com.google.common.hash.Funnels$StringCharsetFunnel:<init>(java.nio.charset.Charset),93,95,"/**
* Initializes the charset funnel with the specified charset.
* @param charset the character encoding to use
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingInputStream.java,<init>,"com.google.common.hash.HashingInputStream:<init>(com.google.common.hash.HashFunction,java.io.InputStream)",41,44,"/**
* Initializes a new instance of HashingInputStream with the specified hash function and input stream.
* @param hashFunction hashing algorithm to be applied
* @param in underlying input stream
*/","* Creates an input stream that hashes using the given {@link HashFunction} and delegates all data
   * read from it to the underlying {@link InputStream}.
   *
   * <p>The {@link InputStream} should not be read from before or after the hand-off.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingOutputStream.java,<init>,"com.google.common.hash.HashingOutputStream:<init>(com.google.common.hash.HashFunction,java.io.OutputStream)",44,47,"/**
* Initializes a new HashingOutputStream with the specified hash function and output stream.
* @param hashFunction hashing algorithm to use
* @param out target output stream for hashed data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,<init>,com.google.common.io.AppendableWriter:<init>(java.lang.Appendable),46,48,"/**
 * Initializes an AppendableWriter instance with a specified target.
 * @param target the Appendable to write to; must not be null
 */","* Creates a new writer that appends everything it writes to {@code target}.
   *
   * @param target target to which to append output",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodingStream,com.google.common.io.BaseEncoding$StandardBaseEncoding:encodingStream(java.io.Writer),637,681,"/**
* Returns an OutputStream that encodes data into the specified Writer.
* @param out target writer for encoded output
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,trimTrailingPadding,com.google.common.io.BaseEncoding$StandardBaseEncoding:trimTrailingPadding(java.lang.CharSequence),722,736,"/**
* Trims trailing padding characters from the input CharSequence.
* @param chars input sequence to trim
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodingStream,com.google.common.io.BaseEncoding$StandardBaseEncoding:decodingStream(java.io.Reader),778,849,"/**
* Creates an InputStream that decodes input from a Reader, using the provided Alphabet.
* @param reader input source, must not be null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodingSink,com.google.common.io.BaseEncoding:encodingSink(com.google.common.io.CharSink),177,187,"/**
* Creates a byte sink that wraps the provided character sink for encoding.
* @param encodedSink character sink to be encoded into bytes
*/",* Returns a {@code ByteSink} that writes base-encoded bytes to the specified {@code CharSink}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodingSource,com.google.common.io.BaseEncoding:decodingSource(com.google.common.io.CharSource),250,260,"/**
* Creates a ByteSource instance from a CharSource, applying decoding.
* @param encodedSource source with encoded data
*/","* Returns a {@code ByteSource} that reads base-encoded bytes from the specified {@code
   * CharSource}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,trimTrailingPadding,com.google.common.io.BaseEncoding:trimTrailingPadding(java.lang.CharSequence),272,274,"/**
* Removes trailing padding from input character sequence.
* @param chars input character sequence to be trimmed
* @return trimmed character sequence or null if input is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,ignoringReader,"com.google.common.io.BaseEncoding:ignoringReader(java.io.Reader,java.lang.String)",1055,1080,"/**
* Ignores specified characters from the input stream.
* @param delegate underlying Reader to read from
* @param toIgnore characters to skip in the stream
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,<init>,com.google.common.io.CharSequenceReader:<init>(java.lang.CharSequence),46,48,"/**
* Constructs a Reader instance from a CharSequence.
* @param seq input sequence to read from (must not be null)
*/",Creates a new reader wrapping the given character sequence.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,com.google.common.io.CharStreams$NullWriter:write(char[]),290,293,"/**
* Writes characters to output stream using provided character buffer.
* @param cbuf array of characters to be written
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,com.google.common.io.CharStreams$NullWriter:write(java.lang.String),300,303,"/**
* Writes a string to the underlying output stream.
* @param str input string to be written (must not be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,copyReaderToBuilder,"com.google.common.io.CharStreams:copyReaderToBuilder(java.io.Reader,java.lang.StringBuilder)",112,124,"/**
* Copies character data from a Reader to a StringBuilder.
* @param from Reader source
* @param to StringBuilder destination
* @return number of characters copied
*/","* Copies all characters between the {@link Reader} and {@link StringBuilder} objects. Does not
   * close or flush the reader.
   *
   * <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific
   * types. CharBuffer has poor performance when being written into or read out of so round tripping
   * all the bytes through the buffer takes a long time. With these specialized types we can just
   * use a char array.
   *
   * @param from the object to read from
   * @param to the object to write to
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,copyReaderToWriter,"com.google.common.io.CharStreams:copyReaderToWriter(java.io.Reader,java.io.Writer)",140,152,"/**
* Copies readable content from one reader to another writer.
* @param from input Reader object
* @param to output Writer object
* @return total characters copied or -1 if an error occurs
*/","* Copies all characters between the {@link Reader} and {@link Writer} objects. Does not close or
   * flush the reader or writer.
   *
   * <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific
   * types. CharBuffer has poor performance when being written into or read out of so round tripping
   * all the bytes through the buffer takes a long time. With these specialized types we can just
   * use a char array.
   *
   * @param from the object to read from
   * @param to the object to write to
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,skipFully,"com.google.common.io.CharStreams:skipFully(java.io.Reader,long)",258,267,"/**
* Skips fully over the specified number of characters in the given reader.
* @param reader input stream
* @param n number of characters to skip
* @throws IOException if an I/O error occurs or end of file is reached
*/","* Discards {@code n} characters of data from the reader. This method will block until the full
   * amount has been skipped. Does not close the reader.
   *
   * @param reader the reader to read from
   * @param n the number of characters to skip
   * @throws EOFException if this stream reaches the end before skipping all the characters
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,<init>,com.google.common.io.Closer:<init>(com.google.common.io.Closer$Suppressor),95,98,"/**
* Initializes closer with provided supressor.
* @param suppressor Suppressor instance for error suppression
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CountingInputStream.java,<init>,com.google.common.io.CountingInputStream:<init>(java.io.InputStream),43,45,"/**
 * Initializes a new instance of CountingInputStream with the specified input stream.
 * @param in the input stream to be wrapped
 */","* Wraps another input stream, counting the number of bytes read.
   *
   * @param in the input stream to be wrapped",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CountingOutputStream.java,<init>,com.google.common.io.CountingOutputStream:<init>(java.io.OutputStream),42,44,"/**
* Initializes CountingOutputStream with specified OutputStream.
* @param out target OutputStream to wrap
*/","* Wraps another output stream, counting the number of bytes written.
   *
   * @param out the output stream to be wrapped",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,newReader,"com.google.common.io.Files:newReader(java.io.File,java.nio.charset.Charset)",86,90,"/**
* Creates a buffered reader from a file with specified character set.
* @param file the input file
* @param charset the character encoding to use
* @return BufferedReader instance or throws FileNotFoundException if invalid
*/","* Returns a buffered reader that reads from a file using the given character set.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#newBufferedReader(java.nio.file.Path, Charset)}.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return the buffered reader",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,newWriter,"com.google.common.io.Files:newWriter(java.io.File,java.nio.charset.Charset)",104,108,"/**
* Creates a buffered writer to write to a specified file with a given character set.
* @param file the target file
* @param charset the encoding scheme for writing
*/","* Returns a buffered writer that writes to a file using the given character set.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#newBufferedWriter(java.nio.file.Path, Charset,
   * java.nio.file.OpenOption...)}.
   *
   * @param file the file to write to
   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return the buffered writer",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,touch,com.google.common.io.Files:touch(java.io.File),445,451,"/**
* Updates the creation and last modified times of a given file.
* @param file target file
*/","* Creates an empty file or updates the last updated timestamp on the same as the unix command of
   * the same name.
   *
   * @param file the file to create or update
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,createParentDirs,com.google.common.io.Files:createParentDirs(java.io.File),462,478,"/**
* Creates parent directories for the given file, if necessary.
* @param file file whose parents are potentially created
*/","* Creates any necessary but nonexistent parent directories of the specified file. Note that if
   * this operation fails it may have succeeded in creating some (but not all) of the necessary
   * parent directories.
   *
   * @throws IOException if an I/O error occurs, or if any necessary but nonexistent parent
   *     directories of the specified file could not be created.
   * @since 4.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,getFileExtension,com.google.common.io.Files:getFileExtension(java.lang.String),796,801,"/**
* Extracts file extension from full name.
* @param fullName complete file path
* @return file extension or empty string if none found
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Filename_extension"">file extension</a> for
   * the given file name, or the empty string if the file has no extension. The result does not
   * include the '{@code .}'.
   *
   * <p><b>Note:</b> This method simply returns everything after the last '{@code .}' in the file's
   * name as determined by {@link File#getName}. It does not account for any filesystem-specific
   * behavior that the {@link File} API does not already account for. For example, on NTFS it will
   * report {@code ""txt""} as the extension for the filename {@code ""foo.exe:.txt""} even though NTFS
   * will drop the {@code "":.txt""} part of the name when the file is actually created on the
   * filesystem due to NTFS's <a
   * href=""https://learn.microsoft.com/en-us/archive/blogs/askcore/alternate-data-streams-in-ntfs"">Alternate
   * Data Streams</a>.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,getNameWithoutExtension,com.google.common.io.Files:getNameWithoutExtension(java.lang.String),813,818,"/**
* Extracts the filename without extension.
* @param file full path to a file
*/","* Returns the file name without its <a
   * href=""http://en.wikipedia.org/wiki/Filename_extension"">file extension</a> or path. This is
   * similar to the {@code basename} unix command. The result does not include the '{@code .}'.
   *
   * @param file The name of the file to trim the extension from. This can be either a fully
   *     qualified file name (including a path) or just a file name.
   * @return The file name without its path or extension.
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,<init>,com.google.common.io.LittleEndianDataInputStream:<init>(java.io.InputStream),51,53,"/**
* Initializes a new LittleEndianDataInputStream from an input stream.
* @param in input stream to wrap
*/","* Creates a {@code LittleEndianDataInputStream} that wraps the given stream.
   *
   * @param in the stream to delegate to",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,<init>,com.google.common.io.LittleEndianDataOutputStream:<init>(java.io.OutputStream),46,48,"/**
* Constructs a LittleEndianDataOutputStream instance wrapping the given OutputStream.
* @param out the output stream to write data to
*/","* Creates a {@code LittleEndianDataOutputStream} that wraps the given stream.
   *
   * @param out the stream to delegate to",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,touch,com.google.common.io.MoreFiles:touch(java.nio.file.Path),389,407,"/**
* Updates file timestamp and creates a new file if it does not exist.
* @param path file path to update or create
*/","* Like the unix command of the same name, creates an empty file or updates the last modified
   * timestamp of the existing file at the given path to the current system time.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/PatternFilenameFilter.java,<init>,com.google.common.io.PatternFilenameFilter:<init>(java.util.regex.Pattern),53,55,"/**
* Initializes PatternFilenameFilter with a specified file name pattern.
* @param pattern regular expression to match against file names
*/","* Constructs a pattern file name filter object.
   *
   * @param pattern the pattern on which to filter file names",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,isPowerOfTwo,com.google.common.math.BigIntegerMath:isPowerOfTwo(java.math.BigInteger),72,75,"/**
* Checks if BigInteger is a power of two (2^n).
* @param x input number to verify
*/",Returns {@code true} if {@code x} represents a power of two.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/PercentEscaper.java,nextEscapeIndex,"com.google.common.net.PercentEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)",127,137,"/**
* Finds the next escape character index in a CharSequence.
* @param csq input string
* @param index starting search position
* @param end ending search position
* @return index of next non-escaped octet, or current index if all are escaped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/PercentEscaper.java,escape,com.google.common.net.PercentEscaper:escape(java.lang.String),143,154,"/**
* Escapes potentially malicious characters in a string.
* @param s input string to be sanitized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,forEach,com.google.common.primitives.ImmutableDoubleArray:forEach(java.util.function.DoubleConsumer),426,431,"/**
 * Iterates over an array and applies a DoubleConsumer to each element.
 * @param consumer callback function to process each double value
 */","* Invokes {@code consumer} for each value contained in this array, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,forEach,com.google.common.primitives.ImmutableIntArray:forEach(java.util.function.IntConsumer),421,426,"/**
* Iterates over an array range and applies a consumer function to each element.
* @param consumer IntConsumer function to be executed on each array element
*/","* Invokes {@code consumer} for each value contained in this array, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,forEach,com.google.common.primitives.ImmutableLongArray:forEach(java.util.function.LongConsumer),423,428,"/**
* Iterates over an array and applies the given LongConsumer to each element.
* @param consumer callback function to process each array element
*/","* Invokes {@code consumer} for each value contained in this array, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Primitives.java,isWrapperType,com.google.common.primitives.Primitives:isWrapperType(java.lang.Class),101,103,"/**
* Checks if given class type is a primitive wrapper (e.g. Integer, Double).
* @param type Class to check
*/","* Returns {@code true} if {@code type} is one of the nine primitive-wrapper types, such as {@link
   * Integer}.
   *
   * @see Class#isPrimitive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Primitives.java,wrap,com.google.common.primitives.Primitives:wrap(java.lang.Class),115,122,"/**
* Wraps a primitive class with its corresponding wrapper class.
* @param type the primitive class to wrap
* @return the wrapped class or the original if not found
*/","* Returns the corresponding wrapper type of {@code type} if it is a primitive type; otherwise
   * returns {@code type} itself. Idempotent.
   *
   * <pre>
   *     wrap(int.class) == Integer.class
   *     wrap(Integer.class) == Integer.class
   *     wrap(String.class) == String.class
   * </pre>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Primitives.java,unwrap,com.google.common.primitives.Primitives:unwrap(java.lang.Class),134,141,"/**
* Unwraps a wrapper class to its primitive equivalent.
* @param type the wrapper class to unwrap
* @return the unwrapped primitive class or the original if not found
*/","* Returns the corresponding primitive type of {@code type} if it is a wrapper type; otherwise
   * returns {@code type} itself. Idempotent.
   *
   * <pre>
   *     unwrap(Integer.class) == int.class
   *     unwrap(int.class) == int.class
   *     unwrap(String.class) == String.class
   * </pre>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,parseUnsignedByte,"com.google.common.primitives.UnsignedBytes:parseUnsignedByte(java.lang.String,int)",229,238,"/**
* Parses unsigned byte value from string using specified radix.
* @param string input string
* @param radix base to interpret the string in
* @return parsed unsigned byte value or throws NumberFormatException if out of range
*/","* Returns the unsigned {@code byte} value represented by a string with the given radix.
   *
   * @param string the string containing the unsigned {@code byte} representation to be parsed.
   * @param radix the radix to use while parsing {@code string}
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte} with
   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link
   *     Character#MAX_RADIX}.
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Byte#parseByte(String)})
   * @since 13.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,parseUnsignedInt,"com.google.common.primitives.UnsignedInts:parseUnsignedInt(java.lang.String,int)",360,369,"/**
* Parses a string representation of an unsigned int into a value.
* @param string input string
* @param radix input radix
* @return parsed unsigned int value or throws NFE if invalid
*/","* Returns the unsigned {@code int} value represented by a string with the given radix.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String, int)} instead.
   *
   * @param string the string containing the unsigned integer representation to be parsed.
   * @param radix the radix to use while parsing {@code s}; must be between {@link
   *     Character#MIN_RADIX} and {@link Character#MAX_RADIX}.
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int}, or
   *     if supplied radix is invalid.
   * @throws NullPointerException if {@code s} is null (in contrast to {@link
   *     Integer#parseInt(String)})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,<init>,"com.google.common.reflect.ClassPath$LocationInfo:<init>(java.io.File,java.lang.ClassLoader)",411,414,"/**
* Initializes location info with specified home directory and class loader.
* @param home the home directory of the application
* @param classloader the class loader to use for resource loading
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,<init>,"com.google.common.reflect.ClassPath$ResourceInfo:<init>(java.io.File,java.lang.String,java.lang.ClassLoader)",217,221,"/**
* Initializes a new ResourceInfo instance with the given file, resource name, and class loader.
* @param file  the underlying file
* @param resourceName  the name of the resource
* @param loader  the class loader to use for loading resources
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,<init>,com.google.common.reflect.Invokable:<init>(java.lang.reflect.AccessibleObject),68,72,"/**
* Sets the invokable object (e.g., method or field), checking for null input.
* @param member invokable object to set; must not be null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver$TypeVariableKey:<init>(java.lang.reflect.TypeVariable),554,556,"/**
* Constructs a TypeVariableKey from a given type variable.
* @param var the type variable to create the key from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,<init>,com.google.common.reflect.TypeToken:<init>(java.lang.reflect.Type),164,166,"/**
* Initializes a new TypeToken instance with the specified runtime type.
* @param type the runtime type to be associated with this token
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,usedInGenericType,com.google.common.reflect.Types$JavaVersion$2:usedInGenericType(java.lang.reflect.Type),642,642,"/**
* Determines the type used as a generic type in the given type.
* @param type the input type to analyze
* @return the type used as a generic type or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,getComponentType,com.google.common.reflect.Types:getComponentType(java.lang.reflect.Type),167,192,"/**
* Retrieves the component type of a given Type, recursively handling generics and wildcards.
* @param type input Type to analyze
* @return component Type or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,<init>,"com.google.common.util.concurrent.AbstractCatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,java.lang.Object)",70,75,"/**
* Wraps a future with an abstracted catching mechanism.
* @param inputFuture the underlying future to be caught
* @param exceptionType the type of exception to catch and return
* @param fallback the replacement value if an exception occurs",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,<init>,com.google.common.util.concurrent.AbstractFuture$Failure:<init>(java.lang.Throwable),163,165,"/**
* Sets the failure reason to the provided Throwable.
* @param exception the cause of the failure (cannot be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,<init>,"com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:<init>(long,java.util.concurrent.TimeUnit)",742,745,"/**
* Constructs a new schedule with specified delay and time unit.
* @param delay duration of the delay
* @param unit time unit for the delay (e.g. second, minute, hour)","* @param delay the time from now to delay execution
       * @param unit the time unit of the delay parameter",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,<init>,"com.google.common.util.concurrent.AbstractTransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Object)",62,65,"/**
* Configures an abstract transform future with the given input future and transformation function.
* @param inputFuture future containing data to be transformed
* @param function function to apply to the input data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,releaseResources,com.google.common.util.concurrent.AggregateFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason),336,347,"/**
* Releases resources associated with this instance.
* @param reason reason for releasing resources
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,<init>,com.google.common.util.concurrent.AtomicLongMap:<init>(java.util.concurrent.ConcurrentHashMap),64,66,"/**
* Initializes an AtomicLongMap instance from a ConcurrentHashMap.
* @param map underlying map of key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,updateAndGet,"com.google.common.util.concurrent.AtomicLongMap:updateAndGet(java.lang.Object,java.util.function.LongUnaryOperator)",145,153,"/**
* Updates and returns the new value of a mapped key using the provided function.
* @param key unique key identifier
* @param updaterFunction LongUnaryOperator to apply on existing or new value
* @return updated long value or null if computation fails
*/","* Updates the value currently associated with {@code key} with the specified function, and
   * returns the new value. If there is not currently a value associated with {@code key}, the
   * function is applied to {@code 0L}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndUpdate,"com.google.common.util.concurrent.AtomicLongMap:getAndUpdate(java.lang.Object,java.util.function.LongUnaryOperator)",162,174,"/**
* Updates and returns the mapped value using the provided function.
* @param key unique map key
* @param updaterFunction function to apply to the current value
* @return new mapped value or 0L if not present
*/","* Updates the value currently associated with {@code key} with the specified function, and
   * returns the old value. If there is not currently a value associated with {@code key}, the
   * function is applied to {@code 0L}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Callables.java,asAsyncCallable,"com.google.common.util.concurrent.Callables:asAsyncCallable(java.util.concurrent.Callable,com.google.common.util.concurrent.ListeningExecutorService)",49,56,"/**
* Converts a synchronous Callable to an asynchronous AsyncCallable.
* @param callable synchronous task to execute asynchronously
* @param executorService service for executing tasks in parallel
* @return AsyncCallable representing the asynchronous task
*/","* Creates an {@link AsyncCallable} from a {@link Callable}.
   *
   * <p>The {@link AsyncCallable} returns the {@link ListenableFuture} resulting from {@link
   * ListeningExecutorService#submit(Callable)}.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Callables.java,threadRenaming,"com.google.common.util.concurrent.Callables:threadRenaming(java.util.concurrent.Callable,com.google.common.base.Supplier)",66,84,"/**
* Renames the current thread and executes a Callable.
* @param callable function to execute
* @param nameSupplier supplier of new thread name
* @return result of callable or null if not found
*/","* Wraps the given callable such that for the duration of {@link Callable#call} the thread that is
   * running will have the given name.
   *
   * @param callable The callable to wrap
   * @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once
   *     for each invocation of the wrapped callable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Callables.java,threadRenaming,"com.google.common.util.concurrent.Callables:threadRenaming(java.lang.Runnable,com.google.common.base.Supplier)",94,111,"/**
* Renames the current thread and executes a Runnable task.
* @param task Runnable to be executed
* @param nameSupplier Supplier of new thread name
*/","* Wraps the given runnable such that for the duration of {@link Runnable#run} the thread that is
   * running with have the given name.
   *
   * @param task The Runnable to wrap
   * @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once
   *     for each invocation of the wrapped callable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,add,"com.google.common.util.concurrent.ClosingFuture$CloseableList:add(java.lang.AutoCloseable,java.util.concurrent.Executor)",2230,2242,"/**
* Adds a closable resource to the pool or closes it quietly if already closed.
* @param closeable AutoCloseable resource to add or close
* @param executor Executor for executing the close operation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,com.google.common.util.concurrent.ClosingFuture$Peeker:<init>(com.google.common.collect.ImmutableList),1136,1138,"/**
* Initializes Peeper instance with a list of closing futures.
* @param futures non-null collection of ClosingFutures to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:<init>(com.google.common.util.concurrent.ClosingFuture),332,334,"/**
* Initializes the ValueAndCloser with a ClosingFuture.
* @param closingFuture future containing value and close operation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,withoutCloser,com.google.common.util.concurrent.ClosingFuture:withoutCloser(com.google.common.util.concurrent.AsyncFunction),826,830,"/**
* Wraps an asynchronous function with a default closing behavior.
* @param function asynchronous operation to be executed
* @return AsyncClosingFunction instance with default closer
*/","* Returns an {@link AsyncClosingFunction} that applies an {@link AsyncFunction} to an input,
   * ignoring the DeferredCloser and returning a {@code ClosingFuture} derived from the returned
   * {@link ListenableFuture}.
   *
   * <p>Use this method to pass a transformation to {@link #transformAsync(AsyncClosingFunction,
   * Executor)} or to {@link #catchingAsync(Class, AsyncClosingFunction, Executor)} as long as it
   * meets these conditions:
   *
   * <ul>
   *   <li>It does not need to capture any {@link Closeable} objects by calling {@link
   *       DeferredCloser#eventuallyClose(Object, Executor)}.
   *   <li>It returns a {@link ListenableFuture}.
   * </ul>
   *
   * <p>Example usage:
   *
   * {@snippet :
   * // Result.getRowsFuture() returns a ListenableFuture.
   * ClosingFuture<List<Row>> rowsFuture =
   *     queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor);
   * }
   *
   * @param function transforms the value of a {@code ClosingFuture} step to a {@link
   *     ListenableFuture} with the value of a derived step",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,com.google.common.util.concurrent.CycleDetectingLockFactory:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy),452,454,"/**
* Initializes lock factory with specified policy.
* @param policy Lock creation policy to be enforced
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,newProxy,"com.google.common.util.concurrent.FakeTimeLimiter:newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit)",44,52,"/**
* Creates a proxy object based on the provided target and interface type.
* @param target The underlying object to proxy
* @param interfaceType The interface that the proxy will implement
* @param timeoutDuration Timeout duration in specified time unit
* @param timeoutUnit Time unit for timeout duration
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,from,com.google.common.util.concurrent.FluentFuture:from(com.google.common.util.concurrent.FluentFuture),145,151,"/**
* Wraps a given FluentFuture in a checked null reference.
* @param future the input FluentFuture
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,lazyTransform,"com.google.common.util.concurrent.Futures:lazyTransform(java.util.concurrent.Future,com.google.common.base.Function)",512,555,"/**
* Returns a Future representing the result of applying a transformation to a given input.
* @param input Future containing input data
* @param function Function to apply to the input data
* @return Future containing transformed output data
*/","* Like {@link #transform(ListenableFuture, Function, Executor)} except that the transformation
   * {@code function} is invoked on each call to {@link Future#get() get()} on the returned future.
   *
   * <p>The returned {@code Future} reflects the input's cancellation state directly, and any
   * attempt to cancel the returned Future is likewise passed through to the input Future.
   *
   * <p>Note that calls to {@linkplain Future#get(long, TimeUnit) timed get} only apply the timeout
   * to the execution of the underlying {@code Future}, <em>not</em> to the execution of the
   * transformation function.
   *
   * <p>The primary audience of this method is callers of {@code transform} who don't have a {@code
   * ListenableFuture} available and do not mind repeated, lazy function evaluation.
   *
   * @param input The future to transform
   * @param function A Function to transform the results of the provided future to the results of
   *     the returned future.
   * @return A future that returns the result of the transformation.
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,renamingDecorator,"com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.Executor,com.google.common.base.Supplier)",867,873,"/**
* Creates a decorator that renames threads executed by the given executor.
* @param executor Executor instance to decorate
* @param nameSupplier Function providing thread names
* @return RenamedExecutor instance
*/","* Creates an {@link Executor} that renames the {@link Thread threads} that its tasks run in.
   *
   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
   * prevents the renaming then it will be skipped but the tasks will still execute.
   *
   * @param executor The executor to decorate
   * @param nameSupplier The source of names for each task",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,renamingDecorator,"com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.ExecutorService,com.google.common.base.Supplier)",886,902,"/**
* Creates a decorator for the given ExecutorService that renames threads.
* @param service target executor service
* @param nameSupplier function to generate thread names
*/","* Creates an {@link ExecutorService} that renames the {@link Thread threads} that its tasks run
   * in.
   *
   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
   * prevents the renaming then it will be skipped but the tasks will still execute.
   *
   * @param service The executor to decorate
   * @param nameSupplier The source of names for each task",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,renamingDecorator,"com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier)",915,932,"/**
* Wraps a ScheduledExecutorService with thread renaming functionality.
* @param service executor service to decorate
* @param nameSupplier supplier of thread names
*/","* Creates a {@link ScheduledExecutorService} that renames the {@link Thread threads} that its
   * tasks run in.
   *
   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
   * prevents the renaming then it will be skipped but the tasks will still execute.
   *
   * @param service The executor to decorate
   * @param nameSupplier The source of names for each task",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Platform.java,restoreInterruptIfIsInterruptedException,com.google.common.util.concurrent.Platform:restoreInterruptIfIsInterruptedException(java.lang.Throwable),34,39,"/**
* Resumes interrupt status after InterruptedException.
* @param t the Throwable instance (must be not null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,<init>,com.google.common.util.concurrent.RateLimiter:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch),234,236,"/**
* Initializes RateLimiter with a Stopwatch instance.
* @param stopwatch SleepingStopwatch to measure elapsed time
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SequentialExecutor.java,<init>,com.google.common.util.concurrent.SequentialExecutor:<init>(java.util.concurrent.Executor),90,92,"/**
* Initializes the executor with a given instance.
* @param executor Executor to be used for execution
*/",Use {@link MoreExecutors#newSequentialExecutor},,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SequentialExecutor.java,execute,com.google.common.util.concurrent.SequentialExecutor:execute(java.lang.Runnable),100,174,"/**
* Executes the given task, potentially queuing it if the worker is already running.
* @param task the Runnable to execute
*/","* Adds a task to the queue and makes sure a worker thread is running.
   *
   * <p>If this method throws, e.g. a {@code RejectedExecutionException} from the delegate executor,
   * execution of tasks will stop until a call to this method is made.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,<init>,com.google.common.util.concurrent.SimpleTimeLimiter:<init>(java.util.concurrent.ExecutorService),56,58,"/**
 * Initializes a SimpleTimeLimer instance with an ExecutorService.
 * @param executor executor service to be used for timing out tasks
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,setUncaughtExceptionHandler,com.google.common.util.concurrent.ThreadFactoryBuilder:setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler),129,134,"/**
* Sets an uncaught exception handler for the thread factory.
* @param uncaughtExceptionHandler handler to catch and handle exceptions
*/","* Sets the {@link UncaughtExceptionHandler} for new threads created with this ThreadFactory.
   *
   * @param uncaughtExceptionHandler the uncaught exception handler for new Threads created with
   *     this ThreadFactory
   * @return this for the builder pattern",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,setThreadFactory,com.google.common.util.concurrent.ThreadFactoryBuilder:setThreadFactory(java.util.concurrent.ThreadFactory),145,149,"/**
* Sets the thread factory to use.
* @param backingThreadFactory thread factory instance, must not be null
* @return this builder for fluent API usage
*/","* Sets the backing {@link ThreadFactory} for new threads created with this ThreadFactory. Threads
   * will be created by invoking #newThread(Runnable) on this backing {@link ThreadFactory}.
   *
   * @param backingThreadFactory the backing {@link ThreadFactory} which will be delegated to during
   *     thread creation.
   * @return this for the builder pattern
   * @see MoreExecutors",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeoutFuture.java,<init>,com.google.common.util.concurrent.TimeoutFuture:<init>(com.google.common.util.concurrent.ListenableFuture),82,84,"/**
* Creates a new TimeoutFuture instance wrapping the given ListenableFuture.
* @param delegate the future to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,joinUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread,long,java.util.concurrent.TimeUnit)",195,219,"/**
* Waits for the specified thread to join, with a timeout.
* @param toJoin target thread
* @param timeout maximum time to wait
* @param unit time unit for timeout
*/","* Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)}
   * uninterruptibly.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,<init>,com.google.common.util.concurrent.WrappingExecutorService:<init>(java.util.concurrent.ExecutorService),51,53,"/**
* Creates a wrapper executor service instance from an existing one.
* @param delegate underlying executor service to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,submit,com.google.common.util.concurrent.WrappingExecutorService:submit(java.util.concurrent.Callable),98,101,"/**
* Submits a task to be executed asynchronously, returning a future result.
* @param task task to be executed, must not be null
* @return Future representing the result of the task, or null if cancelled
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,<init>,"com.google.common.base.Splitter$SplittingIterator:<init>(com.google.common.base.Splitter,java.lang.CharSequence)",541,546,"/**
* Initializes a new iterator for splitting the given string.
* @param splitter Splitter object containing configuration
* @param toSplit String to be split into chunks
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,ticker,com.google.common.cache.CacheBuilder:ticker(com.google.common.base.Ticker),942,947,"/**
* Sets the Ticker to be used for cache expiration.
* @param ticker Ticker instance to use
*/","* Specifies a nanosecond-precision time source for this cache. By default, {@link
   * System#nanoTime} is used.
   *
   * <p>The primary intent of this method is to facilitate testing of caches with a fake or mock
   * time source.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if a ticker was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,removalListener,com.google.common.cache.CacheBuilder:removalListener(com.google.common.cache.RemovalListener),976,985,"/**
* Sets removal listener for cache events.
* @param listener event handler
*/","* Specifies a listener instance that caches should notify each time an entry is removed for any
   * {@linkplain RemovalCause reason}. Each cache created by this builder will invoke this listener
   * as part of the routine maintenance described in the class documentation above.
   *
   * <p><b>Warning:</b> after invoking this method, do not continue to use <i>this</i> cache builder
   * reference; instead use the reference this method <i>returns</i>. At runtime, these point to the
   * same instance, but only the returned reference has the correct generic type information to
   * ensure type safety. For best results, use the standard method-chaining idiom illustrated in the
   * class documentation above, configuring a builder and building your cache in a single statement.
   * Failure to heed this advice can result in a {@link ClassCastException} being thrown by a cache
   * operation at some <i>undefined</i> point in the future.
   *
   * <p><b>Warning:</b> any exception thrown by {@code listener} will <i>not</i> be propagated to
   * the {@code Cache} user, only logged via a {@link Logger}.
   *
   * @return the cache builder reference that should be used instead of {@code this} for any
   *     remaining configuration and cache building
   * @throws IllegalStateException if a removal listener was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,setValue,com.google.common.collect.LinkedListMultimap$NodeIterator:setValue(java.lang.Object),407,410,"/**
* Updates the current value with the provided one.
* @param value the new value to be set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,set,com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:set(java.lang.Object),559,563,"/**
* Sets the current object's value.
* @param value new value to be assigned (must not be null if current is not null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,addOutEdge,"com.google.common.graph.AbstractDirectedNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",135,142,"/**
* Adds an outgoing edge to the graph, associating it with a specific node.
* @param edge edge to be added
* @param node associated node for the edge
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,addOutEdge,"com.google.common.graph.AbstractUndirectedNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",96,100,"/**
* Adds an outgoing edge to a graph and associates it with a node.
* @param edge the edge to be added
* @param node the associated node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,<init>,"com.google.common.graph.ElementOrder:<init>(com.google.common.graph.ElementOrder$Type,java.util.Comparator)",73,77,"/**
* Constructs an ElementOrder instance with the specified type and comparator.
* @param type type of element order (SORTED or UNSORTED)
* @param comparator optional comparator for sorting elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hash,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:hash(),399,405,"/**
* Calculates hash code based on current buffer.
* @return 32-bit hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,mean,com.google.common.math.Stats:mean(),254,257,"/**
* Calculates the arithmetic mean of this collection.
* @return the calculated mean or Double.NaN if count is zero
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the
   * result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}.
   * If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link
   * Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * <p>If you only want to calculate the mean, use {@link #meanOf} instead of creating a {@link
   * Stats} instance.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,min,com.google.common.math.Stats:min(),380,383,"/**
* Returns the minimum value from the collection.
* @return Minimum value or NaN if collection is empty
*/","* Returns the lowest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only then the result is the lowest finite value. If it contains {@link
   * Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,max,com.google.common.math.Stats:max(),398,401,"/**
* Returns the maximum value from the collection.
* @return The maximum value or throws an exception if count is zero
*/","* Returns the highest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values
   * only then the result is the highest finite value. If it contains {@link
   * Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,mean,com.google.common.math.StatsAccumulator:mean(),247,250,"/**
* Calculates and returns the arithmetic mean of the dataset.
* @return The calculated mean value or Double.NaN if count is zero
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the
   * result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}.
   * If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link
   * Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,min,com.google.common.math.StatsAccumulator:min(),373,376,"/**
* Returns the minimum value from the collection.
* @return The smallest value or NaN if empty
*/","* Returns the lowest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only then the result is the lowest finite value. If it contains {@link
   * Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,max,com.google.common.math.StatsAccumulator:max(),391,394,"/**
* Returns the maximum value in the collection.
* @return The maximum value or throws an exception if count is zero.
*/","* Returns the highest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values
   * only then the result is the highest finite value. If it contains {@link
   * Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,whenClosedCountDown,com.google.common.util.concurrent.ClosingFuture$CloseableList:whenClosedCountDown(),2247,2258,"/**
* Initializes a latch to decrement when this object is closed.
*/",* Returns a latch that reaches zero when this objects' deferred closeables have been closed.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,execute,com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:execute(java.lang.Runnable),320,374,"/**
* Executes a Runnable task, potentially running it inline or delegating execution to an external Executor.
* @param task the Runnable task to execute
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,run,com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:run(),189,230,"/**
* Runs the listener queue indefinitely until completion or error.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/AbstractIterator.java,hasNext,com.google.common.base.AbstractIterator:hasNext(),53,64,"/**
* Checks if there is a next item in the iteration.
* @return true if ready, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,unsafeDoForward,com.google.common.base.Converter:unsafeDoForward(java.lang.Object),244,246,"/**
* Performs an unchecked forward operation on the given object.
* @param a object to process
* @return result of operation or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,unsafeDoBackward,com.google.common.base.Converter:unsafeDoBackward(java.lang.Object),248,250,"/**
* Performs an unchecked backward operation on input value.
* @param b input value to process
* @return result of the operation or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,apply,com.google.common.base.Functions$ForMapWithDefault:apply(java.lang.Object),203,211,"/**
* Retrieves value associated with given key from the underlying map,
* or default value if not found. 
* @param key unique identifier
* @return Value object or default value if null 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,get,com.google.common.base.Suppliers$ExpiringMemoizingSupplier:get(),300,328,"/**
* Lazily fetches and caches the value, rechecking expiration on demand.
* @return The cached or freshly fetched value. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,get,com.google.common.base.Suppliers$MemoizingSupplier:get(),137,155,"/**
* Lazily fetches the field's value using double-checked locking.
* @return T object or null if not initialized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,get,com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:get(),192,209,"/**
* Retrieves the computed value using double-checked locking to ensure thread safety.
* @return Computed T object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toLowerCase,com.google.common.base.Ascii:toLowerCase(java.lang.String),407,422,"/**
* Converts the first encountered uppercase character in a string to lowercase.
* @param string input string
* @return modified string with first uppercase char converted or original if no uppercase found
*/","* Returns a copy of the input string in which all {@linkplain #isUpperCase(char) uppercase ASCII
   * characters} have been converted to lowercase. All other characters are copied without
   * modification.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toLowerCase,com.google.common.base.Ascii:toLowerCase(char),446,448,"/**
* Converts a character to lowercase using XOR operation.
* @param c input character
*/","* If the argument is an {@linkplain #isUpperCase(char) uppercase ASCII character}, returns the
   * lowercase equivalent. Otherwise returns the argument.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,hasUpperCase,com.google.common.io.BaseEncoding$Alphabet:hasUpperCase(),555,562,"/**
* Checks for presence of uppercase characters in input string. 
* @return true if any uppercase character found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toUpperCase,com.google.common.base.Ascii:toUpperCase(java.lang.String),455,470,"/**
* Converts the first occurrence of a lowercase letter to uppercase in each word.
* @param string input string
* @return modified string or original if no lowercase letters found
*/","* Returns a copy of the input string in which all {@linkplain #isLowerCase(char) lowercase ASCII
   * characters} have been converted to uppercase. All other characters are copied without
   * modification.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toUpperCase,com.google.common.base.Ascii:toUpperCase(char),494,496,"/**
* Converts a character to uppercase.
* @param c input character
*/","* If the argument is a {@linkplain #isLowerCase(char) lowercase ASCII character}, returns the
   * uppercase equivalent. Otherwise returns the argument.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,hasLowerCase,com.google.common.io.BaseEncoding$Alphabet:hasLowerCase(),546,553,"/**
* Checks if string contains at least one lowercase character.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,truncate,"com.google.common.base.Ascii:truncate(java.lang.CharSequence,int,java.lang.String)",550,577,"/**
* Truncates a CharSequence to the specified maxLength and appends a truncation indicator.
* @param seq sequence to truncate
* @param maxLength maximum length of the resulting string
* @param truncationIndicator string appended after truncating
*/","* Truncates the given character sequence to the given maximum length. If the length of the
   * sequence is greater than {@code maxLength}, the returned string will be exactly {@code
   * maxLength} chars in length and will end with the given {@code truncationIndicator}. Otherwise,
   * the sequence will be returned as a string with no changes to the content.
   *
   * <p>Examples:
   *
   * {@snippet :
   * Ascii.truncate(""foobar"", 7, ""...""); // returns ""foobar""
   * Ascii.truncate(""foobar"", 5, ""...""); // returns ""fo...""
   * }
   *
   * <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use
   * with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe
   * for use with it (such as all-ASCII text) and for simple debugging text. When using this method,
   * consider the following:
   *
   * <ul>
   *   <li>it may split surrogate pairs
   *   <li>it may split characters and combining characters
   *   <li>it does not consider word boundaries
   *   <li>if truncating for display to users, there are other considerations that must be taken
   *       into account
   *   <li>the appropriate truncation indicator may be locale-dependent
   *   <li>it is safe to use non-ASCII characters in the truncation indicator
   * </ul>
   *
   * @throws IllegalArgumentException if {@code maxLength} is less than the length of {@code
   *     truncationIndicator}
   * @since 16.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,writeTo,com.google.common.math.Stats:writeTo(java.nio.ByteBuffer),605,618,"/**
* Writes statistics data to a ByteBuffer.
* @param buffer output buffer with at least BYTES remaining space
*/","* Writes to the given {@link ByteBuffer} a byte representation of this instance.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.
   *
   * @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as
   *     {@link ByteOrder#LITTLE_ENDIAN}, to which a BYTES-long byte representation of this instance
   *     is written. In the process increases the position of {@link ByteBuffer} by BYTES.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,constrainToRange,"com.google.common.primitives.Ints:constrainToRange(int,int,int)",284,288,"/**
* Conforms input value to a specified range.
* @param value the value to constrain
* @param min minimum allowed value (inclusive)
* @param max maximum allowed value (inclusive) 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,constrainToRange,"com.google.common.primitives.Shorts:constrainToRange(short,short,short)",274,277,"/**
* Constricts a short value to the specified range [min, max].
* @param value value to constrain
* @param min minimum allowed value (inclusive)
* @param max maximum allowed value (inclusive)
* @return constrained short value within the specified range
*/","* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.
   *
   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned
   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code
   * value} is greater than {@code max}, {@code max} is returned.
   *
   * @param value the {@code short} value to constrain
   * @param min the lower bound (inclusive) of the range to constrain {@code value} to
   * @param max the upper bound (inclusive) of the range to constrain {@code value} to
   * @throws IllegalArgumentException if {@code min > max}
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,setPriority,com.google.common.util.concurrent.ThreadFactoryBuilder:setPriority(int),104,120,"/**
* Sets the thread creation priority.
* @param priority thread priority value (MIN_PRIORITY to MAX_PRIORITY)
*/","* Sets the priority for new threads created with this ThreadFactory.
   *
   * <p><b>Warning:</b> relying on the thread scheduler is <a
   * href=""http://errorprone.info/bugpattern/ThreadPriorityCheck"">discouraged</a>.
   *
   * @param priority the priority for new Threads created with this ThreadFactory
   * @return this for the builder pattern",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,equalsIgnoreCase,"com.google.common.base.Ascii:equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)",601,625,"/**
* Compares two CharSequence objects for equality, ignoring case and null values.
* @param s1 first CharSequence to compare
* @param s2 second CharSequence to compare
* @return true if equal, false otherwise
*/","* Indicates whether the contents of the given character sequences {@code s1} and {@code s2} are
   * equal, ignoring the case of any ASCII alphabetic characters between {@code 'a'} and {@code 'z'}
   * or {@code 'A'} and {@code 'Z'} inclusive.
   *
   * <p>This method is significantly faster than {@link String#equalsIgnoreCase} and should be used
   * in preference if at least one of the parameters is known to contain only ASCII characters.
   *
   * <p>Note however that this method does not always behave identically to expressions such as:
   *
   * <ul>
   *   <li>{@code string.toUpperCase().equals(""UPPER CASE ASCII"")}
   *   <li>{@code string.toLowerCase().equals(""lower case ascii"")}
   * </ul>
   *
   * <p>due to case-folding of some non-ASCII characters (which does not occur in {@link
   * String#equalsIgnoreCase}). However in almost all cases that ASCII strings are used, the author
   * probably wanted the behavior provided by this method rather than the subtle and sometimes
   * surprising behavior of {@code toUpperCase()} and {@code toLowerCase()}.
   *
   * @since 16.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$And:<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)",1571,1574,"/**
* Combines two character matchers into one. 
* @param a first matcher
* @param b second matcher
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$AnyOf:<init>(java.lang.CharSequence),1755,1758,"/**
 * Sorts and stores the characters from input CharSequence.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$ForPredicate:<init>(com.google.common.base.Predicate),1822,1824,"/**
* Initializes a filter for characters based on the given predicate.
* @param predicate predicate to filter characters by
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Negated:<init>(com.google.common.base.CharMatcher),1521,1523,"/**
* Creates a negated CharMatcher instance from the given matcher.
* @param original the original matcher to negate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$Or:<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)",1604,1607,"/**
* Combines two character matchers into one.
*@param a first matcher
*@param b second matcher
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,setBits,com.google.common.base.CharMatcher$And:setBits(java.util.BitSet),1581,1590,"/**
* Merges and sets bits from two sub-bitsets into the given target bitset.
* @param table target bitset to update
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,setBits,com.google.common.base.CharMatcher$Negated:setBits(java.util.BitSet),1545,1552,"/**
* Merges the given BitSet into the target BitSet.
* @param table the BitSet to be merged
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,setBits,com.google.common.base.CharMatcher$Or:setBits(java.util.BitSet),1609,1614,"/**
* Sets bits in both BitSet objects (first and second) using the provided BitSet. 
* @param table BitSet containing bits to be copied into first and second BitSets. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$InRange:<init>(char,char)",1790,1794,"/**
* Sets inclusive range bounds.
* @param startInclusive starting character (inclusive)
* @param endInclusive ending character (inclusive)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$RangesMatcher:<init>(java.lang.String,char[],char[])",1324,1335,"/**
* Initializes RangesMatcher with description and overlapping character ranges.
* @param description descriptive string
* @param rangeStarts array of starting characters for each range
* @param rangeEnds array of ending characters for each range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,<init>,"com.google.common.cache.CacheStats:<init>(long,long,long,long,long,long)",78,99,"/**
* Constructs CacheStats object from hit/miss/load counts and time.
* @param hitCount number of cache hits
* @param missCount number of cache misses
* @param loadSuccessCount number of successful loads
* @param loadExceptionCount number of failed loads
* @param totalLoadTime cumulative load time in milliseconds
* @param evictionCount number of evictions
*/","* Constructs a new {@code CacheStats} instance.
   *
   * <p>Five parameters of the same type in a row is a bad thing, but this class is not constructed
   * by end users and is too fine-grained for a builder.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,<init>,com.google.common.collect.AbstractMapBasedMultimap:<init>(java.util.Map),123,126,"/**
* Constructs an empty multimap from a given map.
* @param map map with empty collections as values
*/","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,setMap,com.google.common.collect.AbstractMapBasedMultimap:setMap(java.util.Map),129,136,"/**
* Sets the map of key-value pairs and initializes total size.
* @param map collection of key-value pairs
*/",Used during deserialization only.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,<init>,com.google.common.collect.AbstractMapBasedMultiset:<init>(java.util.Map),64,67,"/**
* Initializes an empty multiset from a backing map.
* @param backingMap empty map representing the multiset's data structure
*/",Standard constructor.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,indexed,"com.google.common.collect.CollectSpliterators:indexed(int,int,java.util.function.IntFunction,java.util.Comparator)",48,102,"/**
* Creates an indexed Spliterator from a range of integers.
* @param size the number of elements
* @param extraCharacteristics additional characteristics (e.g. SORTED)
* @param function converts each index to a value of type T
* @param comparator optional comparator for sorted spliterators
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,add,com.google.common.collect.Collections2$FilteredCollection:add(java.lang.Object),135,139,"/**
* Adds an element to the set while applying predicate filtering.
* @param element the object to be added (null is considered null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,addAll,com.google.common.collect.Collections2$FilteredCollection:addAll(java.util.Collection),141,147,"/**
* Adds all elements from a collection to this set, validating each element against the predicate.
* @param collection collection of elements to add
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Comparable,java.lang.Comparable)",166,172,"/**
* Returns a contiguous subset of elements within the given range.
* @param fromElement start element (inclusive)
* @param toElement end element (exclusive)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Comparable,boolean,java.lang.Comparable,boolean)",177,185,"/**
* Returns a contiguous subset of this set, bounded by the given elements.
* @param fromElement lower bound (inclusive or exclusive)
* @param fromInclusive whether lower bound is inclusive
* @param toElement upper bound (inclusive or exclusive)
* @param toInclusive whether upper bound is inclusive
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,inferKeyTypeOrObjectUnderJ2cl,com.google.common.collect.EnumBiMap:inferKeyTypeOrObjectUnderJ2cl(java.util.Map),97,106,"/**
* Infers the key type or a key object from the provided Enum-based Map.
* @param map Enum-based Map to infer key type or object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,inferValueTypeOrObjectUnderJ2cl,com.google.common.collect.EnumBiMap:inferValueTypeOrObjectUnderJ2cl(java.util.Map),108,114,"/**
* Infers the value type or object from a map containing enum values.
* @param map map of key-value pairs where keys are enums
* @return the inferred class, or null if not possible
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,<init>,com.google.common.collect.EnumMultiset:<init>(java.lang.Class),93,98,"/**
* Initializes a multiset for the given enum class.
* @param type Enum class to manage
*/",Creates an empty {@code EnumMultiset}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,<init>,com.google.common.collect.ImmutableEnumMap:<init>(java.util.EnumMap),56,59,"/**
* Creates an ImmutableEnumMap from a given EnumMap.
* @param delegate non-empty EnumMap instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,subSet,"com.google.common.collect.ImmutableSortedSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",674,682,"/**
* Returns a subset of this sorted set from {@code fromElement} (inclusive) to
* {@code toElement} (inclusive).
* @param fromElement the lower bound element
* @param fromInclusive whether the lower bound is inclusive
* @param toElement the upper bound element
* @param toInclusive whether the upper bound is inclusive
* @return a ImmutableSortedSet containing elements in the specified range or an empty set if no elements are found",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,partition,"com.google.common.collect.Iterables:partition(java.lang.Iterable,int)",527,537,"/**
* Partitions an iterable into sub-lists of a specified size.
* @param iterable input iterable to partition
* @param size maximum number of elements in each sub-list
* @return Iterable of List<T> containing sub-partitioned lists or null if iterable is empty
*/","* Divides an iterable into unmodifiable sublists of the given size (the final iterable may be
   * smaller). For example, partitioning an iterable containing {@code [a, b, c, d, e]} with a
   * partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterable containing two
   * inner lists of three and two elements, all in the original order.
   *
   * <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()}
   * method. The returned lists implement {@link RandomAccess}, whether or not the input list does.
   *
   * <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements.
   * As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link
   * OutOfMemoryError}.
   *
   * <p><b>Note:</b> if {@code iterable} is a {@link List}, use {@link Lists#partition(List, int)}
   * instead.
   *
   * @param iterable the iterable to return a partitioned view of
   * @param size the desired size of each partition (the last may be smaller)
   * @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided
   *     into partitions
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,paddedPartition,"com.google.common.collect.Iterables:paddedPartition(java.lang.Iterable,int)",554,564,"/**
* Partitions the input iterable into lists of specified size, padding with nulls if necessary.
* @param iterable input sequence to partition
* @param size desired list size
* @return Iterable of partitioned lists or empty list if input is empty
*/","* Divides an iterable into unmodifiable sublists of the given size, padding the final iterable
   * with null values if necessary. For example, partitioning an iterable containing {@code [a, b,
   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer
   * iterable containing two inner lists of three elements each, all in the original order.
   *
   * <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()}
   * method.
   *
   * @param iterable the iterable to return a partitioned view of
   * @param size the desired size of each partition
   * @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided
   *     into partitions (the final iterable may have trailing null elements)
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,partitionImpl,"com.google.common.collect.Iterators:partitionImpl(java.util.Iterator,int,boolean)",626,660,"/**
* Partitions the given iterator into lists of specified size.
* @param iterator input iterator
* @param size number of elements per list
* @param pad whether to pad with nulls if not full
* @return UnmodifiableIterator over partitioned lists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,expectedSize,com.google.common.collect.MinMaxPriorityQueue$Builder:expectedSize(int),186,191,"/**
* Sets the expected size of the builder's output.
* @param expectedSize non-negative integer representing the expected size
*/","* Configures this builder to build min-max priority queues with an initial expected size of
     * {@code expectedSize}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,maximumSize,com.google.common.collect.MinMaxPriorityQueue$Builder:maximumSize(int),199,204,"/**
* Sets the maximum size of the buffer.
* @param maximumSize non-negative integer value
*/","* Configures this builder to build {@code MinMaxPriorityQueue} instances that are limited to
     * {@code maximumSize} elements. Each time a queue grows beyond this bound, it immediately
     * removes its greatest element (according to its comparator), which might be the element that
     * was just added.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,<init>,"com.google.common.collect.TreeMultiset$AvlNode:<init>(java.lang.Object,int)",617,626,"/**
* Creates a new AVL node with the given element and count.
* @param elem the element to store
* @param elemCount the initial number of elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,newHasher,com.google.common.hash.AbstractNonStreamingHashFunction:newHasher(int),39,43,"/**
* Creates a new hasher with specified input size buffer.
* @param expectedInputSize expected size of the input data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,<init>,"com.google.common.hash.AbstractStreamingHasher:<init>(int,int)",61,70,"/**
* Initializes AbstractStreamingHasher with specified chunk size and buffer size.
* @param chunkSize size of each hash chunk
* @param bufferSize total buffer size (must be multiple of chunkSize) 
*/","* Constructor for use by subclasses. This hasher instance will process chunks of the specified
   * size, using an internal buffer of {@code bufferSize} size, which must be a multiple of {@code
   * chunkSize}.
   *
   * @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation;
   *     must be at least 4
   * @param bufferSize the size of the internal buffer. Must be a multiple of chunkSize",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,separatingAppendable,"com.google.common.io.BaseEncoding:separatingAppendable(java.lang.Appendable,java.lang.String,int)",1082,1111,"/**
* Wraps an Appendable with periodic separator insertion.
* @param delegate the wrapped Appendable
* @param separator string to insert after every N characters
* @param afterEveryChars number of characters before inserting a separator
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleUtils.java,ensureNonNegative,com.google.common.math.DoubleUtils:ensureNonNegative(double),133,136,"/**
* Ensures a given double value is non-negative.
* @param value input value to validate and potentially adjust
*/","Returns its argument if it is non-negative, zero if it is negative.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,toFile,com.google.common.reflect.ClassPath:toFile(java.net.URL),671,679,"/**
* Converts a file-based URL to a File object, handling both escaped and unescaped characters. 
* @param url the URL to convert, must be a ""file"" protocol
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,is,com.google.common.base.CharMatcher:is(char),297,299,"/**
* Returns a CharMatcher that matches the specified character. 
* @param match the target character to be matched
*/",Returns a {@code char} matcher that matches only one specified BMP character.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,isEither,"com.google.common.base.CharMatcher:isEither(char,char)",1717,1719,"/**
* Creates a CharMatcher that matches either of two specified characters.
* @param c1 first character to match
* @param c2 second character to match
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,isNot,com.google.common.base.CharMatcher:isNot(char),306,308,"/**
* Creates a CharMatcher that matches any character except the specified one.
* @param match the single character to exclude
*/","* Returns a {@code char} matcher that matches any character except the BMP character specified.
   *
   * <p>To negate another {@code CharMatcher}, use {@link #negate()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesNoneOf,com.google.common.base.CharMatcher$Negated:matchesNoneOf(java.lang.CharSequence),1535,1538,"/**
* Checks if input sequence does not match any pattern.
* @param sequence input sequence to check
* @return true if sequence does not match, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,countIn,com.google.common.base.CharMatcher$Negated:countIn(java.lang.CharSequence),1540,1543,"/**
* Calculates the number of occurrences of this pattern in the given sequence.
* @param sequence CharSequence to search in
* @return Count of occurrences or 0 if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,collapseFrom,"com.google.common.base.CharMatcher:collapseFrom(java.lang.CharSequence,char)",840,857,"/**
* Collapses a CharSequence by replacing matching characters with a specified replacement character.
* @param sequence input CharSequence to collapse
* @param replacement target character to replace matches with
* @return collapsed string or original if no replacements were made
*/","* Returns a string copy of the input character sequence, with each group of consecutive matching
   * BMP characters replaced by a single replacement character. For example:
   *
   * {@snippet :
   * CharMatcher.anyOf(""eko"").collapseFrom(""bookkeeper"", '-')
   * }
   *
   * ... returns {@code ""b-p-r""}.
   *
   * <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching
   * character, then iterates the remainder of the sequence calling {@link #matches(char)} for each
   * character.
   *
   * @param sequence the character sequence to replace matching groups of characters in
   * @param replacement the character to append to the result string in place of each group of
   *     matching characters in {@code sequence}
   * @return the new string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CommonPattern.java,isPcreLike,com.google.common.base.CommonPattern:isPcreLike(),40,42,"/**
* Checks whether the platform's regular expression engine matches PCRE behavior.
* @return true if PCRE-like, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,equals,com.google.common.base.Converter$ConverterComposition:equals(java.lang.Object),422,429,"/**
* Compares this ConverterComposition with another for equality.
* @param object ConverterComposition to compare with
* @return true if both compositions have equal first and second converters, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,equals,com.google.common.base.Converter$ReverseConverter:equals(java.lang.Object),347,354,"/**
* Compares this ReverseConverter to another for equality.
* @param object the object to compare with
* @return true if both converters have the same original value, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,com.google.common.base.Converter:<init>(),153,155,"/**
 * Initializes the Converter instance with default configuration.",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,getEnumConstants,com.google.common.base.Enums:getEnumConstants(java.lang.Class),86,95,"/**
* Retrieves a map of enum constants for the given class.
* @param enumClass Class containing enum values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FunctionalEquivalence.java,<init>,"com.google.common.base.FunctionalEquivalence:<init>(com.google.common.base.Function,com.google.common.base.Equivalence)",39,43,"/**
* Initializes functional equivalence with a given function and result equivalence. 
* @param function the input function to evaluate
* @param resultEquivalence equivalence relation for function output
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/PairwiseEquivalence.java,<init>,com.google.common.base.PairwiseEquivalence:<init>(com.google.common.base.Equivalence),29,31,"/**
* Initializes pairwise equivalence relation.
* @param elementEquivalence equivalence relation between elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,apply,com.google.common.base.Equivalence$EquivalentToPredicate:apply(java.lang.Object),323,326,"/**
* Checks equivalence of input to the target value.
* @param input value to compare (may be null)
* @return true if equivalent, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,equals,com.google.common.base.Equivalence$Wrapper:equals(java.lang.Object),244,263,"/**
* Compares current object with another for equality.
* @param obj Object to compare with
* @return true if objects are equal, false otherwise
*/","* Returns {@code true} if {@link Equivalence#equivalent(Object, Object)} applied to the wrapped
     * references is {@code true} and both wrappers use the {@link Object#equals(Object) same}
     * equivalence.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,test,"com.google.common.base.Equivalence:test(java.lang.Object,java.lang.Object)",83,88,"/**
* Delegates to equivalent() for comparing two objects.
* @param t first object to compare
* @param u second object to compare
*/","* @deprecated Provided only to satisfy the {@link BiPredicate} interface; use {@link #equivalent}
   *     instead.
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FunctionalEquivalence.java,doEquivalent,"com.google.common.base.FunctionalEquivalence:doEquivalent(java.lang.Object,java.lang.Object)",45,48,"/**
* Compares two objects of type F using equivalence relation.
* @param a first object to compare
* @param b second object to compare
* @return true if objects are equivalent, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/PairwiseEquivalence.java,doEquivalent,"com.google.common.base.PairwiseEquivalence:doEquivalent(java.lang.Iterable,java.lang.Iterable)",33,45,"/**
* Compares two iterables for equivalence.
* @param iterableA first iterable to compare
* @param iterableB second iterable to compare
* @return true if both iterables are equivalent, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,reclaimValue,"com.google.common.collect.MapMakerInternalMap$Segment:reclaimValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",1869,1900,"/**
* Removes a weak value reference from the map's internal chain.
* @param key key to search for
* @param hash hash code of the key
* @param valueReference value reference to remove
* @return true if removed, false otherwise
*/",Removes an entry whose value has been garbage collected.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clearValueForTesting,"com.google.common.collect.MapMakerInternalMap$Segment:clearValueForTesting(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",1903,1933,"/**
* Removes a WeakValueReference for testing purposes.
* @param key the key to match
* @param hash the hash value of the reference
* @param valueReference the reference to remove, or null if not found
* @return true if removed, false otherwise
*/","Clears a value that has not yet been set, and thus does not require count to be modified.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,equals,com.google.common.base.Equivalence$EquivalentToPredicate:equals(java.lang.Object),328,338,"/**
* Compares this predicate to another object for equality.
* @param obj the object to compare with
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,equals,com.google.common.base.Functions$ConstantFunction:equals(java.lang.Object),376,383,"/**
* Compares this ConstantFunction to another object for equality.
* @param obj the object to compare to
* @return true if values are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,equals,com.google.common.base.Functions$ForMapWithDefault:equals(java.lang.Object),213,220,"/**
* Compares this ForMapWithDefault instance with another object for equality.
* @param o the other object to compare
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,equals,com.google.common.base.Predicates$ContainsPatternPredicate:equals(java.lang.Object),750,761,"/**
* Compares this predicate with another for value equality.
* @param obj the object to compare with, must be ContainsPatternPredicate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,equals,com.google.common.base.Suppliers$SupplierOfInstance:equals(java.lang.Object),373,380,"/**
* Compares this instance with another object for equality.
* @param obj the other object to compare
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapEntry.java,equals,com.google.common.collect.AbstractMapEntry:equals(java.lang.Object),48,56,"/**
* Compares this entry with another object for equality.
* @param object the object to compare with
* @return true if both entries have identical key-value pairs, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsValue,com.google.common.collect.ArrayTable:containsValue(java.lang.Object),424,434,"/**
* Checks if the specified value exists in the data structure.
* @param value the object to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,remove,com.google.common.collect.FilteredMultimapValues:remove(java.lang.Object),62,74,"/**
* Removes the specified object from the multimap.
* @param o Object to be removed
* @return true if the object was found and removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,seekByKey,"com.google.common.collect.HashBiMap:seekByKey(java.lang.Object,int)",241,250,"/**
* Searches for a BiEntry in the hash table by key and its hash.
* @param key object to search for
* @param keyHash hash of the object
* @return matching BiEntry or null if not found",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,seekByValue,"com.google.common.collect.HashBiMap:seekByValue(java.lang.Object,int)",252,261,"/**
* Searches for a BiEntry by its associated value hash and actual value.
* @param value the value to search for
* @param valueHash the hash of the value (used for performance)
* @return the matching BiEntry or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,elementsEqual,"com.google.common.collect.Iterators:elementsEqual(java.util.Iterator,java.util.Iterator)",272,284,"/**
* Checks if two iterators have equal elements.
* @param iterator1 first iterator
* @param iterator2 second iterator
* @return true if both iterators are exhausted or contain equal elements, false otherwise
*/","* Determines whether two iterators contain equal elements in the same order. More specifically,
   * this method returns {@code true} if {@code iterator1} and {@code iterator2} contain the same
   * number of elements and every element of {@code iterator1} is equal to the corresponding element
   * of {@code iterator2}.
   *
   * <p>Note that this will modify the supplied iterators, since they will have been advanced some
   * number of elements forward.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,matchesValue,"com.google.common.collect.LinkedHashMultimap$ValueEntry:matchesValue(java.lang.Object,int)",216,218,"/**
* Verifies if provided value matches the expected value based on hash.
* @param v        the value to verify
* @param smearedVHash hash of the expected value
* @return true if values match, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$FilteredMapValues:remove(java.lang.Object),2917,2928,"/**
* Removes the specified object from the unfiltered map.
* @param o the object to remove
* @return true if removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,equals,com.google.common.collect.Maps$ValueDifferenceImpl:equals(java.lang.Object),729,737,"/**
* Compares this difference to another ValueDifference.
* @param object the object to compare with
* @return true if objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,equals,com.google.common.collect.Multisets$AbstractEntry:equals(java.lang.Object),836,844,"/**
* Compares two objects for equality.
* @param object the object to compare with
* @return true if both objects are Multiset.Entry instances with matching counts and elements, false otherwise
*/","* Indicates whether an object equals this entry, following the behavior specified in {@link
     * Multiset.Entry#equals}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,equals,com.google.common.collect.Tables$AbstractCell:equals(java.lang.Object),176,188,"/**
* Compares this Cell object with another for equality.
* @param obj the object to compare with
* @return true if both objects have identical keys and value, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,equals,com.google.common.graph.ElementOrder:equals(java.lang.Object),161,172,"/**
* Compares this element order with another for equality.
* @param obj object to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,canTraverseWithoutReusingEdge,"com.google.common.graph.Graphs:canTraverseWithoutReusingEdge(com.google.common.graph.Graph,java.lang.Object,java.lang.Object)",167,175,"/**
* Determines if traversing from one node to another without reusing an edge is possible.
* @param graph the graph to check
* @param nextNode the next node in the traversal
* @param previousNode the previous node in the traversal (may be null)
* @return true if traversal can occur without edge reuse, false otherwise
*/","* Determines whether an edge has already been used during traversal. In the directed case a cycle
   * is always detected before reusing an edge, so no special logic is required. In the undirected
   * case, we must take care not to ""backtrack"" over an edge (i.e. going from A to B and then going
   * from B to A).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,equals,com.google.common.net.HostAndPort:equals(java.lang.Object),277,287,"/**
* Compares this HostAndPort object with another for equality.
* @param other Object to compare with, may be null
* @return true if objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,hashCode,com.google.common.base.Equivalence$Wrapper:hashCode(),266,269,"/**
* Computes hash code based on reference object's hash.
* @return Hash code value
*/",Returns the result of {@link Equivalence#hash(Object)} applied to the wrapped reference.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FunctionalEquivalence.java,doHash,com.google.common.base.FunctionalEquivalence:doHash(java.lang.Object),50,53,"/**
* Computes hash value using provided function and equivalence.
* @param a input object to be hashed
* @return hash value as an integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/PairwiseEquivalence.java,doHash,com.google.common.base.PairwiseEquivalence:doHash(java.lang.Iterable),47,54,"/**
* Computes a hash code from the given iterable, using a prime number
* multiplier and the hash code of each element.
* @param iterable collection of elements to hash
* @return hash code as an integer value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizablePhantomReference.java,<init>,"com.google.common.base.FinalizablePhantomReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)",43,46,"/**
* Constructs a finalizable phantom reference with the given referent and queue.
* @param referent object being referenced (may be null)
* @param queue FinalizableReferenceQueue instance for cleanup
*/","* Constructs a new finalizable phantom reference.
   *
   * @param referent to phantom reference
   * @param queue that should finalize the referent",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableReferenceQueue.java,close,com.google.common.base.FinalizableReferenceQueue:close(),225,229,"/**
* Closes this resource by enqueuing and cleaning up.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableSoftReference.java,<init>,"com.google.common.base.FinalizableSoftReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)",41,44,"/**
* Creates a soft reference to the provided object, registering it with the given reference queue.
* @param referent object being referenced
* @param queue reference queue for cleanup and finalization
*/","* Constructs a new finalizable soft reference.
   *
   * @param referent to softly reference
   * @param queue that should finalize the referent",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableWeakReference.java,<init>,"com.google.common.base.FinalizableWeakReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)",41,44,"/**
* Creates a weak reference to the given object with cleanup.
* @param referent nullable object being referenced
* @param queue reference queue for cleanup and garbage collection
*/","* Constructs a new finalizable weak reference.
   *
   * @param referent to weakly reference
   * @param queue that should finalize the referent",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableReferenceQueue.java,loadFinalizer,com.google.common.base.FinalizableReferenceQueue$DecoupledLoader:loadFinalizer(),329,346,"/**
* Loads the Finalizer class using a URLClassLoader.
* @throws Exception if loading fails
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,constant,com.google.common.base.Functions:constant(java.lang.Object),357,360,"/**
* Returns a function that always returns the given constant value.
* @param value the constant value to be returned by the function
*/","* Returns a function that ignores its input and always returns {@code value}.
   *
   * <p>Prefer to use the lambda expression {@code o -> value} instead. Note that it is not
   * serializable unless you explicitly make it {@link Serializable}, typically by writing {@code
   * (Function<Object, E> & Serializable) o -> value}.
   *
   * @param value the constant value for the function to return
   * @return a function that always returns {@code value}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,apply,com.google.common.base.Functions$FunctionForMapNoDefault:apply(java.lang.Object),161,168,"/**
* Retrieves a value from the map using the given key and performs argument checks.
* @param key unique map identifier
* @return associated value or null if not present, otherwise type-cast to V
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseInteger,"com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser:parseInteger(com.google.common.cache.CacheBuilderSpec,int)",365,372,"/**
* Sets concurrency level for CacheBuilderSpec.
* @param value new concurrency level (must be unset if previously set)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseInteger,"com.google.common.cache.CacheBuilderSpec$InitialCapacityParser:parseInteger(com.google.common.cache.CacheBuilderSpec,int)",329,336,"/**
* Sets the initial capacity of the cache.
* @param spec CacheBuilderSpec object
* @param value new initial capacity value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseLong,"com.google.common.cache.CacheBuilderSpec$MaximumSizeParser:parseLong(com.google.common.cache.CacheBuilderSpec,long)",341,348,"/**
* Sets the maximum cache size.
* @param value the new maximum size
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseLong,"com.google.common.cache.CacheBuilderSpec$MaximumWeightParser:parseLong(com.google.common.cache.CacheBuilderSpec,long)",353,360,"/**
* Sets the maximum weight for a cache.
* @param value new maximum weight
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,<init>,com.google.common.collect.ConcurrentHashMultiset:<init>(java.util.concurrent.ConcurrentMap),128,132,"/**
* Constructs a concurrent hash multiset from an existing count map.
* @param countMap backing map containing element counts
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,convert,"com.google.common.collect.Maps$BiMapConverter:convert(com.google.common.collect.BiMap,java.lang.Object)",1620,1624,"/**
* Retrieves the mapped value from a BiMap instance.
* @param bimap Bi-directional map to retrieve value from
* @param input key to search in the map
* @return Mapped value or throws exception if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdges,com.google.common.graph.AbstractBaseGraph:incidentEdges(java.lang.Object),106,134,"/**
* Retrieves incident edges for a given node.
* @param node the node to fetch edges from
* @return set of endpoint pairs or empty set if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,getHostAndPortFromBracketedHost,com.google.common.net.HostAndPort:getHostAndPortFromBracketedHost(java.lang.String),210,238,"/**
* Extracts host and port from a bracketed host-port string.
* @param hostPortString input string in the format [host]:port
* @return array of host and port strings or null if invalid
*/","* Parses a bracketed host-port string, throwing IllegalArgumentException if parsing fails.
   *
   * @param hostPortString the full bracketed host-port specification. Port might not be specified.
   * @return an array with 2 strings: host and port, in that order.
   * @throws IllegalArgumentException if parsing the bracketed host-port string fails.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,requireBracketsForIPv6,com.google.common.net.HostAndPort:requireBracketsForIPv6(),271,275,"/**
* Requires brackets around IPv6 literals if not already present.
* @return This object (for method chaining) 
*/","* Generate an error if the host might be a non-bracketed IPv6 literal.
   *
   * <p>URI formatting requires that IPv6 literals be surrounded by brackets, like ""[2001:db8::1]"".
   * Chain this call after {@link #fromString(String)} to increase the strictness of the parser, and
   * disallow IPv6 literals that don't contain these brackets.
   *
   * <p>Note that this parser identifies IPv6 literals solely based on the presence of a colon. To
   * perform actual validation of IP addresses, see the {@link InetAddresses#forString(String)}
   * method.
   *
   * @return {@code this}, to enable chaining of calls.
   * @throws IllegalArgumentException if bracketless IPv6 is detected.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,decrement,com.google.common.net.InetAddresses:decrement(java.net.InetAddress),1179,1191,"/**
* Decrement an InetAddress by one byte.
* @param address the InetAddress to decrement
* @return new InetAddress with decremented value or null if wraps
*/","* Returns a new InetAddress that is one less than the passed in address. This method works for
   * both IPv4 and IPv6 addresses.
   *
   * @param address the InetAddress to decrement
   * @return a new InetAddress that is one less than the passed in address
   * @throws IllegalArgumentException if InetAddress is at the beginning of its range
   * @since 18.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,increment,com.google.common.net.InetAddresses:increment(java.net.InetAddress),1202,1214,"/**
* Increments the IP address by one.
* @param address InetAddress object to increment
* @return incremented InetAddress or null if would wrap
*/","* Returns a new InetAddress that is one more than the passed in address. This method works for
   * both IPv4 and IPv6 addresses.
   *
   * @param address the InetAddress to increment
   * @return a new InetAddress that is one more than the passed in address
   * @throws IllegalArgumentException if InetAddress is at the end of its range
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Reflection.java,newProxy,"com.google.common.reflect.Reflection:newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)",79,86,"/**
* Creates a proxy instance for the given interface type, wrapping the provided InvocationHandler.
* @param interfaceType the interface to be proxied
* @param handler the invocation handler for the proxy
* @return a proxy object implementing the specified interface
*/","* Returns a proxy instance that implements {@code interfaceType} by dispatching method
   * invocations to {@code handler}. The class loader of {@code interfaceType} will be used to
   * define the proxy class. To implement multiple interfaces or specify a class loader, use {@link
   * Proxy#newProxyInstance}.
   *
   * @throws IllegalArgumentException if {@code interfaceType} does not specify the type of a Java
   *     interface",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeCapture.java,capture,com.google.common.reflect.TypeCapture:capture(),30,34,"/**
* Retrieves the captured type from a parameterized superclass.
* @return The first actual type argument of the superclass
*/",Returns the captured type.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeParameter.java,<init>,com.google.common.reflect.TypeParameter:<init>(),50,54,"/**
* Captures and validates a type parameter.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,toString,com.google.common.base.Joiner$1:toString(java.lang.Object),510,530,"/**
* Converts an object to a CharSequence, returning it as-is if already a CharSequence.
* @param part Object to convert
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.util.Iterator)",103,114,"/**
* Appends formatted parts to the specified Appendable.
* @param appendable target for appending
* @param parts iterator of individual parts
* @return the appended Appendable instance
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code appendable}.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.lang.Iterable)",450,453,"/**
* Appends all entries from an iterable to a StringBuilder.
* @param builder StringBuilder instance to append to
* @param entries Iterable of entries to process
*/","* Appends the string representation of each entry in {@code entries}, using the previously
     * configured separator and key-value separator, to {@code builder}. Identical to {@link
     * #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.
     *
     * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner$MapJoiner:join(java.util.Iterator),496,498,"/**
* Concatenates iterator of entries into a comma-separated string.
* @param entries iterator of entries to concatenate
*/","* Returns a string containing the string representation of each entry in {@code entries}, using
     * the previously configured separator and key-value separator.
     *
     * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,withKeyValueSeparator,com.google.common.base.Joiner:withKeyValueSeparator(char),347,349,"/**
* Specifies the character used to separate key-value pairs in the joined map. 
* @param keyValueSeparator single character separator (e.g., ',')","* Returns a {@code MapJoiner} using the given key-value separator, and the same configuration as
   * this {@code Joiner} otherwise.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,toString,com.google.common.base.MoreObjects$ToStringHelper:toString(),383,414,"/**
* Generates a string representation of the ValueHolder list.
*/","* Returns a string in the format specified by {@link MoreObjects#toStringHelper(Object)}.
     *
     * <p>After calling this method, you can keep adding more properties to later call toString()
     * again and get a more complete representation of the same object; but properties cannot be
     * removed, so this only allows limited reuse of the helper instance. The helper allows
     * duplication of properties (multiple name/value pairs with the same name can be added).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addHolder,com.google.common.base.MoreObjects$ToStringHelper:addHolder(java.lang.Object),422,427,"/**
* Adds a holder with the specified value to the builder.
* @param value object to be held, or null for default behavior
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addHolder,"com.google.common.base.MoreObjects$ToStringHelper:addHolder(java.lang.String,java.lang.Object)",429,435,"/**
* Adds a named holder with the specified value to the builder.
* @param name name of the holder
* @param value value associated with the holder, or null for no value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addUnconditionalHolder,com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder(java.lang.Object),443,448,"/**
* Adds an unconditional value holder with given object.
* @param value the value to be held.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addUnconditionalHolder,"com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder(java.lang.String,java.lang.Object)",450,456,"/**
* Adds a non-conditional holder for the specified value.
* @param name unique identifier
* @param value value to be held
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getWeigher,com.google.common.cache.CacheBuilder:getWeigher(),604,607,"/**
* Returns the weigher instance for specified types.
* @return Weigher object or default instance if not set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getKeyStrength,com.google.common.cache.CacheBuilder:getKeyStrength(),638,640,"/**
* Returns the key strength with default STRONG if null.
* @return Strength enum value (e.g. WEAK, MEDIUM, STRONG)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getValueStrength,com.google.common.cache.CacheBuilder:getValueStrength(),698,700,"/**
* Returns the value strength, defaulting to STRONG if unspecified.
* @return Value strength with a default of STRONG if not set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getRemovalListener,com.google.common.cache.CacheBuilder:getRemovalListener(),988,992,"/**
* Returns removal listener instance or null if not set.
* @return RemovalListener instance or NullListener
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,get,com.google.common.collect.ImmutableSetMultimap:get(java.lang.Object),528,533,"/**
* Retrieves a value from the underlying map by key, returning an empty set if not found. 
* @param key unique identifier
* @return ImmutableSet of values or empty set if key is missing
*/","* Returns an immutable set of the values for the given key. If no mappings in the multimap have
   * the provided key, an empty immutable set is returned. The values are in the same order as the
   * parameters used to build this multimap.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,getKeyStrength,com.google.common.collect.MapMaker:getKeyStrength(),221,223,"/**
* Returns key strength with default STRONG if not set.
* @return KeyStrength enum value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,getValueStrength,com.google.common.collect.MapMaker:getValueStrength(),268,270,"/**
* Returns the strength of the value, defaulting to STRONG if unknown.
* @return Strength enum value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,getResource,com.google.common.io.Resources:getResource(java.lang.String),187,197,"/**
* Retrieves the resource by name and checks for existence.
* @param resourceName unique resource identifier
* @return URL of the resource or throws exception if not found
*/","* Returns a {@code URL} pointing to {@code resourceName} if the resource is found using the
   * {@linkplain Thread#getContextClassLoader() context class loader}. In simple environments, the
   * context class loader will find resources from the class path. In environments where different
   * threads can have different class loaders, for example app servers, the context class loader
   * will typically have been set to an appropriate loader for the current thread.
   *
   * <p>In the unusual case where the context class loader is null, the class loader that loaded
   * this class ({@code Resources}) will be used instead.
   *
   * @throws IllegalArgumentException if the resource is not found",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,absent,com.google.common.base.Optional:absent(),96,98,"/**
* Returns an empty Optional of type T.
* @return Empty Optional instance","* Returns an {@code Optional} instance with no contained reference.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's
   * {@code Optional.empty}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,toJavaUtil,com.google.common.base.Optional:toJavaUtil(com.google.common.base.Optional),148,155,"/**
* Converts Google Optional to Java Util Optional.
* @param googleOptional Google Optional object or null
* @return Java Util Optional object or null if input is null
*/","* Returns the equivalent {@code java.util.Optional} value to the given {@code
   * com.google.common.base.Optional}, or {@code null} if the argument is null.
   *
   * <p>If {@code googleOptional} is known to be non-null, use {@code googleOptional.toJavaUtil()}
   * instead.
   *
   * <p>Unfortunately, the method reference {@code Optional::toJavaUtil} will not work, because it
   * could refer to either the static or instance version of this method. Write out the lambda
   * expression {@code o -> Optional.toJavaUtil(o)} instead.
   *
   * @since 21.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,emptyToNull,com.google.common.base.Platform:emptyToNull(java.lang.String),80,82,"/**
* Converts null or empty strings to null.","* Returns the string if it is not empty, or a null string otherwise.
   *
   * @param string the string to test and possibly return
   * @return {@code string} if it is not empty; {@code null} otherwise",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,isNullOrEmpty,com.google.common.base.Strings:isNullOrEmpty(java.lang.String),70,72,"/**
* Checks if the input string is empty or null.
* @param string input string to check
*/","* Returns {@code true} if the given string is null or is the empty string.
   *
   * <p>Consider normalizing your string references with {@link #nullToEmpty}. If you do, you can
   * use {@link String#isEmpty()} instead of this method, and you won't need special null-safe forms
   * of methods like {@link String#toUpperCase} either. Or, if you'd like to normalize ""in the other
   * direction,"" converting empty strings to {@code null}, you can use {@link #emptyToNull}.
   *
   * @param string a string reference to check
   * @return {@code true} if the string is null or is the empty string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseDuration,"com.google.common.cache.CacheBuilderSpec$AccessDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)",461,466,"/**
* Sets access expiration duration and time unit for the cache specification.
* @param spec CacheBuilderSpec object to configure
* @param duration access expiration duration in specified time unit
* @param unit TimeUnit of the expiration duration (e.g. seconds, minutes)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$RecordStatsParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",412,417,"/**
* Enables record statistics for the given CacheBuilderSpec.
* @param spec CacheBuilder configuration
* @param key unused parameter (legacy)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseDuration,"com.google.common.cache.CacheBuilderSpec$RefreshDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)",481,486,"/**
* Sets the refresh duration and time unit for a CacheBuilderSpec.
* @param spec cache builder specification
* @param duration refresh duration in specified time unit
* @param unit time unit of refresh duration (e.g. TimeUnit.SECONDS)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseDuration,"com.google.common.cache.CacheBuilderSpec$WriteDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)",471,476,"/**
* Sets write expiration duration and time unit for CacheBuilderSpec.
* @param spec the CacheBuilderSpec to configure
* @param duration the duration value
* @param unit the TimeUnit of the duration
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,chooseTableSize,com.google.common.collect.ImmutableSet:chooseTableSize(int),696,711,"/**
* Calculates optimal hash table size based on desired load factor.
* @param setSize target collection size
* @return optimal table size (power of 2)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,skip,"com.google.common.collect.Iterables:skip(java.lang.Iterable,int)",912,969,"/**
* Skips a specified number of elements from the given iterable.
* @param iterable input iterable
* @param numberToSkip number of elements to skip
* @return an iterable with skipped elements removed
*/","* Returns a view of {@code iterable} that skips its first {@code numberToSkip} elements. If
   * {@code iterable} contains fewer than {@code numberToSkip} elements, the returned iterable skips
   * all of its elements.
   *
   * <p>Modifications to the underlying {@link Iterable} before a call to {@code iterator()} are
   * reflected in the returned iterator. That is, the iterator skips the first {@code numberToSkip}
   * elements that exist when the {@code Iterator} is created, not when {@code skip()} is called.
   *
   * <p>The returned iterable's iterator supports {@code remove()} if the iterator of the underlying
   * iterable supports it. Note that it is <i>not</i> possible to delete the last skipped element by
   * immediately calling {@code remove()} on that iterator, as the {@code Iterator} contract states
   * that a call to {@code remove()} before a call to {@code next()} will throw an {@link
   * IllegalStateException}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#skip}
   *
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,limit,"com.google.common.collect.Iterables:limit(java.lang.Iterable,int)",984,999,"/**
* Limits the number of elements in an iterable to a specified size.
* @param iterable input collection
* @param limitSize maximum number of elements to include
* @return Iterable containing up to limitSize elements or empty if none exist
*/","* Returns a view of {@code iterable} containing its first {@code limitSize} elements. If {@code
   * iterable} contains fewer than {@code limitSize} elements, the returned view contains all of its
   * elements. The returned iterable's iterator supports {@code remove()} if {@code iterable}'s
   * iterator does.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#limit}
   *
   * @param iterable the iterable to limit
   * @param limitSize the maximum number of elements in the returned iterable
   * @throws IllegalArgumentException if {@code limitSize} is negative
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,advance,"com.google.common.collect.Iterators:advance(java.util.Iterator,int)",934,944,"/**
* Advances the given iterator by a specified number of elements.
* @param iterator Iterator to advance
* @param numberToAdvance Nonnegative number of elements to skip
* @return Number of elements actually advanced (0 if not possible)
*/","* Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times or until {@code
   * hasNext()} returns {@code false}, whichever comes first.
   *
   * @return the number of elements the iterator was advanced
   * @since 13.0 (since 3.0 as {@code Iterators.skip})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,limit,"com.google.common.collect.Iterators:limit(java.util.Iterator,int)",956,983,"/**
* Limits an iterator to a specified size.
* @param iterator the original iterator
* @param limitSize maximum number of elements to yield
* @return Iterator yielding at most limitSize elements or null if iterator is empty
*/","* Returns a view containing the first {@code limitSize} elements of {@code iterator}. If {@code
   * iterator} contains fewer than {@code limitSize} elements, the returned view contains all of its
   * elements. The returned iterator supports {@code remove()} if {@code iterator} does.
   *
   * @param iterator the iterator to limit
   * @param limitSize the maximum number of elements in the returned iterator
   * @throws IllegalArgumentException if {@code limitSize} is negative
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,forTree,com.google.common.graph.Traverser:forTree(com.google.common.graph.SuccessorsFunction),180,193,"/**
* Creates a tree traverser for the given graph or network.
* @param tree SuccessorsFunction representing the tree structure
* @return Traverser object to traverse the tree
*/","* Creates a new traverser for a directed acyclic graph that has at most one path from the start
   * node(s) to any node reachable from the start node(s), and has no paths from any start node to
   * any other start node, such as a tree or forest.
   *
   * <p>{@code forTree()} is especially useful (versus {@code forGraph()}) in cases where the data
   * structure being traversed is, in addition to being a tree/forest, also defined <a
   * href=""https://github.com/google/guava/wiki/GraphsExplained#non-recursiveness"">recursively</a>.
   * This is because the {@code forTree()}-based implementations don't keep track of visited nodes,
   * and therefore don't need to call {@code equals()} or {@code hashCode()} on the node objects;
   * this saves both time and space versus traversing the same graph using {@code forGraph()}.
   *
   * <p>Providing a graph to be traversed for which there is more than one path from the start
   * node(s) to any node may lead to:
   *
   * <ul>
   *   <li>Traversal not terminating (if the graph has cycles)
   *   <li>Nodes being visited multiple times (if multiple paths exist from any start node to any
   *       node reachable from any start node)
   * </ul>
   *
   * <p><b>Performance notes</b>
   *
   * <ul>
   *   <li>Traversals require <i>O(n)</i> time (where <i>n</i> is the number of nodes reachable from
   *       the start node).
   *   <li>While traversing, the traverser will use <i>O(H)</i> space (where <i>H</i> is the number
   *       of nodes that have been seen but not yet visited, that is, the ""horizon"").
   * </ul>
   *
   * <p><b>Examples</b> (all edges are directed facing downwards)
   *
   * <p>The graph below would be valid input with start nodes of {@code a, f, c}. However, if {@code
   * b} were <i>also</i> a start node, then there would be multiple paths to reach {@code e} and
   * {@code h}.
   *
   * {@snippet :
   *    a     b      c
   *   / \   / \     |
   *  /   \ /   \    |
   * d     e     f   g
   *       |
   *       |
   *       h
   * }
   *
   * <p>.
   *
   * <p>The graph below would be a valid input with start nodes of {@code a, f}. However, if {@code
   * b} were a start node, there would be multiple paths to {@code f}.
   *
   * {@snippet :
   *    a     b
   *   / \   / \
   *  /   \ /   \
   * c     d     e
   *        \   /
   *         \ /
   *          f
   * }
   *
   * <p><b>Note on binary trees</b>
   *
   * <p>This method can be used to traverse over a binary tree. Given methods {@code
   * leftChild(node)} and {@code rightChild(node)}, this method can be called as
   *
   * {@snippet :
   * Traverser.forTree(node -> ImmutableList.of(leftChild(node), rightChild(node)));
   * }
   *
   * @param tree {@link SuccessorsFunction} representing a directed acyclic graph that has at most
   *     one path between any two nodes",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,<init>,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:<init>(long[]),176,185,"/**
* Initializes LockFreeBitArray with an array of long values.
* @param data input data array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,checkPositiveAndMakeMultipleOf32,com.google.common.hash.Hashing:checkPositiveAndMakeMultipleOf32(int),739,742,"/**
* Calculates the next multiple of 32 from a given number of positive bits.
* @param bits positive number of bits
*/","Checks that the passed argument is positive, and ceils it to a multiple of 32.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,<init>,"com.google.common.io.ByteStreams$LimitedInputStream:<init>(java.io.InputStream,long)",720,725,"/**
* Creates a limited input stream with a specified size limit.
* @param in original input stream
* @param limit maximum allowed bytes to read from the stream
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,<init>,com.google.common.math.Quantiles$Scale:<init>(int),176,179,"/**
* Initializes Scale object with a valid quantile scale value.
* @param scale positive integer representing the quantile scale
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,<init>,"com.google.common.math.Quantiles$ScaleAndIndexes:<init>(int,int[])",327,334,"/**
* Initializes ScaleAndIndexes object with specified scale and indexes.
* @param scale scaling factor
* @param indexes integer array of indexes to validate and store
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromBigInteger,"com.google.common.net.InetAddresses:fromBigInteger(java.math.BigInteger,boolean)",1120,1150,"/**
* Converts a BigInteger to an InetAddress.
* @param address BigInteger representation of IP address
* @param isIpv6 true for IPv6, false for IPv4
* @return InetAddress object or fails with UnknownHostException
*/","* Converts a BigInteger to either an IPv4 or IPv6 address. If the IP is IPv4, it must be
   * constrained to 32 bits, otherwise it is constrained to 128 bits.
   *
   * @param address the address represented as a big integer
   * @param isIpv6 whether the created address should be IPv4 or IPv6
   * @return the BigInteger converted to an address
   * @throws IllegalArgumentException if the BigInteger is not between 0 and maximum value for IPv4
   *     or IPv6 respectively",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,com.google.common.util.concurrent.Striped$PowerOfTwoStriped:<init>(int),350,353,"/**
* Calculates and initializes the power of two striped mask.
* @param stripes number of stripes in the pattern
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodabetFor,com.google.common.io.BaseEncoding$Alphabet:decodabetFor(char[]),481,491,"/**
* Initializes the Ascii table with character indices.
* @param chars array of unique ASCII characters
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,repeat,"com.google.common.base.Strings:repeat(java.lang.String,int)",148,174,"/**
* Repeats a string by the specified count.
* @param string string to repeat
* @param count number of repetitions
*/","* Returns a string consisting of a specific number of concatenated copies of an input string. For
   * example, {@code repeat(""hey"", 3)} returns the string {@code ""heyheyhey""}.
   *
   * <p><b>Java 11+ users:</b> use {@code string.repeat(count)} instead.
   *
   * @param string any non-null string
   * @param count the number of times to repeat it; a nonnegative integer
   * @return a string containing {@code string} repeated {@code count} times (the empty string if
   *     {@code count} is zero)
   * @throws IllegalArgumentException if {@code count} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkNonNegative,com.google.common.graph.Graphs:checkNonNegative(int),642,646,"/**
* Verifies and returns a non-negative integer value.
* @param value input integer to be validated
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkPositive,com.google.common.graph.Graphs:checkPositive(int),654,658,"/**
* Returns input value if it's positive; otherwise throws IllegalArgumentException.
* @param value the number to be checked
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,newHasher,com.google.common.hash.AbstractHashFunction:newHasher(int),75,80,"/**
* Creates a new hash object with specified input size.
* @param expectedInputSize the maximum size of input data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,<init>,"com.google.common.hash.BloomFilter:<init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy)",131,140,"/**
* Initializes BloomFilter with specified parameters.
* @param bits underlying LockFreeBitArray
* @param numHashFunctions number of hash functions to use
* @param funnel funnel function for data transformation
* @param strategy strategy for bit array updates
*/",Creates a BloomFilter.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/ChecksumHashFunction.java,<init>,"com.google.common.hash.ChecksumHashFunction:<init>(com.google.common.hash.ImmutableSupplier,int,java.lang.String)",42,48,"/**
* Initializes a ChecksumHashFunction with the given checksum algorithm and bit size.
* @param checksumSupplier supplier of the checksum algorithm
* @param bits hash function's output size in bits (must be 32 or 64)
* @param toString string representation of this hash function
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,concatenating,com.google.common.hash.Hashing:concatenating(java.lang.Iterable),774,783,"/**
* Combines multiple hash functions into a single concatenated function.
* @param hashFunctions iterable collection of HashFunction instances
*/","* Returns a hash function which computes its hash code by concatenating the hash codes of the
   * underlying hash functions together. This can be useful if you need to generate hash codes of a
   * specific length.
   *
   * <p>For example, if you need 1024-bit hash codes, you could join two {@link Hashing#sha512} hash
   * functions together: {@code Hashing.concatenating(Hashing.sha512(), Hashing.sha512())}.
   *
   * @since 19.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,<init>,"com.google.common.hash.SipHashFunction:<init>(int,int,long,long)",55,64,"/**
* Initializes the SipHash function with given parameters.
* @param c number of iterations for compression rounds
* @param d number of iterations for finalization rounds
* @param k0 first key value
* @param k1 second key value
*/","* @param c the number of compression rounds (must be positive)
   * @param d the number of finalization rounds (must be positive)
   * @param k0 the first half of the key
   * @param k1 the second half of the key",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,<init>,"com.google.common.io.FileBackedOutputStream:<init>(int,boolean)",119,154,"/**
* Initializes a FileBackedOutputStream with specified file threshold and reset behavior.
* @param fileThreshold minimum size (in bytes) to switch from memory to disk storage
* @param resetOnFinalize whether to reset the output stream on finalize() call
*/","* Creates a new instance that uses the given file threshold, and optionally resets the data when
   * the {@link ByteSource} returned by {@link #asByteSource} is finalized.
   *
   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file
   * @param resetOnFinalize if true, the {@link #reset} method will be called when the {@link
   *     ByteSource} returned by {@link #asByteSource} is finalized.
   * @throws IllegalArgumentException if {@code fileThreshold} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,<init>,"com.google.common.net.InetAddresses$TeredoInfo:<init>(java.net.Inet4Address,java.net.Inet4Address,int,int)",768,781,"/**
* Constructs a TeredoInfo object with IPv4 addresses and port/flags.
* @param server the Teredo server address (or null for default)
* @param client the Teredo client address (or null for default)
* @param port the UDP port number
* @param flags the Teredo flags",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getInet4Address,com.google.common.net.InetAddresses:getInet4Address(byte[]),124,132,"/**
* Converts a 4-byte byte array to an Inet4Address object.
* @param bytes IPv4 address as a 4-element byte array
* @return Inet4Address object or null if invalid input
*/","* Returns an {@link Inet4Address}, given a byte array representation of the IPv4 address.
   *
   * @param bytes byte array representing an IPv4 address (should be of length 4)
   * @return {@link Inet4Address} corresponding to the supplied byte array
   * @throws IllegalArgumentException if a valid {@link Inet4Address} can not be created",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,ensureCapacity,"com.google.common.primitives.Booleans:ensureCapacity(boolean[],int,int)",272,276,"/**
* Ensures the capacity of a boolean array is at least minLength with added padding.
* @param array boolean array to ensure capacity for
* @param minLength minimum required length
* @param padding additional elements to append
* @return modified boolean array or original if already sufficient
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,ensureCapacity,"com.google.common.primitives.Bytes:ensureCapacity(byte[],int,int)",201,205,"/**
* Ensures the capacity of a byte array to be at least minLength with additional padding.
* @param array input byte array
* @param minLength minimum length required
* @param padding extra bytes to append
* @return expanded byte array or original if already sufficient
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,ensureCapacity,"com.google.common.primitives.Chars:ensureCapacity(char[],int,int)",356,360,"/**
* Ensures the given character array has a minimum length and optional padding.
* @param array input character array
* @param minLength minimum required length
* @param padding additional characters to append if necessary
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,ensureCapacity,"com.google.common.primitives.Doubles:ensureCapacity(double[],int,int)",348,352,"/**
* Ensures the capacity of a double array meets or exceeds minimum length with added padding.
* @param array input array
* @param minLength minimum required length
* @param padding additional elements to add beyond minLength
* @return modified array if necessary, otherwise original array
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,ensureCapacity,"com.google.common.primitives.Floats:ensureCapacity(float[],int,int)",345,349,"/**
* Ensures the capacity of an array is at least minLength with added padding.
* @param array input float array
* @param minLength minimum length required
* @param padding additional elements to add
* @return expanded array or original if sufficient capacity already exists
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,ensureCapacity,"com.google.common.primitives.Ints:ensureCapacity(int[],int,int)",416,420,"/**
* Ensures the given array has a minimum length and returns it with added padding.
* @param array original array
* @param minLength minimum required length
* @param padding additional elements to append
* @return updated array or original if already sufficient length
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,ensureCapacity,"com.google.common.primitives.Longs:ensureCapacity(long[],int,int)",495,499,"/**
* Ensures the capacity of a long array meets specified minimum length and adds padding.
* @param array input array to resize
* @param minLength minimum required length
* @param padding additional space to add
* @return resized array with sufficient capacity or original array if already large enough
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,ensureCapacity,"com.google.common.primitives.Shorts:ensureCapacity(short[],int,int)",406,410,"/**
* Ensures the given short array has sufficient capacity by copying to a new array with increased length.
* @param array original short array
* @param minLength minimum required length
* @param padding additional length to ensure capacity
* @return updated short array with ensured capacity or original array if sufficient","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,checkPermits,com.google.common.util.concurrent.RateLimiter:checkPermits(int),493,495,"/**
* Validates that requested permits are positive.
* @param permits number of allowed requests
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkNonNegative,com.google.common.graph.Graphs:checkNonNegative(long),648,652,"/**
* Verifies and returns a non-negative value.
* @param value the value to be checked (must be >= 0)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkPositive,com.google.common.graph.Graphs:checkPositive(long),660,664,"/**
* Validates and returns a positive numeric value.
* @param value numeric value to validate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,checkedCast,com.google.common.primitives.Chars:checkedCast(long),85,89,"/**
* Safely casts long to char, enforcing in-range values.
* @param value the long value to cast
*/","* Returns the {@code char} value that is equal to {@code value}, if possible.
   *
   * @param value any value in the range of the {@code char} type
   * @return the {@code char} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Character#MAX_VALUE}
   *     or less than {@link Character#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,checkedCast,com.google.common.primitives.Ints:checkedCast(long),95,99,"/**
* Safely casts long to int while checking for overflow.
* @param value input value to cast
* @return int representation or throws exception on overflow
*/","* Returns the {@code int} value that is equal to {@code value}, if possible.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Use {@link
   * Math#toIntExact(long)} instead, but be aware that that method throws {@link
   * ArithmeticException} rather than {@link IllegalArgumentException}.
   *
   * @param value any value in the range of the {@code int} type
   * @return the {@code int} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Integer#MAX_VALUE} or
   *     less than {@link Integer#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,checkNoOverflow,com.google.common.primitives.Longs:checkNoOverflow(long),268,274,"/**
* Converts long result to int, checking for overflow.
* @param result long value to be converted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,checkedCast,com.google.common.primitives.Shorts:checkedCast(long),90,94,"/**
* Safely casts long to short, enforcing range validity.
* @param value input value to be cast
*/","* Returns the {@code short} value that is equal to {@code value}, if possible.
   *
   * @param value any value in the range of the {@code short} type
   * @return the {@code short} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Short#MAX_VALUE} or
   *     less than {@link Short#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,checkedCast,com.google.common.primitives.SignedBytes:checkedCast(long),57,61,"/**
* Safely casts long to byte while enforcing in-range values.
* @param value the value to cast
*/","* Returns the {@code byte} value that is equal to {@code value}, if possible.
   *
   * @param value any value in the range of the {@code byte} type
   * @return the {@code byte} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Byte#MAX_VALUE} or
   *     less than {@link Byte#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,checkedCast,com.google.common.primitives.UnsignedBytes:checkedCast(long),97,101,"/**
* Safely casts a long to a byte, checking for out-of-range values.
* @param value the long value to cast
*/","* Returns the {@code byte} value that, when treated as unsigned, is equal to {@code value}, if
   * possible.
   *
   * @param value a value between 0 and 255 inclusive
   * @return the {@code byte} value that, when treated as unsigned, equals {@code value}
   * @throws IllegalArgumentException if {@code value} is negative or greater than 255",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,checkedCast,com.google.common.primitives.UnsignedInts:checkedCast(long),93,96,"/**
* Safely casts a long to an integer, checking for out-of-range values.
* @param value the value to cast
* @return the casted int value or throws IllegalArgumentException for invalid input
*/","* Returns the {@code int} value that, when treated as unsigned, is equal to {@code value}, if
   * possible.
   *
   * @param value a value between 0 and 2<sup>32</sup>-1 inclusive
   * @return the {@code int} value that, when treated as unsigned, equals {@code value}
   * @throws IllegalArgumentException if {@code value} is negative or greater than or equal to
   *     2<sup>32</sup>
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedDelaySchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedDelaySchedule(long,long,java.util.concurrent.TimeUnit)",143,155,"/**
* Creates a scheduler that executes tasks with fixed delays.
* @param initialDelay initial time to wait before first execution
* @param delay subsequent execution interval
* @param unit time unit for delay (e.g. TimeUnit.SECONDS)
*/","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleWithFixedDelay} method.
     *
     * @param initialDelay the time to delay first execution
     * @param delay the delay between the termination of one execution and the commencement of the
     *     next
     * @param unit the time unit of the initialDelay and delay parameters",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedRateSchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedRateSchedule(long,long,java.util.concurrent.TimeUnit)",178,190,"/**
* Creates a fixed-rate scheduling strategy with specified delay and interval.
* @param initialDelay initial delay before first execution
* @param period time between successive executions
* @param unit time unit for period (e.g. TimeUnit.SECONDS)","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleAtFixedRate} method.
     *
     * @param initialDelay the time to delay first execution
     * @param period the period between successive executions of the task
     * @param unit the time unit of the initialDelay and period parameters",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,checkPositiveTimeout,com.google.common.util.concurrent.SimpleTimeLimiter:checkPositiveTimeout(long),279,281,"/**
* Validates that the provided timeout duration is positive.
* @param timeoutDuration milliseconds to wait before timing out
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,constrainToRange,"com.google.common.primitives.Chars:constrainToRange(char,char,char)",266,269,"/**
* Constricts a character within the specified range [min, max].
* @param value input character
* @param min minimum allowed value
* @param max maximum allowed value
* @return constrained character or original if already within range
*/","* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.
   *
   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned
   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code
   * value} is greater than {@code max}, {@code max} is returned.
   *
   * @param value the {@code char} value to constrain
   * @param min the lower bound (inclusive) of the range to constrain {@code value} to
   * @param max the upper bound (inclusive) of the range to constrain {@code value} to
   * @throws IllegalArgumentException if {@code min > max}
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,constrainToRange,"com.google.common.primitives.Longs:constrainToRange(long,long,long)",240,243,"/**
* Clamps a value within a specified range (inclusive).
* @param value the value to constrain
* @param min minimum allowed value
* @param max maximum allowed value
* @return constrained value or original if outside range
*/","* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.
   *
   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned
   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code
   * value} is greater than {@code max}, {@code max} is returned.
   *
   * <p><b>Java 21+ users:</b> Use {@code Math.clamp} instead. Note that that method is capable of
   * constraining a {@code long} input to an {@code int} range.
   *
   * @param value the {@code long} value to constrain
   * @param min the lower bound (inclusive) of the range to constrain {@code value} to
   * @param max the upper bound (inclusive) of the range to constrain {@code value} to
   * @throws IllegalArgumentException if {@code min > max}
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$KeyStrengthParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",383,388,"/**
* Sets the cache key strength.
* @param spec CacheBuilderSpec object
* @param key unique cache key identifier
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$ValueStrengthParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",399,406,"/**
* Sets the value strength for a given cache key.
* @param key unique cache identifier
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,add,"com.google.common.collect.Multisets$FilteredMultiset:add(java.lang.Object,int)",374,379,"/**
* Adds an element to a collection with specified occurrences.
* @param element element to add
* @param occurrences number of times to add the element
* @return total count after addition
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,getResource,"com.google.common.io.Resources:getResource(java.lang.Class,java.lang.String)",205,211,"/**
* Fetches a resource by name relative to the given class.
* @param contextClass Class providing the resource context
* @param resourceName Resource identifier (e.g. ""file.txt"")
* @return URL of the resource or null if not found
*/","* Given a {@code resourceName} that is relative to {@code contextClass}, returns a {@code URL}
   * pointing to the named resource.
   *
   * @throws IllegalArgumentException if the resource is not found",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,disallowPrimitiveType,"com.google.common.reflect.Types:disallowPrimitiveType(java.lang.reflect.Type[],java.lang.String)",525,532,"/**
* Disallows primitive types in the given array.
* @param types array of types to check
* @param usedAs description of how these types are being used
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,<init>,"com.google.common.util.concurrent.AbstractService$StateSnapshot:<init>(com.google.common.util.concurrent.Service$State,boolean,java.lang.Throwable)",609,624,"/**
* Initializes a StateSnapshot with given state, shutdown flag, and optional failure cause.
* @param internalState current application state
* @param shutdownWhenStartupFinishes whether to shut down on startup completion
* @param failure optional reason for failed state; null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,checkNoDuplicate,"com.google.common.collect.RegularImmutableTable:checkNoDuplicate(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",196,204,"/**
* Ensures no duplicate value for the given keys.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param existingValue existing value (null if none)
* @param newValue new value to check against existing one
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,start,com.google.common.base.Stopwatch:start(),163,169,"/**
* Starts or resumes the stopwatch.
* @return This Stopwatch object for method chaining.","* Starts the stopwatch.
   *
   * @return this {@code Stopwatch} instance
   * @throws IllegalStateException if the stopwatch is already running.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,stop,com.google.common.base.Stopwatch:stop(),178,185,"/**
* Stops the stopwatch and updates elapsed time.
* @return this Stopwatch object
*/","* Stops the stopwatch. Future reads will return the fixed duration that had elapsed up to this
   * point.
   *
   * @return this {@code Stopwatch} instance
   * @throws IllegalStateException if the stopwatch is already stopped.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,checkNonLoadingCache,com.google.common.cache.CacheBuilder:checkNonLoadingCache(),1053,1055,"/**
* Validates that refreshNanos is unset when using non-loading cache.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,checkWeightWithWeigher,com.google.common.cache.CacheBuilder:checkWeightWithWeigher(),1057,1070,"/**
* Validates weight-related fields based on whether a weigher is present.
* @param weigher the weigher object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:remove(),1470,1477,"/**
* Removes this iterator and resets its backing collection.
* @throws IllegalStateException if no calls to next() have been made since the last call to remove()
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectPreconditions.java,checkRemove,com.google.common.collect.CollectPreconditions:checkRemove(boolean),62,64,"/**
* Validates removal capability and throws IllegalStateException if not allowed.
* @param canRemove true if user is allowed to remove elements
*/","* Precondition tester for {@code Iterator.remove()} that throws an exception with a consistent
   * error message.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,orderEntriesByValue,com.google.common.collect.ImmutableMap$Builder:orderEntriesByValue(java.util.Comparator),513,518,"/**
* Sets the comparator for ordering entries by value.
* @param valueComparator comparator to order entries by value
*/","* Configures this {@code Builder} to order entries by value according to the specified
     * comparator.
     *
     * <p>The sort order is stable, that is, if two entries have values that compare as equivalent,
     * the entry that was inserted first will be first in the built map's iteration order.
     *
     * @throws IllegalStateException if this method was already called
     * @since 19.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,remove,com.google.common.collect.Iterators$PeekingImpl:remove(),1209,1213,"/**
* Removes the current element from the iterator.
* @throws IllegalStateException if hasPeeked is true.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,remove,com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:remove(),546,557,"/**
* Removes the current node from the data structure.
* @throws IllegalStateException if no calls have been made to 'next()' since last 'remove()'
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,isEvenLevel,com.google.common.collect.MinMaxPriorityQueue:isEvenLevel(int),491,496,"/**
* Determines if the given index represents an even level.
* @param index unique identifier for the level
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,checkNotDone,com.google.common.hash.MacHashFunction$MacHasher:checkNotDone(),130,132,"/**
* Ensures this Hasher has not been used to compute a digest yet.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,checkNotDone,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:checkNotDone(),157,159,"/**
* Ensures hasher has not been used to compute a hash.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,initialCapacity,com.google.common.cache.CacheBuilder:initialCapacity(int),411,420,"/**
* Sets the initial cache size.
* @param initialCapacity positive non-negative integer capacity
*/","* Sets the minimum total size for the internal hash tables. For example, if the initial capacity
   * is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each
   * having a hash table of size eight. Providing a large enough estimate at construction time
   * avoids the need for expensive resizing operations later, but setting this value unnecessarily
   * high wastes memory.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code initialCapacity} is negative
   * @throws IllegalStateException if an initial capacity was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,concurrencyLevel,com.google.common.cache.CacheBuilder:concurrencyLevel(int),457,466,"/**
* Sets the concurrency level for the cache.
* @param concurrencyLevel positive integer value
*/","* Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The
   * table is internally partitioned to try to permit the indicated number of concurrent updates
   * without contention. Because assignment of entries to these partitions is not necessarily
   * uniform, the actual concurrency observed may vary. Ideally, you should choose a value to
   * accommodate as many threads as will ever concurrently modify the table. Using a significantly
   * higher value than you need can waste space and time, and a significantly lower value can lead
   * to thread contention. But overestimates and underestimates within an order of magnitude do not
   * usually have much noticeable impact. A value of one permits only one thread to modify the cache
   * at a time, but since read operations and cache loading computations can proceed concurrently,
   * this still yields higher concurrency than full synchronization.
   *
   * <p>Defaults to 4. <b>Note:</b>The default may change in the future. If you care about this
   * value, you should always choose it explicitly.
   *
   * <p>The current implementation uses the concurrency level to create a fixed number of hashtable
   * segments, each governed by its own write lock. The segment lock is taken once for each explicit
   * write, and twice for each cache loading computation (once prior to loading the new value, and
   * once after loading completes). Much internal cache management is performed at the segment
   * granularity. For example, access queues and write queues are kept per segment when they are
   * required by the selected eviction algorithm. As such, when writing unit tests it is not
   * uncommon to specify {@code concurrencyLevel(1)} in order to achieve more deterministic eviction
   * behavior.
   *
   * <p>Note that future implementations may abandon segment locking in favor of more advanced
   * concurrency controls.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive
   * @throws IllegalStateException if a concurrency level was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,initialCapacity,com.google.common.collect.MapMaker:initialCapacity(int),144,153,"/**
* Sets the initial capacity for a MapMaker instance.
* @param initialCapacity non-negative integer value
*/","* Sets the minimum total size for the internal hash tables. For example, if the initial capacity
   * is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each
   * having a hash table of size eight. Providing a large enough estimate at construction time
   * avoids the need for expensive resizing operations later, but setting this value unnecessarily
   * high wastes memory.
   *
   * @throws IllegalArgumentException if {@code initialCapacity} is negative
   * @throws IllegalStateException if an initial capacity was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,concurrencyLevel,com.google.common.collect.MapMaker:concurrencyLevel(int),178,187,"/**
* Sets the concurrency level for the MapMaker instance.
* @param concurrencyLevel positive integer value controlling concurrent access
*/","* Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The
   * table is internally partitioned to try to permit the indicated number of concurrent updates
   * without contention. Because assignment of entries to these partitions is not necessarily
   * uniform, the actual concurrency observed may vary. Ideally, you should choose a value to
   * accommodate as many threads as will ever concurrently modify the table. Using a significantly
   * higher value than you need can waste space and time, and a significantly lower value can lead
   * to thread contention. But overestimates and underestimates within an order of magnitude do not
   * usually have much noticeable impact. A value of one permits only one thread to modify the map
   * at a time, but since read operations can proceed concurrently, this still yields higher
   * concurrency than full synchronization. Defaults to 4.
   *
   * <p><b>Note:</b> Prior to Guava release 9.0, the default was 16. It is possible the default will
   * change again in the future. If you care about this value, you should always choose it
   * explicitly.
   *
   * @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive
   * @throws IllegalStateException if a concurrency level was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,asInt,com.google.common.hash.HashCode$BytesHashCode:asInt(),267,277,"/**
* Converts hash code to an integer value.
* @return 32-bit integer representation of the hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,maximumSize,com.google.common.cache.CacheBuilder:maximumSize(long),493,505,"/**
* Sets the maximum cache size.
* @param maximumSize non-negative cache size limit
*/","* Specifies the maximum number of entries the cache may contain.
   *
   * <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in
   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each
   * resulting segment inside the cache <i>independently</i> limits its own size to approximately
   * {@code maximumSize / concurrencyLevel}.
   *
   * <p>When eviction is necessary, the cache evicts entries that are less likely to be used again.
   * For example, the cache may evict an entry because it hasn't been used recently or very often.
   *
   * <p>If {@code maximumSize} is zero, elements will be evicted immediately after being loaded into
   * cache. This can be useful in testing, or to disable caching temporarily.
   *
   * <p>This feature cannot be used in conjunction with {@link #maximumWeight}.
   *
   * @param maximumSize the maximum size of the cache
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code maximumSize} is negative
   * @throws IllegalStateException if a maximum size or weight was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,maximumWeight,com.google.common.cache.CacheBuilder:maximumWeight(long),534,546,"/**
* Sets the maximum weight for the cache.
* @param maximumWeight non-negative maximum weight
*/","* Specifies the maximum weight of entries the cache may contain. Weight is determined using the
   * {@link Weigher} specified with {@link #weigher}, and use of this method requires a
   * corresponding call to {@link #weigher} prior to calling {@link #build}.
   *
   * <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in
   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each
   * resulting segment inside the cache <i>independently</i> limits its own weight to approximately
   * {@code maximumWeight / concurrencyLevel}.
   *
   * <p>When eviction is necessary, the cache evicts entries that are less likely to be used again.
   * For example, the cache may evict an entry because it hasn't been used recently or very often.
   *
   * <p>If {@code maximumWeight} is zero, elements will be evicted immediately after being loaded
   * into cache. This can be useful in testing, or to disable caching temporarily.
   *
   * <p>Note that weight is only used to determine whether the cache is over capacity; it has no
   * effect on selecting which entry should be evicted next.
   *
   * <p>This feature cannot be used in conjunction with {@link #maximumSize}.
   *
   * @param maximumWeight the maximum total weight of entries the cache may contain
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code maximumWeight} is negative
   * @throws IllegalStateException if a maximum weight or size was already set
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,weigher,com.google.common.cache.CacheBuilder:weigher(com.google.common.cache.Weigher),577,594,"/**
* Sets a custom weighing strategy for the cache.
* @param weigher Weigher instance to use
*/","* Specifies the weigher to use in determining the weight of entries. Entry weight is taken into
   * consideration by {@link #maximumWeight(long)} when determining which entries to evict, and use
   * of this method requires a corresponding call to {@link #maximumWeight(long)} prior to calling
   * {@link #build}. Weights are measured and recorded when entries are inserted into the cache, and
   * are thus effectively static during the lifetime of a cache entry.
   *
   * <p>When the weight of an entry is zero it will not be considered for size-based eviction
   * (though it still may be evicted by other means).
   *
   * <p><b>Important note:</b> Instead of returning <em>this</em> as a {@code CacheBuilder}
   * instance, this method returns {@code CacheBuilder<K1, V1>}. From this point on, either the
   * original reference or the returned reference may be used to complete configuration and build
   * the cache, but only the ""generic"" one is type-safe. That is, it will properly prevent you from
   * building caches whose key or value types are incompatible with the types accepted by the
   * weigher already provided; the {@code CacheBuilder} type cannot do this. For best results,
   * simply use the standard method-chaining idiom, as illustrated in the documentation at top,
   * configuring a {@code CacheBuilder} and building your {@link Cache} all in a single statement.
   *
   * <p><b>Warning:</b> if you ignore the above advice, and use this {@code CacheBuilder} to build a
   * cache whose key or value type is incompatible with the weigher, you will likely experience a
   * {@link ClassCastException} at some <i>undefined</i> point in the future.
   *
   * @param weigher the weigher to use in calculating the weight of cache entries
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if a weigher was already set or {@link #maximumSize(long)} was
   *     previously called
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterWrite,"com.google.common.cache.CacheBuilder:expireAfterWrite(long,java.util.concurrent.TimeUnit)",753,763,"/**
* Sets the time after which cache entries expire.
* @param duration positive duration value
* @param unit time unit (e.g. TimeUnit.SECONDS)","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, or the most recent replacement of its value.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when
   * feasible), use {@link #expireAfterWrite(Duration)} instead.
   *
   * @param duration the length of time after an entry is created that it should be automatically
   *     removed
   * @param unit the unit that {@code duration} is expressed in
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterWrite} was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterAccess,"com.google.common.cache.CacheBuilder:expireAfterAccess(long,java.util.concurrent.TimeUnit)",831,841,"/**
* Sets cache expiration after access based on time duration.
* @param duration positive time span
* @param unit time unit (e.g. TimeUnit.SECONDS)
*/","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, the most recent replacement of its value, or its last
   * access. Access time is reset by all cache read and write operations (including {@code
   * Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code
   * containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}. So, for
   * example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for the
   * entries you retrieve.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when
   * feasible), use {@link #expireAfterAccess(Duration)} instead.
   *
   * @param duration the length of time after an entry is last accessed that it should be
   *     automatically removed
   * @param unit the unit that {@code duration} is expressed in
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterAccess} was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,refreshAfterWrite,"com.google.common.cache.CacheBuilder:refreshAfterWrite(long,java.util.concurrent.TimeUnit)",916,925,"/**
 * Configures cache to refresh after a write operation.
 * @param duration time to wait before refreshing in specified unit
 * @return CacheBuilder instance for chaining calls
 */","* Specifies that active entries are eligible for automatic refresh once a fixed duration has
   * elapsed after the entry's creation, or the most recent replacement of its value. The semantics
   * of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link
   * CacheLoader#reload}.
   *
   * <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is
   * recommended that users of this method override {@link CacheLoader#reload} with an asynchronous
   * implementation; otherwise refreshes will be performed during unrelated cache read and write
   * operations.
   *
   * <p>Currently automatic refreshes are performed when the first stale request for an entry
   * occurs. The request triggering refresh will make a synchronous call to {@link
   * CacheLoader#reload}
   * and immediately return the new value if the returned future is complete, and the old value
   * otherwise.
   *
   * <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>.
   *
   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when
   * feasible), use {@link #refreshAfterWrite(Duration)} instead.
   *
   * @param duration the length of time after an entry is created that it should be considered
   *     stale, and thus eligible for refresh
   * @param unit the unit that {@code duration} is expressed in
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #refreshAfterWrite} was already set
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,keyEquivalence,com.google.common.cache.CacheBuilder:keyEquivalence(com.google.common.base.Equivalence),366,372,"/**
* Sets the equivalence function for cache key comparison.
* @param equivalence equivalence function
*/","* Sets a custom {@code Equivalence} strategy for comparing keys.
   *
   * <p>By default, the cache uses {@link Equivalence#identity} to determine key equality when
   * {@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise.
   *
   * @return this {@code CacheBuilder} instance (for chaining)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,valueEquivalence,com.google.common.cache.CacheBuilder:valueEquivalence(com.google.common.base.Equivalence),387,394,"/**
* Sets the equivalence function for cache values.
* @param equivalence function to determine value equality
*/","* Sets a custom {@code Equivalence} strategy for comparing values.
   *
   * <p>By default, the cache uses {@link Equivalence#identity} to determine value equality when
   * {@link #weakValues} or {@link #softValues} is specified, and {@link Equivalence#equals()}
   * otherwise.
   *
   * @return this {@code CacheBuilder} instance (for chaining)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,setKeyStrength,com.google.common.cache.CacheBuilder:setKeyStrength(com.google.common.cache.LocalCache$Strength),631,636,"/**
* Sets the key strength for cache entries.
* @param strength strength of keys in cache
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,setValueStrength,com.google.common.cache.CacheBuilder:setValueStrength(com.google.common.cache.LocalCache$Strength),691,696,"/**
* Sets the cache value strength.
* @param strength Cache strength (e.g. STRONG, SOFT)
* @return this CacheBuilder instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,keyEquivalence,com.google.common.collect.MapMaker:keyEquivalence(com.google.common.base.Equivalence),121,128,"/**
* Sets custom key equivalence for the map.
* @param equivalence Equivalence strategy for keys
*/","* Sets a custom {@code Equivalence} strategy for comparing keys.
   *
   * <p>By default, the map uses {@link Equivalence#identity} to determine key equality when {@link
   * #weakKeys} is specified, and {@link Equivalence#equals()} otherwise. The only place this is
   * used is in {@link Interners.WeakInterner}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,setKeyStrength,com.google.common.collect.MapMaker:setKeyStrength(com.google.common.collect.MapMakerInternalMap$Strength),210,219,"/**
* Sets the strength of keys in the backing map.
* @param strength desired key strength level
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,setValueStrength,com.google.common.collect.MapMaker:setValueStrength(com.google.common.collect.MapMakerInternalMap$Strength),257,266,"/**
* Sets the strength of values in the map, enabling custom map creation if strong is not set.
* @param strength strength of values (STRONG or WEAK)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,<init>,com.google.common.reflect.TypeToken:<init>(),124,134,"/**
* Initializes this TypeToken with its captured type.
* @throws IllegalStateException if capturing a type variable
*/","* Constructs a new type token of {@code T}.
   *
   * <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the
   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.
   *
   * <p>For example:
   *
   * {@snippet :
   * TypeToken<List<String>> t = new TypeToken<List<String>>() {};
   * }",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,failureCause,com.google.common.util.concurrent.AbstractService$StateSnapshot:failureCause(),640,647,"/**
* Returns the failure cause of the service if it has failed; otherwise, throws an exception.
* @return The Throwable failure cause or null if not failed
*/",* @see Service#failureCause(),,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,doTransform,"com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:doTransform(com.google.common.util.concurrent.AsyncFunction,java.lang.Object)",222,233,"/**
* Applies asynchronous transformation function to input and returns the result as a ListenableFuture.
* @param function AsyncFunction to be applied
* @param input data to transform
* @return ListenableFuture containing transformed data or null if failed, wrapped in an immediate Future. 
* @throws Exception on failure",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,runInterruptibly,com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask:runInterruptibly(),163,171,"/**
* Runs the async callable, returning its result as a ListenableFuture.
* @return ListenableFuture containing the callable's output or null if failed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,runInterruptibly,com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:runInterruptibly(),161,168,"/**
* Executes the async task and returns its result as a ListenableFuture.
* @return ListenableFuture containing the task's result or null if failed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkElementIndex,"com.google.common.base.Preconditions:checkElementIndex(int,int,java.lang.String)",1365,1372,"/**
* Validates element index within specified bounds.
* @param index target index to check
* @param size collection size
* @return validated index if within bounds
*/","* Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size
   * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.
   *
   * @param index a user-supplied index identifying an element of an array, list or string
   * @param size the size of that array, list or string
   * @param desc the text to use to describe this index in an error message
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkPositionIndex,"com.google.common.base.Preconditions:checkPositionIndex(int,int,java.lang.String)",1414,1421,"/**
* Validates a position index within a given range.
* @param index the position to validate
* @param size the maximum valid position
* @return the validated index if within bounds
*/","* Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of
   * size {@code size}. A position index may range from zero to {@code size}, inclusive.
   *
   * @param index a user-supplied index identifying a position in an array, list or string
   * @param size the size of that array, list or string
   * @param desc the text to use to describe this index in an error message
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,badPositionIndexes,"com.google.common.base.Preconditions:badPositionIndexes(int,int,int)",1452,1461,"/**
* Validates position indexes (start and end) within a given array size.
* @param start starting index
* @param end ending index
* @param size total array size
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,alwaysTrue,com.google.common.base.Predicates:alwaysTrue(),51,53,"/**
* Returns a predicate that always evaluates to true.
*/","* Returns a predicate that always evaluates to {@code true}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code x -> true}, but note that lambdas do not have
   * human-readable {@link #toString()} representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,alwaysFalse,com.google.common.base.Predicates:alwaysFalse(),61,63,"/**
* Returns a predicate that always evaluates to false.
*/","* Returns a predicate that always evaluates to {@code false}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code x -> false}, but note that lambdas do not have
   * human-readable {@link #toString()} representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,isNull,com.google.common.base.Predicates:isNull(),73,75,"/**
* Returns a predicate that checks if an object is null.
*/","* Returns a predicate that evaluates to {@code true} if the object reference being tested is
   * null.
   *
   * <p><b>Discouraged:</b> Prefer using either {@code x -> x == null} or {@code Objects::isNull},
   * but note that lambdas and method references do not have human-readable {@link #toString()}
   * representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,notNull,com.google.common.base.Predicates:notNull(),85,87,"/**
* Creates a predicate that checks for non-null values.
*/","* Returns a predicate that evaluates to {@code true} if the object reference being tested is not
   * null.
   *
   * <p><b>Discouraged:</b> Prefer using either {@code x -> x != null} or {@code Objects::nonNull},
   * but note that lambdas and method references do not have human-readable {@link #toString()}
   * representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,and,"com.google.common.base.Predicates:and(com.google.common.base.Predicate,com.google.common.base.Predicate)",134,137,"/**
* Combines two predicates into a single AND predicate.
* @param first the first predicate to evaluate
* @param second the second predicate to evaluate
* @return a new predicate that returns true only if both input predicates return true
*/","* Returns a predicate that evaluates to {@code true} if both of its components evaluate to {@code
   * true}. The components are evaluated in order, and evaluation will be ""short-circuited"" as soon
   * as a false predicate is found.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.and(second)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,or,"com.google.common.base.Predicates:or(com.google.common.base.Predicate,com.google.common.base.Predicate)",174,177,"/**
* Combines two predicates using logical OR operation.
* @param first first predicate
* @param second second predicate
* @return A new predicate that returns true if either of the input predicates return true
*/","* Returns a predicate that evaluates to {@code true} if either of its components evaluates to
   * {@code true}. The components are evaluated in order, and evaluation will be ""short-circuited""
   * as soon as a true predicate is found.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.or(second)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/SmallCharMatcher.java,matches,com.google.common.base.SmallCharMatcher:matches(char),111,133,"/**
* Performs a hash-based string search for character match.
* @param c single character to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,<init>,com.google.common.base.Splitter:<init>(com.google.common.base.Splitter$Strategy),108,110,"/**
* Initializes a new Splitter instance with the specified strategy.
* @param strategy the splitting strategy to use
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,omitEmptyStrings,com.google.common.base.Splitter:omitEmptyStrings(),306,308,"/**
 * Creates a Splitter instance that omits empty strings from the split result.
 */","* Returns a splitter that behaves equivalently to {@code this} splitter, but automatically omits
   * empty strings from the results. For example, {@code
   * Splitter.on(',').omitEmptyStrings().split("",a,,,b,c,,"")} returns an iterable containing only
   * {@code [""a"", ""b"", ""c""]}.
   *
   * <p>If either {@code trimResults} option is also specified when creating a splitter, that
   * splitter always trims results first before checking for emptiness. So, for example, {@code
   * Splitter.on(':').omitEmptyStrings().trimResults().split("": : : "")} returns an empty iterable.
   *
   * <p>Note that it is ordinarily not possible for {@link #split(CharSequence)} to return an empty
   * iterable, but when using this option, it can (if the input sequence consists of nothing but
   * separators).
   *
   * @return a splitter with the desired configuration",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,limit,com.google.common.base.Splitter:limit(int),326,329,"/**
* Creates a new Splitter instance with the specified maximum item limit.
* @param maxItems maximum number of items to split
*/","* Returns a splitter that behaves equivalently to {@code this} splitter but stops splitting after
   * it reaches the limit. The limit defines the maximum number of items returned by the iterator,
   * or the maximum size of the list returned by {@link #splitToList}.
   *
   * <p>For example, {@code Splitter.on(',').limit(3).split(""a,b,c,d"")} returns an iterable
   * containing {@code [""a"", ""b"", ""c,d""]}. When omitting empty strings, the omitted strings do not
   * count. Hence, {@code Splitter.on(',').limit(3).omitEmptyStrings().split(""a,,,b,,,c,d"")} returns
   * an iterable containing {@code [""a"", ""b"", ""c,d""]}. When trim is requested, all entries are
   * trimmed, including the last. Hence {@code Splitter.on(',').limit(3).trimResults().split("" a , b
   * , c , d "")} results in {@code [""a"", ""b"", ""c , d""]}.
   *
   * @param maxItems the maximum number of items returned
   * @return a splitter with the desired configuration
   * @since 9.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,trimResults,com.google.common.base.Splitter:trimResults(com.google.common.base.CharMatcher),355,358,"/**
* Creates a new Splitter instance with specified trimming strategy.
* @param trimmer CharMatcher to apply for trimming
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,splitToList,com.google.common.base.Splitter:splitToList(java.lang.CharSequence),399,410,"/**
* Converts a CharSequence into an unmodifiable list of strings.
* @param sequence input string to split
*/","* Splits {@code sequence} into string components and returns them as an immutable list. If you
   * want an {@link Iterable} which may be lazily evaluated, use {@link #split(CharSequence)}.
   *
   * @param sequence the sequence of characters to split
   * @return an immutable list of the segments split from the parameter
   * @since 15.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,createTempDir,com.google.common.io.TempFileCreator$JavaIoCreator:createTempDir(),259,280,"/**
* Creates a temporary directory with unique name and retries on failure.
* @return File object representing the created temp directory or null if failed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,createTempDir,com.google.common.io.TempFileCreator$JavaNioCreator:createTempDir(),121,130,"/**
* Creates a temporary directory with specified permissions.
* @return File object for the created temporary directory
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,createTempFile,com.google.common.io.TempFileCreator$JavaNioCreator:createTempFile(java.lang.String),132,140,"/**
* Creates a temporary file with the specified prefix.
* @param prefix unique identifier for the temp file
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/StandardSystemProperty.java,toString,com.google.common.base.StandardSystemProperty:toString(),160,163,"/**
* Returns a string representation of this configuration entry.
* @return formatted string in ""key=value"" format.",Returns a string representation of this system property.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,<init>,com.google.common.base.Stopwatch:<init>(),141,143,"/**
* Initializes the stopwatch with the system ticker.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getTicker,com.google.common.cache.CacheBuilder:getTicker(boolean),949,954,"/**
* Retrieves system or custom ticker, depending on time recording preference.
* @param recordsTime true to use system ticker, false for custom ticker
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,elapsed,com.google.common.base.Stopwatch:elapsed(java.util.concurrent.TimeUnit),216,218,"/**
* Converts time elapsed in nanoseconds to desired unit.
* @param desiredUnit target time unit (e.g. TimeUnit.SECONDS)
* @return time elapsed in the specified unit
*/","* Returns the current elapsed time shown on this stopwatch, expressed in the desired time unit,
   * with any fraction rounded down.
   *
   * <p><b>Note:</b> the overhead of measurement can be more than a microsecond, so it is generally
   * not useful to specify {@link TimeUnit#NANOSECONDS} precision here.
   *
   * <p>It is generally not a good idea to use an ambiguous, unitless {@code long} to represent
   * elapsed time. Therefore, we recommend using {@link #elapsed()} instead, which returns a
   * strongly-typed {@code Duration} instance.
   *
   * @since 14.0 (since 10.0 as {@code elapsedTime()})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,elapsed,com.google.common.base.Stopwatch:elapsed(),226,231,"/**
* Calculates elapsed duration in nanoseconds and converts to standard duration format.","* Returns the current elapsed time shown on this stopwatch as a {@link Duration}. Unlike {@link
   * #elapsed(TimeUnit)}, this method does not lose any precision due to rounding.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,toString,com.google.common.base.Stopwatch:toString(),234,243,"/**
* Formats elapsed time in compact form with unit abbreviation.
* @return Elapsed time string (e.g., ""1.23s"") or null if invalid
*/",Returns a string representation of the current elapsed time.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,nullToEmpty,com.google.common.base.Strings:nullToEmpty(java.lang.String),45,47,"/**
* Wraps platform-specific empty-string handling for nullable strings.
* @param string input string that may be null
*/","* Returns the given string if it is non-null; the empty string otherwise.
   *
   * @param string the string to test and possibly return
   * @return {@code string} itself if it is non-null; {@code """"} if it is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,commonPrefix,"com.google.common.base.Strings:commonPrefix(java.lang.CharSequence,java.lang.CharSequence)",183,196,"/**
* Finds the common prefix between two character sequences.
* @param a first character sequence
* @param b second character sequence
* @return the common prefix as a String or an empty string if none found
*/","* Returns the longest string {@code prefix} such that {@code a.toString().startsWith(prefix) &&
   * b.toString().startsWith(prefix)}, taking care not to split surrogate pairs. If {@code a} and
   * {@code b} have no common prefix, returns the empty string.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,commonSuffix,"com.google.common.base.Strings:commonSuffix(java.lang.CharSequence,java.lang.CharSequence)",205,219,"/**
* Returns the common suffix of two CharSequences.
* @param a first CharSequence
* @return common suffix as String or empty string if no commonality
*/","* Returns the longest string {@code suffix} such that {@code a.toString().endsWith(suffix) &&
   * b.toString().endsWith(suffix)}, taking care not to split surrogate pairs. If {@code a} and
   * {@code b} have no common suffix, returns the empty string.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,ofInstance,com.google.common.base.Suppliers:ofInstance(java.lang.Object),354,357,"/**
* Creates a supplier that returns the provided instance.
* @param instance the object to be supplied
*/","* Returns a supplier that always supplies {@code instance}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code () -> instance}, but note that lambdas do not have
   * human-readable {@link #toString()} representations and are not serializable. If you need a
   * supplier that is serializable, use {@code (Supplier<T> & Serializable) () -> instance}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ticker.java,<init>,com.google.common.base.Ticker$1:<init>(),33,33,"/**
* Default constructor for Ticker class. 
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,<init>,com.google.common.cache.CacheBuilder$3:<init>(),311,311,"/**
* Private constructor to prevent instantiation of this utility class. 
* Intended for use by CacheBuilder instances only.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,encodedLengthGeneral,"com.google.common.base.Utf8:encodedLengthGeneral(java.lang.CharSequence,int)",78,98,"/**
* Calculates the encoded length of a CharSequence in UTF-8 format.
* @param sequence input string
* @param start starting index for calculation
* @return encoded length in bytes
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,com.google.common.base.Verify:verify(boolean),98,102,"/**
* Throws an exception if the given boolean expression is false.
* @param expression boolean condition to be verified
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with no
   * message otherwise.
   *
   * @throws VerifyException if {@code expression} is {@code false}
   * @see Preconditions#checkState Preconditions.checkState()",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char)",136,140,"/**
* Verifies an expression and throws VerifyException with a formatted error message on failure.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for the error message with single placeholder character p1
* @param p1 placeholder character in the error message template
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int)",150,154,"/**
* Verifies an expression and throws a VerifyException with formatted error message.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for error message (with placeholder for p1)
* @param p1 first parameter for formatting the error message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long)",164,168,"/**
* Verifies an expression and throws VerifyException with formatted error message.
* @param expression boolean condition to evaluate
* @param errorMessageTemplate template for error message with placeholder (p1)
* @param p1 placeholder value in the error message template
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object)",119,126,"/**
* Verifies a given boolean condition and throws VerifyException with formatted error message if false.
* @param expression condition to verify
* @param errorMessageTemplate template for error message
* @param errorMessageArgs arguments for error message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * @param expression a boolean expression
   * @param errorMessageTemplate a template for the exception message should the check fail. The
   *     message is formed by replacing each {@code %s} placeholder in the template with an
   *     argument. These are matched by position - the first {@code %s} gets {@code
   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in
   *     square braces. Unmatched placeholders will be left as-is.
   * @param errorMessageArgs the arguments to be substituted into the message template. Arguments
   *     are converted to strings using {@link String#valueOf(Object)}.
   * @throws VerifyException if {@code expression} is {@code false}
   * @see Preconditions#checkState Preconditions.checkState()",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,char)",192,196,"/**
* Verifies a boolean expression and throws an exception with formatted error message if false.
* @param expression condition to verify
* @param errorMessageTemplate template for error message with placeholders p1 and p2
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,char)",206,210,"/**
* Throws a VerifyException if the given boolean expression is false.
* @param expression condition to verify
* @param errorMessageTemplate template for error message with parameters p1 and p2
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,char)",220,224,"/**
* Verifies a boolean expression and throws an exception with formatted error message if it's false.
* @param expression condition to verify
* @param errorMessageTemplate template for the error message
* @param p1 first parameter for formatting the error message
* @param p2 second parameter for formatting the error message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,char)",234,239,"/**
* Verifies the given expression and throws a VerifyException with formatted error message otherwise.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for error message with placeholders for p1 and p2
* @param p1 first placeholder value (can be null)
* @param p2 second placeholder value","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,int)",249,253,"/**
* Throws VerifyException with formatted error message if given condition is false.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for error message with placeholders (p1, p2)
* @param p1 char placeholder in error message template
* @param p2 int placeholder in error message template
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,int)",263,267,"/**
* Verifies a boolean expression; throws VerifyException with formatted message on failure.
* @param expression condition to verify
* @param errorMessageTemplate template for error message (with placeholders %p1 and %p2)
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,int)",277,281,"/**
* Verifies a boolean expression; throws VerifyException with formatted error message if false.
* @param expression condition to verify
* @param errorMessageTemplate template for error message (with placeholders for p1 and p2)
* @param p1 first parameter for error message template
* @param p2 second parameter for error message template
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,int)",291,296,"/**
* Verifies a condition and throws an exception with formatted error message if not met.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for error message with placeholders for p1 and p2
* @param p1 first parameter for error message formatting (may be null)
* @param p2 second parameter for error message formatting","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,long)",306,310,"/**
* Verifies a boolean expression; throws VerifyException if false.
* @param expression condition to verify
* @param errorMessageTemplate template for error message with params p1 and p2
* @param p1 first parameter for error message template
* @param p2 second parameter for error message template
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,long)",320,324,"/**
* Verifies a boolean condition and throws an exception with formatted error message on failure.
* @param expression condition to verify
* @param errorMessageTemplate template for error message with placeholders %s and %d
* @param p1 first parameter for error message placeholder
* @param p2 second parameter for error message placeholder
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,long)",334,338,"/**
* Verifies a boolean condition; throws VerifyException with formatted error message if false.
* @param expression the condition to verify
* @param errorMessageTemplate template for error message; placeholders %p1 and %p2 will be replaced
* @param p1 first placeholder value (long)
* @param p2 second placeholder value (long)
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,long)",348,353,"/**
* Verifies a condition and throws an exception with formatted error message if not met.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for the error message
* @param p1 first parameter for error message formatting
* @param p2 second parameter for error message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,java.lang.Object)",363,368,"/**
* Verifies an expression and throws a VerifyException with formatted error message if false.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for error message with placeholders (p1, p2)
* @param p1 placeholder value in error message template
* @param p2 optional placeholder value in error message template","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,java.lang.Object)",378,383,"/**
* Verifies a condition and throws an exception with formatted error message.
* @param expression condition to verify
* @param errorMessageTemplate template for error message (with placeholders)
* @param p1 first placeholder value in error message template
* @param p2 second placeholder value in error message template (may be null)","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,java.lang.Object)",393,398,"/**
* Verifies a given expression and throws an exception with formatted error message if false.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for error message with placeholders for p1 and p2
* @param p1 first parameter for error message template
* @param p2 second parameter for error message template (may be null)","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object)",408,413,"/**
* Verifies a given condition and throws an exception with formatted error message if false.
* @param expression boolean condition to verify
* @param errorMessageTemplate template string for error message with placeholders
* @param p1 first optional parameter for placeholder replacement in error message
* @param p2 second optional parameter for placeholder replacement in error message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)",423,432,"/**
* Verifies a given expression; throws VerifyException with formatted error message if false.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for error message (with placeholders)
* @param p1 p2 and p3 optional parameters for error message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",442,452,"/**
* Verifies the given expression; throws VerifyException with formatted message if false.
* @param expression boolean condition to verify
* @param errorMessageTemplate error message template with placeholders for params
* @param p1 p2 p3 p4 optional parameters to be used in error message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,cleanUp,com.google.common.base.internal.Finalizer:cleanUp(java.lang.ref.Reference),160,183,"/**
* Cleans up references recursively using the provided finalize method.
* @param firstReference initial reference to process
* @return true if cleanup successful, false otherwise
*/","* Cleans up the given reference and any other references already in the queue. Catches and logs
   * all throwables.
   *
   * @return true if the caller should continue to wait for more references to be added to the
   *     queue, false if the associated FinalizableReferenceQueue is no longer referenced.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,<init>,com.google.common.cache.AbstractCache$SimpleStatsCounter:<init>(),218,218,"/**
* Initializes a new instance of the SimpleStatsCounter.",Constructs an instance with all counts initialized to zero.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,incrementBy,com.google.common.cache.AbstractCache$SimpleStatsCounter:incrementBy(com.google.common.cache.AbstractCache$StatsCounter),272,280,"/**
* Merges statistics from another StatsCounter instance.
* @param other the StatsCounter to merge with this one
*/",Increments all counters by the values in {@code other}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,<init>,com.google.common.cache.AbstractLoadingCache:<init>(),46,46,"/**
* Initializes an instance of AbstractLoadingCache with default settings. 
* This constructor is intended to be used by subclasses only.",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,preservesInsertionOrderOnPutsMap,com.google.common.collect.Platform:preservesInsertionOrderOnPutsMap(),73,76,"/**
* Creates a map that preserves insertion order on put operations.
*/","* Returns the platform preferred map implementation that preserves insertion order when used only
   * for insertions.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,putAll,com.google.common.cache.AbstractCache:putAll(java.util.Map),94,99,"/**
* Adds all key-value pairs from the given map to this map.
* @param m map containing entries to add
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,invalidateAll,com.google.common.cache.AbstractCache:invalidateAll(java.lang.Iterable),117,123,"/**
* Invalidates all user profiles specified by the given iterable of unique identifiers. 
* @param keys iterable of unique user profile IDs to be invalidated
*/",* @since 11.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,getUnchecked,com.google.common.cache.AbstractLoadingCache:getUnchecked(java.lang.Object),48,56,"/**
* Retrieves the value associated with the given key, suppressing any ExecutionExceptions.
* @param key unique map key
* @return value associated with the key or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,newBuilder,com.google.common.cache.CacheBuilder:newBuilder(),320,322,"/**
 * Creates a new instance of CacheBuilder for cache configuration.
 */","* Constructs a new {@code CacheBuilder} instance with default settings, including strong keys,
   * strong values, and no automatic eviction of any kind.
   *
   * <p>Note that while this return type is {@code CacheBuilder<Object, Object>}, type parameters on
   * the {@link #build} methods allow you to create a cache of any key and value type desired.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,hashCode,com.google.common.cache.CacheBuilderSpec:hashCode(),241,254,"/**
* Calculates the hash code for this cache configuration.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,equals,com.google.common.cache.CacheBuilderSpec:equals(java.lang.Object),256,281,"/**
* Compares this CacheBuilderSpec to another object for equality.
* @param obj the object to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,<init>,com.google.common.cache.CacheLoader$FunctionToCacheLoader:<init>(com.google.common.base.Function),163,165,"/**
* Configures the cache loader with a given function to compute values.
* @param computingFunction function that computes cached values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,<init>,com.google.common.cache.CacheLoader$SupplierToCacheLoader:<init>(com.google.common.base.Supplier),214,216,"/**
* Initializes cache loader with a supplier to compute values.
* @param computingSupplier supplier to fetch computed values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,loadAll,com.google.common.cache.CacheLoader:loadAll(java.lang.Iterable),125,129,"/**
* Throws exception for bulk loading, forcing fallback to individual retrievals.
* @throws UnsupportedLoadingOperation if all keys are loaded at once is unsupported
*/","* Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link
   * LoadingCache#getAll}.
   *
   * <p>If the returned map doesn't contain all requested {@code keys} then the entries it does
   * contain will be cached, but {@code getAll} will throw an exception. If the returned map
   * contains extra keys not present in {@code keys} then all returned entries will be cached, but
   * only the entries for {@code keys} will be returned from {@code getAll}.
   *
   * <p>This method should be overridden when bulk retrieval is significantly more efficient than
   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls
   * to {@link LoadingCache#get} if this method is not overridden.
   *
   * @param keys the unique, non-null keys whose values should be loaded
   * @return a map from each key in {@code keys} to the value associated with that key; <b>may not
   *     contain null values</b>
   * @throws Exception if unable to load the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,requestCount,com.google.common.cache.CacheStats:requestCount(),109,111,"/**
* Calculates total hit count by adding hit and miss counts.
* @return Total hit count as a long value
*/","* Returns the number of times {@link Cache} lookup methods have returned either a cached or
   * uncached value. This is defined as {@code hitCount + missCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,loadCount,com.google.common.cache.CacheStats:loadCount(),161,163,"/**
* Calculates total load count by adding success and exception counts.
* @return Total load count
*/","* Returns the total number of times that {@link Cache} lookup methods attempted to load new
   * values. This includes both successful load operations and those that threw exceptions. This is
   * defined as {@code loadSuccessCount + loadExceptionCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,loadExceptionRate,com.google.common.cache.CacheStats:loadExceptionRate(),202,205,"/**
* Calculates the exception rate as a ratio of exceptions to total loads.
* @return Exception rate value between 0 and 1, or 0 if no loads occurred
*/","* Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code
   * loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when {@code
   * loadSuccessCount + loadExceptionCount == 0}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,averageLoadPenalty,com.google.common.cache.CacheStats:averageLoadPenalty(),225,228,"/**
* Calculates the average load penalty in seconds.
* @return Average load penalty or 0.0 if no loads were processed
*/","* Returns the average time spent loading new values. This is defined as {@code totalLoadTime /
   * (loadSuccessCount + loadExceptionCount)}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,<init>,com.google.common.cache.ForwardingCache:<init>(),39,39,"/**
* Initializes an empty forwarding cache instance.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,<init>,com.google.common.collect.ForwardingCollection:<init>(),54,54,"/**
* Initializes an empty collection that forwards operations to another collection. 
* @note This constructor is intended for use by subclasses only.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingIterator.java,<init>,com.google.common.collect.ForwardingIterator:<init>(),44,44,"/**
* Initializes an empty iterator that forwards calls to another iterator.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,<init>,com.google.common.collect.ForwardingMap:<init>(),62,62,"/**
* Initializes an empty ForwardingMap instance. 
* @see java.util.ForwardingMap
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,<init>,com.google.common.collect.ForwardingMapEntry:<init>(),55,55,"/**
 * Creates an empty ForwardingMapEntry instance. 
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,<init>,com.google.common.collect.ForwardingMultimap:<init>(),44,44,"/**
* Creates an empty ForwardingMultimap instance. 
* This constructor is intended to be used by subclasses. 
* The map will be created with default settings. 
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingTable.java,<init>,com.google.common.collect.ForwardingTable:<init>(),39,39,"/**
* Initializes an empty forwarding table.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingExecutorService.java,<init>,com.google.common.util.concurrent.ForwardingExecutorService:<init>(),49,49,"/**
* Creates an empty executor service that forwards all calls to another executor service.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,<init>,com.google.common.util.concurrent.ForwardingFuture:<init>(),41,41,"/**
* Initializes an empty ForwardingFuture instance. 
* This constructor is intended to be used internally by other classes that need to create a ForwardingFuture object.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,delegate,com.google.common.cache.ForwardingLoadingCache:delegate(),41,42,"/**
* Returns a loading cache instance that delegates to a concrete implementation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,createEntrySet,com.google.common.collect.ImmutableMultiset:createEntrySet(),365,367,"/**
* Creates an immutable set of entries.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:build(),675,678,"/**
* Returns an empty set of type E.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,createEntrySet,com.google.common.collect.ImmutableSortedMap:createEntrySet(),808,872,"/**
* Creates an immutable set of map entries.
* @return Set of entries or empty set if map is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,createCellSet,com.google.common.collect.RegularImmutableTable:createCellSet(),42,45,"/**
* Creates an immutable set of cells. If empty, returns an empty set; otherwise, creates a new cell set. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getSubscribersForTesting,com.google.common.eventbus.SubscriberRegistry:getSubscribersForTesting(java.lang.Class),116,119,"/**
* Returns set of subscribers for given event type, or an empty set if not found.
* @param eventType Class representing the event type
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getInterfaces,com.google.common.reflect.TypeToken$TypeCollector$3:getInterfaces(java.lang.Object),1431,1431,"/**
* Retrieves an iterable collection of interfaces implemented by the given class.
* @param type the class to inspect
* @return an iterable collection of interface types or empty iterator if none found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isEmpty,com.google.common.cache.LocalCache$AbstractCacheSet:isEmpty(),4543,4546,"/**
* Checks if local cache is empty.
* @return true if cache is empty, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isEmpty,com.google.common.cache.LocalCache$Values:isEmpty(),4595,4598,"/**
* Checks if local cache is empty.
* @return true if cache is empty, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,offer,com.google.common.cache.LocalCache$AccessQueue:offer(com.google.common.cache.ReferenceEntry),3830,3840,"/**
* Adds the given entry to the access queue.
* @param entry ReferenceEntry object to be added
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,iterator,com.google.common.cache.LocalCache$AccessQueue:iterator(),3908,3917,"/**
* Returns an iterator over the access queue entries.
* @return Iterator of ReferenceEntry objects or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainRecencyQueue,com.google.common.cache.LocalCache$Segment:drainRecencyQueue(),2578,2590,"/**
* Removes and processes recency queue entries, re-adding them to access queue as needed. 
* @GuardedBy(""this"") ensures thread safety.","* Drains the recency queue, updating eviction metadata that the entries therein were read in
     * the specified relative order. This currently amounts to adding them to relevant eviction
     * lists (accounting for the fact that they could have been removed from the map since being
     * added to the recency queue).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$2:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Creates a copy of the given reference entry with updated next and key.
* @param segment Segment containing the entry
* @param key New key for the copied entry
* @param original Original entry to copy from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$3:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Creates a new entry with the specified key and hash value.
* @param segment memory segment to create the entry in
* @param key unique identifier for the entry
* @param hash calculated hash of the key
* @param newNext next reference entry in the chain
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$4:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Creates a new reference entry with the specified key and hash.
* @param key unique reference identifier
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$6:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Creates a copied reference entry with the given key and hash.
* @param segment the segment to which this entry belongs
* @param key the unique identifier of the user
* @param newNext the next entry in the linked list
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$7:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Creates a new reference entry with the given key and hash.
* @param segment segment to create the entry in
* @param key unique identifier for the entry
* @param hash hash value of the entry
* @param newNext next reference entry in the list
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$8:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Creates a new entry with the specified key and hash, copying from the original entry.
* @param segment segment containing the entry
* @param key unique identifier of the entry's key
* @param hash copy of the original entry's hash
* @param newNext reference to the new next entry in the linked list
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$Segment:copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",2008,2027,"/**
* Creates a copy of the given entry with updated next reference.
* @param original the entry to copy
* @param newNext the new next reference for the copied entry
* @return the copied entry or null if key or value is collected.","* Copies {@code original} into a new entry chained to {@code newNext}. Returns the new entry,
     * or {@code null} if {@code original} was already garbage collected.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,offer,com.google.common.cache.LocalCache$WriteQueue:offer(com.google.common.cache.ReferenceEntry),3690,3700,"/**
* Offers the provided reference entry for writing, updating write order.
* @param entry ReferenceEntry object to be offered
* @return true if operation was successful
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,satisfies,"com.google.common.collect.FilteredEntryMultimap:satisfies(java.lang.Object,java.lang.Object)",75,77,"/**
* Evaluates whether a given key-value pair satisfies the predicate.
* @param key unique identifier
* @param value associated data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,get,com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries:get(int),88,92,"/**
* Retrieves an entry at the specified index from the underlying collection.
* @param index integer index of the desired entry
* @return Entry object or null if out of bounds
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,apply,"com.google.common.collect.Maps$AbstractFilteredMap:apply(java.lang.Object,java.lang.Object)",2855,2861,"/**
* Applies a value to an existing or new entry in the map using a predicate.
* @param key unique identifier for the entry
* @param value value to be associated with the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,containsEntry,"com.google.common.collect.Multimaps$MapMultimap:containsEntry(java.lang.Object,java.lang.Object)",1162,1165,"/**
* Checks if a specific entry (key-value pair) exists in the underlying map.
* @param key the key to search for
* @param value the value to search for
* @return true if the entry is found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,"com.google.common.collect.Multimaps$MapMultimap:remove(java.lang.Object,java.lang.Object)",1230,1233,"/**
* Removes a mapping from the underlying map.
* @param key   object to be removed (or null for no-op)
* @param value object associated with key to be removed (or null for no-op)
* @return true if removal was successful, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeFromColumnIf,com.google.common.collect.StandardTable$Column:removeFromColumnIf(com.google.common.base.Predicate),487,504,"/**
* Removes entries from the column if they match the given predicate.
* @param predicate condition to filter entries
* @return true if any entries were removed, false otherwise
*/",Removes all {@code Column} mappings whose row key and value satisfy the given predicate.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,next,com.google.common.cache.LocalCache$KeyIterator:next(),4463,4466,"/**
* Retrieves the key of the current entry from an iterator.
* @return Key object or null if at end of iteration
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",972,976,"/**
* Constructs a new strong entry with the given key and hash code.
* @param key unique identifier
* @param hash integer representation of the key's hash
* @param next reference to the next entry in the map, or null if none
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1190,1194,"/**
* Constructs a weak entry with the specified key and subsequent entry.
* @param queue reference queue for garbage collection
* @param key unique identifier of the referenced object
* @param hash hash code of the referenced object
* @param next subsequent entry in the map (null if none)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,set,com.google.common.cache.LocalCache$LoadingValueReference:set(java.lang.Object),3519,3522,"/**
* Sets a new value and returns whether the change was accepted.
* @param newValue the new value to be set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,setException,com.google.common.cache.LocalCache$LoadingValueReference:setException(java.lang.Throwable),3524,3527,"/**
 * Sets an exception on the Future Value object.
 * @param t the Throwable to be set (may be null)
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,init,com.google.common.util.concurrent.AggregateFuture:init(),113,180,"/**
* Initializes the futures list by registering listeners on each future.
* @param allMustSucceed whether to fail fast or wait for all inputs to complete
*/","* Must be called at the end of each subclass's constructor. This method performs the ""real""
   * initialization; we can't put this in the constructor because, in the case where futures are
   * already complete, we would not initialize the subclass before calling {@link
   * #collectValueFromNonCancelledFuture}. As this is called after the subclass is constructed,
   * we're guaranteed to have properly initialized the subclass.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,closeQuietly,"com.google.common.util.concurrent.ClosingFuture:closeQuietly(java.lang.AutoCloseable,java.util.concurrent.Executor)",2128,2161,"/**
* Closes AutoCloseable resource asynchronously using the provided Executor.
* @param closeable resource to be closed
* @param executor Executor for asynchronous execution
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,rejectionPropagatingExecutor,"com.google.common.util.concurrent.MoreExecutors:rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)",1026,1040,"/**
* Wraps an executor to propagate rejection exceptions.
* @param delegate the underlying executor
* @param future the future associated with this execution
*/","* Returns an Executor that will propagate {@link RejectedExecutionException} from the delegate
   * executor to the given {@code future}.
   *
   * <p>Note, the returned executor can only be used once.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,waitForValue,com.google.common.cache.LocalCache$LoadingValueReference:waitForValue(),3601,3604,"/**
* Retrieves the value associated with futureValue. 
* @return Value of type V or throws an ExecutionException if interrupted.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getDone,com.google.common.util.concurrent.Futures:getDone(java.util.concurrent.Future),1160,1176,"/**
* Retrieves a Future's result if it has completed.
* @param future non-null Future object
* @return the Future's value or throws IllegalStateException
*/","* Returns the result of the input {@code Future}, which must have already completed.
   *
   * <p>The benefits of this method are twofold. First, the name ""getDone"" suggests to readers that
   * the {@code Future} is already done. Second, if buggy code calls {@code getDone} on a {@code
   * Future} that is still pending, the program will throw instead of block. This can be important
   * for APIs like {@link #whenAllComplete whenAllComplete(...)}{@code .}{@link
   * FutureCombiner#call(Callable, Executor) call(...)}, where it is easy to use a new input from
   * the {@code call} implementation but forget to add it to the arguments of {@code
   * whenAllComplete}.
   *
   * <p>If you are looking for a method to determine whether a given {@code Future} is done, use the
   * instance method {@link Future#isDone()}.
   *
   * @throws ExecutionException if the {@code Future} failed with an exception
   * @throws CancellationException if the {@code Future} was cancelled
   * @throws IllegalStateException if the {@code Future} is not done
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getUnchecked,com.google.common.util.concurrent.Futures:getUnchecked(java.util.concurrent.Future),1368,1385,"/**
* Retrieves a Future's result without interrupting or throwing checked exceptions.
* @param future the Future object to retrieve from
* @return the Future's value or throws an exception if retrieval fails
*/","* Returns the result of calling {@link Future#get()} uninterruptibly on a task known not to throw
   * a checked exception. This makes {@code Future} more suitable for lightweight, fast-running
   * tasks that, barring bugs in the code, will not fail. This gives it exception-handling behavior
   * similar to that of {@code ForkJoinTask.join}.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@link
   *       UncheckedExecutionException} (if the cause is an {@code Exception}) or {@link
   *       ExecutionError} (if the cause is an {@code Error}).
   *   <li>Any {@link InterruptedException} causes a retry of the {@code get} call. The interrupt is
   *       restored before {@code getUnchecked} returns.
   *   <li>Any {@link CancellationException} is propagated untouched. So is any other {@link
   *       RuntimeException} ({@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to eliminate all checked exceptions: to loop to avoid {@code
   * InterruptedException}, to pass through {@code CancellationException}, and to wrap any exception
   * from the underlying computation in an {@code UncheckedExecutionException} or {@code
   * ExecutionError}.
   *
   * <p>For an uninterruptible {@code get} that preserves other exceptions, see {@link
   * Uninterruptibles#getUninterruptibly(Future)}.
   *
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with an
   *     {@code Exception} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache$LocalManualCache:size(),4897,4900,"/**
* Returns total size of cached data in bytes.
* @return size of cached data as a long value",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,initTable,com.google.common.cache.LocalCache$Segment:initTable(java.util.concurrent.atomic.AtomicReferenceArray),1990,1997,"/**
* Initializes the table with a given AtomicReferenceArray.
* @param newTable AtomicReferenceArray to be initialized as the table
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,runWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",81,93,"/**
* Executes the given Runnable with a timeout, re-throwing exceptions as unchecked.
* @param runnable task to execute
* @param timeoutDuration execution time limit in specified unit
* @param timeoutUnit time unit for timeout duration (e.g. SECONDS, MILLISECONDS)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,wrapAndThrowExecutionExceptionOrError,com.google.common.util.concurrent.SimpleTimeLimiter:wrapAndThrowExecutionExceptionOrError(java.lang.Throwable),261,269,"/**
* Throws a wrapped exception based on the cause type.
* @param cause Throwable instance to wrap
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,wrapAndThrowRuntimeExecutionExceptionOrError,com.google.common.util.concurrent.SimpleTimeLimiter:wrapAndThrowRuntimeExecutionExceptionOrError(java.lang.Throwable),271,277,"/**
* Converts a Throwable into an unchecked or checked execution exception.
* @param cause the underlying exception or error
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clearReferenceQueues,com.google.common.cache.LocalCache$Segment:clearReferenceQueues(),2504,2511,"/**
* Clears reference queues for key and value references.
* @implNote Called when map entries are removed or updated
*/",Clears all entries from the key and value reference queues.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,iterator,com.google.common.cache.LocalCache$WriteQueue:iterator(),3768,3777,"/**
* Returns an iterator over the entries in the write queue.
* @return Iterator of ReferenceEntry objects or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,runUnlockedCleanup,com.google.common.cache.LocalCache$Segment:runUnlockedCleanup(),3481,3486,"/**
* Runs unlocked cleanup tasks and sends pending notifications.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$SoftValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1542,1546,"/**
* Creates a copied reference for the given value and entry.
* @param queue reference queue
* @param value referenced object
* @param entry reference entry
* @return copied ValueReference object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeightedSoftValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int)",1638,1642,"/**
* Creates a weighted soft reference with the given weight.
* @param weight integer value indicating the relative importance of this reference
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeightedStrongValueReference:<init>(java.lang.Object,int)",1660,1663,"/**
 * Initializes a weighted strong value reference with the given referent and weight.
 * @param referent object being referenced
 * @param weight strength of the reference (intensity of the relationship)
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,defaultEquivalence,com.google.common.cache.LocalCache$Strength$1:defaultEquivalence(),444,444,"/**
* Returns the default equivalence strategy. 
* @return Equivalence instance defining equality rules.","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,defaultEquivalence,com.google.common.collect.MapMakerInternalMap$Strength$1:defaultEquivalence(),272,272,"/**
* Returns the default equivalence function to determine equality between objects. 
* The returned function is used by the framework to compare objects of type Object. 
*/","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,defaultEquivalence,com.google.common.cache.LocalCache$Strength$2:defaultEquivalence(),444,444,"/**
* Returns the default equivalence strategy used to compare objects. 
* This strategy is used when no explicit equivalence strategy is specified.
*/","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,defaultEquivalence,com.google.common.cache.LocalCache$Strength$3:defaultEquivalence(),444,444,"/**
* Returns the default equivalence strategy for Equivalence objects.
* This implementation is used when no specific equivalence strategy is provided. 
* @return Default equivalence strategy instance
*/","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,defaultEquivalence,com.google.common.collect.MapMakerInternalMap$Strength$2:defaultEquivalence(),272,272,"/**
* Returns the default equivalence strategy for objects. 
* @return The default equivalence instance.","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$WeakValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1498,1502,"/**
* Creates a weak reference copy of the given value.
* @param queue garbage collection queue
* @param value referenced object
* @param entry reference entry containing metadata
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeightedWeakValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int)",1616,1620,"/**
* Constructs a weighted weak value reference with the specified parameters.
* @param queue reference queue
* @param referent referenced object
* @param entry reference entry
* @param weight weight of this reference
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nullifyAccessOrder,com.google.common.cache.LocalCache:nullifyAccessOrder(com.google.common.cache.ReferenceEntry),1811,1815,"/**
* Nullifies the access order for a given reference entry.
* @param nulled the entry to update
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nullifyWriteOrder,com.google.common.cache.LocalCache:nullifyWriteOrder(com.google.common.cache.ReferenceEntry),1824,1828,"/**
* Replaces the write order entries of a node with a placeholder.
* @param nulled node to modify
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,waitForValue,com.google.common.cache.LocalCache$StrongValueReference:waitForValue(),1603,1606,"/**
 * Waits for and returns the current value.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,next,com.google.common.cache.LocalCache$ValueIterator:next(),4471,4474,"/**
* Returns the value of the current entry in this iterator.
* @return Value object or null if no entries are available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,toString,com.google.common.cache.LocalCache$WriteThroughEntry:toString(),4523,4526,"/**
* Returns string representation of key-value pair.
* @return concatenated key and value as ""key=value""
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesWriteQueue,com.google.common.cache.LocalCache:usesWriteQueue(),352,354,"/**
* Determines whether to use write queue based on expiration time after writing.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordsWrite,com.google.common.cache.LocalCache:recordsWrite(),356,358,"/**
* Checks if records can be written based on write expiration and refresh conditions.
* @return true if records can be written, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,expires,com.google.common.cache.LocalCache:expires(),332,334,"/**
* Determines whether file content expires after write or access.
* @return true if file expires, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesAccessQueue,com.google.common.cache.LocalCache:usesAccessQueue(),348,350,"/**
* Determines whether access queue is used based on eviction and expiration policies.
* @return true if access queue is used, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordsAccess,com.google.common.cache.LocalCache:recordsAccess(),360,362,"/**
* Checks if record access is allowed based on expiration.
* @return true if access is allowed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isExpired,"com.google.common.cache.LocalCache:isExpired(com.google.common.cache.ReferenceEntry,long)",1791,1800,"/**
* Checks if a cache entry has expired based on access or write time.
* @param entry the cache entry to check
* @param now the current timestamp
* @return true if the entry is expired, false otherwise
*/",Returns true if the entry has expired.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newValueReference,"com.google.common.cache.LocalCache:newValueReference(com.google.common.cache.ReferenceEntry,java.lang.Object,int)",1720,1724,"/**
* Creates a new ValueReference instance based on the given entry and value.
* @param entry ReferenceEntry object
* @param value value to be referenced
* @param weight weight of the reference
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,hash,com.google.common.cache.LocalCache:hash(java.lang.Object),1726,1729,"/**
* Calculates hash code using key equivalence and rehashing.
* @param key object to be hashed, may be null
* @return hash code as integer, or default value for null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache:size(),3969,3972,"/**
 * Returns the number of elements in this collection.
 * @return The element count, or -1 if unknown.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,size,com.google.common.collect.AbstractMapBasedMultiset:size(),185,188,"/**
* Returns the size of this collection, cast to an integer.
* @return The collection's size, or saturated cast if necessary.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,size,com.google.common.collect.ConcurrentHashMultiset:size(),154,161,"/**
* Calculates the total size of all elements in the map.
* @return The total size or 0 if map is empty
*/","* {@inheritDoc}
   *
   * <p>If the data in the multiset is modified by any other threads during this method, it is
   * undefined which (if any) of these modifications will be reflected in the result.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,size,com.google.common.collect.EnumMultiset:size(),125,128,"/**
* Returns the saturated cast of the collection's size.
* @return The actual size of the collection or an integer value if it exceeds Integer.MAX_VALUE.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,size,com.google.common.collect.Iterators:size(java.util.Iterator),170,177,"/**
* Returns the total number of elements in the given iterator.
* @param iterator input iterator containing elements to count
*/","* Returns the number of elements remaining in {@code iterator}. The iterator will be left
   * exhausted: its {@code hasNext()} method will return {@code false}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,size,com.google.common.collect.JdkBackedImmutableMultiset:size(),89,92,"/**
* Returns the size of this collection.
* @return The number of elements in the collection
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap:size(),2345,2353,"/**
* Returns the total number of elements in the map.
* @return The size of the map, or a saturated cast of the sum of segment counts
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,linearTimeSizeImpl,com.google.common.collect.Multisets:linearTimeSizeImpl(com.google.common.collect.Multiset),1136,1142,"/**
* Calculates the total size of a Multiset in linear time.
* @param multiset input collection
* @return non-negative integer size or -1 if overflow occurs
*/",An implementation of {@link Multiset#size}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,size,com.google.common.collect.RegularImmutableSortedMultiset:size(),95,99,"/**
* Calculates the cumulative count difference within the current segment.
* @return total element count in this segment or saturated cast of negative value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedAdd,"com.google.common.math.IntMath:saturatedAdd(int,int)",540,542,"/**
* Performs saturated addition of two integers.
* @param a first integer
* @param b second integer
* @return result of the addition, or maximum/minumum integer value if overflow occurs
*/","* Returns the sum of {@code a} and {@code b} unless it would overflow or underflow in which case
   * {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedSubtract,"com.google.common.math.IntMath:saturatedSubtract(int,int)",550,552,"/**
* Performs saturated subtraction of two integers.
* @param a value to subtract from
* @param b value to subtract
* @return result of subtraction or maximum/minum integer value if overflow occurs
*/","* Returns the difference of {@code a} and {@code b} unless it would overflow or underflow in
   * which case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedMultiply,"com.google.common.math.IntMath:saturatedMultiply(int,int)",560,562,"/**
* Performs safe multiplication of two integers.
* @param a first integer
* @param b second integer
* @return product as an int, potentially truncated to fit the result in a 32-bit signed int.","* Returns the product of {@code a} and {@code b} unless it would overflow or underflow in which
   * case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,preservesInsertionOrderOnAddsSet,com.google.common.collect.Platform:preservesInsertionOrderOnAddsSet(),91,93,"/**
* Creates a compact set preserving insertion order on additions.
*/","* Returns the platform preferred set implementation that preserves insertion order when used only
   * for insertions.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,checkKey,com.google.common.collect.AbstractBiMap$Inverse:checkKey(java.lang.Object),474,478,"/**
* Verifies a given key against the inverse mapping.
* @param key the key to be checked
* @return the associated value or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,entrySet,com.google.common.collect.EnumBiMap:entrySet(),320,324,"/**
* Returns a set of key-value entries in this map.
* @return non-null set of entries or initializes it if previously null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,entrySet,com.google.common.collect.EnumHashBiMap:entrySet(),320,324,"/**
* Returns a set view of the mappings contained in this map.
* @return Set of key-value pairs or empty set if map is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,setValue,com.google.common.collect.AbstractBiMap$BiMapEntry:setValue(java.lang.Object),338,352,"/**
* Updates the map's entry with a new value.
* @param value new value to set
* @return old value or null if not previously present
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,containsValue,com.google.common.collect.EnumBiMap:containsValue(java.lang.Object),117,120,"/**
* Checks if map contains specified value in its inverse mapping.
* @param value object to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,containsValue,com.google.common.collect.EnumHashBiMap:containsValue(java.lang.Object),117,120,"/**
* Checks if an inverse map contains a specific value.
* @param value object to search by
* @return true if the value is present, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.AbstractBiMap$EntrySet:clear(),393,396,"/**
* Clears all mappings in this bi-directional map.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.AbstractBiMap$KeySet:clear(),245,248,"/**
* Clears the underlying map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.EnumBiMap:clear(),217,221,"/**
 * Clears the internal state of this object and its inverse.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.EnumHashBiMap:clear(),217,221,"/**
 * Clears both the primary and inverse collections.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,iterator,com.google.common.collect.AbstractBiMap$EntrySet:iterator(),419,422,"/**
* Returns an iterator over key-value pairs in this map.
* @return Iterator of entries (key-value pairs) or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,makeInverse,com.google.common.collect.AbstractBiMap:makeInverse(java.util.Map),107,109,"/**
* Creates an inverse bi-map from a given forward map.
* @param backward forward map to invert
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,checkValue,com.google.common.collect.AbstractBiMap$Inverse:checkValue(java.lang.Object),480,484,"/**
* Checks if given value is valid using inverse key.
* @param value value to be checked
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,values,com.google.common.collect.AbstractBiMap$Inverse:values(),277,285,"/**
* Returns a set of values from this inverse mapping, preserving iteration order.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,values,com.google.common.collect.EnumBiMap:values(),277,285,"/**
* Returns a set of values associated with this inverse map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,iterator,com.google.common.collect.AbstractBiMap$KeySet:iterator(),269,272,"/**
* Returns an iterator over keys of this map.
* @return Iterator over key values or empty iterator if map is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,iterator,com.google.common.collect.Multimaps$Keys:iterator(),1787,1790,"/**
* Returns an iterator over the keys in this multimap.
* @return key iterator or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,keySet,com.google.common.collect.EnumBiMap:keySet(),232,236,"/**
* Returns a set containing all keys in this map.
* The returned set is backed by the map's internal data structure and will be updated if the map's contents change.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,keySet,com.google.common.collect.EnumHashBiMap:keySet(),232,236,"/**
* Returns a set of keys in this map, lazily initializing it if not already created.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,iterator,com.google.common.collect.AbstractBiMap$ValueSet:iterator(),296,299,"/**
* Returns an iterator over the values in this map.
* @return Iterator over map values 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,iterator,com.google.common.collect.FilteredMultimapValues:iterator(),47,50,"/**
* Returns an iterator over the values of this multimap.
* @return non-null iterator over values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,inverse,com.google.common.collect.EnumBiMap:inverse(),225,228,"/**
* Returns an inversed view of this map.
* @return A view of bi-directional mappings.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,inverse,com.google.common.collect.EnumHashBiMap:inverse(),225,228,"/**
* Returns an inverse mapping of the current graph.
* @return Inverse graph as a BiMap.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,next,com.google.common.collect.AbstractMapBasedMultimap$Itr:next(),1178,1192,"/**
* Advances iterator to next entry, returning associated value.
* @return T object or null if exhausted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,<init>,"com.google.common.collect.GeneralRange:<init>(java.util.Comparator,boolean,java.lang.Object,com.google.common.collect.BoundType,boolean,java.lang.Object,com.google.common.collect.BoundType)",103,146,"/**
* Constructs a GeneralRange with specified bounds and comparator.
* @param comparator comparison function
* @param hasLowerBound whether lower bound is defined
* @param lowerEndpoint lower endpoint value (null if not defined)
* @param lowerBoundType type of lower bound (OPEN, CLOSED, etc.)
* @param hasUpperBound whether upper bound is defined
* @param upperEndpoint upper endpoint value (null if not defined)
* @param upperBoundType type of upper bound (OPEN, CLOSED, etc.)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,next,com.google.common.collect.Iterators$PeekingImpl:next(),1196,1207,"/**
* Retrieves the next element from the iterator, or returns the previously peeked element if available.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,peek,com.google.common.collect.Iterators$PeekingImpl:peek(),1215,1224,"/**
* Retrieves and returns the next element without advancing the iterator.
* @return the next element in the collection or null if exhausted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,getOrDefault,"com.google.common.collect.Maps$TransformedEntriesMap:getOrDefault(java.lang.Object,java.lang.Object)",2163,2172,"/**
* Retrieves a transformed value for a given key, or returns a default value if not found. 
* @param key unique identifier
* @param defaultValue fallback value to return when key is missing
* @return transformed V2 object or null if not found and no default provided
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$TransformedEntriesMap:remove(java.lang.Object),2175,2182,"/**
* Removes and transforms a value by key.
* @param key unique identifier or null to remove all entries
* @return transformed value or null if not found or when removing all entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,getElement,com.google.common.collect.TreeMultiset$AvlNode:getElement(),1031,1035,"/**
* Retrieves the element associated with this object.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,updateInverseMap,"com.google.common.collect.AbstractBiMap:updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object)",154,164,"/**
* Updates the inverse map with a new value and removes the old one if present.
* @param key unique identifier for the new value
* @param containedKey whether the key is already in the map
* @param oldValue current value to remove (null if not present)
* @param newValue new value to add",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,removeFromBothMaps,com.google.common.collect.AbstractBiMap:removeFromBothMaps(java.lang.Object),172,179,"/**
* Removes an object from both maps and returns its old value.
* @param key the object to remove
* @return the removed object or null if not present
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,replaceAll,com.google.common.collect.EnumBiMap:replaceAll(java.util.function.BiFunction),194,215,"/**
* Replaces all mappings using a provided function, handling conflicts and throwing exceptions as necessary.
* @param function BiFunction to transform values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,replaceAll,com.google.common.collect.EnumHashBiMap:replaceAll(java.util.function.BiFunction),194,215,"/**
* Replaces all mappings with a BiFunction, throwing on conflicts.
* @param function BiFunction to apply to each entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,next,com.google.common.collect.AbstractIndexedListIterator:next(),75,82,"/**
* Returns the next element in the iteration sequence.
* @throws NoSuchElementException if no elements are available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,previous,com.google.common.collect.AbstractIndexedListIterator:previous(),94,101,"/**
* Retrieves the previous element in the iteration sequence.
* @throws NoSuchElementException if no previous element exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,<init>,com.google.common.collect.AbstractIterator:<init>(),69,69,"/**
* Constructs an iterator instance with no initial state. 
* Subclasses should override this constructor to initialize their internal state.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSequentialIterator.java,<init>,com.google.common.collect.AbstractSequentialIterator:<init>(java.lang.Object),50,52,"/**
* Initializes an iterator with an optional initial value.
* @param firstOrNull the initial value or null if empty
*/","* Creates a new iterator with the given first element, or, if {@code firstOrNull} is null,
   * creates a new empty iterator.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableListIterator.java,<init>,com.google.common.collect.UnmodifiableListIterator:<init>(),34,34,"/**
* Constructs an empty, unmodifiable iterator.",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,hasNext,com.google.common.collect.AbstractIterator:hasNext(),126,137,"/**
* Determines if there is a next element in the iteration.
* @return true if ready, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,wrapEntry,com.google.common.collect.AbstractMapBasedMultimap$AsMap:wrapEntry(java.util.Map$Entry),1412,1415,"/**
* Wraps an existing entry with an immutable value collection.
* @param entry the entry to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,sortedMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:sortedMap(),1546,1549,"/**
* Returns a navigable map of key-value pairs sorted by key.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,comparator,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:comparator(),1491,1494,"/**
* Returns the comparator used by the underlying sorted map.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,firstKey,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:firstKey(),1496,1500,"/**
* Returns the first key in the sorted map.
* @return The first key (K) or null if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lastKey,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:lastKey(),1502,1506,"/**
* Returns the last key in the sorted map.
* @return Last key or null if map is empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headMap,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:headMap(java.lang.Object),1508,1511,"/**
* Returns a sorted map containing all key-value pairs up to and including the specified key.
* @param toKey the upper bound of the map (inclusive)
* @return SortedMap object or null if input is invalid
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subMap,"com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:subMap(java.lang.Object,java.lang.Object)",1513,1517,"/**
* Returns a subset of the sorted map, containing keys within the specified range.
* @param fromKey start key (inclusive)
* @param toKey end key (inclusive)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailMap,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:tailMap(java.lang.Object),1519,1522,"/**
* Returns a view of map entries starting from the specified key.
* @param fromKey key to start the view from
* @return SortedMap view or null if the input is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createKeySet,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:createKeySet(),1534,1537,"/**
* Creates a sorted set of keys from this map.
* @return SortedSet containing all unique keys in ascending order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollAsMapEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollAsMapEntry(java.util.Iterator),1617,1627,"/**
* Retrieves the next map entry from an iterator and converts it to an immutable entry.
* @param entryIterator iterator yielding entries
* @return immutable Entry object or null if iterator is exhausted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createUnmodifiableEmptyCollection,com.google.common.collect.AbstractMapBasedMultimap:createUnmodifiableEmptyCollection(),143,145,"/**
* Returns an unmodifiable collection containing no elements. 
* @return Unmodifiable empty collection of type V.","* Creates an unmodifiable, empty collection of values.
   *
   * <p>This is used in {@link #removeAll} on an empty key.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,sortedMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:sortedMap(),1065,1068,"/**
* Returns a navigable map of user IDs to collections of associated values.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,comparator,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:comparator(),1026,1029,"/**
* Returns the comparator used to order map entries.
* @return Comparator object or null if not set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,first,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:first(),1031,1035,"/**
* Retrieves the smallest key from the underlying map. 
* @return The minimum key in the map, or null if empty. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:headSet(java.lang.Object),1037,1040,"/**
* Returns a sorted set of keys from this map that are less than the given key.
* @param toElement upper bound (exclusive) for the returned key set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,last,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:last(),1042,1046,"/**
* Returns the key of the last element in the sorted map.
* @return Last key or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:subSet(java.lang.Object,java.lang.Object)",1048,1051,"/**
* Returns a subset of keys in the underlying map within the specified range.
* @param fromElement lower bound (inclusive)
* @param toElement upper bound (exclusive)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:tailSet(java.lang.Object),1053,1056,"/**
* Returns a sorted set of keys in the map that are greater than or equal to the specified element.
* @param fromElement key value threshold (inclusive)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollFirst,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:pollFirst(),1090,1093,"/**
* Retrieves and removes the first element from this iterator.
* @return The polled object or null if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollFirst,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:pollFirst(),722,725,"/**
* Retrieves and removes the first element from the iterator.
* @return object of type V or null if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,pollFirstEntry,com.google.common.collect.AbstractNavigableMap:pollFirstEntry(),51,54,"/**
* Retrieves and removes the first entry from this map.
* @return Entry object or null if map is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,pollLastEntry,com.google.common.collect.AbstractNavigableMap:pollLastEntry(),56,59,"/**
* Retrieves and removes the last entry from this map's descending iterator. 
* @return the removed entry or null if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardPollFirstEntry,com.google.common.collect.ForwardingNavigableMap:standardPollFirstEntry(),243,245,"/**
* Retrieves and removes the first entry from the map.
* @return Map.Entry object or null if map is empty
*/","* A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of {@code
   * entrySet}. If you override {@code entrySet}, you may wish to override {@code pollFirstEntry} to
   * forward to this implementation.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardPollFirst,com.google.common.collect.ForwardingNavigableSet:standardPollFirst(),127,129,"/**
* Retrieves and removes the first element from the iterator.
* @return the polled element or null if empty
*/","* A sensible definition of {@link #pollFirst} in terms of the {@code iterator} method. If you
   * override {@link #iterator} you may wish to override {@link #pollFirst} to forward to this
   * implementation.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:remove(),484,489,"/**
 * Removes this item and updates internal state.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,refreshIfEmpty,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:refreshIfEmpty(),353,365,"/**
* Recursively refreshes the collection if empty, updating the delegate as needed.
* @throws ConcurrentModificationException if ancestor's delegate differs from this collection's
*/","* If the delegate collection is empty, but the multimap has values for the key, replace the
     * delegate with the new collection for the key.
     *
     * <p>For a subcollection, refresh its ancestor and validate that the ancestor delegate hasn't
     * changed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,addAll,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:addAll(int,java.util.Collection)",778,793,"/**
* Adds all elements from the specified collection at the given index.
* @param index insertion point
* @param c collection of elements to add
* @return true if the list was modified, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,get,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:get(int),795,800,"/**
* Retrieves an element at specified index from list.
* @param index position of item to retrieve
* @return V object or null if invalid index
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,set,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:set(int,java.lang.Object)",802,807,"/**
* Sets an element at a specified index in the list.
* @param index position to insert the element
* @param element value to be inserted
* @return the new element's type (V) or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,add,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:add(int,java.lang.Object)",809,818,"/**
* Inserts an element at the specified index and updates internal state.
* @param index insertion position
* @param element element to add
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:remove(int),820,828,"/**
* Removes an element at the specified index and returns its value.
* @param index position of the element to be removed
* @return removed element or null if index is invalid
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,indexOf,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:indexOf(java.lang.Object),830,834,"/**
* Returns index of specified object in list.
* @param o object to search for (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lastIndexOf,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:lastIndexOf(java.lang.Object),836,840,"/**
* Searches for the last occurrence of an object in the list.
* @param o object to search for (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,hasPrevious,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:hasPrevious(),875,878,"/**
* Checks if there is a previous element in the iteration.
* @return true if previous element exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,previous,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:previous(),880,884,"/**
* Retrieves the previous element from the iterator.
* @return Element of type V or null if at beginning
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,nextIndex,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:nextIndex(),886,889,"/**
* Returns the index of the next element in the iterator.
* @return Index of the next element or -1 if at end of iteration.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,previousIndex,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:previousIndex(),891,894,"/**
* Returns the index of the previous element in the iteration.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,set,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:set(java.lang.Object),896,899,"/**
 * Sets the given value in the underlying delegate.
 * @param value the new value to be set",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,add,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:add(java.lang.Object),901,909,"/**
* Adds a new element to the collection.
* @param value the element to add
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subList,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:subList(int,int)",854,861,"/**
* Returns a sublist of elements within the specified range.
* @param fromIndex starting index of sublist
* @param toIndex ending index of sublist
* @return List<V> sublist or null if invalid indices
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,getSortedSetDelegate,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:getSortedSetDelegate(),697,700,"/**
* Returns the sorted set delegate from the superclass.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,comparator,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:comparator(),643,646,"/**
* Returns the comparator used to sort the elements in this set.
* @return Comparator object or null if not sorted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,first,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:first(),648,653,"/**
* Retrieves the first element of the sorted set.
* @return First element or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,last,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:last(),655,660,"/**
* Retrieves the last element from the sorted set.
* @return Last element of type V or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:headSet(java.lang.Object),662,669,"/**
* Returns a view of the elements in this set strictly less than toElement.
* @param toElement element up to which to include in the returned set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:subSet(java.lang.Object,java.lang.Object)",671,678,"/**
* Returns a subset of values from the current sorted set.
* @param fromElement starting value (inclusive)
* @param toElement ending value (exclusive)
* @return SortedSet containing subset values or an empty set if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:tailSet(java.lang.Object),680,687,"/**
* Returns a sorted set containing all elements greater than or equal to the given element.
* @param fromElement element to start the tail set from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,put,"com.google.common.collect.AbstractMapBasedMultimap:put(java.lang.Object,java.lang.Object)",189,207,"/**
* Adds a value to a collection associated with a given key in the map.
* @param key unique identifier
* @param value new element to add
* @return true if added successfully, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,getOrCreateCollection,com.google.common.collect.AbstractMapBasedMultimap:getOrCreateCollection(java.lang.Object),209,216,"/**
* Retrieves or creates a collection for the given key.
* @param key unique identifier
* @return Collection of type V or null if not created
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,get,com.google.common.collect.AbstractMapBasedMultimap:get(java.lang.Object),292,299,"/**
* Retrieves a collection of values associated with the given key.
* @param key unique identifier for the collection
*/","* {@inheritDoc}
   *
   * <p>The returned collection is not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,values,com.google.common.collect.AbstractMapBasedMultimap:values(),1214,1217,"/**
* Delegates to superclass to retrieve collection of values. 
*/","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the values for one key, followed
   * by the values of a second key, and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,values,com.google.common.collect.LinkedListMultimap:values(),748,751,"/**
* Returns a list of values from the superclass.","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the values in the order they
   * were added to the multimap. Because the values may have duplicates and follow the insertion
   * ordering, this method returns a {@link List}, instead of the {@link Collection} specified in
   * the {@link ListMultimap} interface.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createKeys,com.google.common.collect.AbstractMapBasedMultimap:createKeys(),1247,1250,"/**
* Creates a multiset of keys from this collection.
* @return Multiset containing all unique keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,createKeys,com.google.common.collect.LinkedListMultimap:createKeys(),735,738,"/**
 * Creates a multiset of keys from this map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createKeys,com.google.common.collect.Multimaps$MapMultimap:createKeys(),1270,1273,"/**
 * Creates a multiset of keys from this instance.
 * @return a Keys object containing all unique keys in this data structure.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,entries,com.google.common.collect.AbstractMapBasedMultimap:entries(),1261,1264,"/**
* Returns a collection of key-value pairs in this map.
* @return unmodifiable collection of entry objects or empty if none
*/","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the values for one key, followed
   * by the values of a second key, and so on.
   *
   * <p>Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the
   * time the entry is returned by a method call to the collection or its iterator.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,valueIterator,com.google.common.collect.AbstractMultimap:valueIterator(),218,220,"/**
* Returns an iterator over the map values.
* @return Iterator of V objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,entries,com.google.common.collect.LinkedListMultimap:entries(),798,801,"/**
* Retrieves all key-value pairs in this map.
* @return list of entry objects or null if not found
*/","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the entries in the order they
   * were added to the multimap. Because the entries may have duplicates and follow the insertion
   * ordering, this method returns a {@link List}, instead of the {@link Collection} specified in
   * the {@link ListMultimap} interface.
   *
   * <p>An entry's {@link Entry#getKey} method always returns the same key, regardless of what
   * happens subsequently. As long as the corresponding key-value mapping is not removed from the
   * multimap, {@link Entry#getValue} returns the value from the multimap, which may change over
   * time, and {@link Entry#setValue} modifies that value. Removing the mapping from the multimap
   * does not alter the value returned by {@code getValue()}, though a subsequent {@code setValue()}
   * call won't update the multimap but will lead to a revised value being returned by {@code
   * getValue()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,getAndSet,"com.google.common.collect.AbstractMapBasedMultiset:getAndSet(com.google.common.collect.Count,int)",337,343,"/**
* Retrieves and sets count value from Count object, returning current value.
* @param i Count object or null to reset
* @return Current count value or 0 if i is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,next,com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:next(),215,229,"/**
* Retrieves the next key from the iterator sequence.
* @return E the next key value or null if exhausted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,clear,com.google.common.collect.AbstractMapBasedMultiset:clear(),169,176,"/**
* Clears all frequencies in the map to zero and resets the collection's size.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,iterator,com.google.common.collect.HashMultiset:iterator(),190,193,"/**
* Returns an iterator over the elements in this multiset.
* @return Iterator instance to traverse set contents
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,iterator,com.google.common.collect.LinkedHashMultiset:iterator(),190,193,"/**
* Returns an iterator over the elements in this multiset.
* The returned iterator is a MapBasedMultisetIterator instance.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,newStringBuilderForCollection,com.google.common.collect.Collections2:newStringBuilderForCollection(int),351,354,"/**
* Creates a StringBuilder with an initial capacity to hold up to the specified size of elements.
* @param size maximum number of collection elements
*/",Returns best-effort-sized StringBuilder based on the given collection size.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,remove,"com.google.common.collect.FilteredEntryMultimap$Keys:remove(java.lang.Object,int)",361,385,"/**
* Removes specified occurrences of a value associated with the given key.
* @param key unique identifier for the collection
* @param occurrences number of values to remove
* @return count of removed values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,computeArrayListCapacity,com.google.common.collect.Lists:computeArrayListCapacity(int),155,161,"/**
* Calculates optimal ArrayList capacity based on provided size.
* @param arraySize size of the array to create a list for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayListWithCapacity,com.google.common.collect.Lists:newArrayListWithCapacity(int),180,185,"/**
* Creates a new ArrayList with the specified initial capacity.
* @param initialArraySize initial size of the ArrayList
*/","* Creates an {@code ArrayList} instance backed by an array with the specified initial size;
   * simply delegates to {@link ArrayList#ArrayList(int)}.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,
   * use {@code new }{@link ArrayList#ArrayList(int) ArrayList}{@code <>(int)} directly, taking
   * advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>. (Unlike here, there is no risk of overload ambiguity, since the {@code ArrayList}
   * constructors very wisely did not accept varargs.)
   *
   * @param initialArraySize the exact size of the initial backing array for the returned array list
   *     ({@code ArrayList} documentation calls this value the ""capacity"")
   * @return a new, empty {@code ArrayList} which is guaranteed not to resize itself unless its size
   *     reaches {@code initialArraySize + 1}
   * @throws IllegalArgumentException if {@code initialArraySize} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,capacity,com.google.common.collect.Maps:capacity(int),286,307,"/**
* Calculates the capacity based on expected size, using a heuristic for small sizes and ceiling of expected size divided by load factor otherwise.
* @param expectedSize anticipated collection size
*/","* Returns a capacity that is sufficient to keep the map from being resized as long as it grows no
   * larger than expectedSize and the load factor is ≥ its default (0.75).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$ArrayListSupplier:<init>(int),185,187,"/**
* Initializes supplier with expected values per key.
* @param expectedValuesPerKey non-negative integer value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$HashSetSupplier:<init>(int),217,219,"/**
* Initializes the supplier with the expected number of values per key.
* @param expectedValuesPerKey non-negative integer value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:<init>(int),231,233,"/**
* Initializes the supplier with expected values per key.
* @param expectedValuesPerKey non-negative integer indicating expected values count
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,arrayListValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:arrayListValues(int),295,305,"/**
* Creates a list multimap builder with pre-allocated array lists for each key.
* @param expectedValuesPerKey the number of values to pre-allocate per key
*/","* Uses an {@link ArrayList} to store value collections, initialized to expect the specified
     * number of values per key.
     *
     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:hashSetValues(int),337,347,"/**
* Creates a multimap builder with hash set values.
* @param expectedValuesPerKey maximum number of values per key
*/","* Uses a hash-based {@code Set} to store value collections, initialized to expect the specified
     * number of values per key.
     *
     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedHashSetValues(int),360,370,"/**
* Creates a SetMultimapBuilder with linked hash sets for values.
* @param expectedValuesPerKey minimum number of values per key
*/","* Uses an insertion-ordered hash-based {@code Set} to store value collections, initialized to
     * expect the specified number of values per key.
     *
     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashKeys,com.google.common.collect.MultimapBuilder:hashKeys(int),83,91,"/**
* Creates a MultimapBuilder with an expected number of keys.
* @param expectedKeys the anticipated number of unique keys
*/","* Uses a hash table to map keys to value collections, initialized to expect the specified number
   * of keys.
   *
   * @throws IllegalArgumentException if {@code expectedKeys < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashKeys,com.google.common.collect.MultimapBuilder:linkedHashKeys(int),114,122,"/**
* Creates a multimap builder with linked hash keys and expected size.
* @param expectedKeys expected number of key-value pairs
* @return MultimapBuilderWithKeys instance","* Uses an hash table to map keys to value collections, initialized to expect the specified number
   * of keys.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in the order that they were first added to the
   * multimap, save that if all values associated with a key are removed and then the key is added
   * back into the multimap, that key will come last in the key iteration order.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,<init>,"com.google.common.collect.Multisets$ImmutableEntry:<init>(java.lang.Object,int)",268,272,"/**
* Creates an immutable entry with the specified element and count.
* @param element element to store
* @param count non-negative integer value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,setCountImpl,"com.google.common.collect.Multisets:setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int)",942,956,"/**
* Updates the count of a specified element in a multiset.
* @param self Multiset instance
* @param element Element to update count for
* @param count New count value
* @return Previous count value
*/","An implementation of {@link Multiset#setCount(Object, int)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,setCountImpl,"com.google.common.collect.Multisets:setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int,int)",959,970,"/**
* Updates user count in multiset.
* @param element user data
* @param oldCount current count
* @param newCount updated count
* @return true if update successful, false otherwise
*/","An implementation of {@link Multiset#setCount(Object, int, int)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,spliterator,com.google.common.collect.AbstractMultimap$Entries:spliterator(),134,137,"/**
* Returns an iterable Spliterator over the map's entries.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,hashCode,com.google.common.collect.AbstractMultimap$EntrySet:hashCode(),142,145,"/**
* Computes and returns hash code value based on underlying set.
* @return unique integer hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,hashCode,com.google.common.collect.FilteredKeySetMultimap$EntrySet:hashCode(),69,72,"/**
* Computes hash code using Guava's Sets implementation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,standardHashCode,com.google.common.collect.ForwardingSet:standardHashCode(),98,100,"/**
* Computes the hash code of this set using the provided implementation.
* @return The calculated hash code value.","* A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #equals} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,hashCode,com.google.common.collect.ImmutableSet:hashCode(),298,301,"/**
* Computes hash code using Sets library implementation.
* @return integer hash code value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,hashCode,com.google.common.collect.Maps$UnmodifiableEntrySet:hashCode(),1583,1586,"/**
* Returns the hash code of this instance using Guava's Sets implementation. 
* @return Hash code value as an integer.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,hashCode,com.google.common.collect.RegularContiguousSet:hashCode(),237,240,"/**
* Generates hash code for this object using Sets' implementation.
* @return integer hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,hashCode,com.google.common.collect.Sets$FilteredSet:hashCode(),1291,1294,"/**
* Computes hash code using the provided implementation.
* @return computed hash code value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,hashCode,com.google.common.collect.TreeRangeSet$AsRanges:hashCode(),110,113,"/**
* Computes hash code using Sets implementation.
* @return hash code value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,equals,com.google.common.collect.AbstractMultimap$EntrySet:equals(java.lang.Object),147,150,"/**
* Compares this instance with another object for equality.
* @param obj object to compare with
* @return true if objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,equals,com.google.common.collect.FilteredKeySetMultimap$EntrySet:equals(java.lang.Object),74,77,"/**
* Compares this object with another for equality.
* @param o the object to compare with (null if not applicable)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,standardEquals,com.google.common.collect.ForwardingSet:standardEquals(java.lang.Object),88,90,"/**
* Checks equality with another object using a set-based implementation.
* @param object the object to compare with
*/","* A sensible definition of {@link #equals} in terms of {@link #size} and {@link #containsAll}. If
   * you override either of those methods, you may wish to override {@link #equals} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,equals,com.google.common.collect.Maps$UnmodifiableEntrySet:equals(java.lang.Object),1578,1581,"/**
* Checks this object's equality with another object using Guava's Sets implementation.
* @param object the object to compare against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,equals,com.google.common.collect.Sets$FilteredSet:equals(java.lang.Object),1286,1289,"/**
* Compares this instance with another object for equality.
* @param object object to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:equals(java.lang.Object),1022,1030,"/**
* Checks object equality with another object, synchronizing on mutex if necessary.
* @param o the object to compare
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,equals,com.google.common.collect.TreeRangeSet$AsRanges:equals(java.lang.Object),115,118,"/**
* Checks if this object is equal to another.
* @param o the other object to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,containsValue,com.google.common.collect.AbstractMultimap:containsValue(java.lang.Object),48,57,"/**
* Checks if the map contains a specific object in its values.
* @param value the object to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,containsEntry,"com.google.common.collect.AbstractMultimap:containsEntry(java.lang.Object,java.lang.Object)",59,63,"/**
* Checks if map contains entry with specified key and value.
* @param key unique identifier (or null for any)
* @param value associated value (or null for any)
* @return true if entry exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,remove,"com.google.common.collect.AbstractMultimap:remove(java.lang.Object,java.lang.Object)",65,70,"/**
* Removes an entry from the map based on key and/or value.
* @param key unique identifier or null to remove all entries
* @param value associated value or null to remove all entries with given key
* @return true if removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,hashCode,com.google.common.collect.AbstractMultimap:hashCode(),251,254,"/**
* Returns hash code based on underlying map's hash code.
* @return hash code value
*/","* Returns the hash code for this multimap.
   *
   * <p>The hash code of a multimap is defined as the hash code of the map view, as returned by
   * {@link Multimap#asMap}.
   *
   * @see Map#hashCode",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,toString,com.google.common.collect.AbstractMultimap:toString(),262,265,"/**
* Returns a string representation of this object's properties.
*/","* Returns a string representation of the multimap, generated by calling {@code toString} on the
   * map returned by {@link Multimap#asMap}.
   *
   * @return a string representation of the multimap",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,asMap,com.google.common.collect.LinkedListMultimap:asMap(),228,232,"/**
* Returns a map representation of this collection.
* @return A map where each key is a K and its corresponding value is a collection of V
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,com.google.common.collect.AbstractMultimap:putAll(com.google.common.collect.Multimap),93,101,"/**
* Inserts all key-value pairs from the given Multimap into this map.
* @param multimap Multimap containing entries to add
* @return true if any entries were added, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,keySet,com.google.common.collect.LinkedListMultimap:keySet(),162,166,"/**
* Returns a set view of the keys contained in this map.
* If no key set exists, creates and caches one for future use. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,keys,com.google.common.collect.LinkedListMultimap:keys(),172,176,"/**
* Returns a multiset of keys, lazily initializing it if necessary.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,equals,com.google.common.collect.AbstractMultimap:equals(java.lang.Object),238,241,"/**
* Compares this instance with another object for equality.
* @param object object to compare (null if not comparable)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,contains,com.google.common.collect.ConcurrentHashMultiset:contains(java.lang.Object),54,57,"/**
* Checks if collection contains specified element.
* @param element object to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,contains,com.google.common.collect.EnumMultiset:contains(java.lang.Object),54,57,"/**
* Checks if a collection contains a specified element.
* @param element object to search for (may be null)
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,add,com.google.common.collect.AbstractMultiset:add(java.lang.Object),60,65,"/**
* Adds an element to the collection with default priority.
* @param element element to be added
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,remove,com.google.common.collect.AbstractMultiset:remove(java.lang.Object),73,77,"/**
* Removes an object from this collection.
* @param element the object to be removed (may be null)
* @return true if removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,removeAll,com.google.common.collect.AbstractMultiset:removeAll(java.util.Collection),111,115,"/**
* Removes all specified elements from this set.
* @param elementsToRemove collection of elements to remove
* @return true if any elements were removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardRemoveAll,com.google.common.collect.ForwardingMultiset:standardRemoveAll(java.util.Collection),190,193,"/**
* Removes all specified elements from this multiset.
* @param elementsToRemove collection of elements to remove
* @return true if removal was successful, false otherwise
*/","* A sensible definition of {@link #removeAll} in terms of the {@code removeAll} method of {@link
   * #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #removeAll}
   * to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,elementSet,com.google.common.collect.AbstractMultiset:elementSet(),130,137,"/**
* Returns a set of elements, initializing it lazily if not already created.
* @return Set of elements or null if initialization fails
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,entrySet,com.google.common.collect.AbstractMultiset:entrySet(),164,171,"/**
* Returns a set of key-value entries in this map.
* @return Set of map entries or null if not initialized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,equals,com.google.common.collect.AbstractMultiset:equals(java.lang.Object),207,210,"/**
* Checks equality with another object using MultiSets implementation.
* @param object object to compare with this instance
*/","* {@inheritDoc}
   *
   * <p>This implementation returns {@code true} if {@code object} is a multiset of the same size
   * and if, for each element, the two multisets have the same count.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardEquals,com.google.common.collect.ForwardingMultiset:standardEquals(java.lang.Object),285,287,"/**
* Compares this set to another object for equality.
* @param object object to compare with
*/","* A sensible, albeit inefficient, definition of {@link #equals} in terms of {@code
   * entrySet().size()} and {@link #count}. If you override either of these methods, you may wish to
   * override {@link #equals} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,equals,com.google.common.collect.ImmutableMultiset:equals(java.lang.Object),336,339,"/**
* Checks if this multiset is equal to another object.
* @param object the object to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,firstEntry,com.google.common.collect.AbstractNavigableMap:firstEntry(),41,44,"/**
* Retrieves the first entry from the iterator.
* @return The first entry or null if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,lastEntry,com.google.common.collect.AbstractNavigableMap:lastEntry(),46,49,"/**
* Returns the last entry in the map.
* @return last {@link Entry} or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getFirst,"com.google.common.collect.Iterables:getFirst(java.lang.Iterable,java.lang.Object)",825,829,"/**
* Retrieves the first element from an iterable; returns default value if empty.
* @param iterable collection of elements
* @param defaultValue value to return when iterable is empty
*/","* Returns the first element in {@code iterable} or {@code defaultValue} if the iterable is empty.
   * The {@link Iterators} analog to this method is {@link Iterators#getNext}.
   *
   * <p>If no default value is desired (and the caller instead wants a {@link
   * NoSuchElementException} to be thrown), it is recommended that {@code
   * iterable.iterator().next()} is used instead.
   *
   * <p>To get the only element in a single-element {@code Iterable}, consider using {@link
   * #getOnlyElement(Iterable)} or {@link #getOnlyElement(Iterable, Object)} instead.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.findFirst().orElse(defaultValue)}
   *
   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),
   * consider using {@code collection.getFirst()} instead. Note that if the collection is empty,
   * {@code getFirst()} throws a {@code NoSuchElementException}, while this method returns the
   * default value.
   *
   * @param defaultValue the default value to return if the iterable is empty
   * @return the first element of {@code iterable} or the default value
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,lowerKey,com.google.common.collect.AbstractNavigableMap:lowerKey(java.lang.Object),103,106,"/**
* Returns the lowest key in the map that is not greater than the given key.
* @param key key to compare with existing keys
* @return lowest key or null if none found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,floorKey,com.google.common.collect.AbstractNavigableMap:floorKey(java.lang.Object),108,111,"/**
* Returns the greatest floor key that is less than or equal to the given key.
* @param key the input key
* @return the floor key, or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,ceilingKey,com.google.common.collect.AbstractNavigableMap:ceilingKey(java.lang.Object),113,116,"/**
* Returns the smallest ceiling entry key in this map, or null if no such key exists.
* @param key key to find ceiling for
* @return smallest ceiling key or null",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,higherKey,com.google.common.collect.AbstractNavigableMap:higherKey(java.lang.Object),118,121,"/**
* Finds and returns a higher (greater than or equal to) key in the map, 
* or null if not found. The input key is used for comparison.
* @param key the key to compare with other keys
* @return higher key or null if no higher key exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,descendingKeySet,com.google.common.collect.AbstractNavigableMap:descendingKeySet(),150,153,"/**
* Returns a navigable set of keys in descending order.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,<init>,com.google.common.collect.ImmutableRangeSet:<init>(com.google.common.collect.ImmutableList),151,153,"/**
* Constructs an ImmutableRangeSet from a list of ranges.
* @param ranges non-empty list of immutable ranges
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,<init>,"com.google.common.collect.ImmutableRangeSet:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableRangeSet)",155,158,"/**
* Initializes an ImmutableRangeSet instance with the given ranges and complement.
* @param ranges collection of non-overlapping ranges
* @param complement range set that is the complement of this instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,com.google.common.collect.TreeRangeSet:<init>(java.util.NavigableMap),76,78,"/**
* Initializes a TreeRangeSet with a NavigableMap of Cut-based ranges.
* @param rangesByLowerCut map of cuts to their corresponding range sets
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,contains,com.google.common.collect.ImmutableRangeSet:contains(java.lang.Comparable),30,33,"/**
* Checks whether the given value is contained in this set.
* @param value object to search for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,contains,com.google.common.collect.TreeRangeSet:contains(java.lang.Comparable),30,33,"/**
* Checks if a given value is contained within this collection.
* @param value object to search for in this collection
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,isEmpty,com.google.common.collect.TreeRangeSet:isEmpty(),38,41,"/**
* Checks if this interval is empty (no elements).
* @return true if no elements are present, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,clear,com.google.common.collect.AbstractRangeSet:clear(),53,56,"/**
* Removes all elements from this collection.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,com.google.common.collect.TreeRangeSet$RangesByUpperBound:<init>(java.util.NavigableMap),294,297,"/**
* Initializes upper-bound view of ranges by copying lower-bound map.
* @param rangesByLowerBound NavigableMap of Cut to Range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,enclosesAll,com.google.common.collect.ImmutableRangeSet:enclosesAll(com.google.common.collect.RangeSet),58,61,"/**
* Checks if this range set encloses all ranges in another set.
* @param other RangeSet to check against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,enclosesAll,com.google.common.collect.TreeRangeSet:enclosesAll(com.google.common.collect.RangeSet),58,61,"/**
* Determines whether this range set encloses all ranges in another.
*@param other RangeSet to check against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,addAll,com.google.common.collect.TreeRangeSet:addAll(com.google.common.collect.RangeSet),63,66,"/**
* Adds all ranges from another RangeSet to this one.
* @param other RangeSet instance to merge with this set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,removeAll,com.google.common.collect.TreeRangeSet:removeAll(com.google.common.collect.RangeSet),68,71,"/**
* Removes all elements in the specified range set.
* @param other RangeSet containing elements to remove
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,equals,com.google.common.collect.ImmutableRangeSet:equals(java.lang.Object),81,90,"/**
* Checks for equality with another RangeSet object.
* @param obj the object to compare with
* @return true if objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,equals,com.google.common.collect.TreeRangeSet:equals(java.lang.Object),81,90,"/**
* Compares this RangeSet with another object for equality.
* @param obj the object to compare with
* @return true if the objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,asMap,com.google.common.collect.AbstractSortedSetMultimap:asMap(),136,139,"/**
* Returns the underlying map representation of this collection.
* @return A read-only map view of this collection's elements.","* Returns a map view that associates each key with the corresponding values in the multimap.
   * Changes to the returned map, such as element removal, will update the underlying multimap. The
   * map does not support {@code setValue} on its entries, {@code put}, or {@code putAll}.
   *
   * <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same
   * behavior as {@link #get}, returning a live collection. When passed a key that is not present,
   * however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection.
   *
   * <p>Though the method signature doesn't say so explicitly, the returned map has {@link
   * SortedSet} values.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,keySet,com.google.common.collect.TreeMultimap:keySet(),185,188,"/**
* Returns a navigable set view of keys.
* @return Set of unique keys in this map
*/","* {@inheritDoc}
   *
   * <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link
   * NavigableSet}, instead of the {@link java.util.Set} specified in the {@link Multimap}
   * interface.
   *
   * @since 14.0 (present with return type {@code SortedSet} since 2.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,orNaturalOrder,com.google.common.collect.Maps:orNaturalOrder(java.util.Comparator),786,793,"/**
* Returns a natural-order comparator or the provided one.
* @param comparator optional custom comparator, uses natural order if null
* @return Comparator for ordering elements of type E
*/","* Returns the specified comparator if not null; otherwise returns {@code Ordering.natural()}.
   * This method is an abomination of generics; the only purpose of this method is to contain the
   * ugly type-casting in one place.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseNaturalOrdering.java,reverse,com.google.common.collect.ReverseNaturalOrdering:reverse(),43,46,"/**
* Returns an ordering in reverse order.
* @return Reversed natural ordering instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedIterables.java,comparator,com.google.common.collect.SortedIterables:comparator(java.util.SortedSet),51,60,"/**
* Returns a comparator for the given sorted set, 
* using natural ordering if no explicit comparator is set. 
* @param sortedSet the input sorted set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,comparator,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:comparator(),500,503,"/**
* Returns a natural ordering comparator for Cut objects.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,comparator,com.google.common.collect.TreeRangeSet$RangesByUpperBound:comparator(),332,335,"/**
* Returns a natural ordering comparator for Cut objects. 
* @return Comparator instance for sorting Cut values in ascending order.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,comparator,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:comparator(),734,737,"/**
* Returns a natural ordering comparator for Cut objects of type C.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,firstEntry,com.google.common.collect.TreeMultiset:firstEntry(),66,70,"/**
* Returns the first entry in the iteration sequence, or null if empty.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,lastEntry,com.google.common.collect.TreeMultiset:lastEntry(),72,76,"/**
* Returns the last entry in the map, or null if empty.
* @return Last Entry object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,descendingMultiset,com.google.common.collect.AbstractSortedMultiset:descendingMultiset(),122,126,"/**
* Creates or returns a pre-initialized descending multiset.
* @return SortedMultiset object initialized with this multiset's elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,contains,com.google.common.collect.AbstractTable$Values:contains(java.lang.Object),217,220,"/**
* Checks if an object is present in this map.
* @param o the object to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsValue,com.google.common.collect.StandardTable:containsValue(java.lang.Object),109,112,"/**
* Checks if this map contains a specified value.
* @param value object to search for (null returns false)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,isEmpty,com.google.common.collect.ImmutableTable:isEmpty(),85,88,"/**
* Checks if this collection is empty.
* @return true if no elements are present, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,putAll,com.google.common.collect.AbstractTable:putAll(com.google.common.collect.Table),109,114,"/**
* Puts all key-value pairs from the given Table into this Map.
* @param table Table containing data to be added
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,cellSet,com.google.common.collect.AbstractTable:cellSet(),118,122,"/**
* Returns a set of cells for the grid, lazily initializing it if necessary.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,values,com.google.common.collect.AbstractTable:values(),181,185,"/**
* Lazily initializes and returns collection of values.
* @return Collection of V objects or creates a new one if null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,equals,com.google.common.collect.AbstractTable:equals(java.lang.Object),233,236,"/**
* Checks equality with another object using the Tables implementation.
* @param obj object to compare for equality
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,toString,com.google.common.collect.ArrayTable:toString(),244,247,"/**
* Returns a string representation of this object's data.
*/",Returns the string representation {@code rowMap().toString()}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,toString,com.google.common.collect.ImmutableTable:toString(),244,247,"/**
* Returns a string representation of this object.
* @return A formatted string containing key-value pairs from the underlying map.",Returns the string representation {@code rowMap().toString()}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ByFunctionOrdering.java,<init>,"com.google.common.collect.ByFunctionOrdering:<init>(com.google.common.base.Function,com.google.common.collect.Ordering)",39,42,"/**
* Configures the ByFunction and Ordering instances.
* @param function Function to be ordered
* @param ordering Ordering strategy to apply
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparatorOrdering.java,<init>,com.google.common.collect.ComparatorOrdering:<init>(java.util.Comparator),34,36,"/**
* Initializes ordering with the given comparator.
* @param comparator non-null comparator to determine order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompoundOrdering.java,<init>,"com.google.common.collect.CompoundOrdering:<init>(java.util.Comparator,java.util.Comparator)",33,36,"/**
* Initializes a CompoundOrdering instance with two comparators.
* @param primary primary ordering comparator
* @param secondary secondary ordering comparator
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,<init>,com.google.common.collect.ExplicitOrdering:<init>(com.google.common.collect.ImmutableMap),35,37,"/**
* Initializes explicit ordering with provided ranking map.
* @param rankMap immutable map of entities to their ranks
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LexicographicalOrdering.java,<init>,com.google.common.collect.LexicographicalOrdering:<init>(java.util.Comparator),33,35,"/**
* Sets custom lexicographical ordering using provided comparator.
* @param elementOrder comparator to order elements in set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,<init>,com.google.common.collect.NaturalOrdering:<init>(),81,81,"/**
* Initializes NaturalOrdering instance with default settings.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsFirstOrdering.java,<init>,com.google.common.collect.NullsFirstOrdering:<init>(com.google.common.collect.Ordering),32,34,"/**
* Sets the ordering to consider null values first.
* @param ordering Ordering instance to apply
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsLastOrdering.java,<init>,com.google.common.collect.NullsLastOrdering:<init>(com.google.common.collect.Ordering),32,34,"/**
* Sets custom ordering strategy to be used when comparing elements.
* @param ordering Ordering instance to use for comparisons
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseNaturalOrdering.java,<init>,com.google.common.collect.ReverseNaturalOrdering:<init>(),100,100,"/**
* Initializes a new instance of the ReverseNaturalOrdering class.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,<init>,com.google.common.collect.ReverseOrdering:<init>(com.google.common.collect.Ordering),34,36,"/**
 * Creates an Ordering instance with reverse ordering.
 * @param forwardOrder original ordering to be reversed
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UsingToStringOrdering.java,<init>,com.google.common.collect.UsingToStringOrdering:<init>(),44,44,"/**
* Configures default ordering for fields in toString representation.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,writeObject,com.google.common.collect.ArrayListMultimap:writeObject(java.io.ObjectOutputStream),160,165,"/**
* Serializes object to output stream using default serialization and multimap.
* @throws IOException if serialization fails
*/","* @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the
   *     key, number of values for that key, and the key's values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,writeObject,com.google.common.collect.HashMultimap:writeObject(java.io.ObjectOutputStream),136,141,"/**
* Writes object contents to output stream.
* @throws IOException if serialization fails
*/","* @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the
   *     key, number of values for that key, and the key's values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,writeObject,com.google.common.collect.ImmutableListMultimap:writeObject(java.io.ObjectOutputStream),512,517,"/**
* Writes object state to output stream using default serialization.
* @throws IOException if serialization fails
*/","* @serialData number of distinct keys, and then for each distinct key: the key, the number of
   *     values for that key, and the key's values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,readObject,com.google.common.collect.ArrayListMultimap:readObject(java.io.ObjectInputStream),167,176,"/**
* Reads serialized object from input stream and populates the multimap.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if a class is not found during deserialization
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Serialization.java,populateMultimap,"com.google.common.collect.Serialization:populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream)",162,167,"/**
* Populates a multimap from an ObjectInputStream.
* @param multimap the multimap to populate
* @param stream input stream containing key-value pairs
*/","* Populates a multimap by reading an input stream, as part of deserialization. See {@link
   * #writeMultimap} for the data format.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,<init>,"com.google.common.collect.TableCollectors$MutableCell:<init>(java.lang.Object,java.lang.Object,java.lang.Object)",176,180,"/**
* Constructs a new MutableCell object with specified row, column, and value.
* @param row the row index (1-based)
* @param column the column index (1-based)
* @param value the cell's value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,"com.google.common.collect.Tables$ImmutableCell:<init>(java.lang.Object,java.lang.Object,java.lang.Object)",140,147,"/**
* Constructs a new ImmutableCell instance with specified row, column keys and value.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value cell data value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,keySet,com.google.common.collect.ArrayTable$ArrayMap:keySet(),197,200,"/**
* Returns a set of keys from the underlying map.
* @return A set of unique keys.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getKey,com.google.common.collect.ArrayTable$ArrayMap:getKey(int),202,204,"/**
* Retrieves a key from the keyIndex set at the specified index.
* @param index position of the desired key in the set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,put,"com.google.common.collect.ArrayTable$ArrayMap:put(java.lang.Object,java.lang.Object)",278,286,"/**
* Inserts or updates a value for the given key.
* @param key unique identifier
* @param value value to associate with the key
* @return associated value or null if not found initially
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,columnKeySet,com.google.common.collect.ArrayTable:columnKeySet(),645,648,"/**
* Returns a set of unique column keys.
* @return ImmutableSet of column keys or empty if none exist
*/","* Returns an immutable set of the valid column keys, including those that are associated with
   * null values only.
   *
   * @return immutable set of column keys",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,rowKeySet,com.google.common.collect.ArrayTable:rowKeySet(),737,740,"/**
* Returns an immutable set of row keys.
* @return Set of row keys corresponding to all rows in this data structure.","* Returns an immutable set of the valid row keys, including those that are associated with null
   * values only.
   *
   * @return immutable set of row keys",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,getKey,com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:getKey(int),104,106,"/**
* Retrieves the key at the specified index from the key set. 
* @param index position of the desired key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,toString,com.google.common.collect.ExplicitOrdering:toString(),66,69,"/**
* Returns a string representation of this object in the format 'Ordering.explicit(keySet)'.
* @return String representation of this object's ordering.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,createKeySet,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:createKeySet(),1136,1139,"/**
* Returns an immutable set of keys from this map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,readResolve,com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm:readResolve(),99,101,"/**
* Returns key set of the internal map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,keySet,com.google.common.collect.ImmutableMultimap:keySet(),584,587,"/**
* Returns an immutable set of keys from this map.
*/","* Returns an immutable set of the distinct keys in this multimap, in the same order as they
   * appear in this multimap.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,columnKeySet,com.google.common.collect.ImmutableTable:columnKeySet(),343,346,"/**
* Returns an immutable set of unique column keys. 
* @return Set of column keys or empty set if none exist",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,readResolve,com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm:readResolve(),364,366,"/**
* Returns a set of keys from the internal map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,contains,com.google.common.collect.Sets$PowerSet:contains(java.lang.Object),1750,1757,"/**
* Checks if a Set object is contained within the input data.
* @param obj Set object to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,entryIterator,com.google.common.collect.ArrayTable$ArrayMap:entryIterator(),246,254,"/**
* Returns an iterator over the map entries.
* @return Iterator of Map.Entry objects or null if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,isEmpty,com.google.common.collect.ArrayTable$ArrayMap:isEmpty(),219,222,"/**
* Checks if the collection is empty.
* @return true if collection is empty, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsKey,com.google.common.collect.ArrayTable$ArrayMap:containsKey(java.lang.Object),263,266,"/**
* Checks if the specified key exists in the key index.
* @param key object to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsColumn,com.google.common.collect.ArrayTable:containsColumn(java.lang.Object),410,413,"/**
* Checks if the data model contains a specific column.
* @param columnKey unique key of the column to check (or null for no change)
*/","* Returns {@code true} if the provided column key is among the column keys provided when the
   * table was constructed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsRow,com.google.common.collect.ArrayTable:containsRow(java.lang.Object),419,422,"/**
* Checks if a row exists by its key. 
* @param rowKey unique identifier of the row to check for existence
* @return true if the row exists, false otherwise
*/","* Returns {@code true} if the provided row key is among the row keys provided when the table was
   * constructed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,containsKey,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:containsKey(java.lang.Object),1141,1144,"/**
* Checks if map contains specified key.
* @param key object to search for in map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,contains,com.google.common.collect.ImmutableMapKeySet:contains(java.lang.Object),58,61,"/**
* Checks if a given object is present in the underlying map.
* @param object object to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,containsKey,com.google.common.collect.ImmutableMultimap:containsKey(java.lang.Object),563,566,"/**
* Checks if a given key exists in the backing map.
* @param key the key to search for (may be null)
* @return true if the key is present, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,cellIterator,com.google.common.collect.ArrayTable:cellIterator(),549,557,"/**
* Returns an iterator over the cells in this table.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,valuesIterator,com.google.common.collect.ArrayTable:valuesIterator(),791,799,"/**
* Returns an iterator over the values in this map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,asList,com.google.common.collect.EmptyContiguousSet:asList(),118,121,"/**
* Returns an empty list of elements of type C.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,get,com.google.common.collect.ImmutableListMultimap:get(java.lang.Object),446,451,"/**
* Retrieves a list of values associated with the given key from the underlying map.
* @param key unique identifier
* @return ImmutableList of V objects or an empty list if not found
*/","* Returns an immutable list of the values for the given key. If no mappings in the multimap have
   * the provided key, an empty immutable list is returned. The values are in the same order as the
   * parameters used to build this multimap.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,createValues,com.google.common.collect.RegularImmutableTable:createValues(),86,89,"/**
* Returns an immutable collection of values.
* If empty, returns an empty list; otherwise, creates a new Values instance. 
* @return ImmutableCollection<V> containing user values or an empty list if none exist.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,column,com.google.common.collect.ImmutableTable:column(java.lang.Object),336,341,"/**
* Retrieves a column map by key.
* @param columnKey unique column identifier
* @return ImmutableMap of column data or an empty map if not found
*/","* {@inheritDoc}
   *
   * @throws NullPointerException if {@code columnKey} is {@code null}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver$TypeTable:<init>(),280,282,"/**
* Initializes an empty TypeTable instance.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntry.java,<init>,"com.google.common.collect.ImmutableMapEntry:<init>(java.lang.Object,java.lang.Object)",52,55,"/**
* Creates an immutable map entry with the given key and value.
* @param key unique map key
* @param value associated map value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,put,"com.google.common.collect.ImmutableMultimap$Builder:put(java.lang.Object,java.lang.Object)",238,248,"/**
* Adds a key-value pair to the builder's map.
* @param key unique key
* @param value associated value
*/",Adds a key-value mapping to the built multimap.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain$BigIntegerDomain:offset(java.math.BigInteger,long)",224,228,"/**
* Calculates an offset from a given origin using a specified distance.
* @param origin initial coordinate value
* @param distance amount to increment by
* @return updated coordinate value as BigInteger
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain$LongDomain:offset(java.lang.Long,long)",147,155,"/**
* Calculates the new offset position by adding a distance to an origin point.
* @param origin initial offset position
* @param distance amount to add
* @return updated offset position or throws exception on overflow
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain:offset(java.lang.Comparable,long)",263,274,"/**
* Calculates the offset C from a given origin by traversing 'distance' steps.
* @param origin starting point
* @param distance number of steps to traverse
* @return next C object or null if overflow occurs
*/","* Returns, conceptually, ""origin + distance"", or equivalently, the result of calling {@link
   * #next} on {@code origin} {@code distance} times.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliterator:trySplit(),376,399,"/**
* Attempts to split the spliterator into two smaller ones.
* @return a new spliterator or null if splitting is not possible
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMapToDouble,"com.google.common.collect.CollectSpliterators:flatMapToDouble(java.util.Spliterator,java.util.function.Function,int,long)",275,290,"/**
* Maps elements to double Spliterators and combines them into a single Spliterator.
* @param fromSpliterator input element Spliterator
* @param function mapping function for each element
* @return combined double Spliterator or null if invalid characteristics
*/","* Returns a {@code Spliterator.OfDouble} that iterates over the elements of the spliterators
   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code
   * function} returns {@code null} for an input, it is replaced with an empty stream.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMapToInt,"com.google.common.collect.CollectSpliterators:flatMapToInt(java.util.Spliterator,java.util.function.Function,int,long)",231,246,"/**
* Flattens a stream into an Int stream using the provided mapping function.
* @param fromSpliterator input Spliterator
* @param function mapping function to apply to each element
* @return FlatMapSpliterator object
*/","* Returns a {@code Spliterator.OfInt} that iterates over the elements of the spliterators
   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code
   * function} returns {@code null} for an input, it is replaced with an empty stream.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMapToLong,"com.google.common.collect.CollectSpliterators:flatMapToLong(java.util.Spliterator,java.util.function.Function,int,long)",253,268,"/**
* Flattens elements to longs using the provided mapper.
* @param fromSpliterator input spliterator
* @param function mapping function
* @return Spliterator of Long values or null if not supported
*/","* Returns a {@code Spliterator.OfLong} that iterates over the elements of the spliterators
   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code
   * function} returns {@code null} for an input, it is replaced with an empty stream.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMap,"com.google.common.collect.CollectSpliterators:flatMap(java.util.Spliterator,java.util.function.Function,int,long)",208,224,"/**
* Maps each input element to a spliterator of output elements.
* @param fromSpliterator input elements
* @param function mapping function
* @param topCharacteristics characteristics of the resulting spliterator
* @param topSize estimated size of the resulting spliterator
* @return Spliterator of mapped output elements
*/","* Returns a {@code Spliterator} that iterates over the elements of the spliterators generated by
   * applying {@code function} to the elements of {@code fromSpliterator}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$FilteredSet:<init>(java.util.Set,com.google.common.base.Predicate)",1282,1284,"/**
* Creates a filtered set containing elements that match the given predicate.
* @param unfiltered original set to filter
* @param predicate condition to evaluate each element against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,containsAll,com.google.common.collect.Collections2$FilteredCollection:containsAll(java.util.Collection),164,167,"/**
* Checks if this set contains all elements in the given collection.
* @param collection Collection to check against the set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardContainsAll,com.google.common.collect.ForwardingCollection:standardContainsAll(java.util.Collection),149,151,"/**
* Checks if this collection contains all elements of another collection.
* @param collection Collection to check against
*/","* A sensible definition of {@link #containsAll} in terms of {@link #contains} . If you override
   * {@link #contains}, you may wish to override {@link #containsAll} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,containsAll,com.google.common.collect.RegularContiguousSet:containsAll(java.util.Collection),185,188,"/**
* Checks if this collection contains all specified elements.
* @param targets Collection of elements to check for membership
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsAll,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:containsAll(java.util.Collection),1015,1020,"/**
* Checks if this collection contains all elements from another collection.
* @param c collection to check against
* @return true if all elements are found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,calculateNextPermutation,com.google.common.collect.Collections2$OrderedPermutationIterator:calculateNextPermutation(),524,540,"/**
* Generates the next permutation in lexicographic order.
* @throws NullPointerException if nextPermutation is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,calculateNextPermutation,com.google.common.collect.Collections2$PermutationIterator:calculateNextPermutation(),656,685,"/**
* Calculates the next permutation in a list.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,contains,com.google.common.collect.CompactHashMap$EntrySetView:contains(java.lang.Object),827,838,"/**
* Checks if the map contains a specified object, either as an entry or in its entries.
* @param o the object to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap$KeySetView:remove(java.lang.Object),729,735,"/**
* Removes an object from the map.
* @param o object to remove
* @return true if removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,keySetIterator,com.google.common.collect.CompactHashMap:keySetIterator(),768,780,"/**
* Returns an iterator over the keys in this map.
* @return Iterator of keys or null if not initialized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,entrySetIterator,com.google.common.collect.CompactHashMap:entrySetIterator(),874,885,"/**
* Returns an iterator over the map's entries.
* @return Iterator of entries or null if delegate is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,size,com.google.common.collect.CompactHashMap:size(),953,957,"/**
* Returns the number of elements in the map.
* @return size of the map or default size if null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,valuesIterator,com.google.common.collect.CompactHashMap:valuesIterator(),1052,1064,"/**
* Returns an iterator over the values in this map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,spliterator,com.google.common.collect.CompactHashMap$KeySetView:spliterator(),742,752,"/**
* Returns a spliterator for the collection's key set.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,spliterator,com.google.common.collect.CompactHashMap$ValuesView:spliterator(),1013,1022,"/**
* Returns a Spliterator for the values in this map.
* @return spliterator over map values or default iterator if no underlying data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,next,com.google.common.collect.CompactHashMap$Itr:next(),638,649,"/**
* Retrieves the next element from the iteration, advancing the internal state.
* @return The next element of type T or throws NoSuchElementException if exhausted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setHashTableMask,com.google.common.collect.CompactHashMap:setHashTableMask(int),311,315,"/**
* Sets the hash table mask.
* @param mask integer value representing the hash table size
*/",Stores the hash table mask as the number of bits needed to represent an index.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,setHashTableMask,com.google.common.collect.CompactHashSet:setHashTableMask(int),279,283,"/**
* Sets the hash table mask for compact hashing.
* @param mask integer mask value
*/",Stores the hash table mask as the number of bits needed to represent an index.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,entry,com.google.common.collect.CompactHashMap:entry(int),1188,1190,"/**
* Retrieves an entry from the array of required entries.
* @param i index of the desired entry (0-based)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setEntry,"com.google.common.collect.CompactHashMap:setEntry(int,int)",1200,1202,"/**
 * Sets the value at index 'i' in the entry array.
 * @param i array index
 * @param value new value to be assigned
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,key,com.google.common.collect.CompactHashMap:key(int),1178,1181,"/**
 * Retrieves the key at specified index from the required keys array. 
 * @param i index of desired key
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setKey,"com.google.common.collect.CompactHashMap:setKey(int,java.lang.Object)",1192,1194,"/**
 * Sets the key at specified index in the keys array.
 * @param i index of key to update
 * @param key new value to assign
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,resizeEntries,com.google.common.collect.CompactHashMap:resizeEntries(int),426,430,"/**
* Resizes internal arrays to accommodate a specified capacity.
* @param newCapacity the desired size of entry, key, and value arrays
*/","* Resizes the internal entries array to the specified capacity, which may be greater or less than
   * the current capacity.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,value,com.google.common.collect.CompactHashMap:value(int),1183,1186,"/**
* Retrieves value at specified index from internal array of values.
* @param i index to retrieve value from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setValue,"com.google.common.collect.CompactHashMap:setValue(int,java.lang.Object)",1196,1198,"/**
* Sets the value at specified index in the values array.
* @param i index to set
* @param value new value to assign
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,keySet,com.google.common.collect.CompactHashMap:keySet(),687,690,"/**
* Returns a set view of keys in this map.
* If not already created, initializes the internal set view. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,entrySet,com.google.common.collect.CompactHashMap:entrySet(),797,800,"/**
* Returns a set of all entries in this map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,values,com.google.common.collect.CompactHashMap:values(),980,983,"/**
* Returns a collection of values. If not initialized, creates and caches it.
* @return Collection of values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,isUsingHashFloodingResistance,com.google.common.collect.CompactHashSet:isUsingHashFloodingResistance(),273,276,"/**
* Checks if the current instance uses hash flooding resistance.
* @return true if using hash flooding resistance, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,iterator,com.google.common.collect.CompactHashSet:iterator(),539,588,"/**
* Returns an iterator for this compact hash set, or a custom iterator
* if the underlying delegate is null.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,size,com.google.common.collect.CompactHashSet:size(),615,619,"/**
* Returns the number of elements in this collection.
* @return size of underlying collection or default size if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,entry,com.google.common.collect.CompactHashSet:entry(int),744,746,"/**
* Retrieves an entry from the required entries array at specified index 'i'.
* @param i index of the desired entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,setEntry,"com.google.common.collect.CompactHashSet:setEntry(int,int)",752,754,"/**
 * Sets an entry at index i with specified value.
 * @param i index of entry to update
 * @param value new value to assign
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,resizeEntries,com.google.common.collect.CompactHashSet:resizeEntries(int),378,381,"/**
* Resizes internal arrays to accommodate a specified capacity.
* @param newCapacity desired size of the arrays
*/","* Resizes the internal entries array to the specified capacity, which may be greater or less than
   * the current capacity.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,spliterator,com.google.common.collect.CompactHashSet:spliterator(),590,600,"/**
* Returns a spliterator for the collection's elements.
* @return Spliterator object or a fallback spliterator if delegate is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,toArray,com.google.common.collect.CompactHashSet:toArray(),626,633,"/**
* Converts collection to an array.
* @return array of elements or empty array if not allocated
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,element,com.google.common.collect.CompactHashSet:element(int),739,742,"/**
 * Retrieves an element at the specified index from the underlying collection.
 * @param i zero-based index of the desired element
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,setElement,"com.google.common.collect.CompactHashSet:setElement(int,java.lang.Object)",748,750,"/**
* Sets element at specified index to given value.
* @param i index of element to update
* @param value new value for element at index i
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashing.java,tableSize,com.google.common.collect.CompactHashing:tableSize(int),70,73,"/**
* Calculates the optimal hash table size based on expected usage.
* @param expectedSize estimated number of entries
* @return minimum required capacity to prevent resizing
*/","* Returns the power of 2 hashtable size required to hold the expected number of items or the
   * minimum hashtable size, whichever is greater.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,link,com.google.common.collect.CompactLinkedHashMap:link(int),310,312,"/**
* Retrieves the link at specified index from the array of required links.
* @param i index of the desired link
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setLink,"com.google.common.collect.CompactLinkedHashMap:setLink(int,long)",314,316,"/**
* Sets link at specified index.
* @param i index of link to update
* @param value new link value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,getPredecessor,com.google.common.collect.CompactLinkedHashSet:getPredecessor(int),162,164,"/**
* Calculates predecessor index by subtracting one from required predecessors value.
* @param entry index to retrieve predecessor for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,setPredecessor,"com.google.common.collect.CompactLinkedHashSet:setPredecessor(int,int)",175,177,"/**
* Sets predecessor to graph entry at specified index.
* @param entry graph entry index
* @param pred predecessor value (will be incremented by 1)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,getSuccessor,com.google.common.collect.CompactLinkedHashSet:getSuccessor(int),166,169,"/**
* Calculates the successor of an entry by subtracting one from its required successors count.
* @param entry unique identifier of the entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,setSuccessor,"com.google.common.collect.CompactLinkedHashSet:setSuccessor(int,int)",171,173,"/**
* Sets successor node ID in the successors array.
* @param entry index to update
* @param succ new successor node ID
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compare,"com.google.common.collect.ComparisonChain$1:compare(int,int)",242,242,"/**
* Compares two integers using a chainable comparison mechanism.
* @param left left-hand value to compare
* @param right right-hand value to compare
*/","* Compares two {@code int} values as specified by {@link Integer#compare}, <i>if</i> the result
   * of this comparison chain has not already been determined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,compare,"com.google.common.primitives.Ints$LexicographicalComparator:compare(int[],int[])",464,476,"/**
* Compares two integer arrays lexicographically.
* @param left first array
* @param right second array
* @return negative/positive value if left/right is smaller/larger, or 0 for equal length and identical elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compare,"com.google.common.collect.ComparisonChain$1:compare(long,long)",248,248,"/**
* Compares two long values in a chain.
* @param left the first value to compare
* @param right the second value to compare
*/","* Compares two {@code long} values as specified by {@link Long#compare}, <i>if</i> the result of
   * this comparison chain has not already been determined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,compare,"com.google.common.primitives.Longs$LexicographicalComparator:compare(long[],long[])",544,554,"/**
* Compares two arrays of long values lexicographically.
* @param left first array to compare
* @param right second array to compare
* @return negative/positive value if left/right is smaller/larger, 0 if equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compareTrueFirst,"com.google.common.collect.ComparisonChain$1:compareTrueFirst(boolean,boolean)",287,287,"/**
* Compares two boolean values, returning true if the first is true.
* @param left first boolean value to compare
* @param right second boolean value to compare
*/","* Compares two {@code boolean} values, considering {@code true} to be less than {@code false},
   * <i>if</i> the result of this comparison chain has not already been determined.
   *
   * <p>Java 8+ users: you can get the equivalent from {@link Booleans#trueFirst()}. For example:
   *
   * <pre>
   * Comparator.comparing(Foo::isBar, {@link Booleans#trueFirst()})
   * </pre>
   *
   * @since 12.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compareFalseFirst,"com.google.common.collect.ComparisonChain$1:compareFalseFirst(boolean,boolean)",301,301,"/**
* Compares two booleans with false first.
* @param left left operand (must be false)
* @param right right operand
*/","* Compares two {@code boolean} values, considering {@code false} to be less than {@code true},
   * <i>if</i> the result of this comparison chain has not already been determined.
   *
   * <p>Java 8+ users: you can get the equivalent from {@link Booleans#falseFirst()}. For example:
   *
   * <pre>
   * Comparator.comparing(Foo::isBar, {@link Booleans#falseFirst()})
   * </pre>
   *
   * @since 12.0 (present as {@code compare} since 2.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,compare,"com.google.common.primitives.Booleans$LexicographicalComparator:compare(boolean[],boolean[])",322,332,"/**
* Compares two boolean arrays lexicographically.
* @param left first array to compare
* @param right second array to compare
* @return negative, zero, or positive if left is less than, equal to, or greater than right
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingIterator.java,next,com.google.common.collect.ConcurrentHashMultiset$3:next(),54,59,"/**
* Retrieves the next element from this iterator.
* @return the next element in the iteration, or null if exhausted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,readObject,com.google.common.collect.ConcurrentHashMultiset:readObject(java.io.ObjectInputStream),602,609,"/**
* Deserializes user data from the given stream.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if unknown class is encountered
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,leastValueAbove,com.google.common.collect.Cut$BelowAll:leastValueAbove(com.google.common.collect.DiscreteDomain),177,180,"/**
* Returns the smallest value above the minimum in the given discrete domain.
* @param domain DiscreteDomain object containing a set of comparable values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,greatestValueBelow,com.google.common.collect.Cut$AboveAll:greatestValueBelow(com.google.common.collect.DiscreteDomain),282,285,"/**
* Returns the maximum value in the given discrete domain. 
* @param domain DiscreteDomain containing comparable values",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,isLessThan,com.google.common.collect.Cut$AboveValue:isLessThan(java.lang.Comparable),399,402,"/**
* Compares endpoint range with given value.
* @param value value to compare against endpoint range
* @return true if endpoint range is less than the given value, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,isLessThan,com.google.common.collect.Cut$BelowValue:isLessThan(java.lang.Comparable),318,321,"/**
* Checks if endpoint range is less than given value.
* @param value the value to compare against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,equalsOrThrow,"com.google.common.collect.RegularContiguousSet:equalsOrThrow(java.lang.Comparable,java.lang.Comparable)",115,117,"/**
* Compares two comparable objects and throws if they are not equal.
* @param left the object to compare
* @param right the object to compare against (may be null)
* @return true if objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,<init>,com.google.common.collect.ContiguousSet:<init>(com.google.common.collect.DiscreteDomain),147,150,"/**
* Constructs a contiguous set from a discrete domain.
* @param domain Discrete domain to create set from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,<init>,"com.google.common.collect.RegularImmutableSortedSet:<init>(com.google.common.collect.ImmutableList,java.util.Comparator)",49,52,"/**
* Constructs an immutable sorted set from a list of elements.
* @param elements unmodifiable list of elements
* @param comparator null-safe comparison function for sorting and equality checks
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$AboveAll:<init>(),230,233,"/**
* Initializes an empty AboveAll instance.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$AboveValue:<init>(java.lang.Comparable),395,397,"/**
 * Initializes the endpoint for the above value request.
 * @param endpoint the API endpoint URL
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$BelowAll:<init>(),125,133,"/**
* Initializes this class with a bogus endpoint value to override default behavior.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$BelowValue:<init>(java.lang.Comparable),314,316,"/**
* Initializes a new instance of the class with the given API endpoint.
* @param endpoint API endpoint URL to validate below value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withLowerBoundType,"com.google.common.collect.Cut$AboveValue:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",414,424,"/**
* Returns a cut with the specified lower bound type.
* @param boundType type of lower bound (OPEN or CLOSED)
* @param domain discrete domain for lower bound calculation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,hasLowerBound,com.google.common.collect.Range:hasLowerBound(),338,340,"/**
* Checks if this range has a lower bound other than ""below all"". 
* @return true if lower bound is set, false otherwise
*/",Returns {@code true} if this range has a lower endpoint.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withUpperBoundType,"com.google.common.collect.Cut$AboveValue:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",426,436,"/**
* Creates a cut with an upper bound of the specified type.
* @param boundType type of upper bound (OPEN or CLOSED)
* @param domain discrete domain to fetch next value from
* @return Cut object with updated bounds or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,compareTo,com.google.common.collect.Cut:compareTo(com.google.common.collect.Cut),71,85,"/**
* Compares two Cut objects for ordering.
* @param that Cut to compare with this instance
* @return negative if this is below, positive if above, or 0 if equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,hasUpperBound,com.google.common.collect.Range:hasUpperBound(),364,366,"/**
* Checks if an upper bound is set.
* @return true if upperBound is not above all, false otherwise
*/",Returns {@code true} if this range has an upper endpoint.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,canonical,com.google.common.collect.Cut$AboveValue:canonical(com.google.common.collect.DiscreteDomain),458,462,"/**
* Returns the canonical cut for a given discrete domain.
* @param domain the discrete domain to create the cut for
* @return the canonical cut or aboveAll() if no value exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,<init>,com.google.common.collect.DescendingImmutableSortedMultiset:<init>(com.google.common.collect.ImmutableSortedMultiset),31,33,"/**
* Creates a new multiset with elements in reverse order.
* @param forward original sorted multiset
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,<init>,"com.google.common.collect.RegularImmutableSortedMultiset:<init>(com.google.common.collect.RegularImmutableSortedSet,long[],int,int)",54,60,"/**
* Constructs a sorted multiset from a set of elements and their cumulative counts.
* @param elementSet immutable sorted set of elements
* @param cumulativeCounts array of cumulative counts for each element
* @param offset starting index in the counts array
* @param length number of elements in the multiset
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,elementSet,com.google.common.collect.DescendingImmutableSortedMultiset:elementSet(),55,58,"/**
* Returns an immutable sorted set of elements in descending order.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,valueComparator,com.google.common.collect.ImmutableSetMultimap:valueComparator(),673,677,"/**
* Returns a comparator for ordering values, or null if not applicable.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,comparator,com.google.common.collect.ImmutableSortedMultiset:comparator(),328,331,"/**
* Returns a comparator based on the underlying set's comparator.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,indexOf,com.google.common.collect.DescendingImmutableSortedSet:indexOf(java.lang.Object),106,114,"/**
* Returns the index of the specified element in this list, or -1 if not found.
* @param target the object to search for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,entrySet,com.google.common.collect.DescendingMultiset:entrySet(),116,120,"/**
* Returns a set of entries in this map.
* @return a set of entries or null if not initialized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,<init>,com.google.common.collect.DiscreteDomain:<init>(),250,252,"/**
 * Initializes DiscreteDomain with default value.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,tailSetImpl,"com.google.common.collect.EmptyContiguousSet:tailSetImpl(java.lang.Object,boolean)",81,84,"/**
* Returns a new set containing all elements greater than or equal to the given element.
* @param fromElement element to start searching from
* @param fromInclusive whether to include the fromElement in the result
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,subSetImpl,"com.google.common.collect.EmptyContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",75,79,"/**
* Returns an immutable view of the current set.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,headSetImpl,"com.google.common.collect.EmptyContiguousSet:headSetImpl(java.lang.Object,boolean)",70,73,"/**
* Returns this set as its own head set up to but not including the given element.
* @param toElement element to exclude from head set
* @param inclusive whether to include the element in the head set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,writeObject,com.google.common.collect.EnumBiMap:writeObject(java.io.ObjectOutputStream),142,148,"/**
* Serializes the object using ObjectOutputStream.
* @throws IOException if serialization fails
*/","* @serialData the key class, value class, number of entries, first key, first value, second key,
   *     second value, and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,writeObject,com.google.common.collect.EnumHashBiMap:writeObject(java.io.ObjectOutputStream),117,122,"/**
* Serializes UserProfile object to the given ObjectOutputStream.
* @throws IOException if serialization fails
*/","* @serialData the key class, number of entries, first key, first value, second key, second value,
   *     and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,writeObject,com.google.common.collect.HashBiMap:writeObject(java.io.ObjectOutputStream),783,788,"/**
* Serializes this instance into the given ObjectOutputStream.
*/","* @serialData the number of entries, first key, first value, second key, second value, and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,next,com.google.common.collect.EnumMultiset$Itr:next(),230,239,"/**
* Retrieves the next element from the iteration sequence.
* @throws NoSuchElementException if no more elements are available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,checkIsE,com.google.common.collect.EnumMultiset:checkIsE(java.lang.Object),113,118,"/**
* Verifies that the given object is of expected type E.
* @param element object to be checked
*/","* Returns {@code element} cast to {@code E}, if it actually is a nonnull E. Otherwise, throws
   * either a NullPointerException or a ClassCastException as appropriate.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,count,com.google.common.collect.EnumMultiset:count(java.lang.Object),130,138,"/**
* Counts occurrences of a given enum element in the internal map.
* @param element enum object to search for, or null
* @return count of occurrences, or 0 if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,writeObject,com.google.common.collect.EnumMultiset:writeObject(java.io.ObjectOutputStream),298,303,"/**
* Writes this object's state to an ObjectOutputStream.
* Serializes the 'type' field and this object's multiset data.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,writeObject,com.google.common.collect.HashMultiset:writeObject(java.io.ObjectOutputStream),80,85,"/**
* Serializes this object to the given ObjectOutputStream.
*/","* @serialData the number of distinct elements, the first element, its count, the second element,
   *     its count, and so on",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,writeObject,com.google.common.collect.LinkedHashMultiset:writeObject(java.io.ObjectOutputStream),88,93,"/**
* Writes object to ObjectOutputStream, including multiset data.
*/","* @serialData the number of distinct elements, the first element, its count, the second element,
   *     its count, and so on",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,writeObject,com.google.common.collect.TreeMultiset:writeObject(java.io.ObjectOutputStream),1068,1074,"/**
* Serializes the multiset to an ObjectOutputStream.
* Writes the default object data and the comparator used in this multiset.
*/","* @serialData the comparator, the number of distinct elements, the first element, its count, the
   *     second element, its count, and so on",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,rank,com.google.common.collect.ExplicitOrdering:rank(java.lang.Object),44,50,"/**
* Retrieves integer rank from map for given object.
* @param value object to retrieve rank for
* @throws IncomparableValueException if no rank is found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,clear,com.google.common.collect.FilteredEntryMultimap$AsMap:clear(),181,184,"/**
 * Clears all entries in this multimap. 
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,<init>,com.google.common.collect.ImmutableRangeMap$Builder:<init>(),114,116,"/**
 * Initializes an empty builder instance with an internal list to store entries.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,<init>,com.google.common.collect.ImmutableRangeSet$Builder:<init>(),760,762,"/**
* Initializes builder with an empty list of ranges.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,<init>,com.google.common.collect.ImmutableTable$Builder:<init>(),200,200,"/**
* Initializes an empty Builder instance.","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableTable#builder}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,<init>,com.google.common.io.Files$1:<init>(),73,73,"/**
* Private constructor to prevent instantiation of utility class.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,<init>,com.google.common.io.Resources$1:<init>(),47,47,"/**
 * Private constructor to prevent instantiation of utility class.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,removeAll,com.google.common.collect.FilteredEntryMultimap:removeAll(java.lang.Object),106,109,"/**
* Removes all entries matching the specified key from this map.
* @param key object to remove (null if not found)
* @return an empty collection or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,unfiltered,com.google.common.collect.FilteredKeyListMultimap:unfiltered(),36,39,"/**
* Returns an unfiltered multimap view of this multimap.
* @return A multimap containing all key-value pairs.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,delegate,com.google.common.collect.ForwardingList:delegate(),60,61,"/**
* Returns a list of elements to be processed by subclasses.
* @return List of type E containing elements to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,removeAll,com.google.common.collect.FilteredKeyMultimap:removeAll(java.lang.Object),79,82,"/**
* Removes all elements with specified key from collection.
* @param key object to remove, or null for no-op
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,from,com.google.common.collect.FluentIterable:from(java.lang.Object[]),160,162,"/**
* Creates a fluent iterable from an array of elements.
* @param elements array of objects to be iterated
*/","* Returns a fluent iterable containing {@code elements} in the specified order.
   *
   * <p>The returned iterable is an unmodifiable view of the input array.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#of(Object[])
   * Stream.of(T...)}.
   *
   * @since 20.0 (since 18.0 as an overload of {@code of})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,of,com.google.common.collect.FluentIterable:of(),311,314,"/**
* Creates an empty FluentIterable instance.
* @param none
* @return Empty FluentIterable object
*/","* Returns a fluent iterable containing no elements.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,isEmpty,com.google.common.collect.FluentIterable:isEmpty(),605,607,"/**
* Checks if this collection is empty.
* @return true if no elements are present, false otherwise
*/","* Determines whether this fluent iterable is empty.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code !stream.findAny().isPresent()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,append,com.google.common.collect.FluentIterable:append(java.lang.Iterable),392,394,"/**
* Concatenates this iterable with another iterable.
* @param other iterable to be appended
*/","* Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable,
   * followed by those of {@code other}. The iterators are not polled until necessary.
   *
   * <p>The returned iterable's {@code Iterator} supports {@code remove()} when the corresponding
   * {@code Iterator} supports it.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#concat}.
   *
   * @since 18.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,"com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable)",429,432,"/**
* Concatenates two iterables into one.
* @param a first iterable
* @param b second iterable
*/","* Combines two iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements in {@code a}, followed by the elements in {@code b}. The source
   * iterators are not polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Stream.concat(a, b)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,"com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)",445,448,"/**
* Concatenates three iterables into one.
* @param a first iterable to concatenate
* @param b second iterable to concatenate
* @param c third iterable to concatenate
*/","* Combines three iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the
   * elements in {@code c}. The source iterators are not polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Streams.concat(a, b, c)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,"com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)",462,468,"/**
* Concatenates four iterables into one.
* @param a first iterable
* @param b second iterable
* @param c third iterable
* @param d fourth iterable
*/","* Combines four iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the
   * elements in {@code c}, followed by the elements in {@code d}. The source iterators are not
   * polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Streams.concat(a, b, c, d)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,stream,com.google.common.collect.FluentIterable:stream(),850,852,"/**
* Returns a stream of elements from the underlying collection.
* @return a Stream object representing the collection's elements
*/","* Returns a stream of this fluent iterable's contents (similar to calling {@link
   * Collection#stream} on a collection).
   *
   * <p><b>Note:</b> the earlier in the chain you can switch to {@code Stream} usage (ideally not
   * going through {@code FluentIterable} at all), the more performant and idiomatic your code will
   * be. This method is a transitional aid, to be used only when really necessary.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,remainingCapacity,com.google.common.collect.ForwardingBlockingDeque:remainingCapacity(),61,64,"/**
* Returns the remaining capacity by delegating to underlying storage.
* @return Remaining capacity in units
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,putFirst,com.google.common.collect.ForwardingBlockingDeque:putFirst(java.lang.Object),66,69,"/**
 * Inserts an element at the front of the underlying collection.
 * @param e the element to be inserted
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,putLast,com.google.common.collect.ForwardingBlockingDeque:putLast(java.lang.Object),71,74,"/**
* Puts an element at the end of the deque.
* @throws InterruptedException if interrupted while waiting
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,offerFirst,"com.google.common.collect.ForwardingBlockingDeque:offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit)",76,79,"/**
* Offers an element to the blocking queue with a specified timeout.
* @param e element to be offered
* @param timeout time limit for offering the element
* @param unit unit of the timeout (e.g. TimeUnit.SECONDS)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,offerLast,"com.google.common.collect.ForwardingBlockingDeque:offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)",81,84,"/**
* Offers the last element of the queue with a specified timeout.
* @param e element to be offered
* @param timeout time limit for offering the element
* @param unit unit of the timeout (e.g. TimeUnit.SECONDS)
* @return true if the element was successfully offered, false otherwise",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,takeFirst,com.google.common.collect.ForwardingBlockingDeque:takeFirst(),86,89,"/**
* Retrieves and returns the first element from the underlying collection.
* @throws InterruptedException if interrupted while waiting for an element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,takeLast,com.google.common.collect.ForwardingBlockingDeque:takeLast(),91,94,"/**
* Retrieves the last element from this queue.
* @throws InterruptedException if interrupted while waiting
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,pollFirst,"com.google.common.collect.ForwardingBlockingDeque:pollFirst(long,java.util.concurrent.TimeUnit)",96,99,"/**
* Fetches first element from queue with optional timeout. 
* @param timeout maximum wait time in given unit
* @param unit time unit for timeout (e.g., milliseconds, seconds)
* @return polled element or null if timed out or interrupted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,pollLast,"com.google.common.collect.ForwardingBlockingDeque:pollLast(long,java.util.concurrent.TimeUnit)",101,104,"/**
* Retrieves and removes the last element from the queue with a time-out.
* @param timeout waiting time in specified unit
* @param unit time unit for waiting period
* @return E object or null if not available within time-out
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,put,com.google.common.collect.ForwardingBlockingDeque:put(java.lang.Object),106,109,"/**
* Delegates putting an element into underlying queue.
* @param e element to be stored
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,offer,"com.google.common.collect.ForwardingBlockingDeque:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)",111,114,"/**
* Offers an element to the BlockingQueue with a specified timeout.
* @param e element to be offered
* @param timeout maximum time in milliseconds to wait for offer
* @param unit time unit of the timeout
* @return true if successfully added, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,take,com.google.common.collect.ForwardingBlockingDeque:take(),116,119,"/**
* Retrieves an element from the underlying queue.
* @throws InterruptedException if the thread is interrupted while waiting
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,poll,"com.google.common.collect.ForwardingBlockingDeque:poll(long,java.util.concurrent.TimeUnit)",121,124,"/**
* Retrieves an element from the queue with a specified timeout.
* @param timeout time to wait before returning null
* @param unit unit of the timeout duration
* @return the polled element or null if timed out
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,drainTo,com.google.common.collect.ForwardingBlockingDeque:drainTo(java.util.Collection),126,129,"/**
* Drains elements from this collection to the specified target.
* @param c target collection to transfer elements to
* @return number of elements transferred (0 if empty)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,drainTo,"com.google.common.collect.ForwardingBlockingDeque:drainTo(java.util.Collection,int)",131,134,"/**
* Drains elements to a collection with a maximum capacity.
* @param c target collection
* @param maxElements maximum number of elements to transfer
* @return actual number of elements transferred
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,frequency,"com.google.common.collect.Iterators:frequency(java.util.Iterator,java.lang.Object)",381,389,"/**
* Counts occurrences of a specified element in an iterator.
* @param iterator iterable object
* @param element target element to search for
* @return frequency of the element or -1 if not found (though this is currently always >=0)
*/","* Returns the number of elements in the specified iterator that equal the specified object. The
   * iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @see Collections#frequency",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsKeyImpl,"com.google.common.collect.Maps:containsKeyImpl(java.util.Map,java.lang.Object)",3833,3835,"/**
* Checks if a given Map contains a specified key.
* @param map the Map to search
* @param key the key to look for
* @return true if the key is present, false otherwise
*/",An admittedly inefficient implementation of {@link Map#containsKey}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsValueImpl,"com.google.common.collect.Maps:containsValueImpl(java.util.Map,java.lang.Object)",3838,3840,"/**
* Checks if the given map contains a specific value.
* @param map the input map to search
* @param value the target value to look for
* @return true if the map contains the value, false otherwise
*/",An implementation of {@link Map#containsValue}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardAddAll,"com.google.common.collect.ForwardingList:standardAddAll(int,java.lang.Iterable)",148,150,"/**
* Adds all elements from the specified iterable to this list at the given index.
* @param index insertion position
* @param elements iterable of elements to add
*/","* A sensible default implementation of {@link #addAll(int, Collection)}, in terms of the {@code
   * add} method of {@link #listIterator(int)}. If you override {@link #listIterator(int)}, you may
   * wish to override {@link #addAll(int, Collection)} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardSubList,"com.google.common.collect.ForwardingList:standardSubList(int,int)",214,216,"/**
* Returns a sublist of this collection from the given index range.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/","* A sensible default implementation of {@link #subList(int, int)}. If you override any other
   * methods, you may wish to override {@link #subList(int, int)} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardHashCode,com.google.common.collect.ForwardingList:standardHashCode(),236,238,"/**
* Returns a hash code implementation using Guava's Lists library.
* @return A hash code value for this object. 
*/","* A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #hashCode} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,get,com.google.common.collect.ForwardingListMultimap:get(java.lang.Object),46,49,"/**
* Retrieves data associated with the given key.
* @param key unique identifier or key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,replaceValues,"com.google.common.collect.ForwardingListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",57,61,"/**
* Replaces values in a data structure with the given key.
* @param key unique identifier for replacement
* @param values new values to replace with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardPutAll,com.google.common.collect.ForwardingMap:standardPutAll(java.util.Map),146,148,"/**
* Copies all key-value pairs from the given map into this map.
* @param map map to copy from
*/","* A sensible definition of {@link #putAll(Map)} in terms of {@link #put(Object, Object)}. If you
   * override {@link #put(Object, Object)}, you may wish to override {@link #putAll(Map)} to forward
   * to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardEquals,com.google.common.collect.ForwardingMap:standardEquals(java.lang.Object),275,277,"/**
* Performs standard equality check using Guava's Maps.equalsImpl.
* @param object object to compare with this instance
*/","* A sensible definition of {@link #equals} in terms of the {@code equals} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #equals} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,equals,com.google.common.collect.ImmutableMap:equals(java.lang.Object),1205,1208,"/**
* Compares this object with another object for equality.
* @param object the object to compare with (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,iterator,com.google.common.collect.ForwardingMultiset$StandardElementSet:iterator(),250,253,"/**
* Returns an iterator over elements of type E.
* @return Iterator containing all unique elements in the multiset.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,replaceAll,com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:replaceAll(java.util.function.BiFunction),286,289,"/**
* Replaces all values in this map with new values computed by the given BiFunction. 
* @param function a function that takes key and current value as input and returns new value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,lowerEntry,com.google.common.collect.ForwardingNavigableMap:lowerEntry(java.lang.Object),66,69,"/**
* Retrieves the lowest entry with matching key.
* @param key unique identifier or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,lowerKey,com.google.common.collect.ForwardingNavigableMap:lowerKey(java.lang.Object),80,83,"/**
* Retrieves the lowest possible key value using the provided key.
* @param key input key value
* @return equivalent lower bound key or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,floorEntry,com.google.common.collect.ForwardingNavigableMap:floorEntry(java.lang.Object),94,97,"/**
* Returns entry with the smallest value greater than or equal to the given key.
* @param key unique identifier to search for
* @return Entry object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,floorKey,com.google.common.collect.ForwardingNavigableMap:floorKey(java.lang.Object),108,111,"/**
* Retrieves the highest key less than or equal to the given key.
* @param key the input key",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,ceilingEntry,com.google.common.collect.ForwardingNavigableMap:ceilingEntry(java.lang.Object),122,125,"/**
* Retrieves entry with the smallest value greater than or equal to the given key.
* @param key target key for entry lookup
* @return Entry object if found, null otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,ceilingKey,com.google.common.collect.ForwardingNavigableMap:ceilingKey(java.lang.Object),136,139,"/**
* Returns the smallest key in the map that is greater than or equal to the given key.
* @param key target key for ceiling lookup
* @return matching key or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,higherEntry,com.google.common.collect.ForwardingNavigableMap:higherEntry(java.lang.Object),150,153,"/**
* Returns entry with higher key than given one.
* @param key unique identifier to compare against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,higherKey,com.google.common.collect.ForwardingNavigableMap:higherKey(java.lang.Object),164,167,"/**
* Returns the highest key in the map that is greater than the given key.
* @param key the key to compare against, may be null if not available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,firstEntry,com.google.common.collect.ForwardingNavigableMap:firstEntry(),178,181,"/**
* Returns the first entry in the map.
* @return The first Entry object or null if map is empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,lastEntry,com.google.common.collect.ForwardingNavigableMap:lastEntry(),206,209,"/**
* Returns the last entry in this map.
* @return Last Entry object or null if map is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,pollFirstEntry,com.google.common.collect.ForwardingNavigableMap:pollFirstEntry(),233,236,"/**
* Retrieves and removes the first entry from this map.
* @return null if map is empty, otherwise Entry object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,pollLastEntry,com.google.common.collect.ForwardingNavigableMap:pollLastEntry(),247,250,"/**
* Retrieves and removes the last entry from this map.
* @return Last entry in the map or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,descendingMap,com.google.common.collect.ForwardingNavigableMap:descendingMap(),261,264,"/**
* Returns a view of the map's key-value pairs in reverse order.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,navigableKeySet,com.google.common.collect.ForwardingNavigableMap:navigableKeySet(),327,330,"/**
* Returns a navigable set of keys.
* @return NavigableSet containing all unique keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,descendingKeySet,com.google.common.collect.ForwardingNavigableMap:descendingKeySet(),347,350,"/**
 * Returns a set of keys in descending order.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,subMap,"com.google.common.collect.ForwardingNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",374,381,"/**
* Returns a sub-map with keys between the specified range (inclusive or exclusive).
* 
* @param fromKey starting key
* @param fromInclusive whether start is inclusive
* @param toKey ending key
* @param toInclusive whether end is inclusive
* @return NavigableMap containing subset of original map",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,headMap,"com.google.common.collect.ForwardingNavigableMap:headMap(java.lang.Object,boolean)",383,386,"/**
* Returns a navigable map of entries up to but not including the specified key.
* @param toKey key to stop at
* @param inclusive whether to include the key in the result
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,tailMap,"com.google.common.collect.ForwardingNavigableMap:tailMap(java.lang.Object,boolean)",388,391,"/**
* Returns a NavigableMap containing entries starting from the specified key.
* @param fromKey key to start the map from
* @param inclusive whether to include the key itself in the result
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,elementSet,com.google.common.collect.ForwardingSortedMultiset:elementSet(),54,57,"/**
* Returns an ordered set of elements in this collection.
* @return NavigableSet containing all unique elements.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,comparator,com.google.common.collect.ForwardingSortedMultiset:comparator(),79,82,"/**
* Returns a comparator based on the underlying delegate's comparator.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,descendingMultiset,com.google.common.collect.ForwardingSortedMultiset:descendingMultiset(),84,87,"/**
* Returns a new sorted multiset in descending order.
* @return A new SortedMultiset instance or null if delegate returns null.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,firstEntry,com.google.common.collect.ForwardingSortedMultiset:firstEntry(),111,114,"/**
* Returns the first entry in this map.
* @return First Map.Entry object or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,lastEntry,com.google.common.collect.ForwardingSortedMultiset:lastEntry(),131,134,"/**
* Returns the last entry in this map.
* @return null if map is empty, or the last Entry object; else null",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,pollFirstEntry,com.google.common.collect.ForwardingSortedMultiset:pollFirstEntry(),152,155,"/**
* Retrieves and removes the first entry from the map, or null if empty.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,pollLastEntry,com.google.common.collect.ForwardingSortedMultiset:pollLastEntry(),174,177,"/**
* Retrieves and removes the last entry from this queue.
* @return The removed entry or null if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,headMultiset,"com.google.common.collect.ForwardingSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",197,200,"/**
* Returns a new multiset containing elements less than the specified upper bound.
* @param upperBound the upper bound for the returned multiset
* @param boundType specifies whether to include or exclude the upper bound itself
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,subMultiset,"com.google.common.collect.ForwardingSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",202,209,"/**
* Returns a sub-multiset within the specified bounds.
* @param lowerBound lower bound element (null for unbounded)
* @param lowerBoundType type of lower bound
* @param upperBound upper bound element (null for unbounded)
* @param upperBoundType type of upper bound
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,tailMultiset,"com.google.common.collect.ForwardingSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",227,230,"/**
* Returns a tail multiset view of this sorted multiset with the specified lower bound.
* @param lowerBound lower bound for the tail multiset
* @param boundType type of bound (e.g. inclusive, exclusive)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,get,com.google.common.collect.ForwardingSortedSetMultimap:get(java.lang.Object),47,50,"/**
* Retrieves a sorted set of values associated with the given key.
* @param key unique identifier or key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,removeAll,com.google.common.collect.ForwardingSortedSetMultimap:removeAll(java.lang.Object),52,55,"/**
* Removes all elements from this set that are contained in the specified collection.
* @param key the object to remove (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,valueComparator,com.google.common.collect.ForwardingSortedSetMultimap:valueComparator(),62,65,"/**
* Returns the comparator used to compare values in this collection.
* @return Comparator object or null if not set on the delegate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,delegate,com.google.common.collect.ForwardingSetMultimap:delegate(),43,44,"/**
* Returns an immutable multimap to be used as a backing store.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellSet,com.google.common.collect.Tables$UnmodifiableTable:cellSet(),554,557,"/**
* Returns an unmodifiable set of cells in this data structure.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,column,com.google.common.collect.Tables$UnmodifiableTable:column(java.lang.Object),564,567,"/**
* Returns an unmodifiable map of values by column key.
* @param columnKey unique identifier for the column
* @return a Map containing column's data or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,columnKeySet,com.google.common.collect.Tables$UnmodifiableTable:columnKeySet(),569,572,"/**
* Returns an unmodifiable set of column keys.
* @return Unmodifiable Set of C objects representing column keys.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,row,com.google.common.collect.Tables$UnmodifiableTable:row(java.lang.Object),597,600,"/**
* Returns an unmodifiable map of data by row key.
* @param rowKey unique identifier for the data row
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowKeySet,com.google.common.collect.Tables$UnmodifiableTable:rowKeySet(),602,605,"/**
* Returns an unmodifiable set of row keys.
* @return Unmodifiable Set of R objects representing row keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,values,com.google.common.collect.Tables$UnmodifiableTable:values(),612,615,"/**
* Returns an unmodifiable collection of values.
* @return Unmodifiable collection of V objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,tooLow,com.google.common.collect.GeneralRange:tooLow(java.lang.Object),166,174,"/**
* Checks if the given value is too low in the context of a bounded type.
* @param t the value to check
* @return true if the value is lower than the lower bound, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,tooHigh,com.google.common.collect.GeneralRange:tooHigh(java.lang.Object),176,184,"/**
* Checks if the given value exceeds the upper bound.
* @param t object to compare
* @return true if the value is too high, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,equals,com.google.common.collect.GeneralRange:equals(java.lang.Object),241,254,"/**
* Compares this GeneralRange object with the given Object for equality.
* @param obj the object to compare with
* @return true if the objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,hashCode,com.google.common.collect.GeneralRange:hashCode(),256,264,"/**
* Computes hash code based on key and bound properties.
* @return unique hash value for this interval object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,<init>,"com.google.common.collect.HashBasedTable:<init>(java.util.Map,com.google.common.collect.HashBasedTable$Factory)",102,104,"/**
* Initializes a hash-based table with a backing map and value factory.
* @param backingMap map of column to row maps
* @param factory factory for creating table values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,<init>,"com.google.common.collect.StandardRowSortedTable:<init>(java.util.SortedMap,com.google.common.base.Supplier)",59,62,"/**
* Constructs a sorted table with a standard row layout.
* @param backingMap data map to store rows
* @param factory factory for creating new rows
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,newCustomTable,"com.google.common.collect.Tables:newCustomTable(java.util.Map,com.google.common.base.Supplier)",372,378,"/**
* Creates a custom table from an empty backing map and a supplier of row data.
* @param backingMap empty map containing column data
* @param factory supplier of row data to validate against the backing map
* @return Table object representing the custom table
*/","* Creates a table that uses the specified backing map and factory. It can generate a table based
   * on arbitrary {@link Map} classes.
   *
   * <p>The {@code factory}-generated and {@code backingMap} classes determine the table iteration
   * order. However, the table's {@code row()} method returns instances of a different class than
   * {@code factory.get()} does.
   *
   * <p>Call this method only when the simpler factory methods in classes like {@link
   * HashBasedTable} and {@link TreeBasedTable} won't suffice.
   *
   * <p>The views returned by the {@code Table} methods {@link Table#column}, {@link
   * Table#columnKeySet}, and {@link Table#columnMap} have iterators that don't support {@code
   * remove()}. Otherwise, all optional operations are supported. Null row keys, columns keys, and
   * values are not supported.
   *
   * <p>Lookups by row key are often faster than lookups by column key, because the data is stored
   * in a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still
   * runs quickly, since the row key is provided. However, {@code column(columnKey).size()} takes
   * longer, since an iteration across all row keys occurs.
   *
   * <p>Note that this implementation is not synchronized. If multiple threads access this table
   * concurrently and one of the threads modifies the table, it must be synchronized externally.
   *
   * <p>The table is serializable if {@code backingMap}, {@code factory}, the maps generated by
   * {@code factory}, and the table contents are all serializable.
   *
   * <p>Note: the table assumes complete ownership over of {@code backingMap} and the maps returned
   * by {@code factory}. Those objects should not be manually updated and they should not use soft,
   * weak, or phantom references.
   *
   * @param backingMap place to store the mapping from each row key to its corresponding column key
   *     / value map
   * @param factory supplier of new, empty maps that will each hold all column key / value mappings
   *     for a given row key
   * @throws IllegalArgumentException if {@code backingMap} is not empty
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,columnMap,com.google.common.collect.HashBasedTable:columnMap(),875,879,"/**
* Returns the cached or initialized column map.
* @return A map of columns to their respective row maps
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,columnKeySet,com.google.common.collect.HashBasedTable:columnKeySet(),680,684,"/**
* Initializes or returns existing set of column keys.
*/","* {@inheritDoc}
   *
   * <p>The returned set has an iterator that does not support {@code remove()}.
   *
   * <p>The set's iterator traverses the columns of the first row, the columns of the second row,
   * etc., skipping any columns that have appeared previously.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:size(),924,927,"/**
* Returns the number of columns in this table.
* @return count of columns
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,keySet,com.google.common.collect.StandardTable$ColumnMap:keySet(),907,910,"/**
* Returns a set of unique column keys. 
* @return Set of column keys (C)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,column,com.google.common.collect.HashBasedTable:column(java.lang.Object),454,457,"/**
* Creates a Column object with the specified key.
* @param columnKey unique column identifier
*/","* {@inheritDoc}
   *
   * <p>The returned map's views have iterators that don't support {@code remove()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,row,com.google.common.collect.HashBasedTable:row(java.lang.Object),312,315,"/**
* Returns a map representing a database row by its key.
* @param rowKey unique identifier of the row to fetch
* @return Map containing column keys (C) and values (V)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,clear,com.google.common.collect.HashBasedTable:clear(),135,138,"/**
* Clears all data from the backing map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.HashBasedTable:size(),124,131,"/**
* Calculates total count of elements in all maps managed by this collection.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,isEmpty,com.google.common.collect.HashBasedTable:isEmpty(),119,122,"/**
* Checks if the underlying map is empty.
* @return true if map is empty, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,clear,com.google.common.collect.HashBiMap$Inverse:clear(),609,612,"/**
 * Clears all data and state associated with this entity.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,containsKey,com.google.common.collect.HashBiMap$Inverse:containsKey(java.lang.Object),614,617,"/**
* Checks if the map contains a specific key.
* @param value The object to search for in the map
* @return true if the map contains the specified key, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,inverse,com.google.common.collect.HashBiMap$Inverse:inverse(),648,651,"/**
* Returns an inverse mapping of the current forward mapping.
* @return Inverse mapping as a BiMap object.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,values,com.google.common.collect.HashBiMap$Inverse:values(),686,689,"/**
* Returns a set of key values.
* @return Set of keys associated with this map.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,writeReplace,com.google.common.collect.HashBiMap$Inverse:writeReplace(),755,757,"/**
* Returns an inverse serialized form of this HashBiMap instance.
* @return InverseSerializedForm object containing the bi-map's data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,readResolve,com.google.common.collect.HashBiMap$InverseSerializedForm:readResolve(),775,777,"/**
* Returns the inverse of the BiMap.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,values,com.google.common.collect.HashBiMap:values(),512,515,"/**
* Returns a set of values from the inverse mapping.
* @return Set of V objects or empty if none exist
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,next,com.google.common.collect.HashBiMap$Itr:next(),447,459,"/**
* Retrieves and returns the next cached entry in key insertion order.
* @throws NoSuchElementException if no more entries are available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,init,com.google.common.collect.HashBiMap:init(int),139,149,"/**
* Initializes the hash map with expected size, ensuring non-negative input.
* @param expectedSize anticipated number of key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,rehashIfNecessary,com.google.common.collect.HashBiMap:rehashIfNecessary(),380,397,"/**
* Resizes the hash table if necessary to maintain load factor.
* @param none
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Serialization.java,populateMap,"com.google.common.collect.Serialization:populateMap(java.util.Map,java.io.ObjectInputStream)",73,77,"/**
* Populates a map with data from an ObjectInputStream.
* @param map the map to populate
* @param stream input stream containing map data
*/","* Populates a map by reading an input stream, as part of deserialization. See {@link #writeMap}
   * for the data format.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySet,com.google.common.collect.HashBiMap:entrySet(),3758,3781,"/**
* Returns a set of map entries.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,readObject,com.google.common.collect.HashMultiset:readObject(java.io.ObjectInputStream),87,94,"/**
* Reads the serialized form of a Multiset object from an ObjectInputStream.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if class not found during deserialization
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,readObject,com.google.common.collect.LinkedHashMultiset:readObject(java.io.ObjectInputStream),95,102,"/**
* Deserializes a Multiset object from an ObjectInputStream.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if type not found during deserialization
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Serialization.java,populateMultiset,"com.google.common.collect.Serialization:populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream)",116,120,"/**
* Populates a multiset with elements from an ObjectInputStream.
* @param multiset target multiset to fill
* @param stream input stream containing element data
*/","* Populates a multiset by reading an input stream, as part of deserialization. See {@link
   * #writeMultiset} for the data format.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Hashing.java,smearedHash,com.google.common.collect.Hashing:smearedHash(java.lang.Object),55,57,"/**
* Computes a smeared hash value for the given object.
* @param o the object to compute the hash value from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,rebuildHashTable,"com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:rebuildHashTable(int,java.lang.Object[],int)",828,844,"/**
* Rebuilds a hash table with the specified size and elements.
* @param newTableSize target size of the hash table
* @param elements array of objects to populate the hash table
* @return populated hash table or null if not rebuilt
*/",Builds a new open-addressed hash table from the first n objects in elements.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableAsList.java,writeReplace,com.google.common.collect.ImmutableAsList:writeReplace(),84,89,"/**
* Serializes the delegate collection into a SerializedForm object. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,<init>,com.google.common.collect.ImmutableBiMap$Builder:<init>(int),347,349,"/**
* Initializes builder with specified container size.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,<init>,com.google.common.collect.ImmutableMap$Builder:<init>(),426,428,"/**
* Initializes builder with default initial capacity.
*/","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableMap#builder}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,makeBuilder,com.google.common.collect.ImmutableMap$SerializedForm:makeBuilder(int),1299,1301,"/**
* Creates a new builder instance with specified initial capacity.
* @param size initial capacity of the builder
*/",* Returns a builder that builds the unserialized type. Subclasses should override this method.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,builderWithExpectedSize,com.google.common.collect.ImmutableMap:builderWithExpectedSize(int),368,371,"/**
* Creates a Builder with an expected size.
* @param expectedSize the anticipated size of the map
*/","* Returns a new builder, expecting the specified number of entries to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link
   * Builder#build} is called, the builder is likely to perform better than an unsized {@link
   * #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of entries added to the builder.
   *
   * @since 23.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,inverse,com.google.common.collect.RegularImmutableBiMap:inverse(),195,202,"/**
* Creates an inverted mapping of the bi-map.
* @return A new bi-map with keys and values swapped. Returns empty if original is empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,valuePredicateOnEntries,com.google.common.collect.Maps:valuePredicateOnEntries(com.google.common.base.Predicate),2400,2403,"/**
* Creates a predicate that filters entries based on their values.
* @param valuePredicate predicate to apply to entry values
* @return predicate for filtering entries by value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,<init>,"com.google.common.collect.JdkBackedImmutableBiMap:<init>(com.google.common.collect.ImmutableList,java.util.Map,java.util.Map)",59,64,"/**
* Constructs a JdkBackedImmutableBiMap with provided entries and delegates.
* @param entries immutable list of key-value pairs
* @param forwardDelegate forward map delegate for lookup by key
* @param backwardDelegate backward map delegate for lookup by value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,<init>,"com.google.common.collect.RegularImmutableBiMap:<init>(com.google.common.collect.ImmutableMapEntry[],com.google.common.collect.ImmutableMapEntry[],java.util.Map$Entry[],int,int)",116,127,"/**
* Constructs a RegularImmutableBiMap instance from provided data.
* @param keyTable array of ImmutableMapEntry key-value pairs
* @param valueTable array of ImmutableMapEntry key-value pairs
* @param entries array of Entry objects for additional mapping
* @param mask hash code mask value
* @param hashCode initial hash code value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,<init>,"com.google.common.collect.SingletonImmutableBiMap:<init>(java.lang.Object,java.lang.Object)",44,49,"/**
* Initializes a singleton immutable bi-map with the given key-value pair.
* @param singleKey unique key
* @param singleValue corresponding value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,<init>,"com.google.common.collect.SingletonImmutableBiMap:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableBiMap)",51,55,"/**
* Initializes a singleton immutable bi-map with specified key-value pair and its inverse. 
* @param singleKey unique key
* @param singleValue associated value
* @param inverse inverse mapping of the bi-map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,<init>,"com.google.common.collect.JdkBackedImmutableMap:<init>(java.util.Map,com.google.common.collect.ImmutableList)",91,94,"/**
* Creates an immutable map backed by a JDK map and populated with entries.
* @param delegateMap JDK-backed map to use as underlying data structure
* @param entries list of immutable key-value pairs to populate the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,<init>,"com.google.common.collect.RegularImmutableMap:<init>(java.util.Map$Entry[],com.google.common.collect.ImmutableMapEntry[],int)",217,222,"/**
* Constructs a regular immutable map with given entries and hash table.
* @param entries array of key-value pairs
* @param table hash table for efficient lookups
* @param mask initial capacity of the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,readResolve,com.google.common.collect.ImmutableClassToInstanceMap:readResolve(),202,204,"/**
* Returns this instance if non-empty; otherwise returns an empty instance.
* This is used to resolve the object's state after deserialization.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,ensureCapacity,com.google.common.collect.ImmutableMap$Builder:ensureCapacity(int),437,444,"/**
* Ensures the internal array capacity meets or exceeds the specified minimum.
* @param minCapacity new required array size
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,ensureCapacity,com.google.common.collect.ImmutableSet$SetBuilderImpl:ensureCapacity(int),603,609,"/**
* Ensures the internal array capacity meets or exceeds the specified minimum.
* @param minCapacity minimum required capacity
*/","* Resizes internal data structures if necessary to store the specified number of distinct
     * elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList$Builder:<init>(int),814,817,"/**
* Initializes a builder with a specified capacity.
* @param capacity initial array size to store objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,<init>,com.google.common.collect.ImmutableMultiset$Builder:<init>(com.google.common.collect.Multiset),487,489,"/**
* Initializes builder with specified multiset of elements.
* @param contents multiset to build upon
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$Builder:<init>(boolean),493,495,"/**
* Initializes builder with optional subclass flag.
* @param subclass ignored flag (always false in practice)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,addAll,com.google.common.collect.ImmutableSet$Builder:addAll(java.lang.Iterable),540,545,"/**
* Adds all elements from the given iterable to the builder.
* @param elements collection of elements to be added
* @return this builder instance for method chaining
*/","* Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate
     * elements (only the first duplicate element is added).
     *
     * @param elements the elements to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,addAll,com.google.common.collect.ImmutableList$Builder:addAll(java.util.Iterator),905,910,"/**
* Adds all elements from an iterator to the builder.
* @param elements iterator containing elements to be added
*/","* Adds each element of {@code elements} to the {@code ImmutableList}.
     *
     * @param elements the {@code Iterator} to add to the {@code ImmutableList}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,addAll,com.google.common.collect.ImmutableMultiset$Builder:addAll(java.util.Iterator),578,583,"/**
* Adds all elements from an iterator to the builder.
* @param elements iterator of elements to be added
* @return this builder instance
*/","* Adds each element of {@code elements} to the {@code ImmutableMultiset}.
     *
     * @param elements the elements to add to the {@code ImmutableMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,addAll,com.google.common.collect.ImmutableSet$Builder:addAll(java.util.Iterator),547,552,"/**
* Adds all elements from the given iterator to the builder.
* @param elements iterator containing elements of type E
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList:<init>(),392,392,"/**
* Creates an empty immutable list.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,<init>,com.google.common.collect.ImmutableMapValues:<init>(com.google.common.collect.ImmutableMap),40,42,"/**
* Copies the values from an immutable map. 
* @param map source map to copy values from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,<init>,com.google.common.collect.ImmutableMultimap$EntryCollection:<init>(com.google.common.collect.ImmutableMultimap),623,625,"/**
* Initializes an EntryCollection instance from a Multimap. 
* @param multimap input Multimap data structure",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,<init>,com.google.common.collect.ImmutableMultimap$Values:<init>(com.google.common.collect.ImmutableMultimap),830,832,"/**
* Initializes a new instance with an immutable multimap.
* @param multimap Immutable map of key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet:<init>(),277,277,"/**
* Initializes an empty immutable set.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,addAll,com.google.common.collect.ImmutableList$Builder:addAll(java.lang.Iterable),881,896,"/**
* Adds all elements from the given iterable to this builder.
* @param elements iterable of elements to add
*/","* Adds each element of {@code elements} to the {@code ImmutableList}.
     *
     * @param elements the {@code Iterable} to add to the {@code ImmutableList}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,writeReplace,com.google.common.collect.ImmutableList:writeReplace(),748,753,"/**
* Serializes UserProfile object to a SerializedForm.
* @return SerializedForm containing UserProfile data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,writeReplace,com.google.common.collect.ImmutableEnumMap:writeReplace(),118,122,"/**
* Returns a serialized form of this enum instance. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,entryIterator,com.google.common.collect.ImmutableEnumMap:entryIterator(),97,100,"/**
* Returns an unmodifiable iterator over the entries of this map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,iterator,com.google.common.collect.Maps$UnmodifiableEntries:iterator(),1544,1547,"/**
* Returns an unmodifiable iterator over the entries in this map.
* @return Iterator to iterate over key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,writeReplace,com.google.common.collect.ImmutableEnumSet:writeReplace(),140,144,"/**
* Returns serialized form of this enum instance.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,combine,com.google.common.collect.ImmutableList$Builder:combine(com.google.common.collect.ImmutableList$Builder),912,917,"/**
* Combines another builder into this one.
* @param builder The builder to merge into this one.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,reverseIndex,com.google.common.collect.ImmutableList$ReverseImmutableList:reverseIndex(int),644,646,"/**
* Calculates the reversed index within the collection.
* @param index original index value
* @return reversed index value (0-based)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,reversePosition,com.google.common.collect.ImmutableList$ReverseImmutableList:reversePosition(int),648,650,"/**
* Calculates reversed position from given index.
* @param index current position (0-based)
* @return reversed position (size()-based)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList$SubList:listIterator(int),406,414,"/**
* Returns a read-only iterator over the list, starting at the specified index.
* @param index starting position of the iterator
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList:listIterator(),401,404,"/**
* Returns an unmodifiable iterator over the contents of this list.
* @return ListIterator object starting at index 0.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,listIterator,com.google.common.collect.RegularImmutableAsList:listIterator(int),55,59,"/**
* Returns a read-only iterator for the list at the specified index.
* @param index position to start iterating from
* @return UnmodifiableListIterator object or null if invalid index
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,toImmutableList,com.google.common.collect.ImmutableList:toImmutableList(),74,76,"/**
* Converts a stream into an immutable list.","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableList}, in encounter order.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner2:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",1434,1438,"/**
* Initializes a new instance of Combiner2 with two closing futures.
* @param future1 first closing future to combine
* @param future2 second closing future to combine
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner3:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",1603,1609,"/**
* Constructs a Combiner with three closing futures.
* @param future1 first closing future of type V1
* @param future2 second closing future of type V2
* @param future3 third closing future of type V3
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner4:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",1794,1804,"/**
* Constructs a Combiner with four closing futures.
* @param future1 first closing future
* @param future2 second closing future
* @param future3 third closing future
* @param future4 fourth closing future",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner5:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",2001,2013,"/**
* Initializes a Combiner with five ClosingFutures to combine their results.
* @param future1 first ClosingFuture to process
* @param future2 second ClosingFuture to process
* @param future3 third ClosingFuture to process
* @param future4 fourth ClosingFuture to process
* @param future5 fifth ClosingFuture to process",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,copyIntoArray,"com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:copyIntoArray(java.lang.Object[],int)",56,60,"/**
* Copies entries into the given array starting at specified offset.
* @param dst target array
* @param offset initial index in dst array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyIntoArray,"com.google.common.collect.ImmutableSet$Indexed:copyIntoArray(java.lang.Object[],int)",357,360,"/**
* Copies user list into provided array starting at specified offset.
* @param dst array to copy into
* @param offset starting index in the array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,copyIntoArray,"com.google.common.collect.IndexedImmutableSet:copyIntoArray(java.lang.Object[],int)",51,55,"/**
* Copies user list into an array.
* @param dst Destination array to copy into
* @param offset Starting index in the destination array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,copyIntoArray,"com.google.common.collect.RegularImmutableAsList:copyIntoArray(java.lang.Object[],int)",67,71,"/**
* Copies list elements into an array starting at specified offset.
* @param dst target array to store copied values
* @param offset initial index in the array where copying starts
* @return number of elements successfully copied
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,copyIntoArray,"com.google.common.collect.RegularImmutableSortedSet:copyIntoArray(java.lang.Object[],int)",165,168,"/**
* Copies array elements into provided destination array starting at specified offset.
* @param dst destination array to fill
* @param offset starting index for copying
* @return number of copied elements or -1 on failure
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,hashCode,com.google.common.reflect.Types$ParameterizedTypeImpl:hashCode(),295,300,"/**
* Calculates hash code as a combination of owner type, arguments list, and raw type.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,hashCode,com.google.common.reflect.Types$WildcardTypeImpl:hashCode(),497,500,"/**
* Calculates hash code by XORing hash codes of lower and upper bounds. 
* @return combined hash code value",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,com.google.common.collect.ImmutableMultimap:of(),84,86,"/**
 * Creates an empty ImmutableMultimap instance.
 */","* Returns an empty multimap.
   *
   * <p><b>Performance note:</b> the instance returned is a singleton.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,<init>,"com.google.common.collect.ImmutableListMultimap:<init>(com.google.common.collect.ImmutableMap,int)",435,437,"/**
 * Creates an ImmutableListMultimap from a given ImmutableMap and maximum size.
 * @param map ImmutableMap of K to ImmutableList<V>
 * @param size maximum number of elements in the multimap
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,<init>,"com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:<init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableList)",46,49,"/**
* Initializes a RegularEntrySet instance from an immutable map and list of entries.
* @param map the underlying immutable map
* @param entries list of key-value pairs to be stored in the set",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,createKeySet,com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createKeySet(),755,758,"/**
* Creates an immutable set of keys from this map. 
* @return An empty set if map is empty, otherwise a set containing all keys.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,createKeySet,com.google.common.collect.JdkBackedImmutableBiMap:createKeySet(),123,126,"/**
 * Creates an immutable set of keys from this map. 
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,createKeySet,com.google.common.collect.JdkBackedImmutableMap:createKeySet(),117,120,"/**
* Returns an immutable set of keys from this map.
* @return Unmodifiable collection of keys or empty if none.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,createKeySet,com.google.common.collect.RegularImmutableBiMap$Inverse:createKeySet(),238,241,"/**
* Creates an immutable set of keys from this map.
* @return Set of unique keys in this map.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,createKeySet,com.google.common.collect.RegularImmutableBiMap:createKeySet(),160,163,"/**
 * Returns an immutable set containing all keys from this map.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,entryIterator,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:entryIterator(),1168,1193,"/**
* Returns an unmodifiable iterator over the map's entry set,
* with each entry's value wrapped in an immutable set.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,<init>,com.google.common.collect.ImmutableMap$SerializedForm:<init>(com.google.common.collect.ImmutableMap),1243,1260,"/**
* Initializes SerializedForm from a map, using legacy serialization if enabled.
* @param map input data as an immutable map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,keyIterator,com.google.common.collect.ImmutableMap:keyIterator(),1070,1083,"/**
* Returns an unmodifiable iterator over the map's keys.
* @return Iterator over unique key values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,hashCode,com.google.common.collect.ImmutableMap:hashCode(),1212,1215,"/**
* Calculates hash code based on entry set.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,readResolve,com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm:readResolve(),149,151,"/**
* Returns an iterable view of the map's entries.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,get,com.google.common.collect.ImmutableMapKeySet:get(int),63,66,"/**
* Retrieves the key at the specified index from the map's entry list.
* @param index position to retrieve the key from the entry list
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,asList,com.google.common.collect.ImmutableMapValues:asList(),81,104,"/**
* Converts map values to a read-only list.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,getCell,com.google.common.collect.SparseImmutableTable:getCell(int),115,123,"/**
* Retrieves a Cell object at the specified index.
* @param index unique cell index
* @return Cell object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,containsValue,com.google.common.collect.ImmutableMap:containsValue(java.lang.Object),986,989,"/**
* Checks if a given object is present in the collection of values.
* @param value target object to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,readResolve,com.google.common.collect.ImmutableMapValues$SerializedForm:readResolve(),139,141,"/**
* Returns a collection of map values as an Object.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,copyIntoArray,"com.google.common.collect.ImmutableMultimap$Values:copyIntoArray(java.lang.Object[],int)",844,851,"/**
* Copies entire collection into the provided array.
* @param dst target array
* @return new offset position in the array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,readResolve,com.google.common.collect.RegularImmutableMap$Values$SerializedForm:readResolve(),419,421,"/**
 * Returns a collection of map values.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,isHashCodeFast,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:isHashCodeFast(),1163,1166,"/**
* Returns whether this map's hash code calculation is optimized.
* @see ImmutableMap#isHashCodeFast()
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,isHashCodeFast,com.google.common.collect.ImmutableMapEntrySet:isHashCodeFast(),116,120,"/**
* Checks if hash code computation is optimized.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,checkNoConflict,"com.google.common.collect.ImmutableMap:checkNoConflict(boolean,java.lang.String,java.lang.Object,java.lang.Object)",373,378,"/**
* Throws a conflict exception if not in a safe state.
* @param safe true to skip checking for conflicts
* @param conflictDescription description of the potential conflict
* @param entry1 and entry2 conflicting objects (null to ignore)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,writeReplace,com.google.common.collect.ImmutableMapEntrySet:writeReplace(),127,132,"/**
* Returns serialized form of this map's entry set.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,createAsList,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:createAsList(),77,80,"/**
* Creates an immutable list of entries.
* @return List of key-value pairs as an immutable collection.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,<init>,"com.google.common.collect.ImmutableSortedAsList:<init>(com.google.common.collect.ImmutableSortedSet,com.google.common.collect.ImmutableList)",34,36,"/**
* Constructs an ImmutableSortedAsList from a sorted set and list.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,contains,com.google.common.collect.ImmutableMapValues:contains(java.lang.Object),71,74,"/**
* Checks if an object is present in this collection.
* @param object the object to search for (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,iterator,com.google.common.collect.ImmutableMultimap$EntryCollection:iterator(),627,630,"/**
* Returns an unmodifiable iterator over the entries in this multimap.
* @return Iterator over multimap entries or null if not initialized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,isPartialView,com.google.common.collect.ImmutableMultimap$EntryCollection:isPartialView(),632,635,"/**
* Checks if the multi-value map is in partial view state.
* @return true if partial view, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,size,com.google.common.collect.ImmutableMultimap$EntryCollection:size(),637,640,"/**
* Returns the total number of key-value pairs in this multimap.
* @return total count of entries in the multimap
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,size,com.google.common.collect.ImmutableMultimap$Keys:size(),748,751,"/**
* Returns the total count of key-value pairs in this multimap.
* @return size of the multimap
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,size,com.google.common.collect.ImmutableMultimap$Values:size(),853,856,"/**
* Returns total number of key-value pairs in this multimap.
* @return count of all entries in the multimap
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,<init>,"com.google.common.collect.JdkBackedImmutableMultiset:<init>(java.util.Map,com.google.common.collect.ImmutableList,long)",59,64,"/**
* Constructs a JdkBackedImmutableMultiset instance from the provided data.
* @param delegateMap map of elements to their counts
* @param entries immutable list of element entries
* @param size total count of elements in the multiset
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,<init>,"com.google.common.collect.RegularImmutableMultiset:<init>(com.google.common.collect.Multisets$ImmutableEntry[],com.google.common.collect.Multisets$ImmutableEntry[],int,int,com.google.common.collect.ImmutableSet)",126,137,"/**
* Constructs a new RegularImmutableMultiset instance.
* @param entries array of immutable multiset entries
* @param hashTable optional hash table for fast lookup
* @param size total number of elements in the multiset
* @param hashCode hash code value for the multiset
* @param elementSet optional set of unique elements (null if not provided)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,writeReplace,com.google.common.collect.ImmutableMultimap$Keys:writeReplace(),764,769,"/**
* Serializes ImmutableMultimap instance into KeysSerializedForm. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,readResolve,com.google.common.collect.ImmutableMultimap$KeysSerializedForm:readResolve(),787,789,"/**
* Returns the keys of the multimap instance.
* @return Collection of unique key values.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,contains,com.google.common.collect.ImmutableMultimap$Values:contains(java.lang.Object),834,837,"/**
* Checks if the multimap contains a specified value.
* @param object the object to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,iterator,com.google.common.collect.ImmutableMultimap$Values:iterator(),839,842,"/**
* Returns an unmodifiable iterator over the values in this multimap.
* @return Iterator over values or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,forEach,com.google.common.collect.ImmutableMultimap:forEach(java.util.function.BiConsumer),706,712,"/**
* Iterates over the map values and applies a BiConsumer to each entry.
* @param action Consumer function to process key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,elementSet,com.google.common.collect.JdkBackedImmutableMultiset:elementSet(),73,77,"/**
* Returns an immutable set of elements.
* @return Set of elements or null if not initialized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,elementSet,com.google.common.collect.RegularImmutableMultiset:elementSet(),181,185,"/**
* Returns a set of elements in the collection.
* @return Set containing all elements or null if initialized lazily
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,writeReplace,com.google.common.collect.ImmutableMultiset$EntrySet:writeReplace(),406,411,"/**
* Returns serialized form of this multiset entry set. 
* @return SerializedEntrySetForm object representing the multiset entry set.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,writeReplace,com.google.common.collect.ImmutableMultiset:writeReplace(),436,441,"/**
* Returns a serialized form of this object.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,writeReplace,com.google.common.collect.ImmutableRangeSet$AsSet:writeReplace(),711,715,"/**
* Returns a serialized form of this set.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,writeReplace,com.google.common.collect.ImmutableRangeSet:writeReplace(),866,869,"/**
* Returns a serialized form of this object.
* @return SerializedForm instance containing ranges data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,toImmutableRangeSet,com.google.common.collect.ImmutableRangeSet:toImmutableRangeSet(),73,76,"/**
* Converts a Range collection into an unordered, immutable set of ranges.
* @return ImmutableRangeSet instance containing the input ranges
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableRangeSet}. As in {@link Builder}, overlapping ranges are not permitted and adjacent
   * ranges will be merged.
   *
   * @since 23.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:<init>(),661,663,"/**
* Initializes EmptySetBuilder with default capacity (0).",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:<init>(int),728,733,"/**
* Initializes a Regular Set builder with specified capacity.
* @param expectedCapacity anticipated number of elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$RegularSetBuilderImpl),735,741,"/**
* Copies and initializes RegularSetBuilderImpl from existing instance.
* @param toCopy the instance to copy settings from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,writeReplace,com.google.common.collect.ImmutableSet:writeReplace(),418,422,"/**
* Creates a serialized form of the object.
* @return SerializedForm object containing array data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,toImmutableSet,com.google.common.collect.ImmutableSet:toImmutableSet(),71,73,"/**
* Converts an input stream into an immutable set. 
* @return ImmutableSet collector
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableSet}. Elements appear in the resulting set in the encounter order of the stream; if
   * the stream contains duplicates (according to {@link Object#equals(Object)}), only the first
   * duplicate in encounter order will appear in the result.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,delegateCollection,com.google.common.collect.ImmutableSortedAsList:delegateCollection(),38,41,"/**
* Returns the underlying collection of this set.
* @return an immutable sorted set containing all elements in this set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,<init>,"com.google.common.collect.ImmutableSortedMap:<init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList)",764,766,"/**
* Constructs an immutable sorted map from a given set of keys and list of values.
* @param keySet ordered set of unique keys
* @param valueList list of values corresponding to the keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,forEach,com.google.common.collect.ImmutableSortedMap:forEach(java.util.function.BiConsumer),782,789,"/**
* Iterates over the map entries and applies a given consumer function.
* @param action BiConsumer to be applied to each entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,isPartialView,com.google.common.collect.ImmutableSortedMap:isPartialView(),797,800,"/**
* Checks if this data structure contains a partial view.
* @return true if either key set or value list is a partial view, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,firstEntry,com.google.common.collect.ImmutableSortedMap:firstEntry(),1071,1074,"/**
* Retrieves the first entry in the map.
* @return The first entry or null if the map is empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lastEntry,com.google.common.collect.ImmutableSortedMap:lastEntry(),1076,1079,"/**
* Retrieves the last entry from the map.
* @return The last Entry object or null if the map is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,comparator,com.google.common.collect.ImmutableSortedMap:comparator(),904,907,"/**
* Returns a comparator for this map's keys based on their natural ordering.
* @return A Comparator instance or null if not found
*/","* Returns the comparator that orders the keys, which is {@link Ordering#natural()} when the
   * natural ordering of the keys is used. Note that its behavior is not consistent with {@link
   * TreeMap#comparator()}, which returns {@code null} to indicate natural ordering.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,writeReplace,com.google.common.collect.ImmutableSortedMultiset:writeReplace(),596,600,"/**
* Serializes object into a SerializedForm instance. 
* @return Serialized form of this object",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,add,com.google.common.collect.ImmutableSortedSet$Builder:add(java.lang.Object),497,521,"/**
* Adds an element to the collection, potentially expanding capacity and sorting.
* @param element the element to add
* @return this Builder instance for method chaining
*/","* Adds {@code element} to the {@code ImmutableSortedSet}. If the {@code ImmutableSortedSet}
     * already contains {@code element}, then {@code add} has no effect. (only the previously added
     * element is retained).
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,writeReplace,com.google.common.collect.ImmutableSortedSet:writeReplace(),881,885,"/**
* Returns a serialized form of this object.
* @return SerializedForm containing comparator and array data.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,unsafeCompare,"com.google.common.collect.ImmutableSortedSet:unsafeCompare(java.lang.Object,java.lang.Object)",599,601,"/**
* Performs a comparison of two objects using the provided comparator.
* @param a first object to compare
* @param b second object to compare
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,<init>,com.google.common.collect.RegularImmutableTable:<init>(),38,38,"/**
* Creates an immutable table with default values.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,<init>,"com.google.common.collect.SingletonImmutableTable:<init>(java.lang.Object,java.lang.Object,java.lang.Object)",37,41,"/**
* Initializes a new immutable table instance with the specified row key, 
* column key, and cell value.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,<init>,com.google.common.collect.Interners$InternerBuilder:<init>(),49,49,"/**
* Private constructor to prevent instantiation of this utility class.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,asFunction,com.google.common.collect.Interners:asFunction(com.google.common.collect.Interner),165,167,"/**
* Converts an interned function to a standard Java Function. 
* @param interner interned function instance
*/","* Returns a function that delegates to the {@link Interner#intern} method of the given interner.
   *
   * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toString,com.google.common.collect.Iterables:toString(java.lang.Iterable),247,249,"/**
 * Converts an Iterable to its string representation.
 * @param iterable iterable object to be converted
 */","* Returns a string representation of {@code iterable}, with the format {@code [e1, e2, ..., en]}
   * (that is, identical to {@link java.util.Arrays Arrays}{@code
   * .toString(Iterables.toArray(iterable))}). Note that for <i>most</i> implementations of {@link
   * Collection}, {@code collection.toString()} also gives the same result, but that behavior is not
   * generally guaranteed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getOnlyElement,com.google.common.collect.Iterables:getOnlyElement(java.lang.Iterable),260,263,"/**
* Returns only element from given iterable, or null if empty.
* @param iterable collection of elements to extract from
* @return single element from iterable, or null if empty
*/","* Returns the single element contained in {@code iterable}.
   *
   * <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code
   * stream.collect(MoreCollectors.onlyElement())}.
   *
   * @throws NoSuchElementException if the iterable is empty
   * @throws IllegalArgumentException if the iterable contains multiple elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,getOnlyElement,"com.google.common.collect.Iterators:getOnlyElement(java.util.Iterator,java.lang.Object)",336,340,"/**
* Recursively fetches the only element from an iterator or returns a default value.
* @param iterator iterator containing a single element
* @param defaultValue value to return if iterator is empty
* @return T element from iterator, or defaultValue if empty
*/","* Returns the single element contained in {@code iterator}, or {@code defaultValue} if the
   * iterator is empty.
   *
   * @throws IllegalArgumentException if the iterator contains multiple elements. The state of the
   *     iterator is unspecified.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,concat,"com.google.common.collect.ObjectArrays:concat(java.lang.Object[],java.lang.Object[],java.lang.Class)",72,79,"/**
* Concatenates two arrays of a specific type.
* @param first the first array to concatenate
* @param second the second array to concatenate
* @param type the type of elements in the resulting array
* @return the concatenated array or null if not possible
*/","* Returns a new array that contains the concatenated contents of two arrays.
   *
   * @param first the first array of elements to concatenate
   * @param second the second array of elements to concatenate
   * @param type the component type of the returned array",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getLast,com.google.common.collect.Iterables:getLast(java.lang.Iterable),843,855,"/**
* Retrieves the last element from an iterable, throwing a NoSuchElementException if empty.
* @param iterable collection of elements to retrieve from
* @return last element in the iterable or null if not found (if Iterable is unbounded) 
*/","* Returns the last element of {@code iterable}. If {@code iterable} is a {@link List} with {@link
   * RandomAccess} support, then this operation is guaranteed to be {@code O(1)}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Streams#findLast Streams.findLast(stream).get()}
   *
   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),
   * consider using {@code collection.getLast()} instead.
   *
   * @return the last element of {@code iterable}
   * @throws NoSuchElementException if the iterable is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,getLast,"com.google.common.collect.Iterators:getLast(java.util.Iterator,java.lang.Object)",921,925,"/**
* Recursively retrieves the last element from an iterator.
* If iteration completes without finding an element, returns a default value.
* @param iterator Iterator to traverse
* @param defaultValue Value to return if iterator is exhausted
* @return Last element from iterator or default value
*/","* Advances {@code iterator} to the end, returning the last element or {@code defaultValue} if the
   * iterator is empty.
   *
   * @param defaultValue the default value to return if the iterator is empty
   * @return the last element of {@code iterator}
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,hasNext,com.google.common.collect.Iterators$ConcatenatedIterator:hasNext(),1394,1430,"/**
* Checks if the iterator has more elements.
* @return true if there are more elements, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,emptyIterator,com.google.common.collect.Iterators:emptyIterator(),80,82,"/**
* Returns an unmodifiable iterator over an empty list.
* @return Empty iterator instance
*/","* Returns the empty iterator.
   *
   * <p>The {@link Iterable} equivalent of this method is {@link ImmutableSet#of()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,iterator,com.google.common.collect.SingletonImmutableList:iterator(),50,53,"/**
* Returns an unmodifiable iterator over the single element in this collection.
* @return iterator over the contained object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableSet.java,iterator,com.google.common.collect.SingletonImmutableSet:iterator(),55,58,"/**
* Returns an unmodifiable iterator over this collection's elements.
* @return Iterator instance wrapping the single element in this collection
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,newHeader,com.google.common.collect.LinkedHashMultimap$ValueEntry:newHeader(),211,214,"/**
* Creates a new empty ValueEntry with default values.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,forEach,com.google.common.collect.LinkedHashMultimap$ValueSet:forEach(java.util.function.Consumer),452,460,"/**
* Iterates over all entries in the value set and applies a given consumer action to each value.
* @param action Consumer function to apply to each value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,rehashIfNecessary,com.google.common.collect.LinkedHashMultimap$ValueSet:rehashIfNecessary(),503,519,"/**
* Rehashes the hash table if it needs resizing based on current size and load factor. 
* @see Hashing#needsResizing(int, int, double)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,clear,com.google.common.collect.LinkedHashMultimap$ValueSet:clear(),547,559,"/**
* Clears the multimap by resetting hash table and removing all entries.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,deleteFromValueSet,com.google.common.collect.LinkedHashMultimap:deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink),148,151,"/**
* Removes an entry from a value set.
* @param entry ValueSetLink object to be removed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,succeedsInMultimap,"com.google.common.collect.LinkedHashMultimap:succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry)",142,146,"/**
* Establishes a successor relationship in a multimap.
* @param pred predecessor entry
* @param succ successor entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,entrySpliterator,com.google.common.collect.LinkedHashMultimap:entrySpliterator(),593,596,"/**
* Returns a spliterator over entries in this map.
* @return Spliterator of distinct and ordered entries.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,writeObject,com.google.common.collect.LinkedHashMultimap:writeObject(java.io.ObjectOutputStream),618,631,"/**
* Serializes the map's state to the output stream.
* @throws IOException if serialization fails
*/","* @serialData the expected values per key, the number of distinct keys, the number of entries,
   *     and the entries in order",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,valueIterator,com.google.common.collect.LinkedHashMultimap:valueIterator(),598,601,"/**
* Returns an iterator over values in this map.
* @return iterator over values or empty if none exist
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,hasNext,com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:hasNext(),426,430,"/**
* Checks for concurrent modification and returns whether there's a next element.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,next,com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:next(),432,445,"/**
* Fetches the next unique key from the iteration collection.
* @return K key or throws NoSuchElementException if exhausted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,remove,com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:remove(),447,454,"/**
* Removes the current node and updates internal state.
*@throws ConcurrentModificationException if modifications occur concurrently
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,addNode,"com.google.common.collect.LinkedListMultimap:addNode(java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node)",198,249,"/**
* Adds a new Node to the multimap, updating key lists and counts.
* @param key unique key identifier
* @param value associated value
* @param nextSibling existing sibling node (null for append)
* @return newly added Node","* Adds a new node for the specified key-value pair before the specified {@code nextSibling}
   * element, or at the end of the list if {@code nextSibling} is null. Note: if {@code nextSibling}
   * is specified, it MUST be for a node for the same {@code key}!",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,hasNext,com.google.common.collect.LinkedListMultimap$NodeIterator:hasNext(),334,338,"/**
* Checks existence of next element in iteration.
* @return true if next element exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,next,com.google.common.collect.LinkedListMultimap$NodeIterator:next(),340,351,"/**
* Advances the iterator to the next node and returns it.
* @return Node object or throws NoSuchElementException if at end
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,remove,com.google.common.collect.LinkedListMultimap$NodeIterator:remove(),353,366,"/**
* Removes the current node from iteration.
* @throws ConcurrentModificationException if concurrently modified
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,hasPrevious,com.google.common.collect.LinkedListMultimap$NodeIterator:hasPrevious(),368,372,"/**
* Checks if there is a previous item in the iteration.
* @return true if previous item exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,previous,com.google.common.collect.LinkedListMultimap$NodeIterator:previous(),374,385,"/**
* Retrieves the preceding node in a sequence.
* @return Node object or throws exception if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,charactersOf,com.google.common.collect.Lists:charactersOf(java.lang.CharSequence),762,764,"/**
* Converts CharSequence into a list of individual characters.
* @param sequence input character sequence
*/","* Returns a view of the specified {@code CharSequence} as a {@code List<Character>}, viewing
   * {@code sequence} as a sequence of Unicode code units. The view does not support any
   * modification operations, but reflects any changes to the underlying character sequence.
   *
   * @param sequence the character sequence to view as a {@code List} of characters
   * @return an {@code List<Character>} view of the character sequence
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$RandomAccessPartition:<init>(java.util.List,int)",739,741,"/**
* Initializes a new random-access partition from the given list with specified size.
* @param list collection to be split
* @param size number of elements in this partition
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,indexOfImpl,"com.google.common.collect.Lists:indexOfImpl(java.util.List,java.lang.Object)",1065,1077,"/**
* Searches for an element in a list using optimal algorithm based on implementation.
* @param list the list to search
* @param element the object to find (may be null)
* @return index of the element if found, or -1 otherwise
*/",An implementation of {@link List#indexOf(Object)}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,lastIndexOfImpl,"com.google.common.collect.Lists:lastIndexOfImpl(java.util.List,java.lang.Object)",1098,1110,"/**
* Searches for the last occurrence of an element in a list.
* @param list the list to search
* @param element the object to find
* @return index of last occurrence or -1 if not found",An implementation of {@link List#lastIndexOf(Object)}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,delegate,com.google.common.collect.ForwardingConcurrentMap:delegate(),46,47,"/**
 * Returns an instance of a concurrent map to be used by this cache. 
 * This method should be overridden to provide a specific implementation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry:<init>(java.lang.Object,int)",584,586,"/**
* Constructs a StrongKeyDummyValueEntry with given key and hash code.
* @param key key object
* @param hash hash value of the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry:<init>(java.lang.Object,int)",394,396,"/**
* Constructs a new StrongKeyStrongValueEntry with the specified key and hash.
* @param key the entry's key
* @param hash the entry's hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)",696,698,"/**
* Constructs a WeakKeyDummyValueEntry with the given reference queue and key.
* @param queue reference queue for garbage collection
* @param key unique identifier of the entry's key
* @param hash hash value of the key",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)",787,789,"/**
* Constructs a weak key-strong value entry with the specified queue and key.
* @param queue reference queue
* @param key unique key object
* @param hash key hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsValue,com.google.common.collect.MapMakerInternalMap:containsValue(java.lang.Object),2385,2421,"/**
* Checks if the map contains a specified value.
* @param value object to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isEmpty,com.google.common.collect.MapMakerInternalMap$EntrySet:isEmpty(),2776,2779,"/**
* Checks if map is empty.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isEmpty,com.google.common.collect.MapMakerInternalMap$KeySet:isEmpty(),2688,2691,"/**
* Checks if the map is empty.
* @return true if map is empty, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isEmpty,com.google.common.collect.MapMakerInternalMap$Values:isEmpty(),2722,2725,"/**
* Checks if this map is empty.
* @return true if map is empty, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,nextInTable,com.google.common.collect.MapMakerInternalMap$HashIterator:nextInTable(),2577,2586,"/**
* Iterates through the table, advancing to the next entry if available.
* @return true if a valid entry was found and advanced to, false otherwise
*/",Finds the next entry in the current table. Returns {@code true} if an entry was found.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,expand,com.google.common.collect.MapMakerInternalMap$Segment:expand(),1556,1622,"/**
* Expands the hash table to twice its current capacity.
* @GuardedBy(""this"")
*/",Expands the table if possible.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$Segment:<init>(com.google.common.collect.MapMakerInternalMap,int)",1234,1237,"/**
* Initializes a new table with specified capacity.
* @param map internal map object
* @param initialCapacity starting size of the table
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,tryDrainReferenceQueues,com.google.common.collect.MapMakerInternalMap$Segment:tryDrainReferenceQueues(),1362,1370,"/**
* Tries to drain reference queues while holding lock.
*/",Cleanup collected entries when the lock is available.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,runLockedCleanup,com.google.common.collect.MapMakerInternalMap$Segment:runLockedCleanup(),2007,2016,"/**
* Performs locked cleanup of reference queues and resets read count.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$Segment:clear(),1794,1811,"/**
* Clears the concurrent collection by resetting its internal state.
* @throws No such operation, this method does not return any value. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)",652,661,"/**
* Creates a new entry for the given key and hash.
* @param segment associated segment
* @param key unique identifier
* @param hash hash value
* @param next optional previous entry (null if first)
* @return StrongKeyDummyValueEntry instance or linked entry if not first",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)",467,476,"/**
* Creates a new entry in the segment.
* @param key unique key value
* @param hash associated hash code
* @param next optional reference to next entry
* @return New StrongKeyStrongValueEntry object or Linked version if next is set.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)",566,575,"/**
* Creates a new entry for the specified segment with the given key and hash.
* @param segment  Segment to associate the entry with
* @param key      Unique key value
* @param hash     Hash code of the key
* @param next     Optional next entry in the linked list (null if not linking)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry:<init>(java.lang.Object,int)",487,489,"/**
* Constructs a new StrongKeyWeakValueEntry instance.
* @param key strong key object
* @param hash hash value of the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)",882,884,"/**
* Constructs a new weak key/weak value entry with the given reference queue and key.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)",2078,2082,"/**
* Creates a weak value reference for testing purposes.
* @param e internal entry to be referenced
* @param value the value associated with the entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,setWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",2084,2095,"/**
* Updates the weak value reference for a given internal entry.
* @param e internal entry to update
* @param valueReference new weak reference to set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getWeakValueReferenceForTesting,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry),2072,2076,"/**
* Returns a weak value reference for the given internal entry.
* @param e internal entry to retrieve reference from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry)",751,762,"/**
* Creates a copy of the given WeakKeyDummyValueEntry.
* @param segment segment to associate with the copied entry
* @param entry original entry to copy
* @param newNext new next entry in the list (optional)
* @return copied WeakKeyDummyValueEntry or null if key is null",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getValue,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$LinkedWeakKeyDummyValueEntry:getValue(),700,703,"/**
* Returns the constant dummy value.
* @return Constant Dummy object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)",841,854,"/**
* Creates a copy of the given weak key strong value entry.
* @param segment the parent segment
* @param entry the original entry to copy
* @param newNext the new next entry (optional)
* @return copied WeakKeyStrongValueEntry or null if key is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)",2209,2213,"/**
* Creates a weak reference for testing purposes.
* @param e internal entry to be referenced
* @param value associated value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,setWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",2215,2226,"/**
* Updates the weak reference for a specific internal entry.
* @param e InternalEntry to update
* @param valueReference new weak reference to set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getWeakValueReferenceForTesting,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry),2203,2207,"/**
* Retrieves a weak value reference for testing purposes.
* @param e internal entry to retrieve reference from
* @return WeakValueReference object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isLiveForTesting,com.google.common.collect.MapMakerInternalMap:isLiveForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry),1128,1131,"/**
* Checks if an internal entry is live for testing purposes.
* @param entry InternalEntry object to check
*/","* This method is a convenience for testing. Code should call {@link Segment#getLiveValue}
   * instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,hash,com.google.common.collect.MapMakerInternalMap:hash(java.lang.Object),1108,1111,"/**
* Rehashes the hash code of an object using keyEquivalence.
* @param key object to be hashed
* @return rehashed integer hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredKeyMap:<init>(java.util.Map,com.google.common.base.Predicate,com.google.common.base.Predicate)",2975,2981,"/**
* Creates a filtered key map with the specified key and entry predicates.
* @param unfiltered original map to filter
* @param keyPredicate predicate for filtering keys
* @param entryPredicate predicate for filtering entries (inherited from superclass)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createKeySet,com.google.common.collect.Maps$AsMapView:createKeySet(),896,899,"/**
* Creates a set of keys from the backing set.
*@return Set of keys or an empty set if no keys exist.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,size,com.google.common.collect.Maps$AsMapView:size(),906,909,"/**
* Returns the number of elements in this collection.
* @return Size of the underlying set.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsKey,com.google.common.collect.Maps$AsMapView:containsKey(java.lang.Object),911,914,"/**
* Checks if the map contains a specified key.
* @param key object to search for in the map
* @return true if the key exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$AsMapView:remove(java.lang.Object),932,941,"/**
* Removes an entry from the backing set and applies a function to the removed key.
* @param key object to remove, or null to remove all entries
* @return result of applying function to removed key, or null if nothing was removed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$AsMapView:clear(),943,946,"/**
 * Clears all elements from the underlying set.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$AsMapView:forEach(java.util.function.BiConsumer),965,970,"/**
* Iterates over the map's key-value pairs and applies a given consumer.
* @param action BiConsumer to process each entry; must not be null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,backingSet,com.google.common.collect.Maps$SortedAsMapView:backingSet(),990,993,"/**
* Returns the underlying sorted set that backs this collection.
* @return SortedSet object containing all elements in this collection
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entryIterator,com.google.common.collect.Maps$NavigableAsMapView:entryIterator(),1095,1098,"/**
* Returns an iterator over the entries in the map.
* @return Iterator containing key-value pairs or null if the map is empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,iterator,com.google.common.collect.Multimaps$AsMap$EntrySet:iterator(),1904,1907,"/**
* Returns an iterator over entries in the multimap.
* @return Iterator of key-value pairs where each value is a collection of associated values.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,iterator,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:iterator(),919,922,"/**
* Returns an iterator over table entries.
* @return Iterator of map entries (key-value pairs) for each column and row.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,iterator,com.google.common.collect.StandardTable$RowMap$EntrySet:iterator(),839,842,"/**
* Returns an iterator over entries in the backing map.
* @return Entries are of type {R, Map<C, V>} where R is the row key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySet,com.google.common.collect.Maps$DescendingMap:entrySet(),4383,4387,"/**
* Returns a set of map entries.
* @return Set of key-value pairs in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$DescendingMap:subMap(java.lang.Object,java.lang.Object)",4434,4437,"/**
* Returns a sorted map containing all entries between the specified keys (inclusive).
* @param fromKey starting key
* @param toKey ending key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$DescendingMap:headMap(java.lang.Object),4444,4447,"/**
* Returns a sorted map containing all key-value pairs up to but not including the specified key.
* @param toKey the upper bound of the map (inclusive)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$DescendingMap:tailMap(java.lang.Object),4454,4457,"/**
* Returns a view of this map's portion of the range [fromKey, toEnd).
* @param fromKey starting key for the view
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:removeAll(java.util.Collection),955,965,"/**
* Removes all elements from the set that are present in the given collection.
* @param c collection of elements to remove
* @return true if any elements were removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forcePut,"com.google.common.collect.Maps$FilteredEntryBiMap:forcePut(java.lang.Object,java.lang.Object)",3387,3391,"/**
* Forces a put operation with the given key-value pair.
* @param key unique identifier
* @param value associated value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,replaceAll,com.google.common.collect.Maps$FilteredEntryBiMap:replaceAll(java.util.function.BiFunction),3393,3401,"/**
* Applies a transformation function to each entry in the map based on a predicate filter.
* @param function transformation function to apply
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeAll,com.google.common.collect.Maps$FilteredEntryMap$KeySet:removeAll(java.util.Collection),3098,3101,"/**
 * Removes all elements from this set that are contained in the specified collection.
 * @param collection collection of elements to remove
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,retainAll,com.google.common.collect.Maps$FilteredEntryMap$KeySet:retainAll(java.util.Collection),3103,3106,"/**
* Retains all keys from the specified collection.
* @param collection Collection of keys to filter by
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:comparator(),3147,3150,"/**
* Returns the comparator used to order this map's keys.
* @return Comparator instance or null if not sorted by key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$FilteredEntrySortedMap:comparator(),3181,3184,"/**
* Returns the comparator used to order keys in this map.
* @return Comparator object or null if not set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastKey,com.google.common.collect.Maps$FilteredEntrySortedMap:lastKey(),3193,3206,"/**
* Iteratively searches for the last key in the map that satisfies a predicate.
* @return the last matching key or null if none found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstKey,com.google.common.collect.Maps$FilteredEntrySortedMap:firstKey(),3186,3191,"/**
* Retrieves the first key from this map.
* @return The first key; null if map is empty.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,iterator,com.google.common.collect.Maps$KeySet:iterator(),3926,3929,"/**
* Returns an iterator over the keys in this map.
* @return Iterator of unique keys in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,size,com.google.common.collect.Maps$KeySet:size(),3938,3941,"/**
* Returns the number of elements in this collection.
* @return Count of elements in the underlying map.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,isEmpty,com.google.common.collect.Maps$KeySet:isEmpty(),3943,3946,"/**
* Checks if the underlying data structure is empty.
* @return true if empty, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,contains,com.google.common.collect.Maps$KeySet:contains(java.lang.Object),3948,3951,"/**
* Checks if the map contains a specific key.
* @param o object to search for (key)
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$KeySet:clear(),3962,3965,"/**
* Clears all entries from the internal cache map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,map,com.google.common.collect.Maps$SortedKeySet:map(),3982,3985,"/**
* Returns a sorted map view of this backing map.
* @return SortedMap view of underlying map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$SortedMapDifferenceImpl:<init>(java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap)",752,758,"/**
* Creates a difference object for two sorted maps.
* @param onlyOnLeft elements present in the left map but not in the right
* @param onlyOnRight elements present in the right map but not in the left
* @param onBoth elements common to both input maps
* @param differences key-value pairs where values differ between maps",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toString,com.google.common.collect.Maps$MapDifferenceImpl:toString(),682,699,"/**
* Returns a string representation of the comparison results.
* @return detailed status message or ""equal"" if identical
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesOnlyOnLeft,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesOnlyOnLeft(),770,773,"/**
* Returns a view of entries only on the left side.
* @return a sorted map containing all entries from the left subtree. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesOnlyOnRight,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesOnlyOnRight(),775,778,"/**
* Returns a sorted map containing only entries from this map's right sub-tree.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesInCommon,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesInCommon(),765,768,"/**
* Returns common entries between this map and its parent.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,equals,com.google.common.collect.Maps$MapDifferenceImpl:equals(java.lang.Object),661,674,"/**
* Compares this map difference with another for equality.
* @param object the other object to compare
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,hashCode,com.google.common.collect.Maps$MapDifferenceImpl:hashCode(),676,680,"/**
* Calculates and returns hash code based on distinct entry counts.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesDiffering,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesDiffering(),760,763,"/**
* Returns a sorted map of differing key-value pairs.
* @return SortedMap of differences between this and parent map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lower,com.google.common.collect.Maps$NavigableKeySet:lower(java.lang.Object),4032,4035,"/**
* Returns the lowest key in this map that is greater than or equal to the given key.
* @param e key to find the lower bound for
* @return the lower bound key, or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,floor,com.google.common.collect.Maps$NavigableKeySet:floor(java.lang.Object),4037,4040,"/**
* Fetches the floor key from the underlying map.
* @param e The key to find the floor of
* @return The floor key or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,ceiling,com.google.common.collect.Maps$NavigableKeySet:ceiling(java.lang.Object),4042,4045,"/**
* Returns the smallest key in this map that is greater than or equal to the given value.
* @param e the reference object whose key should be returned
* @return the smallest key, null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,higher,com.google.common.collect.Maps$NavigableKeySet:higher(java.lang.Object),4047,4050,"/**
* Returns the highest key in the map based on natural ordering. 
* @param e object to find the highest key for, or null if none exists */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollFirst,com.google.common.collect.Maps$NavigableKeySet:pollFirst(),4052,4055,"/**
* Retrieves and removes the first entry from the map, returning its associated key.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollLast,com.google.common.collect.Maps$NavigableKeySet:pollLast(),4057,4060,"/**
* Retrieves and removes the last entry from the map.
* @return The polled key or null if the map is empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingSet,com.google.common.collect.Maps$NavigableKeySet:descendingSet(),4062,4065,"/**
* Returns a set of keys in descending order.
* @return Set of keys in descending order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$NavigableKeySet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",4072,4079,"/**
* Retrieves a navigable set of keys within the specified range.
* @param fromElement start key (inclusive or exclusive)
* @param fromInclusive true if start is inclusive
* @param toElement end key (inclusive or exclusive)
* @param toInclusive true if end is inclusive
* @return NavigableSet of keys in the specified range",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,"com.google.common.collect.Maps$NavigableKeySet:headSet(java.lang.Object,boolean)",4086,4089,"/**
* Returns a navigable set of keys less than the given element.
* @param toElement key to bound the set
* @param inclusive whether to include the bound element
* @return NavigableSet of keys or empty set if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,"com.google.common.collect.Maps$NavigableKeySet:tailSet(java.lang.Object,boolean)",4096,4099,"/**
* Returns a set of keys greater than or equal to the specified element.
* @param fromElement key to start from
* @param inclusive true if including the fromElement in the set, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,fromMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:fromMap(),2389,2392,"/**
* Returns a navigable map representation of this collection.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$TransformedEntriesSortedMap:comparator(),2232,2235,"/**
* Returns a comparator for the key type based on the underlying map. 
* @return Comparator object or null if not available 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstKey,com.google.common.collect.Maps$TransformedEntriesSortedMap:firstKey(),2237,2241,"/**
* Returns the first key in this map.
* @return first key or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastKey,com.google.common.collect.Maps$TransformedEntriesSortedMap:lastKey(),2248,2252,"/**
* Retrieves the last key in the map.
* @return Last key value or null if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,delegate,com.google.common.collect.ForwardingSortedMap:delegate(),65,66,"/**
* Returns an abstract sorted map implementation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,create,"com.google.common.collect.Maps$ValueDifferenceImpl:create(java.lang.Object,java.lang.Object)",707,710,"/**
* Creates a ValueDifference instance from two values.
* @param left first value
* @param right second value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,iterator,com.google.common.collect.Maps$Values:iterator(),4119,4122,"/**
* Returns an iterator over the values in the map.
* @return iterator over collection of values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$Values:remove(java.lang.Object),4131,4144,"/**
* Removes an object from the map or its value if not found.
* @param o object to remove
* @return true if removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,size,com.google.common.collect.Maps$Values:size(),4176,4179,"/**
* Returns the number of elements in this collection.
* @return The size of this collection.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,isEmpty,com.google.common.collect.Maps$Values:isEmpty(),4181,4184,"/**
* Checks if this collection is empty.
* @return true if the backing map is empty, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,contains,com.google.common.collect.Maps$Values:contains(java.lang.Object),4186,4189,"/**
* Checks if the map contains a specific value.
* @param o the object to search for (may be null)
* @return true if the map contains the object, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$Values:clear(),4191,4194,"/**
 * Clears all entries from the underlying map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeAll,com.google.common.collect.Maps$Values:removeAll(java.util.Collection),4146,4159,"/**
* Removes all entries from the map that have a value in the specified collection.
* @param c Collection of values to remove
* @return true if any entries were removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,retainAll,com.google.common.collect.Maps$Values:retainAll(java.util.Collection),4161,4174,"/**
* Retains all keys present in the provided collection.
* @param c Collection of values to retain
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,<init>,com.google.common.eventbus.SubscriberRegistry:<init>(com.google.common.eventbus.EventBus),69,71,"/**
* Initializes SubscriberRegistry with the provided EventBus instance.
* @param bus EventBus object to register subscribers with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,<init>,com.google.common.collect.TreeRangeMap:<init>(),89,91,"/**
* Initializes an empty TreeRangeMap instance with a backing TreeMap.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newIdentityHashSet,com.google.common.collect.Sets:newIdentityHashSet(),453,455,"/**
* Creates an empty set with unique elements, using identity comparison.
*/","* Creates an empty {@code Set} that uses identity to determine equality. It compares object
   * references, instead of calling {@code equals}, to determine whether a provided object matches
   * an element in the set. For example, {@code contains} returns {@code false} when passed an
   * object that equals a set member, but isn't the same instance. This behavior is similar to the
   * way {@code IdentityHashMap} handles key lookups.
   *
   * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,synchronizedBiMap,com.google.common.collect.Maps:synchronizedBiMap(com.google.common.collect.BiMap),1678,1682,"/**
* Wraps a BiMap instance with synchronization.
* @param bimap the input BiMap to synchronize
*/","* Returns a synchronized (thread-safe) bimap backed by the specified bimap. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing bimap is accomplished
   * through the returned bimap.
   *
   * <p>It is imperative that the user manually synchronize on the returned map when accessing any
   * of its collection views:
   *
   * {@snippet :
   * BiMap<Long, String> map = Maps.synchronizedBiMap(
   *     HashBiMap.<Long, String>create());
   * ...
   * Set<Long> set = map.keySet();  // Needn't be in synchronized block
   * ...
   * synchronized (map) {  // Synchronizing on map, not set!
   *   Iterator<Long> it = set.iterator(); // Must be in synchronized block
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned bimap will be serializable if the specified bimap is serializable.
   *
   * @param bimap the bimap to be wrapped in a synchronized view
   * @return a synchronized view of the specified bimap",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keyPredicateOnEntries,com.google.common.collect.Maps:keyPredicateOnEntries(com.google.common.base.Predicate),2395,2398,"/**
* Creates a predicate that filters entries based on a given key predicate.
* @param keyPredicate predicate to evaluate against entry keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,compareElements,"com.google.common.collect.MinMaxPriorityQueue$Heap:compareElements(int,int)",530,532,"/**
* Compares two elements based on their data.
* @param a first element to compare
* @param b second element to compare
* @return negative/positive value if a < b or a > b, 0 otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,peek,com.google.common.collect.MinMaxPriorityQueue:peek(),318,321,"/**
* Retrieves but does not remove the first element of this collection.
* @return first element or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,getGrandparentIndex,com.google.common.collect.MinMaxPriorityQueue$Heap:getGrandparentIndex(int),760,762,"/**
* Calculates grandparent index from child index.
* @param i child index, which is (grandparent index * 4) + 3
* @return grandparent index or -1 if invalid input
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,crossOverUp,"com.google.common.collect.MinMaxPriorityQueue$Heap:crossOverUp(int,java.lang.Object)",634,664,"/**
* Swaps the element at the given index with its parent if necessary to maintain heap order.
* @param index position of the element to potentially swap
* @param x new value for the element at index
* @return updated index of the swapped element
*/","* Moves an element one level up from a min level to a max level (or vice versa). Returns the
     * new position of the element.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,swapWithConceptuallyLastElement,com.google.common.collect.MinMaxPriorityQueue$Heap:swapWithConceptuallyLastElement(java.lang.Object),679,694,"/**
* Swaps the given element with the conceptually last element in the queue.
* @param actualLastElement the element to swap
* @return the index of the swapped element or queue size if no swap occurred
*/","* Swap {@code actualLastElement} with the conceptually correct last element of the heap.
     * Returns the index that {@code actualLastElement} now resides in.
     *
     * <p>Since the last element of the array is actually in the middle of the sorted structure, a
     * childless aunt node could be smaller, which would corrupt the invariant if this element
     * becomes the new parent of the aunt node. In that case, we first switch the last element with
     * its aunt node, before returning.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,nextNotInSkipMe,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:nextNotInSkipMe(int),869,878,"/**
* Advances the cursor to the first element not skipped.
* @param c minimum index to check
*/","* Advances nextCursor to the index of the first element after {@code c} that is not in {@code
     * skipMe} and returns {@code size()} if there is no such element.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,initialQueueSize,"com.google.common.collect.MinMaxPriorityQueue:initialQueueSize(int,int,java.lang.Iterable)",939,956,"/**
* Calculates the initial queue size based on configured expectations and contents.
* @param configuredExpectedSize expected size (UNSET_EXPECTED_SIZE if unspecified)
* @param maximumSize maximum allowed size
* @param initialContents initial data to accommodate
* @return calculated initial queue size
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,add,com.google.common.collect.MoreCollectors$ToOptionalState:add(java.lang.Object),117,130,"/**
* Adds an object to the collection, replacing existing element if present.
* @param o Object to be added
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,combine,com.google.common.collect.MoreCollectors$ToOptionalState:combine(com.google.common.collect.MoreCollectors$ToOptionalState),132,150,"/**
* Merges two ToOptionalState instances into one.
* @param other the state to combine with
* @return combined state or original if null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,getOptional,com.google.common.collect.MoreCollectors$ToOptionalState:getOptional(),152,158,"/**
* Returns an optional value based on whether extras are empty or not.
* If extras are empty, returns the element as an optional; otherwise, throws a MultipleValueException. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,getElement,com.google.common.collect.MoreCollectors$ToOptionalState:getElement(),160,168,"/**
* Returns the current element, throwing an exception if it's missing or there are extras. 
* @return the current element object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,build,com.google.common.collect.MultimapBuilder$ListMultimapBuilder:build(com.google.common.collect.Multimap),439,443,"/**
* Builds a ListMultimap instance from the provided multimap.
* @param multimap source multimap to build from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,build,com.google.common.collect.MultimapBuilder$SetMultimapBuilder:build(com.google.common.collect.Multimap),459,463,"/**
* Builds a SetMultimap instance from an existing Multimap.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:<init>(),474,474,"/**
* Initializes an empty multimap with sorted keys. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,com.google.common.collect.Multimaps$AsMap$EntrySet:remove(java.lang.Object),1909,1918,"/**
* Removes an object from the collection by key.
* @param o the object to remove (must be a Map.Entry)
* @return true if removed, false if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$AsMap:get(java.lang.Object),1921,1925,"/**
* Retrieves a collection of associated values by unique key.
* @param key unique identifier (may be null)
* @return Collection of associated values or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,com.google.common.collect.Multimaps$AsMap:remove(java.lang.Object),1927,1930,"/**
* Removes all values associated with the given key from the multimap.
* @param key object to search for in the multimap
* @return collection of removed values or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,delegate,com.google.common.collect.Multimaps$UnmodifiableListMultimap:delegate(),799,802,"/**
* Returns a list multimap delegation, wrapping superclass result.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,delegate,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:delegate(),829,832,"/**
* Returns a multimap instance with a set as its backing map. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,remove,"com.google.common.collect.Multisets$FilteredMultiset:remove(java.lang.Object,int)",381,389,"/**
* Removes a specified element with the given occurrences from this collection.
* @param element object to remove
* @param occurrences number of occurrences to remove (must be non-negative)
* @return actual number of elements removed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iteratorImpl,com.google.common.collect.Multisets:iteratorImpl(com.google.common.collect.Multiset),1061,1063,"/**
* Creates an iterator over the elements of a multiset.
* @param multiset The multiset to iterate over
*/",An implementation of {@link Multiset#iterator}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,next,com.google.common.collect.Multisets$MultisetIteratorImpl:next(),1088,1105,"/**
* Retrieves the next element from the iterator.
* @return E the next element or throws NoSuchElementException if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,elementSet,com.google.common.collect.Multisets$UnmodifiableMultiset:elementSet(),151,155,"/**
* Returns a set of elements in this collection, lazily initialized if necessary.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,delegate,com.google.common.collect.UnmodifiableSortedMultiset:delegate(),44,47,"/**
* Delegates to superclass to retrieve sorted multiset. 
* @return SortedMultiset instance or subclass implementation.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,delegate,com.google.common.collect.ForwardingMultiset:delegate(),56,57,"/**
* Returns a multiset delegate instance.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,delegate,com.google.common.collect.MutableClassToInstanceMap$2:delegate(),79,82,"/**
* Returns a map of delegates by class type.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,writeReplace,com.google.common.collect.MutableClassToInstanceMap:writeReplace(),186,188,"/**
* Returns an object that can be serialized to replace this instance.
* @return SerializedForm containing data from delegate()
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,newArray,"com.google.common.collect.ObjectArrays:newArray(java.lang.Object[],int)",61,63,"/**
* Creates a new array of specified size with optional type parameter.
* @param reference existing array to copy from (optional)
* @param length desired size of the new array
* @return new array or null if not created (rare edge case)
*/","* Returns a new array of the given length with the same type as a reference array.
   *
   * @param reference any array of the desired type
   * @param length the length of the new array",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,toArrayImpl,com.google.common.collect.ObjectArrays:toArrayImpl(java.util.Collection),180,182,"/**
* Converts collection to an array.
* @param c the input collection
* @return object array containing all elements or null if collection is empty
*/","* Returns an array containing all of the elements in the specified collection. This method
   * returns the elements in the order they are returned by the collection's iterator. The returned
   * array is ""safe"" in that no references to it are maintained by the collection. The caller is
   * thus free to modify the returned array.
   *
   * <p>This method assumes that the collection size doesn't change while the method is running.
   *
   * <p>TODO(kevinb): support concurrently modified collections?
   *
   * @param c the collection for which to return an array of elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,checkElementsNotNull,"com.google.common.collect.ObjectArrays:checkElementsNotNull(java.lang.Object[],int)",219,225,"/**
* Verifies all elements in the given array are not null.
* @param array array to validate
* @param length number of elements to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,compare,"com.google.common.collect.Ordering$ArbitraryOrdering:compare(java.lang.Object,java.lang.Object)",355,376,"/**
* Compares two objects using their identity hash codes and UIDs.
* @param left the first object to compare
* @param right the second object to compare
* @return a negative value if left is less than right, 0 if equal, or positive value if right is greater
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,min,com.google.common.collect.Ordering:min(java.util.Iterator),561,571,"/**
* Finds the minimum element in an iterable sequence.
* @param iterator input iterator of elements to compare
* @return smallest element or null if iterator is empty
*/","* Returns the least of the specified values according to this ordering. If there are multiple
   * least values, the first of those is returned. The iterator will be left exhausted: its {@code
   * hasNext()} method will return {@code false}.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).min(thisComparator).get()} instead
   * (but note that it does not guarantee which tied minimum element is returned).
   *
   * @param iterator the iterator whose minimum element is to be determined
   * @throws NoSuchElementException if {@code iterator} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,max,"com.google.common.collect.ReverseOrdering:max(java.lang.Object,java.lang.Object)",72,75,"/**
* Returns the maximum of two elements with type parameter E.
* @param a first element to compare
* @param b second element to compare
* @return maximum element or null if both are null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,max,com.google.common.collect.Ordering:max(java.util.Iterator),652,662,"/**
* Finds the maximum element from an iterable.
* @param iterator iterator over elements of type E
* @return maximum element or null if empty
*/","* Returns the greatest of the specified values according to this ordering. If there are multiple
   * greatest values, the first of those is returned. The iterator will be left exhausted: its
   * {@code hasNext()} method will return {@code false}.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).max(thisComparator).get()} instead
   * (but note that it does not guarantee which tied maximum element is returned).
   *
   * @param iterator the iterator whose maximum element is to be determined
   * @throws NoSuchElementException if {@code iterator} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,encloseAll,com.google.common.collect.Range:encloseAll(java.lang.Iterable),304,322,"/**
* Encloses all values in the specified iterable within a Range.
* @param values Iterable of Comparable elements
*/","* Returns the minimal range that {@linkplain Range#contains(Comparable) contains} all of the
   * given values. The returned range is {@linkplain BoundType#CLOSED closed} on both ends.
   *
   * @throws ClassCastException if the values are not mutually comparable
   * @throws NoSuchElementException if {@code values} is empty
   * @throws NullPointerException if any of {@code values} is null
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,min,"com.google.common.collect.ReverseOrdering:min(java.lang.Object,java.lang.Object)",51,54,"/**
* Returns minimum element between two values based on their order in the collection.
* @param a first value to compare
* @param b second value to compare
* @return minimum value, or null if both are null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newConcurrentHashSet,com.google.common.collect.Sets:newConcurrentHashSet(),279,281,"/**
 * Creates an empty concurrent hash set.
 */","* Creates a thread-safe set backed by a hash map. The set is backed by a {@link
   * ConcurrentHashMap} instance, and thus carries the same concurrency guarantees.
   *
   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The
   * set is serializable.
   *
   * @return a new, empty thread-safe {@code Set}
   * @since 15.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,compare,"com.google.common.collect.Range$RangeLexOrdering:compare(com.google.common.collect.Range,com.google.common.collect.Range)",721,727,"/**
* Compares two ranges by their bounds.
* @param left first range to compare
* @param right second range to compare
* @return negative/positive value if left/right is less/greater than the other, 0 if equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,toString,com.google.common.collect.Range:toString(),681,684,"/**
* Returns a string representation of this range.
* @return A string in the format ""lowerBound - upperBound""
*/","* Returns a string representation of this range, such as {@code ""[3..5)""} (other examples are
   * listed in the class documentation).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,lowerEndpoint,com.google.common.collect.Range:lowerEndpoint(),348,350,"/**
* Returns the endpoint of the lower bound.
* @return Endpoint object representing the lower bound
*/","* Returns the lower endpoint of this range.
   *
   * @throws IllegalStateException if this range is unbounded below (that is, {@link
   *     #hasLowerBound()} returns {@code false})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,upperEndpoint,com.google.common.collect.Range:upperEndpoint(),374,376,"/**
* Returns the endpoint of the upper bound.
* @return Endpoint object of the upper bound
*/","* Returns the upper endpoint of this range.
   *
   * @throws IllegalStateException if this range is unbounded above (that is, {@link
   *     #hasUpperBound()} returns {@code false})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,descendingIterator,com.google.common.collect.RegularContiguousSet:descendingIterator(),102,113,"/**
* Returns an unmodifiable iterator over the elements in descending order.
* @return Iterator over descending elements or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,iterator,com.google.common.collect.RegularContiguousSet:iterator(),90,100,"/**
* Returns an iterator over the collection's elements, starting from the first element.
* The iterator yields each element in order and stops when it reaches the end of the collection.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,size,com.google.common.collect.RegularContiguousSet:size(),165,169,"/**
* Calculates the size of the range, considering edge cases where the distance exceeds integer bounds.
* @return The number of elements in the range or Integer.MAX_VALUE if too large
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,equals,com.google.common.collect.RegularContiguousSet:equals(java.lang.Object),223,234,"/**
* Compares this contiguous set to another object for equality.
* @param object the other object to compare
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,size,com.google.common.collect.RegularImmutableBiMap$Inverse:size(),206,209,"/**
* Returns the size of the collection represented by this Inverse.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,get,com.google.common.collect.RegularImmutableBiMap$Inverse:get(java.lang.Object),222,236,"/**
* Retrieves a key by its hashed value.
* @param value the object to hash and search for
* @return the associated key or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,checkNoConflictInValueBucket,"com.google.common.collect.RegularImmutableBiMap:checkNoConflictInValueBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)",136,146,"/**
* Checks for conflicts in the value bucket without exceeding maximum length.
* @param value unique value to check
* @param entry associated Entry object
* @param valueBucketHead head of the value bucket (may be null)
*/","* @throws IllegalArgumentException if another entry in the bucket has the same key
   * @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash
   *     flooding attack",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,writeReplace,com.google.common.collect.RegularImmutableBiMap$Inverse:writeReplace(),314,319,"/**
* Returns a serialized form of this bi-map, suitable for deserialization.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,removeDuplicates,"com.google.common.collect.RegularImmutableMap:removeDuplicates(java.util.Map$Entry[],int,int,java.util.IdentityHashMap)",186,203,"/**
* Removes duplicate entries from the given array.
* @param entries input array of entries to process
* @param n size of the input array
* @param newN desired size of the output array
* @param duplicates map of encountered entries and their status (null=not dup'd, true=first dup'd, false=non-first dup'd)
* @return new array with duplicate entries removed","* Constructs a new entry array where each duplicated key from the original appears only once, at
   * its first position but with its final value. The {@code duplicates} map is modified.
   *
   * @param entries the original array of entries including duplicates
   * @param n the number of valid entries in {@code entries}
   * @param newN the expected number of entries once duplicates are removed
   * @param duplicates a map of canonical {@link Entry} objects for each duplicate key. This map
   *     will be updated by the method, setting each value to false as soon as the {@link Entry} has
   *     been included in the new entry array.
   * @return an array of {@code newN} entries where no key appears more than once.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,createKeySet,com.google.common.collect.RegularImmutableMap:createKeySet(),312,315,"/**
* Creates an immutable set of keys from this object.
* @return Set of keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,size,com.google.common.collect.RegularImmutableMap$KeySet:size(),339,342,"/**
* Returns the number of elements in the underlying map.
* @return The size of the map.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,size,com.google.common.collect.RegularImmutableMap$Values:size(),389,392,"/**
* Returns the number of elements in this collection.
* @return The number of elements in this collection.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,checkNoConflictInKeyBucket,"com.google.common.collect.RegularImmutableMap:checkNoConflictInKeyBucket(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,boolean)",235,256,"/**
* Checks for conflicts in the key bucket.
* @param key Object to check
* @param newValue New value associated with the key
* @param keyBucketHead Head of the key bucket entry list
* @param throwIfDuplicateKeys Whether to throw exception on duplicate keys
* @return Matching ImmutableMapEntry or null if not found","* Checks if the given key already appears in the hash chain starting at {@code keyBucketHead}. If
   * it does not, then null is returned. If it does, then if {@code throwIfDuplicateKeys} is true an
   * {@code IllegalArgumentException} is thrown, and otherwise the existing {@link Entry} is
   * returned.
   *
   * @throws IllegalArgumentException if another entry in the bucket has the same key and {@code
   *     throwIfDuplicateKeys} is true
   * @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash
   *     flooding attack",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,get,"com.google.common.collect.RegularImmutableMap:get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)",265,287,"/**
* Retrieves a value by key from a hash table using the given key and mask.
* @param key The key to search for
* @param keyTable An array of immutable map entries representing the hash table
* @param mask A bit mask used to determine which bucket in the hash table to search
* @return The associated value or null if not found",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,hashFloodingDetected,com.google.common.collect.RegularImmutableMultiset:hashFloodingDetected(com.google.common.collect.Multisets$ImmutableEntry[]),87,98,"/**
* Checks for hash flooding by examining the length of each bucket in the provided hash table.
* @param hashTable array of hash buckets, where each bucket is an entry
* @return true if a bucket exceeds MAX_HASH_BUCKET_LENGTH, indicating hash flooding; false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,forEachEntry,com.google.common.collect.RegularImmutableSortedMultiset:forEachEntry(java.util.function.ObjIntConsumer),71,77,"/**
* Executes the given consumer on each entry in this map.
* @param action consumer to be invoked with element and its count
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,last,com.google.common.collect.RegularImmutableSortedSet:last(),215,221,"/**
* Returns the last element in the collection.
* @return The last element, or throws NoSuchElementException if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,unsafeBinarySearch,com.google.common.collect.RegularImmutableSortedSet:unsafeBinarySearch(java.lang.Object),156,158,"/**
* Performs binary search on elements using unsafe comparator.
* @param key object to search for
* @return index of found element or negative value if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,indexOf,com.google.common.collect.RegularImmutableSortedSet:indexOf(java.lang.Object),300,312,"/**
* Searches for an object in the collection using binary search.
* @param target Object to find (may be null)
* @return Index of the object if found, -1 otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,delegate,com.google.common.collect.ForwardingNavigableSet:delegate(),58,59,"/**
 * Returns an ordered set of elements to be navigated. 
 * This should be implemented by subclasses to provide their own data structure.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,iterator,com.google.common.collect.Sets$PowerSet:iterator(),1740,1748,"/**
* Returns an iterator over the sets of elements in this index list.
* @return Iterator<Set<E>> iterating over individual element subsets
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,toImmutableEnumSet,com.google.common.collect.Sets:toImmutableEnumSet(),150,152,"/**
* Converts enum values to an immutable set.
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableSet}
   * with an implementation specialized for enums. Unlike {@link ImmutableSet#toImmutableSet}, the
   * resulting set will iterate over elements in their enum definition order, not encounter order.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,complementOf,com.google.common.collect.Sets:complementOf(java.util.Collection),505,515,"/**
* Creates EnumSet complement from a given Collection.
* @param collection input enumeration set
*/","* Creates an {@code EnumSet} consisting of all enum values that are not in the specified
   * collection. If the collection is an {@link EnumSet}, this method has the same behavior as
   * {@link EnumSet#complementOf}. Otherwise, the specified collection must contain at least one
   * element, in order to determine the element type. If the collection could be empty, use {@link
   * #complementOf(Collection, Class)} instead of this method.
   *
   * @param collection the collection whose complement should be stored in the enum set
   * @return a new, modifiable {@code EnumSet} containing all values of the enum that aren't present
   *     in the given collection
   * @throws IllegalArgumentException if {@code collection} is not an {@code EnumSet} instance and
   *     contains no elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,complementOf,"com.google.common.collect.Sets:complementOf(java.util.Collection,java.lang.Class)",527,535,"/**
* Creates a complement EnumSet from a given Collection.
* @param collection input collection
* @param type enum class of the elements in the collection
*/","* Creates an {@code EnumSet} consisting of all enum values that are not in the specified
   * collection. This is equivalent to {@link EnumSet#complementOf}, but can act on any input
   * collection, as long as the elements are of enum type.
   *
   * @param collection the collection whose complement should be stored in the {@code EnumSet}
   * @param type the type of the elements in the set
   * @return a new, modifiable {@code EnumSet} initially containing all the values of the enum not
   *     present in the given collection",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,<init>,com.google.common.collect.SortedMultisets$NavigableElementSet:<init>(com.google.common.collect.SortedMultiset),99,101,"/**
* Initializes a new NavigableElementSet instance from a SortedMultiset.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,iterator,com.google.common.collect.SortedMultisets$ElementSet:iterator(),57,60,"/**
* Returns an iterator over elements in the multiset.
* @return iterator yielding unique elements of the set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,comparator,com.google.common.collect.SortedMultisets$ElementSet:comparator(),62,65,"/**
* Returns a comparator that orders elements based on the underlying multiset's ordering.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,subSet,"com.google.common.collect.SortedMultisets$ElementSet:subSet(java.lang.Object,java.lang.Object)",67,70,"/**
* Returns a subset of elements in the multiset within the specified range.
* @param fromElement lower bound (inclusive)
* @param toElement upper bound (exclusive)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,headSet,com.google.common.collect.SortedMultisets$ElementSet:headSet(java.lang.Object),72,75,"/**
* Returns a sorted set of elements less than the specified toElement.
* @param toElement element up to which the set is returned
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,tailSet,com.google.common.collect.SortedMultisets$ElementSet:tailSet(java.lang.Object),77,80,"/**
* Returns a sorted set of elements in this multiset with values greater than or equal to the specified element.
* @param fromElement lower bound for the returned set
* @return SortedSet containing elements greater than or equal to fromElement
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,first,com.google.common.collect.SortedMultisets$ElementSet:first(),82,86,"/**
* Retrieves the first element from the multiset.
* @return The first element of type E or throws exception if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,last,com.google.common.collect.SortedMultisets$ElementSet:last(),88,92,"/**
* Retrieves the last element from the multiset.
* @return Last element of type E or throws exception if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,iterator,com.google.common.collect.StandardTable$ColumnKeySet:iterator(),688,691,"/**
* Returns an iterator over column keys.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,updateBackingRowMapField,com.google.common.collect.StandardTable$Row:updateBackingRowMapField(),326,330,"/**
* Rebuilds and updates the backing row map field.
* If empty or null, re-computes the backing row map. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.StandardTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",149,156,"/**
* Inserts a new value with specified keys into the map.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value value to insert
* @return existing or newly created map instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowMap,com.google.common.collect.StandardTable:rowMap(),802,806,"/**
* Creates or returns cached row map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,findLast,com.google.common.collect.Streams:findLast(java.util.stream.IntStream),941,945,"/**
* Wraps a boxed IntStream into an OptionalInt using findLast(Stream).
* @param stream IntStream to search for the last element
*/","* Returns the last element of the specified stream, or {@link OptionalInt#empty} if the stream is
   * empty.
   *
   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This
   * method's runtime will be between O(log n) and O(n), performing better on <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * streams.
   *
   * @see IntStream#findFirst()
   * @throws NullPointerException if the last element of the stream is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,findLast,com.google.common.collect.Streams:findLast(java.util.stream.LongStream),959,963,"/**
* Wraps the last element of a LongStream into an OptionalLong.
* @param stream input stream to search for the last element
*/","* Returns the last element of the specified stream, or {@link OptionalLong#empty} if the stream
   * is empty.
   *
   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This
   * method's runtime will be between O(log n) and O(n), performing better on <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * streams.
   *
   * @see LongStream#findFirst()
   * @throws NullPointerException if the last element of the stream is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,findLast,com.google.common.collect.Streams:findLast(java.util.stream.DoubleStream),977,981,"/**
* Wraps the last double value in an OptionalDouble.
* @param stream DoubleStream to search for the last element
* @return OptionalDouble containing the last double, or empty if none found
*/","* Returns the last element of the specified stream, or {@link OptionalDouble#empty} if the stream
   * is empty.
   *
   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This
   * method's runtime will be between O(log n) and O(n), performing better on <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * streams.
   *
   * @see DoubleStream#findFirst()
   * @throws NullPointerException if the last element of the stream is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedAsMap:values(),1420,1428,"/**
* Returns a collection of collections containing the map's values.
* @return Collection of Collections or null if not initialized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedAsMapEntries:<init>(java.util.Set,java.lang.Object)",959,961,"/**
* Wraps a set of map entries as a synchronized map.
* @param delegate Set of map entries
* @param mutex synchronization object (null for no locking)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSortedSet:<init>(java.util.SortedSet,java.lang.Object)",309,311,"/**
* Constructs a synchronized SortedSet wrapper around the given delegate.
* @param delegate underlying SortedSet instance
* @param mutex synchronization lock object (may be null for no locking)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,set,"com.google.common.collect.Synchronized:set(java.util.Set,java.lang.Object)",265,268,"/**
* Creates a synchronized version of the provided set.
* @param set original set to synchronize
* @param mutex synchronization lock (may be null)
* @return synchronized Set instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedCollection:delegate(),131,135,"/**
 * Delegates collection retrieval to superclass.
 * @return Collection of type E or null if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedEntry:delegate(),1797,1801,"/**
* Delegates to superclass to retrieve map entry.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedMap:delegate(),1072,1076,"/**
* Delegates to superclass's map implementation.
* @return A map of type K -> V or null if not implemented
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedMultimap:delegate(),602,606,"/**
* Returns a multimap delegate with key-value type K-V.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedTable:delegate(),2046,2050,"/**
* Delegates table access to superclass implementation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedDeque:<init>(java.util.Deque,java.lang.Object)",1902,1904,"/**
* Initializes a synchronized deque with the given delegate and synchronization object.
* @param delegate underlying deque to synchronize
* @param mutex synchronization object (may be null for no synchronization)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,queue,"com.google.common.collect.Synchronized:queue(java.util.Queue,java.lang.Object)",1841,1843,"/**
* Wraps a given queue in a synchronized version.
* @param queue input queue to synchronize
* @param mutex synchronization lock object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedRandomAccessList:<init>(java.util.List,java.lang.Object)",482,484,"/**
* Creates synchronized random access list from given list and optional mutex.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,multiset,"com.google.common.collect.Synchronized:multiset(com.google.common.collect.Multiset,java.lang.Object)",489,495,"/**
* Converts a non-thread-safe Multiset to a synchronized version.
* @param multiset original Multiset instance
* @param mutex synchronization lock object (may be null)
* @return synchronized Multiset instance or the original if already thread-safe
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,get,"com.google.common.collect.Tables$TransformedTable:get(java.lang.Object,java.lang.Object)",430,438,"/**
* Retrieves table cell value by keys.
* @param rowKey unique table row identifier
* @param columnKey unique table column identifier
* @return V2 object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,remove,"com.google.common.collect.Tables$TransformedTable:remove(java.lang.Object,java.lang.Object)",463,469,"/**
* Removes a table row by key.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @return Value of removed cell or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,delegate,com.google.common.collect.Tables$UnmodifiableRowSortedMap:delegate(),651,654,"/**
* Delegates table creation to parent class.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,partition,"com.google.common.collect.TopKSelector:partition(int,int,int)",215,229,"/**
* Reorders the array by partitioning around a pivot element.
* @param left left index of subarray to reorder
* @param right right index of subarray to reorder
* @param pivotIndex index of pivot element to use for partitioning
* @return new index of pivot element in reordered array","* Partitions the contents of buffer in the range [left, right] around the pivot element
   * previously stored in buffer[pivotValue]. Returns the new index of the pivot element,
   * pivotNewIndex, so that everything in [left, pivotNewIndex] is ≤ pivotValue and everything in
   * (pivotNewIndex, right] is greater than pivotValue.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,hasPrevious,com.google.common.collect.TransformedListIterator:hasPrevious(),41,44,"/**
* Checks if there is a previous element in the iteration.
* @return true if previous element exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,previous,com.google.common.collect.TransformedListIterator:previous(),46,50,"/**
* Returns the previous element from the underlying iterator.
* @return The next element in the sequence, or null if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,nextIndex,com.google.common.collect.TransformedListIterator:nextIndex(),52,55,"/**
* Returns the index of the next element in the iteration sequence.
* @return Index of the next element or -1 if exhausted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,previousIndex,com.google.common.collect.TransformedListIterator:previousIndex(),57,60,"/**
* Returns the index of the previous element in this iterator. 
* @return Index of previous element, or -1 if none
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,comparator,com.google.common.collect.TreeBasedTable$TreeRow:comparator(),207,210,"/**
* Returns a comparator instance based on the column comparator. 
* @return Comparator object used to compare elements of type C",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,computeBackingRowMap,com.google.common.collect.TreeBasedTable$TreeRow:computeBackingRowMap(),270,284,"/**
* Computes a backing SortedMap for the row, potentially filtered by bounds.
* @return Filtered SortedMap or null if no valid data exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,maintainEmptyInvariant,com.google.common.collect.TreeBasedTable$TreeRow:maintainEmptyInvariant(),286,294,"/**
* Maintains the invariant of an empty row by updating and potentially removing it.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,createCollection,com.google.common.collect.TreeMultimap:createCollection(java.lang.Object),144,150,"/**
* Creates a collection for the given key.
* @param key unique identifier or null to use default
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,writeObject,com.google.common.collect.TreeMultimap:writeObject(java.io.ObjectOutputStream),208,215,"/**
* Serializes Multimap object to the given ObjectOutputStream.
* Writes key and value comparators, as well as internal data structures.
*/","* @serialData key comparator, value comparator, number of distinct keys, and then for each
   *     distinct key: the key, number of values for that key, and key values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,recomputeMultiset,com.google.common.collect.TreeMultiset$AvlNode:recomputeMultiset(),935,939,"/**
* Recomputes the multiset's distinct element count and total element count.
* Updates internal state for the current node (distinctElements, totalCount).
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,recomputeHeight,com.google.common.collect.TreeMultiset$AvlNode:recomputeHeight(),941,943,"/**
* Recomputes the combined height by taking the maximum of left and right subtrees. 
* @param heightLeft height of left subtree
* @param heightRight height of right subtree
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,balanceFactor,com.google.common.collect.TreeMultiset$AvlNode:balanceFactor(),972,974,"/**
* Calculates balance factor of AVL tree node.
* @return difference between left and right subtree heights
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,successor,"com.google.common.collect.TreeMultiset:successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)",1052,1056,"/**
* Recursively updates the successor pointers in the given AVL tree nodes.
* @param a first node
* @param b second node
* @param c third node (optional)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,elementIterator,com.google.common.collect.TreeMultiset:elementIterator(),440,443,"/**
* Returns an iterator over unique elements in this multiset.
* @return Iterator over unique elements or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,comparator,com.google.common.collect.TreeMultiset:comparator(),61,64,"/**
* Returns a comparator instance to compare objects of type E.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,equals,com.google.common.collect.TreeRangeMap$SubRangeMap:equals(java.lang.Object),633,640,"/**
* Compares this RangeMap object with another for equality.
* @param o the other object to compare with
* @return true if both objects have identical ranges, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,hashCode,com.google.common.collect.TreeRangeMap$SubRangeMap:hashCode(),642,645,"/**
* Computes and returns a hash code based on the ranges in this object.
* The actual computation is delegated to the asMapOfRanges() method.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,toString,com.google.common.collect.TreeRangeMap$SubRangeMap:toString(),647,650,"/**
* Returns string representation of range map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,equals,com.google.common.collect.TreeRangeMap:equals(java.lang.Object),812,819,"/**
* Compares this RangeMap to another object for equality.
* @param o the object to compare with
* @return true if both objects have identical ranges, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,hashCode,com.google.common.collect.TreeRangeMap:hashCode(),821,824,"/**
 * Computes the hash code of this object based on its underlying range map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaper.java,<init>,com.google.common.escape.CharEscaper:<init>(),46,46,"/**
 * Initializes a new instance of the CharEscaper class.",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,<init>,com.google.common.escape.UnicodeEscaper:<init>(),59,59,"/**
 * Initializes a new instance of the UnicodeEscaper class. 
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaper.java,escapeSlow,"com.google.common.escape.CharEscaper:escapeSlow(java.lang.String,int)",96,156,"/**
* Escapes special characters in a string up to the specified index.
* @param s input string
* @param index maximum index to escape
* @return escaped string or null if error occurs
*/","* Returns the escaped form of a given literal string, starting at the given index. This method is
   * called by the {@link #escape(String)} method when it discovers that escaping is required. It is
   * protected to allow subclasses to override the fastpath escaping function to inline their
   * escaping test. See {@link CharEscaperBuilder} for an example usage.
   *
   * @param s the literal string to be escaped
   * @param index the index to start escaping from
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,computeReplacement,"com.google.common.escape.Escapers:computeReplacement(com.google.common.escape.CharEscaper,char)",171,173,"/**
* Escapes a single character using the provided CharEscaper.
* @param escaper CharEscaper instance to use for escaping
* @param c character to escape
* @return escaped character as a String, or null if not possible
*/","* Returns a string that would replace the given character in the specified escaper, or {@code
   * null} if no replacement should be made. This method is intended for use in tests through the
   * {@code EscaperAsserts} class; production users of {@link CharEscaper} should limit themselves
   * to its public interface.
   *
   * @param c the character to escape if necessary
   * @return the replacement string, or {@code null} if no escaping was needed",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,computeReplacement,"com.google.common.escape.Escapers:computeReplacement(com.google.common.escape.UnicodeEscaper,int)",184,186,"/**
* Escapes Unicode code point to a replacement string.
* @param escaper UnicodeEscaper instance
* @param cp Unicode code point value
* @return escaped string or null if invalid input","* Returns a string that would replace the given character in the specified escaper, or {@code
   * null} if no replacement should be made. This method is intended for use in tests through the
   * {@code EscaperAsserts} class; production users of {@link UnicodeEscaper} should limit
   * themselves to its public interface.
   *
   * @param cp the Unicode code point to escape if necessary
   * @return the replacement string, or {@code null} if no escaping was needed",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Dispatcher.java,dispatch,"com.google.common.eventbus.Dispatcher$ImmediateDispatcher:dispatch(java.lang.Object,java.util.Iterator)",185,191,"/**
* Dispatches an event to all registered subscribers.
* @param event the event to be dispatched
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Dispatcher.java,dispatch,"com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher:dispatch(java.lang.Object,java.util.Iterator)",157,168,"/**
* Dispatches an event to all registered subscribers.
* @param event the event to dispatch
* @param subscribers iterator over subscriber objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Dispatcher.java,dispatch,"com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher:dispatch(java.lang.Object,java.util.Iterator)",98,120,"/**
* Dispatches an event to all subscribers, queuing subsequent events if still processing.
*@param event event object
*@param subscribers iterator of subscriber objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,logger,com.google.common.eventbus.EventBus$LoggingHandler:logger(com.google.common.eventbus.SubscriberExceptionContext),286,288,"/**
* Creates a named logger instance based on the provided event bus identifier.
* @param context SubscriberExceptionContext containing event bus information
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,message,com.google.common.eventbus.EventBus$LoggingHandler:message(com.google.common.eventbus.SubscriberExceptionContext),290,301,"/**
* Creates a message describing the exception thrown by a subscriber method.
* @param context SubscriberExceptionContext containing method and event details
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,<init>,"com.google.common.eventbus.Subscriber:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)",56,63,"/**
* Initializes a new subscriber instance with the provided event bus and target object.
* @param bus the EventBus instance
* @param target the target object to subscribe to events for
* @param method the Method instance representing the event handler
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,validateEndpoints,com.google.common.graph.AbstractBaseGraph:validateEndpoints(com.google.common.graph.EndpointPair),179,182,"/**
* Validates endpoint pairs based on ordering compatibility.
* @param endpoints pair of Endpoints to be validated
*/","* Throws {@code IllegalArgumentException} if the ordering of {@code endpoints} is not compatible
   * with the directionality of this graph.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,com.google.common.graph.AbstractBaseGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),164,173,"/**
* Checks for an edge connecting two nodes in the graph.
* @param endpoints pair of nodes to check
* @return true if an edge exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,predecessors,com.google.common.graph.ForwardingGraph:predecessors(java.lang.Object),70,73,"/**
* Retrieves predecessors of a given node.
* @param node node to find predecessors for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,advance,com.google.common.graph.EndpointPairIterator:advance(),55,63,"/**
* Advances to the next node in the traversal.
* @return true if a new node was successfully reached, false otherwise
*/","* Called after {@link #successorIterator} is exhausted. Advances {@link #node} to the next node
   * and updates {@link #successorIterator} to iterate through the successors of {@link #node}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,successors,com.google.common.graph.ForwardingGraph:successors(java.lang.Object),75,78,"/**
* Retrieves successors (next nodes) from the graph.
* @param node current node identifier
* @return set of successor node identifiers
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/IncidentEdgeSet.java,size,com.google.common.graph.IncidentEdgeSet:size(),41,50,"/**
* Calculates the number of adjacent nodes in a graph.
* @return The size of the node's adjacency list
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/IncidentEdgeSet.java,contains,com.google.common.graph.IncidentEdgeSet:contains(java.lang.Object),52,79,"/**
* Checks if the given object represents an edge between two nodes in the graph.
* @param obj Object to check, expected to be of type EndpointPair
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,computeNext,com.google.common.graph.EndpointPairIterator$Undirected:computeNext(),123,145,"/**
* Computes the next endpoint pair, iteratively visiting unvisited successors and
* updating the visited set. @return EndpointPair or null on data exhaustion.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,of,"com.google.common.graph.EndpointPair:of(com.google.common.graph.Graph,java.lang.Object,java.lang.Object)",63,65,"/**
* Creates an endpoint pair from a graph and two nodes.
* @param graph the graph containing the nodes
* @param nodeU first node of the pair
* @param nodeV second node of the pair
*/",Returns an {@link EndpointPair} representing the endpoints of an edge in {@code graph}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,of,"com.google.common.graph.EndpointPair:of(com.google.common.graph.Network,java.lang.Object,java.lang.Object)",68,70,"/**
* Creates an endpoint pair from a network and two nodes.
* @param network the graph to operate on
* @param nodeU one endpoint of the pair
* @param nodeV the other endpoint of the pair
*/",Returns an {@link EndpointPair} representing the endpoints of an edge in {@code network}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,computeNext,com.google.common.graph.EndpointPairIterator$Directed:computeNext(),74,85,"/**
* Iteratively fetches the next endpoint pair, either from the existing iterator or by advancing to the next node.
* @return Next EndpointPair object or null if at end of data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.EndpointPair),292,297,"/**
* Transposes an ordered endpoint pair, swapping source and target.
* @param endpoints input endpoint pair
* @return transposed endpoint pair or original if unordered
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractGraph:edges(),66,99,"/**
* Returns a set of edges in the graph, represented as EndpointPairs.
* @return Set of EndpointPairs
*/","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractValueGraph:edges(),66,99,"/**
* Returns a set of {@link EndpointPair}s representing graph edges.
*/","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,validateEndpoints,com.google.common.graph.AbstractNetwork:validateEndpoints(com.google.common.graph.EndpointPair),244,247,"/**
* Validates provided EndpointPairs by ensuring ordering compatibility.
* @param endpoints EndpointPair to validate
*/","* Throws an IllegalArgumentException if the ordering of {@code endpoints} is not compatible with
   * the directionality of this graph.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,inEdges,com.google.common.graph.AbstractUndirectedNetworkConnections:inEdges(),58,61,"/**
* Returns the set of edges incident on this graph element. 
* This is an alias for {@link #incidentEdges()}.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,outEdges,com.google.common.graph.AbstractUndirectedNetworkConnections:outEdges(),63,66,"/**
* Returns set of outgoing edges.
* @return Set of E objects representing outgoing edges
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,removeInEdge,"com.google.common.graph.AbstractUndirectedNetworkConnections:removeInEdge(java.lang.Object,boolean)",74,80,"/**
* Removes an in-edge from a node.
* @param edge the edge to be removed
* @param isSelfLoop true if the edge represents a self-loop, false otherwise
* @return the removed edge or null for self-loops
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,removeOutEdge,com.google.common.graph.DirectedMultiNetworkConnections:removeOutEdge(java.lang.Object),114,122,"/**
* Removes an outgoing edge and updates the multiset of successors.
* @param edge Edge object to be removed
* @return Removed node or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,iterator,com.google.common.graph.EdgesConnecting:iterator(),47,53,"/**
* Returns an unmodifiable iterator over the edges in this graph.
* @return Iterator over edges, or a singleton iterator for null connecting edge.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,size,com.google.common.graph.EdgesConnecting:size(),55,58,"/**
* Returns the number of edges in this graph (always 1 if connected). 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,contains,com.google.common.graph.EdgesConnecting:contains(java.lang.Object),60,64,"/**
* Checks if the graph contains a specific edge.
* @param edge edge object to search for
* @return true if edge exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,hashCode,com.google.common.graph.EndpointPair$Ordered:hashCode(),183,186,"/**
* Computes hash code based on source and target values.
* @return unique integer hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,toString,com.google.common.graph.EndpointPair$Ordered:toString(),188,191,"/**
* Returns a string representation of this edge in the format ""<source> -> target>"".
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,equals,com.google.common.graph.EndpointPair$Ordered:equals(java.lang.Object),166,181,"/**
* Compares this endpoint pair with another for equality.
* @param obj object to compare
* @return true if both have the same source, target and ordering
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,iterator,com.google.common.graph.EndpointPair$Unordered:iterator(),125,128,"/**
* Returns an iterator over the elements in this graph's nodes.
* @return Iterator containing GraphNode objects
*/","Iterates in the order {@link #nodeU()}, {@link #nodeV()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,equals,com.google.common.graph.EndpointPair$Unordered:equals(java.lang.Object),214,241,"/**
* Checks if this EndpointPair equals the given Object.
* @param obj object to compare with
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,nodes,com.google.common.graph.ImmutableGraph:nodes(),31,34,"/**
* Retrieves all nodes from the underlying graph.
* @return Set of Node objects or empty set if none exist
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,isDirected,com.google.common.graph.ImmutableGraph:isDirected(),45,48,"/**
* Checks whether the graph is directed.
* @return true if graph has directional edges, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,allowsSelfLoops,com.google.common.graph.ImmutableGraph:allowsSelfLoops(),50,53,"/**
* Checks whether this graph permits self-loops.
* @return true if self-loops are allowed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,nodeOrder,com.google.common.graph.ImmutableGraph:nodeOrder(),55,58,"/**
* Returns the order of elements in this graph.
* @return ElementOrder object representing element ordering
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,adjacentNodes,com.google.common.graph.ImmutableGraph:adjacentNodes(java.lang.Object),65,68,"/**
* Retrieves adjacent nodes for the given node.
* @param node Node object to find adjacent nodes for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,incidentEdges,com.google.common.graph.ImmutableGraph:incidentEdges(java.lang.Object),80,83,"/**
* Retrieves incident edges of a node from the underlying graph.
* @param node the node to retrieve incident edges for
* @return a set of endpoint pairs or empty set if none found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,degree,com.google.common.graph.ImmutableGraph:degree(java.lang.Object),85,88,"/**
* Calculates the degree of a graph node.
* @param node the graph node to query
* @return the number of edges incident on the node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,inDegree,com.google.common.graph.ImmutableGraph:inDegree(java.lang.Object),90,93,"/**
* Calculates the in-degree of a given node.
* @param node Node object to calculate in-degree for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,outDegree,com.google.common.graph.ImmutableGraph:outDegree(java.lang.Object),95,98,"/**
* Calculates the out-degree of a given node.
* @param node The node to calculate out-degree for
* @return Out-degree value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,hasEdgeConnecting,"com.google.common.graph.ImmutableGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",100,103,"/**
* Checks if there's an edge connecting two nodes.
* @param nodeU first node to check
* @param nodeV second node to check
* @return true if connected, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,hasEdgeConnecting,com.google.common.graph.ImmutableGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),105,108,"/**
* Checks if an edge connects two given endpoints.
* @param endpoints pair of endpoints to check
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingValueGraph.java,successors,com.google.common.graph.ForwardingValueGraph:successors(java.lang.Object),78,81,"/**
* Returns successors (next nodes) for the given node.
* @param node Node to fetch successors for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,nodeOrder,com.google.common.graph.GraphBuilder:nodeOrder(com.google.common.graph.ElementOrder),149,153,"/**
* Sets the order of nodes in the graph.
* @param nodeOrder ElementOrder specifying node ordering
*/","* Specifies the order of iteration for the elements of {@link Graph#nodes()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,incidentEdgeOrder,com.google.common.graph.GraphBuilder:incidentEdgeOrder(com.google.common.graph.ElementOrder),168,178,"/**
* Sets the order of incident edges to unordered or stable.
* @param incidentEdgeOrder ElementOrder type (unordered/stable)
*/","* Specifies the order of iteration for the elements of {@link Graph#edges()}, {@link
   * Graph#adjacentNodes(Object)}, {@link Graph#predecessors(Object)}, {@link
   * Graph#successors(Object)} and {@link Graph#incidentEdges(Object)}.
   *
   * <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For
   * immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable()
   * stable} order.
   *
   * @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code
   *     ElementOrder.unordered()} or {@code ElementOrder.stable()}.
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,predecessors,com.google.common.graph.Graphs$TransposedGraph:predecessors(java.lang.Object),313,316,"/**
* Returns set of predecessor nodes in graph.
* @param node graph node to fetch predecessors for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,successors,com.google.common.graph.Graphs$TransposedGraph:successors(java.lang.Object),318,321,"/**
 * Returns a set of successor nodes given a node.
 * @param node node to find successors for
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inDegree,com.google.common.graph.Graphs$TransposedGraph:inDegree(java.lang.Object),335,338,"/**
* Calculates the in-degree of a graph node.
* @param node the node to calculate in-degree for
* @return the number of edges pointing to the node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outDegree,com.google.common.graph.Graphs$TransposedGraph:outDegree(java.lang.Object),340,343,"/**
* Calculates the out-degree of a given node by transposing in-degrees. 
* @param node the node to calculate out-degree for 
* @return out-degree value or 0 if not found 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,"com.google.common.graph.Graphs$TransposedGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",345,348,"/**
* Checks if two nodes are connected by an edge.
* @param nodeU first node to check
* @param nodeV second node to check
* @return true if nodes U and V are connected, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.Graph),248,258,"/**
* Returns the transposed graph, or the original graph if undirected.
* @param graph input graph
* @return TransposedGraph object or original graph if undirected
*/","* Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other
   * properties remain intact, and further updates to {@code graph} will be reflected in the view.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.Network),280,290,"/**
* Returns the transposed graph of a directed network.
* @param network input graph to transpose
* @return the transposed graph or original if undirected
*/","* Returns a view of {@code network} with the direction (if any) of every edge reversed. All other
   * properties remain intact, and further updates to {@code network} will be reflected in the view.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,predecessors,com.google.common.graph.Graphs$TransposedNetwork:predecessors(java.lang.Object),433,436,"/**
* Returns set of nodes that have the given node as successor.
* @param node node to find predecessors for
* @return Set of predecessor nodes, or empty set if none found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,successors,com.google.common.graph.Graphs$TransposedNetwork:successors(java.lang.Object),438,441,"/**
* Returns a set of successors (nodes with edges to the given node).
* @param node the node whose successors are queried
* @return a set of nodes that have an edge from the given node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inDegree,com.google.common.graph.Graphs$TransposedNetwork:inDegree(java.lang.Object),443,446,"/**
* Calculates the in-degree of a graph node.
* @param node graph node to calculate in-degree for
* @return number of edges pointing to the given node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outDegree,com.google.common.graph.Graphs$TransposedNetwork:outDegree(java.lang.Object),448,451,"/**
* Calculates the out-degree of a given node by transposing in-degrees.
* @param node graph node to calculate out-degree for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inEdges,com.google.common.graph.Graphs$TransposedNetwork:inEdges(java.lang.Object),453,456,"/**
* Returns edges going to the given node.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outEdges,com.google.common.graph.Graphs$TransposedNetwork:outEdges(java.lang.Object),458,461,"/**
* Returns set of edges outgoing from the specified node.
* @param node graph node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgesConnecting,"com.google.common.graph.Graphs$TransposedNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",469,472,"/**
* Returns a set of edges connecting two nodes.
* @param nodeU first node
* @param nodeV second node
* @return Set of edge types connecting the nodes
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnecting,"com.google.common.graph.Graphs$TransposedNetwork:edgeConnecting(java.lang.Object,java.lang.Object)",479,482,"/**
* Finds an edge connecting two nodes.
* @param nodeU first node in the graph
* @param nodeV second node in the graph
* @return Optional edge connecting both nodes or empty if none exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnectingOrNull,"com.google.common.graph.Graphs$TransposedNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)",489,492,"/**
* Returns an edge connecting two nodes or null if no such edge exists.
* @param nodeU first node reference
* @param nodeV second node reference
* @return E object representing the connecting edge or null",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,"com.google.common.graph.Graphs$TransposedNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)",499,502,"/**
* Checks if two nodes are connected by an edge.
* @param nodeU first node to check
* @param nodeV second node to check
* @return true if nodes are connected, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.ValueGraph),264,274,"/**
* Returns the transposed graph of a directed ValueGraph.
* @param graph directed ValueGraph to transpose
* @return transposed graph or original graph if undirected
*/","* Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other
   * properties remain intact, and further updates to {@code graph} will be reflected in the view.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,predecessors,com.google.common.graph.Graphs$TransposedValueGraph:predecessors(java.lang.Object),370,373,"/**
* Returns a set of nodes preceding the given node.
* @param node Node object to fetch predecessors for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,successors,com.google.common.graph.Graphs$TransposedValueGraph:successors(java.lang.Object),375,378,"/**
* Fetches successors of a given node.
* @param node node to find successors for
* @return set of successor nodes or empty set if none found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inDegree,com.google.common.graph.Graphs$TransposedValueGraph:inDegree(java.lang.Object),380,383,"/**
* Calculates the in-degree of a node.
* @param node the node to calculate in-degree for
* @return the number of edges pointing to the node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outDegree,com.google.common.graph.Graphs$TransposedValueGraph:outDegree(java.lang.Object),385,388,"/**
* Returns the out-degree of the given node.
* @param node graph node to calculate out-degree for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,"com.google.common.graph.Graphs$TransposedValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",390,393,"/**
* Checks if there is an edge connecting two nodes.
* @param nodeU first node
* @param nodeV second node
* @return true if connected, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValue,"com.google.common.graph.Graphs$TransposedValueGraph:edgeValue(java.lang.Object,java.lang.Object)",400,403,"/**
* Retrieves edge value between two nodes.
* @param nodeU first node
* @param nodeV second node
* @return Optional containing the edge value or empty if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValueOrDefault,"com.google.common.graph.Graphs$TransposedValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)",410,413,"/**
* Returns an edge value between two nodes or a default value if not found.
* @param nodeU first node
* @param nodeV second node
* @param defaultValue value to return if no edge exists
* @return edge value V or defaultValue
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,asGraph,com.google.common.graph.ImmutableNetwork:asGraph(),77,80,"/**
* Returns this graph's underlying data structure as an immutable graph.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,asGraph,com.google.common.graph.ImmutableValueGraph:asGraph(),79,82,"/**
* Converts this view into an ImmutableGraph.
* @return ImmutableGraph representation of this view
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edgeOrder,com.google.common.graph.ImmutableNetwork:edgeOrder(),125,128,"/**
* Returns the edge order of the graph.
* @return ElementOrder object representing the edge order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,nodeOrder,com.google.common.graph.ImmutableNetwork:nodeOrder(),120,123,"/**
* Returns the element order of this data structure.
* @return The pre-defined element order.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,allowsSelfLoops,com.google.common.graph.ImmutableNetwork:allowsSelfLoops(),115,118,"/**
* Returns whether this graph allows self-loops.
* @return true if self-loops are allowed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,allowsParallelEdges,com.google.common.graph.ImmutableNetwork:allowsParallelEdges(),110,113,"/**
* Indicates whether parallel edges are allowed in this graph.
* @return true if parallel edges are permitted, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,isDirected,com.google.common.graph.ImmutableNetwork:isDirected(),105,108,"/**
* Checks whether the graph is directed.
* @return true if the graph has directional edges, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,nodes,com.google.common.graph.ImmutableNetwork:nodes(),95,98,"/**
* Returns an unmodifiable set of connected nodes.
* @return Set of N objects representing connected nodes
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,nodeOrder,com.google.common.graph.ImmutableValueGraph:nodeOrder(),98,101,"/**
* Returns the order of nodes in this data structure.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,allowsSelfLoops,com.google.common.graph.ImmutableValueGraph:allowsSelfLoops(),93,96,"/**
* Determines whether this graph model allows self-loops.
* @return true if self-loops are allowed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,isDirected,com.google.common.graph.ImmutableValueGraph:isDirected(),88,91,"/**
* Returns whether this graph is directed.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,nodes,com.google.common.graph.ImmutableValueGraph:nodes(),83,86,"/**
* Returns an unmodifiable set of all nodes in this graph.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,put,"com.google.common.graph.MapIteratorCache:put(java.lang.Object,java.lang.Object)",62,68,"/**
* Puts a new value associated with a given key into the map.
* @param key unique key identifier
* @param value new value to be stored
* @return previous value for this key or null if not present
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,remove,com.google.common.graph.MapIteratorCache:remove(java.lang.Object),70,75,"/**
* Removes an entry from the map by its key.
* @param key unique identifier of the entry to remove
* @return value associated with the removed entry or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,clear,com.google.common.graph.MapIteratorCache:clear(),77,80,"/**
* Clears all cached data and underlying map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,clearCache,com.google.common.graph.MapRetrievalCache:clearCache(),83,88,"/**
* Clears cache by calling superclass method and resetting local entries.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,containsKey,com.google.common.graph.MapIteratorCache:containsKey(java.lang.Object),98,100,"/**
* Checks if the map contains a specific key.
* @param key object to search for (may be null)
* @return true if the key is present, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edges,com.google.common.graph.StandardNetwork:edges(),100,103,"/**
* Returns an unmodifiable set of reference nodes.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,getIfCached,com.google.common.graph.MapRetrievalCache:getIfCached(java.lang.Object),57,81,"/**
* Retrieves cached value by key or returns null if not found.
* @param key object to search in cache
* @return cached value of type V or null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,addToCache,"com.google.common.graph.MapRetrievalCache:addToCache(java.lang.Object,java.lang.Object)",90,92,"/**
* Adds a cache entry to internal storage.
* @param key unique identifier
* @param value associated data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,nodeOrder,com.google.common.graph.NetworkBuilder:nodeOrder(com.google.common.graph.ElementOrder),176,180,"/**
* Sets the node order for this network builder.
* @param nodeOrder Element order to use; must not be null
*/","* Specifies the order of iteration for the elements of {@link Network#nodes()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,edgeOrder,com.google.common.graph.NetworkBuilder:edgeOrder(com.google.common.graph.ElementOrder),187,191,"/**
* Sets the order of edges in the network graph.
* @param edgeOrder ordering strategy for the edges
* @return updated NetworkBuilder instance
*/","* Specifies the order of iteration for the elements of {@link Network#edges()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,newTraversal,com.google.common.graph.Traverser$1:newTraversal(),345,345,"/**
* Creates a new traversal instance with an unspecified strategy. 
* @return An instance of Traversal interface.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,<init>,com.google.common.graph.Traverser$Traversal$2:<init>(com.google.common.graph.SuccessorsFunction),364,366,"/**
 * Initializes graph traversal with a custom successors function.
 * @param successorFunction function to compute next nodes in traversal order
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,breadthFirst,com.google.common.graph.Traverser$Traversal:breadthFirst(java.util.Iterator),409,411,"/**
* Performs breadth-first traversal of nodes starting from the given iterator.
* @param startNodes iterator over initial nodes
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,preOrder,com.google.common.graph.Traverser$Traversal:preOrder(java.util.Iterator),413,415,"/**
* Performs a front-to-back traversal of the graph starting from the given nodes.
* @param startNodes iterator to initial nodes
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,predecessors,com.google.common.graph.UndirectedGraphConnections:predecessors(),69,72,"/**
* Returns a set of nodes that precede the current node in the graph.
* @return Set of predecessor nodes (N) or empty set if none found.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,successors,com.google.common.graph.UndirectedGraphConnections:successors(),74,77,"/**
* Returns a set of node IDs that are directly connected to this node.
* @return Set of successor node IDs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,removePredecessor,com.google.common.graph.UndirectedGraphConnections:removePredecessor(java.lang.Object),91,95,"/**
* Removes predecessor node from graph and updates successors.
* @param node node to be removed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,addPredecessor,"com.google.common.graph.UndirectedGraphConnections:addPredecessor(java.lang.Object,java.lang.Object)",102,106,"/**
* Adds a predecessor to the graph by adding a successor with inverted value.
* @param node graph node
* @param value data value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,removeOutEdge,com.google.common.graph.UndirectedMultiNetworkConnections:removeOutEdge(java.lang.Object),92,100,"/**
* Removes an outgoing edge and updates the multiset of adjacent nodes.
* @param edge edge to be removed
* @return Node object that was removed or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,nodeOrder,com.google.common.graph.ValueGraphBuilder:nodeOrder(com.google.common.graph.ElementOrder),153,157,"/**
* Sets the element order for nodes in graph builder.
* @param nodeOrder ElementOrder instance to use
*/","* Specifies the order of iteration for the elements of {@link Graph#nodes()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,incidentEdgeOrder,com.google.common.graph.ValueGraphBuilder:incidentEdgeOrder(com.google.common.graph.ElementOrder),172,183,"/**
* Sets the order of incident edges in the graph.
* @param incidentEdgeOrder ElementOrder instance (UNORDERED or STABLE)
*/","* Specifies the order of iteration for the elements of {@link ValueGraph#edges()}, {@link
   * ValueGraph#adjacentNodes(Object)}, {@link ValueGraph#predecessors(Object)}, {@link
   * ValueGraph#successors(Object)} and {@link ValueGraph#incidentEdges(Object)}.
   *
   * <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For
   * immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable()
   * stable} order.
   *
   * @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code
   *     ElementOrder.unordered()} or {@code ElementOrder.stable()}.
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,update,com.google.common.hash.AbstractByteHasher:update(byte[]),41,43,"/**
* Updates internal state with given byte array.
* @param b input byte array
*/",Updates this hasher with the given bytes.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,update,com.google.common.hash.AbstractByteHasher:update(java.nio.ByteBuffer),53,62,"/**
* Updates internal state from provided ByteBuffer.
* @param b input buffer containing data to update with
*/",Updates this hasher with bytes from the given buffer.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,update,com.google.common.hash.AbstractByteHasher:update(int),65,73,"/**
* Updates hasher with specified number of bytes.
* @param bytes the number of bytes to process
* @return this Hasher instance for chaining
*/",Updates the sink with the given number of bytes from the buffer.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractCompositeHashFunction.java,newHasher,com.google.common.hash.AbstractCompositeHashFunction:newHasher(),53,60,"/**
* Creates a new Hasher instance from the configured functions.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractCompositeHashFunction.java,newHasher,com.google.common.hash.AbstractCompositeHashFunction:newHasher(int),62,70,"/**
* Creates a new Hasher instance with the specified expected input size.
* @param expectedInputSize recommended maximum input length
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putDouble,com.google.common.hash.AbstractHasher:putDouble(double),36,40,"/**
* Stores a double value in the hasher using its raw long representation.
* @param d the double value to be stored
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putLong,com.google.common.hash.Hasher:putLong(long),82,84,"/**
 * Adds a long value to the hash computation.
 * @param l the long value to add
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putFloat,com.google.common.hash.AbstractHasher:putFloat(float),42,46,"/**
* Puts a float value into the hash computation pipeline.
* @param f the input float value to be hashed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putUnencodedChars,com.google.common.hash.AbstractHasher:putUnencodedChars(java.lang.CharSequence),48,55,"/**
* Adds unencoded characters from the given CharSequence to the hasher.
* @param charSequence sequence of characters to encode
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putChar,com.google.common.hash.Hasher:putChar(char),101,103,"/**
 * Adds a character to the hash computation.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,putBytes,com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:putBytes(java.nio.ByteBuffer),98,102,"/**
* Writes byte buffer to stream and returns this Hasher instance.
* @param bytes ByteBuffer containing data to be hashed.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,hash,com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:hash(),104,107,"/**
* Computes the hash code of the byte array.
* @return The computed hash code value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,processRemaining,com.google.common.hash.AbstractStreamingHasher:processRemaining(java.nio.ByteBuffer),81,90,"/**
* Pads and processes the remaining ByteBuffer content.
* @param bb ByteBuffer containing data to be processed
*/","* This is invoked for the last bytes of the input, which are not enough to fill a whole chunk.
   * The passed {@code ByteBuffer} is guaranteed to be non-empty.
   *
   * <p>This implementation simply pads with zeros and delegates to {@link #process(ByteBuffer)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,munch,com.google.common.hash.AbstractStreamingHasher:munch(),212,220,"/**
* Processes chunks from the buffer using process(), preserving any remaining data.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,<init>,com.google.common.hash.BloomFilter$SerialForm:<init>(com.google.common.hash.BloomFilter),571,576,"/**
* Constructs a new SerialForm object from a BloomFilter instance.
* @param bf the BloomFilter to convert
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,equals,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:equals(java.lang.Object),297,305,"/**
* Compares this object with another for equality.
* @param o the other object, can be null
* @return true if both objects represent the same LockFreeBitArray, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,hashCode,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:hashCode(),307,311,"/**
* Computes hash code of data collection.
* @return non-negative integer hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,apply,com.google.common.hash.BloomFilter:apply(java.lang.Object),164,169,"/**
* Delegates to {@link #mightContain(T)} with the provided input.
* @param input object to be checked for containment
*/","* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #mightContain}
   *     instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,toBloomFilter,"com.google.common.hash.BloomFilter:toBloomFilter(com.google.common.hash.Funnel,long,double)",369,385,"/**
* Converts a collection to a concurrent bloom filter.
* @param funnel Funnel function for the elements
* @param expectedInsertions Estimated number of unique elements
* @param fpp False positive probability threshold
* @return A collector that produces a BloomFilter object
*/","* Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link
   * BloomFilter} with the specified expected false positive probability.
   *
   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the
   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive
   * probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @param fpp the desired false positive probability (must be positive and less than 1.0)
   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements
   * @since 23.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,bitSize,com.google.common.hash.BloomFilter:bitSize(),237,240,"/**
 * Calculates the total bit size of the bits configuration.
 */",Returns the number of bits in the underlying bit array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,read,com.google.common.io.ReaderInputStream:read(),122,125,"/**
* Reads and returns a single byte from input, 
* or -1 if end of file is reached.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,saturatedCast,com.google.common.primitives.UnsignedBytes:saturatedCast(long),111,119,"/**
* Performs a saturated cast from long to byte, clamping the result.
* @param value input value to be casted
*/","* Returns the {@code byte} value that, when treated as unsigned, is nearest in value to {@code
   * value}.
   *
   * @param value any {@code long} value
   * @return {@code (byte) 255} if {@code value >= 255}, {@code (byte) 0} if {@code value <= 0}, and
   *     {@code value} cast to {@code byte} otherwise",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,compare,"com.google.common.primitives.UnsignedBytes:compare(byte,byte)",131,133,"/**
* Compares two bytes as unsigned integers.
* @param a first byte
* @param b second byte
* @return negative if a < b, zero if a == b, positive if a > b
*/","* Compares the two specified {@code byte} values, treating them as unsigned values between 0 and
   * 255 inclusive. For example, {@code (byte) -127} is considered greater than {@code (byte) 127}
   * because it is seen as having the value of positive {@code 129}.
   *
   * @param a the first {@code byte} to compare
   * @param b the second {@code byte} to compare
   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is
   *     greater than {@code b}; or zero if they are equal",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,toString,"com.google.common.primitives.UnsignedBytes:toString(byte,int)",194,201,"/**
* Converts a byte to a string representation in the specified radix.
* @param x the byte value
* @param radix the base of the number system (e.g. 10 for decimal, 16 for hexadecimal)
*/","* Returns a string representation of {@code x} for the given radix, where {@code x} is treated as
   * unsigned.
   *
   * @param x the value to convert to a string.
   * @param radix the radix to use while working with {@code x}
   * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}
   *     and {@link Character#MAX_RADIX}.
   * @since 13.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,putAll,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:putAll(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray),258,267,"/**
* Copies all bits from another LockFreeBitArray into this one.
* @param other the bit array to copy from
*/","* Combines the two BitArrays using bitwise OR.
     *
     * <p>NOTE: Because of the use of atomics, if the other LockFreeBitArray is being mutated while
     * this operation is executing, not all of those new 1's may be set in the final state of this
     * LockFreeBitArray. The ONLY guarantee provided is that all the bits that were set in the other
     * LockFreeBitArray at the start of this method will be set in this LockFreeBitArray at the end
     * of this method.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,set,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:set(long),188,209,"/**
* Sets a single bit at specified index to 1.
* @param bitIndex the index of the bit to set
*/",Returns true if the bit changed value.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,equalsSameBits,com.google.common.hash.HashCode$BytesHashCode:equalsSameBits(com.google.common.hash.HashCode),307,320,"/**
* Compares two hash codes by comparing their internal byte arrays.
* @param that HashCode object to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,hashCode,com.google.common.hash.HashCode:hashCode(),383,397,"/**
* Calculates a hash code based on the internal byte representation.
* @return The calculated hash code
*/","* Returns a ""Java hash code"" for this {@code HashCode} instance; this is well-defined (so, for
   * example, you can safely put {@code HashCode} instances into a {@code HashSet}) but is otherwise
   * probably not what you want to use.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,toString,com.google.common.hash.HashCode:toString(),410,418,"/**
* Returns a hexadecimal string representation of the internal byte array.
*/","* Returns a string containing each byte of {@link #asBytes}, in order, as a two-digit unsigned
   * hexadecimal number in lower case.
   *
   * <p>Note that if the output is considered to be a single hexadecimal number, whether this string
   * is big-endian or little-endian depends on the byte order of {@link #asBytes}. This may be
   * surprising for implementations of {@code HashCode} that represent the number in big-endian
   * since everything else in the hashing API uniformly treats multibyte values as little-endian.
   *
   * <p>To create a {@code HashCode} from its string representation, see {@link #fromString}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,fromByteArray,com.google.common.primitives.Longs:fromByteArray(byte[]),308,312,"/**
* Extracts a long integer value from the given byte array.
* @param bytes input byte array
*/","* Returns the {@code long} value whose big-endian representation is stored in the first 8 bytes
   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getLong()}. For example, the
   * input byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}} would yield the
   * {@code long} value {@code 0x1213141516171819L}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 8 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,process,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:process(java.nio.ByteBuffer),81,97,"/**
* Processes a ByteBuffer chunk to update CRC values.
* @param bb input buffer containing 16-bit words
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,processRemaining,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:processRemaining(java.nio.ByteBuffer),99,112,"/**
* Updates CRC checksum using remaining data from ByteBuffer.
* @param bb input buffer containing additional data to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,weakHashLength32WithSeeds,"com.google.common.hash.FarmHashFingerprint64:weakHashLength32WithSeeds(byte[],int,long,long,long[])",100,115,"/**
* Computes weak hash with seeds using 32-bit length.
* @param bytes input byte array
* @param offset starting position in the array
* @param seedA initial seed A value
* @param seedB initial seed B value
* @param output array to store resulting hash values
*/","* Computes intermediate hash of 32 bytes of byte array from the given offset. Results are
   * returned in the output array because when we last measured, this was 12% faster than allocating
   * new arrays every time.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,weakHashLength32WithSeeds,"com.google.common.hash.Fingerprint2011:weakHashLength32WithSeeds(byte[],int,long,long,long[])",95,110,"/**
* Computes weak hash of input bytes using seeds.
* @param bytes input data
* @param offset starting index in bytes array
* @param seedA initial value for first hash part
* @param seedB initial value for second hash part
* @param output array to store the two resulting hash parts
*/","* Computes intermediate hash of 32 bytes of byte array from the given offset. Results are
   * returned in the output array - this is 12% faster than allocating new arrays every time.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength17to32,"com.google.common.hash.FarmHashFingerprint64:hashLength17to32(byte[],int,int)",142,150,"/**
* Computes FNV-1a hash for length-32 byte array.
* @param bytes input data
* @param offset starting index
* @param length number of bytes to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength33To64,"com.google.common.hash.FarmHashFingerprint64:hashLength33To64(byte[],int,int)",152,166,"/**
* Computes a 64-bit hash value using the provided bytes and offset.
* @param bytes input byte array
* @param offset starting index in the byte array
* @param length number of bytes to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength0to16,"com.google.common.hash.FarmHashFingerprint64:hashLength0to16(byte[],int,int)",117,140,"/**
* Computes a hash value for the specified byte array and offset.
* @param bytes input byte array
* @param offset starting position in bytes
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,hashLength33To64,"com.google.common.hash.Fingerprint2011:hashLength33To64(byte[],int,int)",148,169,"/**
* Computes a hash value from a byte array using the specified algorithm.
* @param bytes input data
* @param offset starting position in bytes
* @param length number of bytes to process
* @return computed hash value as a long integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,murmurHash64WithSeed,"com.google.common.hash.Fingerprint2011:murmurHash64WithSeed(byte[],int,int,long)",171,196,"/**
* Computes a 64-bit hash using the MurmurHash algorithm with a given seed.
* @param bytes input byte array
* @param offset starting position in the byte array
* @param length number of bytes to process
* @param seed initial hash value
* @return final 64-bit hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,writeReplace,com.google.common.hash.Funnels$StringCharsetFunnel:writeReplace(),121,123,"/**
* Serializes the object into a SerializedForm instance.
* @return SerializedForm containing serialized data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,<init>,com.google.common.hash.HashCode$BytesHashCode:<init>(byte[]),253,255,"/**
* Initializes BytesHashCode with the given byte array.
* @param bytes input byte data to compute hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,<init>,com.google.common.hash.HashCode$IntHashCode:<init>(int),121,123,"/**
* Initializes hash code with provided integer value. 
* @param hash integer to be set as hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,<init>,com.google.common.hash.HashCode$LongHashCode:<init>(long),178,180,"/**
* Initializes the hash code with a specified value.
* @param hash unique identifier hash code to be stored",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,asLong,com.google.common.hash.HashCode$BytesHashCode:asLong(),279,286,"/**
* Converts hash code to a 64-bit integer.
* @return the hash code as a long value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,padToLong,com.google.common.hash.HashCode$IntHashCode:padToLong(),145,148,"/**
* Converts hash to a 64-bit unsigned integer representation.
* @return The hash value as a long integer.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,longValue,com.google.common.primitives.UnsignedInteger:longValue(),186,189,"/**
* Converts value to a long integer.
* @return long representation of the value
*/",Returns the value of this {@code UnsignedInteger} as a {@code long}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,divide,"com.google.common.primitives.UnsignedInts:divide(int,int)",286,288,"/**
* Divides two integers with potential overflow handling.
* @param dividend number being divided
* @param divisor divider value
*/","* Returns dividend / divisor, where the dividend and divisor are treated as unsigned 32-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#divideUnsigned(int, int)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,remainder,"com.google.common.primitives.UnsignedInts:remainder(int,int)",300,302,"/**
* Calculates the remainder of two integers.
* @param dividend number being divided
* @param divisor number by which we are dividing
* @return remainder of the division operation
*/","* Returns dividend % divisor, where the dividend and divisor are treated as unsigned 32-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#remainderUnsigned(int, int)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,crc32cConstructor,com.google.common.hash.Hashing$Crc32cMethodHandles:crc32cConstructor(),532,555,"/**
* Creates a CRC32C checksum instance using MethodHandles.
* @throws AssertionError if the CRC32C class is not available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,murmur3_32,com.google.common.hash.Hashing:murmur3_32(int),111,115,"/**
* Creates a 32-bit Murmur3 hash function instance with the specified seed.
* @param seed initial hash value
*/","* Returns a hash function implementing the <a
   * href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp"">32-bit murmur3
   * algorithm, x86 variant</a> (little-endian variant), using the given seed value, <b>with a known
   * bug</b> as described in the deprecation text.
   *
   * <p>The C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A), which however does not
   * have the bug.
   *
   * @deprecated This implementation produces incorrect hash values from the {@link
   *     HashFunction#hashString} method if the string contains non-BMP characters. Use {@link
   *     #murmur3_32_fixed(int)} instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,murmur3_32_fixed,com.google.common.hash.Hashing:murmur3_32_fixed(int),148,151,"/**
* Generates a fixed-size Murmur3 hash function with specified seed.
* @param seed initial hash value
*/","* Returns a hash function implementing the <a
   * href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp"">32-bit murmur3
   * algorithm, x86 variant</a> (little-endian variant), using the given seed value.
   *
   * <p>The exact C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A).
   *
   * <p>This method is called {@code murmur3_32_fixed} because it fixes a bug in the {@code
   * HashFunction} returned by the original {@code murmur3_32} method.
   *
   * @since 31.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,murmur3_128,com.google.common.hash.Hashing:murmur3_128(int),177,180,"/**
* Initializes MURMUR3-128 hash function with specified seed value.
* @param seed initial hash seed value
* @return initialized Murmur3_128HashFunction object
*/","* Returns a hash function implementing the <a
   * href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp"">128-bit murmur3
   * algorithm, x64 variant</a> (little-endian variant), using the given seed value.
   *
   * <p>The exact C++ equivalent is the MurmurHash3_x64_128 function (Murmur3F).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,consistentHash,"com.google.common.hash.Hashing:consistentHash(long,int)",672,687,"/**
* Calculates consistent hash value within specified number of buckets.
* @param input seed for randomization
* @param buckets maximum number of possible results
* @return hashed bucket index (0 <= result < buckets)
*/","* Assigns to {@code input} a ""bucket"" in the range {@code [0, buckets)}, in a uniform manner that
   * minimizes the need for remapping as {@code buckets} grows. That is, {@code consistentHash(h,
   * n)} equals:
   *
   * <ul>
   *   <li>{@code n - 1}, with approximate probability {@code 1/n}
   *   <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})
   * </ul>
   *
   * <p>This method is suitable for the common use case of dividing work among buckets that meet the
   * following conditions:
   *
   * <ul>
   *   <li>You want to assign the same fraction of inputs to each bucket.
   *   <li>When you reduce the number of buckets, you can accept that the most recently added
   *       buckets will be removed first. More concretely, if you are dividing traffic among tasks,
   *       you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and
   *       {@code consistentHash} will handle it. If, however, you are dividing traffic among
   *       servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to
   *       take each of the servers offline, {@code consistentHash} will be a poor fit: It provides
   *       no way for you to specify which of the three buckets is disappearing. Thus, if your
   *       buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will
   *       assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo}
   *       traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic.
   * </ul>
   *
   * <p>See the <a href=""http://en.wikipedia.org/wiki/Consistent_hashing"">Wikipedia article on
   * consistent hashing</a> for more information.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,newHasher,com.google.common.hash.MacHashFunction:newHasher(),79,89,"/**
* Creates a new Hasher instance, either cloning the prototype or initializing with a fresh MAC. 
* @return a new Hasher object",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,<init>,"com.google.common.hash.MacHashFunction:<init>(java.lang.String,java.security.Key,java.lang.String)",45,51,"/**
* Initializes a new MAC hash function instance with the given algorithm name, key, and string representation.
* @param algorithmName name of the underlying hashing algorithm
* @param key encryption key to be used in the hash function
* @param toString human-readable string representation of the hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,newHasher,com.google.common.hash.MessageDigestHashFunction:newHasher(),90,100,"/**
* Creates a new hasher instance using the provided prototype and bytes.
* If supportsClone is enabled, attempts to clone the prototype; otherwise,
* uses a freshly instantiated MessageDigest.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,<init>,"com.google.common.hash.MessageDigestHashFunction:<init>(java.lang.String,java.lang.String)",46,51,"/**
* Initializes a hash function with the specified algorithm and string representation.
* @param algorithmName name of the message digest algorithm to use
* @param toString string representation of the hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,<init>,"com.google.common.hash.MessageDigestHashFunction:<init>(java.lang.String,int,java.lang.String)",53,61,"/**
* Initializes a MessageDigestHashFunction with specified algorithm, digest length, and string representation.
* @param algorithmName name of the message digest algorithm (e.g. ""SHA-256"")
* @param bytes digest size in bytes
* @param toString string representation for this hash function
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,bmix64,"com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:bmix64(long,long)",110,122,"/**
* Updates hash values using the provided key components.
* @param k1 first 64-bit key component
* @param k2 second 64-bit key component
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,processRemaining,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:processRemaining(java.nio.ByteBuffer),124,167,"/**
* Mixes remaining data from ByteBuffer into hash values.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,newHasher,com.google.common.hash.Murmur3_32HashFunction:newHasher(),84,87,"/**
 * Creates a new instance of the Murmur3_32Hasher with a specified seed.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putByte,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putByte(byte),295,300,"/**
* Updates hasher with single byte value.
* @return this Hasher instance for chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putInt,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putInt(int),331,336,"/**
* Puts 32-bit integer into hasher.
* @param i integer to hash
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putLong,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putLong(long),338,344,"/**
* Adds a long integer value to the hash computation.
* @param l the long value to add
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putChar,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putChar(char),346,351,"/**
* Adds a character to the hash computation.
* @param c character to be hashed
* @return this Hasher instance for method chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,getIntLittleEndian,"com.google.common.hash.Murmur3_32HashFunction:getIntLittleEndian(byte[],int)",240,242,"/**
* Extracts and interprets a 4-byte integer from the given byte array in little-endian order.
* @param input the input byte array
* @param offset starting index of the integer within the byte array
* @return the extracted integer value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,fromByteArray,com.google.common.primitives.Ints:fromByteArray(byte[]),347,350,"/**
* Converts a byte array to an integer value.
* @param bytes input byte array (must be at least BYTES long)
*/","* Returns the {@code int} value whose big-endian representation is stored in the first 4 bytes of
   * {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getInt()}. For example, the input
   * byte array {@code {0x12, 0x13, 0x14, 0x15, 0x33}} would yield the {@code int} value {@code
   * 0x12131415}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 4 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,processM,com.google.common.hash.SipHashFunction$SipHasher:processM(long),157,161,"/**
* Updates state with given value 'm' and performs SipRound calculations. 
* @param m long integer to XOR with state variables
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,"com.google.common.io.AppendableWriter:write(char[],int,int)",54,60,"/**
* Writes specified characters to the output stream.
* @param cbuf character buffer
* @param off offset into buffer
* @param len number of characters to write
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,com.google.common.io.AppendableWriter:write(int),66,70,"/**
* Writes a single character to the output stream.
* @param c the character to be written
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,com.google.common.io.AppendableWriter:write(java.lang.String),72,77,"/**
* Appends input string to output stream.
* @param str input string to be appended
* @throws IOException if I/O error occurs during writing
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,"com.google.common.io.AppendableWriter:write(java.lang.String,int,int)",79,85,"/**
* Writes a substring to the underlying buffer.
* @param str input string
* @param off starting offset in string
* @param len length of substring to write
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,flush,com.google.common.io.AppendableWriter:flush(),87,93,"/**
* Flushes the underlying output target if it implements Flushable.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,append,com.google.common.io.AppendableWriter:append(char),103,108,"/**
* Appends a single character to the writer's buffer.
* @return this Writer instance for fluent API chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,append,com.google.common.io.AppendableWriter:append(java.lang.CharSequence),110,115,"/**
* Appends a character sequence to the writer.
* @param charSeq input character sequence (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,append,"com.google.common.io.AppendableWriter:append(java.lang.CharSequence,int,int)",117,122,"/**
* Appends a CharSequence to the writer at specified range.
* @param charSeq character sequence to append
* @param start starting index of the sequence
* @param end ending index of the sequence
* @return this Writer instance for method chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,"com.google.common.io.ByteSource$ByteArrayByteSource:<init>(byte[],int,int)",574,578,"/**
* Constructs a ByteArrayByteSource with the specified byte array,
* offset, and length.
* @param bytes the underlying byte array
* @param offset starting index of the source data
* @param length number of bytes to consider from the source data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,com.google.common.io.ByteSource$ConcatenatedByteSource:<init>(java.lang.Iterable),677,679,"/**
 * Initializes the ConcatenatedByteSource with an iterable of ByteSources.
 * @param sources iterable containing byte sources to concatenate
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,<init>,com.google.common.io.Files$FileByteSource:<init>(java.io.File),125,127,"/**
* Initializes FileByteSource with a valid file reference.
* @param file non-null file to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,<init>,com.google.common.io.Resources$UrlByteSource:<init>(java.net.URL),63,65,"/**
* Initializes UrlByteSource with a URL.
* @param url unique identifier of the resource to fetch
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decode,com.google.common.io.BaseEncoding$Alphabet:decode(char),531,544,"/**
* Decodes a single ASCII character to an integer representation.
* @param ch the input character to decode
* @return decoded value or -1 if not found, throws DecodingException otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,equals,com.google.common.io.BaseEncoding$StandardBaseEncoding:equals(java.lang.Object),935,943,"/**
* Compares two instances for equality based on alphabet and padding character.
* @param other the object to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,hashCode,com.google.common.io.BaseEncoding$StandardBaseEncoding:hashCode(),945,948,"/**
* Calculates hash code by XORing hash codes of 'alphabet' and 'paddingChar'. 
* @return unique hash code value.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$SeparatedBaseEncoding:<init>(com.google.common.io.BaseEncoding,java.lang.String,int)",1145,1151,"/**
* Creates a separated base encoding with the specified parameters.
* @param delegate underlying base encoding
* @param separator string to insert between encoded characters
* @param afterEveryChars number of characters between separators
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$StandardBaseEncoding:<init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",623,630,"/**
* Initializes the encoding with a specified alphabet and optional padding character.
* @param alphabet Alphabet to use for encoding
* @param paddingChar Optional padding character (null if not used)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$CharSequenceCharSource:<init>(java.lang.CharSequence),541,543,"/**
 * Initializes CharSource with a CharSequence.
 * @param seq input sequence to wrap; must not be null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$ConcatenatedCharSource:<init>(java.lang.Iterable),691,693,"/**
* Initializes source from iterable of CharSources.
* @param sources collection of character sources to concatenate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,asByteSource,com.google.common.io.ByteSource$AsCharSource:asByteSource(java.nio.charset.Charset),451,457,"/**
* Returns this byte source with the specified charset, or delegates to superclass if charset differs. 
* @param charset target charset for the returned byte source
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openBufferedStream,com.google.common.io.ByteSource$ByteArrayByteSource:openBufferedStream(),585,588,"/**
* Returns an input stream with buffering enabled.
* Simply delegates to {@link #openStream()} as buffering is always on. 
* @return Input stream object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,asCharSource,com.google.common.io.ByteSource$EmptyByteSource:asCharSource(java.nio.charset.Charset),656,660,"/**
* Returns an empty char source with specified charset.
* @param charset character encoding to use 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,slice,"com.google.common.io.ByteSource$SlicedByteSource:slice(long,long)",529,537,"/**
* Returns a sliced ByteSource view from the specified offset with the given length.
* @param offset starting position (must be non-negative)
* @param length desired length (must be non-negative)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,asCharSource,com.google.common.io.CharSource$AsByteSource:asCharSource(java.nio.charset.Charset),516,522,"/**
* Returns this CharSource wrapped with a specified Charset.
* @param charset target charset to wrap with
* @return the wrapped CharSource or the superclass result if not equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,asCharSource,com.google.common.io.MoreFiles$PathByteSource:asCharSource(java.nio.charset.Charset),167,184,"/**
* Converts to a CharSource, delegating to Files.lines if no OpenOptions were passed.
* @param charset character encoding
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,copy,"com.google.common.io.ByteStreams:copy(java.io.InputStream,java.io.OutputStream)",108,123,"/**
* Copies data from input stream to output stream.
* @param from InputStream source
* @param to OutputStream destination
* @return total bytes copied or -1 on error
*/","* Copies all bytes from the input stream to the output stream. Does not close or flush either
   * stream.
   *
   * <p><b>Java 9 users and later:</b> this method should be treated as deprecated; use the
   * equivalent {@link InputStream#transferTo} method instead.
   *
   * @param from the input stream to read from
   * @param to the output stream to write to
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,exhaust,com.google.common.io.ByteStreams:exhaust(java.io.InputStream),289,298,"/**
* Calculates the total number of bytes read from an InputStream.
* @param in input stream to read from
* @return total number of bytes read, or 0 if empty
*/","* Reads and discards data from the given {@code InputStream} until the end of the stream is
   * reached. Returns the total number of bytes read. Does not close the stream.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,readBytes,"com.google.common.io.ByteStreams:readBytes(java.io.InputStream,com.google.common.io.ByteProcessor)",895,909,"/**
* Reads bytes from an InputStream using a ByteProcessor to process the data.
* @param input InputStream containing the data
* @param processor ByteProcessor instance to process the data
* @return processed result or null if not processed
*/","* Process the bytes of the given input stream using the given processor.
   *
   * @param input the input stream to process
   * @param processor the object to which to pass the bytes of the stream
   * @return the result of the byte processor
   * @throws IOException if an I/O error occurs
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataInput,com.google.common.io.ByteStreams:newDataInput(java.io.ByteArrayInputStream),329,332,"/**
* Creates a new ByteArrayDataInput instance from the given ByteArrayInputStream.
* @param byteArrayInputStream input stream containing binary data
*/","* Returns a new {@link ByteArrayDataInput} instance to read from the given {@code
   * ByteArrayInputStream}. The given input stream is not reset before being read from by the
   * returned {@code ByteArrayDataInput}.
   *
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataOutput,com.google.common.io.ByteStreams:newDataOutput(java.io.ByteArrayOutputStream),514,517,"/**
* Creates a new ByteArrayDataOutput instance from the given ByteArrayOutputStream.
* @param byteArrayOutputStream underlying output stream
*/","* Returns a new {@link ByteArrayDataOutput} instance which writes to the given {@code
   * ByteArrayOutputStream}. The given output stream is not reset before being written to by the
   * returned {@code ByteArrayDataOutput} and new data will be appended to any existing content.
   *
   * <p>Note that if the given output stream was not empty or is modified after the {@code
   * ByteArrayDataOutput} is created, the contract for {@link ByteArrayDataOutput#toByteArray} will
   * not be honored (the bytes returned in the byte array may not be exactly what was written via
   * calls to {@code ByteArrayDataOutput}).
   *
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,<init>,"com.google.common.io.ReaderInputStream:<init>(java.io.Reader,java.nio.charset.CharsetEncoder,int)",105,115,"/**
* Initializes a ReaderInputStream with the given reader and encoder.
* @param reader input source
* @param encoder charset encoder for conversion
* @param bufferSize size of buffers used in this stream
*/","* Creates a new input stream that will encode the characters from {@code reader} into bytes using
   * the given character set encoder.
   *
   * @param reader input source
   * @param encoder character set encoder used for encoding chars to bytes
   * @param bufferSize size of internal input and output buffers
   * @throws IllegalArgumentException if bufferSize is non-positive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,startDraining,com.google.common.io.ReaderInputStream:startDraining(boolean),242,249,"/**
* Initializes draining process based on buffer overflow status.
* @param overflow whether buffer is overflowing
*/","* Flips the buffer output buffer so we can start reading bytes from it. If we are starting to
   * drain because there was overflow, and there aren't actually any characters to drain, then the
   * overflow must be due to a small output buffer.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,copy,"com.google.common.io.ByteStreams:copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel)",134,162,"/**
* Copies data from one channel to another.
* @param from source ReadableByteChannel
* @param to destination WritableByteChannel
* @return number of bytes copied
*/","* Copies all bytes from the readable channel to the writable channel. Does not close or flush
   * either channel.
   *
   * @param from the readable channel to read from
   * @param to the writable channel to write to
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineReader.java,readLine,com.google.common.io.LineReader:readLine(),70,84,"/**
* Reads the next line from the input stream.
* @return the next line as a string or null if end of input is reached
*/","* Reads a line of text. A line is considered to be terminated by any one of a line feed ({@code
   * '\n'}), a carriage return ({@code '\r'}), or a carriage return followed immediately by a
   * linefeed ({@code ""\r\n""}).
   *
   * @return a {@code String} containing the contents of the line, not including any
   *     line-termination characters, or {@code null} if the end of the stream has been reached.
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,skipUpTo,"com.google.common.io.ByteStreams:skipUpTo(java.io.InputStream,long)",843,872,"/**
* Skips up to 'n' bytes from the input stream.
* @param in InputStream to read from
* @param n number of bytes to skip
* @return actual number of bytes skipped
*/","* Discards up to {@code n} bytes of data from the input stream. This method will block until
   * either the full amount has been skipped or until the end of the stream is reached, whichever
   * happens first. Returns the total number of bytes skipped.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,ready,com.google.common.io.CharSequenceReader:ready(),123,127,"/**
* Indicates whether this input stream is ready to be read.
* Returns always true due to synchronization and checking open state.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,mark,com.google.common.io.CharSequenceReader:mark(int),134,139,"/**
* Marks current position as the end of a section to skip ahead in reading.
* @param readAheadLimit non-negative limit for skipping bytes
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,reset,com.google.common.io.CharSequenceReader:reset(),141,145,"/**
 * Resets the reader to its marked position.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,hasRemaining,com.google.common.io.CharSequenceReader:hasRemaining(),56,58,"/**
* Checks if there are any remaining items.
* @return true if count is greater than zero, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,skip,com.google.common.io.CharSequenceReader:skip(long),114,121,"/**
* Skips a specified number of characters.
* @param n the number of characters to skip
* @return the actual number of characters skipped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,"com.google.common.io.CharSink:writeLines(java.util.Iterator,java.lang.String)",148,157,"/**
* Writes an iterator of character sequences to a buffered stream, separated by the specified line separator.
* @param lines iterator of text lines
* @param lineSeparator string used to separate lines (e.g. ""\n"", ""\r\n"")
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lines,com.google.common.io.CharSource$CharSequenceCharSource:lines(),592,595,"/**
* Returns a stream of line strings from this iterator. 
* @return A stream of line strings.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readFirstLine,com.google.common.io.CharSource$CharSequenceCharSource:readFirstLine(),597,601,"/**
* Reads and returns the first line from an iterator of strings.
* @return The first string in the iterator, or null if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource$CharSequenceCharSource:readLines(com.google.common.io.LineProcessor),608,618,"/**
* Reads and processes lines from the input stream, returning the final result.
* @param processor LineProcessor instance to process each line
* @return Result of processing, or null if processor failed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lines,com.google.common.io.CharSource:lines(),157,161,"/**
* Returns a stream of lines from the underlying input source.
* @throws IOException if an I/O error occurs while reading
*/","* Opens a new {@link Stream} for reading text one line at a time from this source. This method
   * returns a new, independent stream each time it is called.
   *
   * <p>The returned stream is lazy and only reads from the source in the terminal operation. If an
   * I/O error occurs while the stream is reading from the source or when the stream is closed, an
   * {@link UncheckedIOException} is thrown.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * <p>The caller is responsible for ensuring that the returned stream is closed. For example:
   *
   * {@snippet :
   * try (Stream<String> lines = source.lines()) {
   *   lines.map(...)
   *      .filter(...)
   *      .forEach(...);
   * }
   * }
   *
   * @throws IOException if an I/O error occurs while opening the stream
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,exhaust,com.google.common.io.CharStreams:exhaust(java.lang.Readable),237,247,"/**
* Calculates the total number of bytes read from a Readable source.
* @param readable input stream to exhaust
* @return total bytes read or -1 if exhausted immediately
*/","* Reads and discards data from the given {@code Readable} until the end of the stream is reached.
   * Returns the total number of chars read. Does not close the stream.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineReader.java,<init>,com.google.common.io.LineReader:<init>(java.lang.Readable),56,59,"/**
* Initializes a new LineReader instance from a given Readable object.
* @param readable the source of the data to be read
*/",Creates a new instance that will read lines from the given {@code Readable} object.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closeables.java,closeQuietly,com.google.common.io.Closeables:closeQuietly(java.io.InputStream),112,118,"/**
* Closes an input stream quietly, propagating any I/O exceptions.
* @param inputStream the stream to close
*/","* Closes the given {@link InputStream}, logging any {@code IOException} that's thrown rather than
   * propagating it.
   *
   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an
   * I/O resource, it should generally be safe in the case of a resource that's being used only for
   * reading, such as an {@code InputStream}. Unlike with writable resources, there's no chance that
   * a failure that occurs when closing the stream indicates a meaningful problem such as a failure
   * to flush all bytes to the underlying resource.
   *
   * @param inputStream the input stream to be closed, or {@code null} in which case this method
   *     does nothing
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closeables.java,closeQuietly,com.google.common.io.Closeables:closeQuietly(java.io.Reader),133,139,"/**
* Closes the given Reader instance quietly.
* @param reader Reader to be closed
*/","* Closes the given {@link Reader}, logging any {@code IOException} that's thrown rather than
   * propagating it.
   *
   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an
   * I/O resource, it should generally be safe in the case of a resource that's being used only for
   * reading, such as a {@code Reader}. Unlike with writable resources, there's no chance that a
   * failure that occurs when closing the reader indicates a meaningful problem such as a failure to
   * flush all bytes to the underlying resource.
   *
   * @param reader the reader to be closed, or {@code null} in which case this method does nothing
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,openInputStream,com.google.common.io.FileBackedOutputStream:openInputStream(),165,173,"/**
* Returns an InputStream for the file or memory content.
* @throws IOException if access to file or memory fails
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,update,com.google.common.io.FileBackedOutputStream:update(int),232,255,"/**
* Updates internal state by transferring buffered data to a temporary file.
* @param len amount of new data to be added
*/","* Checks if writing {@code len} bytes would go over threshold, and switches to file buffering if
   * so.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,reset,com.google.common.io.FileBackedOutputStream:reset(),181,199,"/**
* Resets internal state and deletes temporary files.
* @throws IOException if unable to delete temporary file
*/","* Calls {@link #close} if not already closed, and then resets this object back to its initial
   * state, for reuse. If data was buffered to a file, it will be deleted.
   *
   * @throws IOException if an I/O error occurred while deleting the file buffer",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,asCharSource,"com.google.common.io.Files:asCharSource(java.io.File,java.nio.charset.Charset)",209,211,"/**
* Converts a File to a CharSource.
* @param file file to be converted
* @param charset character encoding used for conversion
*/","* Returns a new {@link CharSource} for reading character data from the given file using the given
   * character set.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Flushables.java,flushQuietly,com.google.common.io.Flushables:flushQuietly(java.io.Flushable),70,77,"/**
* Flushed Flushable object quietly, suppressing IOExceptions.
* @param flushable object to be flushed
*/","* Equivalent to calling {@code flush(flushable, true)}, but with no {@code IOException} in the
   * signature.
   *
   * @param flushable the {@code Flushable} object to be flushed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,checkAllowsInsecure,"com.google.common.io.MoreFiles:checkAllowsInsecure(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[])",743,748,"/**
* Throws exception if insecure recursive delete is not explicitly allowed.
* @param path directory to recursively delete
* @throws InsecureRecursiveDeleteException if ALLOW_INSECURE option is missing
*/","Checks that the given options allow an insecure delete, throwing an exception if not.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,grow,com.google.common.io.ReaderInputStream:grow(java.nio.CharBuffer),194,200,"/**
* Doubles the capacity of a CharBuffer and returns the new buffer. 
* @param buf original CharBuffer to grow
*/","Returns a new CharBuffer identical to buf, except twice the capacity.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineBuffer.java,add,"com.google.common.io.LineBuffer:add(char[],int,int)",52,86,"/**
* Appends a substring to the buffer while handling newline and return characters.
* @param cbuf input character array
* @param off starting offset in cbuf
* @param len length of substring to append
*/","* Process additional characters from the stream. When a line separator is found the contents of
   * the line and the line separator itself are passed to the abstract {@link #handleLine} method.
   *
   * @param cbuf the character buffer to process
   * @param off the offset into the buffer
   * @param len the number of characters to process
   * @throws IOException if an I/O error occurs
   * @see #finish",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineBuffer.java,finish,com.google.common.io.LineBuffer:finish(),104,108,"/**
* Completes processing of current input line.
*/","* Subclasses must call this method after finishing character processing, in order to ensure that
   * any unterminated line in the buffer is passed to {@link #handleLine}.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readByte,com.google.common.io.LittleEndianDataInputStream:readByte(),210,214,"/**
* Reads and returns a signed byte from the input stream.
* @return a signed byte value or -1 if end of stream reached.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readBoolean,com.google.common.io.LittleEndianDataInputStream:readBoolean(),216,220,"/**
* Reads and returns true if the next byte is non-zero, false otherwise.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readUnsignedShort,com.google.common.io.LittleEndianDataInputStream:readUnsignedShort(),97,104,"/**
* Reads and combines two bytes into an unsigned short integer.
*/","* Reads an unsigned {@code short} as specified by {@link DataInputStream#readUnsignedShort()},
   * except using little-endian byte order.
   *
   * @return the next two bytes of the input stream, interpreted as an unsigned 16-bit integer in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readInt,com.google.common.io.LittleEndianDataInputStream:readInt(),114,123,"/**
* Reads and returns a 32-bit integer from the input stream.
*/","* Reads an integer as specified by {@link DataInputStream#readInt()}, except using little-endian
   * byte order.
   *
   * @return the next four bytes of the input stream, interpreted as an {@code int} in little-endian
   *     byte order
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readLong,com.google.common.io.LittleEndianDataInputStream:readLong(),133,146,"/**
* Reads and combines 8 bytes into a long integer.
*/","* Reads a {@code long} as specified by {@link DataInputStream#readLong()}, except using
   * little-endian byte order.
   *
   * @return the next eight bytes of the input stream, interpreted as a {@code long} in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeChar,com.google.common.io.LittleEndianDataOutputStream:writeChar(int),82,85,"/**
* Writes a single character to the output stream.
* @param v character value to be written
*/","* Writes a char as specified by {@link DataOutputStream#writeChar(int)}, except using
   * little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeFloat,com.google.common.io.LittleEndianDataOutputStream:writeFloat(float),117,120,"/**
* Writes a float value as an integer.
* @param v the float value to be written
*/","* Writes a {@code float} as specified by {@link DataOutputStream#writeFloat(float)}, except using
   * little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeLong,com.google.common.io.LittleEndianDataOutputStream:writeLong(long),142,145,"/**
* Writes a long integer value to the output stream in big-endian byte order.
* @param v the long integer value to be written
*/","* Writes a {@code long} as specified by {@link DataOutputStream#writeLong(long)}, except using
   * little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,size,com.google.common.io.MoreFiles$PathByteSource:size(),145,158,"/**
* Returns the file size in bytes. Throws IOException for directories and symbolic links.
* @throws IOException if file type cannot be read
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteRecursivelyInsecure,com.google.common.io.MoreFiles:deleteRecursivelyInsecure(java.nio.file.Path),664,683,"/**
* Deletes a directory and its contents recursively using an insecure method.
* @param path directory to delete
* @return collection of IOExceptions if deletion fails, null otherwise
*/","* Insecure recursive delete for file systems that don't support {@code SecureDirectoryStream}.
   * Returns a collection of exceptions that occurred or null if no exceptions were thrown.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteDirectoryContentsSecure,com.google.common.io.MoreFiles:deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream),646,658,"/**
* Recursively deletes directory contents and returns accumulated IOExceptions.
* @param dir SecureDirectoryStream to delete from
* @return Collection of IOExceptions or null if successful
*/","* Secure method for deleting the contents of a directory using {@code SecureDirectoryStream}.
   * Returns a collection of exceptions that occurred or null if no exceptions were thrown.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,advance,com.google.common.io.MultiInputStream:advance(),62,67,"/**
* Advances to the next item and opens its input stream.
* @throws IOException on I/O error
*/","Closes the current input stream and opens the next one, if any.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,advance,com.google.common.io.MultiReader:advance(),45,50,"/**
* Advances to the next item in the iterator and opens its stream.
* @throws IOException on I/O error
*/","Closes the current reader and opens the next one, if any.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,asCharSource,"com.google.common.io.Resources:asCharSource(java.net.URL,java.nio.charset.Charset)",83,85,"/**
* Wraps a URL as a character source with specified charset.
* @param url resource to wrap
* @param charset encoding for the character source
*/","* Returns a {@link CharSource} that reads from the given URL using the given character set.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,roundToDoubleArbitrarily,com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:roundToDoubleArbitrarily(java.math.BigInteger),334,337,"/**
* Converts BigInteger to a double value.
* @param bigInteger input BigInteger to convert
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,divide,"com.google.common.math.IntMath:divide(int,int,java.math.RoundingMode)",312,367,"/**
* Divides two integers with optional rounding.
* @param p dividend
* @param q divisor (must be non-zero)
* @param mode RoundingMode to apply when remainder is not zero
* @return quotient with applied rounding, or throws exception if invalid mode
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,divide,"com.google.common.math.LongMath:divide(long,long,java.math.RoundingMode)",377,430,"/**
* Performs division and rounding according to specified RoundingMode.
* @param p dividend
* @param q divisor (must be non-zero)
* @param mode rounding mode
* @return quotient with applied rounding
*/","* Returns the result of dividing {@code p} by {@code q}, rounding using the specified {@code
   * RoundingMode}. If the {@code RoundingMode} is {@link RoundingMode#DOWN}, then this method is
   * equivalent to regular Java division, {@code p / q}; and if it is {@link RoundingMode#FLOOR},
   * then this method is equivalent to {@link Math#floorDiv(long,long) Math.floorDiv}{@code (p, q)}.
   *
   * @throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a}
   *     is not an integer multiple of {@code b}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,factorial,com.google.common.math.DoubleMath:factorial(int),305,318,"/**
* Computes the factorial of a non-negative integer.
* @param n input value
* @return factorial result or infinity if too large
*/","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if
   * {@code n == 0}, or {@code n!}, or {@link Double#POSITIVE_INFINITY} if {@code n! >
   * Double.MAX_VALUE}.
   *
   * <p>The result is within 1 ulp of the true value.
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,pow,"com.google.common.math.IntMath:pow(int,int)",221,253,"/**
* Computes power of a base number 'b' raised to an exponent 'k'.
* @param b the base number
* @param k the exponent
* @return result of b^k or 0 if Integer.SIZE is exceeded
*/","* Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to
   * {@code BigInteger.valueOf(b).pow(k).intValue()}. This implementation runs in {@code O(log k)}
   * time.
   *
   * <p>Compare {@link #checkedPow}, which throws an {@link ArithmeticException} upon overflow.
   *
   * @throws IllegalArgumentException if {@code k < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,gcd,"com.google.common.math.IntMath:gcd(int,int)",402,445,"/**
* Calculates the greatest common divisor (GCD) of two integers using the binary GCD algorithm.
* @param a first integer
* @param b second integer
* @return nonnegative GCD value
*/","* Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b ==
   * 0}.
   *
   * @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,factorial,com.google.common.math.IntMath:factorial(int),626,629,"/**
* Calculates the factorial of a given non-negative integer.
* @param n input value, must be >= 0
*/","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if
   * {@code n == 0}, or {@link Integer#MAX_VALUE} if the result does not fit in a {@code int}.
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,binomial,"com.google.common.math.IntMath:binomial(int,int)",653,676,"/**
* Calculates the binomial coefficient using dynamic programming.
* @param n total number of items
* @param k number of selected items
* @return binomial coefficient or Integer.MAX_VALUE if too large
*/","* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
   * {@code k}, or {@link Integer#MAX_VALUE} if the result does not fit in an {@code int}.
   *
   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0} or {@code k > n}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,pow,"com.google.common.math.LongMath:pow(long,int)",262,296,"/**
* Computes the power of base 'b' raised to exponent 'k'.
* @param b base value
* @param k exponent (non-negative integer)
* @return result of pow(b, k) or throws AssertionError for invalid inputs. 
*/","* Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to
   * {@code BigInteger.valueOf(b).pow(k).longValue()}. This implementation runs in {@code O(log k)}
   * time.
   *
   * @throws IllegalArgumentException if {@code k < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,factorial,com.google.common.math.LongMath:factorial(int),755,759,"/**
* Calculates the factorial of a given integer.
* @param n non-negative integer value
*/","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if
   * {@code n == 0}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}.
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,listProduct,com.google.common.math.BigIntegerMath:listProduct(java.util.List),436,438,"/**
* Calculates product of all numbers in the given list.
* @param nums list of BigInteger numbers
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,checkFinite,com.google.common.math.DoubleMath:checkFinite(double),524,529,"/**
* Checks if input is finite and returns it.
* @param argument value to validate, must be a finite number
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleUtils.java,getSignificand,com.google.common.math.DoubleUtils:getSignificand(double),63,69,"/**
* Extracts the significand from a double value.
* @param d input number
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,mapping,"com.google.common.math.LinearTransformation:mapping(double,double)",53,56,"/**
* Initializes linear transformation builder with a point (x1, y1).
* @param x1 x-coordinate of the point
* @param y1 y-coordinate of the point
*/","* Start building an instance which maps {@code x = x1} to {@code y = y1}. Both arguments must be
   * finite. Call either {@link LinearTransformationBuilder#and} or {@link
   * LinearTransformationBuilder#withSlope} on the returned object to finish building the instance.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,fuzzyEquals,"com.google.common.math.DoubleMath:fuzzyEquals(double,double,double)",363,369,"/**
* Checks if two doubles are within a specified tolerance.
* @param a first double value
* @param b second double value
* @param tolerance maximum allowed difference
* @return true if values are equal withing tolerance, false otherwise
*/","* Returns {@code true} if {@code a} and {@code b} are within {@code tolerance} of each other.
   *
   * <p>Technically speaking, this is equivalent to {@code Math.abs(a - b) <= tolerance ||
   * Double.valueOf(a).equals(Double.valueOf(b))}.
   *
   * <p>Notable special cases include:
   *
   * <ul>
   *   <li>All NaNs are fuzzily equal.
   *   <li>If {@code a == b}, then {@code a} and {@code b} are always fuzzily equal.
   *   <li>Positive and negative zero are always fuzzily equal.
   *   <li>If {@code tolerance} is zero, and neither {@code a} nor {@code b} is NaN, then {@code a}
   *       and {@code b} are fuzzily equal if and only if {@code a == b}.
   *   <li>With {@link Double#POSITIVE_INFINITY} tolerance, all non-NaN values are fuzzily equal.
   *   <li>With finite tolerance, {@code Double.POSITIVE_INFINITY} and {@code
   *       Double.NEGATIVE_INFINITY} are fuzzily equal only to themselves.
   * </ul>
   *
   * <p>This is reflexive and symmetric, but <em>not</em> transitive, so it is <em>not</em> an
   * equivalence relation and <em>not</em> suitable for use in {@link Object#equals}
   * implementations.
   *
   * @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN
   * @since 13.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/ToDoubleRounder.java,roundToDouble,"com.google.common.math.ToDoubleRounder:roundToDouble(java.lang.Number,java.math.RoundingMode)",45,151,"/**
* Rounds a double value to the nearest integer according to the specified rounding mode.
* @param x the double value to be rounded
* @param mode the rounding mode, one of: DOWN, FLOOR, CEILING, UP, HALF_DOWN, HALF_UP, HALF_EVEN, UNNECESSARY
*/",Rounds {@code x} to a {@code double}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,ceilingPowerOfTwo,com.google.common.math.IntMath:ceilingPowerOfTwo(int),63,69,"/**
* Calculates the smallest power of two greater than or equal to x.
* @param x input value
*/","* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to
   * {@code checkedPow(2, log2(x, CEILING))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException of the next-higher power of two is not representable as an {@code
   *     int}, i.e. when {@code x > 2^30}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,floorPowerOfTwo,com.google.common.math.IntMath:floorPowerOfTwo(int),78,81,"/**
* Returns the largest power of two less than or equal to x.
* @param x input value (must be positive)
*/","* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code
   * checkedPow(2, log2(x, FLOOR))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,log2,"com.google.common.math.IntMath:log2(int,java.math.RoundingMode)",114,141,"/**
* Calculates the base-2 logarithm of a positive integer.
* @param mode rounding mode for half-way cases
* @return integer logarithm value or throws AssertionError if invalid mode
*/","* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of two",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,log10Floor,com.google.common.math.IntMath:log10Floor(int),178,192,"/**
* Calculates floor(log10(x)) using a branch-free implementation.
* @param x input value
* @return floor(log10(x)) or null if not found (not applicable here)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,sqrt,"com.google.common.math.IntMath:sqrt(int,java.math.RoundingMode)",262,294,"/**
* Computes square root of a number with specified rounding mode.
* @param x non-negative integer to find square root of
* @param mode RoundingMode to apply (e.g. UNNECESSARY, FLOOR)
* @return square root value or throws AssertionError if invalid input
*/","* Returns the square root of {@code x}, rounded with the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x < 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code
   *     sqrt(x)} is not an integer",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedAdd,"com.google.common.math.IntMath:checkedAdd(int,int)",455,458,"/**
* Safely adds two integers using Math.addExact.
* @param a first integer
* @param b second integer
* @return their sum or throws ArithmeticException if overflow occurs.","* Returns the sum of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#addExact(int, int)} instead.
   *
   * @throws ArithmeticException if {@code a + b} overflows in signed {@code int} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedSubtract,"com.google.common.math.IntMath:checkedSubtract(int,int)",468,471,"/**
* Performs safe integer subtraction.
* @param a first operand
* @param b second operand
* @return result of subtraction or throws ArithmeticException if overflow occurs
*/","* Returns the difference of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#subtractExact(int, int)} instead.
   *
   * @throws ArithmeticException if {@code a - b} overflows in signed {@code int} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedMultiply,"com.google.common.math.IntMath:checkedMultiply(int,int)",481,484,"/**
* Safely multiplies two integers.
* @param a first integer
* @param b second integer
*/","* Returns the product of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#multiplyExact(int, int)} instead.
   *
   * @throws ArithmeticException if {@code a * b} overflows in signed {@code int} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,"com.google.common.math.LinearTransformation$RegularLinearTransformation:<init>(double,double)",174,178,"/**
* Initializes a regular linear transformation with specified slope and intercept.
* @param slope the line's slope
* @param yIntercept the line's y-intercept
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,"com.google.common.math.LinearTransformation$RegularLinearTransformation:<init>(double,double,com.google.common.math.LinearTransformation)",180,184,"/**
* Initializes a regular linear transformation with specified parameters.
* @param slope the line's slope
* @param yIntercept the line's y-intercept
* @param inverse the inverse transformation (if any)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,com.google.common.math.LinearTransformation$VerticalLinearTransformation:<init>(double),232,235,"/**
* Initializes a vertical linear transformation with a given scale factor.
* @param x scale factor for vertical transformation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,"com.google.common.math.LinearTransformation$VerticalLinearTransformation:<init>(double,com.google.common.math.LinearTransformation)",237,240,"/**
* Initializes vertical linear transformation with specified scale factor and inverse. 
* @param x scale factor
* @param inverse inverse linear transformation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,testWitness,"com.google.common.math.LongMath$MillerRabinTester:testWitness(long,long)",1184,1207,"/**
* Verifies whether base is a witness to the compositeness of n.
* @param base potential witness
* @param n number to test for compositeness
* @return true if base is a valid witness, false otherwise
*/",Returns true if n is a strong probable prime relative to the specified base.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,ceilingPowerOfTwo,com.google.common.math.LongMath:ceilingPowerOfTwo(long),63,69,"/**
* Calculates the smallest power of two greater than or equal to x.
* @param x input value
*/","* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to
   * {@code checkedPow(2, log2(x, CEILING))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException of the next-higher power of two is not representable as a {@code
   *     long}, i.e. when {@code x > 2^62}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,floorPowerOfTwo,com.google.common.math.LongMath:floorPowerOfTwo(long),78,84,"/**
* Calculates the largest power of two less than or equal to x.
* @param x input value, must be positive
*/","* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code
   * checkedPow(2, log2(x, FLOOR))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,log2,"com.google.common.math.LongMath:log2(long,java.math.RoundingMode)",116,143,"/**
* Calculates the base-2 logarithm of a given positive value.
* @param x input value
* @param mode rounding mode to apply when result is not an integer
* @return log2(x) as an integer; null if x is not positive
*/","* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of two",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,log10Floor,com.google.common.math.LongMath:log10Floor(long),181,196,"/**
* Computes floor(log10(x)) using a branch-free implementation based on Hacker's Delight Fig. 11-5.
* @param x input value
* @return floor(log10(x)) or an approximation if x < 10^y (y = maxLog10ForLeadingZeros[log2(x)])
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,gcd,"com.google.common.math.LongMath:gcd(long,long)",488,531,"/**
* Calculates the greatest common divisor (GCD) of two integers using the binary GCD algorithm.
* @param a non-negative integer
* @param b non-negative integer
* @return GCD value or one of the input values if it is zero
*/","* Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b ==
   * 0}.
   *
   * @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,mod,"com.google.common.math.LongMath:mod(long,int)",450,454,"/**
* Calculates remainder of a long number divided by an integer modulus.
* @param x dividend value
* @param m modulus value
* @return remainder value in range [0, m)
*/","* Returns {@code x mod m}, a non-negative value less than {@code m}. This differs from {@code x %
   * m}, which might be negative.
   *
   * <p>For example:
   *
   * {@snippet :
   * mod(7, 4) == 3
   * mod(-7, 4) == 1
   * mod(-1, 4) == 3
   * mod(-8, 4) == 0
   * mod(8, 4) == 0
   * }
   *
   * @throws ArithmeticException if {@code m <= 0}
   * @see <a href=""http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.17.3"">
   *     Remainder Operator</a>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedAdd,"com.google.common.math.LongMath:checkedAdd(long,long)",541,544,"/**
* Safely adds two long integers with overflow checking.
* @param a first integer to add
* @param b second integer to add
* @return sum of the two integers
*/","* Returns the sum of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#addExact(long, long)} instead.
   *
   * @throws ArithmeticException if {@code a + b} overflows in signed {@code long} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedSubtract,"com.google.common.math.LongMath:checkedSubtract(long,long)",554,557,"/**
* Performs checked subtraction of two long values.
* @param a first number
* @param b second number
* @return result of subtraction or throws ArithmeticException if overflow occurs
*/","* Returns the difference of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#subtractExact(long, long)} instead.
   *
   * @throws ArithmeticException if {@code a - b} overflows in signed {@code long} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedMultiply,"com.google.common.math.LongMath:checkedMultiply(long,long)",567,570,"/**
* Safely multiplies two integers using exact arithmetic.
* @param a first integer value
* @param b second integer value
*/","* Returns the product of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#multiplyExact(long, long)} instead.
   *
   * @throws ArithmeticException if {@code a * b} overflows in signed {@code long} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,saturatedPow,"com.google.common.math.LongMath:saturatedPow(long,int)",698,745,"/**
* Computes the saturated power of a long value, using a switch for small bases and a loop for large bases.
* @param b base value
* @param k exponent (must be non-negative)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,count,com.google.common.math.PairedStats:count(),67,69,"/**
* Returns the total count of items from underlying statistics.
* @return Total item count as a long value
*/",Returns the number of pairs in the dataset.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,equals,com.google.common.math.PairedStats:equals(java.lang.Object),215,227,"/**
* Compares this PairedStats object with another for equality.
* @param obj Object to compare, must be of same type
* @return true if objects are equal, false otherwise
*/","* {@inheritDoc}
   *
   * <p><b>Note:</b> This tests exact equality of the calculated statistics, including the floating
   * point values. Two instances are guaranteed to be considered equal if one is copied from the
   * other using {@code second = new PairedStatsAccumulator().addAll(first).snapshot()}, if both
   * were obtained by calling {@code snapshot()} on the same {@link PairedStatsAccumulator} without
   * adding any values in between the two calls, or if one is obtained from the other after
   * round-tripping through java serialization. However, floating point rounding errors mean that it
   * may be false for some instances where the statistics are mathematically equal, including
   * instances constructed from the same values in a different order... or (in the general case)
   * even in the same order. (It is guaranteed to return true for instances constructed from the
   * same values in the same order if {@code strictfp} is in effect, or if the system architecture
   * guarantees {@code strictfp}-like semantics.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,<init>,com.google.common.math.PairedStatsAccumulator:<init>(),37,37,"/**
* Initializes an empty PairedStatsAccumulator instance. 
*/",Creates a new accumulator.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,calculateNewMeanNonFinite,"com.google.common.math.StatsAccumulator:calculateNewMeanNonFinite(double,double)",404,429,"/**
* Calculates new mean by applying naive mean formula with non-finite value handling.
* @param previousMean the current mean
* @param value the new value to add
* @return the updated mean (NaN if non-finite values mismatch)
*/","* Calculates the new value for the accumulated mean when a value is added, in the case where at
   * least one of the previous mean and the value is non-finite.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,count,com.google.common.math.PairedStatsAccumulator:count(),100,102,"/**
* Returns the total count of elements.
* @return Total element count
*/",Returns the number of pairs in the dataset.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,ensureInUnitRange,com.google.common.math.PairedStatsAccumulator:ensureInUnitRange(double),241,243,"/**
* Conforms input value to the range [-1.0, 1.0].
* @param value input value to be constrained
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,median,com.google.common.math.Quantiles:median(),142,144,"/**
 * Calculates and returns the median value of the current data set.
 */",Specifies the computation of a median (i.e. the 1st 2-quantile).,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,quartiles,com.google.common.math.Quantiles:quartiles(),147,149,"/**
* Calculates quartile scale.
* @return Scale value of 4
*/",Specifies the computation of quartiles (i.e. 4-quantiles).,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,percentiles,com.google.common.math.Quantiles:percentiles(),152,154,"/**
* Returns a Scale instance with values scaled to 0-100 percentiles. 
* @return Scale object representing 100th percentile scale
*/",Specifies the computation of percentiles (i.e. 100-quantiles).,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,movePivotToStartOfSlice,"com.google.common.math.Quantiles:movePivotToStartOfSlice(double[],int,int)",603,620,"/**
* Reorders elements in the given slice so that the pivot element (at index 'from') is at the start of the slice.
* @param array input array
* @param from index of the pivot element
* @param to end index of the slice
*/","* Selects the pivot to use, namely the median of the values at {@code from}, {@code to}, and
   * halfway between the two (rounded down), from {@code array}, and ensure (by swapping elements if
   * necessary) that that pivot value appears at the start of the slice i.e. at {@code from}.
   * Expects that {@code from} is strictly less than {@code to}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,readFrom,com.google.common.math.Stats:readFrom(java.nio.ByteBuffer),647,660,"/**
* Reads Stats object from ByteBuffer.
* @param buffer ByteBuffer containing stats data
*/","* Creates a Stats instance from the byte representation read from the given {@link ByteBuffer}.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.
   *
   * @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as
   *     {@link ByteOrder#LITTLE_ENDIAN}, from which a BYTES-long byte representation of this
   *     instance is read. In the process increases the position of {@link ByteBuffer} by BYTES.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,snapshot,com.google.common.math.StatsAccumulator:snapshot(),220,222,"/**
 * Creates a snapshot of current statistics.
 * @return Stats object encapsulating current count, mean, and other metrics
 */",Returns an immutable snapshot of the current statistics.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,getPort,com.google.common.net.HostAndPort:getPort(),111,114,"/**
* Returns the port number when hasPort() is true.
* @return Port number if valid, otherwise throws exception
*/","* Get the current port number, failing if no port is defined.
   *
   * @return a validated port number, in the range [0..65535]
   * @throws IllegalStateException if no port is defined. You can use {@link #withDefaultPort(int)}
   *     to prevent this from occurring.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,getPortOrDefault,com.google.common.net.HostAndPort:getPortOrDefault(int),117,119,"/**
* Returns current port value if available; otherwise returns specified default port.
* @param defaultPort default port to use when current port is unavailable
*/","Returns the current port number, with a default if no port is defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,toString,com.google.common.net.HostAndPort:toString(),295,308,"/**
* Formats host and port into a string representation.
* @return Formatted string in the format [host]:port or just host if no port
*/","Rebuild the host:port string, including brackets if necessary.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,withDefaultPort,com.google.common.net.HostAndPort:withDefaultPort(int),249,255,"/**
* Sets the default port for this host and port.
* @param defaultPort the new default port value
*/","* Provide a default port if the parsed string contained only a host.
   *
   * <p>You can chain this after {@link #fromString(String)} to include a port in case the port was
   * omitted from the input string. If a port was already provided, then this method is a no-op.
   *
   * @param defaultPort a port number, from [0..65535]
   * @return a HostAndPort instance, guaranteed to have a defined port.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,textToNumericFormatV4,com.google.common.net.InetAddresses:textToNumericFormatV4(java.lang.String),241,264,"/**
* Converts IP string to numeric format V4.
* @param ipString IPv4 address as a string
* @return byte[] array of octets or null if invalid
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,textToNumericFormatV6,com.google.common.net.InetAddresses:textToNumericFormatV6(java.lang.String),266,334,"/**
* Converts IPv6 address string to numeric format.
* @param ipString IPv6 address string
* @return byte array representation of the IP address or null if invalid
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,toAddrString,com.google.common.net.InetAddresses:toAddrString(java.net.InetAddress),466,481,"/**
* Converts InetAddress to a human-readable string representation.
* @param ip IP address object
* @return formatted IPv4 or IPv6 address string
*/","* Returns the string representation of an {@link InetAddress}.
   *
   * <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6
   * addresses, the output follows <a href=""http://tools.ietf.org/html/rfc5952"">RFC 5952</a> section
   * 4. The main difference is that this method uses ""::"" for zero compression, while Java's version
   * uses the uncompressed form (except on Android, where the zero compression is also done). The
   * other difference is that this method outputs any scope ID in the format that it was provided at
   * creation time, while Android may always output it as an interface name, even if it was supplied
   * as a numeric ID.
   *
   * <p>This method uses hexadecimal for all IPv6 addresses, including IPv4-mapped IPv6 addresses
   * such as ""::c000:201"".
   *
   * @param ip {@link InetAddress} to be converted to an address string
   * @return {@code String} containing the text-formatted IP address
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,isIsatapAddress,com.google.common.net.InetAddresses:isIsatapAddress(java.net.Inet6Address),857,875,"/**
* Checks if the given IPv6 address is an ISATAP address.
* @param ip the IP address to check
* @return true if the address is an ISATAP address, false otherwise
*/","* Evaluates whether the argument is an ISATAP address.
   *
   * <p>From RFC 5214: ""ISATAP interface identifiers are constructed in Modified EUI-64 format [...]
   * by concatenating the 24-bit IANA OUI (00-00-5E), the 8-bit hexadecimal value 0xFE, and a 32-bit
   * IPv4 address in network byte order [...]""
   *
   * <p>For more on ISATAP addresses see section 6.1 of <a target=""_parent""
   * href=""http://tools.ietf.org/html/rfc5214#section-6.1"">RFC 5214</a>.
   *
   * @param ip {@link Inet6Address} to be examined for ISATAP address format
   * @return {@code true} if the argument is an ISATAP address",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,hasEmbeddedIPv4ClientAddress,com.google.common.net.InetAddresses:hasEmbeddedIPv4ClientAddress(java.net.Inet6Address),902,904,"/**
* Checks if the given IPv6 address contains an embedded IPv4 client address.
* @param ip IPv6 address to check
* @return true if the address has an embedded IPv4 client, false otherwise
*/","* Examines the Inet6Address to determine if it is an IPv6 address of one of the specified address
   * types that contain an embedded IPv4 address.
   *
   * <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial
   * spoofability. With other transition addresses spoofing involves (at least) infection of one's
   * BGP routing table.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 client address
   * @return {@code true} if there is an embedded IPv4 client address
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,previewChar,com.google.common.net.MediaType$Tokenizer:previewChar(),1183,1186,"/**
* Returns the next character from the input stream.
* @return next character or an invalid value if no more characters available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,<init>,com.google.common.primitives.Booleans$BooleanArrayAsList:<init>(boolean[]),395,397,"/**
* Constructs list from boolean array starting at specified index.
* @param array boolean array to convert
* @param offset starting index in the array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,equals,com.google.common.primitives.Booleans$BooleanArrayAsList:equals(java.lang.Object),471,490,"/**
* Compares this BooleanArrayAsList to another object for equality.
* @param object the object to compare with
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,toString,com.google.common.primitives.Booleans$BooleanArrayAsList:toString(),501,509,"/**
* Returns a human-readable string representation of the array segment.
* @return comma-separated list of boolean values enclosed in square brackets
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,hashCode,com.google.common.primitives.Booleans$BooleanArrayAsList:hashCode(),492,499,"/**
* Calculates the hash code of a portion of an array.
* @param array array containing boolean values
* @param start starting index of the portion
* @param end ending index of the portion (exclusive)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,toArray,com.google.common.primitives.Booleans:toArray(java.util.Collection),354,367,"/**
* Converts a collection of Booleans to a primitive boolean array.
* @param collection Collection of Boolean values
* @return Primitive boolean array or null if collection is null
*/","* Copies a collection of {@code Boolean} instances into a new array of primitive {@code boolean}
   * values.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * <p><b>Note:</b> consider representing the collection as a {@link java.util.BitSet} instead.
   *
   * @param collection a collection of {@code Boolean} objects
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,indexOf,"com.google.common.primitives.Booleans:indexOf(boolean[],boolean)",162,164,"/**
* Searches for the index of a specified boolean value in an array.
* @param array the boolean array to search
* @param target the boolean value to find
*/","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead, and
   * using {@link java.util.BitSet#nextSetBit(int)} or {@link java.util.BitSet#nextClearBit(int)}.
   *
   * @param array an array of {@code boolean} values, possibly empty
   * @param target a primitive {@code boolean} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,lastIndexOf,"com.google.common.primitives.Booleans:lastIndexOf(boolean[],boolean)",213,215,"/**
* Searches for the last occurrence of a target value in an array.
* @param array input boolean array
* @param target target boolean value to search for
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code boolean} values, possibly empty
   * @param target a primitive {@code boolean} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,<init>,com.google.common.primitives.Bytes$ByteArrayAsList:<init>(byte[]),262,264,"/**
* Initializes list from byte array.
* @param array input byte array
* @param offset starting index (assumed to be 0 if not specified)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,equals,com.google.common.primitives.Bytes$ByteArrayAsList:equals(java.lang.Object),337,356,"/**
* Compares this ByteArrayAsList instance with another object for equality.
* @param object the object to compare, or null
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,toString,com.google.common.primitives.Bytes$ByteArrayAsList:toString(),367,375,"/**
* Returns a string representation of the array, formatted as [element0, element1, ..., elementN].
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,hashCode,com.google.common.primitives.Bytes$ByteArrayAsList:hashCode(),358,365,"/**
* Computes the hash code of an array segment.
* @return unique hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,toArray,com.google.common.primitives.Bytes:toArray(java.util.Collection),220,233,"/**
* Converts a collection of numbers to a byte array.
* @param collection Collection of Number objects
* @return Byte array representation or null if input is ByteArrayAsList
*/","* Returns an array containing each value of {@code collection}, converted to a {@code byte} value
   * in the manner of {@link Number#byteValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Byte>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,indexOf,"com.google.common.primitives.Bytes:indexOf(byte[],byte)",92,94,"/**
* Returns index of specified byte in given array.
* @param array the input byte array
* @param target the target byte to search for
*/","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code byte} values, possibly empty
   * @param target a primitive {@code byte} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,lastIndexOf,"com.google.common.primitives.Bytes:lastIndexOf(byte[],byte)",143,145,"/**
* Finds the last index of a specified byte in an array.
* @param array input byte array
* @param target target byte to search for
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code byte} values, possibly empty
   * @param target a primitive {@code byte} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,<init>,com.google.common.primitives.Chars$CharArrayAsList:<init>(char[]),582,584,"/**
* Constructs a list view of the specified character array.
* @param array the underlying character array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,equals,com.google.common.primitives.Chars$CharArrayAsList:equals(java.lang.Object),658,677,"/**
* Compares this CharArrayAsList instance with another object for equality.
* @param object the object to compare with
* @return true if both objects have identical character arrays and indices, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,toString,com.google.common.primitives.Chars$CharArrayAsList:toString(),688,696,"/**
* Returns a string representation of the array slice, formatted as [value0, value1, ...].
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,hashCode,com.google.common.primitives.Chars$CharArrayAsList:hashCode(),679,686,"/**
* Calculates the hash code of a character array within a specified range.
* @param start starting index
* @param end ending index
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,toArray,com.google.common.primitives.Chars:toArray(java.util.Collection),436,449,"/**
* Converts a collection of characters to a character array.
* @param collection collection of characters
* @return char[] representation of the input collection
*/","* Copies a collection of {@code Character} instances into a new array of primitive {@code char}
   * values.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Character} objects
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,compare,"com.google.common.primitives.Chars$LexicographicalComparator:compare(char[],char[])",406,416,"/**
* Compares two character arrays lexicographically.
* @param left first array to compare
* @param right second array to compare
* @return negative/positive integer if left/right is ""less than""/""greater than"", 0 if equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,indexOf,"com.google.common.primitives.Chars:indexOf(char[],char)",150,152,"/**
* Finds index of specified character in given character array.
* @param array The character array to search
* @param target The character to find
*/","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code char} values, possibly empty
   * @param target a primitive {@code char} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,lastIndexOf,"com.google.common.primitives.Chars:lastIndexOf(char[],char)",201,203,"/**
* Finds the last index of a specified character in an array.
* @param array input character array
* @param target character to search for
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code char} values, possibly empty
   * @param target a primitive {@code char} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,fromByteArray,com.google.common.primitives.Chars:fromByteArray(byte[]),326,330,"/**
* Extracts a single character from the specified byte array.
* @param bytes input byte array containing two bytes
*/","* Returns the {@code char} value whose big-endian representation is stored in the first 2 bytes
   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getChar()}. For example, the
   * input byte array {@code {0x54, 0x32}} would yield the {@code char} value {@code '\\u5432'}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,<init>,com.google.common.primitives.Doubles$DoubleArrayAsList:<init>(double[]),590,592,"/**
* Constructs an AsList instance from a double array,
* starting at index 0 and including all elements.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,equals,com.google.common.primitives.Doubles$DoubleArrayAsList:equals(java.lang.Object),671,690,"/**
* Compares this DoubleArrayAsList with another object for equality.
* @param object the object to compare with
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,toString,com.google.common.primitives.Doubles$DoubleArrayAsList:toString(),701,709,"/**
* Returns a string representation of the array subset, enclosed in square brackets.
* @return String containing array elements separated by commas.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,hashCode,com.google.common.primitives.Doubles$DoubleArrayAsList:hashCode(),692,699,"/**
* Computes the hash code of a numeric array by aggregating hash codes of individual elements.
* @return The aggregated hash code value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,hashCode,com.google.common.primitives.ImmutableDoubleArray:hashCode(),596,604,"/**
* Calculates the hash code of a user profile array based on its elements.
* @return a unique integer value representing the array's state
*/",Returns an unspecified hash code for the contents of this immutable array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,toArray,com.google.common.primitives.Doubles:toArray(java.util.Collection),542,555,"/**
* Converts a collection of numbers to a double array.
* @param collection Collection of Number objects
* @return Double array representation or null if collection is not supported
*/","* Returns an array containing each value of {@code collection}, converted to a {@code double}
   * value in the manner of {@link Number#doubleValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Double>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,indexOf,"com.google.common.primitives.Doubles:indexOf(double[],double)",134,136,"/**
* Finds index of specified value in an array.
* @param array input array
* @param target value to search for
*/","* Returns the index of the first appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code double} values, possibly empty
   * @param target a primitive {@code double} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,lastIndexOf,"com.google.common.primitives.Doubles:lastIndexOf(double[],double)",188,190,"/**
* Searches for the last occurrence of a target value in an array.
* @param array input array to search
* @param target value to find
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code double} values, possibly empty
   * @param target a primitive {@code double} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,<init>,com.google.common.primitives.Floats$FloatArrayAsList:<init>(float[]),584,586,"/**
* Initializes list from a float array.
* @param array input array to convert
* @param offset starting index (default=0)
* @param length number of elements (default=array.length)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,equals,com.google.common.primitives.Floats$FloatArrayAsList:equals(java.lang.Object),659,678,"/**
* Compares this FloatArrayAsList instance with another object for equality.
* @param object the object to compare with
* @return true if both objects have identical elements, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,toString,com.google.common.primitives.Floats$FloatArrayAsList:toString(),689,697,"/**
* Returns a string representation of the array, from index 'start' to 'end'.
* @return A comma-separated list of elements enclosed in square brackets.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,hashCode,com.google.common.primitives.Floats$FloatArrayAsList:hashCode(),680,687,"/**
* Calculates the hash code by iterating over an array of floats and combining their individual hash codes.
* @return The combined hash code value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,toArray,com.google.common.primitives.Floats:toArray(java.util.Collection),539,552,"/**
* Converts a Collection of Numbers to a float array.
* @param collection input collection
* @return float array representation or null if not found
*/","* Returns an array containing each value of {@code collection}, converted to a {@code float}
   * value in the manner of {@link Number#floatValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Float>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,indexOf,"com.google.common.primitives.Floats:indexOf(float[],float)",131,133,"/**
* Searches for the index of a specified value in an array.
* @param array the float array to search
* @param target the value to find (in this case, a float)
*/","* Returns the index of the first appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code float} values, possibly empty
   * @param target a primitive {@code float} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,lastIndexOf,"com.google.common.primitives.Floats:lastIndexOf(float[],float)",185,187,"/**
* Finds the index of the last occurrence of the specified target value in the given array.
* @param array the input array to search
* @param target the value to find
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code float} values, possibly empty
   * @param target a primitive {@code float} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,size,com.google.common.primitives.ImmutableDoubleArray$AsList:size(),494,497,"/**
* Returns the number of elements in this collection.
* @return The length of the underlying array (i.e., the collection's size)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,builder,com.google.common.primitives.ImmutableDoubleArray:builder(int),192,195,"/**
* Creates a Builder instance with the specified initial capacity.
* @param initialCapacity minimum size of the underlying collection
*/","* Returns a new, empty builder for {@link ImmutableDoubleArray} instances, sized to hold up to
   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number
   * of values that will be added, if that knowledge is readily available. It is better to guess a
   * value slightly too high than slightly too low. If the value is not exact, the {@link
   * ImmutableDoubleArray} that is built will very likely occupy more memory than strictly
   * necessary; to trim memory usage, build using {@code builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,builder,com.google.common.primitives.ImmutableDoubleArray:builder(),205,207,"/**
* Creates a new instance of Builder with default capacity (10).","* Returns a new, empty builder for {@link ImmutableDoubleArray} instances, with a default initial
   * capacity. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> The {@link ImmutableDoubleArray} that is built will very likely
   * occupy more memory than necessary; to trim memory usage, build using {@code
   * builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,ensureRoomFor,com.google.common.primitives.ImmutableDoubleArray$Builder:ensureRoomFor(int),302,307,"/**
* Ensures the internal array has sufficient capacity to hold 'numberToAdd' more elements.
* @param numberToAdd the number of additional elements required
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,<init>,com.google.common.primitives.ImmutableDoubleArray:<init>(double[]),354,356,"/**
 * Initializes an ImmutableDoubleArray from a double array.
 * @param array the input array
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,indexOf,com.google.common.primitives.ImmutableDoubleArray:indexOf(double),390,397,"/**
* Searches array for target value and returns its index.
* @param target double value to search for
*/","* Returns the smallest index for which {@link #get} returns {@code target}, or {@code -1} if no
   * such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code
   * asList().indexOf(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,lastIndexOf,com.google.common.primitives.ImmutableDoubleArray:lastIndexOf(double),404,411,"/**
* Searches the array from end to start for the last occurrence of the target value.
* @param target double value to search for
* @return index of the last occurrence or -1 if not found
*/","* Returns the largest index for which {@link #get} returns {@code target}, or {@code -1} if no
   * such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code
   * asList().lastIndexOf(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,toString,com.google.common.primitives.ImmutableDoubleArray:toString(),610,623,"/**
* Returns a human-readable string representation of the array.
* @return String containing array elements, or ""[]"" if empty
*/","* Returns a string representation of this array in the same form as {@link
   * Arrays#toString(double[])}, for example {@code ""[1, 2, 3]""}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,readResolve,com.google.common.primitives.ImmutableDoubleArray:readResolve(),643,645,"/**
* Returns this instance if it's populated, otherwise returns an empty instance. 
* Used to resolve instances created from serialization. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,size,com.google.common.primitives.ImmutableIntArray$AsList:size(),489,492,"/**
* Returns the number of elements in this collection.
* @return The count of elements in this collection.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,indexOf,com.google.common.primitives.ImmutableIntArray$AsList:indexOf(java.lang.Object),504,507,"/**
* Searches for integer target value in parent collection.
* @param target integer value to search for
* @return index of found element or -1 if not present
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,contains,com.google.common.primitives.ImmutableIntArray:contains(int),412,414,"/**
 * Checks if an integer is present in the underlying collection.
 * @param target the integer to search for
 */","* Returns {@code true} if {@code target} is present at any index in this array. Equivalent to
   * {@code asList().contains(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,lastIndexOf,com.google.common.primitives.ImmutableIntArray$AsList:lastIndexOf(java.lang.Object),509,512,"/**
* Searches for integer target in parent collection and returns its last index.
* @param target object to search (must be an Integer)
* @return last index of target or -1 if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,builder,com.google.common.primitives.ImmutableIntArray:builder(int),189,192,"/**
* Constructs a Builder instance with the specified initial capacity.
* @param initialCapacity minimum size of the underlying collection
*/","* Returns a new, empty builder for {@link ImmutableIntArray} instances, sized to hold up to
   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number
   * of values that will be added, if that knowledge is readily available. It is better to guess a
   * value slightly too high than slightly too low. If the value is not exact, the {@link
   * ImmutableIntArray} that is built will very likely occupy more memory than strictly necessary;
   * to trim memory usage, build using {@code builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,builder,com.google.common.primitives.ImmutableIntArray:builder(),202,204,"/**
* Returns a new instance of the Builder with default capacity.
* @return Builder object initialized with default parameters
*/","* Returns a new, empty builder for {@link ImmutableIntArray} instances, with a default initial
   * capacity. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> The {@link ImmutableIntArray} that is built will very likely occupy
   * more memory than necessary; to trim memory usage, build using {@code
   * builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,ensureRoomFor,com.google.common.primitives.ImmutableIntArray$Builder:ensureRoomFor(int),299,304,"/**
* Ensures the internal array has sufficient capacity to hold an additional 'numberToAdd' elements.
* @param numberToAdd the number of elements to add
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,<init>,com.google.common.primitives.ImmutableIntArray:<init>(int[]),351,353,"/**
 * Initializes ImmutableIntArray with an array and its bounds.
 * @param array input array
 * @param offset starting index (default=0)
 * @param length number of elements to include (default=array.length)
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,hashCode,com.google.common.primitives.ImmutableIntArray:hashCode(),586,594,"/**
* Calculates a unique hash code based on the array elements between start and end indices.
*/",Returns an unspecified hash code for the contents of this immutable array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,hashCode,com.google.common.primitives.Ints$IntArrayAsList:hashCode(),773,780,"/**
* Computes a hash code based on the array elements between 'start' and 'end'.
* @return unique integer hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,toString,com.google.common.primitives.ImmutableIntArray:toString(),600,613,"/**
* Returns a string representation of the array, with elements comma-separated and enclosed in square brackets.
* @return String representation of the array or ""[]"" if empty
*/","* Returns a string representation of this array in the same form as {@link
   * Arrays#toString(int[])}, for example {@code ""[1, 2, 3]""}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,readResolve,com.google.common.primitives.ImmutableIntArray:readResolve(),633,635,"/**
* Returns this instance if non-empty, otherwise returns an empty version of the same type. 
* Used to implement singleton-like behavior when deserializing instances.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,size,com.google.common.primitives.ImmutableLongArray$AsList:size(),491,494,"/**
* Returns the number of elements in this collection.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,indexOf,com.google.common.primitives.ImmutableLongArray$AsList:indexOf(java.lang.Object),506,509,"/**
* Searches for a Long value in the parent collection.
* @param target Long value to search for
* @return index of target if found, or -1 otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,contains,com.google.common.primitives.ImmutableLongArray:contains(long),414,416,"/**
* Checks if collection contains specified element.
* @param target long value to search for
* @return true if found, false otherwise
*/","* Returns {@code true} if {@code target} is present at any index in this array. Equivalent to
   * {@code asList().contains(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,lastIndexOf,com.google.common.primitives.ImmutableLongArray$AsList:lastIndexOf(java.lang.Object),511,514,"/**
* Searches for the specified object in the parent collection and returns its last index.
* @param target searchable object, can be null
* @return index of the found object or -1 if not found",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,builder,com.google.common.primitives.ImmutableLongArray:builder(int),191,194,"/**
* Creates a new Builder instance with specified initial capacity.
* @param initialCapacity the initial capacity of the builder
*/","* Returns a new, empty builder for {@link ImmutableLongArray} instances, sized to hold up to
   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number
   * of values that will be added, if that knowledge is readily available. It is better to guess a
   * value slightly too high than slightly too low. If the value is not exact, the {@link
   * ImmutableLongArray} that is built will very likely occupy more memory than strictly necessary;
   * to trim memory usage, build using {@code builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,builder,com.google.common.primitives.ImmutableLongArray:builder(),204,206,"/**
* Creates a new instance of Builder with default capacity (10).","* Returns a new, empty builder for {@link ImmutableLongArray} instances, with a default initial
   * capacity. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> The {@link ImmutableLongArray} that is built will very likely
   * occupy more memory than necessary; to trim memory usage, build using {@code
   * builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,ensureRoomFor,com.google.common.primitives.ImmutableLongArray$Builder:ensureRoomFor(int),301,306,"/**
* Ensures the underlying array has sufficient capacity to add 'numberToAdd' elements.
* @param numberToAdd amount of elements to potentially add
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,<init>,com.google.common.primitives.ImmutableLongArray:<init>(long[]),353,355,"/**
* Initializes ImmutableLongArray with given long array.
* @param array input array to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,hashCode,com.google.common.primitives.ImmutableLongArray:hashCode(),588,596,"/**
* Calculates the hash code of a subarray within a larger array.
* @return hash code value
*/",Returns an unspecified hash code for the contents of this immutable array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,hashCode,com.google.common.primitives.Longs$LongArrayAsList:hashCode(),825,832,"/**
* Computes the hash code of a large array by aggregating individual elements.
* @param array array to compute hash code for
* @param start starting index (inclusive)
* @param end ending index (exclusive)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,hashCode,com.google.common.primitives.UnsignedLong:hashCode(),237,240,"/**
* Computes hash code based on the internal value.
* @return unique hash code as an integer.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,toString,com.google.common.primitives.ImmutableLongArray:toString(),602,615,"/**
* Returns a human-readable string representation of the array.
* @return Stringified array contents, or ""[]"" if empty
*/","* Returns a string representation of this array in the same form as {@link
   * Arrays#toString(long[])}, for example {@code ""[1, 2, 3]""}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,readResolve,com.google.common.primitives.ImmutableLongArray:readResolve(),635,637,"/**
* Returns this object (if populated) or the default instance (EMPTY) based on data existence. 
* @return this object if it's not empty, EMPTY otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,<init>,com.google.common.primitives.Ints$IntArrayAsList:<init>(int[]),672,674,"/**
* Constructs an IntArrayList from a given int array.
* @param array input array to create list from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,equals,com.google.common.primitives.Ints$IntArrayAsList:equals(java.lang.Object),752,771,"/**
* Compares this IntArrayAsList instance with another object for equality.
* @param object the object to compare with
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,toString,com.google.common.primitives.Ints$IntArrayAsList:toString(),782,790,"/**
* Returns a string representation of the array, including all elements.
* @return String containing all array elements in [start, end) range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,toArray,com.google.common.primitives.Ints:toArray(java.util.Collection),627,640,"/**
* Converts a Collection of Numbers to an integer array.
* @param collection input collection
*/","* Returns an array containing each value of {@code collection}, converted to a {@code int} value
   * in the manner of {@link Number#intValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Integer>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,indexOf,"com.google.common.primitives.Ints:indexOf(int[],int)",160,162,"/**
 * Finds the index of a specified integer in an array.
 * @param array the array to search
 * @param target the integer to find
 */","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code int} values, possibly empty
   * @param target a primitive {@code int} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,lastIndexOf,"com.google.common.primitives.Ints:lastIndexOf(int[],int)",211,213,"/**
* Finds the index of the rightmost occurrence of a target value in an array.
* @param array input array to search
* @param target value to search for
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code int} values, possibly empty
   * @param target a primitive {@code int} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,<init>,com.google.common.primitives.Longs$LongArrayAsList:<init>(long[]),724,726,"/**
* Initializes list from long array.
* @param array input array of long values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,equals,com.google.common.primitives.Longs$LongArrayAsList:equals(java.lang.Object),804,823,"/**
* Compares this LongArrayAsList object with another for equality.
* @param object Object to compare, can be null
* @return True if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,toString,com.google.common.primitives.Longs$LongArrayAsList:toString(),834,842,"/**
* Returns a string representation of the array segment, including its elements.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,toArray,com.google.common.primitives.Longs:toArray(java.util.Collection),679,692,"/**
* Converts a collection of Numbers to a long array.
* @param collection Collection containing Number elements
*/","* Returns an array containing each value of {@code collection}, converted to a {@code long} value
   * in the manner of {@link Number#longValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Long>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,indexOf,"com.google.common.primitives.Longs:indexOf(long[],long)",121,123,"/**
* Searches for the index of a target value in an array.
* @param array the array to search
* @param target the value to find
*/","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code long} values, possibly empty
   * @param target a primitive {@code long} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,lastIndexOf,"com.google.common.primitives.Longs:lastIndexOf(long[],long)",172,174,"/**
* Searches for the last occurrence of the specified target value in an array.
* @param array the array to search
* @param target the value to find
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code long} values, possibly empty
   * @param target a primitive {@code long} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,tryParse,"com.google.common.primitives.Longs:tryParse(java.lang.String,int)",400,440,"/**
* Parses a string representation of a long value in the given radix.
* @param string string to parse
* @param radix base of the number (MIN_RADIX <= radix <= MAX_RADIX)
* @return parsed Long value or null if invalid or out-of-range.","* Parses the specified string as a signed long value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of a long value
   * @param radix the radix to use when parsing
   * @return the long value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as a long value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ParseRequest.java,fromString,com.google.common.primitives.ParseRequest:fromString(java.lang.String),30,54,"/**
* Parses string value into a ParseRequest object.
* @param stringValue input string to parse
* @return ParseRequest object or throws NumberFormatException for empty strings
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isWrapper,com.google.common.reflect.TypeToken:isWrapper(),554,556,"/**
* Checks if the given type is a wrapper (e.g. Integer, Double, etc.).
* @return true if the type is a wrapper; false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,compare,"com.google.common.primitives.Shorts$LexicographicalComparator:compare(short[],short[])",456,466,"/**
* Compares two short arrays lexicographically.
* @param left the first array
* @param right the second array
* @return negative/zero/positive if left < / = / > right
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,<init>,com.google.common.primitives.Shorts$ShortArrayAsList:<init>(short[]),633,635,"/**
 * Constructor to initialize list from short array.
 * @param array short array containing data
 * @param offset starting index (default=0)
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,equals,com.google.common.primitives.Shorts$ShortArrayAsList:equals(java.lang.Object),708,727,"/**
* Compares this ShortArrayAsList object with the given Object for equality.
* @param object Object to compare with
* @return True if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,toString,com.google.common.primitives.Shorts$ShortArrayAsList:toString(),738,746,"/**
* Returns a string representation of the array, formatted as [element0, element1, ..., elementN].
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,hashCode,com.google.common.primitives.Shorts$ShortArrayAsList:hashCode(),729,736,"/**
* Calculates hash code based on subarray from 'start' to 'end'.
* @param array the input array
* @param start starting index of subarray
* @param end ending index of subarray
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,toArray,com.google.common.primitives.Shorts:toArray(java.util.Collection),591,604,"/**
* Converts a collection of Numbers to an array of shorts.
* @param collection Collection of Numbers to convert
* @return short[] containing the converted values or null if collection is null
*/","* Returns an array containing each value of {@code collection}, converted to a {@code short}
   * value in the manner of {@link Number#shortValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Short>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,indexOf,"com.google.common.primitives.Shorts:indexOf(short[],short)",154,156,"/**
* Returns index of specified short value in given array.
* @param array input short array
* @param target short value to search for
*/","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code short} values, possibly empty
   * @param target a primitive {@code short} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,lastIndexOf,"com.google.common.primitives.Shorts:lastIndexOf(short[],short)",205,207,"/**
* Finds index of last occurrence of specified short value in array.
* @param array input array to search
* @param target target short value to find
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code short} values, possibly empty
   * @param target a primitive {@code short} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,fromByteArray,com.google.common.primitives.Shorts:fromByteArray(byte[]),335,339,"/**
* Converts byte array to a short value.
* @param bytes input array containing two bytes
*/","* Returns the {@code short} value whose big-endian representation is stored in the first 2 bytes
   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getShort()}. For example, the
   * input byte array {@code {0x54, 0x32}} would yield the {@code short} value {@code 0x5432}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,compare,"com.google.common.primitives.SignedBytes$LexicographicalComparator:compare(byte[],byte[])",177,187,"/**
* Compares two byte arrays lexicographically.
* @param left first byte array
* @param right second byte array
* @return negative/positive value if left/right is less/greater, 0 if equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,getBestComparator,com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder:getBestComparator(),446,466,"/**
* Returns the best available comparator for byte arrays.
* @return Comparator instance or a fallback implementation if unavailable
*/","* Returns the Unsafe-using Comparator, or falls back to the pure-Java implementation if unable
     * to do so.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,fromIntBits,com.google.common.primitives.UnsignedInteger:fromIntBits(int),67,69,"/**
* Creates an UnsignedInteger instance from given int value.
* @param bits the int value to represent as UnsignedInteger
*/","* Returns an {@code UnsignedInteger} corresponding to a given bit representation. The argument is
   * interpreted as an unsigned 32-bit value. Specifically, the sign bit of {@code bits} is
   * interpreted as a normal bit, and all other bits are treated as usual.
   *
   * <p>If the argument is nonnegative, the returned result will be equal to {@code bits},
   * otherwise, the result will be equal to {@code 2^32 + bits}.
   *
   * <p>To represent unsigned decimal constants, consider {@link #valueOf(long)} instead.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,toString,com.google.common.primitives.UnsignedInteger:toString(int),250,252,"/**
* Converts this integer to a string representation in a specified base.
* @param radix target number base (e.g., 2 for binary, 16 for hexadecimal)
*/","* Returns a string representation of the {@code UnsignedInteger} value, in base {@code radix}. If
   * {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code
   * 10} is used.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,toString,com.google.common.primitives.UnsignedInts:toString(int),376,378,"/**
* Converts integer to string representation using base 10.","* Returns a string representation of x, where x is treated as unsigned.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#toUnsignedString(int)} instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,compare,"com.google.common.primitives.UnsignedInts:compare(int,int)",69,72,"/**
* Compares two integers using Ints.compare on their bitwise flipped values.
* @param a first integer to compare
* @param b second integer to compare
* @return negative if a < b, zero if a == b, positive if a > b
*/","* Compares the two specified {@code int} values, treating them as unsigned values between {@code
   * 0} and {@code 2^32 - 1} inclusive.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the
   * equivalent {@link Integer#compareUnsigned(int, int)} method instead.
   *
   * @param a the first unsigned {@code int} to compare
   * @param b the second unsigned {@code int} to compare
   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is
   *     greater than {@code b}; or zero if they are equal",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,fromLongBits,com.google.common.primitives.UnsignedLong:fromLongBits(long),67,70,"/**
* Creates an UnsignedLong object from the given long bits.
* @param bits long integer value to initialize UnsignedLong with.","* Returns an {@code UnsignedLong} corresponding to a given bit representation. The argument is
   * interpreted as an unsigned 64-bit value. Specifically, the sign bit of {@code bits} is
   * interpreted as a normal bit, and all other bits are treated as usual.
   *
   * <p>If the argument is nonnegative, the returned result will be equal to {@code bits},
   * otherwise, the result will be equal to {@code 2^64 + bits}.
   *
   * <p>To represent decimal constants less than {@code 2^63}, consider {@link #valueOf(long)}
   * instead.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,compare,"com.google.common.primitives.UnsignedLongs:compare(long,long)",77,80,"/**
* Compares two long integers using native comparison.
* @param a first long value to compare
* @param b second long value to compare
* @return negative if a < b, zero if a == b, positive if a > b
*/","* Compares the two specified {@code long} values, treating them as unsigned values between {@code
   * 0} and {@code 2^64 - 1} inclusive.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the
   * equivalent {@link Long#compareUnsigned(long, long)} method instead.
   *
   * @param a the first unsigned {@code long} to compare
   * @param b the second unsigned {@code long} to compare
   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is
   *     greater than {@code b}; or zero if they are equal",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,parseUnsignedLong,"com.google.common.primitives.UnsignedLongs:parseUnsignedLong(java.lang.String,int)",339,363,"/**
* Parses a string representation of an unsigned long integer in the given radix.
* @param string string to parse
* @param radix base of the number (2-36)
* @return parsed unsigned long integer or throws NumberFormatException if invalid
*/","* Returns the unsigned {@code long} value represented by a string with the given radix.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String, int)} instead.
   *
   * @param string the string containing the unsigned {@code long} representation to be parsed.
   * @param radix the radix to use while parsing {@code string}
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long} with
   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link
   *     Character#MAX_RADIX}.
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Long#parseLong(String)})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/AbstractInvocationHandler.java,invoke,"com.google.common.reflect.AbstractInvocationHandler:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",61,87,"/**
* Handles dynamic invocation of methods on a proxy object.
* @param proxy the proxy instance
* @param method the invoked method
* @param args array of arguments passed to the method
* @return result of the method invocation or null if not handled
*/","* {@inheritDoc}
   *
   * <ul>
   *   <li>{@code proxy.hashCode()} delegates to {@link AbstractInvocationHandler#hashCode}
   *   <li>{@code proxy.toString()} delegates to {@link AbstractInvocationHandler#toString}
   *   <li>{@code proxy.equals(argument)} returns true if:
   *       <ul>
   *         <li>{@code proxy} and {@code argument} are of the same type
   *         <li>and {@link AbstractInvocationHandler#equals} returns true for the {@link
   *             InvocationHandler} of {@code argument}
   *       </ul>
   *   <li>other method calls are dispatched to {@link #handleInvocation}.
   * </ul>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getPackageName,com.google.common.reflect.ClassPath$ClassInfo:getPackageName(),317,319,"/**
* Retrieves package name from class name using reflection.
* @return package name as string or empty string if not found
*/","* Returns the package name of the class, without attempting to load the class.
     *
     * <p>Behaves similarly to {@code class.getPackage().}{@link Package#getName() getName()} but
     * does not require the class (or package) to be loaded.
     *
     * <p>But note that this method may behave differently for a class in the default package: For
     * such classes, this method always returns an empty string. But under some version of Java,
     * {@code class.getPackage().getName()} produces a {@code NullPointerException} because {@code
     * class.getPackage()} returns {@code null}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Reflection.java,getPackageName,com.google.common.reflect.Reflection:getPackageName(java.lang.Class),35,37,"/**
* Retrieves package name from fully qualified class name.
* @param clazz Class object to extract package name from
*/","* Returns the package name of {@code clazz} according to the Java Language Specification (section
   * 6.7). Unlike {@link Class#getPackage}, this method only parses the class name, without
   * attempting to define the {@link Package} and hence load files.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,asByteSource,com.google.common.reflect.ClassPath$ResourceInfo:asByteSource(),246,248,"/**
* Returns a ByteSource representation of this resource.
* @return ByteSource object containing the resource data
*/","* Returns a {@link ByteSource} view of the resource from which its bytes can be read.
     *
     * @throws NoSuchElementException if the resource cannot be loaded through the class loader,
     *     despite physically existing in the class path.
     * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.ImmutableTypeToInstanceMap:getInstance(com.google.common.reflect.TypeToken),102,105,"/**
* Resolves instance of type T using TypeToken.
* @param type TypeToken representing the desired class type
* @return instance of T or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericParameterTypes,com.google.common.reflect.Invokable$ConstructorInvokable:getGenericParameterTypes(),454,466,"/**
* Returns an array of generic parameter types for this constructor.
* If necessary, excludes the hidden 'this' parameter from the result. 
* @return Type[] array of generic parameter types (excluding 'this' if applicable) or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isPublic,com.google.common.reflect.Invokable:isPublic(),150,152,"/**
* Checks if the element is publicly accessible.
* @return true if public, false otherwise
*/",Returns true if the element is public.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isProtected,com.google.common.reflect.Invokable:isProtected(),155,157,"/**
* Checks if this class member is protected.
*/",Returns true if the element is protected.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isPrivate,com.google.common.reflect.Invokable:isPrivate(),165,167,"/**
* Checks if this class member is private.
*/",Returns true if the element is private.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isStatic,com.google.common.reflect.Invokable:isStatic(),170,172,"/**
* Checks if this class is static.
*/",Returns true if the element is static.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isFinal,com.google.common.reflect.Invokable:isFinal(),181,183,"/**
* Checks if this class is declared as final.
*/","* Returns {@code true} if this method is final, per {@code Modifier.isFinal(getModifiers())}.
   *
   * <p>Note that a method may still be effectively ""final"", or non-overridable when it has no
   * {@code final} keyword. For example, it could be private, or it could be declared by a final
   * class. To tell whether a method is overridable, use {@link Invokable#isOverridable}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isAbstract,com.google.common.reflect.Invokable:isAbstract(),186,188,"/**
* Checks whether this class is abstract.
* @return true if class is abstract, false otherwise
*/",Returns true if the method is abstract.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isNative,com.google.common.reflect.Invokable:isNative(),191,193,"/**
* Checks whether this class is native.
* @return true if native, false otherwise
*/",Returns true if the element is native.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isSynchronized,com.google.common.reflect.Invokable:isSynchronized(),196,198,"/**
* Checks if this class is synchronized.
* @return true if synchronized, false otherwise
*/",Returns true if the method is synchronized.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isVolatile,com.google.common.reflect.Invokable:isVolatile(),201,203,"/**
* Checks whether the field is volatile.
* @return true if the field is volatile, false otherwise
*/",Returns true if the field is volatile.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isTransient,com.google.common.reflect.Invokable:isTransient(),206,208,"/**
* Checks if this field is transient.
* @return true if the field is transient, false otherwise
*/",Returns true if the field is transient.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,delegate,com.google.common.collect.ForwardingMapEntry:delegate(),57,58,"/**
* Returns an instance of Entry to be used by this implementation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.MutableTypeToInstanceMap:getInstance(com.google.common.reflect.TypeToken),50,53,"/**
* Retrieves an instance of the specified type from a trusted source.
* @param type TypeToken representing the desired type
* @return Instance of the requested type or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,putInstance,"com.google.common.reflect.MutableTypeToInstanceMap:putInstance(com.google.common.reflect.TypeToken,java.lang.Object)",62,67,"/**
* Puts an instance of a specified class into the map.
* @param type TypeToken representing the class to put
* @param value instance to be stored, must not be null
* @return the stored value or null if failed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getAnnotations,com.google.common.reflect.Parameter:getAnnotations(),88,91,"/**
* Returns an array of annotations declared on this element.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,equals,com.google.common.reflect.TypeResolver$TypeVariableKey:equals(java.lang.Object),563,571,"/**
* Compares this object with another for equality.
* @param obj the object to compare with, must be of type TypeVariableKey
* @return true if objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,equalsType,com.google.common.reflect.TypeResolver$TypeVariableKey:equalsType(java.lang.reflect.Type),591,597,"/**
* Compares this type with the given type.
* @param type Type to compare with
* @return true if types are equal, false otherwise
*/","* Returns true if {@code type} is a {@code TypeVariable} with the same name and declared by the
     * same {@code GenericDeclaration}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver$WildcardCapturer:<init>(),453,455,"/**
 * Initializes a new instance of WildcardCapturer with an AtomicInteger. 
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,notForTypeVariable,com.google.common.reflect.TypeResolver$WildcardCapturer:notForTypeVariable(),526,528,"/**
* Creates a WildcardCapturer instance with given ID.
* @param id unique identifier
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,every,com.google.common.reflect.TypeToken:every(java.lang.reflect.Type[]),1054,1057,"/**
* Returns Bounds object with all given Type arrays matching.
* @param bounds array of Type arrays to check for consistency
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,any,com.google.common.reflect.TypeToken:any(java.lang.reflect.Type[]),1059,1062,"/**
* Returns a Bounds object that matches any of the provided bounds.
* @param bounds array of Type bounds to match against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,readResolve,com.google.common.reflect.TypeToken$ClassSet:readResolve(),800,802,"/**
* Returns the list of classes from the types registry.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,readResolve,com.google.common.reflect.TypeToken$InterfaceSet:readResolve(),753,755,"/**
 * Returns an array of interface names from the class's type hierarchy.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,of,com.google.common.reflect.TypeToken:of(java.lang.Class),169,171,"/**
* Creates a TypeToken instance from a given Class.
* @param type class to wrap in the TypeToken
*/",Returns an instance of type token that wraps {@code type}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,of,com.google.common.reflect.TypeToken:of(java.lang.reflect.Type),174,176,"/**
* Creates a TypeToken instance from a given Class.
* @param type Class to create TypeToken instance for
*/",Returns an instance of type token that wraps {@code type}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,toString,com.google.common.reflect.TypeToken:toString(),840,843,"/**
* Returns a string representation of this object's type.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,toString,com.google.common.reflect.Types$GenericArrayTypeImpl:toString(),229,232,"/**
* Returns string representation of component array type.
* @return formatted string in format ""{component_type}[]"" 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,typeName,com.google.common.reflect.Types$JavaVersion:typeName(java.lang.reflect.Type),652,654,"/**
* Converts Type object to its string representation.
* @param type the Type object to convert
* @return the string representation of the Type object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newArrayType,com.google.common.reflect.Types$JavaVersion$1:newArrayType(java.lang.reflect.Type),640,640,"/**
* Creates a new array type with the specified component type.
* @param componentType the type of elements in the array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,usedInGenericType,com.google.common.reflect.Types$JavaVersion$1:usedInGenericType(java.lang.reflect.Type),642,642,"/**
* Determines the type used in a generic type declaration.
* @param type the generic type to analyze
* @return the type used in the generic type declaration
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newArrayType,com.google.common.reflect.Types$JavaVersion$2:newArrayType(java.lang.reflect.Type),640,640,"/**
* Creates a new array type with the specified component type.
* @param componentType the type of elements in the array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$GenericArrayTypeImpl:equals(java.lang.Object),239,246,"/**
* Checks equality with a GenericArrayType.
* @param obj object to compare
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$ParameterizedTypeImpl:equals(java.lang.Object),302,311,"/**
* Compares this ParameterizedType with another for equality.
* @param other object to compare with
* @return true if identical, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,toString,com.google.common.util.concurrent.AbstractExecutionThreadService:toString(),151,154,"/**
* Returns human-readable string representation of service.
* @return concatenated string including service name and state
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,<init>,com.google.common.util.concurrent.Futures$InCompletionOrderFuture:<init>(com.google.common.util.concurrent.Futures$InCompletionOrderState),950,952,"/**
* Initializes InCompletionOrderFuture with given completion order state.
* @param state InCompletionOrderState object containing task information
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,isDone,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:isDone(),107,110,"/**
* Delegates determination of completion to superclass.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,isCancelled,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:isCancelled(),112,115,"/**
* Checks if this job has been cancelled.
* @return true if cancelled, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,getDoneValue,com.google.common.util.concurrent.AbstractFuture:getDoneValue(java.lang.Object),280,304,"/**
* Retrieves done value from object, throwing exceptions or returning null as needed.
* @param obj Object containing done status and/or exception information
*/",Unboxes {@code obj}. Assumes that obj is not {@code null} or a {@link DelegatingToFuture}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addListener,"com.google.common.util.concurrent.AbstractFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",441,470,"/**
* Adds a new listener to be executed when the future completes or is cancelled.
* @param listener Runnable to be executed on completion
* @param executor Executor to run the listener in
*/","* {@inheritDoc}
   *
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,maybePropagateCancellationTo,com.google.common.util.concurrent.AbstractFuture:maybePropagateCancellationTo(java.util.concurrent.Future),829,834,"/**
* Cancels a potentially related future if this task was cancelled.
* @param related the future to cancel, or null if no relationship
*/","* If this future has been cancelled (and possibly interrupted), cancels (and possibly interrupts)
   * the given future (if available).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addDoneString,com.google.common.util.concurrent.AbstractFuture:addDoneString(java.lang.StringBuilder),936,950,"/**
* Appends success or failure string to the StringBuilder based on async operation result.
* @param builder StringBuilder to append result to
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,get,com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier:get(),48,51,"/**
* Returns the service name and state as a single string.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,toString,com.google.common.util.concurrent.AbstractIdleService:toString(),115,118,"/**
* Returns a human-readable string representation of this object.
* @return Service name and current state as a concatenated string
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:<init>(java.util.concurrent.ExecutorService),498,500,"/**
* Initializes the decorator with an executor service.
* @param delegate Executor service to be decorated.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,submit,com.google.common.util.concurrent.ListeningExecutorService:submit(java.util.concurrent.Callable),51,52,"/**
* Submits a Callable task for asynchronous execution and returns a ListenableFuture result. 
* @param task The task to be executed, returning a value of type T. 
* @return A ListenableFuture representing the result of the task, or null if cancelled.","* @return a {@code ListenableFuture} representing pending completion of the task
   * @throws RejectedExecutionException {@inheritDoc}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,<init>,"com.google.common.util.concurrent.ServiceManager$ServiceListener:<init>(com.google.common.util.concurrent.Service,java.lang.ref.WeakReference)",785,788,"/**
* Initializes ServiceListener with provided service and state reference.
* @param service instance of the service being listened to
* @param state weak reference to the current service manager state
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,schedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)",193,194,"/**
* Schedules a cancellable task to run on the provided executor.
* @param service Abstract service object
* @param executor Executor service to run the task on
* @param runnable Task to be executed
* @return Cancellable task instance
*/",Schedules the task to run on the provided executor on behalf of the service.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,schedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)",193,194,"/**
* Schedules a cancellable task to run on the provided executor.
* @param service AbstractService instance
* @param executor Executor service to use
* @param runnable Task to be executed
* @return Cancellable object representing the scheduled task
*/",Schedules the task to run on the provided executor on behalf of the service.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,initializeOrUpdateCancellationDelegate,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:initializeOrUpdateCancellationDelegate(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule),650,666,"/**
* Initializes or updates cancellation delegate with the given schedule.
* @param schedule scheduling information
* @return Cancellable object representing the updated delegate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,invokeAll,"com.google.common.util.concurrent.ListeningExecutorService:invokeAll(java.util.Collection,java.time.Duration)",120,124,"/**
* Invokes all asynchronous tasks with specified timeout.
* @param tasks collection of callable tasks
* @param timeout duration for task execution
* @return list of futures or throws InterruptedException if timed out
*/","* Duration-based overload of {@link #invokeAll(Collection, long, TimeUnit)}.
   *
   * @since 32.1.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,invokeAny,"com.google.common.util.concurrent.ListeningExecutorService:invokeAny(java.util.Collection,java.time.Duration)",131,136,"/**
* Invokes any of the provided callable tasks with a specified timeout.
* @param tasks collection of tasks to execute
* @param timeout maximum time to wait for task completion
* @throws InterruptedException if thread is interrupted
* @throws ExecutionException if task execution fails
* @throws TimeoutException if timeout is reached before task completion
*/","* Duration-based overload of {@link #invokeAny(Collection, long, TimeUnit)}.
   *
   * @since 32.1.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,awaitTermination,com.google.common.util.concurrent.ListeningExecutorService:awaitTermination(java.time.Duration),143,146,"/**
* Awaits thread termination within specified time duration.
* @param timeout maximum wait time in Duration units
* @return true if terminated, false on timeout or exception
*/","* Duration-based overload of {@link #awaitTermination(long, TimeUnit)}.
   *
   * @since 32.1.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,schedule,"com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.util.concurrent.Callable,java.time.Duration)",68,72,"/**
* Schedules a task with a specified duration using the provided callable.
* @param callable the task to be executed
* @param delay duration until execution
*/","* Duration-based overload of {@link #schedule(Callable, long, TimeUnit)}.
   *
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,scheduleAtFixedRate,"com.google.common.util.concurrent.ListeningScheduledExecutorService:scheduleAtFixedRate(java.lang.Runnable,java.time.Duration,java.time.Duration)",86,91,"/**
* Schedules a task for repeated execution at fixed intervals.
* @param command the task to run
* @param initialDelay delay before first execution
* @param period interval between subsequent executions
*/","* Duration-based overload of {@link #scheduleAtFixedRate(Runnable, long, long, TimeUnit)}.
   *
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,scheduleWithFixedDelay,"com.google.common.util.concurrent.ListeningScheduledExecutorService:scheduleWithFixedDelay(java.lang.Runnable,java.time.Duration,java.time.Duration)",105,110,"/**
* Schedules a fixed-delay task with the given initial delay and interval.
* @param command Runnable task to execute
* @param initialDelay initial wait time before first execution
* @param delay subsequent wait time between executions
*/","* Duration-based overload of {@link #scheduleWithFixedDelay(Runnable, long, long, TimeUnit)}.
   *
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Service.java,awaitRunning,com.google.common.util.concurrent.Service:awaitRunning(java.time.Duration),113,115,"/**
* Waits until the service is running or times out.
* @param timeout maximum time to wait before throwing TimeoutException
*/","* Waits for the {@link Service} to reach the {@linkplain State#RUNNING running state} for no more
   * than the given time.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if the service has not reached the given state within the deadline
   * @throws IllegalStateException if the service reaches a state from which it is not possible to
   *     enter the {@link State#RUNNING RUNNING} state. e.g. if the {@code state} is {@code
   *     State#TERMINATED} when this method is called then this will throw an IllegalStateException.
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Service.java,awaitTerminated,com.google.common.util.concurrent.Service:awaitTerminated(java.time.Duration),149,151,"/**
* Waits for this process to terminate within the specified timeout.
* @param timeout maximum wait duration
*/","* Waits for the {@link Service} to reach a terminal state (either {@link Service.State#TERMINATED
   * terminated} or {@link Service.State#FAILED failed}) for no more than the given time.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if the service has not reached the given state within the deadline
   * @throws IllegalStateException if the service {@linkplain State#FAILED fails}.
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,newProxy,"com.google.common.util.concurrent.TimeLimiter:newProxy(java.lang.Object,java.lang.Class,java.time.Duration)",125,127,"/**
* Creates a proxied instance of the specified interface type.
* @param target underlying object to proxy
* @param interfaceType interface to implement
* @param timeout duration for which the proxy is valid
*/","* Returns an instance of {@code interfaceType} that delegates all method calls to the {@code
   * target} object, enforcing the specified time limit on each call. This time-limited delegation
   * is also performed for calls to {@link Object#equals}, {@link Object#hashCode}, and {@link
   * Object#toString}.
   *
   * <p>If the target method call finishes before the limit is reached, the return value or
   * exception is propagated to the caller exactly as-is. If, on the other hand, the time limit is
   * reached, the proxy will attempt to abort the call to the target, and will throw an {@link
   * UncheckedTimeoutException} to the caller.
   *
   * <p>It is important to note that the primary purpose of the proxy object is to return control to
   * the caller when the timeout elapses; aborting the target method call is of secondary concern.
   * The particular nature and strength of the guarantees made by the proxy is
   * implementation-dependent. However, it is important that each of the methods on the target
   * object behaves appropriately when its thread is interrupted.
   *
   * <p>For example, to return the value of {@code target.someMethod()}, but substitute {@code
   * DEFAULT_VALUE} if this method call takes over 50 ms, you can use this code:
   *
   * <pre>
   *   TimeLimiter limiter = . . .;
   *   TargetType proxy = limiter.newProxy(target, TargetType.class, Duration.ofMillis(50));
   *   try {
   *     return proxy.someMethod();
   *   } catch (UncheckedTimeoutException e) {
   *     return DEFAULT_VALUE;
   *   }
   * </pre>
   *
   * @param target the object to proxy
   * @param interfaceType the interface you wish the returned proxy to implement
   * @param timeout the maximum length of time that callers are willing to wait on each method call
   *     to the proxy
   * @return a time-limiting proxy
   * @throws IllegalArgumentException if {@code interfaceType} is a regular class, enum, or
   *     annotation type, rather than an interface
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.TimeLimiter:callWithTimeout(java.util.concurrent.Callable,java.time.Duration)",169,174,"/**
* Executes a callable with a specified timeout.
* @param callable the operation to perform
* @param timeout duration before throwing a TimeoutException
*/","* Invokes a specified Callable, timing out after the specified time limit. If the target method
   * call finishes before the limit is reached, the return value or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to
   * the target, and throw a {@link TimeoutException} to the caller.
   *
   * @param callable the Callable to execute
   * @param timeout the maximum length of time to wait
   * @return the result returned by the Callable
   * @throws TimeoutException if the time limit is reached
   * @throws InterruptedException if the current thread was interrupted during execution
   * @throws ExecutionException if {@code callable} throws a checked exception
   * @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code callable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,callUninterruptiblyWithTimeout,"com.google.common.util.concurrent.TimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,java.time.Duration)",220,226,"/**
* Executes a task with interruptibility and timing constraints.
* @param callable target function to execute
* @param timeout maximum execution time in nanoseconds
* @return result of the executed function or throws exception if timed out
*/","* Invokes a specified Callable, timing out after the specified time limit. If the target method
   * call finishes before the limit is reached, the return value or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to
   * the target, and throw a {@link TimeoutException} to the caller.
   *
   * <p>The difference with {@link #callWithTimeout(Callable, Duration)} is that this method will
   * ignore interrupts on the current thread.
   *
   * @param callable the Callable to execute
   * @param timeout the maximum length of time to wait
   * @return the result returned by the Callable
   * @throws TimeoutException if the time limit is reached
   * @throws ExecutionException if {@code callable} throws a checked exception
   * @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code callable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,runWithTimeout,"com.google.common.util.concurrent.TimeLimiter:runWithTimeout(java.lang.Runnable,java.time.Duration)",261,264,"/**
* Executes a Runnable with a specified timeout duration.
* @param runnable task to be executed
* @param timeout time limit for the execution in nanoseconds
*/","* Invokes a specified Runnable, timing out after the specified time limit. If the target method
   * run finishes before the limit is reached, this method returns or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and
   * throw a {@link TimeoutException} to the caller.
   *
   * @param runnable the Runnable to execute
   * @param timeout the maximum length of time to wait
   * @throws TimeoutException if the time limit is reached
   * @throws InterruptedException if the current thread was interrupted during execution
   * @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code runnable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,runUninterruptiblyWithTimeout,"com.google.common.util.concurrent.TimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,java.time.Duration)",303,306,"/**
* Runs a Runnable with no interruptions and a specified time limit.
* @param runnable Task to execute
* @param timeout Time duration for the task (in nanoseconds)
*/","* Invokes a specified Runnable, timing out after the specified time limit. If the target method
   * run finishes before the limit is reached, this method returns or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and
   * throw a {@link TimeoutException} to the caller.
   *
   * <p>The difference with {@link #runWithTimeout(Runnable, Duration)} is that this method will
   * ignore interrupts on the current thread.
   *
   * @param runnable the Runnable to execute
   * @param timeout the maximum length of time to wait
   * @throws TimeoutException if the time limit is reached
   * @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code runnable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,executor,com.google.common.util.concurrent.AbstractScheduledService:executor(),365,394,"/**
* Creates a scheduled executor service with a single thread and adds a shutdown listener.
* @return ScheduledExecutorService instance
*/","* Returns the {@link ScheduledExecutorService} that will be used to execute the {@link #startUp},
   * {@link #runOneIteration} and {@link #shutDown} methods. If this method is overridden the
   * executor will not be {@linkplain ScheduledExecutorService#shutdown shutdown} when this service
   * {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED
   * fails}. Subclasses may override this method to supply a custom {@link ScheduledExecutorService}
   * instance. This method is guaranteed to only be called once.
   *
   * <p>By default this returns a new {@link ScheduledExecutorService} with a single thread pool
   * that sets the name of the thread to the {@linkplain #serviceName() service name}. Also, the
   * pool will be {@linkplain ScheduledExecutorService#shutdown() shut down} when the service
   * {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED
   * fails}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,toString,com.google.common.util.concurrent.AbstractScheduledService:toString(),406,409,"/**
* Returns a human-readable string representation of this service.
* @return Service name and current state (e.g. ""ServiceName [RUNNING]"")
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,state,com.google.common.util.concurrent.AbstractService:state(),494,497,"/**
* Returns the external state of the system.
* @return current ExternalState object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,<init>,"com.google.common.util.concurrent.AggregateFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,boolean)",67,75,"/**
* Creates an aggregate future from a collection of listenable futures.
* @param futures Collection of tasks to be aggregated
* @param allMustSucceed Whether all tasks must succeed for the aggregate to complete
* @param collectsValues Whether values should be collected or just completion status
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,addInitialException,com.google.common.util.concurrent.AggregateFuture:addInitialException(java.util.Set),251,274,"/**
* Adds initial exception to the set if not cancelled.
* @param seen Set of exceptions already seen
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,handleException,com.google.common.util.concurrent.AggregateFuture:handleException(java.lang.Throwable),209,241,"/**
* Handles an exception by logging or propagating it based on allMustSucceed flag.
* @param throwable the caught Throwable
*/","* Fails this future with the given Throwable if {@link #allMustSucceed} is true. Also, logs the
   * throwable if it is an {@link Error} or if {@link #allMustSucceed} is {@code true}, the
   * throwable did not cause this future to fail, and it is the first time we've seen that
   * particular Throwable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,toString,com.google.common.util.concurrent.AtomicDouble:toString(),254,257,"/**
* Returns a string representation of this value.
* @return A string representation of the underlying double value.","* Returns the String representation of the current value.
   *
   * @return the String representation of the current value",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,intValue,com.google.common.util.concurrent.AtomicDouble:intValue(),263,266,"/**
* Returns the integer value of this object.
* @return the integer representation as an int
*/","* Returns the value of this {@code AtomicDouble} as an {@code int} after a narrowing primitive
   * conversion.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,longValue,com.google.common.util.concurrent.AtomicDouble:longValue(),272,275,"/**
* Converts numeric value to a 64-bit integer.
* @return The numeric value as a long integer.","* Returns the value of this {@code AtomicDouble} as a {@code long} after a narrowing primitive
   * conversion.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,floatValue,com.google.common.util.concurrent.AtomicDouble:floatValue(),281,284,"/**
* Converts current value to a primitive float.
* @return float representation of the object's value
*/","* Returns the value of this {@code AtomicDouble} as a {@code float} after a narrowing primitive
   * conversion.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,doubleValue,com.google.common.util.concurrent.AtomicDouble:doubleValue(),287,290,"/**
 * Returns the double value of this primitive type.
 */",Returns the value of this {@code AtomicDouble} as a {@code double}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,writeObject,com.google.common.util.concurrent.AtomicDouble:writeObject(java.io.ObjectOutputStream),297,301,"/**
* Writes this object's state to an ObjectOutputStream.
* @param s ObjectOutputStream instance
*/","* Saves the state to a stream (that is, serializes it).
   *
   * @serialData The current value is emitted (a {@code double}).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,readObject,com.google.common.util.concurrent.AtomicDouble:readObject(java.io.ObjectInputStream),304,308,"/**
* Reads serialized state from ObjectInputStream and sets user's location.
* @throws IOException on serialization error
* @throws ClassNotFoundException if class not found during deserialization
*/","Reconstitutes the instance from a stream (that is, deserializes it).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,getAndAccumulate,"com.google.common.util.concurrent.AtomicDouble:getAndAccumulate(double,java.util.function.DoubleBinaryOperator)",188,192,"/**
* Accumulates a value using the provided function and returns the accumulated result.
* @param x value to accumulate
* @param accumulatorFunction mathematical operation on oldValue and x
* @return accumulated double value
*/","* Atomically updates the current value with the results of applying the given function to the
   * current and given values.
   *
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the previous value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,accumulateAndGet,"com.google.common.util.concurrent.AtomicDouble:accumulateAndGet(double,java.util.function.DoubleBinaryOperator)",203,207,"/**
* Accumulates and updates a value using the provided function.
* @param x new value to apply
* @param accumulatorFunction binary operator to accumulate with
* @return accumulated result as double or NaN if accumulatorFunction returns null
*/","* Atomically updates the current value with the results of applying the given function to the
   * current and given values.
   *
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the updated value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,toString,com.google.common.util.concurrent.AtomicDoubleArray:toString(),278,295,"/**
* Returns a string representation of the array, with each element as a double value.
* @return String containing double values and commas, or ""[]"" if empty.","* Returns the String representation of the current values of array.
   *
   * @return the String representation of the current values of array",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,writeObject,com.google.common.util.concurrent.AtomicDoubleArray:writeObject(java.io.ObjectOutputStream),303,314,"/**
* Serializes object data to output stream, including array size and elements. 
* @throws IOException if serialization fails
*/","* Saves the state to a stream (that is, serializes it).
   *
   * @serialData The length of the array is emitted (int), followed by all of its elements (each a
   *     {@code double}) in the proper order.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,getAndAccumulate,"com.google.common.util.concurrent.AtomicDoubleArray:getAndAccumulate(int,double,java.util.function.DoubleBinaryOperator)",207,211,"/**
* Accumulates value with the given function and returns current value.
* @param i index
* @param x value to accumulate
* @return current double value
*/","* Atomically updates the element at index {@code i} with the results of applying the given
   * function to the current and given values.
   *
   * @param i the index to update
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the previous value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,accumulateAndGet,"com.google.common.util.concurrent.AtomicDoubleArray:accumulateAndGet(int,double,java.util.function.DoubleBinaryOperator)",223,227,"/**
* Accumulates value using a binary operator and returns the result.
* @param i index
* @param x value to accumulate
* @return accumulated result
*/","* Atomically updates the element at index {@code i} with the results of applying the given
   * function to the current and given values.
   *
   * @param i the index to update
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the updated value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,removeIfZero,com.google.common.util.concurrent.AtomicLongMap:removeIfZero(java.lang.Object),246,249,"/**
* Removes an entry with a value of zero.
* @param key unique identifier for the entry to be removed
*/","* Atomically remove {@code key} from the map iff its associated value is 0.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,asMap,com.google.common.util.concurrent.AtomicLongMap:asMap(),273,276,"/**
* Initializes or returns cached map of key values.
*/","Returns a live, read-only view of the map backing this {@code AtomicLongMap}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,replace,"com.google.common.util.concurrent.AtomicLongMap:replace(java.lang.Object,long,long)",343,349,"/**
* Replaces a value in the map with a new one, preserving old value if present.
* @param key unique identifier for replacement
* @param expectedOldValue current value to replace (0L if not present)
* @param newValue new value to store
* @return true if replacement was successful, false otherwise
*/","* If {@code (key, expectedOldValue)} is currently in the map, this method replaces {@code
   * expectedOldValue} with {@code newValue} and returns true; otherwise, this method returns false.
   *
   * <p>If {@code expectedOldValue} is zero, this method will succeed if {@code (key, zero)} is
   * currently in the map, or if {@code key} is not in the map at all.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,close,com.google.common.util.concurrent.ClosingFuture:close(),1110,1113,"/**
* Closes this object and its associated resources.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,finishToFuture,com.google.common.util.concurrent.ClosingFuture:finishToFuture(),1009,1039,"/**
* Converts this operation to a Future, closing it when complete.
* @return Future representing this operation's result
*/","* Marks this step as the last step in the {@code ClosingFuture} pipeline.
   *
   * <p>The returned {@link Future} is completed when the pipeline's computation completes, or when
   * the pipeline is cancelled.
   *
   * <p>All objects the pipeline has captured for closing will begin to be closed asynchronously
   * <b>after</b> the returned {@code Future} is done: the future completes before closing starts,
   * rather than once it has finished.
   *
   * <p>After calling this method, you may not call {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, this method, or any other
   * derivation method on the original {@code ClosingFuture} instance.
   *
   * @return a {@link Future} that represents the final value or exception of the pipeline",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,finishToValueAndCloser,"com.google.common.util.concurrent.ClosingFuture:finishToValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,java.util.concurrent.Executor)",1052,1076,"/**
* Completes the ValueAndCloser creation process.
* @param consumer callback for ValueAndCloser
* @param executor thread pool to use
*/","* Marks this step as the last step in the {@code ClosingFuture} pipeline. When this step is done,
   * {@code receiver} will be called with an object that contains the result of the operation. The
   * receiver can store the {@link ValueAndCloser} outside the receiver for later synchronous use.
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, this method again, or
   * any other derivation method on the original {@code ClosingFuture} instance.
   *
   * @param consumer a callback whose method will be called (using {@code executor}) when this
   *     operation is done",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,checkAndUpdateState,"com.google.common.util.concurrent.ClosingFuture:checkAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State)",2163,2169,"/**
* Updates and validates the application state by comparing old and new states.
* @param oldState current state
* @param newState new state to apply
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,collectOneValue,"com.google.common.util.concurrent.CollectionFuture:collectOneValue(int,java.lang.Object)",60,66,"/**
* Sets the value at a specified index in the list of present values.
* @param index the index to update
* @param returnValue the new value to set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,handleAllCompleted,com.google.common.util.concurrent.CombinedFuture:handleAllCompleted(),61,67,"/**
* Executes the combined future task after all operations are completed.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,"com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)",493,507,"/**
* Initializes a new example stack trace for the given nodes.
* @param node1 first LockGraphNode
* @param node2 second LockGraphNode
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,<init>,com.google.common.util.concurrent.ListenableFutureTask:<init>(java.util.concurrent.Callable),81,83,"/**
* Submits a task to be executed asynchronously and returns a future that can be used to track its progress.
* @param callable the task to execute
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,<init>,"com.google.common.util.concurrent.ListenableFutureTask:<init>(java.lang.Runnable,java.lang.Object)",85,87,"/**
 * Creates a FutureTask with the given Runnable and result value.
 * @param runnable task to be executed
 * @param result expected result of the task
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionList.java,add,"com.google.common.util.concurrent.ExecutionList:add(java.lang.Runnable,java.util.concurrent.Executor)",69,89,"/**
* Adds a Runnable to be executed immediately or after all previous ones if not already started.
* @param runnable task to execute
* @param executor execution context
*/","* Adds the {@code Runnable} and accompanying {@code Executor} to the list of listeners to
   * execute. If execution has already begun, the listener is executed immediately.
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}
   * documentation.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionList.java,execute,com.google.common.util.concurrent.ExecutionList:execute(),102,134,"/**
* Executes all registered runnables and their associated executors in reverse order.
*/","* Runs this execution list, executing all existing pairs in the order they were added. However,
   * note that listeners added after this point may be executed before those previously added, and
   * note that the execution order of all listeners is ultimately chosen by the implementations of
   * the supplied executors.
   *
   * <p>This method is idempotent. Calling it several times in parallel is semantically equivalent
   * to calling it exactly once.
   *
   * @since 10.0 (present in 1.0 as {@code run})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,<init>,"com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:<init>(java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionSequencer)",314,318,"/**
* Constructs a non-reentrant task executor with a given delegate and execution sequencer.
* @param delegate underlying executor to execute tasks
* @param sequencer responsible for sequencing task executions
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,<init>,com.google.common.util.concurrent.ExecutionSequencer:<init>(),91,91,"/**
* Constructs an empty ExecutionSequencer instance. 
* This is a private constructor used to prevent direct instantiation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFluentFuture.java,<init>,com.google.common.util.concurrent.ForwardingFluentFuture:<init>(com.google.common.util.concurrent.ListenableFuture),40,42,"/**
* Wraps a ListenableFuture to enable fluent API usage.
* @param delegate underlying future to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,catchingAsync,"com.google.common.util.concurrent.FluentFuture:catchingAsync(java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)",255,260,"/**
* Catches asynchronous exceptions of a specified type and returns a FluentFuture.
* @param exceptionType class of exceptions to catch
* @param fallback function to invoke on exception
* @param executor executor for asynchronous operations
*/","* Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code
   * Future} fails with the given {@code exceptionType}, from the result provided by the {@code
   * fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has failed, so if
   * the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback},
   * an exception is thrown, this exception is used as the result of the output {@code Future}.
   *
   * <p>Usage examples:
   *
   * {@snippet :
   * // Falling back to a zero counter in case an exception happens when processing the RPC to fetch
   * // counters.
   * ListenableFuture<Integer> faultTolerantFuture =
   *     fetchCounters().catchingAsync(
   *         FetchException.class, x -> immediateFuture(0), directExecutor());
   * }
   *
   * <p>The fallback can also choose to propagate the original exception when desired:
   *
   * {@snippet :
   * // Falling back to a zero counter only in case the exception was a
   * // TimeoutException.
   * ListenableFuture<Integer> faultTolerantFuture =
   *     fetchCounters().catchingAsync(
   *         FetchException.class,
   *         e -> {
   *           if (omitDataOnFetchFailure) {
   *             return immediateFuture(0);
   *           }
   *           throw e;
   *         },
   *         directExecutor());
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method. (Specifically,
   * {@code directExecutor} functions should avoid heavyweight operations inside {@code
   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for
   * completing the returned {@code Future}.)
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It
   * can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle}
   * and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link
   * #transform}.
   *
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against the input's exception. ""The input's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws a
   *     different kind of exception, that exception itself. To avoid hiding bugs and other
   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code
   *     Throwable.class} in particular.
   * @param fallback the {@link AsyncFunction} to be called if the input fails with the expected
   *     exception type. The function's argument is the input's exception. ""The input's exception""
   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if
   *     {@code get()} throws a different kind of exception, that exception itself.
   * @param executor the executor that runs {@code fallback} if the input fails",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,transformAsync,"com.google.common.util.concurrent.FluentFuture:transformAsync(com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)",336,339,"/**
* Asynchronously transforms the future's value using a provided async function.
* @param function async function to apply to the future's value
* @param executor executor to run the transformation on
* @return FluentFuture containing transformed result or null if not found","* Returns a new {@code Future} whose result is asynchronously derived from the result of this
   * {@code Future}. If the input {@code Future} fails, the returned {@code Future} fails with the
   * same exception (and the function is not invoked).
   *
   * <p>More precisely, the returned {@code Future} takes its result from a {@code Future} produced
   * by applying the given {@code AsyncFunction} to the result of the original {@code Future}.
   * Example usage:
   *
   * {@snippet :
   * FluentFuture<RowKey> rowKeyFuture = FluentFuture.from(indexService.lookUp(query));
   * ListenableFuture<QueryResult> queryFuture =
   *     rowKeyFuture.transformAsync(dataService::readFuture, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method. (Specifically,
   * {@code directExecutor} functions should avoid heavyweight operations inside {@code
   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for
   * completing the returned {@code Future}.)
   *
   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the
   * input future and that of the future returned by the chain function. That is, if the returned
   * {@code Future} is cancelled, it will attempt to cancel the other two, and if either of the
   * other two is cancelled, the returned {@code Future} will receive a callback in which it will
   * attempt to cancel itself.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenCompose} and
   * {@link java.util.concurrent.CompletableFuture#thenComposeAsync}. It can also serve some of the
   * use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link
   * java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}.
   *
   * @param function A function to transform the result of this future to the result of the output
   *     future
   * @param executor Executor to run the function in.
   * @return A future that holds result of the function (if the input succeeded) or the original
   *     input's failure (if not)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,remainingCapacity,com.google.common.util.concurrent.ForwardingBlockingDeque:remainingCapacity(),59,62,"/**
 * Retrieves the remaining capacity from the delegate.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,putFirst,com.google.common.util.concurrent.ForwardingBlockingDeque:putFirst(java.lang.Object),64,67,"/**
* Inserts an element at the front of the queue.
* @param e element to be inserted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,putLast,com.google.common.util.concurrent.ForwardingBlockingDeque:putLast(java.lang.Object),69,72,"/**
* Adds an element to the end of the collection.
* @param e the element to add
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,offerFirst,"com.google.common.util.concurrent.ForwardingBlockingDeque:offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit)",74,77,"/**
* Offers an element to the underlying queue with a specified timeout.
* @param e The element to offer
* @param timeout Timeout in units of @param unit
* @param unit Time unit for the timeout (e.g. seconds, milliseconds)
* @return True if offered successfully, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,offerLast,"com.google.common.util.concurrent.ForwardingBlockingDeque:offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)",79,82,"/**
* Offers last element to consumer with specified timeout.
* @param e last element to offer
* @param timeout maximum wait time in given unit
* @param unit unit of the timeout (e.g. seconds)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,takeFirst,com.google.common.util.concurrent.ForwardingBlockingDeque:takeFirst(),84,87,"/**
* Retrieves first element from underlying collection.
* @throws InterruptedException if thread is interrupted while waiting
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,takeLast,com.google.common.util.concurrent.ForwardingBlockingDeque:takeLast(),89,92,"/**
* Retrieves and returns the last element from this queue.
* @return Element of type E or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,pollFirst,"com.google.common.util.concurrent.ForwardingBlockingDeque:pollFirst(long,java.util.concurrent.TimeUnit)",94,97,"/**
* Polls the first element from this queue with a specified timeout.
* @param timeout maximum time to wait in milliseconds
* @param unit unit of time for the timeout (e.g. seconds, minutes)
* @return E object if available or null on timeout
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,pollLast,"com.google.common.util.concurrent.ForwardingBlockingDeque:pollLast(long,java.util.concurrent.TimeUnit)",99,102,"/**
* Retrieves the last element from the queue with a specified time-out.
* @param timeout maximum wait duration in specified units
* @param unit time unit for the timeout (e.g. seconds, milliseconds)
* @return E object or null if not available within the time-out
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,put,com.google.common.util.concurrent.ForwardingBlockingDeque:put(java.lang.Object),104,107,"/**
 * Delegates putting an element into the underlying data structure.
 * @param e the element to be stored
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,offer,"com.google.common.util.concurrent.ForwardingBlockingDeque:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)",109,112,"/**
* Offers an element to this BlockingQueue with a specified timeout.
* @param e the element to be offered
* @param timeout the maximum time to wait for the offer
* @param unit the time unit of the timeout
* @return true if successful, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,take,com.google.common.util.concurrent.ForwardingBlockingDeque:take(),114,117,"/**
* Retrieves an element from this asynchronous data source.
* @throws InterruptedException if thread is interrupted while waiting
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,poll,"com.google.common.util.concurrent.ForwardingBlockingDeque:poll(long,java.util.concurrent.TimeUnit)",119,122,"/**
* Retrieves an element from the queue with a specified timeout.
* @param timeout time to wait before returning null (in specified time unit)
* @param unit time unit for the timeout value
* @return queue element or null if timed out
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,drainTo,com.google.common.util.concurrent.ForwardingBlockingDeque:drainTo(java.util.Collection),124,127,"/**
 * Drains all elements from this collection to the specified target.
 * @param c target collection to store drained elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,drainTo,"com.google.common.util.concurrent.ForwardingBlockingDeque:drainTo(java.util.Collection,int)",129,132,"/**
* Drains elements from this collection to a specified target up to a maximum count.
* @param c target collection to drain into
* @param maxElements maximum number of elements to transfer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,delegate,com.google.common.collect.ForwardingDeque:delegate(),51,52,"/**
* Returns a data structure (Deque) containing elements of type E. 
* This implementation is specific to subclasses and must be overridden.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,drainTo,"com.google.common.util.concurrent.ForwardingBlockingQueue:drainTo(java.util.Collection,int)",51,55,"/**
* Drains up to maxElements elements from this collection into the specified target.
* @param c target collection
* @param maxElements maximum number of elements to drain (may be ignored)
* @return actual number of elements drained or -1 if not supported by delegate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,drainTo,com.google.common.util.concurrent.ForwardingBlockingQueue:drainTo(java.util.Collection),57,61,"/**
* Drains all elements from this collection to the specified target.
* @param c Collection to receive drained elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,offer,"com.google.common.util.concurrent.ForwardingBlockingQueue:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)",63,67,"/**
* Offers an element to the underlying queue with a specified timeout.
* @param e element to offer
* @param timeout maximum time in specified units to wait for acceptance
* @param unit time unit of the timeout (e.g. seconds, milliseconds)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,poll,"com.google.common.util.concurrent.ForwardingBlockingQueue:poll(long,java.util.concurrent.TimeUnit)",69,73,"/**
* Retrieves and removes an element from the queue with a specified timeout.
* @param timeout maximum time to wait for an element
* @param unit time unit of the timeout (e.g. milliseconds)
* @return the retrieved element or null if timed out
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,put,com.google.common.util.concurrent.ForwardingBlockingQueue:put(java.lang.Object),75,78,"/**
* Puts an element into the underlying data structure.
* @param e element to be stored
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,remainingCapacity,com.google.common.util.concurrent.ForwardingBlockingQueue:remainingCapacity(),80,83,"/**
* Returns the remaining capacity as delegated by the underlying service.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,take,com.google.common.util.concurrent.ForwardingBlockingQueue:take(),85,89,"/**
* Retrieves an element from the underlying collection or blocking until one is available.
* @throws InterruptedException if interrupted while waiting for an element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,delegate,com.google.common.util.concurrent.ForwardingListenableFuture:delegate(),39,40,"/**
* Returns a future representing the asynchronous operation's result.
* @return Future containing the operation's result or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,submit,com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.lang.Runnable),50,53,"/**
* Submits a Runnable task to an underlying execution framework.
* @param task the task to be executed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,submit,"com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.lang.Runnable,java.lang.Object)",55,59,"/**
* Submits a Runnable task and returns a ListenableFuture with the specified result type.
* @param task the Runnable to be executed
* @param result the expected result of the task
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,recordOutputCancellation,com.google.common.util.concurrent.Futures$InCompletionOrderState:recordOutputCancellation(boolean),1009,1017,"/**
* Records output cancellation and adjusts interruption policy.
* @param interruptIfRunning whether to interrupt running tasks during cancellation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,<init>,com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture:<init>(com.google.common.util.concurrent.ListenableFuture),800,802,"/**
 * Wraps a ListenableFuture with non-cancellation propagation behavior.
 * @param delegate underlying future to be wrapped
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,immediateFuture,com.google.common.util.concurrent.Futures:immediateFuture(java.lang.Object),133,142,"/**
* Returns an immediate future with the given value, or null if the input is null.
* @param value the initial value of the future, or null
* @return ListenableFuture containing the specified value, or a typed null future if input was null
*/","* Creates a {@code ListenableFuture} which has its value set immediately upon construction. The
   * getters just return the value. This {@code Future} can't be canceled or timed out and its
   * {@code isDone()} method always returns {@code true}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,immediateFailedFuture,com.google.common.util.concurrent.Futures:immediateFailedFuture(java.lang.Throwable),162,166,"/**
* Returns an immediately failed future containing the specified exception.
* @param throwable the cause of failure
*/","* Returns a {@code ListenableFuture} which has an exception set immediately upon construction.
   *
   * <p>The returned {@code Future} can't be cancelled, and its {@code isDone()} method always
   * returns {@code true}. Calling {@code get()} will immediately throw the provided {@code
   * Throwable} wrapped in an {@code ExecutionException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,immediateCancelledFuture,com.google.common.util.concurrent.Futures:immediateCancelledFuture(),174,181,"/**
* Returns an immediately cancelled future of type V. 
* @return ListenableFuture object that is cancelled upon creation
*/","* Creates a {@code ListenableFuture} which is cancelled immediately upon construction, so that
   * {@code isCancelled()} always returns {@code true}.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getBestValidator,com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder:getBestValidator(),190,201,"/**
* Retrieves the best validator by instantiating and casting the first enum constant.
* @return GetCheckedTypeValidator instance or a fallback if instantiation fails.","* Returns the ClassValue-using validator, or falls back to the ""weak Set"" implementation if
     * unable to do so.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,newWithCause,"com.google.common.util.concurrent.FuturesGetChecked:newWithCause(java.lang.Class,java.lang.Throwable)",231,249,"/**
* Creates an instance of the specified exception class with a given cause.
* @param exceptionClass Class of the exception to create
* @param cause The original Throwable that triggered this exception
* @return An instance of the exception class or null if not constructible
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ImmediateFuture.java,get,"com.google.common.util.concurrent.ImmediateFuture:get(long,java.util.concurrent.TimeUnit)",74,79,"/**
* Returns a value with a specified timeout.
* @param timeout time to wait before throwing an exception
* @param unit unit of the timeout duration (e.g. seconds, milliseconds)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/InterruptibleTask.java,toString,com.google.common.util.concurrent.InterruptibleTask$Blocker:toString(),245,248,"/**
* Returns string representation of this Task.
* @return human-readable description of the task
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/InterruptibleTask.java,<init>,com.google.common.util.concurrent.InterruptibleTask$Blocker:<init>(com.google.common.util.concurrent.InterruptibleTask),229,231,"/**
 * Initializes a new instance of Blocker with the specified InterruptibleTask.
 * @param task InterruptibleTask object to be blocked
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,afterDone,com.google.common.util.concurrent.TrustedListenableFutureTask:afterDone(),89,101,"/**
* Resets task instance and interrupts it if interrupted.
* @see #task
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,enqueueHelper,"com.google.common.util.concurrent.ListenerCallQueue:enqueueHelper(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object)",103,111,"/**
* Adds an event to all listener queues with the specified label.
* @param event Event object to enqueue
* @param label associated label
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,dispatch,com.google.common.util.concurrent.ListenerCallQueue:dispatch(),118,123,"/**
* Dispatches events to all registered listeners.
*/","* Dispatches all events enqueued prior to this call, serially and in order, for every listener.
   *
   * <p>Note: this method is idempotent and safe to call from any thread",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,<init>,com.google.common.util.concurrent.Monitor:<init>(),348,350,"/**
* Initializes a new instance of the Monitor class with default settings.
*/","* Creates a monitor with a non-fair (but fast) ordering policy. Equivalent to {@code
   * Monitor(false)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterInterruptibly,com.google.common.util.concurrent.Monitor:enterInterruptibly(java.time.Duration),441,443,"/**
* Enters interruptible mode for specified duration.
* @param time duration to wait, in nanoseconds
*/","* Enters this monitor. Blocks at most the given time, and may be interrupted.
   *
   * @return whether the monitor was entered
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterIfInterruptibly,"com.google.common.util.concurrent.Monitor:enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",759,761,"/**
* Enters a guarded section with interruptible timing.
* @param guard the Guard instance
* @param time the duration to wait or -1 for indefinite waiting
*/","* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the
   * lock, but does not wait for the guard to be satisfied, and may be interrupted.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,hasWaiters,com.google.common.util.concurrent.Monitor:hasWaiters(com.google.common.util.concurrent.Monitor$Guard),1006,1008,"/**
* Checks if there are waiters associated with the given Guard.
* @param guard the Guard to check
* @return true if there are waiters, false otherwise
*/","* Queries whether any threads are waiting for the given guard to become satisfied. Note that
   * because timeouts and interrupts may occur at any time, a {@code true} return does not guarantee
   * that the guard becoming satisfied in the future will awaken any threads. This method is
   * designed primarily for use in monitoring of the system state.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,isSatisfied,com.google.common.util.concurrent.Monitor:isSatisfied(com.google.common.util.concurrent.Monitor$Guard),1122,1131,"/**
* Checks if the given Guard satisfies its condition, potentially signaling all waiters and re-throwing any exceptions. 
* @param guard Guard object to check for satisfaction
*/","* Exactly like guard.isSatisfied(), but in addition signals all waiting threads in the (hopefully
   * unlikely) event that isSatisfied() throws.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask:<init>(java.lang.Runnable),621,623,"/**
* Initializes a new task with the given delegate.
* @param delegate The task to be executed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,shutdownAndAwaitTermination,"com.google.common.util.concurrent.MoreExecutors:shutdownAndAwaitTermination(java.util.concurrent.ExecutorService,java.time.Duration)",960,965,"/**
* Shuts down an ExecutorService and waits for termination within a specified time.
* @param service executor service to shut down
* @param timeout maximum duration to wait for termination in nanoseconds
*/","* Shuts down the given executor service gradually, first disabling new submissions and later, if
   * necessary, cancelling remaining tasks.
   *
   * <p>The method takes the following steps:
   *
   * <ol>
   *   <li>calls {@link ExecutorService#shutdown()}, disabling acceptance of new submitted tasks.
   *   <li>awaits executor service termination for half of the specified timeout.
   *   <li>if the timeout expires, it calls {@link ExecutorService#shutdownNow()}, cancelling
   *       pending tasks and interrupting running tasks.
   *   <li>awaits executor service termination for the other half of the specified timeout.
   * </ol>
   *
   * <p>If, at any step of the process, the calling thread is interrupted, the method calls {@link
   * ExecutorService#shutdownNow()} and returns.
   *
   * <p>For a version of this method that waits <i>indefinitely</i>, use {@link
   * ExecutorService#close}.
   *
   * @param service the {@code ExecutorService} to shut down
   * @param timeout the maximum time to wait for the {@code ExecutorService} to terminate
   * @return {@code true} if the {@code ExecutorService} was terminated successfully, {@code false}
   *     if the call timed out or was interrupted
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,sleepMicrosUninterruptibly,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:sleepMicrosUninterruptibly(long),472,472,"/**
* Waits uninterruptibly for the specified duration in microseconds. 
* @param micros time to wait in microseconds
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,sleepUninterruptibly,com.google.common.util.concurrent.Uninterruptibles:sleepUninterruptibly(java.time.Duration),386,390,"/**
* Blocks execution for the specified duration, ignoring interrupts.
* @param sleepFor duration to block for
*/","* Invokes {@code unit.}{@link TimeUnit#sleep(long) sleep(sleepFor)} uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)",134,139,"/**
* Creates a RateLimiter instance with specified permits per second.
* @param permitsPerSecond rate limit in requests per second
* @param stopwatch stopwatch for tracking time
* @return configured RateLimiter object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,long,java.util.concurrent.TimeUnit,double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)",200,210,"/**
* Creates a RateLimiter with smooth warming up and specified rate.
* @param permitsPerSecond desired tokens per second
* @param warmupPeriod duration for gradual startup, in the given unit
* @param unit time unit for warmup period
* @param coldFactor initial rate multiplier during warmup
* @param stopwatch timer for measuring elapsed time
* @return RateLimiter instance with configured settings
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,setRate,com.google.common.util.concurrent.RateLimiter:setRate(double),256,261,"/**
* Sets the rate of permits per second.
* @param permitsPerSecond positive rate value
*/","* Updates the stable rate of this {@code RateLimiter}, that is, the {@code permitsPerSecond}
   * argument provided in the factory method that constructed the {@code RateLimiter}. Currently
   * throttled threads will <b>not</b> be awakened as a result of this invocation, thus they do not
   * observe the new rate; only subsequent requests will.
   *
   * <p>Note though that, since each request repays (by waiting, if necessary) the cost of the
   * <i>previous</i> request, this means that the very next request after an invocation to {@code
   * setRate} will not be affected by the new rate; it will pay the cost of the previous request,
   * which is in terms of the previous rate.
   *
   * <p>The behavior of the {@code RateLimiter} is not modified in any other way, e.g. if the {@code
   * RateLimiter} was configured with a warmup period of 20 seconds, it still has a warmup period of
   * 20 seconds after this method invocation.
   *
   * @param permitsPerSecond the new stable rate of this {@code RateLimiter}
   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,getRate,com.google.common.util.concurrent.RateLimiter:getRate(),271,275,"/**
* Returns the rate value, synchronizing access to ensure thread safety.
* @return current rate value
*/","* Returns the stable rate (as {@code permits per seconds}) with which this {@code RateLimiter} is
   * configured with. The initial value of this is the same as the {@code permitsPerSecond} argument
   * passed in the factory method that produced this {@code RateLimiter}, and it is only updated
   * after invocations to {@linkplain #setRate}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SequentialExecutor.java,run,com.google.common.util.concurrent.SequentialExecutor$QueueWorker:run(),180,193,"/**
* Handles worker run cycle, catching and handling errors gracefully.
* @throws Error any unhandled exception
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SettableFuture.java,create,com.google.common.util.concurrent.SettableFuture:create(),41,43,"/**
* Creates an empty Future with no initial value.
* @return SettableFuture object
*/",* Creates a new {@code SettableFuture} that can be completed or cancelled by a later method call.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,getUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:getUninterruptibly(java.util.concurrent.Future,java.time.Duration)",277,284,"/**
* Retrieves a value from the given Future with a specified timeout.
* @param future Future object containing the value
* @param timeout maximum wait time in nanoseconds
*/","* Invokes {@code future.}{@link Future#get(long, TimeUnit) get(timeout, unit)} uninterruptibly.
   *
   * <p>Similar methods:
   *
   * <ul>
   *   <li>To retrieve a result from a {@code Future} that is already done, use {@link
   *       Futures#getDone Futures.getDone}.
   *   <li>To treat {@link InterruptedException} uniformly with other exceptions, use {@link
   *       Futures#getChecked(Future, Class, long, TimeUnit) Futures.getChecked}.
   *   <li>To get uninterruptibility and remove checked exceptions, use {@link
   *       Futures#getUnchecked}.
   * </ul>
   *
   * @throws ExecutionException if the computation threw an exception
   * @throws CancellationException if the computation was cancelled
   * @throws TimeoutException if the wait timed out
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,findInterruptibleMethods,com.google.common.util.concurrent.SimpleTimeLimiter:findInterruptibleMethods(java.lang.Class),241,249,"/**
* Retrieves a set of methods from the given interface that declare InterruptedException.
* @param interfaceType the interface to search for interruptible methods
* @return a Set of Method objects or an empty Set if none found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,storedPermitsToWaitTime,"com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:storedPermitsToWaitTime(double,double)",244,261,"/**
* Calculates time in microseconds based on available permits and permits to take.
* @param storedPermits current storage capacity
* @param permitsToTake number of permits to consume
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,doSetRate,"com.google.common.util.concurrent.SmoothRateLimiter:doSetRate(double,long)",336,342,"/**
* Recalculates and sets the rate stabilization interval.
* @param permitsPerSecond permit rate in seconds
* @param nowMicros current time in microseconds
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,reserveEarliestAvailable,"com.google.common.util.concurrent.SmoothRateLimiter:reserveEarliestAvailable(int,long)",356,369,"/**
* Calculates earliest available time for permit reservation.
* @param requiredPermits number of permits to reserve
* @param nowMicros current timestamp in microseconds
* @return reservation timestamp or next free ticket micros if not reserved
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,get,com.google.common.util.concurrent.Striped$PowerOfTwoStriped:get(java.lang.Object),361,364,"/**
* Retrieves value associated with given key.
* @param key object to look up in map
* @return value or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,newCondition,com.google.common.util.concurrent.Striped$WeakSafeLock:newCondition(),322,325,"/**
* Creates a new condition with a weak reference to the underlying delegate.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,readLock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:readLock(),294,297,"/**
* Returns a weak lock to synchronize reader access.
* @return WeakSafeLock object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,writeLock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:writeLock(),299,302,"/**
* Returns a weak safe lock instance to synchronize access. 
* @return Lock object for concurrent access control
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,lazyWeakReadWriteLock,com.google.common.util.concurrent.Striped:lazyWeakReadWriteLock(int),278,280,"/**
* Creates a striped read-write lock with weak safety.
* @param stripes number of stripes in the lock
*/","* Creates a {@code Striped<ReadWriteLock>} with lazily initialized, weakly referenced read-write
   * locks. Every lock is reentrant.
   *
   * @param stripes the minimum number of stripes (locks) required
   * @return a new {@code Striped<ReadWriteLock>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,lock,com.google.common.util.concurrent.Striped:lock(int),207,209,"/**
* Creates a striped Lock instance with specified number of stripes.
* @param stripes number of stripes to create
*/","* Creates a {@code Striped<Lock>} with eagerly initialized, strongly referenced locks. Every lock
   * is reentrant.
   *
   * @param stripes the minimum number of stripes (locks) required
   * @return a new {@code Striped<Lock>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,semaphore,"com.google.common.util.concurrent.Striped:semaphore(int,int)",244,246,"/**
* Creates a striped semaphore with specified number of stripes and permits per stripe.
* @param stripes number of stripes in the semaphore
* @param permits number of permits for each stripe
*/","* Creates a {@code Striped<Semaphore>} with eagerly initialized, strongly referenced semaphores,
   * with the specified number of permits.
   *
   * @param stripes the minimum number of stripes (semaphores) required
   * @param permits the number of permits in each semaphore
   * @return a new {@code Striped<Semaphore>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,readWriteLock,com.google.common.util.concurrent.Striped:readWriteLock(int),267,269,"/**
* Creates a striped instance of ReadWriteLock with specified stripes.
* @param stripes number of stripes in the striped lock
*/","* Creates a {@code Striped<ReadWriteLock>} with eagerly initialized, strongly referenced
   * read-write locks. Every lock is reentrant.
   *
   * @param stripes the minimum number of stripes (locks) required
   * @return a new {@code Striped<ReadWriteLock>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,build,com.google.common.util.concurrent.ThreadFactoryBuilder:build(),158,160,"/**
* Creates a custom thread factory instance.
*/","* Returns a new thread factory using the options supplied during the building process. After
   * building, it is still possible to change the options used to build the ThreadFactory and/or
   * build again. State is not shared amongst built instances.
   *
   * @return the fully constructed {@link ThreadFactory}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeoutFuture.java,<init>,com.google.common.util.concurrent.TimeoutFuture$Fire:<init>(com.google.common.util.concurrent.TimeoutFuture),90,92,"/**
 * Sets the timeout future reference.
 * @param timeoutFuture future to be used for timeout handling
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,create,com.google.common.util.concurrent.TrustedListenableFutureTask:create(com.google.common.util.concurrent.AsyncCallable),36,39,"/**
* Creates a TrustedListenableFutureTask instance from an asynchronous callable.
* @param callable Asynchronous task that returns a value of type V
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,create,com.google.common.util.concurrent.TrustedListenableFutureTask:create(java.util.concurrent.Callable),41,43,"/**
* Creates a TrustedListenableFutureTask instance from a Callable.
* @param callable the asynchronous computation to be executed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,create,"com.google.common.util.concurrent.TrustedListenableFutureTask:create(java.lang.Runnable,java.lang.Object)",54,57,"/**
* Creates a TrustedListenableFutureTask for the given Runnable and result value.
* @param runnable the Runnable to execute
* @param result the expected result of the execution (may be null)
*/","* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code
   * Runnable}, and arrange that {@code get} will return the given result on successful completion.
   *
   * @param runnable the runnable task
   * @param result the result to return on successful completion. If you don't need a particular
   *     result, consider using constructions of the form: {@code ListenableFuture<?> f =
   *     ListenableFutureTask.create(runnable, null)}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.CountDownLatch,java.time.Duration)",81,85,"/**
* Waits for the CountDownLatch to count down uninterruptibly with a specified timeout.
* @param latch CountDownLatch to wait on
* @param timeout maximum time to wait in nanoseconds
*/","* Invokes {@code latch.}{@link CountDownLatch#await(long, TimeUnit) await(timeout, unit)}
   * uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.locks.Condition,java.time.Duration)",122,126,"/**
* Awaits the specified Condition to be met without interruption.
* @param condition Condition object to wait for
* @param timeout maximum time to wait (in nanoseconds)
*/","* Invokes {@code condition.}{@link Condition#await(long, TimeUnit) await(timeout, unit)}
   * uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryAcquireUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,long,java.util.concurrent.TimeUnit)",437,443,"/**
* Attempts to acquire the semaphore uninterruptibly within a specified time limit.
* @param semaphore target semaphore
* @param timeout maximum allowed duration
* @param unit time unit for timeout (e.g. seconds, milliseconds)","* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1,
   * timeout, unit)} uninterruptibly.
   *
   * @since 18.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryAcquireUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,java.time.Duration)",451,457,"/**
* Attempts to acquire the specified number of permits from a semaphore without interruption.
* @param semaphore semaphore instance
* @param permits desired number of permits
* @param timeout maximum time to wait
* @return true if acquired, false otherwise
*/","* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(permits,
   * timeout, unit)} uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryLockUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryLockUninterruptibly(java.util.concurrent.locks.Lock,java.time.Duration)",497,501,"/**
* Attempts to acquire a lock uninterruptibly with a specified time limit.
* @param lock the Lock instance
* @param timeout maximum duration to wait for the lock
* @return true if the lock was acquired, false otherwise
*/","* Invokes {@code lock.}{@link Lock#tryLock(long, TimeUnit) tryLock(timeout, unit)}
   * uninterruptibly.
   *
   * @since 30.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitTerminationUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService,java.time.Duration)",552,557,"/**
* Waits for the executor service to terminate without interruption.
* @param executor ExecutorService instance
* @param timeout duration to wait
*/","* Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit)
   * awaitTermination(long, TimeUnit)} uninterruptibly.
   *
   * @since 30.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,execute,com.google.common.util.concurrent.WrappingExecutorService:execute(java.lang.Runnable),93,96,"/**
 * Executes the given Runnable command using the underlying task execution delegate.
 * @param command the command to be executed
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,submit,com.google.common.util.concurrent.WrappingExecutorService:submit(java.lang.Runnable),103,106,"/**
* Submits a Runnable task for asynchronous execution.
* @param task the task to execute
* @return a future representing the task's completion
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,submit,"com.google.common.util.concurrent.WrappingExecutorService:submit(java.lang.Runnable,java.lang.Object)",108,112,"/**
* Submits a Runnable task and returns a Future with the specified result type.
* @param task the task to execute
* @param result the expected result type of the task
* @return a Future representing the result of the task, or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/thirdparty/publicsuffix/PublicSuffixType.java,fromCode,com.google.thirdparty.publicsuffix.PublicSuffixType:fromCode(char),57,64,"/**
* Retrieves PublicSuffixType based on the provided character code.
* @param code character code to match
* @return matching PublicSuffixType or throws exception if not found
*/",Returns a PublicSuffixType of the right type according to the given code,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,of,com.google.common.base.Optional:of(java.lang.Object),108,110,"/**
* Creates an Optional instance with the given non-null reference value.
* @param reference non-null object to be wrapped
* @return Optional containing the reference or empty if null
*/","* Returns an {@code Optional} instance containing the given non-null reference. To have {@code
   * null} treated as {@link #absent}, use {@link #fromNullable} instead.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> no differences.
   *
   * @throws NullPointerException if {@code reference} is null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,transform,com.google.common.base.Present:transform(com.google.common.base.Function),73,79,"/**
* Applies a transformation function to the contained value.
* @param function function to apply; returns null if not found
* @return transformed value in an Optional, or empty if null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createUnstarted,com.google.common.base.Stopwatch:createUnstarted(com.google.common.base.Ticker),119,121,"/**
 * Creates an unstarted stopwatch instance tied to the specified Ticker.
 * @param ticker Ticker instance associated with the stopwatch
 */","* Creates (but does not start) a new stopwatch, using the specified time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,indexOf,"com.google.common.collect.Iterables:indexOf(java.lang.Iterable,com.google.common.base.Predicate)",713,716,"/**
* Finds index of first element in iterable that satisfies given predicate.
* @param iterable collection of elements to search
* @param predicate condition for element to match
* @return index of matching element or -1 if not found
*/","* Returns the index in {@code iterable} of the first element that satisfies the provided {@code
   * predicate}, or {@code -1} if the Iterable has no such elements.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code
   * predicate.apply(Iterables.get(iterable, i))} returns {@code true}, or {@code -1} if there is no
   * such index.
   *
   * @since 2.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,any,"com.google.common.collect.Iterators:any(java.util.Iterator,com.google.common.base.Predicate)",698,701,"/**
* Finds if at least one element in an iterator matches a given predicate.
* @param iterator iterable source of elements
* @param predicate condition to test each element against
* @return true if any element satisfies the predicate, false otherwise
*/","* Returns {@code true} if one or more elements returned by {@code iterator} satisfy the given
   * predicate.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:treeSetValues(),373,376,"/**
* Creates a multimap builder with natural ordering for values.
* @return SortedSetMultimapBuilder instance
*/",Uses a naturally-ordered {@link TreeSet} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,adjacentNodes,com.google.common.graph.AbstractDirectedNetworkConnections:adjacentNodes(),59,62,"/**
* Returns a set of nodes that are directly connected to this node.
* @return Set of adjacent nodes (predecessors and successors)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,toImmutableTable,"com.google.common.collect.ImmutableTable:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",87,95,"/**
* Converts a collection to an immutable table with specified functions.
* @param rowFunction function to map each element to its row key
* @param columnFunction function to map each element to its column key
* @param valueFunction function to map each element to its table value
* @param mergeFunction function to merge table values in case of duplicate keys
*/","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each
   * input element is mapped to one cell in the returned table, with the rows, columns, and values
   * generated by applying the specified functions. If multiple inputs are mapped to the same row
   * and column pair, they will be combined with the specified merging function in encounter order.
   *
   * <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time
   * if the row, column, value, or merging functions return null on any input.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Any:<init>(),1037,1039,"/**
* Constructs an instance of CharMatcher that matches any character.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Ascii:<init>(),1307,1309,"/**
* Matches ASCII characters.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$BitSetMatcher:<init>(java.util.BitSet,java.lang.String)",1010,1017,"/**
* Initializes a BitSetMatcher with the given table and description.
* @param table BitSet to match against
* @param description human-readable description of the matcher
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$JavaIsoControl:<init>(),1471,1473,"/**
* Constructs an instance of CharMatcher with Java ISO control character behavior.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$None:<init>(),1134,1136,"/**
* Constructs an instance with no character matching functionality.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Whitespace:<init>(),1250,1252,"/**
 * Constructs a CharMatcher that matches whitespace characters.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/SmallCharMatcher.java,<init>,"com.google.common.base.SmallCharMatcher:<init>(char[],long,boolean,java.lang.String)",35,40,"/**
* Initializes a SmallCharMatcher with a custom character classification table.
* @param table classification table for small characters
* @param filter bitwise filter value
* @param containsZero flag indicating if zero is included in the match set
* @param description brief description of this matcher instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,equivalentTo,com.google.common.base.Equivalence:equivalentTo(java.lang.Object),308,310,"/**
* Creates a predicate that checks equivalence to the given target object.
* @param target object to compare against
*/","* Returns a predicate that evaluates to true if and only if the input is equivalent to {@code
   * target} according to this equivalence relation.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,forMap,"com.google.common.base.Functions:forMap(java.util.Map,java.lang.Object)",147,150,"/**
* Creates a function from a map with default values.
* @param map input map
* @param defaultValue value to return for missing keys
*/","* Returns a function which performs a map lookup with a default value. The function created by
   * this method returns {@code defaultValue} for all inputs that do not belong to the map's key
   * set. See also {@link #forMap(Map)}, which throws an exception in this case.
   *
   * <p>Prefer to write the lambda expression {@code k -> map.getOrDefault(k, defaultValue)}
   * instead. Note that it is not serializable unless you explicitly make it {@link Serializable},
   * typically by writing {@code (Function<K, V> & Serializable) k -> map.getOrDefault(k,
   * defaultValue)}.
   *
   * @param map source map that determines the function behavior
   * @param defaultValue the value to return for inputs that aren't map keys
   * @return function that returns {@code map.get(a)} when {@code a} is a key, or {@code
   *     defaultValue} otherwise",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,compose,"com.google.common.base.Functions:compose(com.google.common.base.Function,com.google.common.base.Function)",249,252,"/**
* Composes two functions, applying the first (f) to input A and then passing result to second function (g).
* @param g second function in composition
* @param f first function in composition
* @return composed function with signature Function<A, C>
*/","* Returns the composition of two functions. For {@code f: A->B} and {@code g: B->C}, composition
   * is defined as the function h such that {@code h(a) == g(f(a))} for each {@code a}.
   *
   * <p><b>JRE users and Android users who opt in to library desugaring:</b> use {@code
   * g.compose(f)} or (probably clearer) {@code f.andThen(g)} instead. Note that it is not
   * serializable.
   *
   * @param g the second function to apply
   * @param f the first function to apply
   * @return the composition of {@code f} and {@code g}
   * @see <a href=""//en.wikipedia.org/wiki/Function_composition"">function composition</a>",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,forMap,com.google.common.base.Functions:forMap(java.util.Map),127,130,"/**
* Converts a map to a function.
* @param map input map
* @return Function that applies the map's key-value pairs
*/","* Returns a function which performs a map lookup. The returned function throws an {@link
   * IllegalArgumentException} if given a key that does not exist in the map. See also {@link
   * #forMap(Map, Object)}, which returns a default value in this case.
   *
   * <p>Note: if {@code map} is a {@link com.google.common.collect.BiMap BiMap} (or can be one), you
   * can use {@link com.google.common.collect.Maps#asConverter Maps.asConverter} instead to get a
   * function that also supports reverse conversion.
   *
   * <p>If you are okay with {@code null} being returned for an unrecognized key (instead of an
   * exception being thrown), you can use the method reference {@code map::get} instead. Note that
   * it is not serializable unless you explicitly make it {@link Serializable}, typically by writing
   * {@code (Function<K, V> & Serializable) map::get}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/JdkPattern.java,matcher,com.google.common.base.JdkPattern:matcher(java.lang.CharSequence),32,35,"/**
* Creates a matcher instance for the given text.
* @param t input CharSequence to match against
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,compile,com.google.common.base.Platform$JdkPatternCompiler:compile(java.lang.String),106,109,"/**
* Compiles a regular expression pattern into a CommonPattern object.
* @param pattern regular expression to compile
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(java.util.regex.Pattern),207,210,"/**
* Configures splitter with custom pattern.
* @param separatorPattern regular expression pattern for splitting.","* Returns a splitter that considers any subsequence matching {@code pattern} to be a separator.
   * For example, {@code Splitter.on(Pattern.compile(""\r?\n"")).split(entireFile)} splits a string
   * into lines whether it uses DOS-style or UNIX-style line terminators.
   *
   * @param separatorPattern the pattern that determines whether a subsequence is a separator. This
   *     pattern may not match the empty string.
   * @return a splitter, with default settings, that uses this pattern
   * @throws IllegalArgumentException if {@code separatorPattern} matches the empty string",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,on,com.google.common.base.Joiner:on(java.lang.String),69,71,"/**
* Creates a new Joiner instance with specified string separator.
* @param separator string to separate joined elements
*/",Returns a joiner which automatically places {@code separator} between consecutive elements.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,on,com.google.common.base.Joiner:on(char),74,76,"/**
* Creates a Joiner instance with the specified character as separator.
* @param separator single character to separate joined strings
*/",Returns a joiner which automatically places {@code separator} between consecutive elements.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,useForNull,com.google.common.base.Joiner$MapJoiner:useForNull(java.lang.String),504,506,"/**
* Creates a MapJoiner instance with custom null text.
* @param nullText text to display when a map value is null
*/","* Returns a map joiner with the same behavior as this one, except automatically substituting
     * {@code nullText} for any provided null keys or values.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CommonPattern.java,compile,com.google.common.base.CommonPattern:compile(java.lang.String),36,38,"/**
* Compiles a regular expression pattern.
* @param pattern regular expression to be compiled
* @return Compiled Pattern object or null if compilation fails
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,onPattern,com.google.common.base.Splitter:onPattern(java.lang.String),248,251,"/**
* Creates a splitter with a regular expression pattern.
* @param separatorPattern regular expression to split by
*/","* Returns a splitter that considers any subsequence matching a given pattern (regular expression)
   * to be a separator. For example, {@code Splitter.onPattern(""\r?\n"").split(entireFile)} splits a
   * string into lines whether it uses DOS-style or UNIX-style line terminators. This is equivalent
   * to {@code Splitter.on(Pattern.compile(pattern))}.
   *
   * @param separatorPattern the pattern that determines whether a subsequence is a separator. This
   *     pattern may not match the empty string.
   * @return a splitter, with default settings, that uses this pattern
   * @throws IllegalArgumentException if {@code separatorPattern} matches the empty string or is a
   *     malformed expression",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$ContainsPatternFromStringPredicate:<init>(java.lang.String),782,784,"/**
* Creates a predicate that checks if a given string contains a compiled pattern.
* @param string input string to search
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,contains,com.google.common.base.Predicates:contains(java.util.regex.Pattern),303,306,"/**
* Creates predicate that matches CharSequence based on provided regular expression.
* @param pattern regular expression to match
*/","* Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested
   * contains any match for the given regular expression pattern. The test used is equivalent to
   * {@code pattern.matcher(arg).find()}
   *
   * @since 3.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,not,com.google.common.base.Predicates:not(com.google.common.base.Predicate),95,97,"/**
* Inverts the given predicate to its logical opposite.
* @param predicate input predicate to invert
* @return inverted predicate or null if null input
*/","* Returns a predicate that evaluates to {@code true} if the given predicate evaluates to {@code
   * false}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code predicate.negate()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,and,com.google.common.base.Predicates:and(java.lang.Iterable),108,111,"/**
* Creates a composed predicate that evaluates to true if all provided predicates are true.
* @param components iterable of predicates to be combined
* @return a new predicate instance combining the input predicates
*/","* Returns a predicate that evaluates to {@code true} if each of its components evaluates to
   * {@code true}. The components are evaluated in order, and evaluation will be ""short-circuited""
   * as soon as a false predicate is found. It defensively copies the iterable passed in, so future
   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the
   * returned predicate will always evaluate to {@code true}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.and(second).and(third).and(...)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,or,com.google.common.base.Predicates:or(java.lang.Iterable),148,151,"/**
* Combines multiple predicates into a single ""or"" predicate.
* @param components iterable of component predicates
*/","* Returns a predicate that evaluates to {@code true} if any one of its components evaluates to
   * {@code true}. The components are evaluated in order, and evaluation will be ""short-circuited""
   * as soon as a true predicate is found. It defensively copies the iterable passed in, so future
   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the
   * returned predicate will always evaluate to {@code false}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.or(second).or(third).or(...)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,split,com.google.common.base.Splitter$MapSplitter:split(java.lang.CharSequence),498,514,"/**
* Splits input sequence into key-value pairs and returns as a read-only Map.
* @param sequence input string to split
*/","* Splits {@code sequence} into substrings, splits each substring into an entry, and returns an
     * unmodifiable map with each of the entries. For example, {@code
     * Splitter.on(';').trimResults().withKeyValueSeparator(""=>"").split(""a=>b ; c=>b"")} will return
     * a mapping from {@code ""a""} to {@code ""b""} and {@code ""c""} to {@code ""b""}.
     *
     * <p>The returned map preserves the order of the entries from {@code sequence}.
     *
     * @throws IllegalArgumentException if the specified sequence does not split into valid map
     *     entries, or if there are duplicate keys",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,splitToStream,com.google.common.base.Splitter:splitToStream(java.lang.CharSequence),421,424,"/**
* Converts CharSequence to a stream of individual strings.
* @param sequence input string sequence
*/","* Splits {@code sequence} into string components and makes them available through an {@link
   * Stream}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use
   * {@link #splitToList(CharSequence)}.
   *
   * @param sequence the sequence of characters to split
   * @return a stream over the segments split from the parameter
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,memoize,com.google.common.base.Suppliers:memoize(com.google.common.base.Supplier),113,121,"/**
* Wraps a supplier to memoize its results.
* @param delegate original supplier to wrap
*/","* Returns a supplier which caches the instance retrieved during the first call to {@code get()}
   * and returns that value on subsequent calls to {@code get()}. See: <a
   * href=""http://en.wikipedia.org/wiki/Memoization"">memoization</a>
   *
   * <p>The returned supplier is thread-safe. The delegate's {@code get()} method will be invoked at
   * most once unless the underlying {@code get()} throws an exception. The supplier's serialized
   * form does not contain the cached value, which will be recalculated when {@code get()} is called
   * on the deserialized instance.
   *
   * <p>When the underlying delegate throws an exception then this memoizing supplier will keep
   * delegating calls until it returns valid data.
   *
   * <p>If {@code delegate} is an instance created by an earlier call to {@code memoize}, it is
   * returned directly.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,compose,"com.google.common.base.Suppliers:compose(com.google.common.base.Function,com.google.common.base.Supplier)",53,56,"/**
* Composes a function with a supplier to create a new supplier.
* @param function the function to apply
* @param supplier supplier of input for the function
* @return a supplier that applies the function to the supplied output
*/","* Returns a new supplier which is the composition of the provided function and supplier. In other
   * words, the new supplier's value will be computed by retrieving the value from {@code supplier},
   * and then applying {@code function} to that value. Note that the resulting supplier will not
   * call {@code supplier} or invoke {@code function} until it is called.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,synchronizedSupplier,com.google.common.base.Suppliers:synchronizedSupplier(com.google.common.base.Supplier),399,403,"/**
* Wraps a supplier with thread-safe functionality, ensuring consistent results.
* @param delegate the original supplier to be wrapped
*/","* Returns a supplier whose {@code get()} method synchronizes on {@code delegate} before calling
   * it, making it thread-safe.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfInstanceOf,"com.google.common.base.Throwables:propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)",100,108,"/**
* Throws a specific exception type if the given Throwable instance is an instance of it.
* @param throwable the Throwable to check
* @param declaredType the expected exception type
*/","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@code
   * declaredType}. Example usage:
   *
   * <pre>
   * try {
   *   someMethodThatCouldThrowAnything();
   * } catch (IKnowWhatToDoWithThisException e) {
   *   handle(e);
   * } catch (Throwable t) {
   *   Throwables.propagateIfInstanceOf(t, IOException.class);
   *   Throwables.propagateIfInstanceOf(t, SQLException.class);
   *   throw Throwables.propagate(t);
   * }
   * </pre>
   *
   * @deprecated Use {@link #throwIfInstanceOf}, which has the same behavior but rejects {@code
   *     null}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfPossible,com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable),146,153,"/**
* Propagates unchecked exceptions to the caller, if possible.
* @param throwable exception to be propagated or null for no action
*/","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
   * RuntimeException} or {@link Error}.
   *
   * @deprecated Use {@link #throwIfUnchecked}, which has the same behavior but rejects {@code
   *     null}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagate,com.google.common.base.Throwables:propagate(java.lang.Throwable),228,235,"/**
* Throws a runtime exception wrapping the given Throwable.
* @param throwable the underlying exception to be thrown
*/","* Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or {@link
   * Error}, or else as a last resort, wraps it in a {@code RuntimeException} and then propagates.
   *
   * <p>This method always throws an exception. The {@code RuntimeException} return type allows
   * client code to signal to the compiler that statements after the call are unreachable. Example
   * usage:
   *
   * <pre>
   * T doSomething() {
   *   try {
   *     return someMethodThatCouldThrowAnything();
   *   } catch (IKnowWhatToDoWithThisException e) {
   *     return handle(e);
   *   } catch (Throwable t) {
   *     throw Throwables.propagate(t);
   *   }
   * }
   * </pre>
   *
   * @param throwable the Throwable to propagate
   * @return nothing will ever be returned; this return type is only for your convenience, as
   *     illustrated in the example above
   * @deprecated To preserve behavior, use {@code throw e} or {@code throw new RuntimeException(e)}
   *     directly, or use a combination of {@link #throwIfUnchecked} and {@code throw new
   *     RuntimeException(e)}. But consider whether users would be better off if your API threw a
   *     different type of exception. For background on the deprecation, read <a
   *     href=""https://github.com/google/guava/wiki/Why-we-deprecated-Throwables.propagate"">Why we
   *     deprecated {@code Throwables.propagate}</a>.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getAnnotatedMethods,com.google.common.eventbus.SubscriberRegistry:getAnnotatedMethods(java.lang.Class),167,191,"/**
* Retrieves annotated methods for the given class from cache or throws an exception if not found.
*@param clazz Class to fetch methods for 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,newCrc32c,com.google.common.hash.Hashing$Crc32cMethodHandles:newCrc32c(),522,530,"/**
* Creates a new CRC-32C checksum instance using reflection. 
* @return A new CRC-32C checksum object or throws an exception on failure
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,lazyStackTrace,com.google.common.base.Throwables:lazyStackTrace(java.lang.Throwable),377,384,"/**
* Creates a lazily initialized stack trace from the given Throwable.
* @param throwable the source Throwable
*/","* Returns the stack trace of {@code throwable}, possibly providing slower iteration over the full
   * trace but faster iteration over parts of the trace. Here, ""slower"" and ""faster"" are defined in
   * comparison to the normal way to access the stack trace, {@link Throwable#getStackTrace()
   * throwable.getStackTrace()}. Note, however, that this method's special implementation is not
   * available for all platforms and configurations. If that implementation is unavailable, this
   * method falls back to {@code getStackTrace}. Callers that require the special implementation can
   * check its availability with {@link #lazyStackTraceIsLazy()}.
   *
   * <p>The expected (but not guaranteed) performance of the special implementation differs from
   * {@code getStackTrace} in one main way: The {@code lazyStackTrace} call itself returns quickly
   * by delaying the per-stack-frame work until each element is accessed. Roughly speaking:
   *
   * <ul>
   *   <li>{@code getStackTrace} takes {@code stackSize} time to return but then negligible time to
   *       retrieve each element of the returned list.
   *   <li>{@code lazyStackTrace} takes negligible time to return but then {@code 1/stackSize} time
   *       to retrieve each element of the returned list (probably slightly more than {@code
   *       1/stackSize}).
   * </ul>
   *
   * <p>Note: The special implementation does not respect calls to {@link Throwable#setStackTrace
   * throwable.setStackTrace}. Instead, it always reflects the original stack trace from the
   * exception's creation.
   *
   * @since 19.0
   * @deprecated This method is equivalent to {@link Throwable#getStackTrace()} on JDK versions past
   *     JDK 8 and on all Android versions. Use {@link Throwable#getStackTrace()} directly, or where
   *     possible use the {@code java.lang.StackWalker.walk} method introduced in JDK 9.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache:newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1694,1703,"/**
* Creates a new entry in the specified segment with the given key and hash.
* @param key unique key for the entry
* @param hash hash value of the key
* @param next reference to the next entry, or null if none
*/",* This method is a convenience for testing. Code should call {@link Segment#newEntry} directly.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/RemovalNotification.java,create,"com.google.common.cache.RemovalNotification:create(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause)",48,51,"/**
* Creates a removal notification with specified key, value and cause.
* @param key object being removed (or null for no key)
* @param value associated value (or null if not applicable)
* @param cause reason for removal
*/","* Creates a new {@code RemovalNotification} for the given {@code key}/{@code value} pair, with
   * the given {@code cause} for the removal. The {@code key} and/or {@code value} may be {@code
   * null} if they were already garbage collected.
   *
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,forEachEntry,com.google.common.collect.HashMultiset:forEachEntry(java.util.function.ObjIntConsumer),163,167,"/**
* Iterates over each entry in this map and applies the provided consumer.
* @param action a function to be executed for each entry (key-value pair)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,forEachEntry,com.google.common.collect.LinkedHashMultiset:forEachEntry(java.util.function.ObjIntConsumer),163,167,"/**
* Iterates over map entries and applies a consumer function to each.
* @param action Consumer function to apply to each entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,<init>,com.google.common.collect.AbstractSortedMultiset:<init>(),42,45,"/**
 * Initializes a new instance of the abstract sorted multiset with a natural ordering comparator.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,<init>,"com.google.common.collect.TreeMultiset:<init>(com.google.common.collect.TreeMultiset$Reference,com.google.common.collect.GeneralRange,com.google.common.collect.TreeMultiset$AvlNode)",121,126,"/**
* Initializes a TreeMultiset instance with the specified root reference,
* comparator, and range. The end link node is used as the header.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,subMultiset,"com.google.common.collect.TreeMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",102,112,"/**
* Creates a sub-multiset within the range [fromElement, fromBoundType) to (toElement, toBoundType].
* @param fromElement starting element
* @param fromBoundType type of starting bound
* @param toElement ending element
* @param toBoundType type of ending bound
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,toMultiset,"com.google.common.collect.Multisets:toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier)",88,94,"/**
* Converts a stream of elements to a multiset.
* @param elementFunction maps each element to its type
* @param countFunction maps each element to its frequency
* @param multisetSupplier creates the multiset instance
*/","* Returns a {@code Collector} that accumulates elements into a multiset created via the specified
   * {@code Supplier}, whose elements are the result of applying {@code elementFunction} to the
   * inputs, with counts equal to the result of applying {@code countFunction} to the inputs.
   * Elements are added in encounter order.
   *
   * <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the element
   * will be added more than once, with the count summed over all appearances of the element.
   *
   * <p>Note that {@code stream.collect(toMultiset(function, e -> 1, supplier))} is equivalent to
   * {@code stream.map(function).collect(Collectors.toCollection(supplier))}.
   *
   * <p>To collect to an {@link ImmutableMultiset}, use {@link
   * ImmutableMultiset#toImmutableMultiset}.
   *
   * @since 22.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,toMultimap,"com.google.common.collect.Multimaps:toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",115,125,"/**
* Converts stream to multimap using provided key and value functions.
* @param keyFunction maps each element to its key
* @param valueFunction maps each element to its value
* @param multimapSupplier provides a new multimap instance
* @return Multimap with elements grouped by key and values
*/","* Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the
   * specified supplier. The keys and values of the entries are the result of applying the provided
   * mapping functions to the input elements, accumulated in the encounter order of the stream.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             toMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1),
   *                  MultimapBuilder.treeKeys().arrayListValues()::build));
   *
   * // is equivalent to
   *
   * static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP;
   *
   * static {
   *     FIRST_LETTER_MULTIMAP = MultimapBuilder.treeKeys().arrayListValues().build();
   *     FIRST_LETTER_MULTIMAP.put('b', ""anana"");
   *     FIRST_LETTER_MULTIMAP.put('a', ""pple"");
   *     FIRST_LETTER_MULTIMAP.put('a', ""sparagus"");
   *     FIRST_LETTER_MULTIMAP.put('c', ""arrot"");
   *     FIRST_LETTER_MULTIMAP.put('c', ""herry"");
   * }
   * }
   *
   * <p>To collect to an {@link ImmutableMultimap}, use either {@link
   * ImmutableSetMultimap#toImmutableSetMultimap} or {@link
   * ImmutableListMultimap#toImmutableListMultimap}.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,flatteningToMultimap,"com.google.common.collect.Multimaps:flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",160,171,"/**
* Converts a stream of objects to a multimap using provided functions.
* @param keyFunction maps each object to its key
* @param valueFunction maps each object to its values as a stream
* @param multimapSupplier creates the target multimap
*/","* Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the
   * specified supplier. Each input element is mapped to a key and a stream of values, each of which
   * are put into the resulting {@code Multimap}, in the encounter order of the stream and the
   * encounter order of the streams of values.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             flatteningToMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c),
   *                  MultimapBuilder.linkedHashKeys().arrayListValues()::build));
   *
   * // is equivalent to
   *
   * static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP;
   *
   * static {
   *     FIRST_LETTER_MULTIMAP = MultimapBuilder.linkedHashKeys().arrayListValues().build();
   *     FIRST_LETTER_MULTIMAP.putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'));
   *     FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('p', 'p', 'l', 'e'));
   *     FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'));
   *     FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'));
   *     FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'));
   * }
   * }
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,valuesSpliterator,com.google.common.collect.AbstractTable:valuesSpliterator(),201,203,"/**
* Creates a spliterator over table cell values.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,spliterator,com.google.common.collect.Collections2$TransformedCollection:spliterator(),289,292,"/**
* Maps a collection spliterator to a custom iterator using the provided function. 
* @return A mapped spliterator for iteration.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,keySpliterator,com.google.common.collect.ImmutableMap:keySpliterator(),1085,1087,"/**
* Creates a spliterator for keys of this map.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,spliterator,com.google.common.collect.ImmutableMapValues:spliterator(),66,69,"/**
* Returns a spliterator over mapped values.
* @return Spliterator of V objects, mapping entry values from the underlying map.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySpliterator,com.google.common.collect.Maps$NavigableAsMapView:entrySpliterator(),1100,1103,"/**
* Returns a spliterator of entries with mapped values.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,spliterator,com.google.common.collect.Multimaps$Keys:spliterator(),1761,1764,"/**
* Creates a Spliterator for iterating over keys of the multimap.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellSpliterator,com.google.common.collect.Tables$TransformedTable:cellSpliterator(),490,493,"/**
* Creates a spliterator for cells in the table.
* @return Spliterator of Cell objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellSpliterator,com.google.common.collect.Tables$TransposeTable:cellSpliterator(),322,325,"/**
* Maps original spliterator to transposed cells.
* @return Spliterator of transposed Cells.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,spliterator,com.google.common.collect.Collections2$FilteredCollection:spliterator(),179,182,"/**
* Filters unfiltered spliterator using provided predicate. 
* @return filtered Spliterator object",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,removeAll,com.google.common.collect.Collections2$FilteredCollection:removeAll(java.util.Collection),200,203,"/**
* Removes all elements from this set that match the given predicate.
* @param collection Collection of elements to be removed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,retainAll,com.google.common.collect.Collections2$FilteredCollection:retainAll(java.util.Collection),205,208,"/**
* Removes elements from this collection that are not present in the given collection. 
* @param collection Collection of elements to filter by
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,transform,"com.google.common.collect.Collections2:transform(java.util.Collection,com.google.common.base.Function)",259,262,"/**
* Transforms a collection of objects by applying a given function to each element.
* @param fromCollection input collection to transform
* @param function mapping function to apply to each element
* @return transformed collection with mapped elements
*/","* Returns a collection that applies {@code function} to each element of {@code fromCollection}.
   * The returned collection is a live view of {@code fromCollection}; changes to one affect the
   * other.
   *
   * <p>The returned collection's {@code add()} and {@code addAll()} methods throw an {@link
   * UnsupportedOperationException}. All other collection methods are supported, as long as {@code
   * fromCollection} supports them.
   *
   * <p>The returned collection isn't threadsafe or serializable, even if {@code fromCollection} is.
   *
   * <p>When a live view is <i>not</i> needed, it may be faster to copy the transformed collection
   * and use the copy.
   *
   * <p>If the input {@code Collection} is known to be a {@code List}, consider {@link
   * Lists#transform}. If only an {@code Iterable} is available, use {@link Iterables#transform}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#map Stream.map}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,contains,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:contains(java.lang.Object),1436,1439,"/**
* Checks if the specified object is contained in this map's entry set.
* @param o object to search for (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,contains,com.google.common.collect.Collections2$FilteredCollection:contains(java.lang.Object),154,162,"/**
* Checks if the given object satisfies the filter criteria.
* @param element object to check
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,contains,"com.google.common.collect.Iterables:contains(java.lang.Iterable,java.lang.Object)",141,147,"/**
* Checks if an iterable contains a specified element.
* @param iterable the collection to search
* @param element the object to look for
* @return true if found, false otherwise
*/","* Returns {@code true} if {@code iterable} contains any element {@code o} for which {@code
   * Objects.equals(o, element)} would return {@code true}. Otherwise returns {@code false}, even in
   * cases where {@link Collection#contains} might throw {@link NullPointerException} or {@link
   * ClassCastException}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,getOrDefault,"com.google.common.collect.Maps$AsMapView:getOrDefault(java.lang.Object,java.lang.Object)",921,930,"/**
* Retrieves value associated with the given key or returns the default value if not found.
* @param key object to look up in backing map, or null for default
* @param defaultValue value to return if key is missing
* @return associated value or defaultValue if key is null or missing
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,getOrDefault,"com.google.common.collect.Maps$NavigableAsMapView:getOrDefault(java.lang.Object,java.lang.Object)",1079,1088,"/**
* Retrieves value associated with the given key or returns default value if not found.
* @param key object to look up in the set, or null for default
* @param defaultValue fallback value if key is absent
* @return associated value or default value",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$RowMap$EntrySet:contains(java.lang.Object),849,858,"/**
* Checks if the map contains a specific entry.
* @param obj Entry object to search for
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,com.google.common.collect.ContiguousSet:headSet(java.lang.Object),152,155,"/**
* Returns a new contiguous set containing all elements less than the given element.
* @param toElement upper bound of the returned set (exclusive)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,"com.google.common.collect.ContiguousSet:headSet(java.lang.Object,boolean)",160,164,"/**
* Returns a contiguous subset of this set containing all elements less than the given element.
* @param toElement upper bound (inclusive if true, exclusive otherwise)
* @param inclusive whether to include the toElement in the result
*/",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,com.google.common.collect.ContiguousSet:tailSet(java.lang.Object),187,190,"/**
* Returns a contiguous set of elements starting from the given element.
* @param fromElement starting element to include in the set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,"com.google.common.collect.ContiguousSet:tailSet(java.lang.Object,boolean)",195,199,"/**
* Returns a contiguous set containing elements greater than or equal to 'fromElement'.
* @param fromElement element to start the set from
* @param inclusive true if the set should include the 'fromElement'
*/",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,offer,com.google.common.collect.EvictingQueue:offer(java.lang.Object),91,95,"/**
* Offers an element to this collection by adding it.
* @param e element to be added
* @return true if addition was successful, false otherwise
*/","* Adds the given element to this queue. If the queue is currently full, the element at the head
   * of the queue is evicted to make room.
   *
   * @return {@code true} always",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,<init>,"com.google.common.collect.FilteredEntrySetMultimap:<init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",34,36,"/**
* Creates a filtered multimap from an existing one, only including entries that match the provided predicate.
* @param unfiltered original multimap to filter
* @param predicate entry filter criteria
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,<init>,"com.google.common.collect.FilteredKeyListMultimap:<init>(com.google.common.collect.ListMultimap,com.google.common.base.Predicate)",32,34,"/**
* Creates a filtered multimap by applying a predicate to keys.
* @param unfiltered original multimap
* @param keyPredicate filters keys based on the given condition
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,<init>,"com.google.common.collect.FilteredKeySetMultimap:<init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",34,36,"/**
* Creates a filtered multimap view from the given unfiltered multimap and predicate.
* @param unfiltered original multimap to filter
* @param keyPredicate predicate to apply to keys for filtering
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,createValues,com.google.common.collect.FilteredEntryMultimap:createValues(),134,137,"/**
* Creates a collection of filtered values.
* @return collection of filtered values associated with this instance.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createValues,com.google.common.collect.FilteredKeyMultimap:createValues(),212,215,"/**
* Creates values collection with filtered multimap implementation.
* @return Collection of V objects with filter applied
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,forEach,com.google.common.collect.HashBiMap$Inverse:forEach(java.util.function.BiConsumer),739,743,"/**
* Applies a given BiConsumer to each entry in the map.
* @param action consumer function to process entries
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,forEach,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:forEach(java.util.function.Consumer),72,75,"/**
* Iterates over map entries and applies given consumer to each entry.
* @param action consumer function to apply to each entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,forEach,com.google.common.collect.ImmutableSortedMap$1EntrySet:forEach(java.util.function.Consumer),416,423,"/**
* Invokes the provided Consumer on each element in this collection.
* @param consumer function to apply to each element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,forEach,com.google.common.collect.JdkBackedImmutableMap:forEach(java.util.function.BiConsumer),111,115,"/**
* Performs the given action on each entry in this map.
* @param action consumer function to apply to each key-value pair
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,forEach,com.google.common.collect.RegularImmutableAsList:forEach(java.util.function.Consumer),61,65,"/**
* Iterates over elements in this list, applying the given consumer to each.
* @param action Consumer function to apply to each element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,forEach,com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:forEach(java.util.function.Consumer),269,272,"/**
* Executes an action on each entry in the map.
* @param action Consumer to process each map entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,forEach,com.google.common.collect.RegularImmutableSortedSet:forEach(java.util.function.Consumer),85,88,"/**
 * Executes the provided consumer on each element in this collection.
 * @param action Consumer function to apply to each element
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,orderKeysBy,com.google.common.collect.ImmutableListMultimap$Builder:orderKeysBy(java.util.Comparator),317,322,"/**
* Orders keys by specified comparator.
* @param keyComparator Comparator for ordering keys
* @return Builder instance for method chaining
*/","* {@inheritDoc}
     *
     * @since 8.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,orderKeysBy,com.google.common.collect.ImmutableSetMultimap$Builder:orderKeysBy(java.util.Comparator),368,373,"/**
* Orders keys by specified comparator.
* @param keyComparator comparator to sort keys with
* @return updated builder instance
*/","* {@inheritDoc}
     *
     * @since 8.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,orderValuesBy,com.google.common.collect.ImmutableListMultimap$Builder:orderValuesBy(java.util.Comparator),329,334,"/**
* Orders map values by specified comparator.
* @param valueComparator comparator to use for ordering
* @return Builder instance for method chaining
*/","* {@inheritDoc}
     *
     * @since 8.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,orderValuesBy,com.google.common.collect.ImmutableSetMultimap$Builder:orderValuesBy(java.util.Comparator),386,391,"/**
* Orders map values by a custom comparator.
* @param valueComparator comparator to sort values with
* @return updated builder instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,add,com.google.common.collect.ImmutableSortedMultiset$Builder:add(java.lang.Object),472,477,"/**
* Adds an element to the collection and returns this builder.
*/","* Adds {@code element} to the {@code ImmutableSortedMultiset}.
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,addCopies,"com.google.common.collect.ImmutableSortedMultiset$Builder:addCopies(java.lang.Object,int)",504,509,"/**
* Adds copies of an element to this builder.
* @param element element to copy
* @param occurrences number of copies to add
* @return this Builder instance for method chaining
*/","* Adds a number of occurrences of an element to this {@code ImmutableSortedMultiset}.
     *
     * @param element the element to add
     * @param occurrences the number of occurrences of the element to add. May be zero, in which
     *     case no change will be made.
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation
     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,setCount,"com.google.common.collect.ImmutableSortedMultiset$Builder:setCount(java.lang.Object,int)",521,526,"/**
* Sets count for the given element.
* @param element object to update count for
* @param count new count value
*/","* Adds or removes the necessary occurrences of an element such that the element attains the
     * desired count.
     *
     * @param element the element to add or remove occurrences of
     * @param count the desired count of the element in this multiset
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code count} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,toImmutableSortedMultiset,com.google.common.collect.ImmutableSortedMultiset:toImmutableSortedMultiset(java.util.Comparator),70,73,"/**
* Converts a stream into an immutable sorted multiset.
* @param comparator comparator for sorting elements
* @return Collector that returns an ImmutableSortedMultiset
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableMultiset}. Elements are sorted by the specified comparator.
   *
   * <p><b>Warning:</b> {@code comparator} should be <i>consistent with {@code equals}</i> as
   * explained in the {@link Comparator} documentation.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,tailSetImpl,"com.google.common.collect.DescendingImmutableSortedSet:tailSetImpl(java.lang.Object,boolean)",63,66,"/**
* Returns a sorted set of elements greater than or equal to 'fromElement'.
* @param fromElement key element for the tail set
* @param inclusive whether to include 'fromElement' in the result
* @return ImmutableSortedSet containing elements >= fromElement (or > if not inclusive)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,headSet,com.google.common.collect.ImmutableSortedSet:headSet(java.lang.Object),641,644,"/**
* Retrieves all elements less than the given element.
* @param toElement the upper bound (exclusive)
*/","* {@inheritDoc}
   *
   * <p>This method returns a serializable {@code ImmutableSortedSet}.
   *
   * <p>The {@link SortedSet#headSet} documentation states that a subset of a subset throws an
   * {@link IllegalArgumentException} if passed a {@code toElement} greater than an earlier {@code
   * toElement}. However, this method doesn't throw an exception in that situation, but instead
   * keeps the original {@code toElement}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,headSetImpl,"com.google.common.collect.DescendingImmutableSortedSet:headSetImpl(java.lang.Object,boolean)",52,55,"/**
* Returns a view of elements in this sorted set strictly less than the given element.
* @param toElement element to include/exclude from the result
* @param inclusive whether to include the specified element in the result
* @return ImmutableSortedSet containing elements less than toElement
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,tailSet,com.google.common.collect.ImmutableSortedSet:tailSet(java.lang.Object),694,697,"/**
* Returns the sorted set of elements greater than or equal to the specified element.
* @param fromElement the lower bound (inclusive)
*/","* {@inheritDoc}
   *
   * <p>This method returns a serializable {@code ImmutableSortedSet}.
   *
   * <p>The {@link SortedSet#tailSet} documentation states that a subset of a subset throws an
   * {@link IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code
   * fromElement}. However, this method doesn't throw an exception in that situation, but instead
   * keeps the original {@code fromElement}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollFirstEntry,com.google.common.collect.Maps$FilteredEntryNavigableMap:pollFirstEntry(),3325,3328,"/**
* Retrieves and removes the first entry in the map that matches the given predicate.
* @return matching Entry object or null if none found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollLastEntry,com.google.common.collect.Maps$FilteredEntryNavigableMap:pollLastEntry(),3330,3333,"/**
* Removes and returns the last entry from the map.
* @return Entry object or null if map is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,pollFirst,com.google.common.collect.Sets$FilteredNavigableSet:pollFirst(),1376,1379,"/**
 * Removes and returns the first element matching the given predicate.
 * @return E object if found, or null if not found",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,pollLast,com.google.common.collect.Sets$FilteredNavigableSet:pollLast(),1381,1384,"/**
* Retrieves and removes the last element matching the predicate.
* @return E object or null if none found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,cycle,com.google.common.collect.FluentIterable:cycle(),377,379,"/**
* Wraps the underlying iterable in an infinite cycle.
* @return a new FluentIterable with cyclic behavior
*/","* Returns a fluent iterable whose {@code Iterator} cycles indefinitely over the elements of this
   * fluent iterable.
   *
   * <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code
   * remove()} is called, subsequent cycles omit the removed element, which is no longer in this
   * fluent iterable. The iterator's {@code hasNext()} method returns {@code true} until this fluent
   * iterable is empty.
   *
   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
   * should use an explicit {@code break} or be certain that you will eventually remove all the
   * elements.
   *
   * <p><b>{@code Stream} equivalent:</b> if the source iterable has only a single element {@code
   * e}, use {@code Stream.generate(() -> e)}. Otherwise, collect your stream into a collection and
   * use {@code Stream.generate(() -> collection).flatMap(Collection::stream)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,filter,com.google.common.collect.FluentIterable:filter(com.google.common.base.Predicate),414,416,"/**
* Filters this iterable based on the given predicate.
* @param predicate condition to apply to each element
*/","* Returns the elements from this fluent iterable that satisfy a predicate. The resulting fluent
   * iterable's iterator does not support {@code remove()}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#filter} (same).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,filter,"com.google.common.collect.Iterables:filter(java.lang.Iterable,java.lang.Class)",614,620,"/**
* Filters an iterable to only include elements of a specified type.
* @param unfiltered iterable to be filtered
* @param desiredType class of the desired element type
* @return filtered iterable or null if input is invalid
*/","* Returns a view of {@code unfiltered} containing all elements that are of the type {@code
   * desiredType}. The returned iterable's iterator does not support {@code remove()}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}.
   * This does perform a little more work than necessary, so another option is to insert an
   * unchecked cast at some later point:
   *
   * {@snippet :
   * @SuppressWarnings(""unchecked"") // safe because of ::isInstance check
   * ImmutableList<NewType> result =
   *     (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());
   * }",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,transform,com.google.common.collect.FluentIterable:transform(com.google.common.base.Function),479,482,"/**
* Transforms elements in this iterable to a new type using the provided function.
* @param function mapping function from original type E to new type T
*/","* Returns a fluent iterable that applies {@code function} to each element of this fluent
   * iterable.
   *
   * <p>The returned fluent iterable's iterator supports {@code remove()} if this iterable's
   * iterator does. After a successful {@code remove()} call, this fluent iterable no longer
   * contains the corresponding element.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#map}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,peekingIterator,com.google.common.collect.Iterators:peekingIterator(java.util.Iterator),1263,1273,"/**
* Creates a PeekingIterator instance from the given Iterator.
* @param iterator input Iterator to wrap
*/","* Returns a {@code PeekingIterator} backed by the given iterator.
   *
   * <p>Calls to the {@code peek} method with no intervening calls to {@code next} do not affect the
   * iteration, and hence return the same object each time. A subsequent call to {@code next} is
   * guaranteed to return the same object again. For example:
   *
   * {@snippet :
   * PeekingIterator<String> peekingIterator =
   *     Iterators.peekingIterator(Iterators.forArray(""a"", ""b""));
   * String a1 = peekingIterator.peek(); // returns ""a""
   * String a2 = peekingIterator.peek(); // also returns ""a""
   * String a3 = peekingIterator.next(); // also returns ""a""
   * }
   *
   * <p>Any structural changes to the underlying iteration (aside from those performed by the
   * iterator's own {@link PeekingIterator#remove()} method) will leave the iterator in an undefined
   * state.
   *
   * <p>The returned iterator does not support removal after peeking, as explained by {@link
   * PeekingIterator#remove()}.
   *
   * <p>Note: If the given iterator is already a {@code PeekingIterator}, it <i>might</i> be
   * returned to the caller, although this is neither guaranteed to occur nor required to be
   * consistent. For example, this method <i>might</i> choose to pass through recognized
   * implementations of {@code PeekingIterator} when the behavior of the implementation is known to
   * meet the contract guaranteed by this method.
   *
   * <p>There is no {@link Iterable} equivalent to this method, so use this method to wrap each
   * individual iterator as it is generated.
   *
   * @param iterator the backing iterator. The {@link PeekingIterator} assumes ownership of this
   *     iterator, so users should cease making direct calls to it after calling this method.
   * @return a peeking iterator backed by that iterator. Apart from the additional {@link
   *     PeekingIterator#peek()} method, this iterator behaves exactly the same as {@code iterator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,keyIterator,com.google.common.collect.ImmutableEnumMap:keyIterator(),61,64,"/**
* Returns an unmodifiable iterator over this map's keys.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,iterator,com.google.common.collect.ImmutableEnumSet:iterator(),72,75,"/**
* Returns an unmodifiable iterator over elements of this collection.
* @return Iterator instance or null if not initialized
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,iterator,com.google.common.collect.Iterables$UnmodifiableIterable:iterator(),105,108,"/**
* Returns an unmodifiable iterator over this iterable's elements.
* @return Iterator object that traverses the underlying collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iterator,com.google.common.collect.Multisets$UnmodifiableMultiset:iterator(),170,173,"/**
* Returns an unmodifiable iterator over elements in this data structure.
* @return Unmodifiable iterator instance.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingIterator,com.google.common.collect.Sets$UnmodifiableNavigableSet:descendingIterator(),2037,2040,"/**
* Returns an unmodifiable iterator over elements in reverse order.
* @return Iterator over E objects or null if delegate is null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,removeAll,"com.google.common.collect.Iterables:removeAll(java.lang.Iterable,java.util.Collection)",159,164,"/**
* Removes all specified elements from the given iterable.
* @param removeFrom iterable to remove elements from
* @param elementsToRemove collection of elements to remove
* @return true if any elements were removed, false otherwise
*/","* Removes, from an iterable, every element that belongs to the provided collection.
   *
   * <p>This method calls {@link Collection#removeAll} if {@code iterable} is a collection, and
   * {@link Iterators#removeAll} otherwise.
   *
   * @param removeFrom the iterable to (potentially) remove elements from
   * @param elementsToRemove the elements to remove
   * @return {@code true} if any element was removed from {@code iterable}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,removeAllImpl,"com.google.common.collect.Sets:removeAllImpl(java.util.Set,java.util.Collection)",2128,2145,"/**
* Removes all elements from the given set that are also in the given collection.
* @param set the set to modify
* @param collection the collection containing elements to remove
* @return true if any elements were removed; false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$ColumnKeySet:removeAll(java.util.Collection),717,734,"/**
* Removes all specified elements from the backing map's key sets.
* @param c Collection of elements to remove
* @return true if any maps were emptied, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:removeAll(java.util.Collection),1039,1044,"/**
* Removes all elements from this collection that are present in the specified collection.
* @param c Collection of elements to remove
* @return true if any elements were removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,removeIf,"com.google.common.collect.Iterables:removeIf(java.lang.Iterable,com.google.common.base.Predicate)",199,206,"/**
* Removes elements from an iterable that match a given predicate.
* @param removeFrom collection to modify
* @param predicate condition for removal
* @return true if any elements were removed, false otherwise
*/","* Removes, from an iterable, every element that satisfies the provided predicate.
   *
   * <p>Removals may or may not happen immediately as each element is tested against the predicate.
   * The behavior of this method is not specified if {@code predicate} is dependent on {@code
   * removeFrom}.
   *
   * <p><b>Java 8+ users:</b> if {@code removeFrom} is a {@link Collection}, use {@code
   * removeFrom.removeIf(predicate)} instead.
   *
   * @param removeFrom the iterable to (potentially) remove elements from
   * @param predicate a predicate that determines whether an element should be removed
   * @return {@code true} if any elements were removed from the iterable
   * @throws UnsupportedOperationException if the iterable does not support {@code remove()}.
   * @since 2.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,retainAll,"com.google.common.collect.Iterables:retainAll(java.lang.Iterable,java.util.Collection)",176,181,"/**
* Removes all elements not present in the 'elementsToRetain' collection from the given iterable.
* @param removeFrom target iterable to modify
* @param elementsToRetain collection of elements to retain
* @return true if any elements were removed, false otherwise
*/","* Removes, from an iterable, every element that does not belong to the provided collection.
   *
   * <p>This method calls {@link Collection#retainAll} if {@code iterable} is a collection, and
   * {@link Iterators#retainAll} otherwise.
   *
   * @param removeFrom the iterable to (potentially) remove elements from
   * @param elementsToRetain the elements to retain
   * @return {@code true} if any element was removed from {@code iterable}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,retainAll,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:retainAll(java.util.Collection),1046,1051,"/**
* Retains all elements from the specified collection.
* @param c target collection to filter against
* @return true if filtering was successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,"com.google.common.collect.AbstractMultimap:putAll(java.lang.Object,java.lang.Iterable)",78,91,"/**
* Adds all elements from the given iterable to the map's value collection.
* @param key unique key identifier
* @param values iterable of values to add
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardAddAll,com.google.common.collect.ForwardingCollection:standardAddAll(java.util.Collection),159,161,"/**
* Adds all elements from the given collection to this collection.
* @param collection Collection of elements to add
*/","* A sensible definition of {@link #addAll} in terms of {@link #add}. If you override {@link
   * #add}, you may wish to override {@link #addAll} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,addAll,"com.google.common.collect.Iterables:addAll(java.util.Collection,java.lang.Iterable)",325,333,"/**
* Adds all elements from the given iterable to the specified collection.
* @param addTo target collection
* @param elementsToAdd iterable of elements to add
* @return true if elements were added, false otherwise
*/","* Adds all elements in {@code iterable} to {@code collection}.
   *
   * @return {@code true} if {@code collection} was modified as a result of this operation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayList,com.google.common.collect.Lists:newArrayList(java.util.Iterator),147,153,"/**
* Creates an ArrayList from the given iterator of elements.
* @param elements iterator containing elements to add
*/","* Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin
   * shortcut for creating an empty list and then calling {@link Iterators#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableList#copyOf(Iterator)} instead.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newHashSet,com.google.common.collect.Sets:newHashSet(java.util.Iterator),244,249,"/**
* Creates a new hash set from an iterator of elements.
* @param elements iterable collection of objects to add
*/","* Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin
   * convenience for creating an empty set and then calling {@link Iterators#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableSet#copyOf(Iterator)} instead.
   *
   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, you should create an {@link EnumSet}
   * instead.
   *
   * <p>Overall, this method is not very useful and will likely be deprecated in the future.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$FilteredCollection:iterator(),174,177,"/**
* Filters unfiltered iterator based on provided predicate.
* @return filtered iterator of elements that satisfy predicate
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,filter,"com.google.common.collect.Iterators:filter(java.util.Iterator,java.lang.Class)",688,692,"/**
* Filters an iterator to only include elements of a specific type.
* @param unfiltered original iterator
* @param desiredType class of elements to keep
* @return filtered iterator or null if no matches
*/","* Returns a view of {@code unfiltered} containing all elements that are of the type {@code
   * desiredType}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entryIterator,com.google.common.collect.Maps$FilteredEntryNavigableMap:entryIterator(),3270,3273,"/**
* Filters unfiltered map entries using the provided predicate.
* @return iterator over filtered entries or empty iterator if none match
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingEntryIterator,com.google.common.collect.Maps$FilteredEntryNavigableMap:descendingEntryIterator(),3275,3278,"/**
* Returns an iterator over map entries in descending order.
* @return Iterator over filtered map entries or empty collection if none match
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iterator,com.google.common.collect.Multisets$FilteredMultiset:iterator(),338,341,"/**
* Returns an unmodifiable iterator filtering elements based on the given predicate.
* @return Iterator of filtered elements or null if predicate is invalid.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingIterator,com.google.common.collect.Sets$FilteredNavigableSet:descendingIterator(),1391,1394,"/**
* Returns an iterator over elements in descending order, filtered by the predicate. 
* @return Iterator of type E or null if filter is empty",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,all,"com.google.common.collect.Iterables:all(java.lang.Iterable,com.google.common.base.Predicate)",638,641,"/**
* Checks if all elements in an iterable satisfy a given condition.
* @param iterable collection of objects to check
* @param predicate condition to evaluate each object against
*/","* Returns {@code true} if every element in {@code iterable} satisfies the predicate. If {@code
   * iterable} is empty, {@code true} is returned.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,find,"com.google.common.collect.Iterables:find(java.lang.Iterable,com.google.common.base.Predicate)",652,656,"/**
* Finds first element in an iterable that matches a given predicate.
* @param iterable collection of elements to search
* @param predicate condition to match
* @return first matching element or null if not found
*/","* Returns the first element in {@code iterable} that satisfies the given predicate; use this
   * method only when such an element is known to exist. If it is possible that <i>no</i> element
   * will match, use {@link #tryFind} or {@link #find(Iterable, Predicate, Object)} instead.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst().get()}
   *
   * @throws NoSuchElementException if no element in {@code iterable} matches the given predicate",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,last,com.google.common.collect.Sets$FilteredNavigableSet:last(),1396,1400,"/**
* Retrieves the last element from this iterable collection.
* @return Last element of type E or null if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,first,com.google.common.collect.Sets$FilteredSortedSet:first(),1325,1329,"/**
* Retrieves the first element from the unfiltered iterator that matches the predicate. 
* @return The first matching element, or null if none found.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,find,"com.google.common.collect.Iterables:find(java.lang.Iterable,com.google.common.base.Predicate,java.lang.Object)",683,686,"/**
* Finds the first element in an iterable that matches a given predicate.
* @param iterable collection of elements to search
* @param predicate condition to apply to each element
* @param defaultValue value to return if no match is found
* @return matched element or default value",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,lower,com.google.common.collect.Sets$FilteredNavigableSet:lower(java.lang.Object),1356,1359,"/**
* Retrieves the smallest element in the collection that satisfies the predicate.
* @param e the upper bound of the search range
* @return the smallest matching element or null if not found",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,floor,com.google.common.collect.Sets$FilteredNavigableSet:floor(java.lang.Object),1361,1364,"/**
* Finds and returns the largest element in the collection that is less than or equal to the given value.
* @param e The reference value to compare against
* @return The largest matching element or null if none found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$TransformedCollection:iterator(),284,287,"/**
* Returns an iterator over transformed collection elements.
* @return Iterator of type T or null if source collection is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellIterator,com.google.common.collect.Tables$TransformedTable:cellIterator(),485,488,"/**
* Returns an iterator over cells in the table, applying a transformation to each value.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellIterator,com.google.common.collect.Tables$TransposeTable:cellIterator(),317,320,"/**
* Returns an iterator over transformed cells from the original table.
* @return Iterator Cell objects with transposed data.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,incidentEdgeIterator,com.google.common.graph.UndirectedGraphConnections:incidentEdgeIterator(java.lang.Object),79,84,"/**
* Returns an iterator over unordered endpoint pairs for the given node.
* @param thisNode the current node
* @return Iterator of EndpointPair objects or empty if no edges exist
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,clear,com.google.common.collect.AbstractMapBasedMultimap$AsMap:clear(),1403,1410,"/**
* Clears this multimap, optionally cascading to the underlying map.
* @throws ConcurrentModificationException if the underlying map is cleared concurrently
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,clear,com.google.common.collect.AbstractMapBasedMultimap$KeySet:clear(),994,997,"/**
* Clears the iterator and its associated data structure.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,removeAllNodes,com.google.common.collect.LinkedListMultimap:removeAllNodes(java.lang.Object),298,300,"/**
* Removes all nodes with the given key.
* @param key unique identifier to remove
*/",Removes all nodes for the specified key.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$IteratorBasedAbstractMap:clear(),3787,3790,"/**
* Clears all entries from this cache.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,clear,com.google.common.collect.TreeMultiset:clear(),349,371,"/**
* Clears the AVL tree by resetting node counts and references.
* @param no rebalancing required if range has no bounds
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$RandomAccessListWrapper:<init>(java.util.List),1210,1212,"/**
* Creates a wrapper around a given list, enabling random access.
* @param backingList list to be wrapped
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,listIteratorImpl,"com.google.common.collect.Lists:listIteratorImpl(java.util.List,int)",1130,1132,"/**
* Creates a list iterator at the specified index.
* @param list the backing list
* @param index the starting index
*/",Returns an implementation of {@link List#listIterator(int)}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,asList,"com.google.common.collect.Lists:asList(java.lang.Object,java.lang.Object[])",310,312,"/**
* Creates a list with given elements.
* @param first first element in the list
* @param rest remaining elements (may be empty)
*/","* Returns an unmodifiable list containing the specified first element and backed by the specified
   * array of additional elements. Changes to the {@code rest} array will be reflected in the
   * returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable.
   *
   * <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo,
   * Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum argument count.
   *
   * <p>The returned list is serializable and implements {@link RandomAccess}.
   *
   * @param first the first element
   * @param rest an array of additional elements, possibly empty
   * @return an unmodifiable list containing the specified elements",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$RandomAccessReverseList:<init>(java.util.List),1008,1010,"/**
* Initializes a new reverse-access list from an existing forward-access list.
* @param forwardList the original list to be reversed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,transform,"com.google.common.collect.Lists:transform(java.util.List,com.google.common.base.Function)",551,556,"/**
* Transforms a list of objects by applying a function to each element.
* @param fromList input list of objects
* @param function transformation function
* @return transformed list of objects
*/","* Returns a list that applies {@code function} to each element of {@code fromList}. The returned
   * list is a transformed view of {@code fromList}; changes to {@code fromList} will be reflected
   * in the returned list and vice versa.
   *
   * <p>Since functions are not reversible, the transform is one-way and new items cannot be stored
   * in the returned list. The {@code add}, {@code addAll} and {@code set} methods are unsupported
   * in the returned list.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned list
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link List#contains} and {@link List#hashCode}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned list doesn't need to be a
   * view, copy the returned list into a new list of your choosing.
   *
   * <p>If {@code fromList} implements {@link RandomAccess}, so will the returned list. The returned
   * list is threadsafe if the supplied list and function are.
   *
   * <p>If only a {@code Collection} or {@code Iterable} input is available, use {@link
   * Collections2#transform} or {@link Iterables#transform}.
   *
   * <p><b>Note:</b> serializing the returned list is implemented by serializing {@code fromList},
   * its contents, and {@code function} -- <i>not</i> by serializing the transformed values. This
   * can lead to surprising behavior, so serializing the returned list is <b>not recommended</b>.
   * Instead, copy the list using {@link ImmutableList#copyOf(Collection)} (for example), then
   * serialize the copy. Other methods similar to this do not implement serialization at all for
   * this reason.
   *
   * <p><b>Java 8+ users:</b> many use cases for this method are better addressed by {@link
   * java.util.stream.Stream#map}. This method is not being deprecated, but we gently encourage you
   * to migrate to streams.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,asList,"com.google.common.collect.Lists:asList(java.lang.Object,java.lang.Object,java.lang.Object[])",330,333,"/**
* Creates a list with the specified elements.
* @param first first element
* @param second second element
* @param rest remaining elements in an array
*/","* Returns an unmodifiable list containing the specified first and second element, and backed by
   * the specified array of additional elements. Changes to the {@code rest} array will be reflected
   * in the returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable.
   *
   * <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo,
   * Foo secondFoo, Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum
   * argument count.
   *
   * <p>The returned list is serializable and implements {@link RandomAccess}.
   *
   * @param first the first element
   * @param second the second element
   * @param rest an array of additional elements, possibly empty
   * @return an unmodifiable list containing the specified elements",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$SortedAsMapView:<init>(java.util.SortedSet,com.google.common.base.Function)",986,988,"/**
* Creates a sorted map view from a given sorted set.
* @param set the input sorted set
* @param function mapping function to convert set elements to map values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asMap,"com.google.common.collect.Maps:asMap(java.util.Set,com.google.common.base.Function)",819,822,"/**
* Converts a set of keys to a map with values computed by the provided function. 
* @param set Set of keys
* @param function Function to compute values for each key
*/","* Returns a live {@link Map} view whose keys are the contents of {@code set} and whose values are
   * computed on demand using {@code function}. To get an immutable <i>copy</i> instead, use {@link
   * #toMap(Iterable, Function)}.
   *
   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping
   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code
   * entrySet} views of the returned map iterate in the same order as the backing set.
   *
   * <p>Modifications to the backing set are read through to the returned map. The returned map
   * supports removal operations if the backing set does. Removal operations write through to the
   * backing set. The returned map does not support put operations.
   *
   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the
   * set does not contain {@code null}, because the view cannot stop {@code null} from being added
   * to the set.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},
   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for
   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when
   * calling methods on the resulting map view.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$SortedKeySet:<init>(java.util.SortedMap),3978,3980,"/**
* Constructs a new SortedKeySet from the given sorted map.
* @param map the underlying sorted map
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createKeySet,com.google.common.collect.Maps$ViewCachingAbstractMap:createKeySet(),3728,3730,"/**
* Creates and returns a set containing this instance's keys.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asMap,"com.google.common.collect.Maps:asMap(java.util.NavigableSet,com.google.common.base.Function)",875,879,"/**
* Converts a navigable set to a map using the provided function.
* @param set navigable key set
* @param function function to apply to each key
*/","* Returns a view of the navigable set as a map, mapping keys from the set according to the
   * specified function.
   *
   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping
   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code
   * entrySet} views of the returned map iterate in the same order as the backing set.
   *
   * <p>Modifications to the backing set are read through to the returned map. The returned map
   * supports removal operations if the backing set does. Removal operations write through to the
   * backing set. The returned map does not support put operations.
   *
   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the
   * set does not contain {@code null}, because the view cannot stop {@code null} from being added
   * to the set.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},
   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for
   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when
   * calling methods on the resulting map view.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$TransformedEntriesSortedMap:<init>(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)",2227,2230,"/**
* Constructs a new sorted map by transforming entries from the provided map.
* @param fromMap source map to transform
* @param transformer entry transformation function
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntries,"com.google.common.collect.Maps:transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer)",1959,1964,"/**
* Transforms entries in a map using the provided transformer.
* @param fromMap original map
* @param transformer entry transformation function
* @return transformed map with new values
*/","* Returns a view of a map whose values are derived from the original map's entries. In contrast
   * to {@link #transformValues}, this method's entry-transformation logic may depend on the key as
   * well as the value.
   *
   * <p>All other properties of the transformed map, such as iteration order, are left intact. For
   * example, the code:
   *
   * {@snippet :
   * Map<String, Boolean> options =
   *     ImmutableMap.of(""verbose"", true, ""sort"", false);
   * EntryTransformer<String, Boolean, String> flagPrefixer =
   *     new EntryTransformer<String, Boolean, String>() {
   *       public String transformEntry(String key, Boolean value) {
   *         return value ? key : ""no"" + key;
   *       }
   *     };
   * Map<String, String> transformed =
   *     Maps.transformEntries(options, flagPrefixer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {verbose=verbose, sort=nosort}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys and null values provided that
   * the transformer is capable of accepting null inputs. The transformed map might contain null
   * values if the transformer sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * map to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map
   * doesn't need to be a view, copy the returned map into a new map of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed map.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$DescendingMap:values(),4459,4462,"/**
* Returns an unmodifiable collection of all values in this map.
* @return Collection containing all map entries' key-values pairs.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredMapValues:<init>(java.util.Map,java.util.Map,com.google.common.base.Predicate)",2910,2915,"/**
* Creates a filtered map with values based on the provided predicate.
* @param filteredMap original map to filter
* @param unfiltered complete map for reference
* @param predicate condition to apply to each entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$TransformedEntriesMap:values(),2213,2216,"/**
* Returns an unmodifiable collection of V2 objects associated with this instance. 
* @return Unmodifiable collection of V2 objects.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createValues,com.google.common.collect.Maps$ViewCachingAbstractMap:createValues(),3740,3742,"/**
* Creates a collection of values associated with this object.
* @return Collection of V objects or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,entrySpliterator,com.google.common.collect.ImmutableEnumMap:entrySpliterator(),102,105,"/**
* Returns an unmodifiable spliterator of entries from the underlying map.
* @return Spliterator of Entry objects or null if map is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableOrNull,com.google.common.collect.Maps:unmodifiableOrNull(java.util.Map$Entry),3445,3448,"/**
* Returns an unmodifiable Map.Entry instance if the provided entry is non-null.
* If the input entry is null, returns null.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsEntryImpl,"com.google.common.collect.Maps:containsEntryImpl(java.util.Collection,java.lang.Object)",3854,3860,"/**
* Checks if the given object is an entry in the specified collection.
* @param c Collection of entries to search
* @param o Object to check for membership (must be an Entry instance)
* @return true if the object is found, false otherwise
*/","* Implements {@code Collection.contains} safely for forwarding collections of map entries. If
   * {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to
   * protect against a possible nefarious equals method.
   *
   * <p>Note that {@code c} is the backing (delegate) collection, rather than the forwarding
   * collection.
   *
   * @param c the delegate (unwrapped) collection of map entries
   * @param o the object that might be contained in {@code c}
   * @return {@code true} if {@code c} contains {@code o}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeEntryImpl,"com.google.common.collect.Maps:removeEntryImpl(java.util.Collection,java.lang.Object)",3873,3879,"/**
* Removes a specific entry from the collection.
* @param c collection of entries
* @param o entry to be removed (null returns false)
*/","* Implements {@code Collection.remove} safely for forwarding collections of map entries. If
   * {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to
   * protect against a possible nefarious equals method.
   *
   * <p>Note that {@code c} is backing (delegate) collection, rather than the forwarding collection.
   *
   * @param c the delegate (unwrapped) collection of map entries
   * @param o the object to remove from {@code c}
   * @return {@code true} if {@code c} was changed",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:transformEntry(java.util.Map$Entry),2385,2387,"/**
* Transforms an existing map entry using a provided function.
* @param entry the entry to transform, or null for null result
* @return transformed Entry object, or null if input is null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entryIterator,com.google.common.collect.Maps$TransformedEntriesMap:entryIterator(),2194,2198,"/**
* Converts map entries to transformed entries using the provided transformer.
* @return Iterator of transformed entries or null if input iterator is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySpliterator,com.google.common.collect.Maps$TransformedEntriesMap:entrySpliterator(),2200,2204,"/**
* Creates a spliterator for map entries.
* @return Spliterator of Map.Entry objects with transformed values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,entryIterator,com.google.common.collect.Multimaps$TransformedEntriesMultimap:entryIterator(),1541,1545,"/**
* Converts multimap entries to transformed entries.
* @return iterator over transformed map entries
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,get,com.google.common.collect.AbstractMapBasedMultimap$AsMap:get(java.lang.Object),1353,1362,"/**
* Retrieves a collection of values associated with the given key.
* @param key unique identifier or object to retrieve
* @return Collection<V> containing associated values or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,count,com.google.common.collect.AbstractMapBasedMultiset:count(java.lang.Object),250,254,"/**
* Returns the frequency of the given object in the backing map.
* @param element object to search for in the backing map
* @return frequency count or 0 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,contains,com.google.common.collect.AbstractTable$CellSet:contains(java.lang.Object),134,144,"/**
* Checks if a Cell object is present in the data structure.
* @param o the object to search for (must be a Cell instance)
* @return true if the object is found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,remove,com.google.common.collect.AbstractTable$CellSet:remove(java.lang.Object),146,156,"/**
* Removes a Cell object from the underlying data structure.
* @param o Cell object to be removed
* @return true if removal was successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,get,"com.google.common.collect.AbstractTable:get(java.lang.Object,java.lang.Object)",79,83,"/**
* Retrieves a value by its row and column keys.
* @param rowKey unique identifier for the data row
* @param columnKey unique identifier for the data column
* @return Value object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,count,com.google.common.collect.ConcurrentHashMultiset:count(java.lang.Object),142,146,"/**
* Retrieves and returns the current count of a given object.
* @param element Object to fetch count for
* @return Count as an integer or 0 if not found
*/","* Returns the number of occurrences of {@code element} in this multiset.
   *
   * @param element the element to look for
   * @return the nonnegative number of occurrences of the element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,removeExactly,"com.google.common.collect.ConcurrentHashMultiset:removeExactly(java.lang.Object,int)",314,340,"/**
* Removes exactly the specified occurrences of an element from the collection.
* @param element object to remove
* @param occurrences number of occurrences to remove
* @return true if removal was successful, false otherwise
*/","* Removes exactly the specified number of occurrences of {@code element}, or makes no change if
   * this is not possible.
   *
   * <p>This method, in contrast to {@link #remove(Object, int)}, has no effect when the element
   * count is smaller than {@code occurrences}.
   *
   * @param element the element to remove
   * @param occurrences the number of occurrences of {@code element} to remove
   * @return {@code true} if the removal was possible (including if {@code occurrences} is zero)
   * @throws IllegalArgumentException if {@code occurrences} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,setCount,"com.google.common.collect.ConcurrentHashMultiset:setCount(java.lang.Object,int)",349,393,"/**
* Updates or inserts the count for an element in the map, using atomic operations to maintain consistency.
* @param element unique element identifier
* @param count new count value (0 to remove)
* @return old count value if updated, 0 if removed
*/","* Adds or removes occurrences of {@code element} such that the {@link #count} of the element
   * becomes {@code count}.
   *
   * @return the count of {@code element} in the multiset before this call
   * @throws IllegalArgumentException if {@code count} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,setCount,"com.google.common.collect.ConcurrentHashMultiset:setCount(java.lang.Object,int,int)",405,447,"/**
* Updates element's count in the map to newCount if expected old count matches.
* @param element unique identifier for the element
* @param expectedOldCount previous count value
* @param newCount new count value
* @return true if update was successful, false otherwise
*/","* Sets the number of occurrences of {@code element} to {@code newCount}, but only if the count is
   * currently {@code expectedOldCount}. If {@code element} does not appear in the multiset exactly
   * {@code expectedOldCount} times, no changes will be made.
   *
   * @return {@code true} if the change was successful. This usually indicates that the multiset has
   *     been modified, but not always: in the case that {@code expectedOldCount == newCount}, the
   *     method will return {@code true} if the condition was met.
   * @throws IllegalArgumentException if {@code expectedOldCount} or {@code newCount} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,contains,com.google.common.collect.Maps$EntrySet:contains(java.lang.Object),4211,4220,"/**
* Checks if the given object is present in the map.
* @param o Object to search for
* @return true if the object is an Entry and its value matches the map's entry, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,count,com.google.common.collect.Multimaps$Keys:count(java.lang.Object),1792,1796,"/**
* Returns the number of associated values for a given element.
* @param element the element to count associations for
* @return non-negative integer count or 0 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,"com.google.common.collect.StandardTable:remove(java.lang.Object,java.lang.Object)",158,173,"/**
* Removes a key-value pair from the map by row and column keys.
* @param rowKey unique row identifier or null
* @param columnKey unique column identifier or null
* @return removed value or null if not found or empty row
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,containsKey,com.google.common.collect.AbstractMapBasedMultimap$AsMap:containsKey(java.lang.Object),1348,1351,"/**
* Checks if submap contains a given key.
* @param key object to search in submap
* @return true if key is found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsRow,com.google.common.collect.AbstractTable:containsRow(java.lang.Object),43,46,"/**
* Checks if a user row exists by key.
* @param rowKey unique row identifier (or null to check for any row)
* @return true if the row exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsColumn,com.google.common.collect.AbstractTable:containsColumn(java.lang.Object),48,51,"/**
* Checks if a column exists by key.
* @param columnKey unique column identifier or null to check all columns
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,contains,"com.google.common.collect.AbstractTable:contains(java.lang.Object,java.lang.Object)",73,77,"/**
* Checks if a cell exists at the specified row and column keys.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @return true if cell exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsColumn,com.google.common.collect.StandardTable:containsColumn(java.lang.Object),91,102,"/**
* Checks if a specific column exists in the underlying data structure.
* @param columnKey unique identifier for the column to search
* @return true if the column is found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsRow,com.google.common.collect.StandardTable:containsRow(java.lang.Object),104,107,"/**
* Checks if a row exists in the data storage by its key.
* @param rowKey unique identifier of the row to check (may be null)
* @return true if the row exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeValuesForKey,com.google.common.collect.AbstractMapBasedMultimap:removeValuesForKey(java.lang.Object),1148,1156,"/**
* Removes values associated with the given key from the map and updates the total size.
* @param key unique identifier to remove
*/",Removes all values for the provided key.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,remove,"com.google.common.collect.AbstractTable:remove(java.lang.Object,java.lang.Object)",95,100,"/**
* Removes a cell by key from the map.
* @param rowKey unique row identifier or null for all rows
* @param columnKey unique column identifier or null for all columns
* @return value of removed cell or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,forEach,com.google.common.collect.Multimaps$UnmodifiableMultimap:forEach(java.util.function.BiConsumer),722,725,"/**
* Iterates over key-value pairs in this map, applying the provided BiConsumer to each entry.
*@param consumer a bi-functional operation that consumes each key-value pair
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeKeys,com.google.common.collect.MultimapBuilder:treeKeys(),134,137,"/**
* Creates a new MultimapBuilder instance with natural ordering keys.
*/","* Uses a naturally-ordered {@link TreeMap} to map keys to value collections.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in sorted order.
   *
   * <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be
   * safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be
   * cast to a {@link java.util.SortedMap}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,createAsMap,com.google.common.collect.LinkedListMultimap:createAsMap(),833,836,"/**
* Creates an immutable map representation of this multimap.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createAsMap,com.google.common.collect.Multimaps$MapMultimap:createAsMap(),1280,1283,"/**
* Creates an immutable map representation of this object. 
* @return A map containing key-value pairs from this object.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,forMap,com.google.common.collect.Multimaps:forMap(java.util.Map),1131,1134,"/**
* Converts a Map to a Multimap.
* @param map input map
* @return SetMultimap instance wrapping the map
*/","* Returns a multimap view of the specified map. The multimap is backed by the map, so changes to
   * the map are reflected in the multimap, and vice versa. If the map is modified while an
   * iteration over one of the multimap's collection views is in progress (except through the
   * iterator's own {@code remove} operation, or through the {@code setValue} operation on a map
   * entry returned by the iterator), the results of the iteration are undefined.
   *
   * <p>The multimap supports mapping removal, which removes the corresponding mapping from the map.
   * It does not support any operations which might add mappings, such as {@code put}, {@code
   * putAll} or {@code replaceValues}.
   *
   * <p>The returned multimap will be serializable if the specified map is serializable.
   *
   * @param map the backing map for the returned multimap view",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$TransformedEntriesListMultimap:<init>(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer)",1616,1619,"/**
* Creates a multimap of transformed entries.
* @param fromMultimap original multimap to transform
* @param transformer entry transformation function
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformEntries,"com.google.common.collect.Multimaps:transformEntries(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer)",1438,1443,"/**
* Transforms entries in a multimap using an entry transformer.
* @param fromMap source multimap
* @param transformer transformation function
* @return new multimap with transformed entries
*/","* Returns a view of a multimap whose values are derived from the original multimap's entries. In
   * contrast to {@link #transformValues}, this method's entry-transformation logic may depend on
   * the key as well as the value.
   *
   * <p>All other properties of the transformed multimap, such as iteration order, are left intact.
   * For example, the code:
   *
   * {@snippet :
   * SetMultimap<String, Integer> multimap =
   *     ImmutableSetMultimap.of(""a"", 1, ""a"", 4, ""b"", -6);
   * EntryTransformer<String, Integer, String> transformer =
   *     new EntryTransformer<String, Integer, String>() {
   *       public String transformEntry(String key, Integer value) {
   *          return (value >= 0) ? key : ""no"" + key;
   *       }
   *     };
   * Multimap<String, String> transformed =
   *     Multimaps.transformEntries(multimap, transformer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=[a, a], b=[nob]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys and null values provided
   * that the transformer is capable of accepting null inputs. The transformed multimap might
   * contain null values if the transformer sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless,
   * since there is not a definition of {@code equals} or {@code hashCode} for general collections,
   * and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a
   * {@code Set}.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap
   * doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed multimap.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,addAll,com.google.common.collect.ImmutableMultiset$Builder:addAll(java.lang.Iterable),559,569,"/**
* Adds all elements from the given iterable to the set.
* @param elements iterable of elements to add
* @return this builder instance for method chaining
*/","* Adds each element of {@code elements} to the {@code ImmutableMultiset}.
     *
     * @param elements the {@code Iterable} to add to the {@code ImmutableMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,addAllImpl,"com.google.common.collect.Multisets:addAllImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",911,918,"/**
* Adds all elements from the given multiset to this one.
* @param elements multiset containing elements to be added
*/",A specialization of {@code addAllImpl} for when {@code elements} is itself a Multiset.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,retainOccurrences,"com.google.common.collect.Multisets:retainOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",716,720,"/**
* Modifies the first multiset to retain elements from the second.
* @param multisetToModify multiset to be modified
* @param multisetToRetain multiset whose occurrences are retained
*/","* Modifies {@code multisetToModify} so that its count for an element {@code e} is at most {@code
   * multisetToRetain.count(e)}.
   *
   * <p>To be precise, {@code multisetToModify.count(e)} is set to {@code
   * Math.min(multisetToModify.count(e), multisetToRetain.count(e))}. This is similar to {@link
   * #intersection(Multiset, Multiset) intersection} {@code (multisetToModify, multisetToRetain)},
   * but mutates {@code multisetToModify} instead of returning a view.
   *
   * <p>In contrast, {@code multisetToModify.retainAll(multisetToRetain)} keeps all occurrences of
   * elements that appear at all in {@code multisetToRetain}, and deletes all occurrences of all
   * other elements.
   *
   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,removeOccurrences,"com.google.common.collect.Multisets:removeOccurrences(com.google.common.collect.Multiset,java.lang.Iterable)",767,781,"/**
* Removes specified elements from a multiset.
* @param multisetToModify the multiset to modify
* @param occurrencesToRemove elements to remove, may be a Multiset or Iterable of elements
* @return true if any elements were removed, false otherwise
*/","* For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one
   * occurrence of {@code e} in {@code multisetToModify}.
   *
   * <p>Equivalently, this method modifies {@code multisetToModify} so that {@code
   * multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) -
   * Iterables.frequency(occurrencesToRemove, e))}.
   *
   * <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll
   * removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear
   * in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit
   * sometimes more efficient than, the following:
   *
   * {@snippet :
   * for (E e : occurrencesToRemove) {
   *   multisetToModify.remove(e);
   * }
   * }
   *
   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation
   * @since 18.0 (present in 10.0 with a requirement that the second parameter be a {@code
   *     Multiset})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,retainAll,com.google.common.collect.AbstractMultiset:retainAll(java.util.Collection),117,121,"/**
* Retains all elements in this collection that are also present in the given collection.
* @param elementsToRetain Collection of elements to keep
* @return true if any elements were retained, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardRetainAll,com.google.common.collect.ForwardingMultiset:standardRetainAll(java.util.Collection),202,205,"/**
* Retains all specified elements in the collection.
* @param elementsToRetain Collection of elements to retain
*/","* A sensible definition of {@link #retainAll} in terms of the {@code retainAll} method of {@link
   * #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #retainAll}
   * to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drain,"com.google.common.collect.Queues:drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration)",291,299,"/**
* Removes and returns at most <code>numElements</code> elements from the queue within the specified <code>timeout</code>.
* @param q the BlockingQueue to drain
* @param buffer collection to store drained elements
* @param numElements maximum number of elements to remove
* @param timeout duration to wait for draining
* @return actual number of elements removed, or -1 if timed out
*/","* Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code
   * numElements} elements are not available, it will wait for them up to the specified timeout.
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up
   * @return the number of elements transferred
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drainUninterruptibly,"com.google.common.collect.Queues:drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration)",361,368,"/**
* Drains a specified number of elements from the blocking queue into the provided collection.
* @param q BlockingQueue to drain from
* @param buffer Collection to store drained elements
* @param numElements Number of elements to retrieve
* @param timeout Timeout duration in nanoseconds","* Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, Duration)}, but with a
   * different behavior in case it is interrupted while waiting. In that case, the operation will
   * continue as usual, and in the end the thread's interruption status will be set (no {@code
   * InterruptedException} is thrown).
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up
   * @return the number of elements transferred
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,apply,com.google.common.collect.Range:apply(java.lang.Comparable),417,422,"/**
* Checks if the container contains the specified element.
* @param input element to search for
*/","* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains}
   *     instead.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,containsAll,com.google.common.collect.Range:containsAll(java.lang.Iterable),440,460,"/**
* Checks if all elements in the provided iterable are contained within this collection.
* @param values Iterable of elements to check
*/","* Returns {@code true} if every element in {@code values} is {@linkplain #contains contained} in
   * this range.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,contains,com.google.common.collect.RegularContiguousSet:contains(java.lang.Object),171,183,"/**
* Checks if the given object conforms to the container type and is within its range. 
* @param object object to check, or null for false
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,contains,com.google.common.collect.TreeRangeMap$RangeMapEntry:contains(java.lang.Comparable),107,109,"/**
 * Checks if a given key exists in the map.
 * @param value key to search for
 * @return true if key is present, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,forEach,com.google.common.collect.RegularImmutableBiMap$Inverse:forEach(java.util.function.BiConsumer),216,220,"/**
* Applies a given BiConsumer to each entry in the map. 
* @param action consumer function that takes key and value as parameters
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,lower,com.google.common.collect.RegularImmutableSortedSet:lower(java.lang.Object),223,227,"/**
* Returns the element preceding the given element in a sorted list.
* @param element the target element
* @return the preceding element or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,floor,com.google.common.collect.RegularImmutableSortedSet:floor(java.lang.Object),229,233,"/**
* Returns the floor value of an element from a sorted set.
* @param element element to find the floor value for
* @return E object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,ceiling,com.google.common.collect.RegularImmutableSortedSet:ceiling(java.lang.Object),235,239,"/**
* Retrieves the ceiling element from the set.
* @param element the input element to find the ceiling for
* @return the ceiling element or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,higher,com.google.common.collect.RegularImmutableSortedSet:higher(java.lang.Object),241,245,"/**
* Retrieves the next element in the collection by its index.
* @param element current element to find the next one for
* @return Next E object or null if at end of collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,forEachPair,"com.google.common.collect.Streams:forEachPair(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiConsumer)",395,409,"/**
* Processes pairs of elements from two streams in parallel or sequentially.
* @param streamA first input stream
* @param streamB second input stream
* @param consumer callback to process each pair
*/","* Invokes {@code consumer} once for each pair of <i>corresponding</i> elements in {@code streamA}
   * and {@code streamB}. If one stream is longer than the other, the extra elements are silently
   * ignored. Elements passed to the consumer are guaranteed to come from the same position in their
   * respective source streams. For example:
   *
   * {@snippet :
   * Streams.forEachPair(
   *   Stream.of(""foo1"", ""foo2"", ""foo3""),
   *   Stream.of(""bar1"", ""bar2""),
   *   (arg1, arg2) -> System.out.println(arg1 + "":"" + arg2)
   * }
   *
   * <p>will print:
   *
   * {@snippet :
   * foo1:bar1
   * foo2:bar2
   * }
   *
   * <p><b>Warning:</b> If either supplied stream is a parallel stream, the same correspondence
   * between elements will be made, but the order in which those pairs of elements are passed to the
   * consumer is <i>not</i> defined.
   *
   * <p>Note that many usages of this method can be replaced with simpler calls to {@link #zip}.
   * This method behaves equivalently to {@linkplain #zip zipping} the stream elements into
   * temporary pair objects and then using {@link Stream#forEach} on that stream.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedCollection:<init>(java.util.Collection,java.lang.Object)",127,129,"/**
* Constructs a synchronized collection wrapper around the given delegate.
* @param delegate underlying collection to synchronize
* @param mutex synchronization lock object (may be null for no locking)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedEntry:<init>(java.util.Map$Entry,java.lang.Object)",1793,1795,"/**
* Creates a synchronized entry from a given map entry and optional lock object.
* @param delegate map entry to synchronize
* @param mutex lock object (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedMap:<init>(java.util.Map,java.lang.Object)",1068,1070,"/**
* Constructs a synchronized map backed by the given delegate.
* @param delegate underlying data structure
* @param mutex synchronization object (may be null for no locking)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedMultimap:<init>(com.google.common.collect.Multimap,java.lang.Object)",608,610,"/**
* Constructs synchronized multimap with given delegate and synchronization lock. 
* @param delegate original multimap instance
* @param mutex synchronization lock object (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedTable:<init>(com.google.common.collect.Table,java.lang.Object)",2042,2044,"/**
* Constructs a synchronized table with the given delegate and optional lock object.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toTable,"com.google.common.collect.TableCollectors:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",81,100,"/**
* Converts a stream to a Table with custom row, column, and value mappings.
* @param rowFunction maps each element to its row key
* @param columnFunction maps each element to its column key
* @param valueFunction maps each element to its value
* @param tableSupplier provides the underlying Table instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,toTable,"com.google.common.collect.Tables:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)",100,114,"/**
* Converts a stream of objects to a table with custom row, column, and value functions.
* @param rowFunction function to map each object to its row identifier
* @param columnFunction function to map each object to its column identifier
* @param valueFunction function to map each object to its table cell value
* @param mergeFunction function to combine values for duplicate cells
* @param tableSupplier factory method to create a new table instance
*/","* Returns a {@link Collector} that accumulates elements into a {@code Table} created using the
   * specified supplier, whose cells are generated by applying the provided mapping functions to the
   * input elements. Cells are inserted into the generated {@code Table} in encounter order.
   *
   * <p>If multiple input elements map to the same row and column, the specified merging function is
   * used to combine the values. Like {@link
   * java.util.stream.Collectors#toMap(java.util.function.Function, java.util.function.Function,
   * BinaryOperator, java.util.function.Supplier)}, this Collector throws a {@code
   * NullPointerException} on null values returned from {@code valueFunction}, and treats nulls
   * returned from {@code mergeFunction} as removals of that row/column pair.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,transformValues,"com.google.common.collect.Tables:transformValues(com.google.common.collect.Table,com.google.common.base.Function)",401,409,"/**
* Maps values in a table to new values using a provided function.
* @param fromTable original table with values of type V1
* @param function transformation function returning values of type V2
* @return a new table with transformed values of type V2
*/","* Returns a view of a table where each value is transformed by a function. All other properties
   * of the table, such as iteration order, are left intact.
   *
   * <p>Changes in the underlying table are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying table.
   *
   * <p>It's acceptable for the underlying table to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed table might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned table is not thread-safe or serializable, even if the underlying table is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned
   * table to be a view, but it means that the function will be applied many times for bulk
   * operations like {@link Table#containsValue} and {@code Table.toString()}. For this to perform
   * well, {@code function} should be fast. To avoid lazy evaluation when the returned table doesn't
   * need to be a view, copy the returned table into a new table of your choosing.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,transpose,com.google.common.collect.Tables:transpose(com.google.common.collect.Table),213,218,"/**
* Transposes a Table instance by swapping row and column types.
* @param table input Table to transpose
* @return the transposed Table or original if already transposed
*/","* Creates a transposed view of a given table that flips its row and column keys. In other words,
   * calling {@code get(columnKey, rowKey)} on the generated table always returns the same value as
   * calling {@code get(rowKey, columnKey)} on the original table. Updating the original table
   * changes the contents of the transposed table and vice versa.
   *
   * <p>The returned table supports update operations as long as the input table supports the
   * analogous operation with swapped rows and columns. For example, in a {@link HashBasedTable}
   * instance, {@code rowKeySet().iterator()} supports {@code remove()} but {@code
   * columnKeySet().iterator()} doesn't. With a transposed {@link HashBasedTable}, it's the other
   * way around.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,<init>,com.google.common.collect.TransformedListIterator:<init>(java.util.ListIterator),33,35,"/**
* Creates an iterator for transformed list views.
* @param backingIterator iterator over original data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,expand,com.google.common.collect.TreeTraverser$PostOrderIterator:expand(java.lang.Object),243,245,"/**
* Creates a PostOrderNode instance with given data and child nodes.
* @param t the data to be wrapped in the node
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedEscaperMap.java,create,com.google.common.escape.ArrayBasedEscaperMap:create(java.util.Map),46,48,"/**
* Creates an escaper map from a replacement character array.
* @param replacements Map of characters to escape and their corresponding values
*/","* Returns a new ArrayBasedEscaperMap for creating ArrayBasedCharEscaper or
   * ArrayBasedUnicodeEscaper instances.
   *
   * @param replacements a map of characters to their escaped representations",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,addEscapes,"com.google.common.escape.CharEscaperBuilder:addEscapes(char[],java.lang.String)",94,101,"/**
* Adds escapes for the specified characters.
* @param cs array of characters to escape
* @param r replacement string
* @return this builder instance for chaining
*/",Add multiple mappings at once for a particular index.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,nextEscapeIndex,"com.google.common.escape.UnicodeEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)",130,140,"/**
* Finds the next character index that requires escaping.
* @param csq input character sequence
* @param start starting index to search from
* @param end ending index to search up to
* @return next escape index or start if no escapes found
*/","* Scans a sub-sequence of characters from a given {@link CharSequence}, returning the index of
   * the next character that requires escaping.
   *
   * <p><b>Note:</b> When implementing an escaper, it is a good idea to override this method for
   * efficiency. The base class implementation determines successive Unicode code points and invokes
   * {@link #escape(int)} for each of them. If the semantics of your escaper are such that code
   * points in the supplementary range are either all escaped or all unescaped, this method can be
   * implemented more efficiently using {@link CharSequence#charAt(int)}.
   *
   * <p>Note however that if your escaper does not escape characters in the supplementary range, you
   * should either continue to validate the correctness of any surrogate characters encountered or
   * provide a clear warning to users that your escaper does not validate its input.
   *
   * <p>See {@link com.google.common.net.PercentEscaper} for an example.
   *
   * @param csq a sequence of characters
   * @param start the index of the first character to be scanned
   * @param end the index immediately after the last character to be scanned
   * @throws IllegalArgumentException if the scanned sub-sequence of {@code csq} contains invalid
   *     surrogate pairs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,invokeSubscriberMethod,com.google.common.eventbus.Subscriber$SynchronizedSubscriber:invokeSubscriberMethod(java.lang.Object),138,143,"/**
* Invokes subscriber methods with synchronization to prevent concurrent access.
* @param event event object to be passed to subscribers
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,context,com.google.common.eventbus.Subscriber:context(java.lang.Object),98,100,"/**
* Creates a SubscriberExceptionContext instance.
* @param event event object
*/",Gets the context for the given event.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,"com.google.common.graph.AbstractGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",157,162,"/**
* Checks if there's an edge connecting two graph nodes.
* @param nodeU first node (must be in the graph)
* @param nodeV second node (successor of nodeU must exist)
* @return true if an edge connects the two nodes, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,"com.google.common.graph.AbstractValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",157,162,"/**
* Checks if two nodes are connected by an edge.
* @param nodeU first node
* @param nodeV second node
* @return true if a direct edge exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,hasEdgeConnecting,com.google.common.graph.AbstractNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair),231,238,"/**
* Checks if there is an edge connecting two nodes.
* @param endpoints pair of node identifiers
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,<init>,com.google.common.graph.UndirectedMultiNetworkConnections:<init>(java.util.Map),45,47,"/**
* Creates an undirected multi-network from the given edge map.
* @param incidentEdges map of edges to nodes
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,<init>,com.google.common.graph.UndirectedNetworkConnections:<init>(java.util.Map),37,39,"/**
 * Initializes an undirected network with connections from the given edge map.
 * @param incidentEdgeMap mapping of edges to their incident vertices
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,com.google.common.graph.DirectedGraphConnections$NodeConnection$Pred:<init>(java.lang.Object),80,82,"/**
* Initializes a prediction model from a given node.
* @param node the node to initialize the model from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,com.google.common.graph.DirectedGraphConnections$NodeConnection$Succ:<init>(java.lang.Object),101,103,"/**
* Initializes the Succ (Successor) Node.
* @param node the successor node to initialize
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,edgesConnecting,com.google.common.graph.DirectedNetworkConnections:edgesConnecting(java.lang.Object),62,65,"/**
* Retrieves all edges connecting to the specified node.
* @param node Node object representing the target of connections
* @return Set of Edge objects connected to the given node
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,edgesConnecting,com.google.common.graph.UndirectedNetworkConnections:edgesConnecting(java.lang.Object),54,57,"/**
* Retrieves all edges connecting to the specified node.
* @param node target node identifier
* @return set of edge elements connecting to the node
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,<init>,com.google.common.graph.MapRetrievalCache:<init>(java.util.Map),35,37,"/**
* Initializes cache with a backing map.
* @param backingMap the underlying map to store cached data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,get,com.google.common.graph.MapIteratorCache:get(java.lang.Object),82,91,"/**
* Retrieves cached or uncached value associated with the given key.
* @param key unique identifier for the value
* @return Value object, or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,of,com.google.common.graph.UndirectedGraphConnections:of(com.google.common.graph.ElementOrder),47,58,"/**
* Creates a graph connections instance based on the specified edge order.
* @param incidentEdgeOrder specifies whether edges are ordered (STABLE) or unordered (UNORDERED)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,sequentialFunnel,com.google.common.hash.Funnels:sequentialFunnel(com.google.common.hash.Funnel),173,176,"/**
* Creates a sequential funnel that aggregates elements processed by the given element funnel.
* @param elementFunnel funnel to process individual elements
* @return a new sequential funnel instance
*/","* Returns a funnel that processes an {@code Iterable} by funneling its elements in iteration
   * order with the specified funnel. No separators are added between the elements.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,asOutputStream,com.google.common.hash.Funnels:asOutputStream(com.google.common.hash.PrimitiveSink),246,248,"/**
* Converts PrimitiveSink to an OutputStream.
* @param sink primitive sink instance
* @return OutputStream wrapping the sink
*/","* Wraps a {@code PrimitiveSink} as an {@link OutputStream}, so it is easy to {@link Funnel#funnel
   * funnel} an object to a {@code PrimitiveSink} if there is already a way to write the contents of
   * the object to an {@code OutputStream}.
   *
   * <p>The {@code close} and {@code flush} methods of the returned {@code OutputStream} do nothing,
   * and no method throws {@code IOException}.
   *
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,stringFunnel,com.google.common.hash.Funnels:stringFunnel(java.nio.charset.Charset),86,88,"/**
* Creates a funnel that parses strings from any source into CharSequence objects.
* @param charset character set to use when parsing strings
*/","* Returns a funnel that encodes the characters of a {@code CharSequence} with the specified
   * {@code Charset}.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,asWriter,com.google.common.io.CharStreams:asWriter(java.lang.Appendable),346,351,"/**
* Wraps an Appendable object as a Writer, or returns it directly if already a Writer. 
* @param target the Appendable object to wrap
*/","* Returns a Writer that sends all output to the given {@link Appendable} target. Closing the
   * writer will close the target if it is {@link Closeable}, and flushing the writer will flush the
   * target if it is {@link java.io.Flushable}.
   *
   * @param target the object to which output will be sent
   * @return a new Writer object, unless target is a Writer, in which case the target is returned",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,canDecode,com.google.common.io.BaseEncoding$StandardBaseEncoding:canDecode(java.lang.CharSequence),738,751,"/**
* Verifies whether a given character sequence can be decoded using the alphabet.
* @param chars Character sequence to verify
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,trimTrailingPadding,com.google.common.io.BaseEncoding$SeparatedBaseEncoding:trimTrailingPadding(java.lang.CharSequence),1153,1156,"/**
* Trims trailing padding from input CharSequence.
* @param chars input sequence to be trimmed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeChecked,com.google.common.io.BaseEncoding:decodeChecked(java.lang.CharSequence),230,236,"/**
* Decodes a CharSequence into a byte array.
* @throws DecodingException if decoding fails
*/","* Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the
   * inverse operation to {@link #encode(byte[])}.
   *
   * @throws DecodingException if the input is not a valid encoded string according to this
   *     encoding.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,openStream,com.google.common.io.CharSource$CharSequenceCharSource:openStream(),545,548,"/**
* Opens a stream reader on the provided sequence. 
* @return A Reader object to read from the sequence.*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,create,com.google.common.io.Closer:create(),85,87,"/**
* Creates a new instance of Closer with suppressing suppressor. 
* @return Closer object
*/",Creates a new {@link Closer}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/PatternFilenameFilter.java,<init>,com.google.common.io.PatternFilenameFilter:<init>(java.lang.String),44,46,"/**
* Compiles a string into a regular expression pattern used for filtering file names.
* @param patternStr input string to compile
*/","* Constructs a pattern file name filter object.
   *
   * @param patternStr the pattern string on which to filter file names
   * @throws PatternSyntaxException if pattern compilation fails (runtime)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,log2,"com.google.common.math.BigIntegerMath:log2(java.math.BigInteger,java.math.RoundingMode)",84,121,"/**
* Calculates the base-2 logarithm of a BigInteger, with optional rounding.
* @param x input number
* @param mode rounding mode (e.g. UNNECESSARY, DOWN, etc.)
* @return integer log value or throws AssertionError if invalid input
*/","* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of two",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,cast,"com.google.common.collect.ImmutableClassToInstanceMap$Builder:cast(java.lang.Class,java.lang.Object)",128,130,"/**
* Dynamically casts an object to a specified type using Primitives.
* @param type target class type
* @param value object to be casted
* @return casted object or null if not possible
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,cast,"com.google.common.collect.MutableClassToInstanceMap:cast(java.lang.Class,java.lang.Object)",181,184,"/**
* Casts an object to a specified type using Primitives.
* @param type the target class
* @param value the object to cast
* @return the casted object or null if not possible
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,parseUnsignedByte,com.google.common.primitives.UnsignedBytes:parseUnsignedByte(java.lang.String),212,215,"/**
* Parses an unsigned byte value from the given string representation.
* @param string string representation of the unsigned byte (base 10 assumed)
*/","* Returns the unsigned {@code byte} value represented by the given decimal string.
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte}
   *     value
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Byte#parseByte(String)})
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,parseUnsignedInt,com.google.common.primitives.UnsignedInts:parseUnsignedInt(java.lang.String),342,345,"/**
* Parses an unsigned integer from the given string.
* @param s input string to parse
*/","* Returns the unsigned {@code int} value represented by the given decimal string.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String)} instead.
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value
   * @throws NullPointerException if {@code s} is null (in contrast to {@link
   *     Integer#parseInt(String)})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,<init>,"com.google.common.reflect.ClassPath$ClassInfo:<init>(java.io.File,java.lang.String,java.lang.ClassLoader)",301,304,"/**
* Constructs ClassInfo object with given file, resource name and class loader.
* @param file File containing class information
* @param resourceName Name of the resource to load
* @param loader ClassLoader used to load the class
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,<init>,com.google.common.reflect.Invokable$ConstructorInvokable:<init>(java.lang.reflect.Constructor),424,427,"/**
* Initializes the instance with the provided constructor.
* @param constructor constructor to invoke
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,<init>,com.google.common.reflect.Invokable$MethodInvokable:<init>(java.lang.reflect.Method),360,363,"/**
* Initializes an instance of MethodInvokable with the provided method.
* @param method the target method to invoke
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,forLookup,com.google.common.reflect.TypeResolver$TypeVariableKey:forLookup(java.lang.reflect.Type),579,585,"/**
* Retrieves a TypeVariableKey for the given type, or null if not applicable.
* @param t the input type to process
*/",Wraps {@code t} in a {@code TypeVariableKey} if it's a type variable.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,<init>,"com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction)",197,202,"/**
* Creates an asynchronous future that catches and handles the specified exception type.
* @param input underlying future to catch exceptions from
* @param exceptionType specific exception class to catch
* @param fallback function to execute on caught exception
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,<init>,"com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function)",228,233,"/**
* Catches a future result of type X and returns fallback value of type V. 
* @param input ListenableFuture to catch
* @param exceptionType Type of potential exception
* @param fallback Function to apply if caught 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,getFutureValue,com.google.common.util.concurrent.AbstractFuture:getFutureValue(com.google.common.util.concurrent.ListenableFuture),611,684,"/**
* Retrieves the value from a ListenableFuture instance.
* @param future the ListenableFuture to get the value from
*/","* Returns a value that satisfies the contract of the {@link #value} field based on the state of
   * given future.
   *
   * <p>This is approximately the inverse of {@link #getDoneValue(Object)}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,<init>,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:<init>(java.time.Duration),751,753,"/**
* Converts duration to nanoseconds and creates new schedule with specified delay.
* @param delay duration to convert and use in scheduling
*/","* @param delay the time from now to delay execution
       * @since 31.1 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,<init>,"com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)",217,220,"/**
* Asynchronously transforms an input future using the provided asynchronous function.
* @param inputFuture future containing input data
* @param function function to apply to input data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,<init>,"com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)",247,250,"/**
* Transforms a future result using a provided function.
* @param inputFuture future result to transform
* @param function transformation function",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,afterDone,com.google.common.util.concurrent.AggregateFuture:afterDone(),77,95,"/**
* Cancels and releases resources associated with completed futures.
* @param none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,releaseResources,com.google.common.util.concurrent.CollectionFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason),76,80,"/**
* Releases resources held by this object.
* @param reason Reason for releasing resources (e.g. garbage collection, etc.)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,releaseResources,com.google.common.util.concurrent.CombinedFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason),69,82,"/**
* Releases resources based on reason. Clears task reference if output future is done.
* @param reason ReleaseResourcesReason enum value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,create,com.google.common.util.concurrent.AtomicLongMap:create(),69,71,"/**
* Creates an empty AtomicLongMap instance.
* @return A new AtomicLongMap with a backing ConcurrentHashMap.",Creates an {@code AtomicLongMap}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,accumulateAndGet,"com.google.common.util.concurrent.AtomicLongMap:accumulateAndGet(java.lang.Object,long,java.util.function.LongBinaryOperator)",184,188,"/**
* Accumulates a value using the provided function and returns the result.
* @param key unique key identifier
* @param x value to accumulate
* @return accumulated long value
*/","* Updates the value currently associated with {@code key} by combining it with {@code x} via the
   * specified accumulator function, returning the new value. The previous value associated with
   * {@code key} (or zero, if there is none) is passed as the first argument to {@code
   * accumulatorFunction}, and {@code x} is passed as the second argument.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndAccumulate,"com.google.common.util.concurrent.AtomicLongMap:getAndAccumulate(java.lang.Object,long,java.util.function.LongBinaryOperator)",198,202,"/**
* Accumulates a value using the provided function and returns the new value.
* @param key unique identifier
* @param x value to accumulate
* @param accumulatorFunction LongBinaryOperator to apply to old/new values
* @return accumulated long value
*/","* Updates the value currently associated with {@code key} by combining it with {@code x} via the
   * specified accumulator function, returning the old value. The previous value associated with
   * {@code key} (or zero, if there is none) is passed as the first argument to {@code
   * accumulatorFunction}, and {@code x} is passed as the second argument.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,put,"com.google.common.util.concurrent.AtomicLongMap:put(java.lang.Object,long)",208,211,"/**
* Updates value associated with given key to new value.
* @param key unique key identifier
* @param newValue new value to be stored
* @return previous value before update (or 0L if not initialized)
*/","* Associates {@code newValue} with {@code key} in this map, and returns the value previously
   * associated with {@code key}, or zero if there was no such value.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,applyAsyncClosingFunction,"com.google.common.util.concurrent.ClosingFuture$CloseableList:applyAsyncClosingFunction(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.lang.Object)",2195,2208,"/**
* Applies asynchronous transformation to input and returns result.
* @param transformation function to apply asynchronously
* @param input data to transform
* @return transformed value or throws Exception if failed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,eventuallyClose,"com.google.common.util.concurrent.ClosingFuture$DeferredCloser:eventuallyClose(java.lang.Object,java.util.concurrent.Executor)",232,241,"/**
* Adds a closable object to the list for eventual closure.
* @param closeable object that may be closed
* @param closingExecutor executor to use when closing
* @return original closable object (or null if input was null)","* Captures an object to be closed when a {@link ClosingFuture} pipeline is done.
     *
     * <p>For users of the {@code -jre} flavor of Guava, the object can be any {@code
     * AutoCloseable}. For users of the {@code -android} flavor, the object must be a {@code
     * Closeable}. (For more about the flavors, see <a
     * href=""https://github.com/google/guava#adding-guava-to-your-build"">Adding Guava to your
     * build</a>.)
     *
     * <p>Be careful when targeting an older SDK than you are building against (most commonly when
     * building for Android): Ensure that any object you pass implements the interface not just in
     * your current SDK version but also at the oldest version you support. For example, <a
     * href=""https://developer.android.com/sdk/api_diff/16/"">API Level 16</a> is the first version
     * in which {@code Cursor} is {@code Closeable}. To support older versions, pass a wrapper
     * {@code Closeable} with a method reference like {@code cursor::close}.
     *
     * <p>Note that this method is still binary-compatible between flavors because the erasure of
     * its parameter type is {@code Object}, not {@code AutoCloseable} or {@code Closeable}.
     *
     * @param closeable the object to be closed (see notes above)
     * @param closingExecutor the object will be closed on this executor
     * @return the first argument",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,call,"com.google.common.util.concurrent.ClosingFuture$Peeker:call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)",1159,1170,"/**
* Calls a combining callable with provided closeables and returns result.
* @param combiner CombiningCallable to execute
* @param closeables list of Closeable objects to manage
* @return result of callable or null if not applicable
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,callAsync,"com.google.common.util.concurrent.ClosingFuture$Peeker:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)",1172,1184,"/**
* Asynchronously executes the given combiner and returns its result.
* @param combiner AsyncCombiningCallable to be executed
* @param closeables list of resources to be closed upon completion
* @return FluentFuture containing the result or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,provideValueAndCloser,"com.google.common.util.concurrent.ClosingFuture:provideValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,com.google.common.util.concurrent.ClosingFuture)",1078,1081,"/**
* Provides a value and closer to the given consumer.
* @param consumer callback with ValueAndCloser object
* @param closingFuture future for closing the value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newInstance,com.google.common.util.concurrent.CycleDetectingLockFactory:newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy),231,233,"/**
 * Creates a new instance of CycleDetectingLockFactory with specified Policy.
 * @param policy locking policy to be used
 */",Creates a new factory with the specified policy.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,doStart,com.google.common.util.concurrent.AbstractIdleService$DelegateService:doStart(),59,72,"/**
* Initiates startup sequence, executing start-up tasks and notifying listeners on success or failure.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,doStop,com.google.common.util.concurrent.AbstractIdleService$DelegateService:doStop(),74,87,"/**
* Stops the executor and notifies listeners of completion or failure.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,run,com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task:run(),218,250,"/**
* Runs the scheduled service, attempting to complete one iteration.
*@throws Throwable if an error occurs during execution
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",54,71,"/**
* Executes a Callable with a specified timeout.
* @param callable the task to execute
* @param timeoutDuration maximum execution time in milliseconds
* @param timeoutUnit unit of time for timeout duration
* @return result of the task or throws an exception if timed out
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/InterruptibleTask.java,run,com.google.common.util.concurrent.InterruptibleTask:run(),56,93,"/**
* Runs the task, allowing for interruptibility and CAS-based synchronization.
*@throws Throwable if an error occurs during execution
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,<init>,com.google.common.util.concurrent.SmoothRateLimiter:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch),332,334,"/**
 * Initializes the SmoothRateLimiter with a Stopwatch instance.
 * @param stopwatch Stopwatch object used to measure elapsed time.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,newSequentialExecutor,com.google.common.util.concurrent.MoreExecutors:newSequentialExecutor(java.util.concurrent.Executor),441,444,"/**
* Creates a sequential executor that wraps the provided delegate executor.
* @param delegate executor instance to be wrapped
*/","* Returns an {@link Executor} that runs each task executed sequentially, such that no two tasks
   * are running concurrently.
   *
   * <p>{@linkplain Executor#execute executed} tasks have a happens-before order as defined in the
   * Java Language Specification. Tasks execute with the same happens-before order that the function
   * calls to {@link Executor#execute execute()} that submitted those tasks had.
   *
   * <p>The executor uses {@code delegate} in order to {@link Executor#execute execute} each task in
   * turn, and does not create any threads of its own.
   *
   * <p>After execution begins on a thread from the {@code delegate} {@link Executor}, tasks are
   * polled and executed from a task queue until there are no more tasks. The thread will not be
   * released until there are no more tasks to run.
   *
   * <p>If a task is submitted while a thread is executing tasks from the task queue, the thread
   * will not be released until that submitted task is also complete.
   *
   * <p>If a task is {@linkplain Thread#interrupt interrupted} while a task is running:
   *
   * <ol>
   *   <li>execution will not stop until the task queue is empty.
   *   <li>tasks will begin execution with the thread marked as not interrupted - any interruption
   *       applies only to the task that was running at the point of interruption.
   *   <li>if the thread was interrupted before the SequentialExecutor's worker begins execution,
   *       the interrupt will be restored to the thread after it completes so that its {@code
   *       delegate} Executor may process the interrupt.
   *   <li>subtasks are run with the thread uninterrupted and interrupts received during execution
   *       of a task are ignored.
   * </ol>
   *
   * <p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking.
   * If an {@code Error} is thrown, the error will propagate and execution will stop until the next
   * time a task is submitted.
   *
   * <p>When an {@code Error} is thrown by an executed task, previously submitted tasks may never
   * run. An attempt will be made to restart execution on the next call to {@code execute}. If the
   * {@code delegate} has begun to reject execution, the previously submitted tasks may never run,
   * despite not throwing a RejectedExecutionException synchronously with the call to {@code
   * execute}. If this behaviour is problematic, use an Executor with a single thread (e.g. {@link
   * Executors#newSingleThreadExecutor}).
   *
   * @since 23.3 (since 23.1 as {@code sequentialExecutor})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,create,com.google.common.util.concurrent.SimpleTimeLimiter:create(java.util.concurrent.ExecutorService),71,73,"/**
* Creates a SimpleTimeLimiter instance with the given ExecutorService.
* @param executor Executor service to use for timeouts
*/","* Creates a TimeLimiter instance using the given executor service to execute method calls.
   *
   * <p><b>Warning:</b> using a bounded executor may be counterproductive! If the thread pool fills
   * up, any time callers spend waiting for a thread may count toward their time limit, and in this
   * case the call may even time out before the target method is ever invoked.
   *
   * @param executor the ExecutorService that will execute the method calls on the target objects;
   *     for example, a {@link Executors#newCachedThreadPool()}.
   * @since 22.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,joinUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread,java.time.Duration)",185,189,"/**
* Waits for the specified thread to finish without interruption.
* @param toJoin target thread
* @param timeout maximum wait duration in nanoseconds
*/","* Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)}
   * uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingScheduledExecutorService.java,<init>,com.google.common.util.concurrent.WrappingScheduledExecutorService:<init>(java.util.concurrent.ScheduledExecutorService),39,42,"/**
 * Initializes a new WrappingScheduledExecutorService instance wrapping the provided ScheduledExecutorService.
 * @param delegate ScheduledExecutorService to be wrapped
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,addOutEdge,"com.google.common.graph.DirectedMultiNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",133,140,"/**
* Adds an outgoing edge to the graph and updates node's successors.
* @param edge edge object
* @param node node object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,addInEdge,"com.google.common.graph.AbstractUndirectedNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",89,94,"/**
* Adds an in-edge to the graph while also adding a corresponding out-edge.
* If this is a self-loop (i.e. edge and node refer to the same vertex),
* only the in-edge is added; otherwise, both edges are added.
* @param edge the edge to add
* @param node the node associated with the edge
* @param isSelfLoop true if this is a self-loop, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,addOutEdge,"com.google.common.graph.UndirectedMultiNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",109,116,"/**
* Adds an outgoing edge from this node to the specified node and updates its adjacency multiset.
* @param edge Edge object
* @param node Destination node identifier
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,unordered,com.google.common.graph.ElementOrder:unordered(),80,82,"/**
* Creates an unordered element order instance.
* @return ElementOrder instance with type UNORDERED
*/",Returns an instance which specifies that no ordering is guaranteed.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,stable,com.google.common.graph.ElementOrder:stable(),120,122,"/**
* Creates an instance of ElementOrder with STABLE sorting type.
*/","* Returns an instance which specifies that ordering is guaranteed to be always be the same across
   * iterations, and across releases. Some methods may have stronger guarantees.
   *
   * <p>This instance is only useful in combination with {@code incidentEdgeOrder}, e.g. {@code
   * graphBuilder.incidentEdgeOrder(ElementOrder.stable())}.
   *
   * <h3>In combination with {@code incidentEdgeOrder}</h3>
   *
   * <p>{@code incidentEdgeOrder(ElementOrder.stable())} guarantees the ordering of the returned
   * collections of the following methods:
   *
   * <ul>
   *   <li>For {@link Graph} and {@link ValueGraph}:
   *       <ul>
   *         <li>{@code edges()}: Stable order
   *         <li>{@code adjacentNodes(node)}: Connecting edge insertion order
   *         <li>{@code predecessors(node)}: Connecting edge insertion order
   *         <li>{@code successors(node)}: Connecting edge insertion order
   *         <li>{@code incidentEdges(node)}: Edge insertion order
   *       </ul>
   *   <li>For {@link Network}:
   *       <ul>
   *         <li>{@code adjacentNodes(node)}: Stable order
   *         <li>{@code predecessors(node)}: Connecting edge insertion order
   *         <li>{@code successors(node)}: Connecting edge insertion order
   *         <li>{@code incidentEdges(node)}: Stable order
   *         <li>{@code inEdges(node)}: Edge insertion order
   *         <li>{@code outEdges(node)}: Edge insertion order
   *         <li>{@code adjacentEdges(edge)}: Stable order
   *         <li>{@code edgesConnecting(nodeU, nodeV)}: Edge insertion order
   *       </ul>
   * </ul>
   *
   * @since 29.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,insertion,com.google.common.graph.ElementOrder:insertion(),125,127,"/**
* Creates an instance of ElementOrder with INSERTION type and no secondary order.
*/",Returns an instance which specifies that insertion ordering is guaranteed.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,natural,com.google.common.graph.ElementOrder:natural(),132,134,"/**
* Creates a natural ordering for elements of type S.
* @return ElementOrder object for natural ordering
*/",* Returns an instance which specifies that the natural ordering of the elements is guaranteed.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,sorted,com.google.common.graph.ElementOrder:sorted(java.util.Comparator),140,142,"/**
* Creates an ElementOrder instance with data sorted by the specified comparator. 
* @param comparator comparison function for sorting elements
*/","* Returns an instance which specifies that the ordering of the elements is guaranteed to be
   * determined by {@code comparator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,whenClosedCountDown,com.google.common.util.concurrent.ClosingFuture:whenClosedCountDown(),2265,2268,"/**
* Returns a count down latch to wait on when all closeable resources are closed.
*/","* Returns an object that can be used to wait until this objects' deferred closeables have all had
   * {@link Runnable}s that close them submitted to each one's closing {@link Executor}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,<init>,"com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:<init>(java.lang.Object,java.util.concurrent.Executor)",145,148,"/**
* Initializes queue with specified listener and executor.
* @param listener listener to be associated with the queue
* @param executor executor service to manage task execution
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/AbstractIterator.java,next,com.google.common.base.AbstractIterator:next(),76,87,"/**
* Retrieves the next element from the iteration, throwing NoSuchElementException if exhausted.
*@return The next element of type T or null if not present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoForward,com.google.common.base.Converter:correctedDoForward(java.lang.Object),200,207,"/**
* Performs forward operation with optional null handling.
* @param a input object of type A (may be null)
* @return B result object or null if handleNullAutomatically and input is null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoBackward,com.google.common.base.Converter:correctedDoBackward(java.lang.Object),209,216,"/**
* Performs backward operation on input object, optionally handling nulls automatically.
* @param b the input object to process
* @return result of backward operation or null if handleNullAutomatically is true and input is null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeWord,com.google.common.base.CaseFormat$1:normalizeWord(java.lang.String),210,210,"/**
* Normalizes a given word to its standard form (e.g., removing diacritics).
* @param word input word to be normalized
* @return normalized word or original word if no change needed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeWord,com.google.common.base.CaseFormat$2:normalizeWord(java.lang.String),210,210,"/**
* Normalizes a given word to standard form (e.g., lower-case).
* @param word input word to be normalized
* @return normalized word or original word if unchanged
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeFirstWord,com.google.common.base.CaseFormat$3:normalizeFirstWord(java.lang.String),212,214,"/**
* Normalizes first word by passing it to general word normalization function.
* @param word input string to normalize
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,normalizeToken,com.google.common.net.MediaType:normalizeToken(java.lang.String),1083,1087,"/**
* Normalizes a given authentication token to lowercase.
* @param token input token string
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,normalizeParameterValue,"com.google.common.net.MediaType:normalizeParameterValue(java.lang.String,java.lang.String)",1089,1093,"/**
* Normalizes a parameter value by converting to lowercase if the attribute is charset.
* @param attribute attribute name
* @param value parameter value (must be ASCII)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toLowerCase,com.google.common.base.Ascii:toLowerCase(java.lang.CharSequence),431,440,"/**
* Converts CharSequence to lowercase.
* @param chars input string or character sequence
*/","* Returns a copy of the input character sequence in which all {@linkplain #isUpperCase(char)
   * uppercase ASCII characters} have been converted to lowercase. All other characters are copied
   * without modification.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeWord,com.google.common.base.CaseFormat$5:normalizeWord(java.lang.String),210,210,"/**
* Normalizes a given word to its base form.
* @param word input word to be normalized
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toUpperCase,com.google.common.base.Ascii:toUpperCase(java.lang.CharSequence),479,488,"/**
* Converts input CharSequence to uppercase.
* @param chars input string or char sequence
* @return uppercase version of input as a string
*/","* Returns a copy of the input character sequence in which all {@linkplain #isLowerCase(char)
   * lowercase ASCII characters} have been converted to uppercase. All other characters are copied
   * without modification.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,firstCharOnlyToUpper,com.google.common.base.CaseFormat:firstCharOnlyToUpper(java.lang.String),216,220,"/**
* Converts the first character of a string to uppercase and the rest to lowercase.
* @param word input string to modify
* @return modified string with first char uppercased, or original if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,toString,com.google.common.io.CharSource$CharSequenceCharSource:toString(),620,623,"/**
* Returns a string representation of this CharSource instance.
* Includes truncated sequence (up to 30 characters) with trailing ellipsis if necessary.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,toByteArray,com.google.common.math.PairedStats:toByteArray(),289,295,"/**
* Converts object data to byte array representation.
* @return Byte array containing object's stats and sum of products
*/","* Gets a byte array representation of this instance.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,toByteArray,com.google.common.math.Stats:toByteArray(),589,593,"/**
* Converts object data into a byte array.
* @return Byte array representation of the object
*/","* Gets a byte array representation of this instance.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,init,com.google.common.collect.CompactHashMap:init(int),254,259,"/**
* Initializes internal metadata with the specified expected array size.
* @param expectedSize minimum number of elements to be stored
*/",Pseudoconstructor for serialization support.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,init,com.google.common.collect.CompactHashSet:init(int),219,224,"/**
* Initializes internal metadata with given expected array size.
* @param expectedSize the anticipated size of the arrays
*/",Pseudoconstructor for serialization support.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,and,com.google.common.base.CharMatcher:and(com.google.common.base.CharMatcher),381,383,"/**
* Combines this matcher with another to create an AND operation.
* @param other the other matcher to combine with
*/",* Returns a matcher that matches any character matched by both this matcher and {@code other}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,forPredicate,com.google.common.base.CharMatcher:forPredicate(com.google.common.base.Predicate),352,354,"/**
* Creates a CharMatcher from a predicate function.
* @param predicate function to apply to each character
*/","* Returns a matcher with identical behavior to the given {@link Character}-based predicate, but
   * which operates on primitive {@code char} instances instead.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$NegatedFastMatcher:<init>(com.google.common.base.CharMatcher),994,996,"/**
* Creates a negated matcher from the given FastMatcher. 
* @param original the original FastMatcher to negate
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher:negate(),373,376,"/**
* Returns a negated CharMatcher instance.
* @return new Negated matcher wrapping this instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,or,com.google.common.base.CharMatcher:or(com.google.common.base.CharMatcher),388,390,"/**
* Combines this matcher with another into an OR operation.
* @param other the other matcher to combine
*/",* Returns a matcher that matches any character matched by either this matcher or {@code other}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,inRange,"com.google.common.base.CharMatcher:inRange(char,char)",344,346,"/**
* Creates a character matcher that matches characters within a specified inclusive range.
* @param startInclusive starting character (inclusive)
* @param endInclusive ending character (inclusive)
*/","* Returns a {@code char} matcher that matches any character in a given BMP range (both endpoints
   * are inclusive). For example, to match any lowercase letter of the English alphabet, use {@code
   * CharMatcher.inRange('a', 'z')}.
   *
   * @throws IllegalArgumentException if {@code endInclusive < startInclusive}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Digit:<init>(),1381,1383,"/**
* Initializes CharMatcher with digit characters (0-9).",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Invisible:<init>(),1496,1498,"/**
* Initializes Invisible matcher with predefined range boundaries.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$SingleWidth:<init>(),1506,1511,"/**
* Initializes SingleWidth CharMatcher with Unicode whitespace characters.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,snapshot,com.google.common.cache.AbstractCache$SimpleStatsCounter:snapshot(),255,264,"/**
* Returns a snapshot of cache statistics.
* @return CacheStats object containing aggregated metrics
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,minus,com.google.common.cache.CacheStats:minus(com.google.common.cache.CacheStats),243,251,"/**
* Subtracts the stats of another cache from this one.
* @param other CacheStats object to subtract
* @return new CacheStats with result of subtraction
*/","* Returns a new {@code CacheStats} representing the difference between this {@code CacheStats}
   * and {@code other}. Negative values, which aren't supported by {@code CacheStats} will be
   * rounded up to zero.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,plus,com.google.common.cache.CacheStats:plus(com.google.common.cache.CacheStats),263,271,"/**
* Merges two cache statistics objects into a new one.
* @param other CacheStats object to add to this instance
*/","* Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and {@code
   * other}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   *
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,<init>,com.google.common.collect.AbstractListMultimap:<init>(java.util.Map),47,49,"/**
 * Constructs an instance of AbstractListMultimap from a given map.
 * @param map multimap data in key-value pairs format
 */","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,<init>,com.google.common.collect.AbstractSetMultimap:<init>(java.util.Map),47,49,"/**
* Constructs an instance of AbstractSetMultimap from a multimap represented as a Map.
* @param map a map where keys are collection of values
*/","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",220,223,"/**
* Initializes a CustomMultimap with a backing map and a collection factory.
* @param map underlying multimap data structure
* @param factory supplier of collections for storing values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,<init>,com.google.common.collect.HashMultiset:<init>(),68,70,"/**
 * Initializes an empty HashMultiset instance with a backing HashMap. 
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,<init>,com.google.common.collect.LinkedHashMultiset:<init>(),76,78,"/**
* Initializes an empty multiset instance with a backing map. 
* @param none (constructor)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,indexed,"com.google.common.collect.CollectSpliterators:indexed(int,int,java.util.function.IntFunction)",43,46,"/**
* Creates an indexed spliterator.
* @param size the number of elements
* @param extraCharacteristics ignored in this implementation
* @param function a function to generate elements
* @return Spliterator instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Object,java.lang.Object)",166,172,"/**
* Creates a subset of elements in the set within the specified range.
* @param fromElement start element (inclusive)
* @param toElement end element (exclusive)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",177,185,"/**
* Returns a contiguous subset of this set within the specified bounds.
* @param fromElement start element (inclusive if trueInclusive)
* @param fromInclusive whether start is inclusive
* @param toElement end element (inclusive if trueInclusive)
* @param toInclusive whether end is inclusive
* @return ContiguousSet object or null if not found",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,create,com.google.common.collect.EnumMultiset:create(java.lang.Class),54,56,"/**
* Creates an EnumMultiset instance for the specified enum type.
* @param type Class of the enum to be used in the multiset
* @return Newly created EnumMultiset instance
*/",Creates an empty {@code EnumMultiset}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,subSetImpl,"com.google.common.collect.DescendingImmutableSortedSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",57,61,"/**
* Returns a sorted subset of elements between the specified bounds.
* @param fromElement starting element (inclusive or exclusive)
* @param fromInclusive whether start is inclusive
* @param toElement ending element (inclusive or exclusive)
* @param toInclusive whether end is inclusive
* @return ImmutableSortedSet containing subset elements",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,subSet,"com.google.common.collect.ImmutableSortedSet:subSet(java.lang.Object,java.lang.Object)",666,669,"/**
* Returns an immutable sorted set of elements within the specified range.
* @param fromElement start element (inclusive)
* @param toElement end element (exclusive)
*/","* {@inheritDoc}
   *
   * <p>This method returns a serializable {@code ImmutableSortedSet}.
   *
   * <p>The {@link SortedSet#subSet} documentation states that a subset of a subset throws an {@link
   * IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code
   * fromElement}. However, this method doesn't throw an exception in that situation, but instead
   * keeps the original {@code fromElement}. Similarly, this method keeps the original {@code
   * toElement}, instead of throwing an exception, if passed a {@code toElement} greater than an
   * earlier {@code toElement}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,partition,"com.google.common.collect.Iterators:partition(java.util.Iterator,int)",602,605,"/**
* Partitions the given iterator into chunks of a specified size.
* @param iterator input iterator to be partitioned
* @param size chunk size
* @return UnmodifiableIterator over List partitions or null if empty
*/","* Divides an iterator into unmodifiable sublists of the given size (the final list may be
   * smaller). For example, partitioning an iterator containing {@code [a, b, c, d, e]} with a
   * partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterator containing two
   * inner lists of three and two elements, all in the original order.
   *
   * <p>The returned lists implement {@link java.util.RandomAccess}.
   *
   * <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements.
   * As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link
   * OutOfMemoryError}.
   *
   * @param iterator the iterator to return a partitioned view of
   * @param size the desired size of each partition (the last may be smaller)
   * @return an iterator of immutable lists containing the elements of {@code iterator} divided into
   *     partitions
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,paddedPartition,"com.google.common.collect.Iterators:paddedPartition(java.util.Iterator,int)",621,624,"/**
* Partitions an iterator into lists of a specified size.
* @param iterator input data stream
* @param size number of elements per list
*/","* Divides an iterator into unmodifiable sublists of the given size, padding the final iterator
   * with null values if necessary. For example, partitioning an iterator containing {@code [a, b,
   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer
   * iterator containing two inner lists of three elements each, all in the original order.
   *
   * <p>The returned lists implement {@link java.util.RandomAccess}.
   *
   * @param iterator the iterator to return a partitioned view of
   * @param size the desired size of each partition
   * @return an iterator of immutable lists containing the elements of {@code iterator} divided into
   *     partitions (the final iterable may have trailing null elements)
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,expectedSize,com.google.common.collect.MinMaxPriorityQueue:expectedSize(int),141,144,"/**
* Creates a builder for ordering objects by natural order, with pre-allocated size.
* @param expectedSize the expected number of elements in the ordering
* @return Builder object to construct Ordering instance
*/","* Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances
   * sized appropriately to hold {@code expectedSize} elements.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,maximumSize,com.google.common.collect.MinMaxPriorityQueue:maximumSize(int),152,155,"/**
* Creates a builder for the maximum size comparator.
* @param maximumSize the maximum allowed size
*/","* Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances
   * that are limited to {@code maximumSize} elements. Each time a queue grows beyond this bound, it
   * immediately removes its greatest element (according to its comparator), which might be the
   * element that was just added.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,addRightChild,"com.google.common.collect.TreeMultiset$AvlNode:addRightChild(java.lang.Object,int)",655,663,"/**
* Adds a child node to the right with specified value and count.
* @param e        element value
* @param count    count of elements in the subtree
* @return         this node (for chaining)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,addLeftChild,"com.google.common.collect.TreeMultiset$AvlNode:addLeftChild(java.lang.Object,int)",665,673,"/**
* Adds a left child node with the given element and count.
* @param e the new element to add
* @param count the number of elements in the subtree rooted at the new node
* @return this AvlNode (for method chaining)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,newHasher,com.google.common.hash.AbstractNonStreamingHashFunction:newHasher(),34,37,"/**
* Creates a new instance of Hasher with default size (32). 
* @return Hasher object initialized with default settings.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,hashBytes,com.google.common.hash.AbstractNonStreamingHashFunction:hashBytes(java.nio.ByteBuffer),73,76,"/**
* Computes a hash code from the given ByteBuffer.
* @param input ByteBuffer containing bytes to be hashed
* @return HashCode object representing the hash result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,<init>,com.google.common.hash.AbstractStreamingHasher:<init>(int),48,50,"/**
* Initializes hasher with specified chunk size.
* @param chunkSize size of each streaming hash chunk
*/","* Constructor for use by subclasses. This hasher instance will process chunks of the specified
   * size.
   *
   * @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation;
   *     must be at least 4",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,separatingWriter,"com.google.common.io.BaseEncoding:separatingWriter(java.io.Writer,java.lang.String,int)",1113,1138,"/**
* Wraps a writer with a separator, appending it after specified number of characters.
* @param delegate underlying writer to wrap
* @param separator string to append between writes
* @param afterEveryChars number of characters after which to append separator
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,populationVariance,com.google.common.math.Stats:populationVariance(),290,299,"/**
* Calculates population variance, ensuring non-negativity and handling edge cases.
* @return Variance value or NaN if sum of squares of deltas is NaN
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Population_variance"">population
   * variance</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,sampleVariance,com.google.common.math.Stats:sampleVariance(),337,343,"/**
* Calculates sample variance.
* @return Variance value or NaN if sum of squares is NaN
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Sample_variance"">unbiased sample
   * variance</a> of the values. If this dataset is a sample drawn from a population, this is an
   * unbiased estimator of the population variance of the population. The count must be greater than
   * one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,populationVariance,com.google.common.math.StatsAccumulator:populationVariance(),283,292,"/**
* Calculates the population variance of the dataset.
* @return Population variance or NaN if sum of squares is invalid
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Population_variance"">population
   * variance</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,sampleVariance,com.google.common.math.StatsAccumulator:sampleVariance(),330,336,"/**
* Calculates the sample variance.
* @return Sample variance or NaN if sum of squares is NaN
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Sample_variance"">unbiased sample
   * variance</a> of the values. If this dataset is a sample drawn from a population, this is an
   * unbiased estimator of the population variance of the population. The count must be greater than
   * one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,anyOf,com.google.common.base.CharMatcher:anyOf(java.lang.CharSequence),314,327,"/**
* Creates a CharMatcher for any of the specified characters.
* @param sequence sequence of characters to match
*/","* Returns a {@code char} matcher that matches any BMP character present in the given character
   * sequence. Returns a bogus matcher if the sequence contains supplementary characters.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,trimAndCollapseFrom,"com.google.common.base.CharMatcher:trimAndCollapseFrom(java.lang.CharSequence,char)",864,882,"/**
* Trims leading and trailing sequences of a specific character from the input CharSequence,
* collapsing any remaining sequences in between.
* @param sequence input string to process
* @param replacement character to remove and collapse
*/","* Collapses groups of matching characters exactly as {@link #collapseFrom} does, except that
   * groups of matching BMP characters at the start or end of the sequence are removed without
   * replacement.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,<init>,"com.google.common.base.CaseFormat$StringConverter:<init>(com.google.common.base.CaseFormat,com.google.common.base.CaseFormat)",173,176,"/**
* Initializes the converter with specified input and output case formats.
* @param sourceFormat format of input string (e.g. LOWER_CASE, UPPER_CASE)
* @param targetFormat format of output string (e.g. LOWER_CASE, UPPER_CASE)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,"com.google.common.base.Converter$ConverterComposition:<init>(com.google.common.base.Converter,com.google.common.base.Converter)",390,393,"/**
* Composes two converters to perform sequential transformations.
* @param first first converter in chain
* @param second second converter in chain
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,"com.google.common.base.Converter$FunctionBasedConverter:<init>(com.google.common.base.Function,com.google.common.base.Function)",515,520,"/**
* Initializes the converter with specified forward and backward functions.
* @param forwardFunction function to convert from A to B
* @param backwardFunction function to convert from B back to A",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,com.google.common.base.Converter$ReverseConverter:<init>(com.google.common.base.Converter),311,313,"/**
* Initializes the converter with a given conversion function.
* @param original conversion function to be reversed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,<init>,com.google.common.base.Enums$StringConverter:<init>(java.lang.Class),114,116,"/**
* Initializes the converter with the specified enumeration class.
* @param enumClass the enumeration class to convert between strings and instances of
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$BiMapConverter:<init>(com.google.common.collect.BiMap),1606,1608,"/**
* Initializes the converter with a given bidirectional map.
* @param bimap Bidirectional map to convert between A and B types
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,onResultOf,com.google.common.base.Equivalence:onResultOf(com.google.common.base.Function),177,179,"/**
* Creates an equivalence relation based on the result of a given function.
* @param function function to compute the equivalence value
*/","* Returns a new equivalence relation for {@code F} which evaluates equivalence by first applying
   * {@code function} to the argument, then evaluating using {@code this}. That is, for any pair of
   * non-null objects {@code x} and {@code y}, {@code equivalence.onResultOf(function).equivalent(a,
   * b)} is true if and only if {@code equivalence.equivalent(function.apply(a), function.apply(b))}
   * is true.
   *
   * <p>For example:
   *
   * {@snippet :
   * Equivalence<Person> SAME_AGE = Equivalence.equals().onResultOf(GET_PERSON_AGE);
   * }
   *
   * <p>{@code function} will never be invoked with a null value.
   *
   * <p>Note that {@code function} must be consistent according to {@code this} equivalence
   * relation. That is, invoking {@link Function#apply} multiple times for a given value must return
   * equivalent results. For example, {@code
   * Equivalence.identity().onResultOf(Functions.toStringFunction())} is broken because it's not
   * guaranteed that {@link Object#toString}) always returns the same string instance.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,pairwise,com.google.common.base.Equivalence:pairwise(),296,300,"/**
* Returns an equivalence relation for pairwise iterables of type S (where S is a subtype of T).
* @return Equivalence object for comparing iterable pairs
*/","* Returns an equivalence over iterables based on the equivalence of their elements. More
   * specifically, two iterables are considered equivalent if they both contain the same number of
   * elements, and each pair of corresponding elements is equivalent according to {@code this}. Null
   * iterables are equivalent to one another.
   *
   * <p>Note that this method performs a similar function for equivalences as {@link
   * com.google.common.collect.Ordering#lexicographical} does for orderings.
   *
   * <p>The returned object is serializable if this object is serializable.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,reclaimValue,com.google.common.collect.MapMakerInternalMap:reclaimValue(com.google.common.collect.MapMakerInternalMap$WeakValueReference),1113,1117,"/**
* Reclaims a weakly referenced value from the cache.
* @param valueReference reference to the weakly held value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,elementsEqual,"com.google.common.collect.Iterables:elementsEqual(java.lang.Iterable,java.lang.Iterable)",229,238,"/**
* Compares two iterables for element equality.
* @param iterable1 first iterable to compare
* @param iterable2 second iterable to compare
* @return true if all elements are equal, false otherwise
*/","* Determines whether two iterables contain equal elements in the same order. More specifically,
   * this method returns {@code true} if {@code iterable1} and {@code iterable2} contain the same
   * number of elements and every element of {@code iterable1} is equal to the corresponding element
   * of {@code iterable2}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,equalsImpl,"com.google.common.collect.Lists:equalsImpl(java.util.List,java.lang.Object)",1027,1050,"/**
* Compares two lists for equality.
* @param thisList the list to compare
* @param other the object to compare against (may be a list or null)
* @return true if the lists are equal, false otherwise
*/",An implementation of {@link List#equals(Object)}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,create,com.google.common.collect.ConcurrentHashMultiset:create(),89,94,"/**
* Creates a new instance of ConcurrentHashMultiset with a ConcurrentHashMap backing map.
*/","* Creates a new, empty {@code ConcurrentHashMultiset} using the default initial capacity, load
   * factor, and concurrency settings.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,create,com.google.common.collect.ConcurrentHashMultiset:create(java.util.concurrent.ConcurrentMap),124,126,"/**
* Creates a concurrent multiset from a map of element counts.
* @param countMap map associating elements with their respective counts
*/","* Creates a new, empty {@code ConcurrentHashMultiset} using {@code countMap} as the internal
   * backing map.
   *
   * <p>This instance will assume ownership of {@code countMap}, and other code should not maintain
   * references to the map or modify it in any way.
   *
   * <p>The returned multiset is serializable if the input map is.
   *
   * @param countMap backing map for storing the elements in the multiset and their counts. It must
   *     be empty.
   * @throws IllegalArgumentException if {@code countMap} is not empty
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,doForward,com.google.common.collect.Maps$BiMapConverter:doForward(java.lang.Object),1610,1613,"/**
* Converts input A to output B using bimap.
* @param a input object of type A
* @return corresponding output object of type B or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,doBackward,com.google.common.collect.Maps$BiMapConverter:doBackward(java.lang.Object),1615,1618,"/**
* Inverts Bimap and applies conversion to result. 
* @param b input object of type B
* @return A object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdges,com.google.common.graph.AbstractGraph:incidentEdges(java.lang.Object),106,134,"/**
* Retrieves the set of incident edges for a given node.
* @param node graph node
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdges,com.google.common.graph.AbstractValueGraph:incidentEdges(java.lang.Object),106,134,"/**
* Retrieves incident edges for a given node.
* @param node the node to fetch edges for
* @return Set of EndpointPairs representing edges incident on the node
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.lang.Iterable)",92,95,"/**
* Converts iterable of objects to string and appends it to the specified Appendable.
* @param appendable target Appendable for appending the result
* @param parts iterable of objects to convert and append
* @return the same Appendable instance as input (since @CanIgnoreReturnValue)
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code appendable}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.util.Iterator)",153,161,"/**
* Appends iterator of objects to a StringBuilder.
* @param builder StringBuilder instance
* @param parts Iterator containing elements to append
* @return the modified StringBuilder instance
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,
   * Iterable)}, except that it does not throw {@link IOException}.
   *
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.util.Map)",400,403,"/**
* Appends key-value pairs from the given map to the provided StringBuilder.
* @param builder StringBuilder to append to
* @param map Map containing key-value pairs to be appended
*/","* Appends the string representation of each entry of {@code map}, using the previously
     * configured separator and key-value separator, to {@code builder}. Identical to {@link
     * #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner$MapJoiner:join(java.lang.Iterable),486,488,"/**
* Joins an iterable of entries into a string.
* @param entries iterable of entries to be joined
*/","* Returns a string containing the string representation of each entry in {@code entries}, using
     * the previously configured separator and key-value separator.
     *
     * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(java.lang.Object),268,271,"/**
* Adds a value to the current holder and returns this helper.
* @param value object to be added (may be null)
*/","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, Object)} instead and give value a
     * readable name.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,java.lang.Object)",197,200,"/**
* Adds a named value to the builder.
* @param name property name
* @param value property value or null for omission
*/","* Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value}
     * is {@code null}, the string {@code ""null""} is used, unless {@link #omitNullValues()} is
     * called, in which case this name/value pair will not be added.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(boolean),281,284,"/**
* Adds boolean value to the toString representation.
* @param value true or false value to be added
*/","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, boolean)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(char),294,297,"/**
 * Adds a character value to the toString helper.
 * @return this instance of ToStringHelper for chaining.","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, char)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(double),307,310,"/**
* Adds a double value to the builder.
* @param value the numerical value to be added
*/","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, double)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(float),320,323,"/**
* Adds float value to the current object representation.
* @param value float value to be included
*/","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, float)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(int),333,336,"/**
* Adds an integer value to the builder.","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, int)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(long),346,349,"/**
* Adds a long value to the string representation.
* @param value the value to be added
*/","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, long)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,boolean)",207,210,"/**
* Adds a boolean property to the helper with the specified name and value.
* @param name property name
* @param value true or false value
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,char)",217,220,"/**
* Adds a single character to the builder.
* @param name property name
* @param value character value
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,double)",227,230,"/**
* Adds a numeric field with the specified name and value.
* @param name field name
* @param value numeric field value
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,float)",237,240,"/**
* Adds a float value to the builder with the specified name.
* @param name unique identifier
* @param value numerical value
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,int)",247,250,"/**
* Adds an integer property with the given name and value.
* @param name property name
* @param value integer value to be added
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,long)",257,260,"/**
* Adds a long value to the builder with the specified name.
* @param name name of the property
* @param value long value to be added
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getKeyEquivalence,com.google.common.cache.CacheBuilder:getKeyEquivalence(),374,376,"/**
* Returns the equivalence of the key.
* @return Key's equivalence or default if not set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getValueEquivalence,com.google.common.cache.CacheBuilder:getValueEquivalence(),396,398,"/**
* Returns the equivalence of the current value.
* @return Equivalence object representing the value's equivalence
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,getKeyEquivalence,com.google.common.collect.MapMaker:getKeyEquivalence(),130,132,"/**
* Returns the key equivalence using default if not set.
* @return KeyEquivalence object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,transform,com.google.common.base.Absent:transform(com.google.common.base.Function),75,79,"/**
* Applies a transformation function to this object and returns the result.
* If the function is null, throws NullPointerException. Otherwise, always returns an empty Optional.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,fromNullable,com.google.common.base.Optional:fromNullable(java.lang.Object),119,121,"/**
* Wraps a nullable reference into an Optional, returning absent if null. 
* @param nullableReference the object to wrap or null
* @return Optional containing the object or empty if null
*/","* If {@code nullableReference} is non-null, returns an {@code Optional} instance containing that
   * reference; otherwise returns {@link Optional#absent}.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's
   * {@code Optional.ofNullable}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,<init>,com.google.common.collect.FluentIterable:<init>(),120,122,"/**
* Initializes a new FluentIterable instance with no underlying iterable.",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource:sizeIfKnown(),181,183,"/**
* Returns the total size in bytes if known, otherwise absent. 
* @return Optional<Long> containing size or null if unknown
*/","* Returns the size of this source in bytes, if the size can be easily determined without actually
   * opening the data stream.
   *
   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a file,
   * may return a non-absent value. Note that in such cases, it is <i>possible</i> that this method
   * will return a different number of bytes than would be returned by reading all of the bytes (for
   * example, some special files may return a size of 0 despite actually having content when read).
   *
   * <p>Additionally, for mutable sources such as files, a subsequent read may return a different
   * number of bytes if the contents are changed.
   *
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lengthIfKnown,com.google.common.io.CharSource:lengthIfKnown(),190,192,"/**
* Returns the length of this object (if known), as an optional Long value.
* @return Optional Long value containing the length if it can be determined, otherwise empty.","* Returns the size of this source in chars, if the size can be easily determined without actually
   * opening the data stream.
   *
   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a {@code
   * CharSequence}, may return a non-absent value. Note that in such cases, it is <i>possible</i>
   * that this method will return a different number of chars than would be returned by reading all
   * of the chars.
   *
   * <p>Additionally, for mutable sources such as {@code StringBuilder}s, a subsequent read may
   * return a different number of chars if the contents are changed.
   *
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createConstant,"com.google.common.net.MediaType:createConstant(java.lang.String,java.lang.String)",108,113,"/**
* Creates a constant MediaType instance with specified type and subtype.
* @param type the top-level type of the media (e.g., ""application"")
* @param subtype the subtype of the media (e.g., ""json"") 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,emptyToNull,com.google.common.base.Strings:emptyToNull(java.lang.String),55,57,"/**
* Returns the input string as is, unless it's null or empty, in which case returns null.
*/","* Returns the given string if it is nonempty; {@code null} otherwise.
   *
   * @param string the string to test and possibly return
   * @return {@code string} itself if it is nonempty; {@code null} if it is empty or null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$DurationParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",424,456,"/**
* Parses a cache specification for a duration.
* @param spec CacheBuilderSpec object
* @param key unique key identifier
* @param value string representation of duration (e.g. ""10m"")
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$IntegerParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",295,306,"/**
* Parses an integer value from the cache for a given key.
* @param spec CacheBuilderSpec object
* @param key unique cache key
* @param value string representation of the integer value (must not be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$LongParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",313,324,"/**
* Parses a long value from the cache.
* @param spec CacheBuilderSpec instance
* @param key unique key identifier
* @param value string representation of long value (must not be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,fromString,com.google.common.net.HostAndPort:fromString(java.lang.String),167,201,"/**
* Parses a string into a HostAndPort object.
* @param hostPortString input string in various formats (e.g., ""host:port"", ""[host]:port"")
*/","* Split a freeform string into a host and port, without strict validation.
   *
   * <p>Note that the host-only formats will leave the port field undefined. You can use {@link
   * #withDefaultPort(int)} to patch in a default value.
   *
   * @param hostPortString the input string to parse.
   * @return if parsing was successful, a populated HostAndPort object.
   * @throws IllegalArgumentException if nothing meaningful could be parsed.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,skip,com.google.common.collect.FluentIterable:skip(int),581,583,"/**
* Skips specified number of elements in iterable and returns remaining elements.
* @param numberToSkip number of elements to skip
*/","* Returns a view of this fluent iterable that skips its first {@code numberToSkip} elements. If
   * this fluent iterable contains fewer than {@code numberToSkip} elements, the returned fluent
   * iterable skips all of its elements.
   *
   * <p>Modifications to this fluent iterable before a call to {@code iterator()} are reflected in
   * the returned fluent iterable. That is, the iterator skips the first {@code numberToSkip}
   * elements that exist when the iterator is created, not when {@code skip()} is called.
   *
   * <p>The returned fluent iterable's iterator supports {@code remove()} if the {@code Iterator} of
   * this fluent iterable supports it. Note that it is <i>not</i> possible to delete the last
   * skipped element by immediately calling {@code remove()} on the returned fluent iterable's
   * iterator, as the {@code Iterator} contract states that a call to {@code * remove()} before a
   * call to {@code next()} will throw an {@link IllegalStateException}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#skip} (same).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,limit,com.google.common.collect.FluentIterable:limit(int),596,598,"/**
* Returns an iterable that limits the number of elements to the specified maximum size.
* @param maxSize maximum number of elements to include
*/","* Creates a fluent iterable with the first {@code size} elements of this fluent iterable. If this
   * fluent iterable does not contain that many elements, the returned fluent iterable will have the
   * same behavior as this fluent iterable. The returned fluent iterable's iterator supports {@code
   * remove()} if this fluent iterable's iterator does.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#limit} (same).
   *
   * @param maxSize the maximum number of elements in the returned fluent iterable
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,get,"com.google.common.collect.Iterables:get(java.lang.Iterable,int,java.lang.Object)",788,801,"/**
* Retrieves an element from a collection at a specified index.
* @param iterable input collection (Iterable)
* @param position index of the desired element
* @param defaultValue value to return if element not found or null in collection
* @return T element at position, or defaultValue if not found
*/","* Returns the element at the specified position in an iterable or a default value otherwise.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code
   * stream.skip(position).findFirst().orElse(defaultValue)} (returns the default value if the index
   * is out of bounds)
   *
   * @param position position of the element to return
   * @param defaultValue the default value to return if {@code position} is greater than or equal to
   *     the size of the iterable
   * @return the element at the specified position in {@code iterable} or {@code defaultValue} if
   *     {@code iterable} contains fewer than {@code position + 1} elements.
   * @throws IndexOutOfBoundsException if {@code position} is negative
   * @since 4.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,get,"com.google.common.collect.Iterators:get(java.util.Iterator,int)",842,855,"/**
* Retrieves an element from an Iterator at a specified position.
* @param iterator input Iterator containing elements to retrieve
* @param position index of desired element, must be non-negative
*/","* Advances {@code iterator} {@code position + 1} times, returning the element at the {@code
   * position}th position.
   *
   * @param position position of the element to return
   * @return the element at the specified position in {@code iterator}
   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to
   *     the number of elements remaining in {@code iterator}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,get,"com.google.common.collect.Iterators:get(java.util.Iterator,int,java.lang.Object)",869,875,"/**
* Retrieves an object from the iterator at a specified position.
* @param iterator iterator to navigate
* @param position index of desired object (0-based)
* @param defaultValue default value if iteration ends prematurely
* @return object at specified position or default value
*/","* Advances {@code iterator} {@code position + 1} times, returning the element at the {@code
   * position}th position or {@code defaultValue} otherwise.
   *
   * @param position position of the element to return
   * @param defaultValue the default value to return if the iterator is empty or if {@code position}
   *     is greater than the number of elements remaining in {@code iterator}
   * @return the element at the specified position in {@code iterator} or {@code defaultValue} if
   *     {@code iterator} produces fewer than {@code position + 1} elements.
   * @throws IndexOutOfBoundsException if {@code position} is negative
   * @since 4.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,fileTraverser,com.google.common.io.Files:fileTraverser(),842,844,"/**
* Returns a traverser instance for navigating FILE_TREE.
* @return Traverser instance for FILE_TREE
*/","* Returns a {@link Traverser} instance for the file and directory tree. The returned traverser
   * starts from a {@link File} and will return all files and directories it encounters.
   *
   * <p><b>Warning:</b> {@code File} provides no support for symbolic links, and as such there is no
   * way to ensure that a symbolic link to a directory is not followed when traversing the tree. In
   * this case, iterables created by this traverser could contain files that are outside of the
   * given directory or even be infinite if there is a symbolic link loop.
   *
   * <p>If available, consider using {@link MoreFiles#fileTraverser()} instead. It behaves the same
   * except that it doesn't follow symbolic links and returns {@code Path} instances.
   *
   * <p>If the {@link File} passed to one of the {@link Traverser} methods does not exist or is not
   * a directory, no exception will be thrown and the returned {@link Iterable} will contain a
   * single element: that file.
   *
   * <p>Example: {@code Files.fileTraverser().depthFirstPreOrder(new File(""/""))} may return files
   * with the following paths: {@code [""/"", ""/etc"", ""/etc/config.txt"", ""/etc/fonts"", ""/home"",
   * ""/home/alice"", ...]}
   *
   * @since 23.5",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,readResolve,com.google.common.hash.BloomFilter$SerialForm:readResolve(),578,580,"/**
* Creates a Bloom filter object from serialized data.
* @return A new BloomFilter instance with the restored data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,copy,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:copy(),245,247,"/**
* Creates a deep copy of this lock-free bit array.
* @return A new LockFreeBitArray instance with identical data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,limit,"com.google.common.io.ByteStreams:limit(java.io.InputStream,long)",709,712,"/**
* Creates an input stream with a size limit.
* @param in original input stream
* @param limit maximum byte count to read from the stream
*/","* Wraps a {@link InputStream}, limiting the number of bytes which can be read.
   *
   * @param in the input stream to be wrapped
   * @param limit the maximum number of bytes to be read
   * @return a length-limited {@link InputStream}
   * @since 14.0 (since 1.0 as com.google.common.io.LimitInputStream)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromIPv4BigInteger,com.google.common.net.InetAddresses:fromIPv4BigInteger(java.math.BigInteger),1094,1096,"/**
* Converts BigInteger to IPv4 Inet4Address.
* @param address BigInteger representation of IP address
*/","* Returns the {@code Inet4Address} corresponding to a given {@code BigInteger}.
   *
   * @param address BigInteger representing the IPv4 address
   * @return Inet4Address representation of the given BigInteger
   * @throws IllegalArgumentException if the BigInteger is not between 0 and 2^32-1
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromIPv6BigInteger,com.google.common.net.InetAddresses:fromIPv6BigInteger(java.math.BigInteger),1106,1108,"/**
* Converts IPv6 BigInteger to InetAddress object.
* @param address IPv6 address as BigInteger
*/","* Returns the {@code Inet6Address} corresponding to a given {@code BigInteger}.
   *
   * @param address BigInteger representing the IPv6 address
   * @return Inet6Address representation of the given BigInteger
   * @throws IllegalArgumentException if the BigInteger is not between 0 and 2^128-1
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,"com.google.common.util.concurrent.Striped$CompactStriped:<init>(int,com.google.common.base.Supplier)",375,383,"/**
* Initializes CompactStriped with a specified number of stripes and 
* a supplier to populate each stripe.
* @param stripes total stripes in the data structure
* @param supplier function to generate elements for each stripe
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,"com.google.common.util.concurrent.Striped$SmallLazyStriped:<init>(int,com.google.common.base.Supplier)",409,414,"/**
* Initializes a SmallLazyStriped with specified stripes and supplier for creating elements.
* @param stripes number of stripes
* @param supplier function to create elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,<init>,"com.google.common.graph.AbstractDirectedNetworkConnections:<init>(java.util.Map,java.util.Map,int)",52,57,"/**
* Initializes an AbstractDirectedNetwork with edge maps and self-loop count.
* @param inEdgeMap incoming edges (key: entity, value: weight)
* @param outEdgeMap outgoing edges (key: entity, value: weight)
* @param selfLoopCount number of self-loops in the network
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,removeInEdge,"com.google.common.graph.AbstractDirectedNetworkConnections:removeInEdge(java.lang.Object,boolean)",106,114,"/**
* Removes an incoming edge from the graph, decrementing self-loop count if applicable.
* @param edge edge to remove
* @param isSelfLoop whether the edge represents a self-loop
* @return removed node or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,"com.google.common.graph.DirectedGraphConnections:<init>(java.util.Map,java.util.List,int,int)",141,153,"/**
* Initializes DirectedGraphConnections with adjacency values, ordered connections and counts.
* @param adjacentNodeValues map of node to value
* @param orderedNodeConnections list of ordered connections (may be null)
* @param predecessorCount number of predecessors
* @param successorCount number of successors
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,addInEdge,"com.google.common.graph.AbstractDirectedNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",123,133,"/**
* Adds an edge to the graph with a specified node and self-loop flag.
* @param edge Edge object to add
* @param node Node object associated with the edge
* @param isSelfLoop True if this is a self-loop, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashUnencodedChars,com.google.common.hash.AbstractHashFunction:hashUnencodedChars(java.lang.CharSequence),38,42,"/**
* Computes hash code for unencoded characters in the given CharSequence.
* @param input input sequence of characters
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashInt,com.google.common.hash.AbstractHashFunction:hashInt(int),49,52,"/**
* Computes a hash code from an integer using a fixed-size hasher.
* @param input the integer to be hashed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashBytes,com.google.common.hash.AbstractHashFunction:hashBytes(java.nio.ByteBuffer),70,73,"/**
* Computes a hash code from the given ByteBuffer.
* @param input input buffer containing data to be hashed
* @return computed hash code value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,sipHash24,"com.google.common.hash.Hashing:sipHash24(long,long)",210,212,"/**
* Creates a SIP-24 hash function instance with specified key values.
* @param k0 first key value
* @param k1 second key value
* @return HashFunction object for cryptographic hashing
*/","* Returns a hash function implementing the <a href=""https://131002.net/siphash/"">64-bit
   * SipHash-2-4 algorithm</a> using the given seed.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,<init>,com.google.common.io.FileBackedOutputStream:<init>(int),106,108,"/**
* Initializes a new FileBackedOutputStream instance with the given file threshold.
* @param fileThreshold minimum file size to begin storing data in a file
*/","* Creates a new instance that uses the given file threshold, and does not reset the data when the
   * {@link ByteSource} returned by {@link #asByteSource} is finalized.
   *
   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file
   * @throws IllegalArgumentException if {@code fileThreshold} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromInteger,com.google.common.net.InetAddresses:fromInteger(int),1082,1084,"/**
 * Converts an integer IPv4 address to an Inet4Address object.
 * @param address integer representation of IPv4 address
 */","* Returns an Inet4Address having the integer value specified by the argument.
   *
   * @param address {@code int}, the 32bit integer address to be converted
   * @return {@link Inet4Address} equivalent of the argument",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,reserve,com.google.common.util.concurrent.RateLimiter:reserve(int),315,320,"/**
* Reserves a specified number of permits and returns wait time.
* @param permits the number of permits to reserve
*/","* Reserves the given number of permits from this {@code RateLimiter} for future use, returning
   * the number of microseconds until the reservation can be consumed.
   *
   * @return time in microseconds to wait until the resource can be acquired, never negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,"com.google.common.util.concurrent.RateLimiter:tryAcquire(int,long,java.util.concurrent.TimeUnit)",408,423,"/**
* Tries to acquire specified permits with a timeout.
* @param permits number of permits to acquire
* @param timeout maximum time to wait in the specified unit
* @param unit TimeUnit for the timeout (e.g. seconds, milliseconds)
* @return true if acquired within the timeout, false otherwise","* Acquires the given number of permits from this {@code RateLimiter} if it can be obtained
   * without exceeding the specified {@code timeout}, or returns {@code false} immediately (without
   * waiting) if the permits would not have been granted before the timeout expired.
   *
   * @param permits the number of permits to acquire
   * @param timeout the maximum time to wait for the permits. Negative values are treated as zero.
   * @param unit the time unit of the timeout argument
   * @return {@code true} if the permits were acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain$IntegerDomain:offset(java.lang.Integer,long)",83,87,"/**
* Calculates an integer offset from an origin by adding a non-negative distance.
* @param origin starting point as an integer
* @param distance non-negative distance to add
* @return resulting integer offset or null if invalid
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,writeTo,com.google.common.hash.BloomFilter:writeTo(java.io.OutputStream),592,605,"/**
* Writes strategy and hash data to OutputStream.
* @param out output stream where the data will be written
*/","* Writes this {@code BloomFilter} to an output stream, with a custom format (not Java
   * serialization). This has been measured to save at least 400 bytes compared to regular
   * serialization.
   *
   * <p>Use {@linkplain #readFrom(InputStream, Funnel)} to reconstruct the written BloomFilter.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedDelaySchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedDelaySchedule(java.time.Duration,java.time.Duration)",129,132,"/**
* Creates a fixed-delay schedule with specified initial and subsequent delays.
* @param initialDelay initial wait time
* @param delay subsequent wait time
*/","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleWithFixedDelay} method.
     *
     * @param initialDelay the time to delay first execution
     * @param delay the delay between the termination of one execution and the commencement of the
     *     next
     * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedRateSchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedRateSchedule(java.time.Duration,java.time.Duration)",165,168,"/**
* Creates a fixed-rate schedule with specified initial delay and execution period.
* @param initialDelay time before first execution
* @param period time between subsequent executions in nanoseconds
*/","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleAtFixedRate} method.
     *
     * @param initialDelay the time to delay first execution
     * @param period the period between successive executions of the task
     * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,toSafeNanos,"com.google.common.util.concurrent.Monitor:toSafeNanos(long,java.util.concurrent.TimeUnit)",1033,1036,"/**
* Converts a duration from a specified unit to safe nanoseconds.
* @param time duration value
* @param unit TimeUnit enumeration (e.g., SECONDS, MILLISECONDS)
* @return converted duration in nanoseconds, constrained within valid range
*/","* Returns unit.toNanos(time), additionally ensuring the returned value is not at risk of
   * overflowing or underflowing, by bounding the value between 0 and (Long.MAX_VALUE / 4) * 3.
   * Actually waiting for more than 219 years is not supported!",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,<init>,com.google.common.util.concurrent.AbstractService$StateSnapshot:<init>(com.google.common.util.concurrent.Service$State),605,607,"/**
* Initializes a new StateSnapshot instance from an existing state.
* @param internalState the underlying state to snapshot
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createStarted,com.google.common.base.Stopwatch:createStarted(com.google.common.base.Ticker),137,139,"/**
* Creates and starts a stopwatch instance.
* @param ticker Ticker object used to initialize the stopwatch
*/","* Creates (and starts) a new stopwatch, using the specified time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:remove(),231,247,"/**
* Decrements the frequency of current entry, removing it when frequency reaches 0.
* @throws ConcurrentModificationException if frequency is already 0
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,remove,com.google.common.collect.EnumMultiset$Itr:remove(),241,250,"/**
* Removes a specific element from the collection.
* @param toRemove index of the element to remove
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,remove,com.google.common.collect.Iterators$EmptyModifiableIterator:remove(),112,115,"/**
* Removes this item.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,remove,com.google.common.collect.Multisets$MultisetIteratorImpl:remove(),1107,1121,"/**
* Removes entry from the multiset, updating count and iterator.
* @param totalCount total entries in the set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,orderEntriesByValue,com.google.common.collect.ImmutableBiMap$Builder:orderEntriesByValue(java.util.Comparator),412,417,"/**
* Orders entries by their values using a custom comparator.
* @param valueComparator comparator to compare entry values
* @return Builder instance for method chaining","* Configures this {@code Builder} to order entries by value according to the specified
     * comparator.
     *
     * <p>The sort order is stable, that is, if two entries have values that compare as equivalent,
     * the entry that was inserted first will be first in the built map's iteration order.
     *
     * @throws IllegalStateException if this method was already called
     * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,heapForIndex,com.google.common.collect.MinMaxPriorityQueue:heapForIndex(int),484,486,"/**
* Returns the appropriate heap (minHeap or maxHeap) based on even level index.
* @param i index of the heap to fetch
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,com.google.common.hash.MacHashFunction$MacHasher:update(byte),105,109,"/**
 * Updates the MAC address with the given byte.
 * @param b single byte to incorporate into the MAC address 
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,com.google.common.hash.MacHashFunction$MacHasher:update(byte[]),111,115,"/**
* Updates MAC with provided byte array.
* @param b byte array to update MAC with
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,"com.google.common.hash.MacHashFunction$MacHasher:update(byte[],int,int)",117,121,"/**
* Updates MAC with provided byte array data.
* @param b byte array to process
* @param off offset into the byte array
* @param len length of data in the byte array
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,com.google.common.hash.MacHashFunction$MacHasher:update(java.nio.ByteBuffer),123,128,"/**
* Updates internal state using ByteBuffer data.
* @param bytes input byte buffer containing new data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,update,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(byte),139,143,"/**
* Updates the cryptographic hash with a single byte.
* @param b the byte to be incorporated into the hash
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,update,"com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(byte[],int,int)",145,149,"/**
* Updates message digest with specified byte array and offset.
* @param b byte array to process
* @param off starting position in the array
* @param len number of bytes to update
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,update,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(java.nio.ByteBuffer),151,155,"/**
* Updates the digest with the given byte buffer.
* @param bytes input data to be digested
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,concurrencyLevel,com.google.common.collect.Interners$InternerBuilder:concurrencyLevel(int),79,83,"/**
* Sets the concurrency level for the map.
* @param concurrencyLevel desired concurrency level
*/","* Sets the concurrency level that will be used by the to-be-built {@link Interner}.
     *
     * @see MapMaker#concurrencyLevel(int)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterWrite,com.google.common.cache.CacheBuilder:expireAfterWrite(java.time.Duration),723,729,"/**
* Configures cache to evict entries after specified write time.
* @param duration time to wait before expiring entries in seconds
*/","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, or the most recent replacement of its value.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * @param duration the length of time after an entry is created that it should be automatically
   *     removed
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterWrite} was already set
   * @throws ArithmeticException for durations greater than +/- approximately 292 years
   * @since 25.0 (but only since 33.3.0 in the Android <a
   *     href=""https://github.com/google/guava#guava-google-core-libraries-for-java"">flavor</a>)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterAccess,com.google.common.cache.CacheBuilder:expireAfterAccess(java.time.Duration),796,802,"/**
* Configures the cache to expire entries after a specified access time.
*@param duration duration of inactivity before expiration
*/","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, the most recent replacement of its value, or its last
   * access. Access time is reset by all cache read and write operations (including {@code
   * Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code
   * containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}}. So,
   * for example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for
   * the entries you retrieve.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * @param duration the length of time after an entry is last accessed that it should be
   *     automatically removed
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterAccess} was already set
   * @throws ArithmeticException for durations greater than +/- approximately 292 years
   * @since 25.0 (but only since 33.3.0 in the Android <a
   *     href=""https://github.com/google/guava#guava-google-core-libraries-for-java"">flavor</a>)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,refreshAfterWrite,com.google.common.cache.CacheBuilder:refreshAfterWrite(java.time.Duration),878,884,"/**
* Configures cache to be refreshed after write operations.
* @param duration time interval before refreshing the cache
*/","* Specifies that active entries are eligible for automatic refresh once a fixed duration has
   * elapsed after the entry's creation, or the most recent replacement of its value. The semantics
   * of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link
   * CacheLoader#reload}.
   *
   * <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is
   * recommended that users of this method override {@link CacheLoader#reload} with an asynchronous
   * implementation; otherwise refreshes will be performed during unrelated cache read and write
   * operations.
   *
   * <p>Currently automatic refreshes are performed when the first stale request for an entry
   * occurs. The request triggering refresh will make a synchronous call to {@link
   * CacheLoader#reload}
   * to obtain a future of the new value. If the returned future is already complete, it is returned
   * immediately. Otherwise, the old value is returned.
   *
   * <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>.
   *
   * @param duration the length of time after an entry is created that it should be considered
   *     stale, and thus eligible for refresh
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #refreshAfterWrite} was already set
   * @throws ArithmeticException for durations greater than +/- approximately 292 years
   * @since 25.0 (but only since 33.3.0 in the Android <a
   *     href=""https://github.com/google/guava#guava-google-core-libraries-for-java"">flavor</a>)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,weakKeys,com.google.common.cache.CacheBuilder:weakKeys(),625,629,"/**
* Sets key strength to Weak, allowing cache to hold keys without preventing GC. 
* @return updated CacheBuilder instance
*/","* Specifies that each key (not value) stored in the cache should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p><b>Warning:</b> when this method is used, the resulting cache will use identity ({@code ==})
   * comparison to determine equality of keys. Its {@link Cache#asMap} view will therefore
   * technically violate the {@link Map} specification (in the same way that {@link IdentityHashMap}
   * does).
   *
   * <p>Entries with keys that have been garbage collected may be counted in {@link Cache#size}, but
   * will never be visible to read or write operations; such entries are cleaned up as part of the
   * routine maintenance described in the class javadoc.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if the key strength was already set",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,weakValues,com.google.common.cache.CacheBuilder:weakValues(),659,663,"/**
* Sets cache value strength to Weak. 
* @return updated CacheBuilder instance
*/","* Specifies that each value (not key) stored in the cache should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor
   * candidate for caching; consider {@link #softValues} instead.
   *
   * <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==})
   * comparison to determine equality of values.
   *
   * <p>Entries with values that have been garbage collected may be counted in {@link Cache#size},
   * but will never be visible to read or write operations; such entries are cleaned up as part of
   * the routine maintenance described in the class javadoc.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if the value strength was already set",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,softValues,com.google.common.cache.CacheBuilder:softValues(),685,689,"/**
* Sets the value strength to SOFT.
*/","* Specifies that each value (not key) stored in the cache should be wrapped in a {@link
   * SoftReference} (by default, strong references are used). Softly-referenced objects will be
   * garbage-collected in a <i>globally</i> least-recently-used manner, in response to memory
   * demand.
   *
   * <p><b>Warning:</b> in most circumstances it is better to set a per-cache {@linkplain
   * #maximumSize(long) maximum size} instead of using soft references. You should only use this
   * method if you are well familiar with the practical consequences of soft references.
   *
   * <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==})
   * comparison to determine equality of values.
   *
   * <p>Entries with values that have been garbage collected may be counted in {@link Cache#size},
   * but will never be visible to read or write operations; such entries are cleaned up as part of
   * the routine maintenance described in the class javadoc.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if the value strength was already set",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,weakKeys,com.google.common.collect.MapMaker:weakKeys(),204,208,"/**
* Configures the map to use weak keys.
*/","* Specifies that each key (not value) stored in the map should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==})
   * comparison to determine equality of keys, which is a technical violation of the {@link Map}
   * specification, and may not be what you expect.
   *
   * @throws IllegalStateException if the key strength was already set
   * @see WeakReference",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,weakValues,com.google.common.collect.MapMaker:weakValues(),241,245,"/**
* Sets map values to be held in WeakReferences.
* @return this MapMaker instance for chaining
*/","* Specifies that each value (not key) stored in the map should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor
   * candidate for caching.
   *
   * <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==})
   * comparison to determine equality of values. This technically violates the specifications of the
   * methods {@link Map#containsValue containsValue}, {@link ConcurrentMap#remove(Object, Object)
   * remove(Object, Object)} and {@link ConcurrentMap#replace(Object, Object, Object) replace(K, V,
   * V)}, and may not be what you expect.
   *
   * @throws IllegalStateException if the value strength was already set
   * @see WeakReference",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,readMapMaker,com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:readMapMaker(java.io.ObjectInputStream),2851,2860,"/**
* Creates a MapMaker instance from an ObjectInputStream.
* @param in input stream containing initial map size
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,failureCause,com.google.common.util.concurrent.AbstractService:failureCause(),502,505,"/**
* Returns the cause of the last failure.
* @return The root cause of the failure or null if not applicable
*/",* @since 14.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkElementIndex,"com.google.common.base.Preconditions:checkElementIndex(int,int)",1349,1352,"/**
* Validates an element index within a given array size.
* @param index the index to validate
* @param size the array size
* @return the validated index or -1 if invalid
*/","* Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size
   * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.
   *
   * @param index a user-supplied index identifying an element of an array, list or string
   * @param size the size of that array, list or string
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkPositionIndex,"com.google.common.base.Preconditions:checkPositionIndex(int,int)",1398,1401,"/**
* Validates position index within given collection size.
* @param index position to be validated
* @param size collection size
*/","* Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of
   * size {@code size}. A position index may range from zero to {@code size}, inclusive.
   *
   * <p><b>Java 9 users:</b> consider using {@link java.util.Objects#checkIndex(index, size)}
   * instead. However, note that {@code checkIndex()} throws {@code IndexOutOfBoundsException} when
   * {@code size} is negative, while this method throws {@code IllegalArgumentException}.
   *
   * @param index a user-supplied index identifying a position in an array, list or string
   * @param size the size of that array, list or string
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkPositionIndexes,"com.google.common.base.Preconditions:checkPositionIndexes(int,int,int)",1445,1450,"/**
* Validates array indices within specified bounds.
* @param start starting index
* @param end ending index
* @param size array size
*/","* Ensures that {@code start} and {@code end} specify valid <i>positions</i> in an array, list or
   * string of size {@code size}, and are in order. A position index may range from zero to {@code
   * size}, inclusive.
   *
   * @param start a user-supplied index identifying a starting position in an array, list or string
   * @param end a user-supplied index identifying an ending position in an array, list or string
   * @param size the size of that array, list or string
   * @throws IndexOutOfBoundsException if either index is negative or is greater than {@code size},
   *     or if {@code end} is less than {@code start}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,equalTo,com.google.common.base.Predicates:equalTo(java.lang.Object),187,191,"/**
* Creates a predicate that checks for equality to the specified target value.
* @param target object to compare against, can be null
*/","* Returns a predicate that evaluates to {@code true} if the object being tested {@code equals()}
   * the given target or both are null.
   *
   * <p><b>Discouraged:</b> Prefer using {@code x -> Objects.equals(x, target)}, but note that
   * lambdas do not have human-readable {@link #toString()} representations and are not
   * serializable.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,createCombined,com.google.common.collect.Collections2$FilteredCollection:createCombined(com.google.common.base.Predicate),131,133,"/**
* Combines an existing predicate with a new one to filter the collection.
* @param newPredicate additional filtering condition
* @return FilteredCollection with updated predicate
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterFiltered,"com.google.common.collect.Multimaps:filterFiltered(com.google.common.collect.FilteredMultimap,com.google.common.base.Predicate)",2221,2227,"/**
* Filters a multimap based on the provided entry filter.
* @param multimap unfiltered multimap to filter
* @param entryPredicate predicate for each entry in the multimap
* @return filtered multimap containing entries that pass both filters
*/","* Support removal operations when filtering a filtered multimap. Since a filtered multimap has
   * iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would
   * lead to a multimap whose removal operations would fail. This method combines the predicates to
   * avoid that problem.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,filter,"com.google.common.collect.Multisets:filter(com.google.common.collect.Multiset,com.google.common.base.Predicate)",317,327,"/**
* Filters a Multiset using the given predicate.
* @param unfiltered Multiset to filter
* @param predicate condition for inclusion in filtered result
* @return filtered Multiset or null if input is FilteredMultiset
*/","* Returns a view of the elements of {@code unfiltered} that satisfy a predicate. The returned
   * multiset is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting multiset's iterators, and those of its {@code entrySet()} and {@code
   * elementSet()}, do not support {@code remove()}. However, all other multiset methods supported
   * by {@code unfiltered} are supported by the returned multiset. When given an element that
   * doesn't satisfy the predicate, the multiset's {@code add()} and {@code addAll()} methods throw
   * an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code
   * clear()} are called on the filtered multiset, only elements that satisfy the filter will be
   * removed from the underlying multiset.
   *
   * <p>The returned multiset isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multiset's methods, such as {@code size()}, iterate across every
   * element in the underlying multiset and determine which elements satisfy the filter. When a live
   * view is <i>not</i> needed, it may be faster to copy the returned multiset and use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(com.google.common.base.CharMatcher),140,156,"/**
* Creates a Splitter instance with the specified character matcher as separator.
* @param separatorMatcher CharMatcher to match the separator character
*/","* Returns a splitter that considers any single character matched by the given {@code CharMatcher}
   * to be a separator. For example, {@code
   * Splitter.on(CharMatcher.anyOf("";,"")).split(""foo,;bar,quux"")} returns an iterable containing
   * {@code [""foo"", """", ""bar"", ""quux""]}.
   *
   * @param separatorMatcher a {@link CharMatcher} that determines whether a character is a
   *     separator
   * @return a splitter, with default settings, that uses this matcher",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,fixedLength,com.google.common.base.Splitter:fixedLength(int),271,288,"/**
* Creates a Splitter for fixed-length splits.
* @param length minimum split chunk size (must be > 0)
*/","* Returns a splitter that divides strings into pieces of the given length. For example, {@code
   * Splitter.fixedLength(2).split(""abcde"")} returns an iterable containing {@code [""ab"", ""cd"",
   * ""e""]}. The last piece can be smaller than {@code length} but will never be empty.
   *
   * <p><b>Note:</b> if {@link #fixedLength} is used in conjunction with {@link #limit}, the final
   * split piece <i>may be longer than the specified fixed length</i>. This is because the splitter
   * will <i>stop splitting when the limit is reached</i>, and just return the final piece as-is.
   *
   * <p><b>Exception:</b> for consistency with separator-based splitters, {@code split("""")} does not
   * yield an empty iterable, but an iterable containing {@code """"}. This is the only case in which
   * {@code Iterables.size(split(input))} does not equal {@code IntMath.divide(input.length(),
   * length, CEILING)}. To avoid this behavior, use {@code omitEmptyStrings}.
   *
   * @param length the desired length of pieces after splitting, a positive integer
   * @return a splitter, with default settings, that can split into fixed sized pieces
   * @throws IllegalArgumentException if {@code length} is zero or negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,trimResults,com.google.common.base.Splitter:trimResults(),340,342,"/**
* Trims whitespace from results.
* @return Splitter instance with trimmed results
*/","* Returns a splitter that behaves equivalently to {@code this} splitter, but automatically
   * removes leading and trailing {@linkplain CharMatcher#whitespace whitespace} from each returned
   * substring; equivalent to {@code trimResults(CharMatcher.whitespace())}. For example, {@code
   * Splitter.on(',').trimResults().split("" a, b ,c "")} returns an iterable containing {@code [""a"",
   * ""b"", ""c""]}.
   *
   * @return a splitter with the desired configuration",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createUnstarted,com.google.common.base.Stopwatch:createUnstarted(),110,112,"/**
* Creates an unstarted stopwatch instance.
*/","* Creates (but does not start) a new stopwatch using {@link System#nanoTime} as its time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createStarted,com.google.common.base.Stopwatch:createStarted(),128,130,"/**
* Creates and starts a new stopwatch instance.
* @return started Stopwatch object
*/","* Creates (and starts) a new stopwatch using {@link System#nanoTime} as its time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,elapsedNanos,com.google.common.cache.LocalCache$LoadingValueReference:elapsedNanos(),3597,3599,"/**
* Returns elapsed time in nanoseconds since stopwatch start.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,readMicros,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:readMicros(),470,470,"/**
* Returns the current microsecond timestamp.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,encodedLength,com.google.common.base.Utf8:encodedLength(java.lang.CharSequence),48,76,"/**
* Calculates the encoded length of a CharSequence in UTF-8.
* @param sequence input string
* @return encoded length as an integer, or throws exception if too large
*/","* Returns the number of bytes in the UTF-8-encoded form of {@code sequence}. For a string, this
   * method is equivalent to {@code string.getBytes(UTF_8).length}, but is more efficient in both
   * time and space.
   *
   * @throws IllegalArgumentException if {@code sequence} contains ill-formed UTF-16 (unpaired
   *     surrogates)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitTerminationUninterruptibly,com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService),539,544,"/**
* Waits indefinitely for the ExecutorService to terminate.","* Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit)
   * awaitTermination(long, TimeUnit)} uninterruptibly with no timeout.
   *
   * @since 30.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,run,com.google.common.base.internal.Finalizer:run(),139,151,"/**
* Continuously cleans up and removes elements from the queue until cleanup fails.
*/","Loops continuously, pulling references off the queue and cleaning them up.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,<init>,com.google.common.collect.ImmutableMultimap$Builder:<init>(),176,176,"/**
* Initializes a new Builder instance.","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableMultimap#builder}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,apply,com.google.common.cache.AbstractLoadingCache:apply(java.lang.Object),69,72,"/**
* Returns value associated with given key using unchecked retrieval.
* @param key unique identifier or key
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recreateCacheBuilder,com.google.common.cache.LocalCache$ManualSerializationProxy:recreateCacheBuilder(),4733,4763,"/**
* Creates a new cache builder with specified settings.
* @return CacheBuilder instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,from,com.google.common.cache.CacheLoader:from(com.google.common.base.Function),140,142,"/**
* Creates a CacheLoader instance wrapping the given function.
* @param function a transformation function to load cache values
*/","* Returns a cache loader that uses {@code function} to load keys, without supporting either
   * reloading or bulk loading. This allows creating a cache loader using a lambda expression.
   *
   * <p>The returned object is serializable if {@code function} is serializable.
   *
   * @param function the function to be used for loading values; must never return {@code null}
   * @return a cache loader that loads values by passing each key to {@code function}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,from,com.google.common.cache.CacheLoader:from(com.google.common.base.Supplier),155,157,"/**
* Creates a cache loader from a supplier.
* @param supplier provides values to be cached
*/","* Returns a cache loader based on an <i>existing</i> supplier instance. Note that there's no need
   * to create a <i>new</i> supplier just to pass it in here; just subclass {@code CacheLoader} and
   * implement {@link #load load} instead.
   *
   * <p>The returned object is serializable if {@code supplier} is serializable.
   *
   * @param supplier the supplier to be used for loading values; must never return {@code null}
   * @return a cache loader that loads values by calling {@link Supplier#get}, irrespective of the
   *     key",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,loadAll,com.google.common.cache.CacheLoader$1:loadAll(java.lang.Iterable),125,129,"/**
* Throws exception when loading all key-value pairs, forcing fallback to individual gets.
* @throws Exception if unsupported operation is encountered
*/","* Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link
   * LoadingCache#getAll}.
   *
   * <p>If the returned map doesn't contain all requested {@code keys} then the entries it does
   * contain will be cached, but {@code getAll} will throw an exception. If the returned map
   * contains extra keys not present in {@code keys} then all returned entries will be cached, but
   * only the entries for {@code keys} will be returned from {@code getAll}.
   *
   * <p>This method should be overridden when bulk retrieval is significantly more efficient than
   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls
   * to {@link LoadingCache#get} if this method is not overridden.
   *
   * @param keys the unique, non-null keys whose values should be loaded
   * @return a map from each key in {@code keys} to the value associated with that key; <b>may not
   *     contain null values</b>
   * @throws Exception if unable to load the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,hitRate,com.google.common.cache.CacheStats:hitRate(),123,126,"/**
* Calculates the hit rate as hits per request.
* @return Hit rate value or 1.0 if no requests have been made
*/","* Returns the ratio of cache requests which were hits. This is defined as {@code hitCount /
   * requestCount}, or {@code 1.0} when {@code requestCount == 0}. Note that {@code hitRate +
   * missRate =~ 1.0}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,missRate,com.google.common.cache.CacheStats:missRate(),147,150,"/**
* Calculates the miss rate by dividing missed requests by total requests.
* @return Miss rate as a double value, or 0.0 if no requests were made
*/","* Returns the ratio of cache requests which were misses. This is defined as {@code missCount /
   * requestCount}, or {@code 0.0} when {@code requestCount == 0}. Note that {@code hitRate +
   * missRate =~ 1.0}. Cache misses include all requests which weren't cache hits, including
   * requests which resulted in either successful or failed loading attempts, and requests which
   * waited for other threads to finish loading. It is thus the case that {@code missCount >=
   * loadSuccessCount + loadExceptionCount}. Multiple concurrent misses for the same key will result
   * in a single load operation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,<init>,com.google.common.cache.ForwardingCache$SimpleForwardingCache:<init>(com.google.common.cache.Cache),136,138,"/**
* Initializes a new cache instance by wrapping an existing one.
* @param delegate underlying cache to be wrapped
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,<init>,com.google.common.cache.ForwardingLoadingCache:<init>(),39,39,"/**
* Creates an empty forwarding cache instance. 
* @see com.google.common.cache.CacheLoader for loading values into the cache.
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$ManualSerializationProxy:<init>(com.google.common.cache.LocalCache$Strength,com.google.common.cache.LocalCache$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,long,long,long,com.google.common.cache.Weigher,int,com.google.common.cache.RemovalListener,com.google.common.base.Ticker,com.google.common.cache.CacheLoader)",4706,4731,"/**
* Constructs a ManualSerializationProxy with specified configuration.
* @param keyStrength strength of keys
* @param valueStrength strength of values
* @param keyEquivalence equivalence function for keys
* @param valueEquivalence equivalence function for values
* @param expireAfterWriteNanos expiration time after write
* @param expireAfterAccessNanos expiration time after access
* @param maxWeight maximum weight
* @param weigher object weigher
* @param concurrencyLevel concurrency level
* @param removalListener listener on key-value removal
* @param ticker system tick provider or null for default
* @param loader cache loader function",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,<init>,com.google.common.collect.ForwardingList:<init>(),58,58,"/**
* Initializes an empty forwarding list. 
* This constructor is used to create an instance of ForwardingList without any initial elements.
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,<init>,com.google.common.collect.ForwardingMultiset:<init>(),54,54,"/**
* Creates an empty forwarding multiset instance. 
* @see ForwardingMultiset#delegate 
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,<init>,com.google.common.collect.ForwardingQueue:<init>(),52,52,"/**
* Initializes an empty forwarding queue.",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,<init>,com.google.common.collect.ForwardingSet:<init>(),54,54,"/**
* Creates an empty forwarding set. 
* @see ForwardingSet#forwardingSet() 
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$UnmodifiableEntries:<init>(java.util.Collection),1535,1537,"/**
* Copies an unmodifiable collection of entries into this map.
* @param entries Collection of key-value pairs to be copied
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$CartesianSet:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.CartesianList)",1582,1585,"/**
* Initializes a CartesianSet with specified axes and delegate list.
* @param axes set of axis sets
* @param delegate underlying Cartesian list data structure
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListIterator.java,<init>,com.google.common.collect.ForwardingListIterator:<init>(),44,44,"/**
* Initializes an empty ForwardingListIterator instance. 
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,<init>,"com.google.common.collect.AbstractBiMap:<init>(java.util.Map,com.google.common.collect.AbstractBiMap)",69,72,"/**
* Initializes a new bi-map instance with provided maps.
* @param backward map of values to keys
* @param forward map of keys to values
*/",Private constructor for inverse bimap.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,<init>,com.google.common.collect.ForwardingConcurrentMap:<init>(),44,44,"/**
* Initializes an empty forwarding concurrent map. 
* @see ForwardingConcurrentMap#forwardingConcurrentMap() */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,<init>,com.google.common.collect.ForwardingSortedMap:<init>(),63,63,"/**
* Initializes an empty forwarding sorted map. 
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,<init>,com.google.common.collect.ImmutableClassToInstanceMap:<init>(com.google.common.collect.ImmutableMap),173,175,"/**
* Constructs an instance from an existing immutable map of classes to instances.
* @param delegate immutable map containing class-instance mappings
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$UnmodifiableBiMap:<init>(com.google.common.collect.BiMap,com.google.common.collect.BiMap)",1711,1715,"/**
* Creates an immutable bi-map wrapping the given delegate and its inverse. 
* @param delegate primary bi-map instance
* @param inverse inverse bi-map instance (may be null) 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,<init>,com.google.common.collect.MutableClassToInstanceMap:<init>(java.util.Map),75,77,"/**
* Initializes a new instance of MutableClassToInstanceMap with a provided map. 
* @param delegate Map containing class-to-instance mappings
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,<init>,com.google.common.reflect.ImmutableTypeToInstanceMap:<init>(com.google.common.collect.ImmutableMap),98,100,"/**
* Constructs an instance from a delegate map.
* @param delegate underlying type-to-instance map
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,<init>,com.google.common.reflect.MutableTypeToInstanceMap:<init>(),41,41,"/**
* Initializes an empty map to store type instances.",Creates a new map.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,<init>,com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:<init>(java.util.Map$Entry),161,163,"/**
* Constructs an unmodifiable entry from a modifiable entry.
* @param delegate the underlying modifiable entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,<init>,com.google.common.collect.ForwardingListMultimap:<init>(),41,41,"/**
 * Initializes an empty ForwardingListMultimap instance. 
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,<init>,com.google.common.collect.ForwardingSetMultimap:<init>(),41,41,"/**
 * Initializes an empty multimap with default forwarding behavior.",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableMultimap:<init>(com.google.common.collect.Multimap),687,689,"/**
* Wraps an existing multimap in an unmodifiable view. 
* @param delegate original multimap instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,com.google.common.collect.Tables$UnmodifiableTable:<init>(com.google.common.collect.Table),544,546,"/**
* Wraps an existing table in an unmodifiable view.
* @param delegate original table to be wrapped
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,<init>,com.google.common.util.concurrent.ForwardingListeningExecutorService:<init>(),40,40,"/**
 * Creates an instance of this class.
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,<init>,com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture:<init>(java.util.concurrent.Future),88,90,"/**
* Wraps a Future object with a SimpleForwardingFuture.
* @param delegate the underlying Future to be wrapped
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,<init>,com.google.common.util.concurrent.ForwardingListenableFuture:<init>(),37,37,"/**
* Constructs an empty ForwardingListenableFuture instance. 
* This constructor is intended to be used by subclasses that need to wrap other types of futures.
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,<init>,"com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:<init>(java.util.concurrent.Future,java.util.concurrent.Executor)",128,131,"/**
* Adapts a Future to be listenable on an alternative executor.
* @param delegate the original Future to adapt
* @param adapterExecutor executor to use for listenability
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,get,com.google.common.cache.ForwardingLoadingCache:get(java.lang.Object),44,48,"/**
* Retrieves value associated with given key.
* @param key unique identifier for the desired value
* @return value of type V or throws ExecutionException if an error occurs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,getUnchecked,com.google.common.cache.ForwardingLoadingCache:getUnchecked(java.lang.Object),50,54,"/**
* Retrieves value associated with the given key without throwing exceptions.
* @param key unique identifier for the value to be retrieved
* @return Value object or null if not found, without any checked exceptions
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,getAll,com.google.common.cache.ForwardingLoadingCache:getAll(java.lang.Iterable),56,60,"/**
* Retrieves all values for the given keys from the underlying data store.
* @param keys iterable of unique keys to fetch
* @return map of key-value pairs or an empty map if no keys are found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,apply,com.google.common.cache.ForwardingLoadingCache:apply(java.lang.Object),62,65,"/**
* Delegates application of given key to underlying delegate.
* @param key object key to be applied
* @return result of key application or null if not applicable
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,refresh,com.google.common.cache.ForwardingLoadingCache:refresh(java.lang.Object),67,70,"/**
* Refreshes data associated with the given key.
* @param key unique identifier or key to refresh data for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,delegate,com.google.common.cache.ForwardingCache:delegate(),41,42,"/**
* Returns an instance of the cache implementation.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,entrySet,com.google.common.collect.ImmutableMultiset:entrySet(),359,363,"/**
* Returns an immutable set of entries for this map.
* If the set is not yet created, it is lazily initialized by calling createEntrySet().
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getNextEvictable,com.google.common.cache.LocalCache$Segment:getNextEvictable(),2669,2678,"/**
* Retrieves the next evictable entry from the access queue.
* @return The first ReferenceEntry with a positive weight, or null if none found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache:copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",1709,1714,"/**
* Copies a reference entry from one segment to another.
* @param original the entry to copy
* @param newNext the next entry in the copied list
* @return the copied ReferenceEntry object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,put,"com.google.common.collect.Maps$AbstractFilteredMap:put(java.lang.Object,java.lang.Object)",2863,2867,"/**
* Adds a new entry to the map with the given key and value.
* @param key unique identifier
* @param value associated value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,putAll,com.google.common.collect.Maps$AbstractFilteredMap:putAll(java.util.Map),2869,2875,"/**
* Adds all entries from the provided map to this map.
* @param map the map containing entries to be added
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsKey,com.google.common.collect.Maps$AbstractFilteredMap:containsKey(java.lang.Object),2877,2880,"/**
* Checks if a map contains a key and applies a predicate to its value.
* @param key object to search for in the map
* @return true if the map contains the key and the predicate returns true, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$AbstractFilteredMap:get(java.lang.Object),2882,2886,"/**
* Retrieves cached value by key, applying filter if present.
* @param key unique identifier for cached entry
* @return Value object or null if not found or filtered out
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,clear,com.google.common.collect.StandardTable$Column$EntrySet:clear(),534,537,"/**
 * Clears all data from the table by removing rows where alwaysTrue() condition is met.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$1:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new reference entry.
* @param segment backing segment
* @param key unique key value
* @param hash computed hash code for the key
* @param next optional previous entry in the chain
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongAccessEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1011,1013,"/**
* Constructs a StrongAccessEntry with the given key and hash.
* @param key the entry's key
* @param hash the entry's hash code
* @param next the next entry in the map (can be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongAccessWriteEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1103,1105,"/**
* Initializes a new write entry with the specified key and hash.
* @param key key of the entry
* @param hash hash value for the entry
* @param next reference to the next entry in the map (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongWriteEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1057,1059,"/**
* Constructs a strong write entry with the given key and hash.
* @param key unique key
* @param hash entry's hash code
* @param next reference to the next entry in the map (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$5:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new reference entry with the given key and hash.
* @param segment the segment to store this entry in
* @param key the unique key for this entry
* @param hash the hash code of the key
* @param next the next entry in the chain, or null if this is the first entry
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakAccessEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1298,1300,"/**
* Constructs a weak access entry with the specified parameters.
* @param queue reference queue
* @param key unique key
* @param hash hash value
* @param next next entry in the map
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakAccessWriteEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1390,1393,"/**
* Constructs a weak access write entry.
* 
* @param queue reference queue for the entry
* @param key unique key associated with this entry
* @param hash hash value of the key
* @param next reference to the next entry in the map
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakWriteEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1344,1346,"/**
* Initializes a weak write entry with given parameters.
* @param queue reference queue
* @param key associated key
* @param hash key hash code
* @param next next entry in the map (nullable)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,notifyNewValue,com.google.common.cache.LocalCache$LoadingValueReference:notifyNewValue(java.lang.Object),3533,3545,"/**
* Handles notification of a new value, updating internal state and unblocking pending gets.
* @param newValue the new value to set or null if pending load was removed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,compute,"com.google.common.cache.LocalCache$LoadingValueReference:compute(java.lang.Object,java.util.function.BiFunction)",3577,3595,"/**
* Computes a value based on the provided key and function,
* handling concurrent updates with oldValue.
* @param key unique identifier
* @param function BiFunction to apply to key and previousValue
* @return computed V value or null if exception occurs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,run,com.google.common.util.concurrent.AbstractCatchingFuture:run(),77,147,"/**
* Runs the transformation and handles potential exceptions or cancellations.
* @param inputFuture input future to transform
* @param exceptionType expected exception type
* @param fallback fallback computation to run in case of unexpected exception
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,run,com.google.common.util.concurrent.AbstractTransformFuture:run(),67,173,"/**
* Executes the transformation of input to output using the provided function.
* @param inputFuture input future containing source data
* @param function transformation function to apply
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,get,com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:get(),346,349,"/**
* Retrieves the result of an asynchronous computation.
* @return computed value or null if not available
*/","* Returns the final value of the associated {@link ClosingFuture}, or throws an exception as
     * {@link Future#get()} would.
     *
     * <p>Because the asynchronous operation has already completed, this method is synchronous and
     * returns immediately.
     *
     * @throws CancellationException if the computation was cancelled
     * @throws ExecutionException if the computation threw an exception",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,run,com.google.common.util.concurrent.Futures$CallbackListener:run(),1111,1133,"/**
* Processes future result and notifies listener with success or failure.
* @param future Future object to process
* @param callback Listener to notify upon completion
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,runUninterruptiblyWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",95,99,"/**
* Runs a given Runnable with interruptible timeout.
* @param runnable task to be executed
* @param timeoutDuration duration of the timeout in specified unit
* @param timeoutUnit unit of time for timeout (e.g. seconds, milliseconds)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",135,156,"/**
* Executes a callable with a specified timeout and returns the result.
* @param callable function to be executed
* @param timeoutDuration time limit in given unit
* @param timeoutUnit time unit for timeout duration
* @throws TimeoutException if execution exceeds timeout
* @throws InterruptedException if interrupted during execution
* @throws ExecutionException if underlying task throws an exception
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,callUninterruptiblyWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",158,179,"/**
* Executes a task with a timeout, interrupting and throwing an exception if it times out.
* @param callable the task to execute
* @param timeoutDuration execution time limit in specified unit
* @param timeoutUnit unit of time for timeout duration
* @throws TimeoutException if task exceeds timeout
* @throws ExecutionException if task fails or returns a value that cannot be returned
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,runWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",181,199,"/**
* Executes a Runnable with a timeout, cancelling and throwing exception if timed out.
* @param runnable task to be executed
* @param timeoutDuration duration of the timeout in specified unit
* @param timeoutUnit time unit for timeout duration (e.g. seconds, milliseconds)
* @throws TimeoutException if task times out before completion
* @throws InterruptedException if execution is interrupted
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,runUninterruptiblyWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",201,219,"/**
* Runs the given task with a timeout, interrupting and throwing on expiration.
*@param runnable the task to run
*@param timeoutDuration duration of the timeout in specified unit
*@param timeoutUnit time unit for timeout duration
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,postWriteCleanup,com.google.common.cache.LocalCache$Segment:postWriteCleanup(),3459,3461,"/**
* Performs cleanup tasks after write operation.
*/",Performs routine cleanup following a write.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,referenceValue,"com.google.common.cache.LocalCache$Strength$2:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)",436,437,"/**
* Creates a weighted reference to a map value.
* @param segment the map segment
* @param entry the reference entry
* @param value the referenced value
* @param weight the value's weight in this reference
*/",Creates a reference for the given value according to this value strength.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$WeightedSoftValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1649,1653,"/**
* Creates a weighted soft reference for the given value.
* @param queue reference queue
* @param value object being referenced
* @param entry reference entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,referenceValue,"com.google.common.cache.LocalCache$Strength$1:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)",436,437,"/**
* Creates a weighted value reference.
* @param segment segment to add reference to
* @param entry entry containing the referenced value
* @param value referenced value
* @param weight weight of this reference
*/",Creates a reference for the given value according to this value strength.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,referenceValue,"com.google.common.cache.LocalCache$Strength$3:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)",436,437,"/**
* Creates a weighted reference to a mapped value.
* @param segment segment containing the reference
* @param entry reference entry for the key-value pair
* @param value associated value with the reference
* @param weight weight of the reference in the segment
*/",Creates a reference for the given value according to this value strength.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$WeightedWeakValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1627,1631,"/**
* Creates a weighted weak reference to the given value.
* @param queue reference queue
* @param value referenced object
* @param entry reference entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$AccessQueue:remove(java.lang.Object),3859,3870,"/**
* Removes the specified entry from access queue.
* @param o entry to remove
* @return true if removed successfully, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$AccessQueue:clear(),3895,3906,"/**
* Reverses access queue and nullifies entries, effectively clearing the cache.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyAccessEntry,"com.google.common.cache.LocalCache$EntryFactory:copyAccessEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",630,639,"/**
* Copies access entry from the original to a new entry.
* @param original original reference entry
* @param newEntry new reference entry to copy into
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyWriteEntry,"com.google.common.cache.LocalCache$EntryFactory:copyWriteEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",642,651,"/**
* Updates a write entry by copying its properties from another entry.
* @param original the original entry to copy from
* @param newEntry the entry to update
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$WriteQueue:remove(java.lang.Object),3719,3730,"/**
* Removes an entry from the write queue.
* @param o Entry to remove (must be a ReferenceEntry)
* @return true if removal was successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$WriteQueue:clear(),3755,3766,"/**
* Removes all entries from the write queue.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesWriteEntries,com.google.common.cache.LocalCache:usesWriteEntries(),368,370,"/**
* Checks if this object uses write entries.
* @return true if using write queue or records writes, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$Segment:<init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)",1964,1984,"/**
* Initializes a Segment instance with the given parameters.
* @param map underlying LocalCache instance
* @param initialCapacity initial capacity of the segment's table
* @param maxSegmentWeight maximum weight threshold for this segment
* @param statsCounter statistics counter to track segment usage
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordRead,"com.google.common.cache.LocalCache$Segment:recordRead(com.google.common.cache.ReferenceEntry,long)",2530,2535,"/**
* Records access time and adds reference entry to recency queue.
* @param entry ReferenceEntry object with updated access time
* @param now current timestamp in milliseconds
*/","* Records the relative order in which this read was performed by adding {@code entry} to the
     * recency queue. At write-time, or when the queue is full past the threshold, the queue will be
     * drained and the entries therein processed.
     *
     * <p>Note: locked reads should use {@link #recordLockedRead}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordLockedRead,"com.google.common.cache.LocalCache$Segment:recordLockedRead(com.google.common.cache.ReferenceEntry,long)",2544,2550,"/**
* Records a locked read operation on the specified map entry.
* @param entry the affected ReferenceEntry
* @param now the current timestamp
*/","* Updates the eviction metadata that {@code entry} was just read. This currently amounts to
     * adding {@code entry} to relevant eviction lists.
     *
     * <p>Note: this method should only be called under lock, as it directly manipulates the
     * eviction queues. Unlocked reads should use {@link #recordRead}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordWrite,"com.google.common.cache.LocalCache$Segment:recordWrite(com.google.common.cache.ReferenceEntry,int,long)",2556,2570,"/**
* Records a write operation for the given map entry.
* @param entry ReferenceEntry object
* @param weight write operation weight
* @param now current timestamp
*/","* Updates eviction metadata that {@code entry} was just written. This currently amounts to
     * adding {@code entry} to relevant eviction lists.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordsTime,com.google.common.cache.LocalCache:recordsTime(),364,366,"/**
* Checks if record time is enabled based on write and access settings.
* @return true if either write or access recording is enabled
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesAccessEntries,com.google.common.cache.LocalCache:usesAccessEntries(),372,374,"/**
* Determines whether access entries are used based on queue and record usage.
* @return true if access entries are used, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getLiveValue,"com.google.common.cache.LocalCache:getLiveValue(com.google.common.cache.ReferenceEntry,long)",1773,1786,"/**
* Retrieves the live value associated with a given reference entry.
* @param entry ReferenceEntry object
* @param now current timestamp
* @return non-null V object or null if expired or invalid entry
*/","* Gets the value from an entry. Returns null if the entry is invalid, partially-collected,
   * loading, or expired. Unlike {@link Segment#getLiveValue} this method does not attempt to clean
   * up stale entries. As such it should only be called outside a segment context, such as during
   * iteration.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache$AbstractCacheSet:size(),4538,4541,"/**
* Returns the number of elements in this cache.
* @return Size of the underlying local cache.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache$Values:size(),4590,4593,"/**
* Returns the number of elements in the local cache.
* @return element count
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,size,com.google.common.collect.HashMultiset:size(),185,188,"/**
* Returns the saturated cast of the collection's actual size.
* @return The number of elements in this collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,size,com.google.common.collect.LinkedHashMultiset:size(),185,188,"/**
* Returns the saturated integer representation of the collection's size.
* @return non-negative integer size or Integer.MAX_VALUE if too large
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,size,com.google.common.collect.Iterables:size(java.lang.Iterable),129,133,"/**
* Calculates the size of an iterable.
* @param iterable collection or iterator to measure
* @return number of elements in the iterable
*/",Returns the number of elements in {@code iterable}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap$EntrySet:size(),2771,2774,"/**
* Returns the number of elements in this map.
* @return The size of this map.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap$KeySet:size(),2683,2686,"/**
* Returns the number of elements in this map.
* @return size of the underlying collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap$Values:size(),2717,2720,"/**
* Returns the number of entries in this map.
* @return the total number of key-value pairs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardSize,com.google.common.collect.ForwardingMultiset:standardSize(),274,276,"/**
* Calculates the size of the multisets in this collection.
* @return The number of elements in the multisets
*/","* A sensible, albeit inefficient, definition of {@link #size} in terms of {@link #entrySet}. If
   * you override {@link #entrySet}, you may wish to override {@link #size} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,size,com.google.common.collect.Multisets$ViewMultiset:size(),1173,1176,"/**
* Returns the number of elements in this collection.
* @return Size of the collection, or 0 if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,size,com.google.common.collect.Lists$OnePlusArrayList:size(),348,351,"/**
* Calculates the total element count by adding one to the length of the rest array.
* @return Total element count (rest.length + 1)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,size,com.google.common.collect.Lists$TwoPlusArrayList:size(),379,382,"/**
* Returns total size by adding length of rest array and a fixed offset.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractBaseGraph:degree(java.lang.Object),136,145,"/**
* Calculates the degree of a node in the graph.
* @param node Node object
* @return Degree value (number of edges incident on the node)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,toByteArrayInternal,"com.google.common.io.ByteStreams:toByteArrayInternal(java.io.InputStream,java.util.Queue,int)",175,209,"/**
* Reads input into a sequence of buffers and returns as a byte array.
* @param in input stream
* @param bufs queue of buffers
* @param totalLen current total length of data read
* @return combined byte array or throws exception if too large
*/","* Returns a byte array containing the bytes from the buffers already in {@code bufs} (which have
   * a total combined length of {@code totalLen} bytes) followed by all bytes remaining in the given
   * input stream.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedPow,"com.google.common.math.IntMath:saturatedPow(int,int)",571,616,"/**
* Computes b raised to the power of k with saturation.
* @param b base value
* @param k exponent
* @return result or saturated maximum/min value if overflow occurs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,setDelegates,"com.google.common.collect.AbstractBiMap:setDelegates(java.util.Map,java.util.Map)",97,105,"/**
* Initializes this object with a bijective mapping from keys to values and back.
* @param forward key-value mapping
* @param backward value-key mapping, must be the inverse of forward
*/","* Specifies the delegate maps going in each direction. Called by the constructor and by
   * subclasses during deserialization.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,all,com.google.common.collect.GeneralRange:all(java.util.Comparator),60,62,"/**
* Creates an empty range with a given comparator.
* @param comparator comparison function for the range
*/",Returns the whole range relative to the specified comparator.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,downTo,"com.google.common.collect.GeneralRange:downTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)",68,71,"/**
* Creates a GeneralRange object with the specified endpoint and direction.
* @param comparator comparison function for elements
* @param endpoint the end point of the range (inclusive)
* @param boundType specifies whether the range is inclusive or exclusive at the endpoint
*/","* Returns everything above the endpoint relative to the specified comparator, with the specified
   * endpoint behavior.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,upTo,"com.google.common.collect.GeneralRange:upTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)",77,80,"/**
* Creates a GeneralRange instance for values up to the specified endpoint.
* @param comparator comparison function
* @param endpoint target value
* @param boundType type of boundary (e.g. inclusive, exclusive)
*/","* Returns everything below the endpoint relative to the specified comparator, with the specified
   * endpoint behavior.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,range,"com.google.common.collect.GeneralRange:range(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",86,93,"/**
* Creates a GeneralRange instance with specified bounds and comparator.
* @param comparator comparison function for range values
* @param lower lower bound value
* @param lowerType type of the lower bound (inclusive or exclusive)
* @param upper upper bound value
* @param upperType type of the upper bound (inclusive or exclusive)
*/","* Returns everything between the endpoints relative to the specified comparator, with the
   * specified endpoint behavior.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,intersect,com.google.common.collect.GeneralRange:intersect(com.google.common.collect.GeneralRange),193,239,"/**
* Computes the intersection of two ranges.
* @param other The range to intersect with
* @return A new range representing their intersection or null if empty
*/","* Returns the intersection of the two ranges, or an empty range if their intersection is empty.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$TransformedEntriesMap:get(java.lang.Object),2157,2160,"/**
* Retrieves value associated with given key or returns null if not found.
* @param key unique identifier (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,getElement,com.google.common.collect.TreeMultiset$1:getElement(),1031,1035,"/**
* Retrieves an element from the collection.
* @return The element as type T or null if not present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,count,"com.google.common.collect.TreeMultiset$AvlNode:count(java.util.Comparator,java.lang.Object)",644,653,"/**
* Counts elements in the tree using a specified comparator.
* @param comparator comparison function for E
* @param e element to compare with tree elements
* @return number of matching elements in the tree
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,ceiling,"com.google.common.collect.TreeMultiset$AvlNode:ceiling(java.util.Comparator,java.lang.Object)",1008,1018,"/**
* Finds the smallest element greater than or equal to 'e' in this AvlNode.
* @param comparator comparison function for elements of type E
* @param e target value to find ceiling for
* @return the smallest greater element (or null if not found)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,floor,"com.google.common.collect.TreeMultiset$AvlNode:floor(java.util.Comparator,java.lang.Object)",1020,1029,"/**
* Finds the closest element in the tree to the given value.
* @param comparator comparison function
* @param e target element value
* @return matching AvlNode or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putInBothMaps,"com.google.common.collect.AbstractBiMap:putInBothMaps(java.lang.Object,java.lang.Object,boolean)",136,152,"/**
* Updates both maps with a value for the given key.
* @param key unique identifier
* @param value new value to store
* @param force whether to overwrite existing value or not
* @return old value if present, null otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,remove,com.google.common.collect.AbstractBiMap:remove(java.lang.Object),166,170,"/**
* Removes an entry from both maps if it exists, returning its value.
* @param key object to be removed (or null for no change)
* @return associated value or null if not present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,com.google.common.collect.Collections2$PermutationIterator:<init>(java.util.List),636,644,"/**
* Initializes permutation iterator with given list of elements.
* @param list input list to generate permutations from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConsumingQueueIterator.java,<init>,com.google.common.collect.ConsumingQueueIterator:<init>(java.util.Queue),31,33,"/**
* Initializes iterator with a Queue instance.
* @param queue non-null queue to iterate over
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,<init>,com.google.common.graph.EndpointPairIterator:<init>(com.google.common.graph.BaseGraph),46,49,"/**
* Initializes iterator over endpoint pairs in the graph.
* @param graph BaseGraph instance to iterate over
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,next,com.google.common.collect.AbstractIterator:next(),149,161,"/**
* Retrieves the next element from the iteration sequence.
* @return The next element or throws NoSuchElementException if exhausted
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,peek,com.google.common.collect.AbstractIterator:peek(),170,177,"/**
* Retrieves the next element without removing it from the iteration.
* @return The next element, or null if no elements are present
*/","* Returns the next element in the iteration without advancing the iteration, according to the
   * contract of {@link PeekingIterator#peek()}.
   *
   * <p>Implementations of {@code AbstractIterator} that wish to expose this functionality should
   * implement {@code PeekingIterator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,spliterator,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:spliterator(),1429,1432,"/**
* Maps entry set spliterator of submap to a new spliterator with wrapped entries.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,next,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:next(),1463,1468,"/**
* Advances the iterator and returns its current entry.
* @return Entry object containing key-value pair or null if exhausted
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lowerEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lowerEntry(java.lang.Object),1551,1555,"/**
* Retrieves the lowest mapping for a given key.
* @param key unique key identifier
* @return Entry object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lowerKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lowerKey(java.lang.Object),1557,1560,"/**
* Returns the lowest key in the map that is greater than or equal to the given key. 
* @param key the reference key for which to find a lower bound
* @return the lower bound key, or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floorEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:floorEntry(java.lang.Object),1562,1566,"/**
* Fetches floor entry from the sorted map by given key.
* @param key unique key to search for
* @return Entry object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floorKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:floorKey(java.lang.Object),1568,1571,"/**
* Returns the greatest key less than or equal to the specified key. 
* @param key target key value
* @return greatest key less than or equal to key, or null if not found",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceilingEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:ceilingEntry(java.lang.Object),1573,1577,"/**
* Retrieves the highest mapping with a key less than or equal to the specified key.
* @param key target key
* @return Entry containing key-value pair, or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceilingKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:ceilingKey(java.lang.Object),1579,1582,"/**
* Returns the smallest key in this map that is not less than the given key.
* @param key the key to find a ceiling for
* @return the ceiling key, or null if no such key exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higherEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:higherEntry(java.lang.Object),1584,1588,"/**
* Retrieves the highest-mapped entry for a given key.
* @param key the search key
* @return the highest-mapped entry or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higherKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:higherKey(java.lang.Object),1590,1593,"/**
* Retrieves the highest key in the map greater than the given key.
* @param key input key to find a higher key for
* @return higher key or null if no such key exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,firstEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:firstEntry(),1595,1599,"/**
* Returns the first entry in the sorted map.
* @return First Entry object or null if map is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lastEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lastEntry(),1601,1605,"/**
* Returns the last entry in the sorted map. 
* @return Last Entry object or null if map is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:descendingMap(),1629,1632,"/**
* Returns a descending map view of this map.
* @return A NavigableMap containing the same entries as this map in reverse order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createKeySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:createKeySet(),1639,1642,"/**
* Creates a navigable key set from the underlying map.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",1660,1667,"/**
* Returns a submap of the sorted map, including keys within the specified range.
* @param fromKey start key (inclusive if fromInclusive is true)
* @param fromInclusive whether to include the start key
* @param toKey end key (inclusive if toInclusive is true)
* @param toInclusive whether to include the end key
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:headMap(java.lang.Object,boolean)",1674,1677,"/**
* Returns a navigable map containing entries up to (but not necessarily including)
* the specified key. If inclusive is true, includes the entry with the specified key.
* @param toKey upper bound of the key range
* @param inclusive whether to include the entry with the specified key
* @return NavigableMap object or null if empty",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:tailMap(java.lang.Object,boolean)",1684,1688,"/**
* Returns a navigable map of key-value pairs starting from the specified key.
* @param fromKey starting key
* @param inclusive whether to include the start key in the result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,keySet,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:keySet(),1528,1532,"/**
* Returns a sorted set of keys, lazily creating it if not already initialized.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollFirstEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollFirstEntry(),1607,1610,"/**
* Retrieves and removes the first entry from the map.
* @return Entry object or null if map is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeAll,com.google.common.collect.AbstractMapBasedMultimap:removeAll(java.lang.Object),254,268,"/**
* Removes all values associated with a given key from the map.
* @param key unique identifier to remove
* @return Collection of removed values or empty unmodifiable collection if not found
*/","* {@inheritDoc}
   *
   * <p>The returned collection is immutable.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lower,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:lower(java.lang.Object),1070,1073,"/**
* Finds and returns the lowest key in the map that is greater than or equal to the given value.
* @param k the key to search for
* @return the lowest matching key, or null if not found",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floor,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:floor(java.lang.Object),1075,1078,"/**
* Retrieves the nearest key in the sorted map that is less than or equal to the given value. 
* @param k the input value 
* @return The nearest key, or null if no such key exists 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceiling,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:ceiling(java.lang.Object),1080,1083,"/**
* Returns the smallest key in the map that is greater than or equal to the given value.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higher,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:higher(java.lang.Object),1085,1088,"/**
* Finds the key greater than the given value in a sorted map.
* @param k input key to compare with map values
* @return next key or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingSet,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:descendingSet(),1100,1103,"/**
* Returns a descending set of keys.
* @return NavigableSet containing keys in descending order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:headSet(java.lang.Object,boolean)",1115,1118,"/**
* Returns a navigable set of keys in the map that are less than or equal to the given element.
* @param toElement key value boundary
* @param inclusive true if boundary is included, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",1126,1134,"/**
* Returns a subset of keys within the specified range.
* @param fromElement start key (inclusive if true)
* @param fromInclusive whether to include start key
* @param toElement end key (inclusive if true)
* @param toInclusive whether to include end key
* @return NavigableSet containing subset of keys",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:tailSet(java.lang.Object,boolean)",1141,1144,"/**
* Returns a navigable set of keys greater than or equal to the specified element.
* @param fromElement key value (inclusive if true)
* @param inclusive whether to include the fromElement in the result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,validateIterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:validateIterator(),464,469,"/**
* Validates iterator state and throws exception on concurrent modification. 
* @throws ConcurrentModificationException if iterator has been modified concurrently
*/","* If the delegate changed since the iterator was created, the iterator is no longer valid.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,size,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:size(),398,402,"/**
* Returns the number of elements in this collection.
* @return The number of elements in this collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,equals,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:equals(java.lang.Object),404,418,"/**
* Compares Multimap to another object for equality.
* @param object the object to compare with
* @return true if equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,hashCode,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:hashCode(),420,424,"/**
* Computes hash code for this object.
* @return Hash code value based on underlying data.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,toString,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:toString(),426,430,"/**
* Returns a string representation of this object.
* The actual string is generated by the underlying delegate.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,iterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:iterator(),436,440,"/**
* Returns an iterator over the elements in this collection.
* The iterator is refreshed if the underlying data is empty.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,spliterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:spliterator(),442,446,"/**
* Returns a Spliterator of elements in this collection.
* @return Spliterator that splits the collection into smaller sub-collections.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,add,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:add(java.lang.Object),497,509,"/**
* Adds a new value to the collection.
* @param value element to be added
* @return true if the collection was modified, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,contains,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:contains(java.lang.Object),534,538,"/**
* Checks if the collection contains the specified object.
* @param o the object to search for
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,containsAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:containsAll(java.util.Collection),540,544,"/**
* Checks if this collection contains all elements from another collection.
* @param c the collection to check against
* @return true if all elements are contained, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:remove(java.lang.Object),557,566,"/**
* Removes an object from the collection, updating size and refreshing if necessary.
* @param o object to be removed
* @return true if removal was successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lower,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:lower(java.lang.Object),702,705,"/**
* Retrieves the smallest element from the collection that is greater than or equal to the given value. 
* @param v the value to find the matching element for
* @return the matching element, or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floor,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:floor(java.lang.Object),707,710,"/**
* Returns the greatest value less than or equal to the given value.
* @param v input value to find floor for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceiling,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:ceiling(java.lang.Object),712,715,"/**
* Returns the highest element in the set that is less than or equal to the given value.
* @param v the input value
* @return the highest matching element, or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higher,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:higher(java.lang.Object),717,720,"/**
* Finds the successor element in the sorted set.
* @param v target value to find successor for
* @return next element or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:descendingSet(),736,739,"/**
* Returns a set of elements in reverse order.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingIterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:descendingIterator(),741,744,"/**
* Returns an iterator over elements in descending order.
* @return Iterator over elements in reverse sorted order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",746,754,"/**
* Returns a subset of the set based on the specified range.
* @param fromElement starting element (inclusive/exclusive: @param fromInclusive)
* @param fromInclusive whether start is inclusive
* @param toElement ending element (inclusive/exclusive: @param toInclusive)
* @param toInclusive whether end is inclusive
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:headSet(java.lang.Object,boolean)",756,759,"/**
* Returns a set view of elements up to but not including the specified element.
* @param toElement element to include in the head set
* @param inclusive whether to include the toElement itself
* @return NavigableSet of elements or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:tailSet(java.lang.Object,boolean)",761,764,"/**
* Returns a navigable set containing all elements greater than or equal to the specified element.
* @param fromElement element to start from
* @param inclusive whether to include the element itself in the result
* @return NavigableSet of V objects or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,put,"com.google.common.collect.AbstractListMultimap:put(java.lang.Object,java.lang.Object)",118,122,"/**
* Calls superclass put operation to store a new entry.
* @param key unique identifier for the stored object
* @param value associated data for the entry
*/","* Stores a key-value pair in the multimap.
   *
   * @param key key to store in the multimap
   * @param value value to store in the multimap
   * @return {@code true} always",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,put,"com.google.common.collect.AbstractSetMultimap:put(java.lang.Object,java.lang.Object)",139,143,"/**
* Inserts or updates a mapping from the specified key to the specified value.
* @param key unique identifier for the entry
* @param value associated data for the entry
*/","* Stores a key-value pair in the multimap.
   *
   * @param key key to store in the multimap
   * @param value value to store in the multimap
   * @return {@code true} if the method increased the size of the multimap, or {@code false} if the
   *     multimap already contained the key-value pair",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,get,com.google.common.collect.AbstractListMultimap:get(java.lang.Object),80,83,"/**
* Retrieves a list of objects by key.
* @param key unique identifier
* @return List of V objects or null if not found
*/","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,get,com.google.common.collect.AbstractSetMultimap:get(java.lang.Object),78,81,"/**
* Retrieves a set of values associated with the given key.
* @param key unique identifier or key
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,containsValue,com.google.common.collect.LinkedListMultimap:containsValue(java.lang.Object),590,593,"/**
* Checks if a specified value exists in the collection.
* @param value object to search for (null allowed)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,entries,com.google.common.collect.AbstractSetMultimap:entries(),89,92,"/**
* Returns a set of map entries.
* @return Set of key-value pairs or null if not supported by map implementation
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,iterator,com.google.common.collect.AbstractMultimap$Values:iterator(),192,195,"/**
* Returns an iterator over the values in this map.
* @return iterator over map entries (key-value pairs) 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,valueSpliterator,com.google.common.collect.AbstractMultimap:valueSpliterator(),222,224,"/**
* Returns a spliterator over the values in this collection.
* @return Spliterator object to iterate over collection values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,writeObject,com.google.common.collect.LinkedListMultimap:writeObject(java.io.ObjectOutputStream),843,852,"/**
* Serializes the map's state to the given ObjectOutputStream.
* @throws IOException if serialization fails
*/","* @serialData the number of distinct keys, and then for each distinct key: the first key, the
   *     number of values for that key, and the key's values, followed by successive keys and values
   *     from the entries() ordering",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,setCount,"com.google.common.collect.AbstractMapBasedMultiset:setCount(java.lang.Object,int)",314,335,"/**
* Sets the count for a given element.
* @param element element to update
* @param count new count value
* @return previous count value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,clear,com.google.common.collect.HashMultiset:clear(),169,176,"/**
* Resets all counts to zero and clears internal data structure.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,clear,com.google.common.collect.LinkedHashMultiset:clear(),169,176,"/**
* Resets counter state to initial values.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,toStringImpl,com.google.common.collect.Collections2:toStringImpl(java.util.Collection),333,348,"/**
* Converts a collection to a human-readable string representation.
* @param collection the collection to convert
*/",An implementation of {@link Collection#toString()}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toStringImpl,com.google.common.collect.Maps:toStringImpl(java.util.Map),3893,3904,"/**
* Converts a Map to a formatted string representation.
* @param map input map
* @return string in the format ""{key=value, ...}""
*/",An implementation of {@link Map#toString}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayListWithExpectedSize,com.google.common.collect.Lists:newArrayListWithExpectedSize(int),200,204,"/**
* Creates an ArrayList with the specified estimated size.
* @param estimatedSize expected number of elements
*/","* Creates an {@code ArrayList} instance to hold {@code estimatedSize} elements, <i>plus</i> an
   * unspecified amount of padding; you almost certainly mean to call {@link
   * #newArrayListWithCapacity} (see that method for further advice on usage).
   *
   * <p><b>Note:</b> This method will soon be deprecated. Even in the rare case that you do want
   * some amount of padding, it's best if you choose your desired amount explicitly.
   *
   * @param estimatedSize an estimate of the eventual {@link List#size()} of the new list
   * @return a new, empty {@code ArrayList}, sized appropriately to hold the estimated number of
   *     elements
   * @throws IllegalArgumentException if {@code estimatedSize} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,combine,com.google.common.util.concurrent.CollectionFuture$ListFuture:combine(java.util.List),94,101,"/**
* Unwraps and combines a list of Present objects into a list of values.
* @param values List of Present objects to combine
* @return List of combined values or null if any present is null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,newHashMapWithExpectedSize,com.google.common.collect.Maps:newHashMapWithExpectedSize(int),276,280,"/**
* Creates a new HashMap with an initial capacity based on the expected size.
* @param expectedSize estimated number of key-value pairs
*/","* Creates a {@code HashMap} instance, with a high enough ""initial capacity"" that it <i>should</i>
   * hold {@code expectedSize} elements without growth. This behavior cannot be broadly guaranteed,
   * but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method
   * isn't inadvertently <i>oversizing</i> the returned map.
   *
   * @param expectedSize the number of entries you expect to add to the returned map
   * @return a new, empty {@code HashMap} with enough capacity to hold {@code expectedSize} entries
   *     without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,newLinkedHashMapWithExpectedSize,com.google.common.collect.Maps:newLinkedHashMapWithExpectedSize(int),359,363,"/**
* Creates a linked hash map with an expected size.
* @param expectedSize the anticipated number of key-value pairs
*/","* Creates a {@code LinkedHashMap} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be
   * broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed
   * that the method isn't inadvertently <i>oversizing</i> the returned map.
   *
   * @param expectedSize the number of entries you expect to add to the returned map
   * @return a new, empty {@code LinkedHashMap} with enough capacity to hold {@code expectedSize}
   *     entries without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newHashSetWithExpectedSize,com.google.common.collect.Sets:newHashSetWithExpectedSize(int),263,267,"/**
* Creates a new HashSet with the specified expected size.
* @param expectedSize initial capacity and load factor for the set
*/","* Returns a new hash set using the smallest initial table size that can hold {@code expectedSize}
   * elements without resizing. Note that this is not what {@link HashSet#HashSet(int)} does, but it
   * is what most users want and expect it to do.
   *
   * <p>This behavior can't be broadly guaranteed, but has been tested with OpenJDK 1.7 and 1.8.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty hash set with enough capacity to hold {@code expectedSize} elements
   *     without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newLinkedHashSetWithExpectedSize,com.google.common.collect.Sets:newLinkedHashSetWithExpectedSize(int),360,364,"/**
* Creates a LinkedHashSet with the specified expected size.
* @param expectedSize estimated number of elements
*/","* Creates a {@code LinkedHashSet} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be
   * broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed
   * that the method isn't inadvertently <i>oversizing</i> the returned set.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code LinkedHashSet} with enough capacity to hold {@code expectedSize}
   *     elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,arrayListValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:arrayListValues(),285,287,"/**
* Returns an ArrayListMultimapBuilder with default expected values per key.",Uses an {@link ArrayList} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:hashSetValues(),327,329,"/**
* Returns a multimap builder with hash set values.
* @return MultimapBuilder instance
*/",Uses a hash-based {@code Set} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedHashSetValues(),350,352,"/**
* Returns a multimap builder with linked hash sets as values.
*/",Uses an insertion-ordered hash-based {@code Set} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashKeys,com.google.common.collect.MultimapBuilder:hashKeys(),73,75,"/**
* Returns a new MultimapBuilder instance with hashed keys.
*/",Uses a hash table to map keys to value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashKeys,com.google.common.collect.MultimapBuilder:linkedHashKeys(),101,103,"/**
* Creates a MultimapBuilder with linked hash keys.
* @return MultimapBuilder instance with linked hash keys
*/","* Uses a hash table to map keys to value collections.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in the order that they were first added to the
   * multimap, save that if all values associated with a key are removed and then the key is added
   * back into the multimap, that key will come last in the key iteration order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,immutableEntry,"com.google.common.collect.Multisets:immutableEntry(java.lang.Object,int)",258,261,"/**
* Creates an immutable multiset entry with a specified count.
* @param e element to be included in the entry
* @param n number of occurrences of the element
*/","* Returns an immutable multiset entry with the specified element and count. The entry will be
   * serializable if {@code e} is.
   *
   * @param e the element to be associated with the returned entry
   * @param n the count to be associated with the returned entry
   * @throws IllegalArgumentException if {@code n} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,<init>,"com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry:<init>(java.lang.Object,int,com.google.common.collect.Multisets$ImmutableEntry)",142,145,"/**
* Initializes a non-terminal entry with the given element and count.
* @param element the element of this entry
* @param count   the count of elements in this bucket
* @param nextInBucket  the next entry in the same bucket
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,setCount,"com.google.common.collect.AbstractMultiset:setCount(java.lang.Object,int)",85,89,"/**
* Sets the count of a given element.
* @param element element to update count for
* @param count new count value
* @return previous count value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardSetCount,"com.google.common.collect.ForwardingMultiset:standardSetCount(java.lang.Object,int)",215,217,"/**
* Calculates set count based on the given element and count.
* @param element the element to consider
* @param count the initial count value
* @return updated set count value
*/","* A sensible definition of {@link #setCount(Object, int)} in terms of {@link #count(Object)},
   * {@link #add(Object, int)}, and {@link #remove(Object, int)}. {@link #entrySet()}. If you
   * override any of these methods, you may wish to override {@link #setCount(Object, int)} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,setCount,"com.google.common.collect.AbstractMultiset:setCount(java.lang.Object,int,int)",91,95,"/**
* Sets the count of elements in this collection.
* @param element element to be counted (currently ignored)
* @param oldCount current count
* @param newCount new count (may differ from actual change due to internal implementation)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardSetCount,"com.google.common.collect.ForwardingMultiset:standardSetCount(java.lang.Object,int,int)",226,228,"/**
* Updates set count by adding or removing an element.
* @param element the element to add or remove
* @param oldCount current set size
* @param newCount updated set size after modification
*/","* A sensible definition of {@link #setCount(Object, int, int)} in terms of {@link #count(Object)}
   * and {@link #setCount(Object, int)}. If you override either of these methods, you may wish to
   * override {@link #setCount(Object, int, int)} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,equals,com.google.common.collect.ImmutableSet:equals(java.lang.Object),284,296,"/**
* Compares this ImmutableSet for equality with another object.
* @param object the object to compare with
* @return true if equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,hashCode,com.google.common.collect.Sets$PowerSet:hashCode(),1768,1776,"/**
* Calculates the hash code based on input set elements and their occurrences.
* @return Hash code value representing this collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,contains,com.google.common.collect.AbstractMultimap$Values:contains(java.lang.Object),207,210,"/**
* Checks if multimap contains specified object.
* @param o object to search for (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,containsEntry,"com.google.common.collect.LinkedListMultimap:containsEntry(java.lang.Object,java.lang.Object)",59,63,"/**
* Checks if map entry exists with specified key and value.
* @param key the key to search for
* @param value the value to search for
* @return true if entry found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,remove,"com.google.common.collect.LinkedListMultimap:remove(java.lang.Object,java.lang.Object)",65,70,"/**
* Removes a specified value from the map associated with the given key.
* @param key unique key identifier
* @param value value to be removed
* @return true if removal was successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,hashCode,com.google.common.collect.LinkedListMultimap:hashCode(),251,254,"/**
* Calculates hash code based on internal map state.
* @return unique integer representing this object's state
*/","* Returns the hash code for this multimap.
   *
   * <p>The hash code of a multimap is defined as the hash code of the map view, as returned by
   * {@link Multimap#asMap}.
   *
   * @see Map#hashCode",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,toString,com.google.common.collect.LinkedListMultimap:toString(),262,265,"/**
 * Returns a string representation of this object's properties.
 */","* Returns a string representation of the multimap, generated by calling {@code toString} on the
   * map returned by {@link Multimap#asMap}.
   *
   * @return a string representation of the multimap",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,com.google.common.collect.LinkedListMultimap:putAll(com.google.common.collect.Multimap),93,101,"/**
* Merges all entries from a Multimap into this map.
* @param multimap source multimap to copy entries from
* @return true if any new mappings were added, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,equals,com.google.common.collect.LinkedListMultimap:equals(java.lang.Object),238,241,"/**
* Compares this object with another object for equality.
* @param object object to compare with (null allowed)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,elementSet,com.google.common.collect.AbstractSortedMultiset:elementSet(),51,54,"/**
* Returns a navigable set view of this collection's elements.
* @return A navigable set containing all elements in this collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,elementSet,com.google.common.collect.ConcurrentHashMultiset:elementSet(),130,137,"/**
* Returns a set of elements in this collection, lazily initializing it if necessary.
* @return Set of elements or null if not initialized
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,elementSet,com.google.common.collect.EnumMultiset:elementSet(),130,137,"/**
* Returns a set of elements in this collection, lazily initializing it on first access.
* @return Set containing all elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,entrySet,com.google.common.collect.AbstractMapBasedMultiset:entrySet(),83,86,"/**
* Returns a set of multiset entries.
*@return Set of Multiset.Entry objects.","* {@inheritDoc}
   *
   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the
   * current count of that element in the multiset, as opposed to the count at the time the entry
   * was retrieved.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,isEmpty,com.google.common.collect.AbstractMultiset:isEmpty(),49,52,"/**
* Checks if this map is empty.
* @return true if no key-value pairs exist, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,hashCode,com.google.common.collect.AbstractMultiset:hashCode(),217,220,"/**
* Computes hash code based on the set of key-value pairs in this map.
* @return The hash code as an integer
*/","* {@inheritDoc}
   *
   * <p>This implementation returns the hash code of {@link Multiset#entrySet()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,toString,com.google.common.collect.AbstractMultiset:toString(),228,231,"/**
* Returns a string representation of this map.
* @return A string containing key-value pairs in the format {key=value, ...} or an empty string if empty.","* {@inheritDoc}
   *
   * <p>This implementation returns the result of invoking {@code toString} on {@link
   * Multiset#entrySet()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,entrySet,com.google.common.collect.ConcurrentHashMultiset:entrySet(),164,171,"/**
* Returns a set of key-value entries for this map.
* @return Set of Entry objects or null on first access
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,entrySet,com.google.common.collect.EnumMultiset:entrySet(),164,171,"/**
* Lazily initializes and returns a set of map entries.
* @return Set of Entry objects or null if not initialized
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,firstKey,com.google.common.collect.AbstractNavigableMap:firstKey(),61,70,"/**
* Retrieves the first key in this map.
* @return The first key or throws a NoSuchElementException if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,lastKey,com.google.common.collect.AbstractNavigableMap:lastKey(),72,81,"/**
* Retrieves the key of the last entry in the map.
* @return Last key or throws NoSuchElementException if map is empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFirstEntry,com.google.common.collect.ForwardingNavigableMap:standardFirstEntry(),188,190,"/**
* Retrieves the first entry from this map's entry set.
* @return First Entry object or null if empty
*/","* A sensible definition of {@link #firstEntry} in terms of the {@code iterator()} of {@link
   * #entrySet}. If you override {@code entrySet}, you may wish to override {@code firstEntry} to
   * forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,ceiling,com.google.common.collect.ImmutableSortedSet:ceiling(java.lang.Object),738,741,"/**
* Returns the smallest element in the tail set of the given value.
* @param e the input value
* @return the ceiling value or null if not found
*/",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,higher,com.google.common.collect.ImmutableSortedSet:higher(java.lang.Object),746,750,"/**
* Retrieves the next (higher) element in this set relative to the given element.
* @param e the reference element
* @return the next higher element or null if not found
*/",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,create,com.google.common.collect.TreeRangeSet:create(),50,52,"/**
* Creates an empty {@link TreeRangeSet} instance with a custom comparator.
*/",Creates an empty {@code TreeRangeSet} instance.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,contains,com.google.common.collect.ImmutableRangeSet$AsSet:contains(java.lang.Object),664,676,"/**
* Checks if the object passed is contained within this range set.
* @param o the object to check, or null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,contains,com.google.common.collect.TreeRangeSet$Complement:contains(java.lang.Comparable),30,33,"/**
* Checks if a given collection contains a specified value.
* @param value element to search for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,contains,com.google.common.collect.TreeRangeSet$SubRangeSet:contains(java.lang.Comparable),407,411,"/**
* Checks if a given value is within the bounds of the interval.
* @param value the value to check
*/","* Returns {@code true} if {@code value} is within the bounds of this range. For example, on the
   * range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)}
   * returns {@code false}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,clear,com.google.common.collect.ImmutableRangeSet:clear(),53,56,"/**
 * Removes all elements from the collection.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,clear,com.google.common.collect.TreeRangeSet:clear(),53,56,"/**
 * Completely removes all elements from this collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:<init>(java.util.NavigableMap,com.google.common.collect.Range)",465,470,"/**
* Initializes ComplementRangesByLowerBound object, storing ranges and window.
* @param positiveRangesByLowerBound map of ranges keyed by lower bound
* @param window range for which to compute complement
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:<init>(com.google.common.collect.Range,com.google.common.collect.Range,java.util.NavigableMap)",694,702,"/**
* Initializes SubRangeSet with ranges by lower bound.
* @param lowerBoundWindow window for lower bound filtering
* @param restriction range restriction for included ranges
* @param rangesByLowerBound map of ranges keyed by lower bound cut
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedKeySortedSetMultimap.java,asMap,com.google.common.collect.AbstractSortedKeySortedSetMultimap:asMap(),43,46,"/**
* Returns this sorted multimap as a sorted map.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedIterables.java,hasSameComparator,"com.google.common.collect.SortedIterables:hasSameComparator(java.util.Comparator,java.lang.Iterable)",37,49,"/**
* Checks if the provided comparator is the same as the one used to sort the given iterable.
* @param comparator the comparator to compare
* @param elements the iterable to check
* @return true if comparators are equal, false otherwise
*/","* Returns {@code true} if {@code elements} is a sorted collection using an ordering equivalent to
   * {@code comparator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,descendingMultiset,com.google.common.collect.TreeMultiset:descendingMultiset(),122,126,"/**
* Returns a sorted multiset in descending order.
* @return the cached or created SortedMultiset object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsValue,com.google.common.collect.HashBasedTable:containsValue(java.lang.Object),109,112,"/**
* Checks if a map contains the specified value.
* @param value object to search for (null returns false)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,putAll,com.google.common.collect.ArrayTable:putAll(com.google.common.collect.Table),484,487,"/**
* Inserts all data from another table into this one.
* @param table Table to copy data from
*/","* {@inheritDoc}
   *
   * <p>If {@code table} is an {@code ArrayTable}, its null values will be stored in this table,
   * possibly replacing values that were previously non-null.
   *
   * @throws NullPointerException if {@code table} has a null key
   * @throws IllegalArgumentException if any of the provided table's row keys or column keys is not
   *     in {@link #rowKeySet()} or {@link #columnKeySet()}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,clear,com.google.common.collect.AbstractTable:clear(),90,93,"/**
* Clears all cells in the set.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,valuesIterator,com.google.common.collect.AbstractTable:valuesIterator(),191,199,"/**
* Returns an iterator over map values.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,hashCode,com.google.common.collect.AbstractTable:hashCode(),238,241,"/**
* Calculates hash code based on underlying cell set.
* @return unique integer hash value of this object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,cellSet,com.google.common.collect.ArrayTable:cellSet(),544,547,"/**
* Returns an unmodifiable set of cells in this data structure.
* @return Unmodifiable set of Cell objects or empty set if none exist.","* Returns an unmodifiable set of all row key / column key / value triplets. Changes to the table
   * will update the returned set.
   *
   * <p>The returned set's iterator traverses the mappings with the first row key, the mappings with
   * the second row key, and so on.
   *
   * <p>The value in the returned cells may change if the table subsequently changes.
   *
   * @return set of table cells consisting of row key / column key / value triplets",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,cellSet,com.google.common.collect.ImmutableTable:cellSet(),300,303,"/**
* Returns an immutable set of table cells.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,cellSet,com.google.common.collect.StandardTable:cellSet(),235,238,"/**
* Returns the set of cells in this data structure.
* @return Unmodifiable set of Cell objects.","* {@inheritDoc}
   *
   * <p>The set's iterator traverses the mappings for the first row, the mappings for the second
   * row, and so on.
   *
   * <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the
   * time the cell is returned by a method call to the set or its iterator.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,values,com.google.common.collect.ArrayTable:values(),786,789,"/**
 * Returns an unmodifiable Collection of all values in this map.
 */","* Returns an unmodifiable collection of all values, which may contain duplicates. Changes to the
   * table will update the returned collection.
   *
   * <p>The returned collection's iterator traverses the values of the first row key, the values of
   * the second row key, and so on.
   *
   * @return collection of values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,values,com.google.common.collect.ImmutableTable:values(),318,321,"/**
* Returns an immutable collection of values.
* @return unordered collection of values or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,values,com.google.common.collect.StandardTable:values(),795,798,"/**
* Returns a collection of values associated with this map.
* @return Unmodifiable collection of values or null if not found
*/","* {@inheritDoc}
   *
   * <p>The collection's iterator traverses the values for the first row, the values for the second
   * row, and so on.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,equals,com.google.common.collect.ArrayTable:equals(java.lang.Object),233,236,"/**
* Compares this Table instance with another object.
* @param obj The object to compare with
* @return True if objects are equal; false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,equals,com.google.common.collect.ImmutableTable:equals(java.lang.Object),233,236,"/**
* Compares this table with another object for equality.
* @param obj other object to compare with
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,onResultOf,com.google.common.collect.Ordering:onResultOf(com.google.common.base.Function),459,461,"/**
* Creates an ordering based on the result of applying a given function.
* @param function Function to apply to elements for ordering
*/","* Returns a new ordering on {@code F} which orders elements by first applying a function to them,
   * then comparing those results using {@code this}. For example, to compare objects by their
   * string forms, in a case-insensitive manner, use:
   *
   * {@snippet :
   * Ordering.from(String.CASE_INSENSITIVE_ORDER)
   *     .onResultOf(Functions.toStringFunction())
   * }
   *
   * <p><b>Java 8+ users:</b> Use {@code Comparator.comparing(function, thisComparator)} instead
   * (you can omit the comparator if it is the natural order).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,from,com.google.common.collect.Ordering:from(java.util.Comparator),192,196,"/**
* Creates an ordering instance from a comparator.
* @param comparator the input comparator to use for ordering
*/","* Returns an ordering based on an <i>existing</i> comparator instance. Note that it is
   * unnecessary to create a <i>new</i> anonymous inner class implementing {@code Comparator} just
   * to pass it in here. Instead, simply subclass {@code Ordering} and implement its {@code compare}
   * method directly.
   *
   * <p>The returned object is serializable if {@code comparator} is serializable.
   *
   * <p><b>Java 8+ users:</b> this class is now obsolete as explained in the class documentation, so
   * there is no need to use this method.
   *
   * @param comparator the comparator that defines the order
   * @return comparator itself if it is already an {@code Ordering}; otherwise an ordering that
   *     wraps that comparator",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,compound,com.google.common.collect.Ordering:compound(java.util.Comparator),483,485,"/**
* Combines this ordering with the given secondary comparator.
* @param secondaryComparator additional ordering criteria
* @return a new CompoundOrdering instance
*/","* Returns an ordering which first uses the ordering {@code this}, but which in the event of a
   * ""tie"", then delegates to {@code secondaryComparator}. For example, to sort a bug list first by
   * status and second by priority, you might use {@code byStatus.compound(byPriority)}. For a
   * compound ordering with three or more components, simply chain multiple calls to this method.
   *
   * <p>An ordering produced by this method, or a chain of calls to this method, is equivalent to
   * one created using {@link Ordering#compound(Iterable)} on the same component comparators.
   *
   * <p>The returned object is serializable if this object and {@code secondaryComparator} are both
   * serializable.
   *
   * <p><b>Java 8+ users:</b> Use {@code thisComparator.thenComparing(secondaryComparator)} instead.
   * Depending on what {@code secondaryComparator} is, one of the other overloads of {@code
   * thenComparing} may be even more useful.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,lexicographical,com.google.common.collect.Comparators:lexicographical(java.util.Comparator),63,66,"/**
* Returns a lexicographical ordering comparator for the given iterable of objects.
* @param comparator comparator to determine individual object order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,lexicographical,com.google.common.collect.Ordering:lexicographical(),531,540,"/**
* Returns lexicographical ordering for iterables of type S (or any subclass T).
* @return Ordering instance for comparing iterable elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,nullsFirst,com.google.common.collect.Ordering:nullsFirst(),428,430,"/**
* Returns an ordering that treats null values as less than any non-null value.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,nullsLast,com.google.common.collect.Ordering:nullsLast(),442,444,"/**
* Returns a comparator that orders collections with null elements last. 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,reverse,com.google.common.collect.Ordering:reverse(),414,416,"/**
 * Creates an ordering that reverses this ordering.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,readObject,com.google.common.collect.TreeMultimap:readObject(java.io.ObjectInputStream),217,226,"/**
* Deserializes multimap data from a stream.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if type is unknown
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,immutableCell,"com.google.common.collect.Tables:immutableCell(java.lang.Object,java.lang.Object,java.lang.Object)",125,131,"/**
* Creates an immutable cell with the specified key-value pair.
* @param rowKey row identifier
* @param columnKey column identifier
* @param value cell value
*/","* Returns an immutable cell with the specified row key, column key, and value.
   *
   * <p>The returned cell is serializable.
   *
   * @param rowKey the row key to be associated with the returned cell
   * @param columnKey the column key to be associated with the returned cell
   * @param value the value to be associated with the returned cell",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,elementSet,com.google.common.collect.ImmutableMultimap$Keys:elementSet(),743,746,"/**
* Returns an immutable set of elements (keys).
* @return Set of keys in this data structure
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,contains,"com.google.common.collect.ArrayTable:contains(java.lang.Object,java.lang.Object)",401,404,"/**
* Checks if a table cell exists by combining row and column key existence checks. 
* @param rowKey unique row identifier (can be null)
* @param columnKey unique column identifier (can be null)
* @return true if the cell exists, false otherwise
*/","* Returns {@code true} if the provided keys are among the keys provided when the table was
   * constructed.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,contains,com.google.common.collect.ImmutableMultimap$Keys:contains(java.lang.Object),732,735,"/**
* Checks if a given object is contained in this map.
* @param object the object to search for (null allowed)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver:<init>(),58,60,"/**
* Initializes a new instance of the TypeResolver with an empty type table.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,entryOf,"com.google.common.collect.ImmutableMap:entryOf(java.lang.Object,java.lang.Object)",344,346,"/**
* Creates an immutable map entry with the given key and value.
* @param key unique key of type K
* @param value associated value of type V
*/","* Verifies that {@code key} and {@code value} are non-null, and returns a new immutable entry
   * with those values.
   *
   * <p>A call to {@link Entry#setValue} on the returned entry will always throw {@link
   * UnsupportedOperationException}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntry.java,<init>,"com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry)",102,106,"/**
* Creates a new immutable map entry with the given key, value, and optional next entry in the bucket. 
* @param key unique key
* @param value associated value
* @param nextInKeyBucket next entry in the same bucket (may be null)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,makeImmutable,"com.google.common.collect.RegularImmutableMap:makeImmutable(java.util.Map$Entry,java.lang.Object,java.lang.Object)",206,210,"/**
* Creates an immutable map entry from a given entry or builds a new one.
* @param entry existing entry to reuse (if possible)
* @param key unique key for the new entry
* @param value associated value for the new entry
* @return ImmutableMapEntry instance
*/",Makes an entry usable internally by a new ImmutableMap without rereading its contents.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,put,"com.google.common.collect.ImmutableListMultimap$Builder:put(java.lang.Object,java.lang.Object)",253,258,"/**
* Adds or updates a value in the map.
* @param key unique map key
* @param value associated value
* @return builder instance for method chaining
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,put,com.google.common.collect.ImmutableMultimap$Builder:put(java.util.Map$Entry),255,258,"/**
* Inserts key-value pair into the map as a single operation.
* @param entry non-null Entry object containing key and value
*/","* Adds an entry to the built multimap.
     *
     * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,put,"com.google.common.collect.ImmutableSetMultimap$Builder:put(java.lang.Object,java.lang.Object)",302,307,"/**
* Sets a value associated with a given key and returns this builder.
* @param key unique key identifier
* @param value associated value",Adds a key-value mapping to the built multimap if it is not already present.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive:trySplit(),376,399,"/**
* Attempts to split the spliterator into two parts, returning a new spliterator for the first part.
* @return A new OutSpliterator or null if no splitting is possible
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,valueSpliterator,com.google.common.collect.AbstractMapBasedMultimap:valueSpliterator(),1235,1239,"/**
* Returns a spliterator over the values of the map.
* @return Spliterator over map values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,entrySpliterator,com.google.common.collect.AbstractMapBasedMultimap:entrySpliterator(),1293,1305,"/**
* Creates a spliterator for entries in the map.
* @return A flatMap of key-value pairs as immutble Entries
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,entrySpliterator,com.google.common.collect.ImmutableMultimap:entrySpliterator(),692,704,"/**
* Creates a spliterator for the map's entries.
* @return A spliterator of Entry objects with distinct keys and values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,spliteratorImpl,com.google.common.collect.Multisets:spliteratorImpl(com.google.common.collect.Multiset),1124,1133,"/**
* Creates a spliterator for the elements of a Multiset, with each element repeated according to its count.
* @param multiset instance of Multiset to create spliterator for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,cellSpliterator,com.google.common.collect.StandardTable:cellSpliterator(),299,310,"/**
* Creates a spliterator for the cell iterator.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$FilteredSortedSet:<init>(java.util.SortedSet,com.google.common.base.Predicate)",1300,1302,"/**
* Creates filtered sorted set by applying given predicate.
* @param unfiltered original sorted set
* @param predicate filtering criterion
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,iterator,com.google.common.collect.CompactHashMap$KeySetView:iterator(),737,740,"/**
* Returns an iterator over the keys in this map.
* @return Iterator over the key set.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,iterator,com.google.common.collect.CompactHashMap$EntrySetView:iterator(),813,816,"/**
* Returns an iterator over key-value pairs in this map.
* @return Map entry iterator or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,updateLastKnownIndex,com.google.common.collect.CompactHashMap$MapEntry:updateLastKnownIndex(),903,909,"/**
* Updates the last known index of a specified key in the collection.
* @param none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,isEmpty,com.google.common.collect.CompactHashMap:isEmpty(),959,962,"/**
* Checks if this collection is empty.
* @return true if no elements are present, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,clear,com.google.common.collect.CompactHashMap:clear(),1092,1112,"/**
* Clears the map's contents. If backing arrays are already allocated, does nothing.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,writeObject,com.google.common.collect.CompactHashMap:writeObject(java.io.ObjectOutputStream),1114,1124,"/**
* Writes this map's contents to the given ObjectOutputStream.
* @throws IOException if serialization fails
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,iterator,com.google.common.collect.CompactHashMap$ValuesView:iterator(),995,998,"/**
* Returns an iterator over the collection of values.
*@return Iterator over V objects or null if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,resizeTable,"com.google.common.collect.CompactHashMap:resizeTable(int,int,int,int)",432,477,"/**
* Resizes the hash table to a new capacity and updates its entries accordingly.
* @param oldMask current mask value
* @param newCapacity target size of the resized table
* @param targetHash hash code for the target entry (if any)
* @param targetEntryIndex index of the target entry in the old table (if any)
* @return the updated hash table mask value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,resizeTable,"com.google.common.collect.CompactHashSet:resizeTable(int,int,int,int)",383,418,"/**
* Resizes the hash table to a new capacity and returns the updated mask.
* @param oldMask current mask
* @param newCapacity new size of the table
* @param targetHash hash value for the target entry (if applicable)
* @param targetEntryIndex index of the target entry (if applicable)
* @return new hash table mask
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,resizeMeMaybe,com.google.common.collect.CompactHashMap:resizeMeMaybe(int),411,420,"/**
* Dynamically resizes array of entries based on provided size.
* @param newSize desired size
*/",Resizes the entries storage if necessary.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,resizeEntries,com.google.common.collect.CompactLinkedHashMap:resizeEntries(int),214,218,"/**
* Resizes internal entry array and updates linking structure.
* @param newCapacity new size of entry array
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,containsValue,com.google.common.collect.CompactHashMap:containsValue(java.lang.Object),964,976,"/**
* Checks if the map contains a specified value.
* @param value the object to search for
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,insertEntry,"com.google.common.collect.CompactHashMap:insertEntry(int,java.lang.Object,java.lang.Object,int,int)",403,408,"/**
* Inserts a new entry at the specified index with given key and value.
* @param entryIndex position to insert the entry
* @param key unique key for the entry
* @param value associated value for the entry
* @param hash combined hash value
* @param mask combined mask value
*/",* Creates a fresh entry with the specified object at the specified position in the entry arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,replaceAll,com.google.common.collect.CompactHashMap:replaceAll(java.util.function.BiFunction),672,683,"/**
* Replaces all values in the map with a new value based on a transformation function.
* @param function BiFunction to apply to each entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,isEmpty,com.google.common.collect.CompactHashSet:isEmpty(),621,624,"/**
* Checks whether this collection is empty.
* @return true if collection has no elements, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,clear,com.google.common.collect.CompactHashSet:clear(),677,696,"/**
* Clears the data structure, resetting it to its default state.
* @return if arrays need reallocation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,writeObject,com.google.common.collect.CompactHashSet:writeObject(java.io.ObjectOutputStream),698,705,"/**
* Writes object graph to ObjectOutputStream, including collection size and elements.
* @throws IOException if serialization fails
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,resizeMeMaybe,com.google.common.collect.CompactHashSet:resizeMeMaybe(int),363,372,"/**
* Resizes the internal entry array if necessary to accommodate a new size.
* @param newSize desired capacity
*/",Resizes the entries storage if necessary.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,resizeEntries,com.google.common.collect.CompactLinkedHashSet:resizeEntries(int),214,219,"/**
* Resizes internal arrays to accommodate a specified capacity.
* @param newCapacity the desired size of predecessor and successor arrays
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,insertEntry,"com.google.common.collect.CompactHashSet:insertEntry(int,java.lang.Object,int,int)",357,360,"/**
* Inserts a new entry at the specified index with given hash and mask.
* @param entryIndex position where entry will be inserted
* @param object data to store in the entry
* @param hash unique identifier for the entry
* @param mask bit mask to apply during insertion
*/",* Creates a fresh entry with the specified object at the specified position in the entry arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,allocArrays,com.google.common.collect.CompactHashMap:allocArrays(),267,281,"/**
* Allocates and initializes arrays for storing key-value entries.
* @return the expected size of the allocated arrays
*/",Handle lazy allocation of arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,allocArrays,com.google.common.collect.CompactHashSet:allocArrays(),232,245,"/**
* Allocates arrays for storing entries and elements.
* @return Expected size of the allocated arrays
*/",Handle lazy allocation of arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,getPredecessor,com.google.common.collect.CompactLinkedHashMap:getPredecessor(int),148,150,"/**
* Retrieves predecessor node ID from given entry.
* @param entry internal node identifier
* @return predecessor node ID or -1 if invalid
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,getSuccessor,com.google.common.collect.CompactLinkedHashMap:getSuccessor(int),152,155,"/**
* Retrieves the successor of an entry.
* @param entry entry identifier
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setSuccessor,"com.google.common.collect.CompactLinkedHashMap:setSuccessor(int,int)",157,160,"/**
* Sets the successor node for a given hash table entry.
* @param entry current entry to update
* @param succ ID of the successor node
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setPredecessor,"com.google.common.collect.CompactLinkedHashMap:setPredecessor(int,int)",162,165,"/**
* Sets the predecessor link for a given entry.
* @param entry unique entry identifier
* @param pred predecessor ID to be linked
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,setSucceeds,"com.google.common.collect.CompactLinkedHashSet:setSucceeds(int,int)",179,191,"/**
* Updates predecessor and successor relationships for a given endpoint.
* @param pred previous endpoint ID
* @param succ next endpoint ID
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,<init>,com.google.common.collect.EmptyContiguousSet:<init>(com.google.common.collect.DiscreteDomain),36,38,"/**
* Creates an empty contiguous set over the given discrete domain.
* @param domain DiscreteDomain instance specifying the set's elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,<init>,"com.google.common.collect.RegularContiguousSet:<init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)",42,45,"/**
* Constructs a regular contiguous set with specified range within given domain.
* @param range Range of values
* @param domain Discrete domain for the set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,asRanges,com.google.common.collect.ImmutableRangeSet:asRanges(),303,309,"/**
* Converts this set to a sorted set of ranges.
* @return Set of non-overlapping ranges or empty set if none exist
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,emptySet,com.google.common.collect.ImmutableSortedSet:emptySet(java.util.Comparator),86,95,"/**
* Creates an empty sorted set with the specified comparator.
* @param comparator comparison function for sorting
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withLowerBoundType,"com.google.common.collect.Cut$BelowValue:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",333,343,"/**
* Creates a cut with the specified lower bound type.
* @param boundType type of lower bound to apply
* @param domain discrete domain for which to create the cut
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withUpperBoundType,"com.google.common.collect.Cut$BelowValue:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",345,355,"/**
* Creates a cut with an upper bound type.
* @param boundType the type of upper bound
* @param domain the discrete domain to operate on
* @return Cut object with updated upper bound type
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,aboveValue,com.google.common.collect.Cut:aboveValue(java.lang.Comparable),390,392,"/**
* Creates an instance of AboveValue to compare against given endpoint value.
* @param endpoint comparable endpoint value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,belowValue,com.google.common.collect.Cut:belowValue(java.lang.Comparable),309,311,"/**
* Creates a cut value comparator instance below the given endpoint.
* @param endpoint comparable endpoint value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,equals,com.google.common.collect.Cut:equals(java.lang.Object),91,105,"/**
* Compares this Cut object with the given Object for equality.
* @param obj the Object to compare, must be a Cut or null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,<init>,"com.google.common.collect.Range:<init>(com.google.common.collect.Cut,com.google.common.collect.Cut)",327,335,"/**
* Initializes a Range object with given bounds.
* @param lowerBound lower bound of the range
* @param upperBound upper bound of the range
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,encloses,com.google.common.collect.Range:encloses(com.google.common.collect.Range),485,488,"/**
* Checks if this range encloses another.
* @param other Range to check, must not be null
*/","* Returns {@code true} if the bounds of {@code other} do not extend outside the bounds of this
   * range. Examples:
   *
   * <ul>
   *   <li>{@code [3..6]} encloses {@code [4..5]}
   *   <li>{@code (3..6)} encloses {@code (3..6)}
   *   <li>{@code [3..6]} encloses {@code [4..4)} (even though the latter is empty)
   *   <li>{@code (3..6]} does not enclose {@code [3..6]}
   *   <li>{@code [4..5]} does not enclose {@code (3..6)} (even though it contains every value
   *       contained by the latter range)
   *   <li>{@code [3..6]} does not enclose {@code (1..1]} (even though it contains every value
   *       contained by the latter range)
   * </ul>
   *
   * <p>Note that if {@code a.encloses(b)}, then {@code b.contains(v)} implies {@code
   * a.contains(v)}, but as the last two examples illustrate, the converse is not always true.
   *
   * <p>Being reflexive, antisymmetric and transitive, the {@code encloses} relation defines a
   * <i>partial order</i> over ranges. There exists a unique {@linkplain Range#all maximal} range
   * according to this relation, and also numerous {@linkplain #isEmpty minimal} ranges. Enclosure
   * also implies {@linkplain #isConnected connectedness}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,isConnected,com.google.common.collect.Range:isConnected(com.google.common.collect.Range),515,518,"/**
* Checks if two ranges overlap.
* @param other Range object to check for overlap
* @return true if ranges intersect, false otherwise
*/","* Returns {@code true} if there exists a (possibly empty) range which is {@linkplain #encloses
   * enclosed} by both this range and {@code other}.
   *
   * <p>For example,
   *
   * <ul>
   *   <li>{@code [2, 4)} and {@code [5, 7)} are not connected
   *   <li>{@code [2, 4)} and {@code [3, 5)} are connected, because both enclose {@code [3, 4)}
   *   <li>{@code [2, 4)} and {@code [4, 6)} are connected, because both enclose the empty range
   *       {@code [4, 4)}
   * </ul>
   *
   * <p>Note that this range and {@code other} have a well-defined {@linkplain #span union} and
   * {@linkplain #intersection intersection} (as a single, possibly-empty range) if and only if this
   * method returns {@code true}.
   *
   * <p>The connectedness relation is both reflexive and symmetric, but does not form an {@linkplain
   * Equivalence equivalence relation} as it is not transitive.
   *
   * <p>Note that certain discrete ranges are not considered connected, even though there are no
   * elements ""between them."" For example, {@code [3, 5]} is not considered connected to {@code [6,
   * 10]}. In these cases, it may be desirable for both input ranges to be preprocessed with {@link
   * #canonical(DiscreteDomain)} before testing for connectedness.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,writeObject,com.google.common.collect.ImmutableSetMultimap:writeObject(java.io.ObjectOutputStream),665,671,"/**
* Writes object graph to ObjectOutputStream.
* 
* This method serializes the object's internal state and associated data structures.
* @throws IOException if write operation fails
*/","* @serialData number of distinct keys, and then for each distinct key: the key, the number of
   *     values for that key, and the key's values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,subMultiset,"com.google.common.collect.ImmutableSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",385,394,"/**
* Returns a sub-multiset from the lower to upper bounds.
* @param lowerBound element value
* @param lowerBoundType bound type for lower bound
* @param upperBound element value
* @param upperBoundType bound type for upper bound
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,toString,com.google.common.collect.DescendingMultiset:toString(),159,162,"/**
* Returns a string representation of this map.
* @return A comma-separated list of key-value pairs in the map.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,remove,"com.google.common.collect.EnumMultiset:remove(java.lang.Object,int)",162,187,"/**
* Removes specified enum element occurrence(s).
* @param element Enum object to remove
* @param occurrences number of occurrences to remove
* @return removed count (0 if not found or removed)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,compare,"com.google.common.collect.ExplicitOrdering:compare(java.lang.Object,java.lang.Object)",39,42,"/**
* Compares two objects of type T based on their ranks.
* @param left object to compare (left-hand side)
* @param right object to compare (right-hand side)
* @return negative if left is lower, positive if higher, zero if equal
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,builder,com.google.common.collect.ImmutableRangeMap:builder(),101,103,"/**
* Creates a new instance of the Builder class.
* @return A new Builder object with default settings.",Returns a new builder for an immutable range map.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,builder,com.google.common.collect.ImmutableRangeSet:builder(),748,750,"/**
* Creates a new instance of Builder with specified type constraint C.
* @param none 
* @return Builder instance with type parameter C
*/",Returns a new builder for an immutable range set.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,builder,com.google.common.collect.ImmutableTable:builder(),149,151,"/**
* Creates a new instance of the Builder class.
* @return Builder object
*/","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder#Builder() ImmutableTable.Builder()} constructor.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,removeAll,com.google.common.collect.FilteredEntrySetMultimap:removeAll(java.lang.Object),48,51,"/**
* Removes all elements with specified key from the set.
* @param key object to remove
* @return Set of removed values or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,add,"com.google.common.collect.ForwardingList:add(int,java.lang.Object)",63,66,"/**
* Adds an element at specified index in the underlying collection.
* @param index position to insert the element
* @param element object to be added, or null to remove existing element at this index
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,addAll,"com.google.common.collect.ForwardingList:addAll(int,java.util.Collection)",68,72,"/**
* Inserts all elements from the specified collection at the given index.
* @param index insertion position
* @param elements collection of elements to insert
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,get,com.google.common.collect.ForwardingList:get(int),74,78,"/**
* Retrieves an element at the specified index.
* @param index position of the element to retrieve
* @return object of type E at the given index or null if out of bounds
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,indexOf,com.google.common.collect.ForwardingList:indexOf(java.lang.Object),80,83,"/**
* Returns index of specified element in this collection.
* @param element object to search for (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,lastIndexOf,com.google.common.collect.ForwardingList:lastIndexOf(java.lang.Object),85,88,"/**
* Returns index of last occurrence of specified object in collection.
* @param element object to search for (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,listIterator,com.google.common.collect.ForwardingList:listIterator(),90,93,"/**
* Returns a list iterator over the elements in this collection.
* @return a ListIterator instance backed by this collection's delegate.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,listIterator,com.google.common.collect.ForwardingList:listIterator(int),95,98,"/**
* Returns a list iterator positioned at the specified index.
* @param index position to start iteration from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,remove,com.google.common.collect.ForwardingList:remove(int),100,105,"/**
* Removes element at specified index and returns its value.
* @param index position of element to be removed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,set,"com.google.common.collect.ForwardingList:set(int,java.lang.Object)",107,112,"/**
* Sets an element at a specified index in this collection.
* @param index the index to set (0-based)
* @param element the new value to set
* @return the previous value at this index or null if not set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,subList,"com.google.common.collect.ForwardingList:subList(int,int)",114,117,"/**
* Returns a sublist of elements within the specified range.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
* @return List of elements in the specified range
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,equals,com.google.common.collect.ForwardingList:equals(java.lang.Object),119,122,"/**
* Compares this instance with another object.
* @param object other object to compare with
* @return true if objects are equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,hashCode,com.google.common.collect.ForwardingList:hashCode(),124,127,"/**
* Returns hash code of underlying data structure.
* @return Hash code value as an integer
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,removeAll,com.google.common.collect.FilteredKeyListMultimap:removeAll(java.lang.Object),46,49,"/**
* Removes all elements from this list that are equal to the specified key.
* @param key element to remove
* @return a new list with removed elements or null if key is not an instance of V
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,removeAll,com.google.common.collect.FilteredKeySetMultimap:removeAll(java.lang.Object),48,51,"/**
* Removes all elements equal to the specified object from this set.
* @param key object to be removed, or null if not applicable
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,iterator,com.google.common.graph.AbstractDirectedNetworkConnections$1:iterator(),732,733,"/**
* Returns an unmodifiable iterator over elements of this collection.
*/","* Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view.
     *
     * @since 20.0 (present with return type {@link Iterator} since 2.0)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,frequency,"com.google.common.collect.Iterables:frequency(java.lang.Iterable,java.lang.Object)",346,353,"/**
* Calculates the frequency of a given element in an iterable.
* @param iterable input collection (set, multiset, or other iterable)
* @param element target object to count occurrences
* @return frequency of element in iterable
*/","* Returns the number of elements in the specified iterable that equal the specified object. This
   * implementation avoids a full iteration when the iterable is a {@link Multiset} or {@link Set}.
   *
   * <p><b>Java 8+ users:</b> In most cases, the {@code Stream} equivalent of this method is {@code
   * stream.filter(element::equals).count()}. If {@code element} might be null, use {@code
   * stream.filter(Predicate.isEqual(element)).count()} instead.
   *
   * @see java.util.Collections#frequency(Collection, Object) Collections.frequency(Collection,
   *     Object)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardContainsKey,com.google.common.collect.ForwardingMap:standardContainsKey(java.lang.Object),207,209,"/**
* Checks if this map contains a specific key.
* @param key the key to search for (may be null)
*/","* A sensible, albeit inefficient, definition of {@link #containsKey} in terms of the {@code
   * iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to
   * override {@link #containsKey} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardContainsValue,com.google.common.collect.ForwardingMap:standardContainsValue(java.lang.Object),234,236,"/**
* Checks if this map contains a specific value.
* @param value object to search in the map
*/","* A sensible definition of {@link #containsValue} in terms of the {@code iterator} method of
   * {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link
   * #containsValue} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,equals,com.google.common.collect.ExplicitOrdering:equals(java.lang.Object),52,59,"/**
* Compares this ExplicitOrdering instance with another for equality.
* @param object the Object to compare with, must be of type ExplicitOrdering
* @return true if both objects have identical rank maps, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLowerKey,com.google.common.collect.ForwardingNavigableMap:standardLowerKey(java.lang.Object),90,92,"/**
* Returns lower entry key after applying standard lower case conversion.
* @param key input key to convert and find lower entry for
* @return converted key or null if not found
*/","* A sensible definition of {@link #lowerKey} in terms of {@code lowerEntry}. If you override
   * {@link #lowerEntry}, you may wish to override {@code lowerKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFloorKey,com.google.common.collect.ForwardingNavigableMap:standardFloorKey(java.lang.Object),118,120,"/**
* Returns the standard floor key from the given key.
* @param key the input key
* @return Standard floor key or null if not found
*/","* A sensible definition of {@link #floorKey} in terms of {@code floorEntry}. If you override
   * {@code floorEntry}, you may wish to override {@code floorKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardCeilingKey,com.google.common.collect.ForwardingNavigableMap:standardCeilingKey(java.lang.Object),146,148,"/**
* Returns the smallest ceiling key in the map.
* @param key the input key
* @return the smallest ceiling key or null if not found
*/","* A sensible definition of {@link #ceilingKey} in terms of {@code ceilingEntry}. If you override
   * {@code ceilingEntry}, you may wish to override {@code ceilingKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardHigherKey,com.google.common.collect.ForwardingNavigableMap:standardHigherKey(java.lang.Object),174,176,"/**
* Returns the higher key in the map or null if no such entry exists.
* @param key the key to find a higher entry for
* @return higher key or null
*/","* A sensible definition of {@link #higherKey} in terms of {@code higherEntry}. If you override
   * {@code higherEntry}, you may wish to override {@code higherKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFirstKey,com.google.common.collect.ForwardingNavigableMap:standardFirstKey(),197,204,"/**
* Returns the key of the first entry in this map.
*/","* A sensible definition of {@link #firstKey} in terms of {@code firstEntry}. If you override
   * {@code firstEntry}, you may wish to override {@code firstKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLastKey,com.google.common.collect.ForwardingNavigableMap:standardLastKey(),224,231,"/**
* Retrieves and returns the key of the last entry in this map.
* @return the key of the last entry or throws NoSuchElementException if empty
*/","* A sensible definition of {@link #lastKey} in terms of {@code lastEntry}. If you override {@code
   * lastEntry}, you may wish to override {@code lastKey} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLastEntry,com.google.common.collect.ForwardingNavigableMap:standardLastEntry(),216,218,"/**
* Returns the last entry in this map.
* @return the last entry or null if empty
*/","* A sensible definition of {@link #lastEntry} in terms of the {@code iterator()} of the {@link
   * #entrySet} of {@link #descendingMap}. If you override {@code descendingMap}, you may wish to
   * override {@code lastEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardPollLastEntry,com.google.common.collect.ForwardingNavigableMap:standardPollLastEntry(),257,259,"/**
* Retrieves and removes the last entry from the map.
* @return Entry object or null if empty
*/","* A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of the {@code
   * entrySet} of {@code descendingMap}. If you override {@code descendingMap}, you may wish to
   * override {@code pollFirstEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardDescendingKeySet,com.google.common.collect.ForwardingNavigableMap:standardDescendingKeySet(),359,361,"/**
* Returns a set of keys in descending order.
* @return Set of keys in descending order
*/","* A sensible definition of {@link #descendingKeySet} as the {@code navigableKeySet} of {@link
   * #descendingMap}. (The {@link StandardDescendingMap} implementation implements {@code
   * navigableKeySet} on its own, so as not to cause an infinite loop.) If you override {@code
   * descendingMap}, you may wish to override {@code descendingKeySet} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardSubMap,"com.google.common.collect.ForwardingNavigableMap:standardSubMap(java.lang.Object,java.lang.Object)",368,372,"/**
* Returns a sorted sub-map of key range [fromKey, toKey].
* @param fromKey start of key range (inclusive)
* @param toKey end of key range (exclusive)
*/","* A sensible definition of {@link #subMap(Object, Object)} in terms of {@link #subMap(Object,
   * boolean, Object, boolean)}. If you override {@code subMap(K, boolean, K, boolean)}, you may
   * wish to override {@code subMap} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLowerEntry,com.google.common.collect.ForwardingNavigableMap:standardLowerEntry(java.lang.Object),76,78,"/**
* Retrieves the lowest-mapped entry with a key less than or equal to the specified value.
* @param key the upper bound of the search range
* @return the lowest-mapped entry or null if not found","* A sensible definition of {@link #lowerEntry} in terms of the {@code lastEntry()} of {@link
   * #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code
   * lowerEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFloorEntry,com.google.common.collect.ForwardingNavigableMap:standardFloorEntry(java.lang.Object),104,106,"/**
* Retrieves the last entry in the submap of keys less than or equal to the specified key.
* @param key key to determine the submap
* @return Entry object or null if map is empty","* A sensible definition of {@link #floorEntry} in terms of the {@code lastEntry()} of {@link
   * #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code
   * floorEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardHeadMap,com.google.common.collect.ForwardingNavigableMap:standardHeadMap(java.lang.Object),398,400,"/**
* Returns a view of the map's portion that maps only keys greater than {@code toKey}.
* @param toKey key value up to which the map is truncated
* @return a new SortedMap instance or null if map is empty
*/","* A sensible definition of {@link #headMap(Object)} in terms of {@link #headMap(Object,
   * boolean)}. If you override {@code headMap(K, boolean)}, you may wish to override {@code
   * headMap} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardCeilingEntry,com.google.common.collect.ForwardingNavigableMap:standardCeilingEntry(java.lang.Object),132,134,"/**
* Retrieves the entry with the smallest value greater than or equal to the specified key.
* @param key the reference key
* @return Entry object or null if not found
*/","* A sensible definition of {@link #ceilingEntry} in terms of the {@code firstEntry()} of {@link
   * #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code
   * ceilingEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardHigherEntry,com.google.common.collect.ForwardingNavigableMap:standardHigherEntry(java.lang.Object),160,162,"/**
* Retrieves the entry with a higher key than the given key.
* @param key key to start searching from
* @return Entry object or null if no entries found
*/","* A sensible definition of {@link #higherEntry} in terms of the {@code firstEntry()} of {@link
   * #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code
   * higherEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardTailMap,com.google.common.collect.ForwardingNavigableMap:standardTailMap(java.lang.Object),407,409,"/**
* Returns a view of this map's portion of the range [fromKey, ) to the end.
* @param fromKey key from which to start the view
*/","* A sensible definition of {@link #tailMap(Object)} in terms of {@link #tailMap(Object,
   * boolean)}. If you override {@code tailMap(K, boolean)}, you may wish to override {@code
   * tailMap} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardSubMultiset,"com.google.common.collect.ForwardingSortedMultiset:standardSubMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",219,225,"/**
* Creates a sub-multiset with elements within the specified bounds.
* @param lowerBound lower bound of the range (inclusive)
* @param lowerBoundType type of the lower bound
* @param upperBound upper bound of the range (inclusive)
* @param upperBoundType type of the upper bound
*/","* A sensible definition of {@link #subMultiset(Object, BoundType, Object, BoundType)} in terms of
   * {@link #headMultiset(Object, BoundType) headMultiset} and {@link #tailMultiset(Object,
   * BoundType) tailMultiset}.
   *
   * <p>If you override either of these methods, you may wish to override {@link
   * #subMultiset(Object, BoundType, Object, BoundType)} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,get,com.google.common.collect.ForwardingSetMultimap:get(java.lang.Object),51,54,"/**
* Retrieves a set of values associated with the given key.
* @param key unique identifier or key
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,delegate,com.google.common.collect.ForwardingMultimap:delegate(),46,47,"/**
* Returns a multimap delegate instance.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,isEmpty,com.google.common.collect.GeneralRange:isEmpty(),160,164,"/**
 * Checks if this range is empty, i.e., it has both an upper and lower bound.
 * @return True if the range is empty, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,contains,com.google.common.collect.GeneralRange:contains(java.lang.Object),186,188,"/**
* Checks if input value falls within range by calling tooLow and tooHigh methods.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,create,com.google.common.collect.HashBasedTable:create(),69,71,"/**
* Creates a new instance of HashBasedTable with default settings.
* @return empty HashBasedTable object
*/",Creates an empty {@code HashBasedTable}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,<init>,"com.google.common.collect.TreeBasedTable:<init>(java.util.Comparator,java.util.Comparator)",131,134,"/**
* Initializes a TreeBasedTable with custom comparators for rows and columns.
* @param rowComparator comparator to order table rows
* @param columnComparator comparator to order table columns
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,replaceAll,com.google.common.collect.HashBiMap$Inverse:replaceAll(java.util.function.BiFunction),745,753,"/**
* Replaces all existing key-value pairs with new values computed by the provided function.
* @param function BiFunction to compute new keys
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,<init>,com.google.common.collect.HashBiMap:<init>(int),135,137,"/**
* Initializes a HashBiMap with the specified expected size.
* @param expectedSize anticipated number of mappings.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,readObject,com.google.common.collect.HashBiMap:readObject(java.io.ObjectInputStream),790,797,"/**
* Initializes object from serialized data.
* @throws IOException serialization error
* @throws ClassNotFoundException class not found during deserialization
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,readObject,com.google.common.collect.EnumBiMap:readObject(java.io.ObjectInputStream),150,159,"/**
* Deserializes object from ObjectInputStream.
* @throws IOException serialization error
* @throws ClassNotFoundException class not found during deserialization
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,readObject,com.google.common.collect.EnumHashBiMap:readObject(java.io.ObjectInputStream),124,136,"/**
* Deserializes object graph from ObjectInputStream.
* @param stream input stream containing serialized data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,readObject,com.google.common.collect.EnumMultiset:readObject(java.io.ObjectInputStream),309,318,"/**
* Deserializes an EnumMultiset object from the given ObjectInputStream.
* @throws IOException on serialization errors
* @throws ClassNotFoundException if unknown class is read
*/","* @serialData the {@code Class<E>} for the enum type, the number of distinct elements, the first
   *     element, its count, the second element, its count, and so on",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,indexOf,com.google.common.collect.CompactHashMap:indexOf(java.lang.Object),479,500,"/**
* Finds index of given key in the hash table.
* @param key object to search for
* @return index if found, -1 otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,moveLastEntry,"com.google.common.collect.CompactHashMap:moveLastEntry(int,int)",564,606,"/**
* Moves the last entry to a specified index in the table.
* @param dstIndex target index
* @param mask hash mask used for pointer updates
*/","* Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,contains,com.google.common.collect.CompactHashSet:contains(java.lang.Object),420,446,"/**
* Checks if the set contains a specified object.
* @param object the object to search for
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,moveLastEntry,"com.google.common.collect.CompactHashSet:moveLastEntry(int,int)",482,520,"/**
* Moves the last entry to a specified location in the table and updates associated pointers.
* @param dstIndex index where the last entry will be moved
* @param mask used for hash calculations
*/","* Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashing.java,remove,"com.google.common.collect.CompactHashing:remove(java.lang.Object,java.lang.Object,int,java.lang.Object,int[],java.lang.Object[],java.lang.Object[])",159,196,"/**
* Removes the specified key-value pair from a hash table.
* @param key unique key identifier
* @param value associated value to remove (optional)
* @return index of removed entry or -1 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap$Inverse$InverseKeySet:remove(java.lang.Object),663,672,"/**
* Removes the specified object from the map.
* @param o object to be removed
* @return true if object was found and removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,get,com.google.common.collect.HashBiMap$Inverse:get(java.lang.Object),619,622,"/**
* Retrieves key by value using smeared hash.
* @param value object to search for
* @return associated key or null if not found",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap$Inverse:remove(java.lang.Object),635,646,"/**
* Removes the first occurrence of a given value from the map.
* @param value object to remove
* @return key associated with removed value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap$KeySet:remove(java.lang.Object),498,509,"/**
* Removes the specified object from this map.
* @param o Object to remove
* @return True if removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,containsKey,com.google.common.collect.HashBiMap:containsKey(java.lang.Object),263,266,"/**
* Checks if map contains a given key.
* @param key object to search for in the map
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,containsValue,com.google.common.collect.HashBiMap:containsValue(java.lang.Object),278,281,"/**
* Checks if a specified object value is present in the map.
* @param value target object to search for
* @return true if found, false otherwise
*/","* Returns {@code true} if this BiMap contains an entry whose value is equal to {@code value} (or,
   * equivalently, if this inverse view contains a key that is equal to {@code value}).
   *
   * <p>Due to the property that values in a BiMap are unique, this will tend to execute in
   * faster-than-linear time.
   *
   * @param value the object to search for in the values of this BiMap
   * @return true if a mapping exists from a key to the specified value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,get,com.google.common.collect.HashBiMap:get(java.lang.Object),283,286,"/**
* Retrieves value associated with given key from underlying data structure.
* @param key unique identifier or null for no operation
* @return Value object or null if not found",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,put,"com.google.common.collect.HashBiMap:put(java.lang.Object,java.lang.Object,boolean)",294,326,"/**
* Inserts or updates a value with the given key and force flag.
* @param key unique identifier
* @param value value to store
* @param force true to overwrite existing entry
* @return previous value if updated, else null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,putInverse,"com.google.common.collect.HashBiMap:putInverse(java.lang.Object,java.lang.Object,boolean)",334,378,"/**
* Updates or inserts a key-value pair with the given value and key.
* If the key already exists, it is updated unless force is true (in which case an exception is thrown).
* @param value the new value
* @param key the new key
* @param force whether to overwrite existing key
* @return the old key if overwritten, or null otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap:remove(java.lang.Object),404,416,"/**
* Removes and returns the value associated with the given key.
* @param key unique identifier (may be null to indicate removal of all entries) 
* @return associated value or null if not found",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,contains,com.google.common.collect.LinkedHashMultimap$ValueSet:contains(java.lang.Object),467,478,"/**
* Checks if a given object is present in the hash table.
* @param o Object to search for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,remove,com.google.common.collect.LinkedHashMultimap$ValueSet:remove(java.lang.Object),521,545,"/**
* Removes a value from the multimap.
* @param o the value to remove
* @return true if removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,count,com.google.common.collect.RegularImmutableMultiset:count(java.lang.Object),158,174,"/**
* Counts occurrences of a given element in the hash table.
* @param element object to search for
* @return count of matching elements or 0 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSet.java,contains,com.google.common.collect.RegularImmutableSet:contains(java.lang.Object),55,70,"/**
* Checks for existence of a given object in the hash-based table.
* @param target the object to search for
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,makeBuilder,com.google.common.collect.ImmutableBiMap$SerializedForm:makeBuilder(int),627,630,"/**
* Creates a new builder with specified capacity.
* @param size initial capacity of the builder
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,builderWithExpectedSize,com.google.common.collect.ImmutableBiMap:builderWithExpectedSize(int),306,309,"/**
* Creates a builder with an expected size.
* @param expectedSize the anticipated number of elements
*/","* Returns a new builder, expecting the specified number of entries to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link
   * Builder#build} is called, the builder is likely to perform better than an unsized {@link
   * #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of entries added to the builder.
   *
   * @since 23.1",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,<init>,com.google.common.collect.ImmutableBiMap$Builder:<init>(),345,345,"/**
* Initializes a new instance of Builder.","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableBiMap#builder}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,builder,com.google.common.collect.ImmutableMap:builder(),352,354,"/**
* Creates a new instance of the Builder class. 
* @return A Builder object with default configuration
*/","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,<init>,com.google.common.collect.ImmutableSortedMap$Builder:<init>(java.util.Comparator),619,621,"/**
* Initializes the builder with a custom key comparator.
* @param comparator key comparison function
*/","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableSortedMap#orderedBy}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$Column$Values:removeAll(java.util.Collection),653,656,"/**
* Removes all elements from this collection if they exist in another collection.
* @param c Collection of elements to remove, if present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,inverse,com.google.common.collect.JdkBackedImmutableBiMap:inverse(),73,84,"/**
* Returns an inverted view of the bi-map.
* @return a new ImmutableBiMap with key-value pairs swapped
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,of,"com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object)",82,84,"/**
* Creates an immutable bi-map with a single entry.
* @param k1 key
* @param v1 value
*/",Returns an immutable bimap containing a single entry.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,inverse,com.google.common.collect.SingletonImmutableBiMap:inverse(),100,113,"/**
* Returns the inverse bi-map of this map.
* @return Inverse bi-map or cached instance if available
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,combine,com.google.common.collect.ImmutableMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder),520,527,"/**
* Merges another builder into the current one.
* @param other Builder to combine with
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,addDedupedElement,com.google.common.collect.ImmutableSet$SetBuilderImpl:addDedupedElement(java.lang.Object),612,615,"/**
* Adds a unique element to the collection.
* @param e unique element to be added
*/",Adds e to the insertion-order array of deduplicated elements. Calls ensureCapacity.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList$Builder:<init>(),810,812,"/**
* Initializes builder with default capacity. 
* @param initialCapacity initial size of the collection 
*/","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableList#builder}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,builderWithExpectedSize,com.google.common.collect.ImmutableList:builderWithExpectedSize(int),775,778,"/**
* Creates an Immutable List Builder with specified initial capacity.
* @param expectedSize the anticipated size of the list
*/","* Returns a new builder, expecting the specified number of elements to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of elements added to the builder before {@link
   * Builder#build} is called, the builder is likely to perform better than an unsized {@link
   * #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of elements added to the builder.
   *
   * @since 23.1",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,<init>,com.google.common.collect.ImmutableSortedSet$Builder:<init>(java.util.Comparator),451,453,"/**
 * Constructs a new builder with the specified comparator and initial capacity.
 * @param comparator Comparator to use when building the collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,addAll,com.google.common.collect.ImmutableSortedSet$Builder:addAll(java.lang.Iterable),549,554,"/**
* Adds all elements from an iterable to the builder.
* @param elements iterable of elements to be added
*/","* Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate
     * elements (only the first duplicate element is added).
     *
     * @param elements the elements to add to the {@code ImmutableSortedSet}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,addAll,com.google.common.collect.ImmutableSortedMultiset$Builder:addAll(java.util.Iterator),549,554,"/**
* Adds all elements from an iterator to the builder.
* @param elements iterable of elements to be added
*/","* Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}.
     *
     * @param elements the elements to add to the {@code ImmutableSortedMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,addAll,com.google.common.collect.ImmutableSortedSet$Builder:addAll(java.util.Iterator),564,569,"/**
* Adds all elements from an iterator to the builder.
* @param elements iterator containing elements to add
*/","* Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate
     * elements (only the first duplicate element is added).
     *
     * @param elements the elements to add to the {@code ImmutableSortedSet}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList$ReverseImmutableList:<init>(com.google.common.collect.ImmutableList),640,642,"/**
* Initializes an immutable list with a reversed copy of another.
* @param backingList original list to reverse
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$StringAsImmutableList:<init>(java.lang.String),771,773,"/**
* Converts input string to an immutable list. 
* The string is wrapped as a single element in the list.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableList.java,<init>,com.google.common.collect.RegularImmutableList:<init>(java.lang.Object[]),41,43,"/**
* Creates an immutable list from a regular array.
* @param array input array to be converted
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,<init>,com.google.common.collect.RegularImmutableMap$Values:<init>(com.google.common.collect.RegularImmutableMap),380,382,"/**
* Initializes a new Values instance from an existing regular immutable map.
* @param map input map to derive values from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,<init>,com.google.common.collect.SingletonImmutableList:<init>(java.lang.Object),40,42,"/**
* Creates an immutable list containing the specified single element.
* @param element the element to be contained in the list
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,createValues,com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createValues(),785,788,"/**
* Creates an immutable collection of values. 
* @return ImmutableMapValues object containing this collection's values.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,createValues,com.google.common.collect.JdkBackedImmutableMap:createValues(),122,125,"/**
* Creates an immutable collection of values from this object.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,createEntries,com.google.common.collect.ImmutableMultimap:createEntries(),615,618,"/**
* Creates an immutable collection of entries from this map.
* @return Collection of key-value pairs or empty if none exist
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,createValues,com.google.common.collect.ImmutableMultimap:createValues(),801,804,"/**
* Creates an immutable collection of values associated with this entity.
* @return ImmutableCollection of V objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,<init>,com.google.common.collect.ImmutableEnumSet:<init>(java.util.EnumSet),63,65,"/**
* Wraps an EnumSet into an immutable set.
* @param delegate original enum set to be wrapped
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,<init>,com.google.common.collect.ImmutableSetMultimap$EntrySet:<init>(com.google.common.collect.ImmutableSetMultimap),603,605,"/**
* Initializes an EntrySet from a Multimap.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableSet.java,<init>,com.google.common.collect.SingletonImmutableSet:<init>(java.lang.Object),41,43,"/**
* Adds an immutable element to the singleton set.
* @param element unique element to be added
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList$ReverseImmutableList:listIterator(),401,404,"/**
* Returns an unmodifiable iterator over this list's elements.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList$SubList:listIterator(),401,404,"/**
* Returns an unmodifiable iterator positioned at the beginning of the list.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,iterator,com.google.common.collect.ImmutableList:iterator(),396,399,"/**
* Returns an unmodifiable iterator over this collection's elements.
* @return Iterator object or null if collection is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyImmutableListMultimap.java,<init>,com.google.common.collect.EmptyImmutableListMultimap:<init>(),33,35,"/**
* Initializes an empty immutable multimap. 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,createEntrySet,com.google.common.collect.JdkBackedImmutableBiMap:createEntrySet(),118,121,"/**
* Creates an immutable set of map entries.
* @return Set of key-value pairs in this map or empty if none.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,createEntrySet,com.google.common.collect.JdkBackedImmutableMap:createEntrySet(),106,109,"/**
* Creates an immutable set of map entries.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,createKeySet,com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:createKeySet(),110,113,"/**
* Returns an immutable set of keys based on fullness state.
* If map is full, returns the key set from the key-to-index mapping;
* otherwise, delegates to superclass implementation.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,<init>,com.google.common.collect.ImmutableBiMap$SerializedForm:<init>(com.google.common.collect.ImmutableBiMap),623,625,"/**
* Constructs a SerializedForm instance from an ImmutableBiMap. 
* @param bimap immutable key-value map to serialize
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,writeReplace,com.google.common.collect.ImmutableMap:writeReplace(),1311,1314,"/**
* Creates a serialized form of this object. 
* @return Serialized representation or null if not applicable 
*/","* Returns a serializable form of this object. Non-public subclasses should not override this
   * method. Publicly-accessible subclasses must override this method and should return a subclass
   * of SerializedForm whose readResolve() method returns objects of the subclass type.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,iterator,com.google.common.collect.ImmutableMapKeySet:iterator(),48,51,"/**
* Returns an unmodifiable iterator over keys in the underlying map.
* @return Iterator instance or null if map is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,hashCode,com.google.common.collect.ExplicitOrdering:hashCode(),61,64,"/**
* Computes hash code from rank map.
* @return Hash code value based on rank map contents
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,hashCode,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:hashCode(),1157,1161,"/**
* Returns the hash code of this immutable map.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,hashCode,com.google.common.collect.ImmutableMapEntrySet:hashCode(),122,125,"/**
* Calculates the hash code of this object based on its internal map.
* @return The hash code value.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,createAsList,com.google.common.collect.RegularImmutableSortedSet:createAsList(),314,317,"/**
* Creates an immutable list representation of this collection.
* @return List containing all elements or a sorted list if size > 1
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$Builder:<init>(int),485,491,"/**
* Initializes set builder with specified capacity.
* @param capacity minimum size that the set should maintain
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copy,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:copy(),782,785,"/**
* Creates a deep copy of this set builder.
* @return new SetBuilderImpl instance with same configuration
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,comparator,com.google.common.collect.ImmutableSortedAsList:comparator(),43,46,"/**
 * Returns a comparator used to compare elements in this collection.
 * The returned comparator is delegated from the underlying collection.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,indexOf,com.google.common.collect.ImmutableSortedAsList:indexOf(java.lang.Object),50,62,"/**
* Searches ImmutableSortedSet for the given target object.
* @param target Object to search for
* @return Index of target if found, -1 otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,asMapOfRanges,com.google.common.collect.ImmutableRangeMap:asMapOfRanges(),307,315,"/**
* Converts this collection into a sorted map of ranges.
* @return A map where each key is a contiguous range and the value is the corresponding aggregate. 
*         If there are no ranges, an empty map is returned.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,<init>,com.google.common.collect.ImmutableSortedMap$SerializedForm:<init>(com.google.common.collect.ImmutableSortedMap),1147,1150,"/**
* Constructs a SerializedForm from an ImmutableSortedMap.
* @param sortedMap map containing key-value pairs to serialize
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,combine,com.google.common.collect.ImmutableSortedSet$Builder:combine(com.google.common.collect.ImmutableSet$Builder),571,580,"/**
* Merges elements from another ImmutableSet.Builder into this one.
* @param builder Builder to combine with
* @return this Builder instance for method chaining
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,of,"com.google.common.collect.ImmutableTable:of(java.lang.Object,java.lang.Object,java.lang.Object)",108,110,"/**
* Creates an immutable table with a single entry.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value the table's value
*/",Returns an immutable table containing a single cell.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,<init>,com.google.common.collect.SingletonImmutableTable:<init>(com.google.common.collect.Table$Cell),43,45,"/**
* Initializes an immutable table with a single cell.
* @param cell Cell object containing row key, column key, and value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toString,com.google.common.collect.FluentIterable:toString(),336,339,"/**
* Returns a string representation of this instance, 
* delegated to its underlying object.
*/","* Returns a string representation of this fluent iterable, with the format {@code [e1, e2, ...,
   * en]}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.joining("", "", ""["", ""]""))}
   * or (less efficiently) {@code stream.collect(Collectors.toList()).toString()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,putAll,"com.google.common.collect.ImmutableMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)",279,301,"/**
* Adds a collection of values to the map under a given key.
* @param key unique key identifier
* @param values iterable of values to store
*/","* Stores a collection of values with the same key in the built multimap.
     *
     * @throws NullPointerException if {@code key}, {@code values}, or any element in {@code values}
     *     is null. The builder is left in an invalid state.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,pathNotFound,"com.google.common.io.MoreFiles:pathNotFound(java.nio.file.Path,java.util.Collection)",806,853,"/**
* Resolves a NoSuchFileException for a given file path, ensuring it matches the expected file.
* @param path the file path to verify
* @param exceptions collection of IOExceptions containing the exception to check
* @return the original NoSuchFileException if valid, or null otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getOnlyElement,"com.google.common.collect.Iterables:getOnlyElement(java.lang.Iterable,java.lang.Object)",274,278,"/**
* Retrieves the single element from an iterable. If empty or null, returns default value.
* @param iterable collection of elements
* @param defaultValue to return if iterable is empty or null
* @return single element from iterable or default value
*/","* Returns the single element contained in {@code iterable}, or {@code defaultValue} if the
   * iterable is empty.
   *
   * <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code
   * stream.collect(MoreCollectors.toOptional()).orElse(defaultValue)}.
   *
   * @throws IllegalArgumentException if the iterator contains multiple elements",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,throwCause,"com.google.common.util.concurrent.SimpleTimeLimiter:throwCause(java.lang.Exception,boolean)",221,239,"/**
* Throws the underlying cause of an exception or error, optionally combining stack traces.
* @param e the original exception or error
* @param combineStackTraces whether to merge stack traces from the cause and original exception
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getLast,"com.google.common.collect.Iterables:getLast(java.lang.Iterable,java.lang.Object)",873,886,"/**
* Retrieves the last element from an iterable, or a default value if empty.
* @param iterable input collection (may be null)
* @param defaultValue returned when iterable is empty
* @return T last element of iterable, or defaultValue
*/","* Returns the last element of {@code iterable} or {@code defaultValue} if the iterable is empty.
   * If {@code iterable} is a {@link List} with {@link RandomAccess} support, then this operation is
   * guaranteed to be {@code O(1)}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code Streams.findLast(stream).orElse(defaultValue)}
   *
   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),
   * consider using {@code collection.getLast()} instead. Note that if the collection is empty,
   * {@code getLast()} throws a {@code NoSuchElementException}, while this method returns the
   * default value.
   *
   * @param defaultValue the value to return if {@code iterable} is empty
   * @return the last element of {@code iterable} or the default value
   * @since 3.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,next,com.google.common.collect.Iterators$ConcatenatedIterator:next(),1432,1441,"/**
* Retrieves the next element from the iteration sequence.
* @throws NoSuchElementException if no more elements are available
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,iterator,com.google.common.collect.EmptyContiguousSet:iterator(),97,100,"/**
* Returns an unmodifiable iterator over this collection's elements.
* This implementation simply returns an empty iterator, as this collection is unmodifiable.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,descendingIterator,com.google.common.collect.EmptyContiguousSet:descendingIterator(),102,106,"/**
* Returns an unmodifiable iterator iterating over elements in descending order.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,<init>,com.google.common.collect.Iterators$ConcatenatedIterator:<init>(java.util.Iterator),1377,1380,"/**
* Initializes ConcatenatedIterator with an iterable of iterators.
* @param metaIterator iterable of iterators to concatenate
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,add,com.google.common.collect.LinkedHashMultimap$ValueSet:add(java.lang.Object),480,501,"/**
* Adds a value to the multimap.
* @param value value to be added
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,deleteFromMultimap,com.google.common.collect.LinkedHashMultimap:deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry),153,156,"/**
* Removes a key-value pair from a multimap.
* @param entry ValueEntry object containing predecessor and successor in the multimap
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,clear,com.google.common.collect.LinkedHashMultimap:clear(),608,612,"/**
* Clears the multimap and calls superclass clear method.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,valueSpliterator,com.google.common.collect.LinkedHashMultimap:valueSpliterator(),603,606,"/**
* Returns a spliterator for mapping entries to their values.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,put,"com.google.common.collect.LinkedListMultimap:put(java.lang.Object,java.lang.Object)",604,609,"/**
* Inserts or updates a key-value pair into the map.
* @param key unique key for the entry
* @param value associated value for the entry
*/","* Stores a key-value pair in the multimap.
   *
   * @param key key to store in the multimap
   * @param value value to store in the multimap
   * @return {@code true} always",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,partition,"com.google.common.collect.Lists:partition(java.util.List,int)",701,707,"/**
* Partitions a list into chunks of specified size.
* @param list input list to partition
* @param size chunk size
* @return List of sub-lists or null if invalid parameters
*/","* Returns consecutive {@linkplain List#subList(int, int) sublists} of a list, each of the same
   * size (the final list may be smaller). For example, partitioning a list containing {@code [a, b,
   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer list
   * containing two inner lists of three and two elements, all in the original order.
   *
   * <p>The outer list is unmodifiable, but reflects the latest state of the source list. The inner
   * lists are sublist views of the original list, produced on demand using {@link List#subList(int,
   * int)}, and are subject to all the usual caveats about modification as explained in that API.
   *
   * @param list the list to return consecutive sublists of
   * @param size the desired size of each sublist (the last may be smaller)
   * @return a list of consecutive sublists
   * @throws IllegalArgumentException if {@code partitionSize} is nonpositive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardIndexOf,com.google.common.collect.ForwardingList:standardIndexOf(java.lang.Object),159,161,"/**
* Finds index of specified element in list.
* @param element object to search for
* @return non-negative index if found, -1 otherwise
*/","* A sensible default implementation of {@link #indexOf}, in terms of {@link #listIterator()}. If
   * you override {@link #listIterator()}, you may wish to override {@link #indexOf} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,indexOf,com.google.common.collect.ImmutableList:indexOf(java.lang.Object),425,428,"/**
* Returns index of specified object in this list or -1 if not found.
* @param object the object to search for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardLastIndexOf,com.google.common.collect.ForwardingList:standardLastIndexOf(java.lang.Object),170,172,"/**
* Returns the standard last index of the given element in this list.
* @param element object to search for
*/","* A sensible default implementation of {@link #lastIndexOf}, in terms of {@link
   * #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override
   * {@link #lastIndexOf} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,lastIndexOf,com.google.common.collect.ImmutableList:lastIndexOf(java.lang.Object),430,433,"/**
* Searches for the specified object in this list and returns its last index.
* @param object the object to search for
* @return index of the last occurrence or -1 if not found",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,putIfAbsent,"com.google.common.collect.ForwardingConcurrentMap:putIfAbsent(java.lang.Object,java.lang.Object)",49,53,"/**
* Inserts value if absent; returns existing or null.
* @param key unique map key
* @param value value to insert (or update)
* @return previous value (null if not present)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,remove,"com.google.common.collect.ForwardingConcurrentMap:remove(java.lang.Object,java.lang.Object)",55,59,"/**
* Removes an entry from the map by its key or value.
* @param key unique identifier of the entry to remove (or null)
* @param value associated value of the entry to remove (or null)
* @return true if removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,replace,"com.google.common.collect.ForwardingConcurrentMap:replace(java.lang.Object,java.lang.Object)",61,65,"/**
* Replaces the value associated with the given key in this map.
* @param key unique identifier for replacement
* @param value new value to associate with the key
* @return previous mapped value or null if not found (null-allowed) 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,replace,"com.google.common.collect.ForwardingConcurrentMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)",67,72,"/**
* Replaces a value in the map with a new one.
* @param key unique key for replacement
* @param oldValue value to be replaced
* @param newValue new value to replace with
* @return true if replacement was successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,contains,com.google.common.collect.MapMakerInternalMap$Values:contains(java.lang.Object),2727,2730,"/**
* Checks if map contains specified value.
* @param o object to search for
* @return true if value is present, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,advance,com.google.common.collect.MapMakerInternalMap$HashIterator:advance(),2541,2562,"/**
* Advances to the next segment in the chain, updating table and index pointers.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2111,2116,"/**
* Initializes a strong key dummy value segment.
* @param map the internal map
* @param initialCapacity the initial capacity of the segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2022,2028,"/**
* Initializes a strong key-strong value segment for the given map.
* @param map internal map to initialize
* @param initialCapacity initial capacity of this segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2048,2053,"/**
* Initializes a strong key, weak value segment for the internal map.
* @param map reference to the internal map
* @param initialCapacity initial capacity of this segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2245,2249,"/**
* Initializes a segment with weak keys and dummy values.
* @param map internal map instance
* @param initialCapacity initial capacity for this segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2135,2140,"/**
* Initializes a strong value segment with weak keys.
* @param map the internal map
* @param initialCapacity the initial capacity
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2175,2179,"/**
* Initializes a WeakKeyWeakValueSegment with the given internal map and capacity.
* @param map internal map to manage segment
* @param initialCapacity initial size of this segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getEntry,"com.google.common.collect.MapMakerInternalMap$Segment:getEntry(java.lang.Object,int)",1413,1433,"/**
* Retrieves an entry from the map by key and hash.
* @param key object to search for
* @param hash hash value of the entry
* @return Entry E or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,preWriteCleanup,com.google.common.collect.MapMakerInternalMap$Segment:preWriteCleanup(),1998,2001,"/**
* Performs locked cleanup before writing.","* Performs routine cleanup prior to executing a write. This should be called every time a write
     * thread acquires the segment lock, immediately after acquiring the lock.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,runCleanup,com.google.common.collect.MapMakerInternalMap$Segment:runCleanup(),2003,2005,"/**
* Performs cleanup tasks with locked resources.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap:clear(),2489,2494,"/**
* Clears all segments and their contained elements.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)",640,646,"/**
* Creates a copy of the given entry with updated next pointer.
* @param segment associated segment
* @param entry original entry to copy
* @param newNext potential new next entry
* @return copied StrongKeyDummyValueEntry instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)",448,457,"/**
* Creates a deep copy of the given entry.
* @param segment associated segment
* @param entry original entry to copy
* @param newNext optional new next entry in copied entry
* @return copied StrongKeyStrongValueEntry or null if not created
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)",545,556,"/**
* Creates a copy of the given entry for the specified segment.
* @param segment StrongKeyWeakValueSegment instance
* @param entry original entry to be copied
* @param newNext potential next entry in the copied list
* @return copied StrongKeyWeakValueEntry or null if entry is collected.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$LinkedWeakKeyWeakValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)",900,904,"/**
* Constructs a linked weak key-weak value entry.
* @param queue reference queue for garbage collection
* @param key key associated with the entry
* @param hash hash code of the key
* @param next next entry in the linked list
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$SortedAsMapView:comparator(),995,998,"/**
* Returns the comparator used to order elements in this set.
* @return comparator instance or null if not specified
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$SortedAsMapView:keySet(),1000,1003,"/**
* Returns a set of keys in sorted order.
* @return Set of keys or empty set if backing map is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstKey,com.google.common.collect.Maps$SortedAsMapView:firstKey(),1020,1024,"/**
* Retrieves the first key from the underlying map.
* @return The first key in the map or null if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastKey,com.google.common.collect.Maps$SortedAsMapView:lastKey(),1026,1030,"/**
* Retrieves the last key from the underlying set. 
* @return Last key in the set or null if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,last,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:last(),3174,3178,"/**
 * Retrieves the key of the last element in this collection.
 * @return Last key or null if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,first,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:first(),3168,3172,"/**
* Retrieves the first key in the map.
* @return The first key or null if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$KeySet:remove(java.lang.Object),3953,3960,"/**
* Removes an object from the collection.
* @param o object to be removed, or null if not present
* @return true if object was successfully removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$SortedKeySet:comparator(),3987,3990,"/**
* Returns a comparator for this map's keys.
* @return null if not explicitly set, otherwise a comparator to order keys.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,first,com.google.common.collect.Maps$SortedKeySet:first(),4007,4011,"/**
* Retrieves the first key-value pair's key from an underlying map. 
* @return First key in the map or null if empty 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,last,com.google.common.collect.Maps$SortedKeySet:last(),4013,4017,"/**
* Retrieves the last key from the underlying map. 
* @return The last key in the map or null if it's empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMapDifference.java,entriesOnlyOnLeft,com.google.common.collect.SortedMapDifference:entriesOnlyOnLeft(),33,34,"/**
* Returns a sorted map of entries that exist only on the left side.
* @return Sorted map of key-value pairs unique to the left subtree.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMapDifference.java,entriesDiffering,com.google.common.collect.SortedMapDifference:entriesDiffering(),42,43,"/**
* Returns a map of key-value pairs differing between this and another sorted map.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingIterator,com.google.common.collect.Maps$NavigableKeySet:descendingIterator(),4067,4070,"/**
* Returns an iterator over the elements in this set in reverse order.
* @return Iterator object to traverse the set in descending order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$NavigableKeySet:subSet(java.lang.Object,java.lang.Object)",4081,4084,"/**
* Returns a subset of keys within the specified range.
* @param fromElement start key (inclusive)
* @param toElement end key (inclusive)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,com.google.common.collect.Maps$NavigableKeySet:headSet(java.lang.Object),4091,4094,"/**
* Returns a view of the portion of this sorted set whose elements are strictly less than {@code toElement}.
* @param toElement the upper bound (exclusive)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,com.google.common.collect.Maps$NavigableKeySet:tailSet(java.lang.Object),4101,4104,"/**
* Returns a sorted set containing all elements greater than or equal to the specified fromElement.
* @param fromElement the lower bound of the set (inclusive)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,ceilingKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:ceilingKey(java.lang.Object),2280,2283,"/**
* Returns the smallest key not less than the given key.
* @param key key to find the ceiling for
* @return ceiling key or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingKeySet,com.google.common.collect.Maps$TransformedEntriesNavigableMap:descendingKeySet(),2285,2288,"/**
* Returns a set of keys in descending order.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,floorKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:floorKey(java.lang.Object),2305,2308,"/**
* Returns the greatest key less than or equal to the given key.
* @param key key value to find floor for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,higherKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:higherKey(java.lang.Object),2325,2328,"/**
* Retrieves the highest key in the map that is greater than the given key.
* @param key the comparison key
* @return the highest key or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lowerKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:lowerKey(java.lang.Object),2340,2343,"/**
* Finds and returns the lower bound key in the map.
* @param key The key to find the lower bound for
* @return Lower bound key or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,navigableKeySet,com.google.common.collect.Maps$TransformedEntriesNavigableMap:navigableKeySet(),2345,2348,"/**
* Returns a navigable set view of keys contained in this map.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,comparator,com.google.common.collect.ForwardingSortedMap:comparator(),68,71,"/**
* Returns the comparator associated with this map's backing store.
* @return Comparator instance or null if not set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,firstKey,com.google.common.collect.ForwardingSortedMap:firstKey(),73,77,"/**
* Returns the first key in the backing map.
* @return The first key, or null if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,headMap,com.google.common.collect.ForwardingSortedMap:headMap(java.lang.Object),79,82,"/**
* Returns a sorted map view of all entries in this map with keys less than {@code toKey}.
* @param toKey key up to which entries are included
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,lastKey,com.google.common.collect.ForwardingSortedMap:lastKey(),84,88,"/**
* Retrieves the last key from this map-like object.
* @return The last key or null if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,subMap,"com.google.common.collect.ForwardingSortedMap:subMap(java.lang.Object,java.lang.Object)",90,93,"/**
* Returns a subset of map entries from the given keys.
* @param fromKey inclusive start key
* @param toKey exclusive end key
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,tailMap,com.google.common.collect.ForwardingSortedMap:tailMap(java.lang.Object),95,98,"/**
* Returns a view of the map tail starting at the specified key.
* @param fromKey the key to start the view from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,delegate,com.google.common.collect.ForwardingMap:delegate(),64,65,"/**
 * Delegates to subclasses to fetch data.
 * @return Data map or null by default implementation
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,doDifference,"com.google.common.collect.Maps:doDifference(java.util.Map,java.util.Map,com.google.common.base.Equivalence,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",575,607,"/**
* Compares two maps and populates difference maps. 
* @param left the first map
* @param right the second map
* @param valueEquivalence equivalence relation for values
* @param onlyOnLeft keys present in left but not right
* @param onlyOnRight keys present in right but not left
* @param onBoth keys present in both maps with equivalent values
* @param differences key-value pairs where values differ",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,"com.google.common.eventbus.EventBus:<init>(java.lang.String,java.util.concurrent.Executor,com.google.common.eventbus.Dispatcher,com.google.common.eventbus.SubscriberExceptionHandler)",190,199,"/**
* Initializes an EventBus instance with the given identifier, executor, dispatcher, and exception handler.
* @param identifier unique event bus identifier
* @param executor thread pool executor for asynchronous processing
* @param dispatcher event dispatching strategy
* @param exceptionHandler error handling mechanism for subscriber exceptions
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,create,com.google.common.collect.TreeRangeMap:create(),63,65,"/**
* Creates an empty TreeRangeMap instance. 
* @return A new, uninitialized instance of TreeRangeMap.","Returns a new, empty {@link TreeRangeMap}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,entryPredicate,com.google.common.collect.FilteredKeyMultimap:entryPredicate(),55,58,"/**
* Creates a predicate that filters entries based on the given key predicate.
* @return A predicate evaluating entries, keyed by the key predicate.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,findMin,"com.google.common.collect.MinMaxPriorityQueue$Heap:findMin(int,int)",601,614,"/**
* Finds the minimum element in a sorted subarray within a larger array.
* @param index starting index of the subarray
* @param len length of the subarray
* @return index of the minimum element or -1 if out of bounds
*/","* Returns the index of minimum value between {@code index} and {@code index + len}, or {@code
     * -1} if {@code index} is greater than {@code size}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,getMaxElementIndex,com.google.common.collect.MinMaxPriorityQueue:getMaxElementIndex(),324,335,"/**
* Returns index of maximum element in queue or max heap.
*/",Returns the index of the max element.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,peekFirst,com.google.common.collect.MinMaxPriorityQueue:peekFirst(),360,362,"/**
* Returns the first element without removing it from the collection.
* @return First element of the collection or null if empty
*/","* Retrieves, but does not remove, the least element of this queue, or returns {@code null} if the
   * queue is empty.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,bubbleUpAlternatingLevels,"com.google.common.collect.MinMaxPriorityQueue$Heap:bubbleUpAlternatingLevels(int,java.lang.Object)",582,595,"/**
* Moves an element up the heap by alternating between parent and grandparent indices.
* @param index current index in the heap
* @param x element to be moved up
* @return new index of the moved element
*/","* Bubbles a value from {@code index} up the levels of this heap, and returns the index the
     * element ended up at.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,verifyIndex,com.google.common.collect.MinMaxPriorityQueue$Heap:verifyIndex(int),730,744,"/**
* Verifies the binary heap property for a given index.
* @param i index to verify
* @return true if the index satisfies the heap property, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,hasNext,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:hasNext(),781,786,"/**
* Checks if there are more elements in the iteration.
* @return true if more elements exist, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,next,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:next(),788,805,"/**
* Returns the next element from the iterator, advancing or replenishing as needed.
* @throws NoSuchElementException if the iterator has reached the end of the collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,build,com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:build(com.google.common.collect.Multimap),479,483,"/**
* Builds a sorted set multimap from an existing multimap instance.
* @param multimap the input multimap to transform
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$UnmodifiableListMultimap:get(java.lang.Object),804,807,"/**
* Retrieves list of values associated with the given key.
* @param key unique identifier or attribute name
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:get(java.lang.Object),834,841,"/**
* Retrieves a set of values associated with the given key.
* @param key unique identifier
* @return unmodifiable Set of V objects or empty set if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,delegate,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:delegate(),868,871,"/**
* Returns a multimap instance with sorted keys.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,descendingIterator,com.google.common.collect.AbstractSortedMultiset:descendingIterator(),116,118,"/**
* Returns an iterator over elements in reverse order.
* @return Iterator object iterating over elements in descending order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,iterator,com.google.common.collect.ConcurrentHashMultiset:iterator(),553,556,"/**
 * Returns an iterator over elements in this multiset.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,iterator,com.google.common.collect.DescendingMultiset:iterator(),143,146,"/**
* Returns an iterator over the elements in this multiset.
* @return Iterator instance for iterating over elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,iterator,com.google.common.collect.EnumMultiset:iterator(),293,296,"/**
* Returns an iterator over elements in this multiset.
* @return iterator over elements in this multiset
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardIterator,com.google.common.collect.ForwardingMultiset:standardIterator(),263,265,"/**
* Returns an iterator over the elements in this multiset.
*/","* A sensible definition of {@link #iterator} in terms of {@link #entrySet} and {@link
   * #remove(Object)}. If you override either of these methods, you may wish to override {@link
   * #iterator} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iterator,com.google.common.collect.Multisets$ViewMultiset:iterator(),1183,1186,"/**
* Returns an iterator over this collection.
* @return Iterator instance allowing traversal of elements.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,iterator,com.google.common.collect.TreeMultiset:iterator(),542,545,"/**
* Returns an iterator over the elements in this multiset.
* @return iterator implementing multiset-specific iteration logic
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,elementSet,com.google.common.collect.UnmodifiableSortedMultiset:elementSet(),59,62,"/**
* Returns a navigable set view of the elements contained in this collection.
* @return a NavigableSet containing all elements in this collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,comparator,com.google.common.collect.UnmodifiableSortedMultiset:comparator(),49,52,"/**
* Returns a comparator from the delegate instance.
* @return Comparator object to compare elements of type E
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,firstEntry,com.google.common.collect.UnmodifiableSortedMultiset:firstEntry(),77,80,"/**
* Returns the first entry in the map.
* @return Entry object or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,lastEntry,com.google.common.collect.UnmodifiableSortedMultiset:lastEntry(),82,85,"/**
* Returns the last entry in this map.
* @return Last Entry object or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,count,com.google.common.collect.ForwardingMultiset:count(java.lang.Object),59,62,"/**
* Delegates count operation to underlying delegate.
* @param element object to count (may be null)
* @return count of elements, or -1 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,add,"com.google.common.collect.ForwardingMultiset:add(java.lang.Object,int)",64,68,"/**
* Adds an element with specified occurrences to the collection.
* @param element element to be added
* @param occurrences number of times to add the element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,remove,"com.google.common.collect.ForwardingMultiset:remove(java.lang.Object,int)",70,74,"/**
* Removes specified element by its occurrence count.
* @param element object to be removed (may be null)
* @param occurrences number of occurrences to remove
* @return actual number of removals performed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,elementSet,com.google.common.collect.ForwardingMultiset:elementSet(),76,79,"/**
* Returns a set of elements in this collection.
* @return Unmodifiable Set containing all elements in this collection.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,entrySet,com.google.common.collect.ForwardingMultiset:entrySet(),81,84,"/**
* Returns a set of entries in this map.
* @return non-null set of key-value pairs.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,equals,com.google.common.collect.ForwardingMultiset:equals(java.lang.Object),86,89,"/**
* Checks if this object is equal to another.
* @param object object to compare with
* @return true if objects are identical or have the same state, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,hashCode,com.google.common.collect.ForwardingMultiset:hashCode(),91,94,"/**
* Returns hash code based on delegate's implementation.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,setCount,"com.google.common.collect.ForwardingMultiset:setCount(java.lang.Object,int)",96,100,"/**
* Sets the count of an element and returns the new count value.
* @param element the element to update count for
* @param count the new count value
* @return the updated count value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,setCount,"com.google.common.collect.ForwardingMultiset:setCount(java.lang.Object,int,int)",102,106,"/**
* Sets the count of elements in a collection.
* @param element the element to update (ignored)
* @param oldCount previous count
* @param newCount new count
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,toArray,com.google.common.collect.ImmutableCollection:toArray(java.lang.Object[]),199,229,"/**
* Converts this collection to an array.
* @param other Array to populate; must be large enough to hold all elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,concat,"com.google.common.collect.ObjectArrays:concat(java.lang.Object,java.lang.Object[])",89,94,"/**
* Concatenates a single element with an array.
* @param element the element to insert
* @param array the original array
* @return new array containing all elements from the original array and the inserted element
*/","* Returns a new array that prepends {@code element} to {@code array}.
   *
   * @param element the element to prepend to the front of {@code array}
   * @param array the array of elements to append
   * @return an array whose size is one larger than {@code array}, with {@code element} occupying
   *     the first position, and the elements of {@code array} occupying the remaining elements.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,toArrayImpl,"com.google.common.collect.ObjectArrays:toArrayImpl(java.util.Collection,java.lang.Object[])",131,142,"/**
* Converts a Collection to an array of specified type.
* @param c the collection to convert
* @param array the target array (will be resized if necessary)
* @return the converted array or null if array was unsoundly covariant
*/","* Returns an array containing all of the elements in the specified collection; the runtime type
   * of the returned array is that of the specified array. If the collection fits in the specified
   * array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the
   * specified array and the size of the specified collection.
   *
   * <p>If the collection fits in the specified array with room to spare (i.e., the array has more
   * elements than the collection), the element in the array immediately following the end of the
   * collection is set to {@code null}. This is useful in determining the length of the collection
   * <i>only</i> if the caller knows that the collection does not contain any null elements.
   *
   * <p>This method returns the elements in the order they are returned by the collection's
   * iterator.
   *
   * <p>TODO(kevinb): support concurrently modified collections?
   *
   * @param c the collection for which to return an array of elements
   * @param array the array in which to place the collection elements
   * @throws ArrayStoreException if the runtime type of the specified array is not a supertype of
   *     the runtime type of every element in the specified collection",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,toArray,com.google.common.collect.CompactLinkedHashSet:toArray(),231,234,"/**
* Converts this collection to an array.
* @return Array representation of this collection or null if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:toArray(),987,998,"/**
* Returns an array representation of the collection.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,min,com.google.common.collect.Ordering:min(java.lang.Iterable),587,590,"/**
* Finds the smallest element in an iterable collection.
* @param iterable collection of elements to search
*/","* Returns the least of the specified values according to this ordering. If there are multiple
   * least values, the first of those is returned.
   *
   * <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code
   * Collections.min(collection, thisComparator)} instead. Otherwise, use {@code
   * Streams.stream(iterable).min(thisComparator).get()} instead. Note that these alternatives do
   * not guarantee which tied minimum element is returned.
   *
   * @param iterable the iterable whose minimum element is to be determined
   * @throws NoSuchElementException if {@code iterable} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,max,com.google.common.collect.ReverseOrdering:max(java.util.Iterator),83,86,"/**
* Returns maximum element from an iterator using a min-based approach.
* @param iterator iterable containing elements of type E, inheriting from T
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,max,com.google.common.collect.Ordering:max(java.lang.Iterable),678,681,"/**
* Returns maximum element from an iterable.
* @param iterable collection of elements to search
*/","* Returns the greatest of the specified values according to this ordering. If there are multiple
   * greatest values, the first of those is returned.
   *
   * <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code
   * Collections.max(collection, thisComparator)} instead. Otherwise, use {@code
   * Streams.stream(iterable).max(thisComparator).get()} instead. Note that these alternatives do
   * not guarantee which tied maximum element is returned.
   *
   * @param iterable the iterable whose maximum element is to be determined
   * @throws NoSuchElementException if {@code iterable} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,min,com.google.common.collect.ReverseOrdering:min(java.util.Iterator),62,65,"/**
* Returns minimum element from an iterator using forward order.
* @param iterator iterator of elements to search in 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFutureState.java,getOrInitSeenExceptions,com.google.common.util.concurrent.AggregateFutureState:getOrInitSeenExceptions(),84,141,"/**
* Returns the set of unique exceptions seen by this instance, initializing it if necessary.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,toString,com.google.common.collect.ContiguousSet:toString(),250,253,"/**
* Returns string representation of this object based on its contained range.
* @return formatted string representing the range
*/","Returns a shorthand representation of the contents such as {@code ""[1..100]""}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,entryIterator,com.google.common.collect.TreeRangeSet$RangesByUpperBound:entryIterator(),362,400,"/**
* Iterates over ranges with upper bounds within the given window.
* @param upperBoundWindow upper bound window to filter by
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,from,com.google.common.collect.GeneralRange:from(com.google.common.collect.Range),42,57,"/**
* Creates a GeneralRange from an existing Range, preserving bounds and types.
* @param range the input Range to transform
*/",Converts a Range to a GeneralRange.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps:subMap(java.util.NavigableMap,com.google.common.collect.Range)",4496,4519,"/**
* Extracts a sub-map from the given NavigableMap, based on the provided Range.
* @param map input map
* @param range bounds to extract
* @return sub-map or original map if no bounds are specified
*/","* Returns a view of the portion of {@code map} whose keys are contained by {@code range}.
   *
   * <p>This method delegates to the appropriate methods of {@link NavigableMap} (namely {@link
   * NavigableMap#subMap(Object, boolean, Object, boolean) subMap()}, {@link
   * NavigableMap#tailMap(Object, boolean) tailMap()}, and {@link NavigableMap#headMap(Object,
   * boolean) headMap()}) to actually construct the view. Consult these methods for a full
   * description of the returned view's behavior.
   *
   * <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural
   * ordering. {@code NavigableMap} on the other hand can specify a custom ordering via a {@link
   * Comparator}, which can violate the natural ordering. Using this method (or in general using
   * {@code Range}) with unnaturally-ordered maps can lead to unexpected and undefined behavior.
   *
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets:subSet(java.util.NavigableSet,com.google.common.collect.Range)",2300,2323,"/**
* Extracts a subset from the given navigable set within the specified range.
* @param set NavigableSet to extract from
* @param range Range defining the subset boundaries
* @return Subset of K values or null if input set is null and empty
*/","* Returns a view of the portion of {@code set} whose elements are contained by {@code range}.
   *
   * <p>This method delegates to the appropriate methods of {@link NavigableSet} (namely {@link
   * NavigableSet#subSet(Object, boolean, Object, boolean) subSet()}, {@link
   * NavigableSet#tailSet(Object, boolean) tailSet()}, and {@link NavigableSet#headSet(Object,
   * boolean) headSet()}) to actually construct the view. Consult these methods for a full
   * description of the returned view's behavior.
   *
   * <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural
   * ordering. {@code NavigableSet} on the other hand can specify a custom ordering via a {@link
   * Comparator}, which can violate the natural ordering. Using this method (or in general using
   * {@code Range}) with unnaturally-ordered sets can lead to unexpected and undefined behavior.
   *
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,get,com.google.common.collect.RegularImmutableBiMap:get(java.lang.Object),148,151,"/**
* Retrieves value associated with given key from underlying map.
* @param key object to look up (may be null)
* @return value for the key or null if not present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,get,com.google.common.collect.RegularImmutableMap:get(java.lang.Object),260,263,"/**
* Retrieves value associated with given key from underlying data structure.
* @param key object to lookup (null if not present)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,contains,com.google.common.collect.RegularImmutableSortedSet:contains(java.lang.Object),95,102,"/**
* Checks if the set contains a specified object.
* @param o the object to search for
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,get,com.google.common.collect.ImmutableSortedMap:get(java.lang.Object),791,795,"/**
* Retrieves a value from the collection by its key.
* @param key the unique identifier for the desired value
* @return the associated value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,count,com.google.common.collect.RegularImmutableSortedMultiset:count(java.lang.Object),89,93,"/**
* Returns the count of occurrences of the given object in this set.
* @param element object to search for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,lower,com.google.common.collect.ForwardingNavigableSet:lower(java.lang.Object),61,64,"/**
 * Applies lower bound operation to the given element.
 * @param e element to apply lower bound to
 * @return result of lower bound operation or null if input is null
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,floor,com.google.common.collect.ForwardingNavigableSet:floor(java.lang.Object),75,78,"/**
 * Returns the largest element in this set that is less than or equal to the given value.
 * @param e the value whose floor is sought
 * @return the floor of the given value, or null if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,ceiling,com.google.common.collect.ForwardingNavigableSet:ceiling(java.lang.Object),89,92,"/**
* Returns the smallest value greater than or equal to the given element.
* @param e input element",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,higher,com.google.common.collect.ForwardingNavigableSet:higher(java.lang.Object),103,106,"/**
* Returns the higher element from the current iterator.
* @param e The element to compare with the current iterator's elements
* @return The higher element, or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,pollFirst,com.google.common.collect.ForwardingNavigableSet:pollFirst(),117,120,"/**
 * Retrieves and removes the first element from this queue.
 * @return The polled element or null if empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,pollLast,com.google.common.collect.ForwardingNavigableSet:pollLast(),131,134,"/**
* Retrieves and removes the last element from the queue.
* @return The removed element or null if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,descendingSet,com.google.common.collect.ForwardingNavigableSet:descendingSet(),155,158,"/**
* Returns a descending set view of this set.
* @return a NavigableSet containing all elements in reverse order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,descendingIterator,com.google.common.collect.ForwardingNavigableSet:descendingIterator(),176,179,"/**
* Returns an iterator traversing in reverse order.
* @return Iterator over elements of type E or null if not supported by delegate.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,subSet,"com.google.common.collect.ForwardingNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",181,188,"/**
* Returns a subset of elements in this set, between the specified range.
* @param fromElement starting element (inclusive if fromInclusive is true)
* @param fromInclusive whether start is inclusive
* @param toElement ending element (inclusive if toInclusive is true)
* @param toInclusive whether end is inclusive
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,headSet,"com.google.common.collect.ForwardingNavigableSet:headSet(java.lang.Object,boolean)",215,218,"/**
* Returns a set of elements up to but not including (if !inclusive) or including the specified element. 
* @param toElement upper bound of the head set
* @param inclusive true if the bound is included, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,tailSet,"com.google.common.collect.ForwardingNavigableSet:tailSet(java.lang.Object,boolean)",229,232,"/**
* Returns a subset of elements from this set that are greater than or equal to the specified element.
* @param fromElement the lower bound (inclusive if true)
* @param inclusive whether the lower bound is included in the result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,delegate,com.google.common.collect.ForwardingSortedSet:delegate(),67,68,"/**
 * Returns a sorted set of elements to be used by this collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,createElementSet,com.google.common.collect.AbstractSortedMultiset:createElementSet(),56,59,"/**
* Returns a navigable set of elements in this multiset.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,elementSet,com.google.common.collect.DescendingMultiset:elementSet(),52,59,"/**
* Returns a navigable set view of the elements contained in this multiset.
* @return A NavigableSet containing all unique elements, or null if not initialized
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,descendingSet,com.google.common.collect.SortedMultisets$NavigableElementSet:descendingSet(),123,126,"/**
* Returns a set of elements in descending order.
* @return DescendingNavigableSet containing all elements.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,subSet,"com.google.common.collect.SortedMultisets$NavigableElementSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",143,154,"/**
* Returns a subset of the navigable set within specified bounds.
* @param fromElement starting element (inclusive/exclusive)
* @param fromInclusive whether start is inclusive
* @param toElement ending element (inclusive/exclusive)
* @param toInclusive whether end is inclusive
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,headSet,"com.google.common.collect.SortedMultisets$NavigableElementSet:headSet(java.lang.Object,boolean)",156,160,"/**
* Returns a navigable set of elements less than or equal to the specified element.
* @param toElement upper bound element
* @param inclusive whether to include the upper bound element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,tailSet,"com.google.common.collect.SortedMultisets$NavigableElementSet:tailSet(java.lang.Object,boolean)",162,166,"/**
* Returns a NavigableSet containing elements greater than or equal to the specified 'fromElement', 
* optionally including it.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.StandardTable$ColumnKeySet:size(),693,696,"/**
* Returns the number of elements in this collection.
* @return element count
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,maintainEmptyInvariant,com.google.common.collect.StandardTable$Row:maintainEmptyInvariant(),337,343,"/**
* Maintains empty invariant by updating backing row map and removing empty entries.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$Row:containsKey(java.lang.Object),345,349,"/**
* Checks if a given object key exists in the backing row map.
* @param key object to search for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$Row:get(java.lang.Object),351,355,"/**
* Retrieves a value from the backing row map based on the provided key.
* @param key object to look up in the map
* @return V object associated with the key or null if not found",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.StandardTable$Row:size(),387,391,"/**
* Returns the number of elements in this collection.
* @return The size of the collection, or 0 if it's empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,entryIterator,com.google.common.collect.StandardTable$Row:entryIterator(),393,417,"/**
* Returns an iterator over the map's entries.
* @return Iterator containing map entries or empty iterator if null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,entrySpliterator,com.google.common.collect.StandardTable$Row:entrySpliterator(),419,426,"/**
* Returns a spliterator over the backing row map's entries.
* @return A spliterator yielding Entry objects, or an empty spliterator if the backing map is null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.HashBasedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",149,156,"/**
* Updates a cell with the given value using the specified row and column keys.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value new cell value
* @return previous value or null if not present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.StandardTable$Column:put(java.lang.Object,java.lang.Object)",466,469,"/**
* Puts a value into the table under a given key.
* @param key unique key identifier
* @param value stored data value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.StandardTable$Row:put(java.lang.Object,java.lang.Object)",357,365,"/**
* Inserts or updates a row with the given key and value.
* @param key unique row identifier
* @param value associated data
* @return null if not inserted/updated; otherwise, the new value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowMap,com.google.common.collect.HashBasedTable:rowMap(),802,806,"/**
* Returns a map of rows to column maps, lazily creating it if not already initialized.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowMap,com.google.common.collect.StandardRowSortedTable:rowMap(),85,88,"/**
* Returns a sorted map of rows with column maps.
* @return a SortedMap containing Row keys and Column-based Map values
*/","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link
   * Table} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowKeySet,com.google.common.collect.StandardTable:rowKeySet(),665,668,"/**
* Returns a set of unique row keys.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedAsMap:containsValue(java.lang.Object),1430,1436,"/**
* Checks if a specified value exists in this map's collection of values.
* @param o the value to search for
* @return true if the map contains the value, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entrySet,com.google.common.collect.Synchronized$SynchronizedAsMap:entrySet(),1410,1418,"/**
* Returns a synchronized set of map entries.
* @return Set of synchronized Map.Entry objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:<init>(java.util.NavigableSet,java.lang.Object)",1465,1467,"/**
* Constructs a synchronized navigable set from an existing one.
* @param delegate underlying set
* @param mutex synchronization lock (or null for no locking)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sortedSet,"com.google.common.collect.Synchronized:sortedSet(java.util.SortedSet,java.lang.Object)",302,305,"/**
* Creates a synchronized sorted set from an existing one.
* @param set the original sorted set
* @param mutex synchronization lock or null for no sync
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,add,com.google.common.collect.Synchronized$SynchronizedCollection:add(java.lang.Object),137,142,"/**
* Adds an element to the collection while ensuring thread safety.
* @param e element to be added
* @return true if addition was successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addAll,com.google.common.collect.Synchronized$SynchronizedCollection:addAll(java.util.Collection),144,149,"/**
* Adds all elements from the specified collection to this set.
* @param c collection of elements to be added
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedCollection:clear(),151,156,"/**
 * Clears all data and resources associated with this object.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,contains,com.google.common.collect.Synchronized$SynchronizedCollection:contains(java.lang.Object),158,163,"/**
* Checks if the collection contains an object.
* @param o the object to search for, or null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsAll,com.google.common.collect.Synchronized$SynchronizedCollection:containsAll(java.util.Collection),165,170,"/**
* Checks if this collection contains all elements of another collection.
* @param c the collection to check against
* @return true if this collection contains all elements, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedCollection:isEmpty(),172,177,"/**
* Checks if the collection is empty.
* @return true if collection contains no elements, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,iterator,com.google.common.collect.Synchronized$SynchronizedCollection:iterator(),179,182,"/**
* Returns an iterator over this collection's elements.
* @return iterator instance delegated from underlying collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,spliterator,com.google.common.collect.Synchronized$SynchronizedCollection:spliterator(),184,189,"/**
* Returns a Spliterator instance for this collection.
* The underlying spliterator is synchronized on mutex. 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,stream,com.google.common.collect.Synchronized$SynchronizedCollection:stream(),191,196,"/**
* Returns a stream of elements from this collection.
* @return A sequential Stream containing the elements from this collection.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,parallelStream,com.google.common.collect.Synchronized$SynchronizedCollection:parallelStream(),198,203,"/**
* Returns a parallel stream from this stream's underlying data source.
* Synchronization ensures thread-safety when accessing shared resources.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forEach,com.google.common.collect.Synchronized$SynchronizedCollection:forEach(java.util.function.Consumer),205,210,"/**
* Executes the provided consumer on each element in this collection.
* @param action Consumer function to apply to each element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedCollection:remove(java.lang.Object),212,217,"/**
* Removes an object from the collection.
* @param o object to be removed; may be null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedCollection:removeAll(java.util.Collection),219,224,"/**
* Removes all elements from the collection.
* @param c collection to remove elements from
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,retainAll,com.google.common.collect.Synchronized$SynchronizedCollection:retainAll(java.util.Collection),226,231,"/**
* Synchronized implementation of Collection's retainAll operation.
* @param c collection to filter against",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeIf,com.google.common.collect.Synchronized$SynchronizedCollection:removeIf(java.util.function.Predicate),233,238,"/**
* Removes elements from this collection that match the specified predicate.
* @param filter predicate to evaluate elements against
* @return true if any elements were removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedCollection:size(),240,245,"/**
* Returns the size of the underlying collection.
* Synchronized to ensure thread safety.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedCollection:toArray(),247,252,"/**
* Returns an array representation of this object collection.
* @return Array containing elements or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedCollection:toArray(java.lang.Object[]),254,260,"/**
* Converts an iterable to an array, synchronizing access via the mutex.
* @param a the array to fill or null to create a new one
* @return the resulting array of type T
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedList:delegate(),375,378,"/**
* Delegates to superclass's list implementation.
* @return List of type E or null if not implemented by superclass
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedMultiset:delegate(),506,509,"/**
* Delegates to superclass's multiset implementation.
* @return the underlying multiset instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedQueue:delegate(),1852,1855,"/**
* Delegates to superclass to retrieve queue instance. 
* @return Queue of type E or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSet:delegate(),277,280,"/**
* Delegates to superclass's set of elements.
* @return Set of E objects (cast from superclass result)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedEntry:equals(java.lang.Object),1803,1808,"/**
* Synchronized implementation of equals() that delegates to the underlying object.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedEntry:hashCode(),1810,1815,"/**
* Computes and returns the hash code of this object.
* Synchronized to ensure consistent results across multi-threaded access.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getKey,com.google.common.collect.Synchronized$SynchronizedEntry:getKey(),1817,1822,"/**
* Returns the key associated with this object, synchronized to prevent concurrent access.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getValue,com.google.common.collect.Synchronized$SynchronizedEntry:getValue(),1824,1829,"/**
* Returns the value synchronizing on a mutex to ensure thread safety.
* @return The wrapped object's value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setValue,com.google.common.collect.Synchronized$SynchronizedEntry:setValue(java.lang.Object),1831,1836,"/**
* Sets the value with thread-safe synchronization.
* @param value new value to set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedBiMap:delegate(),1358,1361,"/**
* Returns the underlying Bimap instance.
* @return The BiMap object used by this class
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedMap:clear(),1078,1083,"/**
* Clears user data in a thread-safe manner.
* @throws Exception if an error occurs during clearing
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsKey,com.google.common.collect.Synchronized$SynchronizedMap:containsKey(java.lang.Object),1085,1090,"/**
* Checks if map contains a specific key.
* @param key object to search for in the map
* @return true if key is present, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedMap:containsValue(java.lang.Object),1092,1097,"/**
* Checks if map contains specified value.
* @param value object to search in map
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entrySet,com.google.common.collect.Synchronized$SynchronizedMap:entrySet(),1099,1107,"/**
* Returns a set of map entries in this map.
* @return Set of key-value pairs or empty set if none exist
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forEach,com.google.common.collect.Synchronized$SynchronizedMap:forEach(java.util.function.BiConsumer),1109,1114,"/**
* Executes a given consumer on each entry in the map.
* @param action BiConsumer to process key-value pairs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedMap:get(java.lang.Object),1116,1121,"/**
* Returns value associated with given key.
* @param key object to look up in cache
* @return cached value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getOrDefault,"com.google.common.collect.Synchronized$SynchronizedMap:getOrDefault(java.lang.Object,java.lang.Object)",1123,1128,"/**
* Retrieves value associated with the given key or returns default value if not found.
* @param key object to look up in map
* @param defaultValue default value to return if key is not present
* @return V value associated with key or default value, or null if both are null",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedMap:isEmpty(),1130,1135,"/**
* Checks if the underlying collection is empty.
* @return true if empty, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keySet,com.google.common.collect.Synchronized$SynchronizedMap:keySet(),1137,1145,"/**
* Returns a set of keys in the map, lazily initializing it if necessary.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,put,"com.google.common.collect.Synchronized$SynchronizedMap:put(java.lang.Object,java.lang.Object)",1147,1152,"/**
* Puts a new value associated with the given key into the map.
* @param key unique map key
* @param value associated value to be stored
* @return previous value for this key or null if not present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putIfAbsent,"com.google.common.collect.Synchronized$SynchronizedMap:putIfAbsent(java.lang.Object,java.lang.Object)",1154,1159,"/**
* Atomically puts a value if absent, returning existing or null.
* @param key unique identifier
* @param value new value to put
* @return existing value or null if not present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replace,"com.google.common.collect.Synchronized$SynchronizedMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)",1161,1166,"/**
* Replaces existing value with new one in map.
* @param key unique key identifier
* @param oldValue old value to be replaced
* @param newValue new value to replace with
* @return true if replacement was successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replace,"com.google.common.collect.Synchronized$SynchronizedMap:replace(java.lang.Object,java.lang.Object)",1168,1173,"/**
* Replaces a value in the map with a given key.
* @param key unique identifier for replacement
* @param value new value to be stored
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,computeIfAbsent,"com.google.common.collect.Synchronized$SynchronizedMap:computeIfAbsent(java.lang.Object,java.util.function.Function)",1175,1180,"/**
* Synchronized computation of value in cache if absent.
* @param key unique cache key
* @param mappingFunction function to compute value if not cached
* @return computed value or null if already cached
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,computeIfPresent,"com.google.common.collect.Synchronized$SynchronizedMap:computeIfPresent(java.lang.Object,java.util.function.BiFunction)",1182,1189,"/**
* Computes a new value if present in map, applying provided function.
* @param key unique key
* @param remappingFunction BiFunction to apply on existing value
* @return new value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,compute,"com.google.common.collect.Synchronized$SynchronizedMap:compute(java.lang.Object,java.util.function.BiFunction)",1191,1198,"/**
 * Computes a value for the given key using the provided remapping function.
 * @param key unique identifier
 * @param remappingFunction function to compute new value if existing is null
 * @return computed value or null if not found/created
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,merge,"com.google.common.collect.Synchronized$SynchronizedMap:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)",1200,1210,"/**
* Merges a user profile by ID with a new value and optional remapping function.
* @param key unique user identifier
* @param value UserProfile object to merge
* @param remappingFunction optional function to transform existing values
* @return merged UserProfile object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,com.google.common.collect.Synchronized$SynchronizedMap:putAll(java.util.Map),1212,1217,"/**
* Adds all key-value pairs from the provided map to this collection.
* @param map Map containing elements to add
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceAll,com.google.common.collect.Synchronized$SynchronizedMap:replaceAll(java.util.function.BiFunction),1219,1224,"/**
* Replaces all values in the map with new ones using a given transformation function.
* @param function BiFunction to apply to each entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedMap:remove(java.lang.Object),1226,1231,"/**
* Removes an object from the map using the provided key.
* @param key unique identifier of the object to be removed
* @return the removed object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedMap:remove(java.lang.Object,java.lang.Object)",1233,1238,"/**
* Removes an entry from the cache based on key-value pair.
* @param key unique identifier to find and remove
* @param value associated value to match for removal
* @return true if entry was removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedMap:size(),1240,1245,"/**
* Returns the number of elements in this collection.
* Synchronization ensures thread-safe access to underlying data.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedMap:values(),1247,1255,"/**
* Returns a collection of values associated with this map.
* @return unmodifiable collection of values or null if not initialized
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedMap:equals(java.lang.Object),1257,1265,"/**
* Checks equality with another object, synchronizing on mutex to ensure thread-safety.
* @param o the object to compare
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedMap:hashCode(),1267,1272,"/**
* Returns hash code of this object, ensuring synchronization.
* @return integer hash code
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSortedMap:delegate(),1289,1292,"/**
* Delegates to parent collection's iterator.
* @return SortedMap view of this collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedListMultimap:delegate(),797,800,"/**
* Returns a list multimap instance from parent class.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedMultimap:size(),612,617,"/**
* Returns the size of the underlying collection.
* Synchronized access ensures thread safety.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedMultimap:isEmpty(),619,624,"/**
* Checks if the underlying collection is empty.
* @return true if the collection contains no elements, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsKey,com.google.common.collect.Synchronized$SynchronizedMultimap:containsKey(java.lang.Object),626,631,"/**
* Checks if a map contains a given key.
* @param key object to search for
* @return true if the map contains the key, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedMultimap:containsValue(java.lang.Object),633,638,"/**
* Checks if a key-value pair exists in the map.
* @param value the object to search for
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsEntry,"com.google.common.collect.Synchronized$SynchronizedMultimap:containsEntry(java.lang.Object,java.lang.Object)",640,645,"/**
* Checks if map entry exists with specified key and value.
* @param key unique object identifier
* @param value associated object value
* @return true if entry found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedMultimap:get(java.lang.Object),647,652,"/**
* Retrieves collection of values associated with a given key.
* @param key unique identifier for the collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,put,"com.google.common.collect.Synchronized$SynchronizedMultimap:put(java.lang.Object,java.lang.Object)",654,659,"/**
* Synchronized insertion of a key-value pair into the map.
* @param key unique identifier for the entry
* @param value associated data for the entry
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,"com.google.common.collect.Synchronized$SynchronizedMultimap:putAll(java.lang.Object,java.lang.Iterable)",661,666,"/**
* Adds all elements from an iterable to a map with the given key.
* @param key unique map key
* @param values iterable of values to add
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,com.google.common.collect.Synchronized$SynchronizedMultimap:putAll(com.google.common.collect.Multimap),668,673,"/**
* Adds all entries from a multimap to this cache.
* @param multimap map of key-value pairs to add
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",675,680,"/**
* Replaces values in a collection with the specified key.
* @param key unique identifier for the collection
* @param values new values to be replaced
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedMultimap:remove(java.lang.Object,java.lang.Object)",682,687,"/**
* Removes an entry from the map synchronizing on the mutex.
* @param key object to be removed (or null for no-op)
* @param value object to be removed (or null for no-op)
* @return true if removal was successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedMultimap:removeAll(java.lang.Object),689,694,"/**
* Removes all elements from the collection associated with a given key.
* @param key unique identifier to remove associated elements for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedMultimap:clear(),696,701,"/**
* Clears all data in the underlying storage.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keySet,com.google.common.collect.Synchronized$SynchronizedMultimap:keySet(),703,711,"/**
* Returns a set of keys in the underlying map.
* @return Set of unique keys or an empty set if none exist
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedMultimap:values(),713,721,"/**
* Returns a synchronized collection of map values.
* @return Collection of values or cached result if already computed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entries,com.google.common.collect.Synchronized$SynchronizedMultimap:entries(),723,731,"/**
* Returns a collection of key-value pairs in the map.
* @return Collection of Map.Entry objects or an empty collection if not initialized
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forEach,com.google.common.collect.Synchronized$SynchronizedMultimap:forEach(java.util.function.BiConsumer),733,738,"/**
* Executes the provided consumer on each entry in the map.
* @param action BiConsumer to process key-value pairs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedMultimap:equals(java.lang.Object),760,770,"/**
* Compares this object to another for equality, using the underlying delegate. 
* @param o object to compare with
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedMultimap:hashCode(),772,777,"/**
 * Computes and returns the hash code of this object.
 * The result is synchronized to ensure consistency across threads.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSetMultimap:delegate(),842,845,"/**
* Returns the underlying multimap delegate.
* @return The SetMultimap instance that is being delegated to.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,contains,"com.google.common.collect.Synchronized$SynchronizedTable:contains(java.lang.Object,java.lang.Object)",2052,2057,"/**
* Checks if data exists at specified row and column keys.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @return true if data found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsRow,com.google.common.collect.Synchronized$SynchronizedTable:containsRow(java.lang.Object),2059,2064,"/**
* Checks if a row exists by key.
* @param rowKey unique row identifier or null to check for existence
* @return true if row found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsColumn,com.google.common.collect.Synchronized$SynchronizedTable:containsColumn(java.lang.Object),2066,2071,"/**
* Checks if a column exists by its key.
* @param columnKey unique identifier of the column to check
* @return true if column exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedTable:containsValue(java.lang.Object),2073,2078,"/**
* Checks if a given object is present in the underlying map.
* @param value the object to search for
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,"com.google.common.collect.Synchronized$SynchronizedTable:get(java.lang.Object,java.lang.Object)",2080,2085,"/**
* Retrieves value from cache using provided row and column keys.
* @param rowKey unique identifier for the row
* @param columnKey name of the column to fetch
* @return cached value or null if not found",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedTable:isEmpty(),2087,2092,"/**
* Checks whether the collection is empty.
* @return true if the collection is empty, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedTable:size(),2094,2099,"/**
* Returns the number of elements in this collection.
* Ensures thread safety by synchronizing on the mutex.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedTable:clear(),2101,2106,"/**
 * Clears all data in this instance.
 * 
 * Synchronizes access to ensure thread safety.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,put,"com.google.common.collect.Synchronized$SynchronizedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",2108,2116,"/**
* Puts a value into the database with specified row, column keys.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value value to be stored
* @return the stored value or null if not successful
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,com.google.common.collect.Synchronized$SynchronizedTable:putAll(com.google.common.collect.Table),2118,2123,"/**
* Synchronizes and delegates all data from a given Table to this instance.
* @param table the Table object containing data to be synchronized
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedTable:remove(java.lang.Object,java.lang.Object)",2125,2130,"/**
* Removes data from the underlying storage by keys.
* @param rowKey unique row identifier or null for all rows
* @param columnKey unique column identifier or null for all columns
* @return value associated with the keys or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,cellSet,com.google.common.collect.Synchronized$SynchronizedTable:cellSet(),2146,2151,"/**
* Returns a synchronized set of cells in the delegate.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,rowKeySet,com.google.common.collect.Synchronized$SynchronizedTable:rowKeySet(),2153,2158,"/**
* Returns a synchronized set of row keys.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,columnKeySet,com.google.common.collect.Synchronized$SynchronizedTable:columnKeySet(),2160,2165,"/**
* Returns a synchronized set of column keys.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedTable:values(),2167,2172,"/**
* Returns a collection of values in this map.
* @return unmodifiable collection of map entries
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedTable:hashCode(),2188,2193,"/**
* Computes and returns the hash code of this object.
* Uses synchronization to ensure consistency across threads.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedTable:equals(java.lang.Object),2195,2203,"/**
* Compares this object to another for equality.
* @param obj the object to compare with
* @return true if objects are equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,deque,"com.google.common.collect.Synchronized:deque(java.util.Deque,java.lang.Object)",1895,1897,"/**
* Creates a synchronized deque wrapper around the given deque.
* @param deque original deque to synchronize
* @param mutex synchronization object (may be null for unsynchronized deque)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,synchronizedQueue,com.google.common.collect.Queues:synchronizedQueue(java.util.Queue),456,459,"/**
* Wraps a Queue in a synchronized implementation.
* @param queue the original Queue to synchronize. 
* @return synchronized Queue instance
*/","* Returns a synchronized (thread-safe) queue backed by the specified queue. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing queue is accomplished
   * through the returned queue.
   *
   * <p>It is imperative that the user manually synchronize on the returned queue when accessing the
   * queue's iterator:
   *
   * {@snippet :
   * Queue<E> queue = Queues.synchronizedQueue(MinMaxPriorityQueue.<E>create());
   * ...
   * queue.add(element);  // Needn't be in synchronized block
   * ...
   * synchronized (queue) {  // Must synchronize on queue!
   *   Iterator<E> i = queue.iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned queue will be serializable if the specified queue is serializable.
   *
   * @param queue the queue to be wrapped in a synchronized view
   * @return a synchronized view of the specified queue
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,list,"com.google.common.collect.Synchronized:list(java.util.List,java.lang.Object)",363,367,"/**
* Wraps a list with synchronized access, returning a RandomAccess or non-RandomAccess implementation based on the input.
* @param list original list to synchronize
* @param mutex synchronization object (may be null for no sync)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keys,com.google.common.collect.Synchronized$SynchronizedMultimap:keys(),750,758,"/**
* Returns a multiset of keys from the underlying delegate.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowKeySet,com.google.common.collect.Tables$UnmodifiableRowSortedMap:rowKeySet(),662,665,"/**
* Returns an unmodifiable set of row keys.
* @return Unmodifiable SortedSet of R objects representing row keys.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,compare,"com.google.common.collect.TreeBasedTable$TreeRow:compare(java.lang.Object,java.lang.Object)",212,217,"/**
* Compares two objects using a dynamic comparator.
* @param a first object to compare
* @param b second object to compare
* @return negative if a < b, zero if a == b, positive if a > b
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,recompute,com.google.common.collect.TreeMultiset$AvlNode:recompute(),945,948,"/**
* Recalculates multiset and height values.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,aggregateBelowRange,"com.google.common.collect.TreeMultiset:aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)",178,201,"/**
* Recursively aggregates values below the range.
* @param aggr Aggregate object
* @param node AVL tree node to process
* @return aggregated value or 0 if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,aggregateAboveRange,"com.google.common.collect.TreeMultiset:aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)",203,226,"/**
* Recursively aggregates values above the given range in an AVL tree.
* @param aggr aggregation strategy
* @param node current node in the tree (or null for root)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedCharEscaper.java,<init>,"com.google.common.escape.ArrayBasedCharEscaper:<init>(com.google.common.escape.ArrayBasedEscaperMap,char,char)",84,97,"/**
* Initializes escaper with replacement array and safe character range.
* @param escaperMap ArrayBasedEscaperMap instance
* @param safeMin minimum safe character value
* @param safeMax maximum safe character value
*/","* Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe
   * range. If {@code safeMax < safeMin} then no characters are considered safe. This initializer is
   * useful when explicit instances of ArrayBasedEscaperMap are used to allow the sharing of large
   * replacement mappings.
   *
   * <p>If a character has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param escaperMap the mapping of characters to be escaped
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,<init>,com.google.common.escape.CharEscaperBuilder$CharArrayDecorator:<init>(char[][]),45,48,"/**
* Initializes CharArrayDecorator with replacement characters.
* @param replacements array of replacement characters
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,<init>,com.google.common.escape.Escapers$1:<init>(),34,34,"/**
* Private constructor to prevent instantiation of utility class.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedUnicodeEscaper.java,<init>,"com.google.common.escape.ArrayBasedUnicodeEscaper:<init>(com.google.common.escape.ArrayBasedEscaperMap,int,int,java.lang.String)",95,136,"/**
* Initializes an ArrayBasedUnicodeEscaper with a given escaper map and range limits.
* @param escaperMap the array-based escape map
* @param safeMin minimum safe code point value
* @param safeMax maximum safe code point value
* @param unsafeReplacement replacement string for unsafe characters (may be null)
*/","* Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified
   * safe range. If {@code safeMax < safeMin} then no code points are considered safe. This
   * initializer is useful when explicit instances of ArrayBasedEscaperMap are used to allow the
   * sharing of large replacement mappings.
   *
   * <p>If a code point has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param escaperMap the map of replacements
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range
   * @param unsafeReplacement the default replacement for unsafe characters or null if no default
   *     replacement is required",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/PercentEscaper.java,<init>,"com.google.common.net.PercentEscaper:<init>(java.lang.String,boolean)",85,103,"/**
* Creates a PercentEscaper with specified safe characters and plus-for-space behavior.
* @param safeChars string of allowed characters
* @param plusForSpace true to escape '+' as '%2B', false otherwise
*/","* Constructs a percent escaper with the specified safe characters and optional handling of the
   * space character.
   *
   * <p>Not that it is allowed, but not necessarily desirable to specify {@code %} as a safe
   * character. This has the effect of creating an escaper which has no well-defined inverse but it
   * can be useful when escaping additional characters.
   *
   * @param safeChars a non-null string specifying additional safe characters for this escaper (the
   *     ranges 0..9, a..z and A..Z are always safe and should not be specified here)
   * @param plusForSpace true if ASCII space should be escaped to {@code +} rather than {@code %20}
   * @throws IllegalArgumentException if any of the parameters were invalid",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaper.java,escape,com.google.common.escape.CharEscaper:escape(java.lang.String),55,66,"/**
* Escapes special characters in the input string.
* @param string the input string to be escaped
*/","* Returns the escaped form of a given literal string.
   *
   * @param string the literal string to be escaped
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,handleException,"com.google.common.eventbus.EventBus$LoggingHandler:handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext)",278,284,"/**
* Logs a severe error with the given subscriber exception context.
* @param context SubscriberExceptionContext containing user and request data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,create,"com.google.common.eventbus.Subscriber:create(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)",38,42,"/**
* Creates a subscriber to the event bus with the given listener and method.
* @param bus EventBus instance
* @param listener Object listening for events
* @param method Method to invoke on event reception
* @return Subscriber or synchronized subscriber based on thread safety
*/",Creates a {@code Subscriber} for {@code method} on {@code listener}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,com.google.common.graph.AbstractGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),164,173,"/**
* Checks if there's an edge between two endpoints.
* @param endpoints pair of endpoints to check
* @return true if connected, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,com.google.common.graph.AbstractValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),164,173,"/**
* Checks if there's an edge connecting two given graph nodes.
* @param endpoints pair of nodes to check
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,predecessors,com.google.common.graph.ImmutableGraph:predecessors(java.lang.Object),70,73,"/**
* Retrieves predecessors of the given graph node.
* @param node the node for which to find predecessors
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,successors,com.google.common.graph.ImmutableGraph:successors(java.lang.Object),75,78,"/**
* Retrieves successors of a given node.
* @param node Node object to fetch successors for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,incidentNodes,com.google.common.graph.Graphs$TransposedNetwork:incidentNodes(java.lang.Object),463,467,"/**
* Fetches the incident nodes of a given edge.
* @param edge The edge for which to find incident nodes
* @return A pair of nodes representing the endpoints of the edge
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,com.google.common.graph.Graphs$TransposedGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),350,353,"/**
* Checks if there's an edge connecting two endpoints.
* @param endpoints pair of endpoints to check
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgesConnecting,com.google.common.graph.Graphs$TransposedNetwork:edgesConnecting(com.google.common.graph.EndpointPair),474,477,"/**
* Retrieves edges connecting two given endpoint pairs.
* @param endpoints Endpoints to find connecting edges between
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnecting,com.google.common.graph.Graphs$TransposedNetwork:edgeConnecting(com.google.common.graph.EndpointPair),484,487,"/**
* Finds an edge connecting two given endpoints.
* @param endpoints pair of endpoints to find a connection between
* @return Optional containing the connected edge or empty if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnectingOrNull,com.google.common.graph.Graphs$TransposedNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair),494,497,"/**
* Finds an existing edge connecting two given endpoints.
* @param endpoints pair of endpoint nodes to search between
* @return Edge object or null if no connection found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,com.google.common.graph.Graphs$TransposedNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair),504,507,"/**
* Checks if there's an edge connecting two endpoints.
* @param endpoints pair of nodes to check connection between
* @return true if connected, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,com.google.common.graph.Graphs$TransposedValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),395,398,"/**
* Checks for an edge connecting two nodes in a graph.
* @param endpoints pair of nodes to check
* @return true if an edge exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValue,com.google.common.graph.Graphs$TransposedValueGraph:edgeValue(com.google.common.graph.EndpointPair),405,408,"/**
* Retrieves an optional value associated with a given endpoint pair.
* @param endpoints pair of endpoints to fetch value for
* @return Optional value or empty if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValueOrDefault,"com.google.common.graph.Graphs$TransposedValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)",415,418,"/**
* Returns the edge value for the given endpoint pair or the default value if not found.
* @param endpoints EndpointPair with source and target nodes
* @param defaultValue default value to return if edge is missing
* @return Edge value or default value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraph.java,equals,com.google.common.graph.AbstractGraph:equals(java.lang.Object),35,48,"/**
* Compares this graph to another object for equality.
* @param obj the object to compare with
* @return true if both graphs have same properties and edge/node sets, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraph.java,hashCode,com.google.common.graph.AbstractGraph:hashCode(),50,53,"/**
* Returns the hash code of this graph based on its edges.
* @return Hash code value of the underlying edge set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraph.java,toString,com.google.common.graph.AbstractGraph:toString(),56,66,"/**
* Returns a string representation of the graph, including its directed status,
* self-loop allowance, number of nodes and edges.
*/",Returns a string representation of this graph.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractNetwork$1:edges(),66,99,"/**
* Returns a set of graph edges as EndpointPairs.
* @return Set of EndpointPairs representing graph connections
*/","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractValueGraph$1:edges(),66,99,"/**
* Returns a set of all edges in the graph.
* @return Set of EndpointPair objects representing graph edges
*/","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,containsEdge,com.google.common.graph.StandardNetwork:containsEdge(java.lang.Object),200,202,"/**
* Checks if graph contains specified edge.
* @param edge edge to search for
* @return true if edge exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edges,com.google.common.graph.ImmutableNetwork:edges(),100,103,"/**
* Returns an unmodifiable set of reference nodes.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,get,com.google.common.graph.MapRetrievalCache:get(java.lang.Object),39,53,"/**
* Retrieves cached or fresh value by given key.
* @param key unique identifier
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,inTree,com.google.common.graph.Traverser$Traversal:inTree(com.google.common.graph.SuccessorsFunction),395,407,"/**
* Creates an in-order tree traversal.
* @param tree SuccessorsFunction to traverse
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,removeInEdge,"com.google.common.graph.UndirectedMultiNetworkConnections:removeInEdge(java.lang.Object,boolean)",84,90,"/**
* Removes an incoming edge from the graph.
* @param edge Edge object to be removed
* @param isSelfLoop true if edge represents a self-loop, false otherwise
* @return N object or null if edge was not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putBytes,com.google.common.hash.AbstractByteHasher:putBytes(byte[]),82,88,"/**
* Adds input byte array to hasher.
* @param bytes input data
* @return this Hasher instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putBytes,com.google.common.hash.AbstractByteHasher:putBytes(java.nio.ByteBuffer),98,103,"/**
* Updates hasher with byte buffer and returns itself.
* @param bytes ByteBuffer to hash.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putShort,com.google.common.hash.AbstractByteHasher:putShort(short),105,110,"/**
* Adds a short value to the hasher and updates its state.
* @param s the short value to be hashed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putInt,com.google.common.hash.AbstractByteHasher:putInt(int),112,117,"/**
* Adds an integer value to hasher.
* @param i the integer value to add
* @return this Hasher instance for method chaining
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putLong,com.google.common.hash.AbstractByteHasher:putLong(long),119,124,"/**
* Adds a long value to the hasher.
* @param l the long value to be hashed
* @return this Hasher instance for method chaining
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putChar,com.google.common.hash.AbstractByteHasher:putChar(char),126,131,"/**
* Adds a character to the hasher.
* @param c character to hash
* @return this hasher instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putDouble,com.google.common.hash.Hasher:putDouble(double),92,94,"/**
* Adds a double value to the hash.
* @param d the value to be added
* @return this hasher instance
*/",Equivalent to {@code putLong(Double.doubleToRawLongBits(d))}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putLong,com.google.common.hash.AbstractCompositeHashFunction$1:putLong(long),82,84,"/**
* Adds a long integer to the hash accumulator.
* @param l the value to be hashed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashLong,com.google.common.hash.AbstractHashFunction:hashLong(long),54,57,"/**
* Generates a hash code using a long integer value.
* @param input unique identifier as a long value
* @return hash code result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putChar,com.google.common.hash.AbstractCompositeHashFunction$1:putChar(char),101,103,"/**
* Updates the hasher with a single character.
* @param c the character to hash
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,hash,com.google.common.hash.AbstractStreamingHasher:hash(),186,195,"/**
* Computes and returns a hash code based on the processed data.
* @return unique hash value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,munchIfFull,com.google.common.hash.AbstractStreamingHasher:munchIfFull(),205,210,"/**
* Munches current data when buffer is full.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,writeReplace,com.google.common.hash.BloomFilter:writeReplace(),557,559,"/**
* Creates a serialized form of this object.
* @return SerialForm instance containing this object's data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,equals,com.google.common.hash.BloomFilter:equals(java.lang.Object),301,314,"/**
* Compares this BloomFilter instance with another for equality.
* @param object the other object to compare (may be null)
* @return true if the objects are equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,toBloomFilter,"com.google.common.hash.BloomFilter:toBloomFilter(com.google.common.hash.Funnel,long)",342,345,"/**
* Configures a collector for generating a Bloom filter with default error rate.
* @param funnel funnel function to process elements
* @param expectedInsertions estimated number of unique elements
*/","* Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link
   * BloomFilter} with false positive probability 3%.
   *
   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the
   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive
   * probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements
   * @since 23.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,expectedFpp,com.google.common.hash.BloomFilter:expectedFpp(),210,212,"/**
* Calculates the expected False Positive Probability (FPP).
* @return FPP value as a decimal
*/","* Returns the probability that {@linkplain #mightContain(Object)} will erroneously return {@code
   * true} for an object that has not actually been put in the {@code BloomFilter}.
   *
   * <p>Ideally, this number should be close to the {@code fpp} parameter passed in {@linkplain
   * #create(Funnel, int, double)}, or smaller. If it is significantly higher, it is usually the
   * case that too many elements (more than expected) have been put in the {@code BloomFilter},
   * degenerating it.
   *
   * @since 14.0 (since 11.0 as expectedFalsePositiveProbability())",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,isCompatible,com.google.common.hash.BloomFilter:isCompatible(com.google.common.hash.BloomFilter),257,264,"/**
* Checks if two Bloom filters are identical in structure and strategy.
* @param that the other Bloom filter to compare with
*/","* Determines whether a given Bloom filter is compatible with this Bloom filter. For two Bloom
   * filters to be compatible, they must:
   *
   * <ul>
   *   <li>not be the same instance
   *   <li>have the same number of hash functions
   *   <li>have the same bit size
   *   <li>have the same strategy
   *   <li>have equal funnels
   * </ul>
   *
   * @param that The Bloom filter to check for compatibility.
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,compare,"com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator:compare(byte[],byte[])",424,434,"/**
* Compares two byte arrays lexicographically.
* @param left first byte array
* @param right second byte array
* @return negative/positive value if left/right is less/greater, or 0 for equality
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,toString,com.google.common.primitives.UnsignedBytes:toString(byte),180,182,"/**
* Converts an unsigned byte value to its decimal string representation.
* @param x unsigned byte value
* @return decimal string representation or null if invalid input
*/","* Returns a string representation of x, where x is treated as unsigned.
   *
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,putAll,com.google.common.hash.BloomFilter:putAll(com.google.common.hash.BloomFilter),275,299,"/**
* Combines the underlying bit arrays of two BloomFilters.
* @param that the BloomFilter to combine with
*/","* Combines this Bloom filter with another Bloom filter by performing a bitwise OR of the
   * underlying data. The mutations happen to <b>this</b> instance. Callers must ensure the Bloom
   * filters are appropriately sized to avoid saturating them.
   *
   * @param that The Bloom filter to combine this Bloom filter with. It is not mutated.
   * @throws IllegalArgumentException if {@code isCompatible(that) == false}
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength65Plus,"com.google.common.hash.FarmHashFingerprint64:hashLength65Plus(byte[],int,int)",171,215,"/**
* Computes a hash function for strings over 64 bytes in length.
* @param bytes input byte array
* @param offset starting position within the array (in multiples of 8)
* @param length total number of bytes to process
* @return a 65-bit hash value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,fullFingerprint,"com.google.common.hash.Fingerprint2011:fullFingerprint(byte[],int,int)",115,146,"/**
* Computes a full fingerprint from the given bytes.
* @param bytes input byte array
* @param offset starting offset in bytes
* @param length length of bytes to process
* @return 64-bit hash value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromBytesNoCopy,com.google.common.hash.HashCode:fromBytesNoCopy(byte[]),246,248,"/**
* Creates an immutable hash code from the provided byte array.
* @param bytes input byte array
*/","* Creates a {@code HashCode} from a byte array. The array is <i>not</i> copied defensively, so it
   * must be handed-off so as to preserve the immutability contract of {@code HashCode}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromInt,com.google.common.hash.HashCode:fromInt(int),114,116,"/**
* Creates a hash code instance from an integer value.
* @param hash int value to be wrapped
*/","* Creates a 32-bit {@code HashCode} representation of the given int value. The underlying bytes
   * are interpreted in little endian order.
   *
   * @since 15.0 (since 12.0 in HashCodes)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromLong,com.google.common.hash.HashCode:fromLong(long),171,173,"/**
* Creates a HashCode instance from a given long hash value.
* @param hash unique identifier represented as a long integer
*/","* Creates a 64-bit {@code HashCode} representation of the given long value. The underlying bytes
   * are interpreted in little endian order.
   *
   * @since 15.0 (since 12.0 in HashCodes)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,floatValue,com.google.common.primitives.UnsignedInteger:floatValue(),195,198,"/**
* Converts the underlying long value to a floating-point number.
* @return The numeric value as a float.","* Returns the value of this {@code UnsignedInteger} as a {@code float}, analogous to a widening
   * primitive conversion from {@code int} to {@code float}, and correctly rounded.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,doubleValue,com.google.common.primitives.UnsignedInteger:doubleValue(),204,207,"/**
* Returns the double value representation of this number.
* @return the numeric value as a double
*/","* Returns the value of this {@code UnsignedInteger} as a {@code double}, analogous to a widening
   * primitive conversion from {@code int} to {@code double}, and correctly rounded.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,bigIntegerValue,com.google.common.primitives.UnsignedInteger:bigIntegerValue(),210,212,"/**
* Converts long value to BigInteger representation.
* @return BigInteger equivalent of the long value
*/",Returns the value of this {@code UnsignedInteger} as a {@link BigInteger}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,goodFastHash,com.google.common.hash.Hashing:goodFastHash(int),69,89,"/**
* Generates a concatenated hash function with the specified minimum bits.
* @param minimumBits minimum number of bits in the resulting hash function
*/","* Returns a general-purpose, <b>temporary-use</b>, non-cryptographic hash function. The algorithm
   * the returned function implements is unspecified and subject to change without notice.
   *
   * <p><b>Warning:</b> a new random seed for these functions is chosen each time the {@code
   * Hashing} class is loaded. <b>Do not use this method</b> if hash codes may escape the current
   * process in any way, for example being sent over RPC, or saved to disk. For a general-purpose,
   * non-cryptographic hash function that will never change behavior, we suggest {@link
   * #murmur3_128}.
   *
   * <p>Repeated calls to this method on the same loaded {@code Hashing} class, using the same value
   * for {@code minimumBits}, will return identically-behaving {@link HashFunction} instances.
   *
   * @param minimumBits a positive integer. This can be arbitrarily large. The returned {@link
   *     HashFunction} instance may use memory proportional to this integer.
   * @return a hash function, described above, that produces hash codes of length {@code
   *     minimumBits} or greater",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,consistentHash,"com.google.common.hash.Hashing:consistentHash(com.google.common.hash.HashCode,int)",638,640,"/**
* Calculates consistent hash bucket index.
* @param hashCode HashCode object
* @param buckets number of buckets in the ring
* @return index of the bucket where the key should reside
*/","* Assigns to {@code hashCode} a ""bucket"" in the range {@code [0, buckets)}, in a uniform manner
   * that minimizes the need for remapping as {@code buckets} grows. That is, {@code
   * consistentHash(h, n)} equals:
   *
   * <ul>
   *   <li>{@code n - 1}, with approximate probability {@code 1/n}
   *   <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})
   * </ul>
   *
   * <p>This method is suitable for the common use case of dividing work among buckets that meet the
   * following conditions:
   *
   * <ul>
   *   <li>You want to assign the same fraction of inputs to each bucket.
   *   <li>When you reduce the number of buckets, you can accept that the most recently added
   *       buckets will be removed first. More concretely, if you are dividing traffic among tasks,
   *       you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and
   *       {@code consistentHash} will handle it. If, however, you are dividing traffic among
   *       servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to
   *       take each of the servers offline, {@code consistentHash} will be a poor fit: It provides
   *       no way for you to specify which of the three buckets is disappearing. Thus, if your
   *       buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will
   *       assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo}
   *       traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic.
   * </ul>
   *
   * <p>See the <a href=""http://en.wikipedia.org/wiki/Consistent_hashing"">Wikipedia article on
   * consistent hashing</a> for more information.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacMd5,com.google.common.hash.Hashing:hmacMd5(java.security.Key),302,304,"/**
* Creates an HMAC-MD5 hash function instance.
* @param key secret key for the HMAC operation
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * MD5 (128 hash bits) hash function and the given secret key.
   *
   * <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other
   * future-proof algorithms <a
   * href=""https://datatracker.ietf.org/doc/html/rfc6151#section-2.3"">over {@code hmacMd5}</a>.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha1,com.google.common.hash.Hashing:hmacSha1(java.security.Key),330,332,"/**
* Creates an HMAC-SHA1 hash function with the given secret key.
* @param key secret key for HMAC calculation
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-1 (160 hash bits) hash function and the given secret key.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha256,com.google.common.hash.Hashing:hmacSha256(java.security.Key),354,356,"/**
* Creates an HMAC-SHA-256 hash function instance.
* @param key secret key for the hash function
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-256 (256 hash bits) hash function and the given secret key.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha512,com.google.common.hash.Hashing:hmacSha512(java.security.Key),378,380,"/**
* Creates an HMAC-SHA-512 hash function instance.
* @param key secret key for the HMAC algorithm
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-512 (512 hash bits) hash function and the given secret key.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,readResolve,com.google.common.hash.MessageDigestHashFunction$SerializedForm:readResolve(),113,115,"/**
* Creates a hash function instance using serialized data.
* @return HashFunction object with specified algorithm and settings
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,process,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:process(java.nio.ByteBuffer),102,108,"/**
* Processes a ByteBuffer containing two 64-bit keys and updates the mix state.
* @param bb input ByteBuffer with two longs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putBytes,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putBytes(java.nio.ByteBuffer),316,329,"/**
* Puts bytes from a ByteBuffer into the Hasher in little-endian order.
* @param buffer input byte buffer
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,process,com.google.common.hash.SipHashFunction$SipHasher:process(java.nio.ByteBuffer),131,135,"/**
* Processes ByteBuffer data in chunks of CHUNK_SIZE bytes.
* Increments chunk index and processes next long value.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,com.google.common.io.ByteSource$ByteArrayByteSource:<init>(byte[]),569,571,"/**
* Creates a ByteArrayByteSource from a byte array.
* @param bytes input byte array
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,slice,"com.google.common.io.ByteSource$ByteArrayByteSource:slice(long,long)",629,638,"/**
* Returns a slice of bytes starting from the given offset with specified length.
* @param offset byte index to start the slice
* @param length number of bytes in the slice
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,concat,com.google.common.io.ByteSource:concat(java.lang.Iterable),374,376,"/**
* Concatenates multiple byte sources into a single source.
* @param sources iterable of byte sources to concatenate
*/","* Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * @param sources the sources to concatenate
   * @return a {@code ByteSource} containing the concatenated data
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeTo,"com.google.common.io.BaseEncoding$Base16Encoding:decodeTo(byte[],java.lang.CharSequence)",978,990,"/**
* Decodes a string of encoded characters into a byte array.
* @param target the output byte array
* @param chars the input encoded character sequence
* @return number of bytes written to the target array
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeTo,"com.google.common.io.BaseEncoding$Base64Encoding:decodeTo(byte[],java.lang.CharSequence)",1025,1047,"/**
* Decodes a CharSequence into a byte array using the provided alphabet.
* @param target output byte array
* @param chars input sequence of characters to decode
* @return number of bytes written to the target array
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeTo,"com.google.common.io.BaseEncoding$StandardBaseEncoding:decodeTo(byte[],java.lang.CharSequence)",753,776,"/**
* Decodes a CharSequence into a byte array using the provided alphabet.
* @param target output byte array
* @param chars input sequence of characters
* @return number of bytes written to the target array
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,withSeparator,"com.google.common.io.BaseEncoding$StandardBaseEncoding:withSeparator(java.lang.String,int)",866,881,"/**
* Creates a base encoding with a custom separator and character count.
* @param separator the separator string
* @param afterEveryChars char count between separators
* @return SeparatedBaseEncoding object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,com.google.common.io.BaseEncoding$Base16Encoding:<init>(com.google.common.io.BaseEncoding$Alphabet),958,965,"/**
* Initializes Base16Encoding with the given Alphabet.
* @param alphabet Alphabet instance to use for encoding
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Base64Encoding:<init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",1003,1006,"/**
* Creates a new instance of Base64 encoding with specified alphabet and optional padding character.
* @param alphabet the Base64 alphabet to use (must have exactly 64 characters)
* @param paddingChar the padding character, or null if not used
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,newInstance,"com.google.common.io.BaseEncoding$StandardBaseEncoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",917,919,"/**
* Creates a new instance of standard base encoding.
* @param alphabet Alphabet to use
* @param paddingChar Optional character for padding; null if not needed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$StringCharSource:<init>(java.lang.String),642,644,"/**
* Initializes CharSource with a string sequence.
* @param seq input string to source characters from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,concat,com.google.common.io.CharSource:concat(java.lang.Iterable),443,445,"/**
* Concatenates an iterable of CharSources into a single source.
* @param sources iterable of CharSources to concatenate
*/","* Concatenates multiple {@link CharSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * @param sources the sources to concatenate
   * @return a {@code CharSource} containing the concatenated data
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataInput,com.google.common.io.ByteStreams:newDataInput(byte[]),304,307,"/**
* Creates a new ByteArrayDataInput instance from the given byte array.
* @param bytes input byte array","* Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array from the
   * beginning.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataOutput,com.google.common.io.ByteStreams:newDataOutput(),481,484,"/**
* Creates a new byte output stream with default settings.
* @return ByteArrayDataOutput instance
*/",Returns a new {@link ByteArrayDataOutput} instance with a default size.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataOutput,com.google.common.io.ByteStreams:newDataOutput(int),492,500,"/**
* Creates a new byte output stream with the specified initial buffer size.
* @param size the initial buffer size
*/","* Returns a new {@link ByteArrayDataOutput} instance sized to hold {@code size} bytes before
   * resizing.
   *
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,<init>,"com.google.common.io.ReaderInputStream:<init>(java.io.Reader,java.nio.charset.Charset,int)",86,94,"/**
* Initializes a new ReaderInputStream with the specified reader, 
* character set, and buffer size. Malformed input is replaced.
*/","* Creates a new input stream that will encode the characters from {@code reader} into bytes using
   * the given character set. Malformed input and unmappable characters will be replaced.
   *
   * @param reader input source
   * @param charset character set used for encoding chars to bytes
   * @param bufferSize size of internal input and output buffers
   * @throws IllegalArgumentException if bufferSize is non-positive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,countBySkipping,com.google.common.io.ByteSource:countBySkipping(java.io.InputStream),232,239,"/**
* Counts the number of bytes in the input stream by skipping up to max value.
* @param in InputStream to read from
* @return total byte count or -1 on IOException
*/",Counts the bytes in the given input stream using skip if possible.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,skipFully,"com.google.common.io.ByteStreams:skipFully(java.io.InputStream,long)",830,836,"/**
* Skips fully up to the specified number of bytes in the input stream.
* @param in InputStream to skip from
* @param n number of bytes to skip
* @throws IOException if an I/O error occurs or EOF is reached early
*/","* Discards {@code n} bytes of data from the input stream. This method will block until the full
   * amount has been skipped. Does not close the stream.
   *
   * @param in the input stream to read from
   * @param n the number of bytes to skip
   * @throws EOFException if this stream reaches the end before skipping all the bytes
   * @throws IOException if an I/O error occurs, or the stream does not support skipping",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,read,com.google.common.io.CharSequenceReader:read(java.nio.CharBuffer),77,90,"/**
* Reads characters from the internal sequence into a CharBuffer.
* @return number of characters read, -1 if end-of-sequence reached
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,read,com.google.common.io.CharSequenceReader:read(),92,97,"/**
* Reads one character from the underlying sequence.
* @return next character or -1 if end of sequence reached
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,"com.google.common.io.CharSink:writeLines(java.lang.Iterable,java.lang.String)",119,122,"/**
* Writes an iterable of lines to the output stream using the specified line separator.
*/","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the given line separator.
   *
   * @throws IOException if an I/O error occurs while writing to this sink",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,"com.google.common.io.CharSink:writeLines(java.util.stream.Stream,java.lang.String)",143,146,"/**
* Writes an iterable of character sequences to the underlying output stream using the specified line separator.
* @param lines iterable of text lines
* @param lineSeparator string used to separate lines in output
*/","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the given line separator.
   *
   * @throws IOException if an I/O error occurs while writing to this sink
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,forEachLine,com.google.common.io.CharSource:forEachLine(java.util.function.Consumer),395,402,"/**
* Iterates over each line of a file, executing the provided action.
* @param action Consumer function to process each line
*/","* Reads all lines of text from this source, running the given {@code action} for each line as it
   * is read.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source or if {@code action}
   *     throws an {@code UncheckedIOException}
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,readLines,com.google.common.io.CharStreams:readLines(java.lang.Readable),195,203,"/**
* Reads all lines from a readable source into a list.
* @param r the source to read from
* @return list of strings, one per line
*/","* Reads all of the lines from a {@link Readable} object. The lines do not include
   * line-termination characters, but do include other leading and trailing whitespace.
   *
   * <p>Does not close the {@code Readable}. If reading files or resources you should use the {@link
   * Files#readLines} and {@link Resources#readLines} methods.
   *
   * @param r the object to read from
   * @return a mutable {@link List} containing all the lines
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,readLines,"com.google.common.io.CharStreams:readLines(java.lang.Readable,com.google.common.io.LineProcessor)",214,229,"/**
* Reads lines from a readable source and processes them using the given processor.
* @param readable source of text to read
* @param processor LineProcessor instance to process each line
* @return result object returned by the processor, or null if not applicable
*/","* Streams lines from a {@link Readable} object, stopping when the processor returns {@code false}
   * or all lines have been read and returning the result produced by the processor. Does not close
   * {@code readable}. Note that this method may not fully consume the contents of {@code readable}
   * if the processor stops processing early.
   *
   * @throws IOException if an I/O error occurs
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,write,com.google.common.io.FileBackedOutputStream:write(int),201,205,"/**
* Writes a single byte to the output stream and updates the position.
* @throws IOException if I/O error occurs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,write,"com.google.common.io.FileBackedOutputStream:write(byte[],int,int)",212,216,"/**
* Writes data to output stream and updates length.
* @param b data buffer
* @param off offset into buffer (byte)
* @param len number of bytes to write
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,readMoreChars,com.google.common.io.ReaderInputStream:readMoreChars(),203,230,"/**
* Expands or shifts the character buffer to read more input characters.
*/",Handle the case of underflow caused by needing more input characters.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readShort,com.google.common.io.LittleEndianDataInputStream:readShort(),190,194,"/**
* Reads an unsigned short integer value from the input stream.
* @return unsigned short integer value as a short
*/","* Reads a {@code short} as specified by {@link DataInputStream#readShort()}, except using
   * little-endian byte order.
   *
   * @return the next two bytes of the input stream, interpreted as a {@code short} in little-endian
   *     byte order.
   * @throws IOException if an I/O error occurs.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readChar,com.google.common.io.LittleEndianDataInputStream:readChar(),204,208,"/**
 * Reads and returns a single character from the input stream.
 */","* Reads a char as specified by {@link DataInputStream#readChar()}, except using little-endian
   * byte order.
   *
   * @return the next two bytes of the input stream, interpreted as a {@code char} in little-endian
   *     byte order
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readFloat,com.google.common.io.LittleEndianDataInputStream:readFloat(),156,160,"/**
* Reads and converts an integer value to a floating-point number.
* @return the read float value or NaN if conversion fails
*/","* Reads a {@code float} as specified by {@link DataInputStream#readFloat()}, except using
   * little-endian byte order.
   *
   * @return the next four bytes of the input stream, interpreted as a {@code float} in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readDouble,com.google.common.io.LittleEndianDataInputStream:readDouble(),170,174,"/**
* Reads and converts a long value from input into a double.
* @throws IOException if an I/O error occurs during reading
*/","* Reads a {@code double} as specified by {@link DataInputStream#readDouble()}, except using
   * little-endian byte order.
   *
   * @return the next eight bytes of the input stream, interpreted as a {@code double} in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeChars,com.google.common.io.LittleEndianDataOutputStream:writeChars(java.lang.String),93,98,"/**
* Writes a string of characters to output stream.
* @param s input string to be written
*/","* Writes a {@code String} as specified by {@link DataOutputStream#writeChars(String)}, except
   * each character is written using little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeDouble,com.google.common.io.LittleEndianDataOutputStream:writeDouble(double),106,109,"/**
* Writes double value to output stream.
* @param v double value to be written
*/","* Writes a {@code double} as specified by {@link DataOutputStream#writeDouble(double)}, except
   * using little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteDirectoryContentsInsecure,com.google.common.io.MoreFiles:deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream),690,702,"/**
* Recursively deletes directory contents and returns any encountered IOExceptions.
* @param dir DirectoryStream of entries to delete
* @return Collection of IOExceptions or null if no errors occurred
*/","* Simple, insecure method for deleting the contents of a directory for file systems that don't
   * support {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null
   * if no exceptions were thrown.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteRecursivelySecure,"com.google.common.io.MoreFiles:deleteRecursivelySecure(java.nio.file.SecureDirectoryStream,java.nio.file.Path)",618,640,"/**
* Recursively deletes a directory and its contents in a secure manner.
* @param dir SecureDirectoryStream to the top-level directory
* @param path Path to the directory/file to delete
* @return Collection of IOExceptions that occurred during deletion, or null if successful
*/","* Secure recursive delete using {@code SecureDirectoryStream}. Returns a collection of exceptions
   * that occurred or null if no exceptions were thrown.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,<init>,com.google.common.io.MultiInputStream:<init>(java.util.Iterator),45,48,"/**
* Constructs a new MultiInputStream from an iterator of byte sources.
* @param it iterator of byte sources to combine
*/","* Creates a new instance.
   *
   * @param it an iterator of I/O suppliers that will provide each substream",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,read,com.google.common.io.MultiInputStream:read(),82,92,"/**
* Reads a single character from an underlying input source.
* @throws IOException if an I/O error occurs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,read,"com.google.common.io.MultiInputStream:read(byte[],int,int)",94,105,"/**
* Reads data from input stream into the given byte array.
* @param b byte array to read into
* @param off offset in the byte array
* @param len number of bytes to read
* @return actual number of bytes read, or -1 if end-of-stream reached",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,<init>,com.google.common.io.MultiReader:<init>(java.util.Iterator),39,42,"/**
* Initializes multi-reader with provided iterable sources.
* @param readers collection of CharSources to read from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,read,"com.google.common.io.MultiReader:read(char[],int,int)",52,64,"/**
* Reads characters from the underlying stream into a buffer.
* @param cbuf character array to store data
* @param off offset in the buffer where data should be written
* @param len maximum number of characters to read
* @return number of characters actually read or -1 if end-of-stream reached
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,skip,com.google.common.io.MultiReader:skip(long),66,79,"/**
* Skips up to n bytes in the stream.
* @param n number of bytes to skip
* @return actual number of bytes skipped or 0 if none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,asCharSource,com.google.common.reflect.ClassPath$ResourceInfo:asCharSource(java.nio.charset.Charset),258,260,"/**
 * Converts to a CharSource representation with specified charset.
 * @param charset character encoding to use
 */","* Returns a {@link CharSource} view of the resource from which its bytes can be read as
     * characters decoded with the given {@code charset}.
     *
     * @throws NoSuchElementException if the resource cannot be loaded through the class loader,
     *     despite physically existing in the class path.
     * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,size,com.google.common.collect.Lists$Partition:size(),726,729,"/**
* Calculates the total number of items by dividing list size by batch size.
* @return Total item count rounded up to nearest whole number.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,maxEncodedSize,com.google.common.io.BaseEncoding$SeparatedBaseEncoding:maxEncodedSize(int),1158,1163,"/**
* Calculates the maximum encoded size including separators.
* @param bytes number of bytes to encode
* @return total maximum encoded size
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,maxEncodedSize,com.google.common.io.BaseEncoding$StandardBaseEncoding:maxEncodedSize(int),632,635,"/**
* Calculates maximum encoded size based on input byte count.
* @param bytes number of input bytes to encode
* @return maximum encoded size in characters",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,<init>,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:<init>(long),166,173,"/**
* Initializes LockFreeBitArray with a specified number of bits.
* @param bits total bit count
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,size,com.google.common.collect.Collections2$PermutationCollection:size(),600,603,"/**
* Calculates factorial of input list size.
* @return Factorial value as an integer
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,calculateSize,"com.google.common.collect.Collections2$OrderedPermutationCollection:calculateSize(java.util.List,java.util.Comparator)",454,473,"/**
* Calculates permutations of input list using given comparator.
* @param sortedInputList input list to calculate permutations for
* @param comparator comparator to determine order relationships
* @return number of permutations or Integer.MAX_VALUE if overflow occurs
*/","* The number of permutations with repeated elements is calculated as follows:
     *
     * <ul>
     *   <li>For an empty list, it is 1 (base case).
     *   <li>When r numbers are added to a list of n-r elements, the number of permutations is
     *       increased by a factor of (n choose r).
     * </ul>",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,mean,com.google.common.math.DoubleMath:mean(java.util.Iterator),508,522,"/**
* Calculates the arithmetic mean of a sequence of numbers.
* @param values iterator over numbers to average
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of
   * {@code values}.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * @param values a nonempty series of values, which will be converted to {@code double} values
   *     (this may cause loss of precision)
   * @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value
   * @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite
   *     values.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,isPowerOfTwo,com.google.common.math.DoubleMath:isPowerOfTwo(double),201,208,"/**
* Checks if a given double value is a power of two.
* @param x the input value to check
*/","* Returns {@code true} if {@code x} is exactly equal to {@code 2^k} for some finite integer
   * {@code k}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,isMathematicalInteger,com.google.common.math.DoubleMath:isMathematicalInteger(double),289,294,"/**
* Checks if a double value represents a mathematical integer.
* @param x the input double value to check
* @return true if x is an integer, false otherwise
*/","* Returns {@code true} if {@code x} represents a mathematical integer.
   *
   * <p>This is equivalent to, but not necessarily implemented as, the expression {@code
   * !Double.isNaN(x) && !Double.isInfinite(x) && x == Math.rint(x)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,roundToDouble,"com.google.common.math.LongMath:roundToDouble(long,java.math.RoundingMode)",1226,1327,"/**
* Rounds a long value to a double using the specified rounding mode.
* @param x value to be rounded
* @param mode rounding mode (e.g. HALF_UP, FLOOR, CEILING)
*/","* Returns {@code x}, rounded to a {@code double} with the specified rounding mode. If {@code x}
   * is precisely representable as a {@code double}, its {@code double} value will be returned;
   * otherwise, the rounding will choose between the two nearest representable values with {@code
   * mode}.
   *
   * <p>For the case of {@link RoundingMode#HALF_EVEN}, this implementation uses the IEEE 754
   * default rounding mode: if the two nearest representable values are equally near, the one with
   * the least significant bit zero is chosen. (In such cases, both of the nearest representable
   * values are even integers; this method returns the one that is a multiple of a greater power of
   * two.)
   *
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not precisely representable as a {@code double}
   * @since 30.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,fuzzyCompare,"com.google.common.math.DoubleMath:fuzzyCompare(double,double,double)",384,394,"/**
* Compares two doubles with a given tolerance, returning an integer indicating their relative order.
* @param a first double value
* @param b second double value
* @param tolerance allowed difference between values
* @return -1 if a < b, 0 if a == b within tolerance, 1 if a > b
*/","* Compares {@code a} and {@code b} ""fuzzily,"" with a tolerance for nearly-equal values.
   *
   * <p>This method is equivalent to {@code fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a,
   * b)}. In particular, like {@link Double#compare(double, double)}, it treats all NaN values as
   * equal and greater than all other values (including {@link Double#POSITIVE_INFINITY}).
   *
   * <p>This is <em>not</em> a total ordering and is <em>not</em> suitable for use in {@link
   * Comparable#compareTo} implementations. In particular, it is not transitive.
   *
   * @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,maxRunBeforeFallback,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:maxRunBeforeFallback(int),932,934,"/**
* Calculates optimal number of runs before fallback based on table size.
* @param tableSize total rows in the table
*/","* If more than this many consecutive positions are filled in a table of the specified size,
     * report probable hash flooding. ({@link #hashFloodingDetected} may also report hash flooding
     * if fewer consecutive positions are filled; see that method for details.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,trim,com.google.common.collect.TopKSelector:trim(),165,207,"/**
* Trims the sorted array to contain only the k smallest elements.
* @param k number of desired elements
*/","* Quickselects the top k elements from the 2k elements in the buffer. O(k) expected time, O(k log
   * k) worst case.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Alphabet:<init>(java.lang.String,char[],byte[],boolean)",449,479,"/**
* Initializes Alphabet object with name, character set, and decoding table.
* @param name unique alphabet identifier
* @param chars array of distinct ASCII characters
* @param decodabet byte array for decoding
* @param ignoreCase whether to ignore case sensitivity
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,ceilToPowerOfTwo,com.google.common.util.concurrent.Striped:ceilToPowerOfTwo(int),510,512,"/**
* Calculates the smallest power of two greater than or equal to the input value.
* @param x input integer
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,log10,"com.google.common.math.IntMath:log10(int,java.math.RoundingMode)",153,176,"/**
* Computes base-10 logarithm of an integer with specified rounding mode.
* @param x input value (must be positive)
* @param mode rounding mode (e.g. FLOOR, CEILING, etc.)
* @return log10(x) as an integer
*/","* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of ten",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,sqrt,"com.google.common.math.LongMath:sqrt(long,java.math.RoundingMode)",305,366,"/**
* Computes square root of a number with specified rounding mode.
* @param x the input value
* @param mode the rounding mode (e.g. UNNECESSARY, FLOOR)
*/","* Returns the square root of {@code x}, rounded with the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x < 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code
   *     sqrt(x)} is not an integer",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,<init>,com.google.common.collect.CartesianList:<init>(com.google.common.collect.ImmutableList),52,65,"/**
* Initializes CartesianList with a list of axis lists.
* @param axes list of axis lists (e.g. [[1,2], [3,4]])
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,calculateNewCapacity,com.google.common.collect.MinMaxPriorityQueue:calculateNewCapacity(),968,973,"/**
* Calculates a new capacity for the queue based on its current size.
* @return New capacity with growth strategy (doubling for small sizes, halving and tripling for large sizes) 
* capped at the maximum allowed size.",Returns ~2x the old capacity if small; ~1.5x otherwise.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,<init>,"com.google.common.collect.TopKSelector:<init>(java.util.Comparator,int)",123,132,"/**
* Initializes TopKSelector with comparator and size.
* @param comparator comparison function
* @param k desired number of top elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedPow,"com.google.common.math.IntMath:checkedPow(int,int)",495,532,"/**
* Computes the checked power of a base integer to an exponent.
* @param b base integer
* @param k exponent (must be non-negative)
* @return result of raising b to the power of k, or 0 if overflow occurs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,horizontal,com.google.common.math.LinearTransformation:horizontal(double),121,125,"/**
* Creates a horizontal linear transformation with specified y-value.
* @param y vertical position of the line
*/","* Builds an instance representing a horizontal transformation with a constant value of {@code y}.
   * (The inverse of this will be a vertical transformation.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,createInverse,com.google.common.math.LinearTransformation$VerticalLinearTransformation:createInverse(),273,275,"/**
* Creates an inverse linear transformation.
* @return InverseLinearTransformation object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,withSlope,com.google.common.math.LinearTransformation$LinearTransformationBuilder:withSlope(double),97,105,"/**
* Creates a LinearTransformation with the specified slope.
* @param slope the desired slope (must be finite)
* @return a new LinearTransformation instance
*/","* Finish building an instance with the given slope, i.e. the rate of change of {@code y} with
     * respect to {@code x}. The slope must not be {@code NaN}. It may be infinite, in which case
     * the transformation is vertical. (If it is zero, the transformation is horizontal.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,vertical,com.google.common.math.LinearTransformation:vertical(double),112,115,"/**
* Creates a vertical linear transformation with given scale factor.
* @param x scale factor
*/","* Builds an instance representing a vertical transformation with a constant value of {@code x}.
   * (The inverse of this will be a horizontal transformation.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,createInverse,com.google.common.math.LinearTransformation$RegularLinearTransformation:createInverse(),217,223,"/**
* Creates the inverse linear transformation based on the current transformation.
* @return Inverse LinearTransformation object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,test,"com.google.common.math.LongMath$MillerRabinTester:test(long,long)",1159,1163,"/**
* Determines test witness result for a given base and exponent (n).
* @param base input number
* @param n exponent value
* @return true if the test passes, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,factorial,com.google.common.math.BigIntegerMath:factorial(int),381,434,"/**
* Calculates the factorial of a given integer using efficient multiplication techniques.
* @param n non-negative integer input value
* @return BigInteger representation of the factorial result or null if not found
*/","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, or {@code 1}
   * if {@code n == 0}.
   *
   * <p><b>Warning:</b> the result takes <i>O(n log n)</i> space, so use cautiously.
   *
   * <p>This uses an efficient binary recursive algorithm to compute the factorial with balanced
   * multiplies. It also removes all the 2s from the intermediate products (shifting them back in at
   * the end).
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,log10,"com.google.common.math.LongMath:log10(long,java.math.RoundingMode)",155,179,"/**
* Computes base-10 logarithm of a long value with specified rounding mode.
* @param x the input value (must be positive)
* @param mode RoundingMode to apply
* @return integer part of log10(x) or throws AssertionError if invalid mode","* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of ten",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,multiplyFraction,"com.google.common.math.LongMath:multiplyFraction(long,long,long)",852,862,"/**
* Simplifies fraction multiplication by reducing the input values using GCD.
* @param x number to multiply
* @param numerator and @param denominator input fraction
*/","Returns (x * numerator / denominator), which is assumed to come out to an integral value.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedPow,"com.google.common.math.LongMath:checkedPow(long,int)",578,620,"/**
* Computes the power of a long value using exponentiation by squaring.
* @param b base value
* @param k exponent (non-negative integer)
* @return result as a long (may overflow for very large bases and exponents)
*/","* Returns the {@code b} to the {@code k}th power, provided it does not overflow.
   *
   * @throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed {@code
   *     long} arithmetic",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,populationCovariance,com.google.common.math.PairedStats:populationCovariance(),95,98,"/**
* Calculates population covariance by dividing sum of products of deltas
* by count of data points.
* @return Population covariance value or NaN if count is zero.","* Returns the population covariance of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It
   * is not guaranteed to return zero when the dataset consists of the same pair of values multiple
   * times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,sampleCovariance,com.google.common.math.PairedStats:sampleCovariance(),113,116,"/**
* Calculates sample covariance as the sum of products of deltas divided by count minus one.
* @return Sample covariance value
*/","* Returns the sample covariance of the values. The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same pair of values
   * multiple times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,pearsonsCorrelationCoefficient,com.google.common.math.PairedStats:pearsonsCorrelationCoefficient(),134,148,"/**
* Calculates Pearson's correlation coefficient.
* @return double value in range [-1, 1] or NaN if invalid input
*/","* Returns the <a href=""http://mathworld.wolfram.com/CorrelationCoefficient.html"">Pearson's or
   * product-moment correlation coefficient</a> of the values. The count must greater than one, and
   * the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not
   * guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to
   * numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1].
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     either the {@code x} and {@code y} dataset has zero population variance",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,meanOf,com.google.common.math.Stats:meanOf(java.util.Iterator),488,503,"/**
* Calculates the mean of a sequence of numbers.
* @param values iterator over values
* @return calculated mean or NaN if non-finite values present
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>The definition of the mean is the same as {@link Stats#mean}.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)
   * @throws IllegalArgumentException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,add,com.google.common.math.StatsAccumulator:add(double),53,76,"/**
* Updates running statistics with a new data point.
* @param value the new data point
*/",Adds the given value to the dataset.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,merge,"com.google.common.math.StatsAccumulator:merge(long,double,double,double,double)",191,217,"/**
* Merges statistical data from this instance with provided values.
* @param otherCount number of items in the merged dataset
* @param otherMean mean value of the merged dataset
* @param otherSumOfSquaresOfDeltas sum of squared deltas for the merged dataset
* @param otherMin minimum value of the merged dataset
* @param otherMax maximum value of the merged dataset
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,populationCovariance,com.google.common.math.PairedStatsAccumulator:populationCovariance(),128,131,"/**
* Calculates sample covariance between data points and their mean.
* @return Covariance value or NaN if count is zero
*/","* Returns the population covariance of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It
   * is not guaranteed to return zero when the dataset consists of the same pair of values multiple
   * times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,sampleCovariance,com.google.common.math.PairedStatsAccumulator:sampleCovariance(),146,149,"/**
* Calculates sample covariance.
* @return Sample covariance value or NaN if count < 2
*/","* Returns the sample covariance of the values. The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same pair of values
   * multiple times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,pearsonsCorrelationCoefficient,com.google.common.math.PairedStatsAccumulator:pearsonsCorrelationCoefficient(),167,181,"/**
* Calculates Pearson's correlation coefficient.
* @return Correlation value or NaN if invalid data
*/","* Returns the <a href=""http://mathworld.wolfram.com/CorrelationCoefficient.html"">Pearson's or
   * product-moment correlation coefficient</a> of the values. The count must greater than one, and
   * the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not
   * guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to
   * numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1].
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     either the {@code x} and {@code y} dataset has zero population variance",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,partition,"com.google.common.math.Quantiles:partition(double[],int,int)",575,595,"/**
* Partitions the array around a pivot element using QuickSelect algorithm.
* @param array input array to be partitioned
* @param from starting index of the slice
* @param to ending index of the slice
* @return partition point around which the array is sorted
*/","* Performs a partition operation on the slice of {@code array} with elements in the range [{@code
   * from}, {@code to}]. Uses the median of {@code from}, {@code to}, and the midpoint between them
   * as a pivot. Returns the index which the slice is partitioned around, i.e. if it returns {@code
   * ret} then we know that the values with indexes in [{@code from}, {@code ret}) are less than or
   * equal to the value at {@code ret} and the values with indexes in ({@code ret}, {@code to}] are
   * greater than or equal to that.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,fromByteArray,com.google.common.math.PairedStats:fromByteArray(byte[]),304,316,"/**
* Creates PairedStats object from a byte array.
* @param byteArray input data in little-endian format
*/","* Creates a {@link PairedStats} instance from the given byte representation which was obtained by
   * {@link #toByteArray}.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,fromByteArray,com.google.common.math.Stats:fromByteArray(byte[]),627,635,"/**
* Creates a Stats object from the given byte array.
* @param byteArray byte representation of Stats data
*/","* Creates a Stats instance from the given byte representation which was obtained by {@link
   * #toByteArray}.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,snapshot,com.google.common.math.PairedStatsAccumulator:snapshot(),95,97,"/**
* Creates a PairedStats object by snapshotting x and y stats.
*/",Returns an immutable snapshot of the current statistics.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,xStats,com.google.common.math.PairedStatsAccumulator:xStats(),105,107,"/**
* Returns current statistics snapshot.
* @return Stats object containing current data
*/",Returns an immutable snapshot of the statistics on the {@code x} values alone.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,yStats,com.google.common.math.PairedStatsAccumulator:yStats(),110,112,"/**
* Retrieves current statistics snapshot.
*/",Returns an immutable snapshot of the statistics on the {@code y} values alone.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,toStats,com.google.common.math.Stats:toStats(),216,226,"/**
* Creates a collector that accumulates numbers into a stats object.
* @return Collector instance
*/","* Returns a {@link Collector} which accumulates statistics from a {@link java.util.stream.Stream}
   * of any type of boxed {@link Number} into a {@link Stats}. Use by calling {@code
   * boxedNumericStream.collect(toStats())}. The numbers will be converted to {@code double} values
   * (which may cause loss of precision).
   *
   * <p>If you have any of the primitive streams {@code DoubleStream}, {@code IntStream}, or {@code
   * LongStream}, you should use the factory method {@link #of} instead.
   *
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,convertDottedQuadToHex,com.google.common.net.InetAddresses:convertDottedQuadToHex(java.lang.String),336,347,"/**
* Converts IPv4 address from dotted quad to hexadecimal format.
* @param ipString IPv4 address in dotted quad notation
* @return Hexadecimal representation as a string, or null if invalid
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,toUriString,com.google.common.net.InetAddresses:toUriString(java.net.InetAddress),580,585,"/**
* Converts InetAddress object to URI string.
* @param ip the address to convert
* @return URI string representation of the address, or null if invalid
*/","* Returns the string representation of an {@link InetAddress} suitable for inclusion in a URI.
   *
   * <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6
   * addresses it compresses zeroes and surrounds the text with square brackets; for example {@code
   * ""[2001:db8::1]""}.
   *
   * <p>Per section 3.2.2 of <a target=""_parent""
   * href=""http://tools.ietf.org/html/rfc3986#section-3.2.2"">RFC 3986</a>, a URI containing an IPv6
   * string literal is of the form {@code ""http://[2001:db8::1]:8888/index.html""}.
   *
   * <p>Use of either {@link InetAddresses#toAddrString}, {@link InetAddress#getHostAddress()}, or
   * this method is recommended over {@link InetAddress#toString()} when an IP address string
   * literal is desired. This is because {@link InetAddress#toString()} prints the hostname and the
   * IP address string joined by a ""/"".
   *
   * @param ip {@link InetAddress} to be converted to URI string literal
   * @return {@code String} containing URI-safe string literal",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getCompatIPv4Address,com.google.common.net.InetAddresses:getCompatIPv4Address(java.net.Inet6Address),702,707,"/**
* Extracts the IPv4 address from an IPv6 address that is IPv4-compatible.
* @param ip IPv6 address
* @return Inet4Address object representing the embedded IPv4 address
*/","* Returns the IPv4 address embedded in an IPv4 compatible address.
   *
   * @param ip {@link Inet6Address} to be examined for an embedded IPv4 address
   * @return {@link Inet4Address} of the embedded IPv4 address
   * @throws IllegalArgumentException if the argument is not a valid IPv4 compatible address",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,get6to4IPv4Address,com.google.common.net.InetAddresses:get6to4IPv4Address(java.net.Inet6Address),733,737,"/**
* Extracts IPv4 address from a given 6to4 IPv6 address.
* @param ip 6to4 IPv6 address
*/","* Returns the IPv4 address embedded in a 6to4 address.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 in 6to4 address
   * @return {@link Inet4Address} of embedded IPv4 in 6to4 address
   * @throws IllegalArgumentException if the argument is not a valid IPv6 6to4 address",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getIsatapIPv4Address,com.google.common.net.InetAddresses:getIsatapIPv4Address(java.net.Inet6Address),884,888,"/**
* Extracts the embedded IPv4 address from an ISATAP address.
* @param ip Inet6Address containing the ISATAP address
* @return Inet4Address representing the embedded IPv4 address
*/","* Returns the IPv4 address embedded in an ISATAP address.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 in ISATAP address
   * @return {@link Inet4Address} of embedded IPv4 in an ISATAP address
   * @throws IllegalArgumentException if the argument is not a valid IPv6 ISATAP address",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeCharacter,com.google.common.net.MediaType$Tokenizer:consumeCharacter(com.google.common.base.CharMatcher),1167,1173,"/**
* Consumes and returns a character that matches the specified matcher.
* @param matcher CharMatcher to validate the consumed character
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeCharacter,com.google.common.net.MediaType$Tokenizer:consumeCharacter(char),1175,1181,"/**
* Consumes and returns the next character, checking it matches the preview.
* @param c expected character to match the preview
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,hashCode,com.google.common.primitives.ImmutableDoubleArray$AsList:hashCode(),555,558,"/**
* Returns hash code of parent object.
* @return Hash code value inherited from parent.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,compute,com.google.common.math.Quantiles$ScaleAndIndex:compute(java.util.Collection),242,244,"/**
* Computes average value of numbers in the provided collection.
* @param dataset collection of numeric values
* @return computed average value
*/","* Computes the quantile value of the given dataset.
     *
     * @param dataset the dataset to do the calculation on, which must be non-empty, which will be
     *     cast to doubles (with any associated lost of precision), and which will not be mutated by
     *     this call (it is copied instead)
     * @return the quantile value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,compute,com.google.common.math.Quantiles$ScaleAndIndexes:compute(java.util.Collection),347,349,"/**
* Computes statistics and returns a map of key-value pairs.
* @return Map with keys as integers and values as doubles
*/","* Computes the quantile values of the given dataset.
     *
     * @param dataset the dataset to do the calculation on, which must be non-empty, which will be
     *     cast to doubles (with any associated lost of precision), and which will not be mutated by
     *     this call (it is copied instead)
     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile
     *     indexes, and the values the corresponding quantile values. When iterating, entries in the
     *     map are ordered by quantile index in the same order they were passed to the {@code
     *     indexes} method.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,add,com.google.common.primitives.ImmutableDoubleArray$Builder:add(double),225,231,"/**
* Adds a double value to the builder's capacity.
* @param value the value to be added
*/","* Appends {@code value} to the end of the values the built {@link ImmutableDoubleArray} will
     * contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(double[]),237,243,"/**
* Adds all elements from the specified array to the builder's collection.
* @param values array of double values to add
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.util.Collection),264,271,"/**
* Adds all specified double values to the builder's array.
* @param values collection of double values
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(com.google.common.primitives.ImmutableDoubleArray),294,300,"/**
* Adds all elements from the given double array to this builder.
* @param values double array to add elements from
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,com.google.common.primitives.ImmutableDoubleArray:of(double),97,99,"/**
* Creates an immutable array containing a single double value.
* @param e0 the value to be contained in the array
*/",Returns an immutable array containing a single value.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double)",102,104,"/**
* Creates an immutable array containing two specified double values.
* @param e0 first double value
* @param e1 second double value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double)",107,109,"/**
* Creates an ImmutableDoubleArray with three elements.
* @param e0 first element value
* @param e1 second element value
* @param e2 third element value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double)",112,114,"/**
* Creates an ImmutableDoubleArray instance with four elements.
* @param e0 first element
* @param e1 second element
* @param e2 third element
* @param e3 fourth element
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double,double)",117,119,"/**
* Creates an immutable array of doubles with the specified elements.
* @param e0 first element
* @param e1 second element
* @param e2 third element
* @param e3 fourth element
* @param e4 fifth element
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double,double,double)",122,125,"/**
* Creates an immutable array of doubles with the specified values.
* @param e0 first value
* @param e1 second value
* @param e2 third value
* @param e3 fourth value
* @param e4 fifth value
* @param e5 sixth value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(double[]),146,150,"/**
* Creates an immutable double array from a given array.
* @param values the input array to copy (may be empty)
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(java.util.Collection),153,155,"/**
* Creates an immutable double array from a collection of doubles.
* @param values collection of doubles to copy
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(java.util.stream.DoubleStream),176,180,"/**
* Copies a DoubleStream into an ImmutableDoubleArray.
* @param stream input stream of doubles
* @return ImmutableDoubleArray representation or EMPTY if empty
*/","* Returns an immutable array containing all the values from {@code stream}, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,trimmed,com.google.common.primitives.ImmutableDoubleArray:trimmed(),631,633,"/**
* Returns a trimmed version of this array, or itself if not partial view.
*/","* Returns an immutable array containing the same values as {@code this} array. This is logically
   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance
   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range
   * of values, resulting in an equivalent array with a smaller memory footprint.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,indexOf,com.google.common.primitives.ImmutableDoubleArray$AsList:indexOf(java.lang.Object),509,512,"/**
* Searches for a Double value in the parent collection.
* @param target the Double to search for (or null to indicate no search)
* @return index of the found Double, or -1 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,contains,com.google.common.primitives.ImmutableDoubleArray:contains(double),417,419,"/**
* Checks if a specified value exists in this collection.
* @param target the value to search for
*/","* Returns {@code true} if {@code target} is present at any index in this array. Values are
   * compared as if by {@link Double#equals}. Equivalent to {@code asList().contains(target)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,lastIndexOf,com.google.common.primitives.ImmutableDoubleArray$AsList:lastIndexOf(java.lang.Object),514,517,"/**
* Searches for the specified double value in the parent collection and returns its last index.
* @param target double value to search for
* @return index of the target value, or -1 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,toString,com.google.common.primitives.ImmutableDoubleArray$AsList:toString(),560,563,"/**
* Delegates string representation to parent object.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,contains,com.google.common.primitives.ImmutableIntArray$AsList:contains(java.lang.Object),499,502,"/**
* Checks if this collection contains a specified element.
* @param target object to search for
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,add,com.google.common.primitives.ImmutableIntArray$Builder:add(int),222,228,"/**
* Adds an integer value to the builder's collection.
* @param value integer value to be added
*/","* Appends {@code value} to the end of the values the built {@link ImmutableIntArray} will
     * contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(int[]),234,240,"/**
* Adds all elements from the provided array to this builder's collection.
* @param values array of integers to add
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.util.Collection),261,268,"/**
* Adds all integers from a collection to the builder's array.
* @param values collection of integers to add
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(com.google.common.primitives.ImmutableIntArray),291,297,"/**
* Adds all elements from the specified ImmutableIntArray to this builder.
* @param values ImmutableIntArray containing elements to add
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,com.google.common.primitives.ImmutableIntArray:of(int),97,99,"/**
* Creates an immutable array containing a single element.
* @param e0 the initial element value
*/",Returns an immutable array containing a single value.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int)",102,104,"/**
* Creates an ImmutableIntArray with two elements.
* @param e0 first element value
* @param e1 second element value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int)",107,109,"/**
* Creates an immutable array with three elements.
* @param e0 first element
* @param e1 second element
* @param e2 third element
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int,int)",112,114,"/**
* Creates an immutable array with four integer elements.
* @param e0 first element
* @param e1 second element
* @param e2 third element
* @param e3 fourth element
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int,int,int)",117,119,"/**
* Creates an ImmutableIntArray with the specified elements.
* @param e0 first element
* @param e1 second element
* @param e2 third element
* @param e3 fourth element
* @param e4 fifth element
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int,int,int,int)",122,124,"/**
* Creates an immutable array with the specified elements.
* @param e0 first element
* @param e1 second element
* @param e2 third element
* @param e3 fourth element
* @param e4 fifth element
* @param e5 sixth element
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(int[]),145,147,"/**
* Creates an immutable integer array from a given array.
* @param values input array to be copied
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(java.util.stream.IntStream),173,177,"/**
* Creates a copy of the given IntStream as an immutable int array.
* @param stream input IntStream to be copied
*/","* Returns an immutable array containing all the values from {@code stream}, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,trimmed,com.google.common.primitives.ImmutableIntArray:trimmed(),621,623,"/**
* Returns a trimmed view of this array, or a copy if it's a partial view.
* @return ImmutableIntArray instance with updated size
*/","* Returns an immutable array containing the same values as {@code this} array. This is logically
   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance
   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range
   * of values, resulting in an equivalent array with a smaller memory footprint.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,hashCode,com.google.common.primitives.ImmutableIntArray$AsList:hashCode(),550,553,"/**
* Returns hash code based on parent's implementation.
* @see ParentClass#hashCode()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,toString,com.google.common.primitives.ImmutableIntArray$AsList:toString(),555,558,"/**
* Returns the string representation of the parent object.
* @return The string representation of the parent object or null if not set. 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,contains,com.google.common.primitives.ImmutableLongArray$AsList:contains(java.lang.Object),501,504,"/**
* Checks if an object is present in this collection.
* @param target the object to search for (may be null)
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,add,com.google.common.primitives.ImmutableLongArray$Builder:add(long),224,230,"/**
* Adds an integer value to the builder's underlying data structure.
* @param value long integer value to be added
*/","* Appends {@code value} to the end of the values the built {@link ImmutableLongArray} will
     * contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(long[]),236,242,"/**
* Adds all specified values to the builder's array.
* @param values array of long values to add
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.util.Collection),263,270,"/**
* Adds all specified IDs to the builder's collection.
* @param values Collection of unique long identifiers
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(com.google.common.primitives.ImmutableLongArray),293,299,"/**
* Adds all elements from the given immutable long array to this builder.
* @param values long array to append
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,com.google.common.primitives.ImmutableLongArray:of(long),97,99,"/**
* Creates an ImmutableLongArray with a single element.
* @param e0 the value to be stored in the array
*/",Returns an immutable array containing a single value.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long)",102,104,"/**
* Creates an immutable array with two elements.
* @param e0 first element value
* @param e1 second element value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long)",107,109,"/**
* Creates an immutable array with three elements.
* @param e0 first element
* @param e1 second element
* @param e2 third element
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long,long)",112,114,"/**
* Creates an array with four elements from the given values.
* @param e0 first element value
* @param e1 second element value
* @param e2 third element value
* @param e3 fourth element value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long,long,long)",117,119,"/**
* Creates an ImmutableLongArray from five individual elements.
* @param e0 first element
* @param e1 second element
* @param e2 third element
* @param e3 fourth element
* @param e4 fifth element
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long,long,long,long)",122,124,"/**
* Creates an ImmutableLongArray instance with the specified elements.
* @param e0 first element
* @param e1 second element
* @param e2 third element
* @param e3 fourth element
* @param e4 fifth element
* @param e5 sixth element
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(long[]),145,149,"/**
* Creates an immutable long array from the given long array.
* @param values original long array
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(java.util.stream.LongStream),175,179,"/**
* Creates an immutable long array by copying a LongStream into it.
* @param stream the input LongStream to copy from
*/","* Returns an immutable array containing all the values from {@code stream}, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,trimmed,com.google.common.primitives.ImmutableLongArray:trimmed(),623,625,"/**
* Returns a trimmed version of the array, or the original if not partial view.
*/","* Returns an immutable array containing the same values as {@code this} array. This is logically
   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance
   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range
   * of values, resulting in an equivalent array with a smaller memory footprint.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,hashCode,com.google.common.primitives.ImmutableLongArray$AsList:hashCode(),552,555,"/**
* Returns hash code based on parent's implementation.
* @see #parent
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,toString,com.google.common.primitives.ImmutableLongArray$AsList:toString(),557,560,"/**
* Returns string representation by delegating to parent.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,indexes,com.google.common.math.Quantiles$Scale:indexes(java.util.Collection),212,214,"/**
 * Creates a ScaleAndIndexes object from a collection of integer indexes. 
 * @param indexes collection of integer indexes to scale
 */","* Specifies multiple quantile indexes to be calculated, each index being the k in the kth
     * q-quantile.
     *
     * @param indexes the quantile indexes, each of which must be in the inclusive range [0, q] for
     *     q-quantiles; the order of the indexes is unimportant, duplicates will be ignored, and the
     *     set will be snapshotted when this method is called
     * @throws IllegalArgumentException if {@code indexes} is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(java.util.Collection),150,152,"/**
* Creates an immutable integer array from the given collection of integers.
* @param values Collection of integers to be copied
* @return ImmutableIntArray object or EMPTY if input is empty
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(java.util.Collection),152,154,"/**
* Creates an immutable long array from a collection of long values.
* @param values collection of long values
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,tryParse,"com.google.common.primitives.Ints:tryParse(java.lang.String,int)",840,847,"/**
* Tries to parse a string into an integer with specified radix.
* @param string input string to parse
* @param radix base of the number in the input string
* @return parsed int value or null if parsing fails or is invalid","* Parses the specified string as a signed integer value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of an integer value
   * @param radix the radix to use when parsing
   * @return the integer value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as an integer value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,tryParse,com.google.common.primitives.Longs:tryParse(java.lang.String),376,378,"/**
* Tries to parse a string into a long value using base 10.
* @param string input string to be parsed
*/","* Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} (
   * <code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing
   * an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns
   * {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of a long value
   * @return the long value represented by {@code string}, or {@code null} if {@code string} has a
   *     length of zero or cannot be parsed as a long value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,decode,com.google.common.primitives.UnsignedInts:decode(java.lang.String),319,331,"/**
* Decodes a string representation of an unsigned integer.
* @param stringValue string to parse, must conform to ParseRequest format
*/","* Returns the unsigned {@code int} value represented by the given string.
   *
   * <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:
   *
   * <ul>
   *   <li>{@code 0x}<i>HexDigits</i>
   *   <li>{@code 0X}<i>HexDigits</i>
   *   <li>{@code #}<i>HexDigits</i>
   *   <li>{@code 0}<i>OctalDigits</i>
   * </ul>
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,com.google.common.primitives.UnsignedInteger:valueOf(long),75,81,"/**
* Creates an UnsignedInteger from a long value.
* @param value long value to convert, must be within unsigned int range
*/","* Returns an {@code UnsignedInteger} that is equal to {@code value}, if possible. The inverse
   * operation of {@link #longValue()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,com.google.common.primitives.UnsignedInteger:valueOf(java.math.BigInteger),89,96,"/**
* Converts BigInteger to UnsignedInteger.
* @param value arbitrary-precision integer
* @return UnsignedInteger object or throws if invalid
*/","* Returns a {@code UnsignedInteger} representing the same value as the specified {@link
   * BigInteger}. This is the inverse operation of {@link #bigIntegerValue()}.
   *
   * @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^32}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,"com.google.common.primitives.UnsignedInteger:valueOf(java.lang.String,int)",116,118,"/**
* Parses unsigned integer from string representation in specified radix.
* @param string string representation of unsigned integer
* @param radix base of the number in the string (e.g. 10 for decimal)
* @return UnsignedInteger value or throws exception on parsing error
*/","* Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as
   * an unsigned {@code int} value in the specified radix.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}
   *     value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,plus,com.google.common.primitives.UnsignedInteger:plus(com.google.common.primitives.UnsignedInteger),126,128,"/**
* Adds two unsigned integers together.
* @param val integer to be added
* @return result of addition as UnsignedInteger
*/","* Returns the result of adding this and {@code val}. If the result would have more than 32 bits,
   * returns the low 32 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,minus,com.google.common.primitives.UnsignedInteger:minus(com.google.common.primitives.UnsignedInteger),136,138,"/**
* Subtracts another unsigned integer value.
* @param val value to subtract
* @return result of subtraction (or null if input is invalid)
*/","* Returns the result of subtracting this and {@code val}. If the result would be negative,
   * returns the low 32 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,times,com.google.common.primitives.UnsignedInteger:times(com.google.common.primitives.UnsignedInteger),146,151,"/**
* Computes the product of two unsigned integers.
* @param val value to multiply with
* @return product as an UnsignedInteger object
*/","* Returns the result of multiplying this and {@code val}. If the result would have more than 32
   * bits, returns the low 32 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,dividedBy,com.google.common.primitives.UnsignedInteger:dividedBy(com.google.common.primitives.UnsignedInteger),159,161,"/**
* Divides this UnsignedInteger by another.
* @param val divisor value
* @return quotient as UnsignedInteger or throws if division is zero
*/","* Returns the result of dividing this by {@code val}.
   *
   * @throws ArithmeticException if {@code val} is zero
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,mod,com.google.common.primitives.UnsignedInteger:mod(com.google.common.primitives.UnsignedInteger),169,171,"/**
* Computes remainder of this unsigned integer value divided by another.
* @param val the divisor
*/","* Returns this mod {@code val}.
   *
   * @throws ArithmeticException if {@code val} is zero
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,toString,com.google.common.primitives.UnsignedInteger:toString(),240,243,"/**
* Returns a string representation of the object using the default formatting.
* @return A formatted string with a maximum length of 10 characters.","Returns a string representation of the {@code UnsignedInteger} value, in base 10.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,compareTo,com.google.common.primitives.UnsignedInteger:compareTo(com.google.common.primitives.UnsignedInteger),219,223,"/**
* Compares this UnsignedInteger with another.
* @param other UnsignedInteger to compare with
* @return negative/positive/zero if this < / > / == other
*/","* Compares this unsigned integer to another unsigned integer. Returns {@code 0} if they are
   * equal, a negative number if {@code this < other}, and a positive number if {@code this >
   * other}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,compare,"com.google.common.primitives.UnsignedInts$LexicographicalComparator:compare(int[],int[])",200,211,"/**
* Compares two integer arrays lexicographically.
* @param left first array
* @param right second array
* @return negative/positive value if left/right is smaller/larger, 0 if equal
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,com.google.common.primitives.UnsignedLong:valueOf(long),78,82,"/**
* Converts a non-negative long to an UnsignedLong.
* @param value non-negative long value
*/","* Returns an {@code UnsignedLong} representing the same value as the specified {@code long}.
   *
   * @throws IllegalArgumentException if {@code value} is negative
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,com.google.common.primitives.UnsignedLong:valueOf(java.math.BigInteger),90,98,"/**
* Converts a BigInteger to an UnsignedLong, checking for valid range.
* @param value BigInteger value to convert
*/","* Returns a {@code UnsignedLong} representing the same value as the specified {@code BigInteger}.
   * This is the inverse operation of {@link #bigIntegerValue()}.
   *
   * @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^64}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,plus,com.google.common.primitives.UnsignedLong:plus(com.google.common.primitives.UnsignedLong),131,133,"/**
* Adds an unsigned long value to this instance.
* @param val value to add
* @return new UnsignedLong result
*/","* Returns the result of adding this and {@code val}. If the result would have more than 64 bits,
   * returns the low 64 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,minus,com.google.common.primitives.UnsignedLong:minus(com.google.common.primitives.UnsignedLong),141,143,"/**
* Subtracts another unsigned long value and returns the result.
* @param val value to subtract
* @return resulting unsigned long value
*/","* Returns the result of subtracting this and {@code val}. If the result would have more than 64
   * bits, returns the low 64 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,times,com.google.common.primitives.UnsignedLong:times(com.google.common.primitives.UnsignedLong),151,153,"/**
* Multiplies two unsigned long values.
* @param val value to be multiplied
* @return product as an UnsignedLong object
*/","* Returns the result of multiplying this and {@code val}. If the result would have more than 64
   * bits, returns the low 64 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,compare,"com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator:compare(byte[],byte[])",374,413,"/**
* Compares two byte arrays, comparing 8 bytes at a time to maximize performance.
* @param left the first byte array
* @param right the second byte array
* @return negative if left is less than right, positive if greater, or zero for equality
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,compareTo,com.google.common.primitives.UnsignedLong:compareTo(com.google.common.primitives.UnsignedLong),231,235,"/**
* Compares this unsigned long value to another.
* @param o the other unsigned long value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,compare,"com.google.common.primitives.UnsignedLongs$LexicographicalComparator:compare(long[],long[])",166,175,"/**
* Compares two arrays of unsigned long integers lexicographically.
* @param left first array to compare
* @param right second array to compare
* @return negative if left is less than right, zero if equal, positive if greater
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,divide,"com.google.common.primitives.UnsignedLongs:divide(long,long)",250,273,"/**
* Computes the division of two 64-bit integers.
* @param dividend number to be divided
* @param divisor non-zero integer divisor
* @return quotient as a long value
*/","* Returns dividend / divisor, where the dividend and divisor are treated as unsigned 64-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#divideUnsigned(long, long)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,remainder,"com.google.common.primitives.UnsignedLongs:remainder(long,long)",286,309,"/**
* Calculates the remainder of two integers.
* @param dividend number to get remainder from
* @param divisor non-zero divisor value
* @return remainder as a long integer
*/","* Returns dividend % divisor, where the dividend and divisor are treated as unsigned 64-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#remainderUnsigned(long, long)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,"com.google.common.primitives.UnsignedLong:valueOf(java.lang.String,int)",120,123,"/**
* Parses unsigned long integer from string representation.
* @param string input string to parse
* @param radix base of the input number (e.g., 10 for decimal)
*/","* Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an
   * unsigned {@code long} value in the specified radix.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code long}
   *     value, or {@code radix} is not between {@link Character#MIN_RADIX} and {@link
   *     Character#MAX_RADIX}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,parseUnsignedLong,com.google.common.primitives.UnsignedLongs:parseUnsignedLong(java.lang.String),321,324,"/**
* Converts a string to an unsigned long integer using base 10.
* @param string input string to parse
*/","* Returns the unsigned {@code long} value represented by the given decimal string.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String)} instead.
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}
   *     value
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Long#parseLong(String)})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,decode,com.google.common.primitives.UnsignedLongs:decode(java.lang.String),381,393,"/**
* Decodes a string representation of an unsigned long integer.
* @param stringValue string to parse
*/","* Returns the unsigned {@code long} value represented by the given string.
   *
   * <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:
   *
   * <ul>
   *   <li>{@code 0x}<i>HexDigits</i>
   *   <li>{@code 0X}<i>HexDigits</i>
   *   <li>{@code #}<i>HexDigits</i>
   *   <li>{@code 0}<i>OctalDigits</i>
   * </ul>
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}
   *     value
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isPackagePrivate,com.google.common.reflect.Invokable:isPackagePrivate(),160,162,"/**
* Checks if the access level of this member is package-private.
*/",Returns true if the element is package-private.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,getKey,com.google.common.collect.ForwardingMapEntry:getKey(),60,64,"/**
* Retrieves the key associated with this instance.
* @return The key value of type K.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,getValue,com.google.common.collect.ForwardingMapEntry:getValue(),66,70,"/**
* Returns the value from the underlying delegate.
* @return The value or null if not available
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.ForwardingMapEntry:setValue(java.lang.Object),72,77,"/**
* Sets the value using the underlying delegate.
* @param value new value to be set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,equals,com.google.common.collect.ForwardingMapEntry:equals(java.lang.Object),79,82,"/**
* Compares this instance with another object for equality.
* @param object the other object to compare with
* @return true if objects are equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,hashCode,com.google.common.collect.ForwardingMapEntry:hashCode(),84,87,"/**
* Returns hash code based on the delegate's implementation.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.ImmutableTypeToInstanceMap:getInstance(java.lang.Class),107,110,"/**
* Retrieves an instance of a given class type.
* @param type Class type to instantiate
* @return Instance of the specified type or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getOwnerType,com.google.common.reflect.Invokable:getOwnerType(),330,333,"/**
* Retrieves the type token of the owner class.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.MutableTypeToInstanceMap:getInstance(java.lang.Class),45,48,"/**
* Retrieves an instance of the specified class type from a trusted source.
* @param type Class type to retrieve instance for
* @return Instance object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,putInstance,"com.google.common.reflect.MutableTypeToInstanceMap:putInstance(java.lang.Class,java.lang.Object)",55,60,"/**
* Inserts a typed instance into the map.
* @param type class of the instance to store
* @param value instance to be stored
* @return the stored instance or null if failed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,wrap,com.google.common.reflect.TypeToken:wrap(),545,552,"/**
* Wraps the TypeToken in a non-primitive type, if applicable.
* @return the wrapped TypeToken or itself, if already non-primitive
*/","* Returns the corresponding wrapper type if this is a primitive type; otherwise returns {@code
   * this} itself. Idempotent.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,unwrap,com.google.common.reflect.TypeToken:unwrap(),564,571,"/**
* Unwraps the TypeToken, returning its underlying primitive type if it's a wrapper. 
* @return the unwrapped TypeToken or the original token if not a wrapper
*/","* Returns the corresponding primitive type if this is a wrapper type; otherwise returns {@code
   * this} itself. Idempotent.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getReturnType,com.google.common.reflect.Invokable:getReturnType(),261,264,"/**
* Retrieves the generic return type of this method.
* @return TypeToken representing the return type
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOf,com.google.common.reflect.TypeToken$Bounds:isSubtypeOf(java.lang.reflect.Type),1073,1080,"/**
* Checks if this type is a subtype of the given super type.
* @param supertype the type to check against
* @return true if sub-type, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOf,com.google.common.reflect.TypeToken$Bounds:isSupertypeOf(java.lang.reflect.Type),1082,1090,"/**
* Checks if the given subtype is a supertype of this Type.
* @param subtype type to check
* @return true if subtype is a supertype, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getComponentType,com.google.common.reflect.TypeToken:getComponentType(),577,583,"/**
* Retrieves the component type of this type token, or null if none.
*/","* Returns the array component type if this type represents an array ({@code int[]}, {@code T[]},
   * {@code <? extends Map<String, Integer>[]>} etc.), or else {@code null} is returned.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOfArrayType,com.google.common.reflect.TypeToken:isSubtypeOfArrayType(java.lang.reflect.GenericArrayType),919,933,"/**
* Checks if a given type is a subtype of an array type.
* @param supertype GenericArrayType to check against
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOfArray,com.google.common.reflect.TypeToken:isSupertypeOfArray(java.lang.reflect.GenericArrayType),935,948,"/**
* Checks if a given generic array type is a subtype of this type.
* @param subtype the generic array type to check
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSubtypeFromLowerBounds,"com.google.common.reflect.TypeToken:getSubtypeFromLowerBounds(java.lang.Class,java.lang.reflect.Type[])",1216,1224,"/**
* Resolves the subtype from lower bounds for a given subclass.
* @param subclass Class to resolve against
* @param lowerBounds Array of Type objects representing lower bounds
* @return TypeToken<? extends T> or throws IllegalArgumentException if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,typeName,com.google.common.reflect.Types$JavaVersion$4:typeName(java.lang.reflect.Type),652,654,"/**
* Converts Type object to its string representation.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,toString,com.google.common.util.concurrent.AbstractExecutionThreadService$1:toString(),151,154,"/**
* Returns a string representation of the service in format ""serviceName [state]"".
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,com.google.common.util.concurrent.AbstractFuture:get(),249,254,"/**
* Retrieves the computed value, blocking until completion.
* @throws InterruptedException if interrupted while waiting
* @throws ExecutionException if computation failed
*/","* {@inheritDoc}
   *
   * <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the
   * current thread is interrupted during the call, even if the value is already available.
   *
   * @throws CancellationException {@inheritDoc}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addListener,"com.google.common.util.concurrent.AbstractFuture$TrustedFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",117,120,"/**
* Adds a new event listener to the component.
* @param listener callback function to invoke on events
* @param executor executor to run the listener on
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,toString,com.google.common.util.concurrent.AbstractIdleService$DelegateService:toString(),89,92,"/**
* Returns a string representation of this service.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:<init>(java.util.concurrent.ScheduledExecutorService),544,547,"/**
* Initializes the decorator with a scheduled executor service.
* @param delegate scheduled executor service to decorate
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,submit,com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.util.concurrent.Callable),45,48,"/**
* Submits a task to be executed asynchronously and returns a future result.
* @param task Callable object containing the task to execute
* @return ListenableFuture representing the asynchronous execution
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,submitAndAddQueueListener,"com.google.common.util.concurrent.MoreExecutors:submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)",764,771,"/**
* Submits a task to the executor service and adds its result to a blocking queue.
* @param executorService ListeningExecutorService instance
* @param task Callable task to be executed
* @param queue BlockingQueue of Future objects
* @return ListenableFuture representing the submitted task's result
*/",* Submits the task and adds a listener that adds the future to {@code queue} when it completes.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,awaitRunning,com.google.common.util.concurrent.AbstractExecutionThreadService:awaitRunning(java.time.Duration),213,216,"/**
* Awaits the service to be running with optional timeout.
* @param timeout maximum time to wait, may throw TimeoutException if exceeded
*/",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,awaitRunning,com.google.common.util.concurrent.AbstractIdleService:awaitRunning(java.time.Duration),177,180,"/**
* Waits until service is running within specified duration.
* @param timeout maximum waiting time
*/",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,awaitRunning,com.google.common.util.concurrent.AbstractScheduledService:awaitRunning(java.time.Duration),468,471,"/**
* Waits until service is running within specified time limit.
* @param timeout maximum duration to wait
*/",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitRunning,com.google.common.util.concurrent.AbstractService:awaitRunning(java.time.Duration),316,319,"/**
* Awaits service running with specified timeout.
* @param timeout maximum duration to wait
*/",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,awaitTerminated,com.google.common.util.concurrent.AbstractExecutionThreadService:awaitTerminated(java.time.Duration),237,240,"/**
* Waits until the service has terminated or times out.
* @param timeout maximum time to wait before throwing a TimeoutException
*/",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,awaitTerminated,com.google.common.util.concurrent.AbstractIdleService:awaitTerminated(java.time.Duration),201,204,"/**
* Awaits termination of this service instance within a specified time duration.
* @param timeout maximum wait time before throwing TimeoutException
*/",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,awaitTerminated,com.google.common.util.concurrent.AbstractScheduledService:awaitTerminated(java.time.Duration),492,495,"/**
 * Waits for service termination within specified duration.
 * @param timeout maximum time to wait in Duration format
 */",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitTerminated,com.google.common.util.concurrent.AbstractService:awaitTerminated(java.time.Duration),351,354,"/**
* Awaits termination of service instance within specified time duration.
* @param timeout maximum waiting period
* @throws TimeoutException if termination not achieved within given time
*/",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,doStart,com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:doStart(),255,282,"/**
* Executes startup tasks in a separate thread, handling exceptions and notification.
* @throws Throwable if an error occurs during startup
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,toString,com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:toString(),314,317,"/**
* Delegates string representation to parent class.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard:isSatisfied(),160,163,"/**
* Checks if the current machine state satisfies the running or higher condition. 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$IsStartableGuard:isSatisfied(),132,135,"/**
 * Checks if the current state satisfies the condition.
 * @return true if in NEW state, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$IsStoppableGuard:isSatisfied(),146,149,"/**
* Checks whether the current state satisfies the condition.
* @return true if the state is RUNNING or less, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$IsStoppedGuard:isSatisfied(),174,177,"/**
* Checks if the current machine state meets the termination condition.
* @return true if the state is TERMINATED or better, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isRunning,com.google.common.util.concurrent.AbstractService:isRunning(),489,492,"/**
* Checks whether the system is in the running state.
* @return true if running, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,toString,com.google.common.util.concurrent.AbstractService:toString(),515,518,"/**
* Returns a string representation of the object.
* Includes the class name and current state.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,<init>,"com.google.common.util.concurrent.CollectionFuture:<init>(com.google.common.collect.ImmutableCollection,boolean)",41,58,"/**
* Initializes CollectionFuture with a list of listenable futures and success requirement.
* @param futures collection of futures to execute
* @param allMustSucceed whether all must succeed for overall result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,<init>,"com.google.common.util.concurrent.CombinedFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,com.google.common.util.concurrent.AsyncCallable)",38,46,"/**
* Combines multiple ListenableFutures into a single future.
* @param futures collection of tasks to combine
* @param allMustSucceed whether all must succeed for the combined future
* @param callable callback for handling combined result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,<init>,"com.google.common.util.concurrent.CombinedFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,java.util.concurrent.Callable)",48,56,"/**
* Combines multiple ListenableFutures into a single future.
* @param futures collection of futures to combine
* @param allMustSucceed whether all must succeed for overall success
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,collectValueFromNonCancelledFuture,"com.google.common.util.concurrent.AggregateFuture:collectValueFromNonCancelledFuture(int,java.util.concurrent.Future)",280,290,"/**
* Collects and processes a non-cancelled future's value.
* @param index position of the future in the collection
* @param future completed input to process
*/","* Collects the result (success or failure) of one input future. The input must not have been
   * cancelled. For details on when this is called, see {@link #collectOneValue}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,getAndAdd,com.google.common.util.concurrent.AtomicDouble:getAndAdd(double),163,166,"/**
* Accumulates and adds the given delta to the current value.
* @param delta value to add to the current value
*/","* Atomically adds the given value to the current value.
   *
   * @param delta the value to add
   * @return the previous value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,addAndGet,com.google.common.util.concurrent.AtomicDouble:addAndGet(double),174,177,"/**
* Adds a value to an accumulated sum and returns the new sum.
* @param delta value to be added
* @return updated sum or NaN if previous sum was NaN
*/","* Atomically adds the given value to the current value.
   *
   * @param delta the value to add
   * @return the updated value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,getAndAdd,"com.google.common.util.concurrent.AtomicDoubleArray:getAndAdd(int,double)",180,183,"/**
* Adds delta to value at index i and returns new sum.
* @param i unique index identifier
* @param delta value to add
*/","* Atomically adds the given value to the element at index {@code i}.
   *
   * @param i the index
   * @param delta the value to add
   * @return the previous value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,addAndGet,"com.google.common.util.concurrent.AtomicDoubleArray:addAndGet(int,double)",192,195,"/**
* Accumulates and adds a delta to an integer value, returning the result.
* @param i initial value
* @param delta value to be added
* @return accumulated value as a double
*/","* Atomically adds the given value to the element at index {@code i}.
   *
   * @param i the index
   * @param delta the value to add
   * @return the updated value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,cancel,com.google.common.util.concurrent.ClosingFuture:cancel(boolean),1099,1108,"/**
* Cancels the asynchronous operation and closes associated resources.
* @param mayInterruptIfRunning whether to interrupt running tasks
* @return true if cancellation was successful, false otherwise
*/","* Attempts to cancel execution of this step. This attempt will fail if the step has already
   * completed, has already been cancelled, or could not be cancelled for some other reason. If
   * successful, and this step has not started when {@code cancel} is called, this step should never
   * run.
   *
   * <p>If successful, causes the objects captured by this step (if already started) and its input
   * step(s) for later closing to be closed on their respective {@link Executor}s. If any such calls
   * specified {@link MoreExecutors#directExecutor()}, those objects will be closed synchronously.
   *
   * @param mayInterruptIfRunning {@code true} if the thread executing this task should be
   *     interrupted; otherwise, in-progress tasks are allowed to complete, but the step will be
   *     cancelled regardless
   * @return {@code false} if the step could not be cancelled, typically because it has already
   *     completed normally; {@code true} otherwise",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,finalize,com.google.common.util.concurrent.ClosingFuture:finalize(),2119,2126,"/**
* Calls finalize() when garbage collected to detect and log any leaked ClosingFutures in an OPEN state.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,becomeSubsumedInto,com.google.common.util.concurrent.ClosingFuture:becomeSubsumedInto(com.google.common.util.concurrent.ClosingFuture$CloseableList),1121,1124,"/**
* Subsume this CloseableList into another, closing any remaining resources.
* @param otherCloseables list to subsume into
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,findPathTo,"com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,java.util.Set)",684,707,"/**
* Recursively finds a path of allowed prior locks from the given node.
* @param node current lock graph node
* @param seen set of nodes already traversed
* @return ExampleStackTrace object or null if no valid path found
*/","* Performs a depth-first traversal of the graph edges defined by each node's {@code
     * allowedPriorLocks} to find a path between {@code this} and the specified {@code lock}.
     *
     * @return If a path was found, a chained {@link ExampleStackTrace} illustrating the path to the
     *     {@code lock}, or {@code null} if no path was found.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,"com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace)",534,539,"/**
* Constructs a PotentialDeadlockException with two conflicting lock nodes and the conflicting stack trace.
* @param node1 first LockGraphNode in conflict
* @param node2 second LockGraphNode in conflict
* @param conflictingStackTrace example stack trace of the deadlock situation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,create,com.google.common.util.concurrent.ListenableFutureTask:create(java.util.concurrent.Callable),62,64,"/**
* Creates a ListenableFutureTask from a Callable.
* @param callable user-provided task to execute
*/","* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code
   * Callable}.
   *
   * @param callable the callable task
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,create,"com.google.common.util.concurrent.ListenableFutureTask:create(java.lang.Runnable,java.lang.Object)",76,79,"/**
* Creates an asynchronous task with a specified result.
* @param runnable the task to be executed
* @param result the expected result of the task
*/","* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code
   * Runnable}, and arrange that {@code get} will return the given result on successful completion.
   *
   * @param runnable the runnable task
   * @param result the result to return on successful completion. If you don't need a particular
   *     result, consider using constructions of the form: {@code ListenableFuture<?> f =
   *     ListenableFutureTask.create(runnable, null)}
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,addListener,"com.google.common.util.concurrent.ListenableFutureTask:addListener(java.lang.Runnable,java.util.concurrent.Executor)",89,92,"/**
 * Adds a listener to be executed by the specified executor. 
 * @param listener Runnable task to execute
 * @param exec Executor instance responsible for task execution
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,addListener,"com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:addListener(java.lang.Runnable,java.util.concurrent.Executor)",138,171,"/**
* Adds a listener to be executed after the delegate task is completed.
* @param listener Runnable to execute upon completion
* @param exec Executor for running the listener
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,done,com.google.common.util.concurrent.ListenableFutureTask:done(),110,113,"/**
 * Executes a list of tasks upon completion.
 */",Internal implementation detail used to invoke the listeners.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,create,com.google.common.util.concurrent.ExecutionSequencer:create(),94,96,"/**
* Creates a new instance of ExecutionSequencer.
*/",Creates a new instance.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,from,com.google.common.util.concurrent.FluentFuture:from(com.google.common.util.concurrent.ListenableFuture),133,137,"/**
* Converts a ListenableFuture into a FluentFuture.
* @param future the future to convert, may be null
*/","* Converts the given {@code ListenableFuture} to an equivalent {@code FluentFuture}.
   *
   * <p>If the given {@code ListenableFuture} is already a {@code FluentFuture}, it is returned
   * directly. If not, it is wrapped in a {@code FluentFuture} that delegates all calls to the
   * original {@code ListenableFuture}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,addFirst,com.google.common.collect.ForwardingDeque:addFirst(java.lang.Object),54,57,"/**
* Adds an element at the front of the collection.
* @param e the element to add
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,addLast,com.google.common.collect.ForwardingDeque:addLast(java.lang.Object),59,62,"/**
 * Adds an element to the end of this collection.
 * @param e the element to be added
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,descendingIterator,com.google.common.collect.ForwardingDeque:descendingIterator(),64,67,"/**
* Returns an iterator that iterates over this collection in reverse order.
* @return Iterator instance or null if not supported by the underlying collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,getFirst,com.google.common.collect.ForwardingDeque:getFirst(),69,73,"/**
* Retrieves the first element from this collection.
* @return The first element or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,getLast,com.google.common.collect.ForwardingDeque:getLast(),75,79,"/**
* Retrieves the last element of this collection.
* @return the last element or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,offerFirst,com.google.common.collect.ForwardingDeque:offerFirst(java.lang.Object),81,85,"/**
* Offers the first element to the underlying collection.
* @param e the element to offer
* @return true if offered successfully, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,offerLast,com.google.common.collect.ForwardingDeque:offerLast(java.lang.Object),87,91,"/**
* Offers the last element to the underlying collection.
* @param e the element to offer, or null for no-op
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,peekFirst,com.google.common.collect.ForwardingDeque:peekFirst(),93,96,"/**
* Returns the first element of this collection without removing it.
* @return The first element or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,peekLast,com.google.common.collect.ForwardingDeque:peekLast(),98,101,"/**
* Returns the last element without removing it from the underlying collection.
* @return the last element in the collection or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,pollFirst,com.google.common.collect.ForwardingDeque:pollFirst(),103,107,"/**
* Retrieves and removes the first element from the collection.
* @return The polled element or null if none available
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,pollLast,com.google.common.collect.ForwardingDeque:pollLast(),109,113,"/**
* Retrieves and removes the last element from the queue.
* @return Last element in the queue, or null if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,pop,com.google.common.collect.ForwardingDeque:pop(),115,120,"/**
* Removes and returns an element from the collection.
* @return Collection element or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,push,com.google.common.collect.ForwardingDeque:push(java.lang.Object),122,125,"/**
 * Delegates a single element to be pushed onto the underlying queue.
 * @param e the element to be added
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeFirst,com.google.common.collect.ForwardingDeque:removeFirst(),127,132,"/**
* Removes and returns the first element from this collection.
* @return removed element of type E or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeLast,com.google.common.collect.ForwardingDeque:removeLast(),134,139,"/**
* Removes and returns the last element from this collection.
* @return the removed element or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeFirstOccurrence,com.google.common.collect.ForwardingDeque:removeFirstOccurrence(java.lang.Object),141,145,"/**
* Removes first occurrence of object in collection.
* @param o object to be removed (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeLastOccurrence,com.google.common.collect.ForwardingDeque:removeLastOccurrence(java.lang.Object),147,151,"/**
* Removes last occurrence of specified object from collection.
* @param o object to be removed, or null for no action
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,delegate,com.google.common.collect.ForwardingQueue:delegate(),54,55,"/**
* Returns an implementation-specific queue of elements.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,addListener,"com.google.common.util.concurrent.ForwardingListenableFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",42,45,"/**
* Adds a listener to be executed by the specified executor.
* @param listener Runnable task to execute on event
* @param exec Executor instance for executing tasks
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,delegate,com.google.common.util.concurrent.ForwardingFuture:delegate(),43,44,"/**
 * Delegates execution to a subclass-provided task.
 * @return Future representing asynchronous operation result.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,nonCancellationPropagating,com.google.common.util.concurrent.Futures:nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture),785,793,"/**
* Propagates non-cancellation status from input future to output.
* @param future input future to propagate non-cancellation from
* @return a new future with non-cancellation propagated or the original if already done
*/","* Returns a {@code ListenableFuture} whose result is set from the supplied future when it
   * completes. Cancelling the supplied future will also cancel the returned future, but cancelling
   * the returned future will have no effect on the supplied future.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,reload,"com.google.common.cache.CacheLoader:reload(java.lang.Object,java.lang.Object)",96,101,"/**
* Reloads the value associated with the given key.
* @param key unique key identifier
* @param oldValue previously loaded value (for comparison)
* @return ListenableFuture containing new value or null if not updated
*/","* Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This
   * method is called when an existing cache entry is refreshed by {@link
   * CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}.
   *
   * <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be
   * overridden with an asynchronous implementation when using {@link
   * CacheBuilder#refreshAfterWrite}.
   *
   * <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>.
   *
   * @param key the non-null key whose value should be loaded
   * @param oldValue the non-null old value corresponding to {@code key}
   * @return the future new value associated with {@code key}; <b>must not be null, must not return
   *     null</b>
   * @throws Exception if unable to reload the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,applyClosingFunction,"com.google.common.util.concurrent.ClosingFuture$CloseableList:applyClosingFunction(com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.lang.Object)",2182,2193,"/**
* Applies transformation function and returns result as a ListenableFuture.
* @param transformation ClosingFunction to apply
* @param input input data to transform
* @return U transformed value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,fullyFailedFuture,com.google.common.cache.LocalCache$LoadingValueReference:fullyFailedFuture(java.lang.Throwable),3529,3531,"/**
* Creates a failed future with an immediate exception.
* @param t the Throwable to be returned
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,wrapAndThrowExceptionOrError,"com.google.common.util.concurrent.FuturesGetChecked:wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class)",205,214,"/**
* Wraps a Throwable in the specified exception type or throws an ExecutionError if it's an Error.
* @param cause the underlying error or exception
* @param exceptionClass type of exception to throw
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,hasConstructorUsableByGetChecked,com.google.common.util.concurrent.FuturesGetChecked:hasConstructorUsableByGetChecked(java.lang.Class),221,229,"/**
* Checks if a constructor from the given exception class can be used with getChecked.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,enqueue,com.google.common.util.concurrent.ListenerCallQueue:enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event),89,91,"/**
* Adds an event to the queue, where L is the type of data associated with the event.
* @param event Event object to be queued
*/","* Enqueues an event to be run on currently known listeners.
   *
   * <p>The {@code toString} method of the Event itself will be used to describe the event in the
   * case of an error.
   *
   * @param event the callback to execute on {@link #dispatch}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,enqueue,"com.google.common.util.concurrent.ListenerCallQueue:enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.String)",99,101,"/**
 * Enqueues an event with the specified label.
 * @param event Event object to be enqueued
 * @param label Unique identifier or label for the event
 */","* Enqueues an event to be run on currently known listeners, with a label.
   *
   * @param event the callback to execute on {@link #dispatch}
   * @param label a description of the event to use in the case of an error",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,dispatchListenerEvents,com.google.common.util.concurrent.AbstractService:dispatchListenerEvents(),524,528,"/**
* Dispatches events to registered listeners if currently not occupied by this thread.
*/","* Attempts to execute all the listeners in {@link #listeners} while not holding the {@link
   * #monitor}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,dispatchListenerEvents,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:dispatchListenerEvents(),752,757,"/**
* Dispatches listener events while ensuring exclusive access is not held.
*/",Attempts to execute all the listeners in {@link #listeners}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,signalNextWaiter,com.google.common.util.concurrent.Monitor:signalNextWaiter(),1090,1098,"/**
* Signals the next waiting thread that its condition is satisfied.
* @param lock object that guards this method
*/","* Signals some other thread waiting on a satisfied guard, if one exists.
   *
   * <p>We manage calls to this method carefully, to signal only when necessary, but never losing a
   * signal, which is the classic problem of this kind of concurrency construct. We must signal if
   * the current thread is about to relinquish the lock and may have changed the state protected by
   * the monitor, thereby causing some guard to be satisfied.
   *
   * <p>In addition, any thread that has been signalled when its guard was satisfied acquires the
   * responsibility of signalling the next thread when it again relinquishes the lock. Unlike a
   * normal Condition, there is no guarantee that an interrupted thread has not been signalled,
   * since the concurrency control must manage multiple Conditions. So this method must generally be
   * called when waits are interrupted.
   *
   * <p>On the other hand, if a signalled thread wakes up to discover that its guard is still not
   * satisfied, it does *not* need to call this method before returning to wait. This can only
   * happen due to spurious wakeup (ignorable) or another thread acquiring the lock before the
   * current thread can and returning the guard to the unsatisfied state. In the latter case the
   * other thread (last thread modifying the state protected by the monitor) takes over the
   * responsibility of signalling the next waiter.
   *
   * <p>This method must not be called from within a beginWaitingFor/endWaitingFor block, or else
   * the current thread's guard might be mistakenly signalled, leading to a lost signal.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,toString,com.google.common.util.concurrent.RateLimiter:toString(),456,459,"/**
* Returns a string representation of this RateLimiter instance.
* The format is ""RateLimiter[stableRate=<rate>qps]"" where <rate> is the stable rate in queries per second.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,newProxy,"com.google.common.util.concurrent.SimpleTimeLimiter:newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit)",75,100,"/**
* Creates a proxied instance of the specified interface type with a configurable timeout.
* @param target underlying object to proxy
* @param interfaceType interface type to proxy
* @param timeoutDuration duration of the timeout in the specified unit
* @param timeoutUnit unit of time for the timeout
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,useDaemonThreadFactory,com.google.common.util.concurrent.MoreExecutors:useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor),291,299,"/**
* Configures the thread pool to use daemon threads.
* @param executor ThreadPoolExecutor instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeoutFuture.java,create,"com.google.common.util.concurrent.TimeoutFuture:create(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",43,53,"/**
* Creates a timed-out future by scheduling a Fire event on the provided executor.
* @param delegate original listenable future
* @param time timeout duration in specified time unit
* @param unit time unit for timeout
* @param scheduledExecutor executor to schedule fire event
* @return Timed-out listenable future, or null if cancelled",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,submitAsync,"com.google.common.util.concurrent.Futures:submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)",216,221,"/**
* Submits an asynchronous task to the specified executor.
* @param callable asynchronous operation to execute
* @param executor execution context for the task
* @return ListenableFuture representing the outcome of the task
*/","* Executes {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 23.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,scheduleAsync,"com.google.common.util.concurrent.Futures:scheduleAsync(com.google.common.util.concurrent.AsyncCallable,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",243,260,"/**
* Schedules an asynchronous operation with a specified delay and executor service.
* @param callable asynchronous operation to execute
* @param delay time to wait before execution, in specified time unit
* @param timeUnit time unit for delay (e.g. milliseconds)
* @return ListenableFuture representing the scheduled task
*/","* Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 23.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractListeningExecutorService.java,newTaskFor,com.google.common.util.concurrent.AbstractListeningExecutorService:newTaskFor(java.util.concurrent.Callable),56,60,"/**
* Creates a future task for the given callable, wrapping it in a trust-enabled future.
* @param callable user-provided computation to be executed
*/",* @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0),,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,submit,"com.google.common.util.concurrent.Futures:submit(java.util.concurrent.Callable,java.util.concurrent.Executor)",189,194,"/**
* Submits a blocking task for execution on the specified executor.
* @param callable the task to execute
* @param executor the executor to use
* @return ListenableFuture representing the result of the task, or null if cancelled.","* Executes {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractListeningExecutorService.java,newTaskFor,"com.google.common.util.concurrent.AbstractListeningExecutorService:newTaskFor(java.lang.Runnable,java.lang.Object)",46,51,"/**
* Creates a new task for the given Runnable and result.
* @param runnable the task to be executed
* @param value the result of the task
* @return RunnableFuture containing the task and result
*/",* @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0),,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,submit,"com.google.common.util.concurrent.Futures:submit(java.lang.Runnable,java.util.concurrent.Executor)",203,208,"/**
* Executes a Runnable asynchronously using the provided Executor.
* @param runnable task to be executed
* @param executor thread pool for execution
* @return ListenableFuture representing the asynchronous task
*/","* Executes {@code runnable} on the specified {@code executor}, returning a {@code Future} that
   * will complete after execution.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryAcquireUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,java.time.Duration)",425,429,"/**
* Tries to acquire the semaphore uninterruptibly within the specified time-out.
* @param semaphore the semaphore to acquire
* @param timeout duration to wait for acquisition
*/","* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1,
   * timeout, unit)} uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,getEnumIfPresent,"com.google.common.base.Platform:getEnumIfPresent(java.lang.Class,java.lang.String)",41,54,"/**
* Retrieves enum instance by value from the given enum class, returning an empty Optional if not found.
* @param enumClass enum type to search in
* @param value enum constant value to find
* @return Enum instance or empty Optional if not present
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,<init>,com.google.common.collect.FluentIterable:<init>(java.lang.Iterable),124,126,"/**
* Initializes FluentIterable with an existing Iterable.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,first,com.google.common.collect.FluentIterable:first(),512,516,"/**
* Returns the first element of this iterable, or an empty Optional if empty. 
* @return First element as Optional, or absent if not found
*/","* Returns an {@link Optional} containing the first element in this fluent iterable. If the
   * iterable is empty, {@code Optional.absent()} is returned.
   *
   * <p><b>{@code Stream} equivalent:</b> if the goal is to obtain any element, {@link
   * Stream#findAny}; if it must specifically be the <i>first</i> element, {@code Stream#findFirst}.
   *
   * @throws NullPointerException if the first element is null; if this is a possibility, use {@code
   *     iterator().next()} or {@link Iterables#getFirst} instead.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,last,com.google.common.collect.FluentIterable:last(),529,562,"/**
* Returns the last element in this collection, or an empty Optional if it's empty.
* @return The last element, or null if not found (wrapped in an Optional)","* Returns an {@link Optional} containing the last element in this fluent iterable. If the
   * iterable is empty, {@code Optional.absent()} is returned. If the underlying {@code iterable} is
   * a {@link List} with {@link java.util.RandomAccess} support, then this operation is guaranteed
   * to be {@code O(1)}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.reduce((a, b) -> b)}.
   *
   * @throws NullPointerException if the last element is null; if this is a possibility, use {@link
   *     Iterables#getLast} instead.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,tryFind,"com.google.common.collect.Iterators:tryFind(java.util.Iterator,com.google.common.base.Predicate)",775,785,"/**
* Finds the first element matching a predicate in an iterable.
* @param iterator non-null iterable to search
* @param predicate non-null predicate to apply to elements
* @return Optional containing matching element or empty if not found
*/","* Returns an {@link Optional} containing the first element in {@code iterator} that satisfies the
   * given predicate, if such an element exists. If no such element is found, an empty {@link
   * Optional} will be returned from this method and the iterator will be left exhausted: its {@code
   * hasNext()} method will return {@code false}.
   *
   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}
   * is matched in {@code iterator}, a NullPointerException will be thrown.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,expectedNodeCount,com.google.common.graph.GraphBuilder:expectedNodeCount(int),138,142,"/**
* Sets the expected node count for graph construction.
* @param expectedNodeCount non-negative integer value
* @return GraphBuilder instance for method chaining
*/","* Specifies the expected number of nodes in the graph.
   *
   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,expectedNodeCount,com.google.common.graph.NetworkBuilder:expectedNodeCount(int),154,158,"/**
* Sets the expected node count for the graph.
* @param expectedNodeCount non-negative number of nodes
*/","* Specifies the expected number of nodes in the network.
   *
   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,expectedEdgeCount,com.google.common.graph.NetworkBuilder:expectedEdgeCount(int),165,169,"/**
* Sets the expected edge count and returns this builder instance.
* @param expectedEdgeCount non-negative integer value
*/","* Specifies the expected number of edges in the network.
   *
   * @throws IllegalArgumentException if {@code expectedEdgeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,expectedNodeCount,com.google.common.graph.ValueGraphBuilder:expectedNodeCount(int),142,146,"/**
* Sets the expected number of nodes in the graph.
* @param expectedNodeCount non-negative integer node count
*/","* Specifies the expected number of nodes in the graph.
   *
   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource$ByteArrayByteSource:sizeIfKnown(),600,603,"/**
* Returns known capacity as an Optional Long value.
* @return Optional containing capacity if known, otherwise empty.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lengthIfKnown,com.google.common.io.CharSource$CharSequenceCharSource:lengthIfKnown(),565,568,"/**
* Returns the sequence length if known.
* @return Optional Long containing sequence length or empty if unknown
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,sizeIfKnown,com.google.common.io.Files$FileByteSource:sizeIfKnown(),134,141,"/**
* Returns file size in bytes if known, otherwise empty Optional.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,sizeIfKnown,com.google.common.io.MoreFiles$PathByteSource:sizeIfKnown(),126,143,"/**
* Returns file size in bytes, or null if unknown due to I/O error or directory/symbolic link. 
* @return Long value representing file size or null if unknown
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createConstantUtf8,"com.google.common.net.MediaType:createConstantUtf8(java.lang.String,java.lang.String)",115,119,"/**
* Creates a constant Media Type with UTF-8 encoding.
* @param type HTTP request method (e.g. GET, POST)
* @param subtype MIME sub-type (e.g. application/json)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,any,"com.google.common.collect.Iterables:any(java.lang.Iterable,com.google.common.base.Predicate)",627,630,"/**
* Checks if any element in the given iterable matches the provided predicate.
* @param iterable the input iterable to search
* @param predicate the condition to match elements against
* @return true if at least one element satisfies the predicate, false otherwise
*/","* Returns {@code true} if any element in {@code iterable} satisfies the predicate.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/SmallCharMatcher.java,from,"com.google.common.base.SmallCharMatcher:from(java.util.BitSet,java.lang.String)",86,109,"/**
* Creates a CharMatcher instance from a BitSet of valid characters and a description.
* @param chars BitSet containing the set of valid characters
* @param description human-readable description of this matcher
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,containsPattern,com.google.common.base.Predicates:containsPattern(java.lang.String),291,294,"/**
* Creates predicate to check if CharSequence matches a given pattern. 
* @param pattern the regular expression pattern as string
*/","* Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested
   * contains any match for the given regular expression pattern. The test used is equivalent to
   * {@code Pattern.compile(pattern).matcher(arg).find()}
   *
   * @throws IllegalArgumentException if the pattern is invalid
   * @since 3.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$Column$EntrySet:retainAll(java.util.Collection),557,560,"/**
* Removes elements from this collection that are not present in the specified collection.
* @param c collection of elements to retain
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$Column$KeySet:retainAll(java.util.Collection),631,634,"/**
* Removes all elements in the collection from the map if not present.
* @param c Collection of elements to remove
* @return true if any elements were removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$Column$Values:retainAll(java.util.Collection),658,661,"/**
* Removes all entries from this map that are not present in the specified collection.
* @param c collection of values to filter by
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfPossible,"com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable,java.lang.Class)",167,174,"/**
* Propagates a throwable if possible, using the specified type.
* @param throwable the throwable to propagate
* @param declaredType the type of exception to throw
*/","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
   * RuntimeException}, {@link Error}, or {@code declaredType}.
   *
   * <p><b>Discouraged</b> in favor of calling {@link #throwIfInstanceOf} and {@link
   * #throwIfUnchecked}.
   *
   * @param throwable the Throwable to possibly propagate
   * @param declaredType the single checked exception type declared by the calling method
   * @deprecated Use a combination of {@link #throwIfInstanceOf} and {@link #throwIfUnchecked},
   *     which togther provide the same behavior except that they reject {@code null}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,flattenHierarchy,com.google.common.eventbus.SubscriberRegistry:flattenHierarchy(java.lang.Class),240,243,"/**
* Retrieves cached hierarchical class set for given concrete class.
* @param concreteClass Class instance to fetch hierarchy for
*/","* Flattens a class's type hierarchy into a set of {@code Class} objects including all
   * superclasses (transitively) and all interfaces implemented by these superclasses.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,platformThreadFactory,com.google.common.util.concurrent.MoreExecutors:platformThreadFactory(),783,800,"/**
* Returns a thread factory for the current platform, falling back to default if not App Engine.
*/","* Returns a default thread factory used to create new threads.
   *
   * <p>When running on AppEngine with access to <a
   * href=""https://cloud.google.com/appengine/docs/standard/java/javadoc/"">AppEngine legacy
   * APIs</a>, this method returns {@code ThreadManager.currentRequestThreadFactory()}. Otherwise,
   * it returns {@link Executors#defaultThreadFactory()}.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,enqueueNotification,"com.google.common.cache.LocalCache$Segment:enqueueNotification(java.lang.Object,int,java.lang.Object,int,com.google.common.cache.RemovalCause)",2625,2636,"/**
* Records removal of an entry from the map and notifies listener if enabled.
* @param key unique key identifier
* @param hash key hash code
* @param value associated value (may be null)
* @param weight removed item weight
* @param cause reason for removal (eviction or explicit) 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,spliterator,com.google.common.collect.AbstractTable$Values:spliterator(),212,215,"/**
 * Returns a Spliterator for iterating over the collection's elements.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,spliterator,com.google.common.collect.ImmutableMapKeySet:spliterator(),53,56,"/**
* Returns a spliterator for the key set of this map.
* @return Spliterator for the keys in this map
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createValues,com.google.common.collect.Maps$AsMapView:createValues(),901,904,"/**
* Transforms set into Collection of V values using provided function.
* @return collection of transformed values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createValues,com.google.common.collect.Multimaps$TransformedEntriesMultimap:createValues(),1604,1609,"/**
* Transforms multimap entries into V2 objects using a transformer.
* @return collection of transformed V2 objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,createValues,com.google.common.collect.Tables$TransformedTable:createValues(),505,508,"/**
* Transforms table values into V2 collection using the provided function. 
* @return Collection of V2 objects or null if transformation fails",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:remove(java.lang.Object),1441,1450,"/**
* Removes a specified object from the collection if it exists.
* @param o object to be removed
* @return true if removal was successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,remove,com.google.common.collect.Collections2$FilteredCollection:remove(java.lang.Object),195,198,"/**
* Removes specified element from collection.
* @param element object to be removed (null if not found)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,contains,com.google.common.collect.FluentIterable:contains(java.lang.Object),356,358,"/**
* Checks if the collection contains the specified element.
* @param target element to search for
* @return true if found, false otherwise
*/","* Returns {@code true} if this fluent iterable contains any object for which {@code
   * equals(target)} is true.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.anyMatch(Predicate.isEqual(target))}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$AsMapView:get(java.lang.Object),916,919,"/**
* Retrieves value associated with given key.
* @param key unique identifier or null to indicate no value
* @return Value object of type V or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$NavigableAsMapView:get(java.lang.Object),1074,1077,"/**
* Retrieves value associated with the given key. If no value is found, returns null.
* @param key object to look up in the map (may be null)
* @return value for the key or null if not present
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterFiltered,"com.google.common.collect.Multimaps:filterFiltered(com.google.common.collect.FilteredSetMultimap,com.google.common.base.Predicate)",2235,2241,"/**
* Combines a filtered multimap with an additional filter.
* @param multimap original filtered multimap
* @param entryPredicate additional entries to filter by
* @return new filtered multimap with combined predicate
*/","* Support removal operations when filtering a filtered multimap. Since a filtered multimap has
   * iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would
   * lead to a multimap whose removal operations would fail. This method combines the predicates to
   * avoid that problem.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterKeys,"com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.ListMultimap,com.google.common.base.Predicate)",2067,2077,"/**
* Filters keys in a ListMultimap using the provided predicate.
* @param unfiltered input multimap
* @param keyPredicate condition to filter keys by
* @return filtered ListMultimap or new instance with updated filtering if necessary
*/","* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,filter,com.google.common.collect.FluentIterable:filter(java.lang.Class),431,434,"/**
* Filters elements based on the given class type.
* @param type class to match (e.g. Integer.class, String.class)
*/","* Returns the elements from this fluent iterable that are instances of class {@code type}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}.
   * This does perform a little more work than necessary, so another option is to insert an
   * unchecked cast at some later point:
   *
   * {@snippet :
   * @SuppressWarnings(""unchecked"") // safe because of ::isInstance check
   * ImmutableList<NewType> result =
   *     (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());
   * }",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,<init>,"com.google.common.collect.Iterators$MergingIterator:<init>(java.lang.Iterable,java.util.Comparator)",1323,1338,"/**
* Initializes a merging iterator from multiple sorted iterators.
* @param iterators collection of sorted iterators to merge
* @param itemComparator comparator for sorting merged items
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,entryIterator,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:entryIterator(),505,558,"/**
* Returns an iterator over entries of complement ranges and their corresponding
* positive ranges. The first entry is the complement range with lower bound greater than
* the window's lower bound, followed by pairs of negative and positive ranges.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,descendingEntryIterator,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:descendingEntryIterator(),560,620,"/**
* Returns an iterator over descending entries of complement ranges and positive ranges.
* @return Iterator over Entry objects containing a Cut and a Range. The Cut represents the upper
* bound of the complement range, and the Range represents the positive or negative range.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,descendingEntryIterator,com.google.common.collect.TreeRangeSet$RangesByUpperBound:descendingEntryIterator(),402,431,"/**
* Returns an iterator over entries of (Cut,Cut) and Range<C> in descending order.
* @return Iterator of entries or null if no more entries available
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedSet:removeAll(java.util.Collection),611,628,"/**
* Removes all elements from the set that are contained in the specified collection.
* @param c collection of elements to be removed
* @return true if any elements were removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,standardRemoveAll,com.google.common.collect.ForwardingSet:standardRemoveAll(java.util.Collection),76,79,"/**
* Removes all elements from this set and adds them to the given collection.
* @param collection collection to add elements to
* @return true if successful, false if not (e.g. null collection)
*/","* A sensible definition of {@link #removeAll} in terms of {@link #iterator} and {@link #remove}.
   * If you override {@code iterator} or {@code remove}, you may wish to override {@link #removeAll}
   * to forward to this implementation.
   *
   * @since 7.0 (this version overrides the {@code ForwardingCollection} version as of 12.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,removeAll,com.google.common.collect.Sets$ImprovedAbstractSet:removeAll(java.util.Collection),84,87,"/**
* Removes all elements from this collection.
* @param c the collection of elements to remove
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,clear,com.google.common.collect.Collections2$FilteredCollection:clear(),149,152,"/**
* Removes all elements from the unfiltered collection matching the predicate.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,removeAll,com.google.common.collect.FilteredMultimapValues:removeAll(java.util.Collection),76,81,"/**
* Removes all entries from the multimap that match the given collection.
* @param c Collection of values to remove
* @return true if any entries were removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,retainAll,com.google.common.collect.FilteredMultimapValues:retainAll(java.util.Collection),83,88,"/**
* Removes entries from the multimap that are not present in the given collection.
* @param c Collection of keys to retain
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,replaceValues,"com.google.common.collect.AbstractMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",103,110,"/**
* Replaces existing values with new ones for a given key.
* @param key unique identifier
* @return collection of replaced values or empty collection if none exist
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,"com.google.common.collect.LinkedListMultimap:putAll(java.lang.Object,java.lang.Iterable)",78,91,"/**
* Adds all elements from the given iterable to the existing collection at the specified key.
* @param key unique key identifier
* @param values iterable of values to add
* @return true if successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,create,com.google.common.collect.EnumMultiset:create(java.lang.Iterable),66,72,"/**
* Creates an EnumMultiset from the provided iterable of enum elements.
* @param elements iterable of enum values
*/","* Creates a new {@code EnumMultiset} containing the specified elements.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain
   * @throws IllegalArgumentException if {@code elements} is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,addAll,com.google.common.collect.EvictingQueue:addAll(java.util.Collection),117,126,"/**
* Adds all elements from the specified collection to this set.
* @param collection Collection of elements to add
* @return True if new elements were added; false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newLinkedList,com.google.common.collect.Lists:newLinkedList(java.lang.Iterable),250,256,"/**
* Creates a new linked list from the given iterable elements.
* @param elements iterable collection of elements to add
* @return newly created LinkedList instance
*/","* Creates a <i>mutable</i> {@code LinkedList} instance containing the given elements; a very thin
   * shortcut for creating an empty list then calling {@link Iterables#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link
   * FluentIterable} and call {@code elements.toList()}.)
   *
   * <p><b>Performance note:</b> {@link ArrayList} and {@link java.util.ArrayDeque} consistently
   * outperform {@code LinkedList} except in certain rare and specific situations. Unless you have
   * spent a lot of time benchmarking your specific needs, use one of those instead.
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use
   * the {@code LinkedList} {@linkplain LinkedList#LinkedList(Collection) constructor} directly,
   * taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newArrayDeque,com.google.common.collect.Queues:newArrayDeque(java.lang.Iterable),80,87,"/**
* Creates a new ArrayDeque instance from an iterable of elements.
* @param elements Iterable containing elements to initialize the deque
* @return ArrayDeque populated with elements or empty if none provided
*/","* Creates an {@code ArrayDeque} containing the elements of the specified iterable, in the order
   * they are returned by the iterable's iterator.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newConcurrentLinkedQueue,com.google.common.collect.Queues:newConcurrentLinkedQueue(java.lang.Iterable),102,112,"/**
* Creates a concurrent linked queue from an iterable collection.
* @param elements input iterable to initialize the queue
*/","* Creates a {@code ConcurrentLinkedQueue} containing the elements of the specified iterable, in
   * the order they are returned by the iterable's iterator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newLinkedBlockingDeque,com.google.common.collect.Queues:newLinkedBlockingDeque(java.lang.Iterable),146,155,"/**
* Creates a LinkedBlockingDeque from an iterable collection.
* @param elements input iterable (e.g. Collection or array)
* @return a populated LinkedBlockingDeque
*/","* Creates a {@code LinkedBlockingDeque} with a capacity of {@link Integer#MAX_VALUE}, containing
   * the elements of the specified iterable, in the order they are returned by the iterable's
   * iterator.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newLinkedBlockingQueue,com.google.common.collect.Queues:newLinkedBlockingQueue(java.lang.Iterable),185,194,"/**
* Creates a LinkedBlockingQueue from an iterable of elements.
* @param elements input iterable (e.g. Collection or array)
* @return populated LinkedBlockingQueue or empty if null input
*/","* Creates a {@code LinkedBlockingQueue} with a capacity of {@link Integer#MAX_VALUE}, containing
   * the elements of the specified iterable, in the order they are returned by the iterable's
   * iterator.
   *
   * @param elements the elements that the queue should contain, in order
   * @return a new {@code LinkedBlockingQueue} containing those elements",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newPriorityBlockingQueue,com.google.common.collect.Queues:newPriorityBlockingQueue(java.lang.Iterable),223,234,"/**
* Creates a priority blocking queue from an iterable of comparable elements.
* @param elements iterable containing elements to add to the queue
*/","* Creates a {@code PriorityBlockingQueue} containing the given elements.
   *
   * <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue},
   * this priority queue will be ordered according to the same ordering.
   *
   * @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable}
   *     in 15.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newPriorityQueue,com.google.common.collect.Queues:newPriorityQueue(java.lang.Iterable),259,268,"/**
* Creates a priority queue from the given iterable of comparable elements.
* @param elements iterable containing elements to be added to the queue
*/","* Creates a {@code PriorityQueue} containing the given elements.
   *
   * <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue},
   * this priority queue will be ordered according to the same ordering.
   *
   * @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable}
   *     in 15.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newEnumSet,"com.google.common.collect.Sets:newEnumSet(java.lang.Iterable,java.lang.Class)",159,164,"/**
* Creates an EnumSet from the given iterable of enum elements.
* @param iterable collection of enum values
* @param elementType type of enum being populated
* @return EnumSet containing all enum values in the iterable
*/","* Returns a new, <i>mutable</i> {@code EnumSet} instance containing the given elements in their
   * natural order. This method behaves identically to {@link EnumSet#copyOf(Collection)}, but also
   * accepts non-{@code Collection} iterables and empty iterables.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newConcurrentHashSet,com.google.common.collect.Sets:newConcurrentHashSet(java.lang.Iterable),296,300,"/**
* Creates a concurrent hash set from an iterable collection.
* @param elements the input iterable
* @return a concurrent hash set containing all elements
*/","* Creates a thread-safe set backed by a hash map and containing the given elements. The set is
   * backed by a {@link ConcurrentHashMap} instance, and thus carries the same concurrency
   * guarantees.
   *
   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The
   * set is serializable.
   *
   * @param elements the elements that the set should contain
   * @return a new thread-safe set containing those elements (minus duplicates)
   * @throws NullPointerException if {@code elements} or any of its contents is null
   * @since 15.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newLinkedHashSet,com.google.common.collect.Sets:newLinkedHashSet(java.lang.Iterable),337,346,"/**
* Creates a linked hash set from an iterable collection.
* @param elements input iterable containing unique elements
*/","* Creates a <i>mutable</i> {@code LinkedHashSet} instance containing the given elements in order.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableSet#copyOf(Iterable)} instead.
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method.
   * Instead, use the {@code LinkedHashSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.
   *
   * <p>Overall, this method is not very useful and will likely be deprecated in the future.
   *
   * @param elements the elements that the set should contain, in order
   * @return a new {@code LinkedHashSet} containing those elements (minus duplicates)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newTreeSet,com.google.common.collect.Sets:newTreeSet(java.lang.Iterable),411,419,"/**
* Creates a sorted TreeSet from an iterable of comparable elements.
* @param elements input iterable
* @return TreeSet object containing the input elements
*/","* Creates a <i>mutable</i> {@code TreeSet} instance containing the given elements sorted by their
   * natural ordering.
   *
   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableSortedSet#copyOf(Iterable)}
   * instead.
   *
   * <p><b>Note:</b> If {@code elements} is a {@code SortedSet} with an explicit comparator, this
   * method has different behavior than {@link TreeSet#TreeSet(SortedSet)}, which returns a {@code
   * TreeSet} with that comparator.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,
   * use the {@code TreeSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.
   *
   * <p>This method is just a small convenience for creating an empty set and then calling {@link
   * Iterables#addAll}. This method is not very useful and will likely be deprecated in the future.
   *
   * @param elements the elements that the set should contain
   * @return a new {@code TreeSet} containing those elements (minus duplicates)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,next,com.google.common.collect.TreeTraverser$BreadthFirstIterator:next(),288,293,"/**
* Retrieves and dequeues an object from the queue, replenishing it with child objects.
* @return The retrieved object of type T.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,castOrCopyToCollection,com.google.common.collect.Iterables:castOrCopyToCollection(java.lang.Iterable),313,318,"/**
* Converts an iterable to a collection, preserving type E if possible.
* @param iterable input iterable to be converted
* @return Collection of type E or null if not found
*/","* Converts an iterable into a collection. If the iterable is already a collection, it is
   * returned. Otherwise, an {@link java.util.ArrayList} is created with the contents of the
   * iterable in the same iteration order.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,getCopy,com.google.common.collect.LinkedListMultimap:getCopy(java.lang.Object),648,650,"/**
* Returns an unmodifiable list copy of values associated with the given key.
* @param key unique identifier for which to fetch associated values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayList,com.google.common.collect.Lists:newArrayList(java.lang.Iterable),130,138,"/**
* Creates a new ArrayList instance from an iterable collection.
* @param elements input iterable of objects to populate the list
*/","* Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin
   * shortcut for creating an empty list then calling {@link Iterables#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link
   * FluentIterable} and call {@code elements.toList()}.)
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use
   * the {@code ArrayList} {@linkplain ArrayList#ArrayList(Collection) constructor} directly, taking
   * advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredEntryMap$KeySet:toArray(),3108,3112,"/**
* Converts to array by iterating over elements and collecting in an ArrayList.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredEntryMap$KeySet:toArray(java.lang.Object[]),3114,3118,"/**
* Converts Iterable to a specified type array.
* @param array target array type and size
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredMapValues:toArray(),2958,2962,"/**
* Returns array representation of collection.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredMapValues:toArray(java.lang.Object[]),2964,2968,"/**
* Converts this iterator to an array of type T.
* @param array the backing array (may be null or have different length)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:retainAll(java.util.Collection),967,978,"/**
* Removes columns from the table that are not present in the provided collection.
* @param c Collection of column keys to retain
* @return True if any columns were removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:removeAll(java.util.Collection),998,1009,"/**
* Removes all columns present in the specified collection.
* @param c Collection of column keys to remove
* @return True if any columns were removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:retainAll(java.util.Collection),1011,1022,"/**
* Removes columns from this table that are not present in the given collection.
* @param c collection of column keys to retain
* @return true if any columns were removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newHashSet,com.google.common.collect.Sets:newHashSet(java.lang.Iterable),225,230,"/**
* Creates a new HashSet from an iterable collection.
* @param elements input iterable containing elements to be added
* @return HashSet instance or null if iterable is empty
*/","* Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin
   * convenience for creating an empty set then calling {@link Collection#addAll} or {@link
   * Iterables#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableSet#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link
   * FluentIterable} and call {@code elements.toSet()}.)
   *
   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, use {@link #newEnumSet(Iterable, Class)}
   * instead.
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method.
   * Instead, use the {@code HashSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.
   *
   * <p>Overall, this method is not very useful and will likely be deprecated in the future.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,toArray,com.google.common.collect.Collections2$FilteredCollection:toArray(),227,231,"/**
* Converts this iterator to an array.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,toArray,com.google.common.collect.Collections2$FilteredCollection:toArray(java.lang.Object[]),233,237,"/**
* Converts iterator to specified array type.
* @param array target array with correct component type
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,allMatch,com.google.common.collect.FluentIterable:allMatch(com.google.common.base.Predicate),451,453,"/**
* Checks if all elements match the given predicate.
* @param predicate functional interface to apply to each element
*/","* Returns {@code true} if every element in this fluent iterable satisfies the predicate. If this
   * fluent iterable is empty, {@code true} is returned.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch} (same).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,ceiling,com.google.common.collect.Sets$FilteredNavigableSet:ceiling(java.lang.Object),1366,1369,"/**
* Finds the smallest element in the collection that is greater than or equal to the given value.
* @param e value to find a matching element for
* @return first matching E object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,higher,com.google.common.collect.Sets$FilteredNavigableSet:higher(java.lang.Object),1371,1374,"/**
* Finds the next element in the collection that satisfies the predicate.
* @param e starting element to search from
* @return next matching element or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardListIterator,com.google.common.collect.ForwardingList:standardListIterator(int),204,206,"/**
* Creates a list iterator starting at the specified index.
* @param start the index to begin iterating from
*/","* A sensible default implementation of {@link #listIterator(int)}, in terms of {@link #size},
   * {@link #get(int)}, {@link #set(int, Object)}, {@link #add(int, Object)}, and {@link
   * #remove(int)}. If you override any of these methods, you may wish to override {@link
   * #listIterator(int)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transform,"com.google.common.collect.Multimaps$TransformedEntriesListMultimap:transform(java.lang.Object,java.util.Collection)",1621,1624,"/**
* Transforms a collection of V1 objects into a list of V2 using the provided transformer.
* @param key unique identifier for transformation
* @param values Collection of V1 objects to transform
* @return List of transformed V2 objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transform,"com.google.common.collect.Multimaps$TransformedEntriesMultimap:transform(java.lang.Object,java.util.Collection)",1512,1519,"/**
* Transforms a collection of V1 objects to a collection of V2 using the provided transformer.
* @param key key used for transformation
* @param values input collection of V1 objects
* @return transformed collection of V2 objects or null if input is null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asMap,"com.google.common.collect.Maps:asMap(java.util.SortedSet,com.google.common.base.Function)",847,850,"/**
* Converts a sorted set to a map with values computed by the given function.
* @param set input sorted set
* @param function function to compute map values from keys
*/","* Returns a view of the sorted set as a map, mapping keys from the set according to the specified
   * function.
   *
   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping
   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code
   * entrySet} views of the returned map iterate in the same order as the backing set.
   *
   * <p>Modifications to the backing set are read through to the returned map. The returned map
   * supports removal operations if the backing set does. Removal operations write through to the
   * backing set. The returned map does not support put operations.
   *
   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the
   * set does not contain {@code null}, because the view cannot stop {@code null} from being added
   * to the set.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},
   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for
   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when
   * calling methods on the resulting map view.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeIncidentNodesMap,com.google.common.graph.AbstractNetwork:edgeIncidentNodesMap(com.google.common.graph.Network),323,325,"/**
* Creates a map of edges to their incident nodes.
* @param network the graph network
* @return a map where each key is an edge and its corresponding value is a pair of incident nodes
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,edgeValueMap,com.google.common.graph.AbstractValueGraph:edgeValueMap(com.google.common.graph.ValueGraph),154,160,"/**
* Converts ValueGraph edges to a map of EndpointPair to values, using graph's default value if not set.
*@param graph ValueGraph instance
*@return Map of EndpointPair to values or null if edge has no value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$NavigableKeySet:<init>(java.util.NavigableMap),4023,4025,"/**
* Creates a navigable key set view of the given map.
* @param map underlying navigable map
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$SortedKeySet:subSet(java.lang.Object,java.lang.Object)",3992,3995,"/**
* Retrieves a subset of keys within the specified range.
* @param fromElement inclusive start key
* @param toElement exclusive end key
* @return SortedSet of keys or empty set if no keys found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,com.google.common.collect.Maps$SortedKeySet:headSet(java.lang.Object),3997,4000,"/**
* Returns a sorted set of keys less than the specified element.
* @param toElement key value boundary (exclusive)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,com.google.common.collect.Maps$SortedKeySet:tailSet(java.lang.Object),4002,4005,"/**
* Returns a sorted set of keys greater than or equal to the specified element.
* @param fromElement lower bound for key inclusion
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,createKeySet,com.google.common.collect.StandardRowSortedTable$RowSortedMap:createKeySet(),102,105,"/**
* Creates a sorted set of keys.
* @return Set of keys or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,keySet,com.google.common.collect.TreeBasedTable$TreeRow:keySet(),202,205,"/**
* Returns a sorted set of keys (C objects) in this map.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$ViewCachingAbstractMap:keySet(),3722,3726,"/**
* Returns a set view of keys contained in this map.
* If the underlying key set is not initialized, creates it and stores for future use.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$NavigableAsMapView:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",1050,1057,"/**
* Returns a subset of the map, bounded by specified keys.
* @param fromKey starting key (inclusive or exclusive)
* @param fromInclusive whether start is inclusive
* @param toKey ending key (inclusive or exclusive)
* @param toInclusive whether end is inclusive
* @return NavigableMap object or null if invalid bounds",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$NavigableAsMapView:headMap(java.lang.Object,boolean)",1059,1062,"/**
* Returns a subset of key-value pairs in the map with keys less than or equal to 'toKey', optionally including 'toKey'. 
* @param toKey key up to which entries are included
* @param inclusive whether to include 'toKey' itself
* @return NavigableMap containing filtered key-value pairs or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$NavigableAsMapView:tailMap(java.lang.Object,boolean)",1064,1067,"/**
* Returns a map containing all entries with keys greater than or equal to the specified key.
* @param fromKey key to start mapping from
* @param inclusive whether to include the specified key in the result
* @return NavigableMap object containing tail-mapped entries
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$NavigableAsMapView:descendingMap(),1125,1128,"/**
* Returns a new navigable map with entries from this map in reverse order.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:<init>(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)",2270,2273,"/**
 * Creates a new navigable map by transforming the entries of the given map.
 * @param fromMap original map to transform
 * @param transformer entry transformation function
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntries,"com.google.common.collect.Maps:transformEntries(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)",2013,2018,"/**
* Transforms entries in a sorted map using the provided entry transformer.
*@param fromMap original sorted map
*@param transformer entry transformation function
*@return transformed sorted map with new values
*/","* Returns a view of a sorted map whose values are derived from the original sorted map's entries.
   * In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on
   * the key as well as the value.
   *
   * <p>All other properties of the transformed map, such as iteration order, are left intact. For
   * example, the code:
   *
   * {@snippet :
   * Map<String, Boolean> options =
   *     ImmutableSortedMap.of(""verbose"", true, ""sort"", false);
   * EntryTransformer<String, Boolean, String> flagPrefixer =
   *     new EntryTransformer<String, Boolean, String>() {
   *       public String transformEntry(String key, Boolean value) {
   *         return value ? key : ""yes"" + key;
   *       }
   *     };
   * SortedMap<String, String> transformed =
   *     Maps.transformEntries(options, flagPrefixer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {sort=yessort, verbose=verbose}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys and null values provided that
   * the transformer is capable of accepting null inputs. The transformed map might contain null
   * values if the transformer sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * map to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map
   * doesn't need to be a view, copy the returned map into a new map of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed map.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformValues,"com.google.common.collect.Maps:transformValues(java.util.Map,com.google.common.base.Function)",1824,1829,"/**
* Transforms map values using a given function.
* @param fromMap input map to transform
* @param function mapping function for each value
* @return new map with transformed values
*/","* Returns a view of a map where each value is transformed by a function. All other properties of
   * the map, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * Map<String, Integer> map = ImmutableMap.of(""a"", 4, ""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * Map<String, Double> transformed = Maps.transformValues(map, sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=2.0, b=3.0}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed map might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
   * view, copy the returned map into a new map of your choosing.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createAsMap,com.google.common.collect.Multimaps$TransformedEntriesMultimap:createAsMap(),1521,1524,"/**
* Converts multimap to map with transformed values.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createValues,com.google.common.collect.Maps$AbstractFilteredMap:createValues(),2898,2901,"/**
* Creates a collection of filtered values based on the provided predicate.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$FilteredEntryNavigableMap:values(),3265,3268,"/**
* Returns an iterable collection of values from this map.
* @return filtered collection of values or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$ViewCachingAbstractMap:values(),3734,3738,"/**
* Returns a collection of values, lazily creating it if not already initialized.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,contains,com.google.common.collect.AbstractBiMap$EntrySet:contains(java.lang.Object),437,440,"/**
* Checks if a given key (or value) exists in this map.
* @param o the key or value to search for
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,contains,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:contains(java.lang.Object),1008,1013,"/**
* Checks if an object is present in the map.
* @param o object to search for
* @return true if found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:remove(java.lang.Object),1032,1037,"/**
* Removes an object from this map.
* @param o object to be removed
* @return true if the object was present and removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,ceilingEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:ceilingEntry(java.lang.Object),2275,2278,"/**
* Finds and returns the entry with the smallest value greater than or equal to the given key.
* @param key the key for which to find the corresponding entry
* @return Entry object if found, null otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:firstEntry(),2295,2298,"/**
* Retrieves and transforms the first entry from the underlying map.
* @return The transformed entry or null if the map is empty.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,floorEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:floorEntry(java.lang.Object),2300,2303,"/**
* Retrieves the entry with the lowest value that is less than or equal to the given key.
* @param key unique identifier of the entry to find
* @return Entry object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,higherEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:higherEntry(java.lang.Object),2320,2323,"/**
* Retrieves and transforms the entry with the highest value greater than the given key.
* @param key unique key value
* @return Entry object or null if no such entry exists
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:lastEntry(),2330,2333,"/**
* Retrieves the last entry from the map.
* @return last Entry object or null if empty.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lowerEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:lowerEntry(java.lang.Object),2335,2338,"/**
* Finds and returns the lowest entry in the map with a matching key.
* @param key unique key to search for
* @return Entry object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollFirstEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:pollFirstEntry(),2350,2353,"/**
* Retrieves and transforms the first entry from the map.
* @return Entry object or null if map is empty.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollLastEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:pollLastEntry(),2355,2358,"/**
* Retrieves and transforms the last entry from the underlying map.
* @return the transformed entry or null if empty.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,add,"com.google.common.collect.AbstractMapBasedMultiset:add(java.lang.Object,int)",264,284,"/**
* Adds specified element occurrences and returns its previous count.
* @param element element to add
* @param occurrences number of times to add the element
* @return previous count of the element or 0 if not present
*/","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if the call would result in more than {@link
   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,"com.google.common.collect.AbstractMapBasedMultiset:remove(java.lang.Object,int)",286,311,"/**
* Removes specified element occurrences from the collection.
* @param element object to remove (null if not found)
* @param occurrences number of elements to remove
* @return old count of removed elements or 0 if none were removed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,count,com.google.common.collect.HashMultiset:count(java.lang.Object),250,254,"/**
* Returns the occurrence count of an object in the backing map.
* @param element the object to search for
* @return occurrence count or 0 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,count,com.google.common.collect.LinkedHashMultiset:count(java.lang.Object),250,254,"/**
* Returns the frequency of the given object in the backing map.
* @param element object to count occurrences of
* @return frequency as an integer or 0 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,get,"com.google.common.collect.ImmutableTable:get(java.lang.Object,java.lang.Object)",79,83,"/**
* Retrieves a value from the map by its row and column keys.
* @param rowKey key of the row to search in
* @param columnKey key of the column to retrieve
* @return value associated with the given row and column or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,"com.google.common.collect.StandardTable:get(java.lang.Object,java.lang.Object)",114,117,"/**
* Returns a value from the map if both keys are provided; otherwise returns null.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,add,"com.google.common.collect.ConcurrentHashMultiset:add(java.lang.Object,int)",205,252,"/**
* Atomically adds occurrences of an element to the map and returns the old count or 0 if removed. 
* @param element unique identifier
* @param occurrences number of times to add
*/","* Adds a number of occurrences of the specified element to this multiset.
   *
   * @param element the element to add
   * @param occurrences the number of occurrences to add
   * @return the previous count of the element before the operation; possibly zero
   * @throws IllegalArgumentException if {@code occurrences} is negative, or if the resulting amount
   *     would exceed {@link Integer#MAX_VALUE}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,remove,"com.google.common.collect.ConcurrentHashMultiset:remove(java.lang.Object,int)",272,300,"/**
* Removes specified occurrences of an element from the collection.
* @param element object to remove
* @param occurrences number of removals (must be positive)
* @return old count or 0 if not found or removed entirely
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$EntrySet:remove(java.lang.Object),4227,4238,"/**
* Removes the specified object from the collection, if it is an Entry instance.
* @param o Object to remove
* @return true if removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,"com.google.common.collect.Multimaps$Keys:remove(java.lang.Object,int)",1798,1822,"/**
* Removes specified occurrences of a given element from the multimap.
* @param element object to remove
* @param occurrences number of occurrences to remove
* @return original count of the removed element or 0 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,"com.google.common.collect.HashBasedTable:remove(java.lang.Object,java.lang.Object)",158,173,"/**
* Removes a value from the map by its column key.
* @param rowKey unique row identifier
* @param columnKey column key of the value to remove
* @return removed value or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Column$KeySet:remove(java.lang.Object),626,629,"/**
* Removes an object from the table if found.
* @param obj object to be removed
* @return true if removal was successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Column:remove(java.lang.Object),481,484,"/**
* Removes an entry from the table based on the provided key.
* @param key unique identifier or null to clear all entries
* @return value associated with removed key or null if cleared
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsRow,com.google.common.collect.ImmutableTable:containsRow(java.lang.Object),43,46,"/**
* Checks if a row exists in the map with the given key.
* @param rowKey unique identifier of the row to check for existence
* @return true if the row exists, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsColumn,com.google.common.collect.ImmutableTable:containsColumn(java.lang.Object),48,51,"/**
* Checks if the map contains a given column key.
* @param columnKey unique identifier of the column to check for presence
* @return true if the column is present, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,"com.google.common.collect.StandardTable:contains(java.lang.Object,java.lang.Object)",86,89,"/**
* Checks if table contains specified row and column keys.
* @param rowKey unique row identifier or null for any
* @param columnKey unique column identifier or null for any
* @return true if both keys match a cell in the table
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsColumn,com.google.common.collect.HashBasedTable:containsColumn(java.lang.Object),91,102,"/**
* Checks if a specified column key exists in the data structure.
* @param columnKey unique identifier for the column to search
* @return true if found, false otherwise",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,isEmpty,com.google.common.collect.StandardTable$Column$EntrySet:isEmpty(),529,532,"/**
* Checks if table has any data.
* @return true if empty, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$ColumnKeySet:contains(java.lang.Object),753,756,"/**
* Checks if this collection contains an object.
* @param obj the object to search for (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$ColumnMap:get(java.lang.Object),885,890,"/**
* Retrieves a value from the map by key, or null if key not found.
* @param key object to search for in the map
* @return Map entry containing the associated value, or null",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$ColumnMap:containsKey(java.lang.Object),892,895,"/**
* Checks if a given key exists in the data structure.
* @param key the key to search for (may be null)
* @return true if the key is present, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$ColumnMap:remove(java.lang.Object),897,900,"/**
* Removes a column by its unique identifier.
* @param key unique identifier of the column to be removed
* @return Map containing remaining data or null if removal failed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsRow,com.google.common.collect.HashBasedTable:containsRow(java.lang.Object),104,107,"/**
* Checks if a specific row exists in the backing map.
* @param rowKey unique identifier for the row to search (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$RowMap:containsKey(java.lang.Object),814,817,"/**
* Checks if a map contains a given key.
* @param key object to search for
* @return true if key exists, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$RowMap:get(java.lang.Object),820,825,"/**
* Retrieves a map value by its associated key object.
* @param key the key to look up (may be null)
* @return Map containing the value, or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformEntries,"com.google.common.collect.Multimaps:transformEntries(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer)",1493,1498,"/**
* Transforms entries in a multimap using the provided transformer.
* @param fromMap original multimap
* @param transformer entry transformation function
* @return transformed ListMultimap with new key-value pairs
*/","* Returns a view of a {@code ListMultimap} whose values are derived from the original multimap's
   * entries. In contrast to {@link #transformValues(ListMultimap, Function)}, this method's
   * entry-transformation logic may depend on the key as well as the value.
   *
   * <p>All other properties of the transformed multimap, such as iteration order, are left intact.
   * For example, the code:
   *
   * {@snippet :
   * Multimap<String, Integer> multimap =
   *     ImmutableMultimap.of(""a"", 1, ""a"", 4, ""b"", 6);
   * EntryTransformer<String, Integer, String> transformer =
   *     new EntryTransformer<String, Integer, String>() {
   *       public String transformEntry(String key, Integer value) {
   *         return key + value;
   *       }
   *     };
   * Multimap<String, String> transformed =
   *     Multimaps.transformEntries(multimap, transformer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {""a""=[""a1"", ""a4""], ""b""=[""b6""]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys and null values provided
   * that the transformer is capable of accepting null inputs. The transformed multimap might
   * contain null values if the transformer sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap
   * doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed multimap.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformValues,"com.google.common.collect.Multimaps:transformValues(com.google.common.collect.Multimap,com.google.common.base.Function)",1334,1341,"/**
* Transforms values in a multimap using the provided function.
* @param fromMultimap source multimap
* @param function transformation function
* @return new multimap with transformed values
*/","* Returns a view of a multimap where each value is transformed by a function. All other
   * properties of the multimap, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * Multimap<String, Integer> multimap =
   *     ImmutableSetMultimap.of(""a"", 2, ""b"", -3, ""b"", -3, ""a"", 4, ""c"", 6);
   * Function<Integer, String> square = new Function<Integer, String>() {
   *     public String apply(Integer in) {
   *       return Integer.toString(in * in);
   *     }
   * };
   * Multimap<String, String> transformed =
   *     Multimaps.transformValues(multimap, square);
   *   System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=[4, 16], b=[9, 9], c=[36]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys, and even null values
   * provided that the function is capable of accepting null input. The transformed multimap might
   * contain null values, if the function sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless,
   * since there is not a definition of {@code equals} or {@code hashCode} for general collections,
   * and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a
   * {@code Set}.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the function will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to
   * perform well, {@code function} should be fast. To avoid lazy evaluation when the returned
   * multimap doesn't need to be a view, copy the returned multimap into a new multimap of your
   * choosing.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,addAll,com.google.common.collect.ImmutableSortedMultiset$Builder:addAll(java.lang.Iterable),535,540,"/**
* Adds all elements from the given iterable to the builder.
* @param elements collection of elements to add
* @return this builder instance for method chaining
*/","* Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}.
     *
     * @param elements the {@code Iterable} to add to the {@code ImmutableSortedMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,addAllImpl,"com.google.common.collect.Multisets:addAllImpl(com.google.common.collect.Multiset,java.util.Collection)",897,908,"/**
* Adds all elements from the provided collection to this multiset.
* @param self the multiset to modify
* @param elements elements to add
* @return true if any elements were added
*/",An implementation of {@link Multiset#addAll}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,apply,com.google.common.collect.Range:apply(java.lang.Object),417,422,"/**
* Alias for checking if this collection contains a given element.
* @param input the element to search for
* @return true if contained, false otherwise
*/","* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains}
   *     instead.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,indexOf,com.google.common.collect.RegularContiguousSet:indexOf(java.lang.Object),77,88,"/**
* Calculates index of given object in collection, or -1 if not found.
* @param target object to search for
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,nullableSynchronizedEntry,"com.google.common.collect.Synchronized:nullableSynchronizedEntry(java.util.Map$Entry,java.lang.Object)",1779,1787,"/**
* Creates a synchronized map entry from the given nullable entry and mutex.
* @param entry nullable map entry
* @param mutex synchronization object
* @return synchronized map entry or null if input is null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedAsMap:<init>(java.util.Map,java.lang.Object)",1398,1400,"/**
* Wraps a map of collections in a synchronized accessor.
* @param delegate map of collections to synchronize
* @param mutex synchronization object (null for default) 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedBiMap:<init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap)",1352,1356,"/**
* Constructs a synchronized bi-map wrapper from an existing bi-map.
* @param delegate the underlying bi-map
* @param mutex synchronization object or null for no locking
* @param inverse optional inverse bi-map or null if not needed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSortedMap:<init>(java.util.SortedMap,java.lang.Object)",1285,1287,"/**
 * Constructs a synchronized map backed by the specified sorted map,
 * with the specified mutex object used for synchronization.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,map,"com.google.common.collect.Synchronized:map(java.util.Map,java.lang.Object)",1056,1060,"/**
* Creates a synchronized map from the given input map and mutex object.
* @param map input map to synchronize
* @param mutex synchronization mutex object or null for no synchronization
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedListMultimap:<init>(com.google.common.collect.ListMultimap,java.lang.Object)",793,795,"/**
* Creates a synchronized list multimap view from a given delegate.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSetMultimap:<init>(com.google.common.collect.SetMultimap,java.lang.Object)",838,840,"/**
* Creates synchronized multimap wrapper.
* @param delegate underlying multimap instance
* @param mutex synchronization object (null for no sync)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,multimap,"com.google.common.collect.Synchronized:multimap(com.google.common.collect.Multimap,java.lang.Object)",586,592,"/**
* Wraps a Multimap with synchronization for thread-safe access.
* @param multimap input Multimap instance
* @param mutex optional lock object for synchronization
* @return synchronized Multimap instance or original if already synchronized
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,table,"com.google.common.collect.Synchronized:table(com.google.common.collect.Table,java.lang.Object)",2033,2036,"/**
* Wraps a table in a synchronized object for thread-safe access.
* @param table the underlying table to synchronize
* @param mutex synchronization lock (may be null if not needed)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,toTable,"com.google.common.collect.Tables:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",71,84,"/**
* Converts stream elements to a Table using provided functions.
* @param rowFunction maps element to row key
* @param columnFunction maps element to column key
* @param valueFunction maps element to table value
* @param tableSupplier returns the initial Table instance
*/","* Returns a {@link Collector} that accumulates elements into a {@code Table} created using the
   * specified supplier, whose cells are generated by applying the provided mapping functions to the
   * input elements. Cells are inserted into the generated {@code Table} in encounter order.
   *
   * <p>If multiple input elements map to the same row and column, an {@code IllegalStateException}
   * is thrown when the collection operation is performed.
   *
   * <p>To collect to an {@link ImmutableTable}, use {@link ImmutableTable#toImmutableTable}.
   *
   * @since 21.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,putAll,com.google.common.collect.Tables$TransposeTable:putAll(com.google.common.collect.Table),282,285,"/**
* Adds all entries from the given table to this map.
* @param table Table instance with entries to add
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,computeNext,com.google.common.collect.TreeTraverser$PostOrderIterator:computeNext(),228,241,"/**
* Computes the next value in a post-order traversal.
* @return Next element or null if at end of data
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,escapeSlow,"com.google.common.escape.UnicodeEscaper:escapeSlow(java.lang.String,int)",157,212,"/**
* Escapes special characters in a string starting from a given index.
* @param s input string
* @param index starting index for escaping
* @return escaped string or null if not found
*/","* Returns the escaped form of a given literal string, starting at the given index. This method is
   * called by the {@link #escape(String)} method when it discovers that escaping is required. It is
   * protected to allow subclasses to override the fastpath escaping function to inline their
   * escaping test. See {@link CharEscaperBuilder} for an example usage.
   *
   * <p>This method is not reentrant and may only be invoked by the top level {@link
   * #escape(String)} method.
   *
   * @param s the literal string to be escaped
   * @param index the index to start escaping from
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null
   * @throws IllegalArgumentException if invalid surrogate characters are encountered",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,of,com.google.common.graph.UndirectedMultiNetworkConnections:of(),49,52,"/**
* Creates an empty undirected multi-network with specified inner capacity and load factor.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,removePredecessor,com.google.common.graph.DirectedGraphConnections:removePredecessor(java.lang.Object),427,451,"/**
* Removes predecessor node from graph, updating adjacent node values and predecessor count.
* @param node the predecessor node to remove
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,addPredecessor,"com.google.common.graph.DirectedGraphConnections:addPredecessor(java.lang.Object,java.lang.Object)",488,514,"/**
* Adds a predecessor node to the graph with specified value.
* @param node node to add as predecessor
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,removeSuccessor,com.google.common.graph.DirectedGraphConnections:removeSuccessor(java.lang.Object),453,486,"/**
* Removes and returns the successor node's value.
* @param node Object to remove successor from
* @return V Value of removed successor or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,addSuccessor,"com.google.common.graph.DirectedGraphConnections:addSuccessor(java.lang.Object,java.lang.Object)",516,544,"/**
* Adds a successor node with value to the graph, updating adjacent nodes and successor count as needed. 
* @param node Node to add successor for
* @param value Value of new successor node
* @return Previous successor value or null if none existed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,<init>,"com.google.common.graph.StandardNetwork:<init>(com.google.common.graph.NetworkBuilder,java.util.Map,java.util.Map)",77,93,"/**
* Constructs a StandardNetwork instance from builder and node/edge data.
* @param builder network configuration
* @param nodeConnections map of node connections
* @param edgeToReferenceNode map of edges to reference nodes
*/","* Constructs a graph with the properties specified in {@code builder}, initialized with the given
   * node and edge maps.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,<init>,"com.google.common.graph.StandardValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder,java.util.Map,long)",68,81,"/**
* Initializes a StandardValueGraph with the given builder and node connections.
* @param builder graph builder configuration
* @param nodeConnections map of nodes to their connections
* @param edgeCount total number of edges in the graph
*/","* Constructs a graph with the properties specified in {@code builder}, initialized with the given
   * node map.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,removeEdge,com.google.common.graph.StandardMutableNetwork:removeEdge(java.lang.Object),146,164,"/**
* Removes an edge from the graph.
* @param edge Edge object to be removed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,removeNode,com.google.common.graph.StandardMutableValueGraph:removeNode(java.lang.Object),119,158,"/**
* Removes a specified node from the graph, including all incident edges.
* @param node Node to be removed
* @return True if the removal was successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,removeEdge,"com.google.common.graph.StandardMutableValueGraph:removeEdge(java.lang.Object,java.lang.Object)",160,178,"/**
* Removes an edge between two nodes, updating edge count and connections.
* @param nodeU the source node
* @param nodeV the target node
* @return the removed edge value or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,checkedReferenceNode,com.google.common.graph.StandardNetwork:checkedReferenceNode(java.lang.Object),187,194,"/**
* Retrieves a checked reference node by edge.
* @param edge unique graph edge
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,readResolve,com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm:readResolve(),136,138,"/**
* Returns an instance of StringFunnel object.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,copy,"com.google.common.io.CharStreams:copy(java.lang.Readable,java.lang.Appendable)",68,92,"/**
* Copies content from a Readable source to an Appendable destination.
* @param from readable content source
* @param to appendable destination
* @return total number of characters copied
*/","* Copies all characters between the {@link Readable} and {@link Appendable} objects. Does not
   * close or flush either object.
   *
   * @param from the object to read from
   * @param to the object to write to
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decode,com.google.common.io.BaseEncoding:decode(java.lang.CharSequence),215,221,"/**
* Decodes input CharSequence into a byte array, wrapping checked exceptions.
* @param chars input characters to decode
* @return decoded byte array or throws if decoding fails
*/","* Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the
   * inverse operation to {@link #encode(byte[])}.
   *
   * @throws IllegalArgumentException if the input is not a valid encoded string according to this
   *     encoding.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,ceilingPowerOfTwo,com.google.common.math.BigIntegerMath:ceilingPowerOfTwo(java.math.BigInteger),56,58,"/**
* Calculates the smallest power of two greater than or equal to the given value.
* @param x input value
*/","* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to
   * {@code BigInteger.valueOf(2).pow(log2(x, CEILING))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,floorPowerOfTwo,com.google.common.math.BigIntegerMath:floorPowerOfTwo(java.math.BigInteger),67,69,"/**
* Calculates the largest power of two less than or equal to the given number.
* @param x input number
* @return largest power of two <= x
*/","* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code
   * BigInteger.valueOf(2).pow(log2(x, FLOOR))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,getInstance,com.google.common.collect.MutableClassToInstanceMap:getInstance(java.lang.Class),176,179,"/**
* Retrieves instance of specified class type.
* @param type Class to instantiate
* @return Instance object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,of,"com.google.common.reflect.ClassPath$ResourceInfo:of(java.io.File,java.lang.String,java.lang.ClassLoader)",209,215,"/**
* Creates a ResourceInfo object based on the file extension.
* @param file the file containing the resource
* @param resourceName name of the resource (e.g. class or file)
* @param loader ClassLoader to use for loading resources
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,from,com.google.common.reflect.Invokable:from(java.lang.reflect.Constructor),80,82,"/**
* Creates an invokable instance from a given constructor.
* @param constructor constructor to be used
*/",Returns {@link Invokable} of {@code constructor}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,from,com.google.common.reflect.Invokable:from(java.lang.reflect.Method),75,77,"/**
* Creates an invokable instance wrapping a given method.
* @param method target method to invoke
*/",Returns {@link Invokable} of {@code method}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,map,"com.google.common.reflect.TypeResolver$TypeMappingIntrospector:map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type)",416,437,"/**
* Maps a TypeVariableKey to a Type, resolving cycles and overwriting existing mappings.
* @param var the key to map
* @param arg the type value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,create,"com.google.common.util.concurrent.AbstractCatchingFuture:create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)",42,50,"/**
* Creates a future that catches and handles exceptions of the specified type.
* @param input original future to be transformed
* @param exceptionType type of exception to catch
* @param fallback function to apply if an exception is caught
* @param executor executor to use for asynchronous operations
* @return transformed future with caught exceptions
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,complete,"com.google.common.util.concurrent.AbstractFuture:complete(com.google.common.util.concurrent.AbstractFuture,boolean)",710,772,"/**
* Completes an AbstractFuture by running its listeners and handling any DelegatingToFutures.
* @param param the AbstractFuture to complete
* @param callInterruptTask whether to interrupt the task before completing
*/",Unblocks all threads and runs all listeners.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,create,"com.google.common.util.concurrent.AbstractTransformFuture:create(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)",48,53,"/**
* Transforms a ListenableFuture of type I into one of type O by applying the given Function.
* @param input future containing input data of type I
* @param function transformation function to apply to input data
* @param executor executor for listener tasks
* @return transformed ListenableFuture of type O",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,addAndGet,"com.google.common.util.concurrent.AtomicLongMap:addAndGet(java.lang.Object,long)",108,111,"/**
* Adds and returns the updated value for the given key.
* @param key unique key identifier
* @param delta value to be added
*/","* Adds {@code delta} to the value currently associated with {@code key}, and returns the new
   * value.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndAdd,"com.google.common.util.concurrent.AtomicLongMap:getAndAdd(java.lang.Object,long)",133,136,"/**
* Adds a value to the map and returns the previous value.
* @param key unique map identifier
* @param delta value to add (non-negative)
* @return previous value or 0L if not found
*/","* Adds {@code delta} to the value currently associated with {@code key}, and returns the old
   * value.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,putAll,com.google.common.util.concurrent.AtomicLongMap:putAll(java.util.Map),219,221,"/**
* Adds all entries from the provided map to this instance.
* @param m Map containing key-value pairs to be added
*/","* Copies all of the mappings from the specified map to this map. The effect of this call is
   * equivalent to that of calling {@code put(k, v)} on this map once for each mapping from key
   * {@code k} to value {@code v} in the specified map. The behavior of this operation is undefined
   * if the specified map is modified while the operation is in progress.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,callUninterruptiblyWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",73,79,"/**
* Invokes a function with a specified timeout and returns the result.
* @param callable function to be invoked
* @param timeoutDuration timeout duration in specified unit
* @param timeoutUnit time unit for timeout duration
* @return result of the function or throws ExecutionException if timed out
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,run,com.google.common.util.concurrent.TrustedListenableFutureTask:run(),76,87,"/**
* Executes the associated task and clears the reference to it.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,addInEdge,"com.google.common.graph.UndirectedMultiNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",102,107,"/**
* Adds an in-edge to the graph with a corresponding out-edge.
* @param edge edge to be added
* @param node target node for the edges
* @param isSelfLoop true if the edge is a self-loop, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractBaseGraph:incidentEdgeOrder(),101,104,"/**
 * Returns the order of elements in an incident edge.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,incidentEdgeOrder,com.google.common.graph.ImmutableGraph:incidentEdgeOrder(),79,82,"/**
* Returns the edge order of incidents in this graph.
* @return Edge order (stable)",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,incidentEdgeOrder,com.google.common.graph.ImmutableValueGraph:incidentEdgeOrder(),74,77,"/**
* Returns the edge order of an incident element.
* @return ElementOrder instance (stable)",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraphBuilder.java,<init>,com.google.common.graph.AbstractGraphBuilder:<init>(boolean),40,42,"/**
* Initializes graph builder with directionality.
* @param directed true to create a directed graph, false otherwise
*/","* Creates a new instance with the specified edge directionality.
   *
   * @param directed if true, creates an instance for graphs whose edges are each directed; if
   *     false, creates an instance for graphs whose edges are each undirected.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,addListener,"com.google.common.util.concurrent.ListenerCallQueue:addListener(java.lang.Object,java.util.concurrent.Executor)",75,79,"/**
* Adds a listener to the list of listeners.
* @param listener the listener to be added
* @param executor the executor to use for this listener
*/","* Adds a listener that will be called using the given executor when events are later {@link
   * #enqueue enqueued} and {@link #dispatch dispatched}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoForward,com.google.common.base.Converter$ConverterComposition:correctedDoForward(java.lang.Object),412,415,"/**
* Performs nested forward correction on input object.
* @param a input object to correct
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoBackward,com.google.common.base.Converter$ReverseConverter:correctedDoBackward(java.lang.Object),337,340,"/**
* Performs backward correction using forward correction.
* @param a input object to correct (may be null)
* @return corrected result or null if input is null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,convert,com.google.common.base.Converter:convert(java.lang.Object),196,198,"/**
* Converts input of type A to output of type B using correction.
* @param a input object of type A
* @return converted object of type B or null if invalid input","* Returns a representation of {@code a} as an instance of type {@code B}.
   *
   * @return the converted value; is null <i>if and only if</i> {@code a} is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoBackward,com.google.common.base.Converter$ConverterComposition:correctedDoBackward(java.lang.Object),417,420,"/**
* Applies two corrections to an object in reverse order.
* @param c object to correct
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoForward,com.google.common.base.Converter$ReverseConverter:correctedDoForward(java.lang.Object),332,335,"/**
* Applies corrected DoBackward operation to input B.
* @param b input object of type B
* @return result of correction or null if not applicable
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,<init>,com.google.common.collect.CompactHashMap:<init>(),240,242,"/**
 * Initializes a compact hash map with default size.
 */",Constructs a new empty instance of {@code CompactHashMap}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,<init>,com.google.common.collect.CompactHashMap:<init>(int),249,251,"/**
* Initializes compact HashMap with specified expected size.
* @param expectedSize anticipated number of key-value pairs
*/","* Constructs a new instance of {@code CompactHashMap} with the specified capacity.
   *
   * @param expectedSize the initial capacity of this {@code CompactHashMap}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,init,com.google.common.collect.CompactLinkedHashMap:init(int),115,120,"/**
* Initializes endpoint as first and last entry with given size.
* @param expectedSize size of endpoint data structure
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,<init>,com.google.common.collect.CompactHashSet:<init>(),205,207,"/**
* Initializes a compact hash set with default size.
*/",Constructs a new empty instance of {@code CompactHashSet}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,<init>,com.google.common.collect.CompactHashSet:<init>(int),214,216,"/**
* Initializes a compact hash set with specified expected size.
* @param expectedSize anticipated number of unique elements to store.","* Constructs a new instance of {@code CompactHashSet} with the specified capacity.
   *
   * @param expectedSize the initial capacity of this {@code CompactHashSet}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,init,com.google.common.collect.CompactLinkedHashSet:init(int),132,137,"/**
* Initializes internal state with given list size.
* @param expectedSize number of elements in the underlying collection
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$FastMatcher:negate(),970,973,"/**
* Returns a negation of this matcher.
* @return NegatedCharMatcher object that matches characters not matched by this.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$AnyOf:negate(),373,376,"/**
 * Creates a negated version of this CharMatcher.
 * @return A CharMatcher that matches any character not matched by this matcher.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$JavaLetter:negate(),373,376,"/**
 * Returns a negated CharMatcher instance that matches any character not matched by this matcher. 
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$JavaUpperCase:negate(),373,376,"/**
* Returns a negated CharMatcher instance.
* @return a new CharMatcher that matches characters not matched by this instance.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$Or:negate(),373,376,"/**
* Returns a negated CharMatcher instance.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$RangesMatcher:negate(),373,376,"/**
* Returns a negated CharMatcher instance.
* @return a new matcher that returns opposite results as this one
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getSimpleName,com.google.common.reflect.ClassPath$ClassInfo:getSimpleName(),330,345,"/**
* Extracts simple class name from fully qualified class name.
* @return Class name without package prefix or trailing dollar sign if present
*/","* Returns the simple name of the underlying class as given in the source code.
     *
     * <p>Behaves similarly to {@link Class#getSimpleName()} but does not require the class to be
     * loaded.
     *
     * <p>But note that this class uses heuristics to identify the simple name. See a related
     * discussion in <a href=""https://github.com/google/guava/issues/3349"">issue 3349</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,stats,com.google.common.cache.LocalCache$LocalManualCache:stats(),4907,4915,"/**
* Calculates overall cache statistics.
* @return CacheStats object with aggregated metrics
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomListMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",341,344,"/**
* Initializes a custom multimap with the given map and list factory.
* @param map underlying map of key to value collection
* @param factory supplier for creating lists when needed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,<init>,com.google.common.collect.AbstractSortedSetMultimap:<init>(java.util.Map),47,49,"/**
* Constructs an AbstractSortedSetMultimap from a map of key-value pairs.
* @param map map of keys to sorted collections of values
*/","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomSetMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",427,430,"/**
* Constructs a custom multimap with specified set factory.
* @param map underlying map
* @param factory supplier of sets to use for values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newMultimap,"com.google.common.collect.Multimaps:newMultimap(java.util.Map,com.google.common.base.Supplier)",211,214,"/**
* Creates a custom multimap instance from a map and a collection factory.
* @param map initial map data
* @param factory supplier of collection instances for each key
*/","* Creates a new {@code Multimap} backed by {@code map}, whose internal value collections are
   * generated by {@code factory}. Most users should prefer {@link MultimapBuilder}, though a small
   * number of users will need this method to cover map or collection types that {@link
   * MultimapBuilder} does not support.
   *
   * <p><b>Warning: do not use</b> this method when the collections returned by {@code factory}
   * implement either {@link List} or {@code Set}! Use the more specific method {@link
   * #newListMultimap}, {@link #newSetMultimap} or {@link #newSortedSetMultimap} instead, to avoid
   * very surprising behavior from {@link Multimap#equals}.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}
   * method returns instances of a different class than {@code factory.get()} does.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the collections generated by
   * {@code factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()}, {@link
   * HashMultimap#create()}, {@link LinkedHashMultimap#create()}, {@link
   * LinkedListMultimap#create()}, {@link TreeMultimap#create()}, and {@link
   * TreeMultimap#create(Comparator, Comparator)} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the collections
   * returned by {@code factory}. Those objects should not be manually updated and they should not
   * use soft, weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty collections that will each hold all values for a given
   *     key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,create,com.google.common.collect.HashMultiset:create(),39,41,"/**
* Creates an empty HashMultiset instance. 
* @return newly created multiset","Creates a new, empty {@code HashMultiset} using the default initial capacity.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,create,com.google.common.collect.LinkedHashMultiset:create(),47,49,"/**
* Creates an empty LinkedHashMultiset instance.
* @return Multiset object with default configuration
*/","Creates a new, empty {@code LinkedHashMultiset} using the default initial capacity.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,cellSpliterator,com.google.common.collect.ArrayTable:cellSpliterator(),559,563,"/**
* Returns a spliterator for iterating over the cells in this collection.
* @return Spliterator of Cell objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,spliterator,com.google.common.collect.CompactHashMap$EntrySetView:spliterator(),818,825,"/**
* Returns a spliterator for this map's entries.
* @return Spliterator of unique and ordered entries or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,spliterator,com.google.common.collect.ImmutableList:spliterator(),611,614,"/**
* Creates a spliterator to iterate over elements.
* @return Spliterator instance with indexed characteristics.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,spliterator,com.google.common.collect.ImmutableSet$Indexed:spliterator(),343,346,"/**
* Creates a Spliterator to iterate over all elements in this collection.
* @return Spliterator instance with specified characteristics and size.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,spliterator,com.google.common.collect.IndexedImmutableSet:spliterator(),37,40,"/**
* Returns an indexed Spliterator for iterating over elements in this collection.
* @return Spliterator instance with specified characteristics and index-based iteration.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,create,"com.google.common.collect.EnumMultiset:create(java.lang.Iterable,java.lang.Class)",80,84,"/**
* Creates a multiset of enum values from the given iterable and class.
* @param elements iterable of enum values to add
* @param type enum class for the multiset
* @return EnumMultiset instance containing the added elements
*/","* Returns a new {@code EnumMultiset} instance containing the given elements. Unlike {@link
   * EnumMultiset#create(Iterable)}, this method does not produce an exception on an empty iterable.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,<init>,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:<init>(),58,60,"/**
* Initializes CRC-32C hasher with 16 bytes of data.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,<init>,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:<init>(int),95,100,"/**
* Initializes a Murmur3_128Hasher with a given seed value.
* @param seed initial hash value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,<init>,"com.google.common.hash.SipHashFunction$SipHasher:<init>(int,int,long,long)",121,129,"/**
* Initializes SipHasher with parameters: chunk size, and two 64-bit key values.
* @param c chunk size
* @param d unused (reserved for future use)
* @param k0 first 64-bit key value
* @param k1 second 64-bit key value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,populationStandardDeviation,com.google.common.math.Stats:populationStandardDeviation(),317,319,"/**
* Calculates the standard deviation of the population.
* @return Standard deviation value or NaN if variance is undefined
*/","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values"">
   * population standard deviation</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,sampleStandardDeviation,com.google.common.math.Stats:sampleStandardDeviation(),363,365,"/**
* Calculates the sample standard deviation as the square root of the sample variance.
* @return Sample standard deviation value
*/","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation"">
   * corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a
   * population, this is an estimator of the population standard deviation of the population which
   * is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on
   * the distribution). The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,populationStandardDeviation,com.google.common.math.StatsAccumulator:populationStandardDeviation(),310,312,"/**
* Calculates the standard deviation of the population.
* @return Standard deviation value or NaN if variance is infinite
*/","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values"">
   * population standard deviation</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,sampleStandardDeviation,com.google.common.math.StatsAccumulator:sampleStandardDeviation(),356,358,"/**
* Calculates the standard deviation of the sampled population.
* @return Standard deviation value or NaN if variance is undefined
*/","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation"">
   * corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a
   * population, this is an estimator of the population standard deviation of the population which
   * is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on
   * the distribution). The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,noneOf,com.google.common.base.CharMatcher:noneOf(java.lang.CharSequence),333,335,"/**
* Returns a CharMatcher that matches no characters from the specified sequence.
* @param sequence CharSequence containing characters to exclude
*/","* Returns a {@code char} matcher that matches any BMP character not present in the given
   * character sequence. Returns a bogus matcher if the sequence contains supplementary characters.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,converterTo,com.google.common.base.CaseFormat:converterTo(com.google.common.base.CaseFormat),163,165,"/**
* Converts string to specified case format.
* @param targetFormat desired case format
*/","* Returns a serializable {@code Converter} that converts strings from this format to {@code
   * targetFormat}.
   *
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,doAndThen,com.google.common.base.Converter:doAndThen(com.google.common.base.Converter),381,383,"/**
* Composes this converter with another to perform both conversions in sequence.
* @param secondConverter the next conversion step
*/",Package-private non-final implementation of andThen() so only we can override it.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,reverse,com.google.common.base.Converter:reverse(),301,305,"/**
* Returns the reversed converter instance.
* @return Converter instance or creates a new one if not initialized
*/","* Returns the reversed view of this converter, which converts {@code this.convert(a)} back to a
   * value roughly equivalent to {@code a}.
   *
   * <p>The returned converter is serializable if {@code this} converter is.
   *
   * <p><b>Note:</b> you should not override this method. It is non-final for legacy reasons.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,stringConverter,com.google.common.base.Enums:stringConverter(java.lang.Class),105,107,"/**
* Creates a converter from strings to enums of specified type.
* @param enumClass class of enum values
*/","* Returns a serializable converter that converts between strings and {@code enum} values of type
   * {@code enumClass} using {@link Enum#valueOf(Class, String)} and {@link Enum#name()}. The
   * converter will throw an {@code IllegalArgumentException} if the argument is not the name of any
   * enum constant in the specified enum.
   *
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asConverter,com.google.common.collect.Maps:asConverter(com.google.common.collect.BiMap),1599,1601,"/**
* Converts a BiMap into an instance of Converter.
* @param bimap Bidirectional Map containing the conversion logic
*/","* Returns a {@link Converter} that converts values using {@link BiMap#get bimap.get()}, and whose
   * inverse view converts values using {@link BiMap#inverse bimap.inverse()}{@code .get()}.
   *
   * <p>To use a plain {@link Map} as a {@link Function}, see {@link
   * com.google.common.base.Functions#forMap(Map)} or {@link
   * com.google.common.base.Functions#forMap(Map, Object)}.
   *
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,drainValueReferenceQueue,com.google.common.collect.MapMakerInternalMap$Segment:drainValueReferenceQueue(java.lang.ref.ReferenceQueue),1386,1398,"/**
* Drains the specified reference queue for weak value references.
* @param valueReferenceQueue queue to drain
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardEquals,com.google.common.collect.ForwardingList:standardEquals(java.lang.Object),225,227,"/**
* Checks equality with another object using ListUtils implementation.
* @param object object to compare against
*/","* A sensible definition of {@link #equals(Object)} in terms of {@link #size} and {@link
   * #iterator}. If you override either of those methods, you may wish to override {@link
   * #equals(Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,equals,com.google.common.collect.ImmutableList:equals(java.lang.Object),706,709,"/**
* Compares this object with another for equality.
* @param obj Object to compare with (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,create,com.google.common.collect.ConcurrentHashMultiset:create(java.lang.Iterable),104,108,"/**
* Creates a concurrent hash multiset from the given iterable of elements.
* @param elements collection of elements to add to the multiset
*/","* Creates a new {@code ConcurrentHashMultiset} containing the specified elements, using the
   * default initial capacity, load factor, and concurrency settings.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.lang.Object[])",120,126,"/**
* Appends a variable number of objects to the given Appendable.
* @param appendable target Appendable for output
* @param parts array of objects to be appended
* @return the input Appendable (same type as the input)
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code appendable}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.lang.Iterable)",141,144,"/**
* Appends iterable elements to a StringBuilder.
* @param builder StringBuilder instance to append to
* @param parts iterable collection of elements to append
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,
   * Iterable)}, except that it does not throw {@link IOException}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner:join(java.util.Iterator),249,251,"/**
* Concatenates iterator of objects into a single string.
* @param parts iterator containing objects to concatenate
*/","* Returns a string containing the string representation of each of {@code parts}, using the
   * previously configured separator between each.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner$MapJoiner:join(java.util.Map),476,478,"/**
* Joins Map entries into a string representation.
* @param map input Map to process
*/","* Returns a string containing the string representation of each entry of {@code map}, using the
     * previously configured separator and key-value separator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,toString,com.google.common.cache.CacheBuilderSpec:toString(),236,239,"/**
* Returns a string representation of this object.
* Uses helper to convert to parsable string format.","* Returns a string representation for this CacheBuilderSpec instance. The form of this
   * representation is not guaranteed.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,toString,com.google.common.eventbus.EventBus:toString(),269,272,"/**
* Returns a human-readable string representation of this object.
* Includes the identifier value.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,toString,com.google.common.util.concurrent.Futures$CallbackListener:toString(),1135,1138,"/**
* Returns a string representation of this object.
* Includes the value of the callback field.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/DeadEvent.java,toString,com.google.common.eventbus.DeadEvent:toString(),66,69,"/**
* Returns a string representation of this event.
* Includes details about the source and event itself.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,toString,com.google.common.graph.ElementOrder:toString(),179,186,"/**
* Returns a string representation of the object, including its type and optional comparator.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,toString,com.google.common.util.concurrent.ClosingFuture:toString(),2113,2117,"/**
* Returns a string representation of this object, including its state and future value.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,toString,com.google.common.base.Predicates$ContainsPatternPredicate:toString(),763,771,"/**
* Returns a string representation of this predicate, including the underlying pattern.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,toString,com.google.common.collect.MapMaker:toString(),294,313,"/**
* Returns a string representation of the object, including key and value strength.
* @return String representation or an empty string if uninitialized
*/","* Returns a string representation for this MapMaker instance. The exact form of the returned
   * string is not specified.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,toString,com.google.common.cache.CacheBuilder:toString(),1076,1113,"/**
* Returns a string representation of this cache, including its properties.
*/","* Returns a string representation for this CacheBuilder instance. The exact form of the returned
   * string is not specified.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,toString,com.google.common.cache.CacheStats:toString(),293,303,"/**
* Returns a human-readable string representation of this cache metrics.
* @return String containing key-value pairs for each metric
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap:<init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper)",168,202,"/**
* Initializes internal map with given parameters.
* @param builder MapMaker configuration object
* @param entryHelper InternalEntryHelper instance
*/","* Creates a new, empty map with the specified strategy, initial capacity and concurrency level.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,fromJavaUtil,com.google.common.base.Optional:fromJavaUtil(java.util.Optional),129,133,"/**
* Converts Java Util Optional to Java Optional.
* @param javaUtilOptional Java Util Optional object
* @return Converted Java Optional or null if input is null
*/","* Returns the equivalent {@code com.google.common.base.Optional} value to the given {@code
   * java.util.Optional}, or {@code null} if the argument is null.
   *
   * @since 21.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,<init>,com.google.common.collect.FluentIterable$2:<init>(java.lang.Iterable),124,126,"/**
 * Initializes the fluent iterator from an existing iterable. 
 * @param iterable input collection to iterate over
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,<init>,com.google.common.collect.Iterables$UnmodifiableIterable:<init>(java.lang.Iterable),101,103,"/**
* Constructs an UnmodifiableIterable from an existing Iterable.
* @param iterable the underlying iterable to wrap
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource$ConcatenatedByteSource:sizeIfKnown(),696,723,"/**
* Calculates total size by iterating sources and summing their sizes.
* @return Total size or Long.MAX_VALUE on overflow
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource$SlicedByteSource:sizeIfKnown(),544,553,"/**
* Calculates the known size of a sliced ByteSource.
* @return Optional Long containing the size or empty if unknown
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lengthIfKnown,com.google.common.io.CharSource$ConcatenatedCharSource:lengthIfKnown(),710,721,"/**
* Calculates total length of all CharSources.
* @return total length or absent if any source is unknown
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addPendingString,com.google.common.util.concurrent.AbstractFuture:addPendingString(java.lang.StringBuilder),893,934,"/**
* Appends a pending string to the StringBuilder, potentially with additional info.
* @param builder StringBuilder to append to
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,fromParts,"com.google.common.net.HostAndPort:fromParts(java.lang.String,int)",133,138,"/**
* Creates a HostAndPort object from a host string and port number.
* @param host string representation of the host
* @param port integer value of the port (checked for validity)
* @return HostAndPort object with valid host and port, or null on error
*/","* Build a HostAndPort instance from separate host and port values.
   *
   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to
   * prohibit these.
   *
   * @param host the host string to parse. Must not contain a port number.
   * @param port a port number from [0..65535]
   * @return if parsing was successful, a populated HostAndPort object.
   * @throws IllegalArgumentException if {@code host} contains a port number, or {@code port} is out
   *     of range.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,fromHost,com.google.common.net.HostAndPort:fromHost(java.lang.String),151,155,"/**
* Parses a string into a HostAndPort object, rejecting hosts with embedded ports.
* @param host input hostname or IP address
*/","* Build a HostAndPort instance from a host only.
   *
   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to
   * prohibit these.
   *
   * @param host the host-only string to parse. Must not contain a port number.
   * @return if parsing was successful, a populated HostAndPort object.
   * @throws IllegalArgumentException if {@code host} contains a port number.
   * @since 17.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,get,"com.google.common.collect.Iterables:get(java.lang.Iterable,int)",765,771,"/**
* Retrieves an element from a collection at the specified index.
* @param iterable Iterable collection containing elements of type T
* @param position index of the desired element (0-based) 
* @return Element at the specified position or null if not found 
*/","* Returns the element at the specified position in an iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (throws
   * {@code NoSuchElementException} if out of bounds)
   *
   * @param position position of the element to return
   * @return the element at the specified position in {@code iterable}
   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to
   *     the size of {@code iterable}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,copy,com.google.common.hash.BloomFilter:copy(),148,150,"/**
 * Creates a deep copy of this Bloom filter.
 */","* Creates a new {@code BloomFilter} that's a copy of this instance. The new instance is equal to
   * this instance but shares no mutable state.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,<init>,"com.google.common.graph.DirectedMultiNetworkConnections:<init>(java.util.Map,java.util.Map,int)",44,47,"/**
* Initializes a new instance of DirectedMultiNetworkConnections with edge maps and self-loop count.
* @param inEdges map of incoming edges
* @param outEdges map of outgoing edges
* @param selfLoopCount number of self-loops
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,<init>,"com.google.common.graph.DirectedNetworkConnections:<init>(java.util.Map,java.util.Map,int)",37,39,"/**
* Initializes directed network connections with edge maps and self-loop count.
* @param inEdgeMap map of incoming edges
* @param outEdgeMap map of outgoing edges
* @param selfLoopCount number of self-loops in the graph
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,removeInEdge,"com.google.common.graph.DirectedMultiNetworkConnections:removeInEdge(java.lang.Object,boolean)",104,112,"/**
* Removes in-edge from graph and updates predecessors multiset.
* @param edge the edge to remove
* @param isSelfLoop whether the edge is a self-loop
* @return the removed node, or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,of,com.google.common.graph.DirectedGraphConnections:of(com.google.common.graph.ElementOrder),155,176,"/**
* Creates a directed graph connections object with specified incident edge order.
* @param incidentEdgeOrder element order for the graph
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,addInEdge,"com.google.common.graph.DirectedMultiNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",124,131,"/**
* Adds an edge to the graph with a specified node as predecessor.
* @param edge E object representing the edge
* @param node N object representing the node
* @param isSelfLoop whether the edge forms a self-loop
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,acquire,com.google.common.util.concurrent.RateLimiter:acquire(int),302,307,"/**
* Acquires a permit for the specified duration, sleeping until available.
* @param permits number of permits to acquire
*/","* Acquires the given number of permits from this {@code RateLimiter}, blocking until the request
   * can be granted. Tells the amount of time slept, if any.
   *
   * @param permits the number of permits to acquire
   * @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 16.0 (present in 13.0 with {@code void} return type})",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,com.google.common.util.concurrent.RateLimiter:tryAcquire(java.time.Duration),334,336,"/**
* Attempts to acquire a resource within the specified time limit.
* @param timeout maximum duration to wait for acquisition
*/","* Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the
   * specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit
   * would not have been granted before the timeout expired.
   *
   * <p>This method is equivalent to {@code tryAcquire(1, timeout)}.
   *
   * @param timeout the maximum time to wait for the permit. Negative values are treated as zero.
   * @return {@code true} if the permit was acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,"com.google.common.util.concurrent.RateLimiter:tryAcquire(long,java.util.concurrent.TimeUnit)",350,353,"/**
* Attempts to acquire a resource within a specified time limit.
* @param timeout the duration to wait for acquisition in the given unit
* @param unit the time unit of the timeout (e.g. TimeUnit.SECONDS)
*/","* Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the
   * specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit
   * would not have been granted before the timeout expired.
   *
   * <p>This method is equivalent to {@code tryAcquire(1, timeout, unit)}.
   *
   * @param timeout the maximum time to wait for the permit. Negative values are treated as zero.
   * @param unit the time unit of the timeout argument
   * @return {@code true} if the permit was acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,com.google.common.util.concurrent.RateLimiter:tryAcquire(int),365,367,"/**
* Attempts to acquire specified number of permits.
* @param permits desired permit count
*/","* Acquires permits from this {@link RateLimiter} if it can be acquired immediately without delay.
   *
   * <p>This method is equivalent to {@code tryAcquire(permits, 0, anyUnit)}.
   *
   * @param permits the number of permits to acquire
   * @return {@code true} if the permits were acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,com.google.common.util.concurrent.RateLimiter:tryAcquire(),378,380,"/**
* Tries to acquire the resource within a specified time frame.
* @return true if acquired successfully, false otherwise
*/","* Acquires a permit from this {@link RateLimiter} if it can be acquired immediately without
   * delay.
   *
   * <p>This method is equivalent to {@code tryAcquire(1)}.
   *
   * @return {@code true} if the permit was acquired, {@code false} otherwise
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,"com.google.common.util.concurrent.RateLimiter:tryAcquire(int,java.time.Duration)",393,395,"/**
* Attempts to acquire specified number of permits within given time limit.
* @param permits number of permits to acquire
* @param timeout duration to wait for acquisition (in nanoseconds)
*/","* Acquires the given number of permits from this {@code RateLimiter} if it can be obtained
   * without exceeding the specified {@code timeout}, or returns {@code false} immediately (without
   * waiting) if the permits would not have been granted before the timeout expired.
   *
   * @param permits the number of permits to acquire
   * @param timeout the maximum time to wait for the permits. Negative values are treated as zero.
   * @return {@code true} if the permits were acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enter,"com.google.common.util.concurrent.Monitor:enter(long,java.util.concurrent.TimeUnit)",400,423,"/**
* Waits to acquire the lock with a specified time limit.
* @param time   maximum wait duration
* @param unit   TimeUnit for the time parameter
* @return true if acquired, false otherwise
*/","* Enters this monitor. Blocks at most the given time.
   *
   * @return whether the monitor was entered",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,<init>,com.google.common.util.concurrent.AbstractService:<init>(),195,195,"/**
* Initializes an instance of AbstractService. 
* This is a protected constructor intended to be used by subclasses. 
* It should not be invoked directly from outside the class hierarchy.
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,isIntact,com.google.common.collect.MinMaxPriorityQueue:isIntact(),503,511,"/**
* Verifies that the heap data structure is intact by checking each index.
* @return true if all indices are valid, false otherwise
*/","* Returns {@code true} if the MinMax heap structure holds. This is only used in testing.
   *
   * <p>TODO(kevinb): move to the test class?",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,toCacheBuilder,com.google.common.cache.CacheBuilderSpec:toCacheBuilder(),172,221,"/**
* Configures a CacheBuilder with specified parameters.
* @return pre-configured CacheBuilder instance
*/",Returns a CacheBuilder configured according to this instance's specification.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,build,com.google.common.collect.Interners$InternerBuilder:build(),85,90,"/**
* Creates an instance of Interner with specified key characteristics.
* @return Interner object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,tryWeakKeys,com.google.common.collect.Platform:tryWeakKeys(com.google.common.collect.MapMaker),135,138,"/**
* Creates a new MapMaker with weak keys from an existing one.
* @param mapMaker source MapMaker instance
*/","* Configures the given map maker to use weak keys, if possible; does nothing otherwise (i.e., in
   * GWT). This is sometimes acceptable, when only server-side code could generate enough volume
   * that reclamation becomes important.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,checkCurrentState,com.google.common.util.concurrent.AbstractService:checkCurrentState(com.google.common.util.concurrent.Service$State),379,392,"/**
* Verifies current service state matches the specified expected state.
* @param expected desired State value
*/",Checks that the current state is equal to the expected state.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getEntry,com.google.common.collect.ArrayTable$ArrayMap:getEntry(int),224,244,"/**
* Retrieves an entry at a specified index.
* @param index position of the desired entry in the map
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,at,"com.google.common.collect.ArrayTable:at(int,int)",327,332,"/**
* Retrieves a value from the 2D array at the specified row and column indices.
* @param rowIndex index of the desired row
* @param columnIndex index of the desired column
* @return value at the specified position or null if out of bounds
*/","* Returns the value corresponding to the specified row and column indices. The same value is
   * returned by {@code get(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex))}, but this
   * method runs more quickly.
   *
   * @param rowIndex position of the row key in {@link #rowKeyList()}
   * @param columnIndex position of the row key in {@link #columnKeyList()}
   * @return the value with the specified row and column
   * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than
   *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal
   *     to the number of allowed column keys",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,set,"com.google.common.collect.ArrayTable:set(int,int,java.lang.Object)",347,355,"/**
* Sets a value at the specified row and column indices.
* @param rowIndex row index
* @param columnIndex column index
* @param value new value to set (may be null)
* @return old value or null if it was already null
*/","* Associates {@code value} with the specified row and column indices. The logic {@code
   * put(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex), value)} has the same
   * behavior, but this method runs more quickly.
   *
   * @param rowIndex position of the row key in {@link #rowKeyList()}
   * @param columnIndex position of the row key in {@link #columnKeyList()}
   * @param value value to store in the table
   * @return the previous value with the specified row and column
   * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than
   *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal
   *     to the number of allowed column keys",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,get,com.google.common.collect.CartesianList$1:get(int),115,146,"/**
* Returns an immutable list view of the axes at the specified index.
* @param index product index to retrieve axes for
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,get,com.google.common.collect.CartesianList:get(int),115,146,"/**
* Returns an immutable list containing the element at the specified index.
* @param index product index to fetch
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,get,com.google.common.collect.ImmutableList$ReverseImmutableList:get(int),680,684,"/**
* Retrieves an element at the specified index from the underlying collection.
* @param index zero-based index of the desired element
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,get,com.google.common.collect.ImmutableList$SubList:get(int),490,494,"/**
* Retrieves an element from the list at the specified index.
* @param index position of the desired element
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$CharSequenceAsList:get(int),824,828,"/**
* Retrieves character at specified index from underlying string.
* @param index position of character to retrieve (0-based)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,reverseIndex,com.google.common.collect.Lists$ReverseList:reverseIndex(int),874,878,"/**
* Calculates the reversed index within the collection.
* @param index original element index
* @return equivalent index from end of collection (-1 indexed)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$StringAsImmutableList:get(int),796,800,"/**
* Retrieves character at specified index from underlying string.
* @param index position of character to retrieve (0-based)
* @return Character object or null if out-of-bounds
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,get,com.google.common.collect.SingletonImmutableList:get(int),44,48,"/**
* Returns an element from the collection at the specified index.
* @param index position of the desired element (zero-based)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,get,com.google.common.primitives.Booleans$BooleanArrayAsList:get(int),415,419,"/**
* Retrieves an element at the specified index from the underlying array.
* @param index zero-based index of the desired element
* @return true if successful, false otherwise (index out of bounds)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,set,"com.google.common.primitives.Booleans$BooleanArrayAsList:set(int,java.lang.Boolean)",452,459,"/**
* Sets an element at the specified index in the array.
* @param index The position to update
* @param element The new value to store
* @return The old value, or null if this was a new insertion
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,get,com.google.common.primitives.Bytes$ByteArrayAsList:get(int),282,286,"/**
* Retrieves byte value at specified index in underlying array.
* @param index position to fetch from (0-based)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,set,"com.google.common.primitives.Bytes$ByteArrayAsList:set(int,java.lang.Byte)",318,325,"/**
* Replaces the element at the specified index with a new value.
* @param index element index
* @return old byte value or null if index out of range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,get,com.google.common.primitives.Chars$CharArrayAsList:get(int),602,606,"/**
* Retrieves character at specified index.
* @param index position of character to retrieve (0-based)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,set,"com.google.common.primitives.Chars$CharArrayAsList:set(int,java.lang.Character)",639,646,"/**
* Replaces character at specified index with new value.
* @param index index of character to replace
* @param element new character value
* @return old character value or null if index out of bounds
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,get,com.google.common.primitives.Doubles$DoubleArrayAsList:get(int),610,614,"/**
* Retrieves an element from the underlying array at the specified index.
* @param index the index of the desired element (0-based)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,set,"com.google.common.primitives.Doubles$DoubleArrayAsList:set(int,java.lang.Double)",652,659,"/**
* Sets the value at a specific array index and returns the old value.
* @param index array index to update
* @param element new value to set
* @return old value at the specified index, or null if not present
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,get,com.google.common.primitives.Floats$FloatArrayAsList:get(int),604,608,"/**
* Retrieves an element from the underlying array by its index.
* @param index position of the element to retrieve (0-based)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,set,"com.google.common.primitives.Floats$FloatArrayAsList:set(int,java.lang.Float)",640,647,"/**
* Updates the value at a specific index in the array.
* @param index position to update
* @param element new value to assign
* @return previous value at the updated index, or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,get,com.google.common.primitives.ImmutableDoubleArray:get(int),380,383,"/**
* Retrieves an element from the underlying array at the specified index.
* @param index zero-based index of the desired element
*/","* Returns the {@code double} value present at the given index.
   *
   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to
   *     {@link #length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,get,com.google.common.primitives.ImmutableIntArray:get(int),377,380,"/**
* Retrieves element at specified index from underlying array.
* @param index position to retrieve (must be within bounds)
*/","* Returns the {@code int} value present at the given index.
   *
   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to
   *     {@link #length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,get,com.google.common.primitives.ImmutableLongArray:get(int),379,382,"/**
* Retrieves an element from the underlying array at the specified index.
* @param index position of the desired element
*/","* Returns the {@code long} value present at the given index.
   *
   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to
   *     {@link #length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,get,com.google.common.primitives.Ints$IntArrayAsList:get(int),692,696,"/**
* Retrieves an element from the underlying array at the specified index.
* @param index zero-based index of the desired element
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,set,"com.google.common.primitives.Ints$IntArrayAsList:set(int,java.lang.Integer)",733,740,"/**
* Sets an element at the specified index in the underlying array.
* @param index the position of the new element
* @return the old value at that index, or null if it was null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,get,com.google.common.primitives.Longs$LongArrayAsList:get(int),744,748,"/**
* Retrieves an element from the underlying array at the specified index.
* @param index position of the element to retrieve (0-based)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,set,"com.google.common.primitives.Longs$LongArrayAsList:set(int,java.lang.Long)",785,792,"/**
* Replaces element at specified index with new value and returns old value.
* @param index index of element to replace
* @return old element value or null if index was out of range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,get,com.google.common.primitives.Shorts$ShortArrayAsList:get(int),653,657,"/**
* Retrieves element at specified index from underlying array.
* @param index zero-based index of desired element
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,set,"com.google.common.primitives.Shorts$ShortArrayAsList:set(int,java.lang.Short)",689,696,"/**
* Sets an element at the specified index in this array.
* @param index element index
* @param element new element value
* @return old value of the element at the given index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,getAt,com.google.common.util.concurrent.Striped$LargeLazyStriped:getAt(int),487,499,"/**
* Retrieves a lock instance at the specified index.
* @param index position of the lock in the collection
* @return Lock object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,getAt,com.google.common.util.concurrent.Striped$SmallLazyStriped:getAt(int),416,438,"/**
* Retrieves an element from the list at a specified index.
* @param index position of the desired element
* @return L object or null if not available
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,"com.google.common.base.CharMatcher$Any:indexIn(java.lang.CharSequence,int)",1051,1056,"/**
* Returns the position of a given character in a CharSequence.
* @param sequence The CharSequence to search
* @param start The starting index for the search
* @return The position of the character (-1 if not found)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,"com.google.common.base.CharMatcher$None:indexIn(java.lang.CharSequence,int)",1149,1154,"/**
* Returns the index of this object within the specified character sequence.
* @param sequence the character sequence to search in
* @param start the starting position in the sequence (inclusive)
* @return the index of this object if found, -1 otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,"com.google.common.base.CharMatcher:indexIn(java.lang.CharSequence,int)",563,572,"/**
* Finds the index of the first occurrence of a matched character in the sequence.
* @param sequence CharSequence to search
* @param start starting position to begin searching from
* @return index of first match or -1 if not found
*/","* Returns the index of the first matching BMP character in a character sequence, starting from a
   * given position, or {@code -1} if no character matches after that position.
   *
   * <p>The default implementation iterates over the sequence in forward order, beginning at {@code
   * start}, calling {@link #matches} for each character.
   *
   * @param sequence the character sequence to examine
   * @param start the first index to examine; must be nonnegative and no greater than {@code
   *     sequence.length()}
   * @return the index of the first matching character, guaranteed to be no less than {@code start},
   *     or {@code -1} if no character matches
   * @throws IndexOutOfBoundsException if start is negative or greater than {@code
   *     sequence.length()}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,<init>,"com.google.common.collect.AbstractIndexedListIterator:<init>(int,int)",64,68,"/**
* Initializes an index list iterator with specified size and position.
* @param size total number of elements in the list
* @param position initial iteration position (0-based)
*/","* Constructs an iterator across a sequence of the given size with the given initial position.
   * That is, the first call to {@link #nextIndex()} will return {@code position}, and the first
   * call to {@link #next()} will return the element at that index, if available. Calls to {@link
   * #previous()} can retrieve the preceding {@code position} elements.
   *
   * @throws IndexOutOfBoundsException if {@code position} is negative or is greater than {@code
   *     size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,add,"com.google.common.collect.FilteredKeyMultimap$AddRejectingList:add(int,java.lang.Object)",153,157,"/**
* Adds an element at a specified position in the collection.
* @param index target insertion index
* @throws IllegalArgumentException if adding doesn't satisfy the predicate for key
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,addAll,"com.google.common.collect.FilteredKeyMultimap$AddRejectingList:addAll(int,java.util.Collection)",165,171,"/**
* Adds all elements from the given collection at the specified index.
* @param index insertion point
* @param elements Collection of elements to add
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,reversePosition,com.google.common.collect.Lists$ReverseList:reversePosition(int),880,884,"/**
* Calculates reversed position from given index.
* @param index original position
* @return reversed position (0-based)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataInput,"com.google.common.io.ByteStreams:newDataInput(byte[],int)",316,320,"/**
* Creates a new data input from the given byte array slice.
* @param bytes The byte array containing the data
* @param start The starting index of the slice within the byte array
*/","* Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array,
   * starting at the given position.
   *
   * @throws IndexOutOfBoundsException if {@code start} is negative or greater than the length of
   *     the array",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,isWellFormed,"com.google.common.base.Utf8:isWellFormed(byte[],int,int)",123,133,"/**
* Checks if the specified byte subarray is well-formed.
* @param bytes input byte array
* @param off starting offset
* @param len length of the subarray
* @return true if well-formed; false otherwise
*/","* Returns whether the given byte array slice is a well-formed UTF-8 byte sequence, as defined by
   * {@link #isWellFormed(byte[])}. Note that this can be false even when {@code
   * isWellFormed(bytes)} is true.
   *
   * @param bytes the input buffer
   * @param off the offset in the buffer of the first byte to read
   * @param len the number of bytes to read from the buffer",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,toArrayImpl,"com.google.common.collect.ObjectArrays:toArrayImpl(java.lang.Object[],int,int,java.lang.Object[])",155,166,"/**
* Converts a portion of an array to a new array of specified type.
* @param src source array
* @param offset starting index in src
* @param len number of elements to copy
* @param dst destination array (may be resized)
* @return the destination array with copied elements
*/","* Implementation of {@link Collection#toArray(Object[])} for collections backed by an object
   * array. the runtime type of the returned array is that of the specified array. If the collection
   * fits in the specified array, it is returned therein. Otherwise, a new array is allocated with
   * the runtime type of the specified array and the size of the specified collection.
   *
   * <p>If the collection fits in the specified array with room to spare (i.e., the array has more
   * elements than the collection), the element in the array immediately following the end of the
   * collection is set to {@code null}. This is useful in determining the length of the collection
   * <i>only</i> if the caller knows that the collection does not contain any null elements.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,copyAsObjectArray,"com.google.common.collect.ObjectArrays:copyAsObjectArray(java.lang.Object[],int,int)",188,196,"/**
* Copies a subset of elements from the given array into a new object array.
* @param elements original array to copy from
* @param offset starting index in the original array
* @param length number of elements to copy
* @return copied element array or null if invalid parameters
*/","* Returns a copy of the specified subrange of the specified array that is literally an Object[],
   * and not e.g. a {@code String[]}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,subList,"com.google.common.collect.SingletonImmutableList:subList(int,int)",65,69,"/**
* Returns a sublist of elements in the range [fromIndex, toIndex).
* @param fromIndex starting index of the sublist
* @param toIndex ending index of the sublist
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putBytes,"com.google.common.hash.AbstractByteHasher:putBytes(byte[],int,int)",90,96,"/**
* Updates the hasher with the specified byte array slice.
* @param bytes input data
* @param off starting offset in bytes
* @param len number of bytes to process
* @return this Hasher instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putBytes,"com.google.common.hash.AbstractHasher:putBytes(byte[],int,int)",69,77,"/**
* Adds byte array to hasher.
* @param bytes input byte array
* @param off offset into bytes to start adding from
* @param len length of bytes to add
* @return this Hasher instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,writeBytesTo,"com.google.common.hash.HashCode:writeBytesTo(byte[],int,int)",83,89,"/**
* Writes at most maxLength bytes from this stream to the given array.
* @param dest byte array to store written data
* @return number of bytes actually written (0-maxLength)
*/","* Copies bytes from this hash code into {@code dest}.
   *
   * @param dest the byte array into which the hash code will be written
   * @param offset the start offset in the data
   * @param maxLength the maximum number of bytes to write
   * @return the number of bytes written to {@code dest}
   * @throws IndexOutOfBoundsException if there is not enough room in {@code dest}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putBytes,"com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putBytes(byte[],int,int)",302,314,"/**
* Adds bytes to the hasher in chunks of 4 or individually.
* @param bytes input byte array
* @param off starting offset in the array
* @param len number of bytes to process
* @return this Hasher object for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeTo,"com.google.common.io.BaseEncoding$Base16Encoding:encodeTo(java.lang.Appendable,byte[],int,int)",967,976,"/**
* Encodes a byte array to the specified Appendable target.
* @param bytes input byte array
* @param off starting index in the byte array
* @param len number of bytes to encode
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeTo,"com.google.common.io.BaseEncoding$Base64Encoding:encodeTo(java.lang.Appendable,byte[],int,int)",1008,1023,"/**
* Encodes a byte array to the specified output stream.
* @param target output stream
* @param bytes encoded data
* @param off offset in bytes array
* @param len length of data to encode
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeChunkTo,"com.google.common.io.BaseEncoding$StandardBaseEncoding:encodeChunkTo(java.lang.Appendable,byte[],int,int)",692,715,"/**
* Encodes a chunk of bytes into the specified Appendable stream.
* @param target output stream
* @param bytes input byte array
* @param off starting offset in bytes array
* @param len length of chunk to encode
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encode,"com.google.common.io.BaseEncoding:encode(byte[],int,int)",154,163,"/**
* Encodes a byte array into a string, throwing an AssertionError if I/O error occurs.
* @param bytes input byte array
* @param off starting offset in the byte array
* @param len length of the data to encode
* @return encoded string representation or null on encoding failure
*/","* Encodes the specified range of the specified byte array, and returns the encoded {@code
   * String}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,read,"com.google.common.io.ByteStreams:read(java.io.InputStream,byte[],int,int)",935,954,"/**
* Reads up to specified bytes from InputStream into byte array.
* @param in InputStream source
* @param b byte array destination
* @param off starting offset in byte array
* @param len maximum number of bytes to read
* @return actual number of bytes read, or 0 on EOF
*/","* Reads some bytes from an input stream and stores them into the buffer array {@code b}. This
   * method blocks until {@code len} bytes of input data have been read into the array, or end of
   * file is detected. The number of bytes read is returned, possibly zero. Does not close the
   * stream.
   *
   * <p>A caller can detect EOF if the number of bytes read is less than {@code len}. All subsequent
   * calls on the same stream will return zero.
   *
   * <p>If {@code b} is null, a {@code NullPointerException} is thrown. If {@code off} is negative,
   * or {@code len} is negative, or {@code off+len} is greater than the length of the array {@code
   * b}, then an {@code IndexOutOfBoundsException} is thrown. If {@code len} is zero, then no bytes
   * are read. Otherwise, the first byte read is stored into element {@code b[off]}, the next one
   * into {@code b[off+1]}, and so on. The number of bytes read is, at most, equal to {@code len}.
   *
   * @param in the input stream to read from
   * @param b the buffer into which the data is read
   * @param off an int specifying the offset into the data
   * @param len an int specifying the number of bytes to read
   * @return the number of bytes read
   * @throws IOException if an I/O error occurs
   * @throws IndexOutOfBoundsException if {@code off} is negative, if {@code len} is negative, or if
   *     {@code off + len} is greater than {@code b.length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,read,"com.google.common.io.CharSequenceReader:read(char[],int,int)",99,112,"/**
* Reads characters from the underlying sequence into a buffer.
* @param cbuf character array to store data
* @param off starting index in buffer
* @param len maximum number of characters to read
* @return actual number of characters read or -1 if end-of-stream reached
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,"com.google.common.io.CharStreams$NullWriter:write(char[],int,int)",295,298,"/**
* Writes characters from char buffer to output stream.
* @param cbuf character array containing data
* @param off starting index of data in the buffer
* @param len number of characters to write
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,"com.google.common.io.CharStreams$NullWriter:write(java.lang.String,int,int)",305,308,"/**
* Writes a substring to the output stream.
* @param str string data
* @param off starting position offset
* @param len length of substring to write
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,append,"com.google.common.io.CharStreams$NullWriter:append(java.lang.CharSequence,int,int)",315,319,"/**
* Appends a substring from the specified range of characters to the writer.
* @param csq CharSequence to append
* @param start starting index (inclusive)
* @param end ending index (exclusive)
* @return the Writer instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,subList,"com.google.common.primitives.Booleans$BooleanArrayAsList:subList(int,int)",461,469,"/**
* Returns a sublist of boolean values within the specified range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List<Boolean> containing values at indices [fromIndex, toIndex) or empty list if range is invalid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,reverse,"com.google.common.primitives.Booleans:reverse(boolean[],int,int)",554,562,"/**
* Reverses a boolean subarray in-place.
* @param array the input boolean array
* @param fromIndex starting index of the subarray (inclusive)
* @param toIndex ending index of the subarray (exclusive) 
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Booleans.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,subList,"com.google.common.primitives.Bytes$ByteArrayAsList:subList(int,int)",327,335,"/**
* Returns a sublist of bytes from this byte array.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,reverse,"com.google.common.primitives.Bytes:reverse(byte[],int,int)",405,413,"/**
* Reverses a specified range of bytes in the provided array.
* @param array input byte array
* @param fromIndex starting index of the range to reverse (inclusive)
* @param toIndex ending index of the range to reverse (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Bytes.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,subList,"com.google.common.primitives.Chars$CharArrayAsList:subList(int,int)",648,656,"/**
* Returns a sublist of characters within the specified range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List<Character> sublist or empty list if range is invalid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,reverse,"com.google.common.primitives.Chars:reverse(char[],int,int)",495,503,"/**
* Reverses a substring within the given character array.
* @param array character array containing the substring
* @param fromIndex start index of the substring to reverse (inclusive)
* @param toIndex end index of the substring to reverse (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Chars.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,subList,"com.google.common.primitives.Doubles$DoubleArrayAsList:subList(int,int)",661,669,"/**
* Returns a sublist of this array within the specified range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List of doubles or empty list if range is invalid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,reverse,"com.google.common.primitives.Doubles:reverse(double[],int,int)",469,477,"/**
* Reverses a specified subarray within the given array.
* @param array input array
* @param fromIndex starting index of subarray to reverse (inclusive)
* @param toIndex ending index of subarray to reverse (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Doubles.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,subList,"com.google.common.primitives.Floats$FloatArrayAsList:subList(int,int)",649,657,"/**
* Returns a sublist of float values from the specified range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return list of float values or empty list if range is invalid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,reverse,"com.google.common.primitives.Floats:reverse(float[],int,int)",466,474,"/**
* Reverses a specified sub-array of floats in-place.
* @param array the input array
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Floats.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,subArray,"com.google.common.primitives.ImmutableDoubleArray:subArray(int,int)",454,459,"/**
* Extracts a sub-array of immutable doubles from the current array.
* @param startIndex starting index (inclusive)
* @param endIndex ending index (exclusive)
*/","* Returns a new immutable array containing the values in the specified range.
   *
   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one
   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,
   * end).trimmed()}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,subArray,"com.google.common.primitives.ImmutableIntArray:subArray(int,int)",449,454,"/**
* Returns a sub-array from this immutable array within the specified range.
* @param startIndex starting index (inclusive)
* @param endIndex ending index (exclusive)
*/","* Returns a new immutable array containing the values in the specified range.
   *
   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one
   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,
   * end).trimmed()}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,subArray,"com.google.common.primitives.ImmutableLongArray:subArray(int,int)",451,456,"/**
* Returns a sub-array of this long array from the specified start index to end index (inclusive).
* @param startIndex starting index of sub-array (inclusive)
* @param endIndex ending index of sub-array (inclusive)
*/","* Returns a new immutable array containing the values in the specified range.
   *
   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one
   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,
   * end).trimmed()}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,subList,"com.google.common.primitives.Ints$IntArrayAsList:subList(int,int)",742,750,"/**
* Returns a sublist of integers within the specified range.
* @param fromIndex inclusive start index
* @param toIndex exclusive end index
* @return List of integers or empty list if indices are equal
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,reverse,"com.google.common.primitives.Ints:reverse(int[],int,int)",528,536,"/**
* Reverses a portion of the given array.
* @param array the array to modify
* @param fromIndex starting index (inclusive) of the portion to reverse
* @param toIndex ending index (exclusive) of the portion to reverse
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Ints.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,subList,"com.google.common.primitives.Longs$LongArrayAsList:subList(int,int)",794,802,"/**
* Returns a sublist of unique IDs within the specified range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List of IDs or empty list if range is invalid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,reverse,"com.google.common.primitives.Longs:reverse(long[],int,int)",606,614,"/**
* Reverses a portion of the given array.
* @param array input array
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Longs.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,subList,"com.google.common.primitives.Shorts$ShortArrayAsList:subList(int,int)",698,706,"/**
* Returns a sublist of Shorts within the specified range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List<Short> subset or empty list if range is invalid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,reverse,"com.google.common.primitives.Shorts:reverse(short[],int,int)",518,526,"/**
* Reverses the specified range of an array in-place.
* @param array the array to reverse
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive) 
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Shorts.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sort,"com.google.common.primitives.UnsignedBytes:sort(byte[],int,int)",527,537,"/**
* Reverses and sorts a portion of the byte array in-place.
* @param array the byte array to modify
* @param fromIndex starting index (inclusive) for sorting range
* @param toIndex ending index (exclusive) for sorting range
*/","* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its
   * elements as unsigned bytes.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sortDescending,"com.google.common.primitives.UnsignedBytes:sortDescending(byte[],int,int)",556,566,"/**
* Sorts the specified byte subarray in descending order.
* @param array the byte array to sort
* @param fromIndex the starting index of the subarray (inclusive)
* @param toIndex the ending index of the subarray (exclusive) 
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order, interpreting them as unsigned 8-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sort,"com.google.common.primitives.UnsignedInts:sort(int[],int,int)",235,245,"/**
* Reverses and sorts a subarray of integers in-place.
* @param array the array to modify
* @param fromIndex start index of the subarray (inclusive)
* @param toIndex end index of the subarray (exclusive)
*/","* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its
   * elements as unsigned 32-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sortDescending,"com.google.common.primitives.UnsignedInts:sortDescending(int[],int,int)",264,274,"/**
* Sorts a subarray in descending order.
* @param array the input array
* @param fromIndex start index of the subarray
* @param toIndex end index of the subarray
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order, interpreting them as unsigned 32-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sort,"com.google.common.primitives.UnsignedLongs:sort(long[],int,int)",199,209,"/**
* Sorts a subset of the long array in ascending order.
* @param array input array
* @param fromIndex starting index of the subset
* @param toIndex ending index of the subset
*/","* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its
   * elements as unsigned 64-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sortDescending,"com.google.common.primitives.UnsignedLongs:sortDescending(long[],int,int)",228,238,"/**
* Sorts the specified range of an array in descending order.
* @param array input array
* @param fromIndex start index of the sort range (inclusive)
* @param toIndex end index of the sort range (exclusive) 
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order, interpreting them as unsigned 64-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Column$Values:remove(java.lang.Object),648,651,"/**
* Removes an object from the data structure if it matches.
* @param obj object to be removed (null for no-op)
* @return true if removal was successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,filterUpperBounds,com.google.common.reflect.Types:filterUpperBounds(java.lang.Iterable),521,523,"/**
* Filters out upper bound types that are Object.
* @param bounds iterable of Type objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,filter,"com.google.common.collect.Collections2:filter(java.util.Collection,com.google.common.base.Predicate)",85,94,"/**
* Filters elements from the specified collection based on the provided predicate.
* @param unfiltered input collection to filter
* @param predicate condition to apply for filtering
* @return filtered Collection or an existing FilteredCollection if applicable
*/","* Returns the elements of {@code unfiltered} that satisfy a predicate. The returned collection is
   * a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting collection's iterator does not support {@code remove()}, but all other
   * collection methods are supported. When given an element that doesn't satisfy the predicate, the
   * collection's {@code add()} and {@code addAll()} methods throw an {@link
   * IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are
   * called on the filtered collection, only elements that satisfy the filter will be removed from
   * the underlying collection.
   *
   * <p>The returned collection isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered collection's methods, such as {@code size()}, iterate across every
   * element in the underlying collection and determine which elements satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered,
   * predicate)} and use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#filter Stream.filter}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createKeys,com.google.common.collect.FilteredKeyMultimap:createKeys(),222,225,"/**
* Creates a multiset of keys from unfiltered keys based on key predicate.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(char),126,128,"/**
* Returns a Splitter that splits by a single specified character. 
* @param separator character to split by
*/","* Returns a splitter that uses the given single-character separator. For example, {@code
   * Splitter.on(',').split(""foo,,bar"")} returns an iterable containing {@code [""foo"", """", ""bar""]}.
   *
   * @param separator the character to recognize as a separator
   * @return a splitter, with default settings, that recognizes that separator",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LoadingValueReference:<init>(com.google.common.cache.LocalCache$ValueReference),3500,3502,"/**
* Initializes loading value reference with potentially cached old value.
* @param oldValue nullable current cache entry or unset for no value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,<init>,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:<init>(),463,463,"/**
* Initializes a sleeping stopwatch with default values. 
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,<init>,"com.google.common.base.internal.Finalizer:<init>(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference)",126,136,"/**
* Initializes a Finalizer instance with given classes and reference queue.
* @param finalizableReferenceClass class being finalized
* @param queue reference queue for garbage collection
* @param frqReference phantom reference that triggered finalization
*/",Constructs a new finalizer thread.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,<init>,com.google.common.collect.ImmutableListMultimap$Builder:<init>(),234,234,"/**
* Initializes a new instance of the Builder class.","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableListMultimap#builder}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,builder,com.google.common.collect.ImmutableMultimap:builder(),129,131,"/**
* Creates a new instance of the Builder.
* @return A new Builder object
*/","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,<init>,com.google.common.collect.ImmutableSetMultimap$Builder:<init>(),262,262,"/**
* Initializes a new instance of the Builder class.","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableSetMultimap#builder}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,<init>,com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache:<init>(com.google.common.cache.LoadingCache),82,84,"/**
* Wraps a LoadingCache instance to provide additional functionality.
* @param delegate the underlying cache to be wrapped
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$ManualSerializationProxy:<init>(com.google.common.cache.LocalCache),4690,4704,"/**
* Creates a ManualSerializationProxy instance from the given LocalCache.
* @param cache LocalCache to proxy
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,<init>,com.google.common.collect.FilteredKeyMultimap$AddRejectingList:<init>(java.lang.Object),143,145,"/**
* Sets the rejecting list key.
* @param key unique key identifier
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,<init>,com.google.common.collect.ForwardingSortedMultiset:<init>(),49,49,"/**
* Constructs an empty sorted multiset with forwarding behavior.",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,<init>,com.google.common.collect.Multisets$UnmodifiableMultiset:<init>(com.google.common.collect.Multiset),134,136,"/**
* Wraps an existing Multiset into an unmodifiable version.
* @param delegate original Multiset instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,<init>,com.google.common.collect.EvictingQueue:<init>(int),54,58,"/**
* Initializes an EvictingQueue with a maximum size.
* @param maxSize the maximum number of elements in the queue
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,<init>,com.google.common.collect.ForwardingDeque:<init>(),49,49,"/**
* Initializes an empty forwarding deque. 
* No additional parameters are required. 
* This constructor is typically used when creating an instance of this class.
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,<init>,com.google.common.util.concurrent.ForwardingBlockingQueue:<init>(),46,46,"/**
* Constructs an empty forwarding blocking queue. 
* @see java.util.concurrent.BlockingQueue#blockingQueue() 
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,<init>,com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:<init>(java.lang.Object),118,120,"/**
* Sets the rejecting set key.
* @param key unique identifier of the rejecting set
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,<init>,com.google.common.collect.ForwardingSortedSet:<init>(),65,65,"/**
 * Creates an empty forwarding sorted set. 
 */",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$UnmodifiableEntrySet:<init>(java.util.Set),1572,1574,"/**
* Creates an unmodifiable view of the specified set of entries.
* @param entries the entry set to wrap
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:<init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)",2822,2835,"/**
* Initializes an AbstractSerializationProxy with specified serialization settings.
* @param keyStrength strength of key serialization
* @param valueStrength strength of value serialization
* @param keyEquivalence equivalence function for keys
* @param valueEquivalence equivalence function for values
* @param concurrencyLevel level of concurrency in the delegate map
* @param delegate underlying concurrent map instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,<init>,com.google.common.collect.ForwardingNavigableMap:<init>(),61,61,"/**
 * Initializes an empty forwarding navigable map. 
 * @see ForwardingNavigableMap
 */",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$UnmodifiableNavigableMap:<init>(java.util.NavigableMap),3455,3457,"/**
* Wraps a NavigableMap instance with an unmodifiable view.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$UnmodifiableNavigableMap:<init>(java.util.NavigableMap,com.google.common.collect.Maps$UnmodifiableNavigableMap)",3459,3463,"/**
* Creates an unmodifiable view of the specified navigable map and its descending map.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,inverse,com.google.common.collect.Maps$UnmodifiableBiMap:inverse(),1779,1785,"/**
* Returns the inverse of this bi-directional map.
* @return Inverse map or newly created one if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableBiMap,com.google.common.collect.Maps:unmodifiableBiMap(com.google.common.collect.BiMap),1695,1698,"/**
* Returns an unmodifiable view of the given Bimap.
* @param bimap the original Bimap instance
*/","* Returns an unmodifiable view of the specified bimap. This method allows modules to provide
   * users with ""read-only"" access to internal bimaps. Query operations on the returned bimap ""read
   * through"" to the specified bimap, and attempts to modify the returned map, whether direct or via
   * its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned bimap will be serializable if the specified bimap is serializable.
   *
   * @param bimap the bimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified bimap",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,create,com.google.common.collect.MutableClassToInstanceMap:create(),59,61,"/**
* Creates an empty MutableClassToInstanceMap.
*/","* Returns a new {@code MutableClassToInstanceMap} instance backed by a {@link HashMap} using the
   * default initial capacity and load factor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,create,com.google.common.collect.MutableClassToInstanceMap:create(java.util.Map),68,71,"/**
* Creates a MutableClassToInstanceMap from a given backing map.
* @param backingMap A map of class to instance, used as the underlying data structure
*/","* Returns a new {@code MutableClassToInstanceMap} instance backed by a given empty {@code
   * backingMap}. The caller surrenders control of the backing map, and thus should not allow any
   * direct references to it to remain accessible.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,of,com.google.common.reflect.ImmutableTypeToInstanceMap:of(),35,37,"/**
* Creates an empty ImmutableTypeToInstanceMap.
*/",Returns an empty type to instance map.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,transformEntries,com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:transformEntries(java.util.Iterator),156,159,"/**
* Transforms an iterator of map entries into an unmodifiable iterator.
* @param entries input iterator of Entry objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,<init>,com.google.common.collect.ForwardingSortedSetMultimap:<init>(),42,42,"/**
* Initializes an empty multimap that forwards to a sorted set. 
* @throws IllegalStateException if this constructor is invoked on a non-static context.",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableListMultimap:<init>(com.google.common.collect.ListMultimap),795,797,"/**
* Creates an unmodifiable multimap view of the given delegate.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:<init>(com.google.common.collect.SetMultimap),825,827,"/**
* Creates an unmodifiable multimap view of the given delegate.
* @param delegate the underlying multimap to be wrapped
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableMultimap,com.google.common.collect.Multimaps:unmodifiableMultimap(com.google.common.collect.Multimap),656,662,"/**
* Returns an unmodifiable view of the given multimap.
* @param delegate original multimap, validated as modifiable
*/","* Returns an unmodifiable view of the specified multimap. Query operations on the returned
   * multimap ""read through"" to the specified multimap, and attempts to modify the returned
   * multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,com.google.common.collect.Tables$UnmodifiableRowSortedMap:<init>(com.google.common.collect.RowSortedTable),647,649,"/**
* Creates an unmodifiable row-sorted map from a row-sorted table.
* @param delegate underlying row-sorted table
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,unmodifiableTable,com.google.common.collect.Tables:unmodifiableTable(com.google.common.collect.Table),534,537,"/**
* Returns an unmodifiable view of the specified table.
* @param table original table to wrap
*/","* Returns an unmodifiable view of the specified table. This method allows modules to provide
   * users with ""read-only"" access to internal tables. Query operations on the returned table ""read
   * through"" to the specified table, and attempts to modify the returned table, whether direct or
   * via its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned table will be serializable if the specified table is serializable.
   *
   * <p>Consider using an {@link ImmutableTable}, which is guaranteed never to change.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,<init>,com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture:<init>(com.google.common.util.concurrent.ListenableFuture),58,60,"/**
* Wraps a ListenableFuture in a SimpleForwardingListenableFuture.
* @param delegate the underlying future to forward
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,<init>,com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:<init>(java.util.concurrent.Future),124,126,"/**
 * Adapts an existing Future to be listenable. 
 * @param delegate the underlying future to adapt
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,listenInPoolThread,"com.google.common.util.concurrent.JdkFutureAdapters:listenInPoolThread(java.util.concurrent.Future,java.util.concurrent.Executor)",84,91,"/**
* Adapts a non-listenable future to be executed in the specified thread pool.
* @param future non-listenable future
* @param executor target executor
* @return listenable future that will execute in the executor's thread pool
*/","* Submits a blocking task for the given {@link Future} to provide {@link ListenableFuture}
   * functionality.
   *
   * <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the
   * returned future will emulate {@link ListenableFuture#addListener} by submitting a task to the
   * given executor at the first call to {@code addListener}. The task must be started by the
   * executor promptly, or else the returned {@code ListenableFuture} may fail to work. The task's
   * execution consists of blocking until the input future is {@linkplain Future#isDone() done}, so
   * each call to this method may claim and hold a thread for an arbitrary length of time. Use of
   * bounded executors or other executors that may fail to execute a task promptly may result in
   * deadlocks.
   *
   * <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link
   * MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link
   * ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code
   * Future} instances to be upgraded to {@code ListenableFuture} after the fact.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,getIfPresent,com.google.common.cache.ForwardingCache:getIfPresent(java.lang.Object),47,50,"/**
* Retrieves value associated with given key if present.
* @param key object to look up in backing map
* @return nullable value or null if not found
*/",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,get,"com.google.common.cache.ForwardingCache:get(java.lang.Object,java.util.concurrent.Callable)",55,58,"/**
* Retrieves cached value or loads it using provided callable if not found.
* @param key unique cache key
* @param valueLoader callback to load value if not present in cache
* @return cached or loaded value of type V or throws ExecutionException
*/",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,getAllPresent,com.google.common.cache.ForwardingCache:getAllPresent(java.lang.Iterable),63,70,"/**
* Retrieves all present values from the backing map using the provided iterable of keys.
* @param keys collection of keys to fetch values for
* @return ImmutableMap containing fetched key-value pairs or empty if none found
*/",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,put,"com.google.common.cache.ForwardingCache:put(java.lang.Object,java.lang.Object)",75,78,"/**
 * Delegates putting of key-value pair to underlying map implementation.
 * @param key unique identifier (key)
 * @param value associated data (value)
 */",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,putAll,com.google.common.cache.ForwardingCache:putAll(java.util.Map),83,86,"/**
* Copies all entries from given map to this map.
* @param m the map containing key-value pairs to copy
*/",* @since 12.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,invalidate,com.google.common.cache.ForwardingCache:invalidate(java.lang.Object),88,91,"/**
* Invalidates cache entry by key.
* @param key unique identifier of cache entry to invalidate
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,invalidateAll,com.google.common.cache.ForwardingCache:invalidateAll(java.lang.Iterable),96,100,"/**
* Invalidates all cache entries associated with given object IDs.
* @param keys iterable of unique object identifiers
*/",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,invalidateAll,com.google.common.cache.ForwardingCache:invalidateAll(),102,105,"/**
* Invalidates all cached data by delegating to underlying cache.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,size,com.google.common.cache.ForwardingCache:size(),107,110,"/**
* Returns the total size of the collection.
* @return total size in units (e.g., bytes)",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,stats,com.google.common.cache.ForwardingCache:stats(),112,115,"/**
* Returns cache statistics from the underlying delegate.
* @return CacheStats object containing cache metrics
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,asMap,com.google.common.cache.ForwardingCache:asMap(),117,120,"/**
* Converts this concurrent map to a standard ConcurrentMap view. 
* @return a new ConcurrentMap instance wrapping the underlying data.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,cleanUp,com.google.common.cache.ForwardingCache:cleanUp(),122,125,"/**
 * Invokes cleanup operation on underlying delegate.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,readResolve,com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm:readResolve(),431,433,"/**
* Returns a collection of Multiset entries.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,iterator,com.google.common.collect.ImmutableMultiset:iterator(),228,255,"/**
* Returns unmodifiable iterator over elements in this map.
* @return UnmodifiableIterator object or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyIntoArray,"com.google.common.collect.ImmutableMultiset:copyIntoArray(java.lang.Object[],int)",326,334,"/**
* Copies multiset elements into a given array.
* @param dst the destination array
* @return new offset in the array after copying
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,hashCode,com.google.common.collect.ImmutableMultiset:hashCode(),341,344,"/**
* Calculates and returns a hash code based on the entry set.
* @return unique hash code value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,toString,com.google.common.collect.ImmutableMultiset:toString(),346,349,"/**
* Returns a string representation of this map.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$AbstractFilteredMap:remove(java.lang.Object),2893,2896,"/**
* Removes an entry from the collection by its key.
* @param key unique identifier of the entry to be removed
* @return value associated with the removed entry, or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$2:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new reference entry with the given key and hash.
* @param segment the segment to which this entry belongs
* @param key the key of the entry
* @param hash the hash value of the key
* @param next the next entry in the chain, or null if none
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$4:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new reference entry with the given key and hash.
* @param segment the segment to associate this entry with
* @param key the unique key for this entry
* @param hash the hash code for the key
* @param next the previous entry in the linked list, or null if none
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$3:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new reference entry with the given key and hash.
* @param segment associated segment
* @param key unique identifier for the entry
* @param hash hash value of the key
* @param next reference to the next entry in the chain (null if first)
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$6:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new reference entry with specified key and hash.
* @param segment the associated segment
* @param key unique key for this entry
* @param hash key's hash value
* @param next null or the previous entry in the list
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$8:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new entry in the specified segment.
* @param segment the segment to add the entry to
* @param key the unique key for this entry
* @param hash the hash code of the key
* @param next the next entry in the linked list (or null)
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$7:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new reference entry with the specified key and hash.
* @param segment the associated segment
* @param key the unique identifier for this entry
* @param hash the hash code of the key
* @param next the next entry in the chain (may be null)
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,<init>,"com.google.common.util.concurrent.Futures$CallbackListener:<init>(java.util.concurrent.Future,com.google.common.util.concurrent.FutureCallback)",1106,1109,"/**
* Constructs a CallbackListener instance with a given future and callback.
* @param future asynchronous result to be processed
* @param callback listener for the future's completion or failure",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,poll,com.google.common.cache.LocalCache$AccessQueue:poll(),3848,3857,"/**
* Removes and returns the least-recently accessed entry from the queue.
* @return the removed entry or null if all entries have been accessed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,poll,com.google.common.cache.LocalCache$WriteQueue:poll(),3708,3717,"/**
* Removes and returns the next entry in write queue, or null if queue is empty. 
* @return ReferenceEntry object or null if queue is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,createSegment,"com.google.common.cache.LocalCache:createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter)",1762,1765,"/**
* Creates a new segment with specified capacity and weight limits.
* @param initialCapacity the initial size of the segment
* @param maxSegmentWeight maximum weight allowed for this segment
* @param statsCounter statistics counter to track segment usage
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,waitForLoadingValue,"com.google.common.cache.LocalCache$Segment:waitForLoadingValue(com.google.common.cache.ReferenceEntry,java.lang.Object,com.google.common.cache.LocalCache$ValueReference)",2189,2209,"/**
* Waits for a cached value to load and returns it.
* @param e Reference entry containing the key-value pair
* @param key unique identifier of the cached value
* @return loaded cache value or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,setValue,"com.google.common.cache.LocalCache$Segment:setValue(com.google.common.cache.ReferenceEntry,java.lang.Object,java.lang.Object,long)",2030,2041,"/**
* Updates the value for a given key in the map.
* @param entry reference to the map entry
* @param key unique identifier of the key being updated
* @param value new value associated with the key
* @param now timestamp of the update operation
*/",Sets a new value of an entry. Adds newly created entries at the end of the access queue.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,size,com.google.common.collect.FluentIterable:size(),346,348,"/**
* Returns the size of the collection.
* @return Number of elements in the collection
*/","* Returns the number of elements in this fluent iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$OnePlusArrayList:get(int),353,359,"/**
* Retrieves an element at a specified index.
* @param index zero-based index of desired element
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$TwoPlusArrayList:get(int),384,397,"/**
* Retrieves an element at a specified index.
* @param index position of the element to retrieve (0 or 1)
* @return E element object or throws IndexOutOfBoundsException if invalid",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edgeCount,com.google.common.graph.AbstractBaseGraph:edgeCount(),52,60,"/**
* Calculates the total edge count by summing node degrees and dividing by 2.
* @return Total edge count
*/","* Returns the number of edges in this graph; used to calculate the size of {@link Graph#edges()}.
   * This implementation requires O(|N|) time. Classes extending this one may manually keep track of
   * the number of edges as the graph is updated, and override this method for better performance.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractBaseGraph:inDegree(java.lang.Object),147,150,"/**
* Calculates the in-degree of a graph node.
* @param node graph node to calculate in-degree for
* @return number of incoming edges (or predecessors if directed)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractBaseGraph:outDegree(java.lang.Object),152,155,"/**
* Calculates the out-degree of a given node.
* @param node Graph node to calculate out-degree for
* @return Out-degree value (0 or more)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractGraph:degree(java.lang.Object),136,145,"/**
* Calculates the degree of a node in the graph.
* @param node Node to calculate degree for
* @return Total number of edges incident on the node (including self-loops if allowed)",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractValueGraph:degree(java.lang.Object),136,145,"/**
* Calculates the degree of a node in the graph.
* @param node Node object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,toByteArray,com.google.common.io.ByteStreams:toByteArray(java.io.InputStream),240,243,"/**
* Converts InputStream to byte array.
* @param in input stream to convert
*/","* Reads all bytes from an input stream into a byte array. Does not close the stream.
   *
   * <p><b>Java 9+ users:</b> use {@code in#readAllBytes()} instead.
   *
   * @param in the input stream to read from
   * @return a byte array containing all the bytes from the stream
   * @throws IOException if an I/O error occurs",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,toByteArray,"com.google.common.io.ByteStreams:toByteArray(java.io.InputStream,long)",250,281,"/**
* Converts InputStream to a byte array of the specified expected size.
* @param in InputStream to read from
* @param expectedSize expected number of bytes
* @return byte array or null if not enough data available
*/","* Reads all bytes from an input stream into a byte array. The given expected size is used to
   * create an initial byte array, but if the actual number of bytes read from the stream differs,
   * the correct result will be returned anyway.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,<init>,"com.google.common.collect.AbstractBiMap:<init>(java.util.Map,java.util.Map)",64,66,"/**
* Initializes an abstract bi-directional map with provided forward and backward mappings.
*/",Package-private constructor for creating a map-backed bimap.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,<init>,com.google.common.collect.TreeMultiset:<init>(java.util.Comparator),128,134,"/**
* Initializes the multiset tree with a custom comparator.
* @param comparator comparison function for sorting elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,readObject,com.google.common.collect.TreeMultiset:readObject(java.io.ObjectInputStream),1076,1092,"/**
* Deserializes a TreeMultiset object from an ObjectInputStream.
* @throws IOException if deserialization fails
* @throws ClassNotFoundException if class not found during deserialization
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,headMultiset,"com.google.common.collect.TreeMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",547,553,"/**
* Creates a SortedMultiset with elements up to the specified upper bound.
* @param upperBound the upper bound (inclusive) of the new multiset
* @param boundType specifies whether the bound is inclusive or exclusive
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,tailMultiset,"com.google.common.collect.TreeMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",555,561,"/**
* Creates a SortedMultiset containing elements greater than the specified lower bound.
* @param lowerBound element to serve as upper bound for tail multiset
* @param boundType type of bound (e.g. inclusive, exclusive)",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,put,"com.google.common.collect.AbstractBiMap:put(java.lang.Object,java.lang.Object)",124,128,"/**
* Puts a value into both maps with the given key.
* @param key unique identifier for the map entry
* @param value value to be associated with the key
* @return previous value in case of overwrite or null if not overwritten
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,forcePut,"com.google.common.collect.AbstractBiMap:forcePut(java.lang.Object,java.lang.Object)",130,134,"/**
* Forces a new entry into both maps with the given key and value.
* @param key unique map key
* @param value associated map value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,remove,com.google.common.collect.EnumBiMap:remove(java.lang.Object),166,170,"/**
* Removes an entry from both maps if present.
* @param key object to be removed (may be null)
* @return value associated with the key, or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,remove,com.google.common.collect.EnumHashBiMap:remove(java.lang.Object),166,170,"/**
* Removes an entry from the data structure by its key, returning associated value or null if not present.
* @param key the object to be removed (may be null)
* @return V associated value of the removed entry, or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$PermutationCollection:iterator(),610,613,"/**
* Returns an iterator over permutations of input list elements.
* @return Iterator over List[E] permutations or null if not possible.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollLastEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollLastEntry(),1612,1615,"/**
* Retrieves and removes the last entry from the map.
* @return Last Entry object or null if empty.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingKeySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:descendingKeySet(),1649,1652,"/**
* Returns a navigable set of keys in descending order.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:subMap(java.lang.Object,java.lang.Object)",1654,1658,"/**
* Returns a navigable map subset for the given key range.
* @param fromKey starting key (inclusive)
* @param toKey ending key (exclusive)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:headMap(java.lang.Object),1669,1672,"/**
* Returns a navigable map of key-value pairs up to but not including the specified key.
* @param toKey the upper bound key (inclusive)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:tailMap(java.lang.Object),1679,1682,"/**
* Returns a navigable map containing elements with keys greater than or equal to 'fromKey'.
* @param fromKey key value to start the map from
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,keySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:keySet(),1634,1637,"/**
* Returns a navigable set view of keys in this map.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,removeAll,com.google.common.collect.AbstractListMultimap:removeAll(java.lang.Object),92,96,"/**
* Removes all occurrences of specified object from list.
* @param key object to remove (may be null)
*/","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,replaceValues,"com.google.common.collect.AbstractMapBasedMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",225,247,"/**
* Replaces values for a given key with new ones.
* @param key unique identifier
* @param values new values to replace existing ones
*/","* {@inheritDoc}
   *
   * <p>The returned collection is immutable.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,removeAll,com.google.common.collect.AbstractSetMultimap:removeAll(java.lang.Object),100,104,"/**
* Removes all elements equal to the specified key from this set.
* @param key the element to be removed, or null for no operation
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingIterator,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:descendingIterator(),1105,1108,"/**
* Returns an iterator over this set's elements in reverse order.
* @return Iterator over the set's elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:headSet(java.lang.Object),1110,1113,"/**
* Returns a view of the portion of this set from the beginning up to 
* but not including the specified element.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:subSet(java.lang.Object,java.lang.Object)",1120,1124,"/**
* Returns a subset of keys in the range [fromElement, toElement].
* @param fromElement lower bound (inclusive)
* @param toElement upper bound (exclusive)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:tailSet(java.lang.Object),1136,1139,"/**
* Returns a navigable set view of elements in this collection greater than or equal to fromElement.
* @param fromElement the lower bound (inclusive) for the set
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,hasNext,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:hasNext(),471,475,"/**
* Checks if there is another item in the iteration sequence.
* @return true if next item exists, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,next,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:next(),477,482,"/**
* Retrieves the next element from this iterator.
* @return The next element in the iteration sequence, or null if exhausted.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,getDelegateIterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:getDelegateIterator(),491,494,"/**
* Returns an iterator over the delegate collection.
* @return Iterator instance or null if not valid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,addAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:addAll(java.util.Collection),517,532,"/**
* Adds all elements from a collection to this set and updates the size accordingly.
* @param collection collection of elements to add
* @return true if the set was modified, false if the collection was empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,clear,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:clear(),546,555,"/**
* Clears the collection, updating its size and removing any backing storage.
* @param none
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:removeAll(java.util.Collection),568,581,"/**
* Removes all elements from this collection, as specified by the given collection.
* @param c the collection to remove
* @return true if the collection was modified, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,retainAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:retainAll(java.util.Collection),583,594,"/**
* Removes elements from this set that are not contained in the specified collection.
* @param c the collection of elements to retain
* @return true if the set was modified, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollLast,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:pollLast(),727,730,"/**
* Retrieves and removes the last element from this collection.
* @return null if empty or last element in collection, otherwise non-null value of type V.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,get,com.google.common.collect.AbstractSortedSetMultimap:get(java.lang.Object),90,93,"/**
* Returns the set of values associated with the given key.
* @param key unique identifier or null for default value
*/","* Returns a collection view of all values associated with a key. If no mappings in the multimap
   * have the provided key, an empty collection is returned.
   *
   * <p>Changes to the returned collection will update the underlying multimap, and vice versa.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,spliterator,com.google.common.collect.AbstractMultimap$Values:spliterator(),197,200,"/**
* Returns a Spliterator instance to iterate over values in this collection.
* @return Spliterator instance or null if not supported
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,setCount,"com.google.common.collect.HashMultiset:setCount(java.lang.Object,int)",314,335,"/**
* Updates the element's count and returns the previous count.
* @param element element to update
* @param count new count value
* @return previous count value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,setCount,"com.google.common.collect.LinkedHashMultiset:setCount(java.lang.Object,int)",314,335,"/**
* Updates the count for a given element.
* @param element object to update count for
* @param count new count value
* @return previous count value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardToString,com.google.common.collect.ForwardingCollection:standardToString(),232,234,"/**
* Converts this object to a string representation.
*/","* A sensible definition of {@link #toString} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #toString} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardToString,com.google.common.collect.ForwardingMap:standardToString(),297,299,"/**
* Converts this object to a string representation.
* @return A string in the format defined by Map.toStringImpl()
*/","* A sensible definition of {@link #toString} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #toString} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,toString,com.google.common.collect.ImmutableMap:toString(),1221,1224,"/**
 * Returns a string representation of this object.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,snapshot,com.google.common.collect.ConcurrentHashMultiset$EntrySet:snapshot(),586,591,"/**
* Creates a snapshot of the multiset entries.
* @return List of Multiset.Entry objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,<init>,com.google.common.collect.HashMultiset:<init>(int),72,74,"/**
* Initializes a new HashMultiset with the specified number of distinct elements.
* @param distinctElements expected count of unique elements in the multiset
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newHashMapWithExpectedSize,com.google.common.collect.Platform:newHashMapWithExpectedSize(int),37,40,"/**
* Creates a HashMap with an expected size.
* @param expectedSize anticipated number of key-value pairs
*/",Returns the platform preferred implementation of a map based on a hash table.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasCycle,com.google.common.graph.Graphs:hasCycle(com.google.common.graph.Graph),62,79,"/**
* Checks if a directed or undirected graph contains a cycle.
* @param graph the input graph
*/","* Returns true if {@code graph} has at least one cycle. A cycle is defined as a non-empty subset
   * of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting
   * and ending with the same node.
   *
   * <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,get,com.google.common.collect.HashBasedTable$Factory:get(),60,63,"/**
 * Returns a new map with expected size, containing all entries.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,create,"com.google.common.collect.HashBasedTable:create(int,int)",81,86,"/**
* Creates a hash-based table with expected rows and cells per row.
* @param expectedRows total number of rows
* @param expectedCellsPerRow number of cells in each row
* @return initialized HashBasedTable instance
*/","* Creates an empty {@code HashBasedTable} with the specified map sizes.
   *
   * @param expectedRows the expected number of distinct row keys
   * @param expectedCellsPerRow the expected number of column key / value mappings in each row
   * @throws IllegalArgumentException if {@code expectedRows} or {@code expectedCellsPerRow} is
   *     negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,<init>,com.google.common.collect.LinkedHashMultiset:<init>(int),80,82,"/**
* Initializes a LinkedHashMultiset with an expected number of unique elements.
* @param distinctElements expected count of unique elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newLinkedHashMapWithExpectedSize,com.google.common.collect.Platform:newLinkedHashMapWithExpectedSize(int),46,49,"/**
* Creates a linked map with an expected size.
* @param expectedSize the anticipated number of entries
*/","* Returns the platform preferred implementation of an insertion ordered map based on a hash
   * table.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,createMap,com.google.common.graph.ElementOrder:createMap(int),189,200,"/**
* Creates a Map with the specified expected size, using an appropriate implementation based on the type. 
* @param expectedSize the anticipated number of key-value pairs
*/",Returns an empty mutable map whose keys will respect this {@link ElementOrder}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$SetBuilderImpl),943,953,"/**
* Initializes a JdkBackedSetBuilderImpl instance from another SetBuilderImpl.
* @param toCopy SetBuilderImpl to copy settings and elements from
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,retainAll,com.google.common.collect.Maps$EntrySet:retainAll(java.util.Collection),4250,4269,"/**
* Retains all entries in the specified collection that are also present in this map.
* @param c Collection of entries to retain
* @return true if any entries were retained, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newHashSetWithExpectedSize,com.google.common.collect.Platform:newHashSetWithExpectedSize(int),52,54,"/**
* Creates an empty HashSet with an initial capacity based on the expected size.
* @param expectedSize approximate number of elements to store
*/",Returns the platform preferred implementation of a set based on a hash table.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,<init>,com.google.common.graph.EndpointPairIterator$Undirected:<init>(com.google.common.graph.BaseGraph),118,121,"/**
* Initializes an instance of Undirected with a BaseGraph.
* @param graph the underlying graph structure
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newLinkedHashSetWithExpectedSize,com.google.common.collect.Platform:newLinkedHashSetWithExpectedSize(int),65,67,"/**
* Creates a linked hash set with the specified expected size.
* @param expectedSize initial capacity and load factor for performance
*/","* Returns the platform preferred implementation of an insertion ordered set based on a hash
   * table.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,<init>,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:<init>(com.google.common.collect.ImmutableCollection),530,533,"/**
* Initializes service manager state with a collection of services.
* @param services collection of services to initialize with
*/","* It is implicitly assumed that all the services are NEW and that they will all remain NEW
     * until all the Listeners are installed and {@link #markReady()} is called. It is our caller's
     * responsibility to only call {@link #markReady()} if all services were new at the time this
     * method was called and when all the listeners were installed.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollFirstEntry,com.google.common.collect.AbstractSortedMultiset:pollFirstEntry(),78,88,"/**
* Retrieves and removes the first entry from the multiset.
* @return The first entry or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollLastEntry,com.google.common.collect.AbstractSortedMultiset:pollLastEntry(),90,100,"/**
* Retrieves and removes the last entry in the multiset.
* @return the last Entry object or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardFirstEntry,com.google.common.collect.ForwardingSortedMultiset:standardFirstEntry(),122,129,"/**
* Returns the first (lowest) entry in this multiset.
* @return the first entry or null if empty
*/","* A sensible definition of {@link #firstEntry()} in terms of {@code entrySet().iterator()}.
   *
   * <p>If you override {@link #entrySet()}, you may wish to override {@link #firstEntry()} to
   * forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardLastEntry,com.google.common.collect.ForwardingSortedMultiset:standardLastEntry(),143,150,"/**
* Returns the last multiset entry, or null if the set is empty.
* @return Entry object with the last element and its count, or null
*/","* A sensible definition of {@link #lastEntry()} in terms of {@code
   * descendingMultiset().entrySet().iterator()}.
   *
   * <p>If you override {@link #descendingMultiset} or {@link #entrySet()}, you may wish to override
   * {@link #firstEntry()} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardPollFirstEntry,com.google.common.collect.ForwardingSortedMultiset:standardPollFirstEntry(),163,172,"/**
* Retrieves the first entry from the map's iterator, converts it to an immutable entry,
* and removes it from the iterator. 
* @return Entry object or null if map is empty
*/","* A sensible definition of {@link #pollFirstEntry()} in terms of {@code entrySet().iterator()}.
   *
   * <p>If you override {@link #entrySet()}, you may wish to override {@link #pollFirstEntry()} to
   * forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardPollLastEntry,com.google.common.collect.ForwardingSortedMultiset:standardPollLastEntry(),186,195,"/**
* Retrieves the last entry from the multiset, or null if empty.
* @return Last Entry object, or null if none exist
*/","* A sensible definition of {@link #pollLastEntry()} in terms of {@code
   * descendingMultiset().entrySet().iterator()}.
   *
   * <p>If you override {@link #descendingMultiset()} or {@link #entrySet()}, you may wish to
   * override {@link #pollLastEntry()} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,getEntry,com.google.common.collect.ImmutableMultimap$Keys:getEntry(int),753,757,"/**
* Retrieves a multiset entry at the specified index.
* @param index position of the desired entry
* @return Multiset.Entry object containing key-value pair and count, or null if out-of-bounds",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,getEntry,com.google.common.collect.RegularImmutableSortedMultiset:getEntry(int),66,69,"/**
* Retrieves an entry at specified index from the underlying multiset.
* @param index position of the desired entry in the set
* @return Entry object with key and count, or null if out of bounds
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,toString,com.google.common.collect.TreeMultiset$AvlNode:toString(),1041,1044,"/**
* Returns a string representation of this element's count.
* @return formatted string like ""elementName (count)""
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,setCount,"com.google.common.collect.EnumMultiset:setCount(java.lang.Object,int,int)",91,95,"/**
* Updates the count of a given element.
* @param element the element to update (can be null)
* @param oldCount current count
* @param newCount new count value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,equals,com.google.common.collect.Sets$PowerSet:equals(java.lang.Object),1759,1766,"/**
* Compares this PowerSet instance with another object for equality.
* @param obj the object to compare with
* @return true if both objects have identical key sets, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,entrySet,com.google.common.collect.HashMultiset:entrySet(),83,86,"/**
* Returns a set of multiset entries.
* @return Set of Multiset.Entry objects or empty if none exist
*/","* {@inheritDoc}
   *
   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the
   * current count of that element in the multiset, as opposed to the count at the time the entry
   * was retrieved.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,entrySet,com.google.common.collect.LinkedHashMultiset:entrySet(),83,86,"/**
* Returns a set view of this multiset's entries.
* @return A Set of Multiset.Entry objects representing the key-value pairs in this multiset.","* {@inheritDoc}
   *
   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the
   * current count of that element in the multiset, as opposed to the count at the time the entry
   * was retrieved.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,isEmpty,com.google.common.collect.EnumMultiset:isEmpty(),49,52,"/**
* Checks whether this map is empty.
* @return true if no key-value pairs exist, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,snapshot,com.google.common.collect.ConcurrentHashMultiset:snapshot(),183,192,"/**
* Creates a snapshot of the multiset by copying its elements.
* @return List of elements in the order they appear in this multiset
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,floor,com.google.common.collect.DescendingImmutableSortedSet:floor(java.lang.Object),91,94,"/**
 * Returns the largest value less than or equal to the given element.
 * @param element input value to find floor of
 * @return value with a magnitude closest to, but not exceeding, the input
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,lower,com.google.common.collect.DescendingImmutableSortedSet:lower(java.lang.Object),86,89,"/**
* Returns the next highest element in the ordered set.
* @param element current element to find higher neighbor
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,create,com.google.common.collect.TreeRangeSet:create(com.google.common.collect.RangeSet),55,59,"/**
* Creates a TreeRangeSet from an existing RangeSet.
* @param rangeSet existing set of ranges to copy
*/",Returns a {@code TreeRangeSet} initialized with the ranges in the specified range set.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,create,com.google.common.collect.TreeRangeSet:create(java.lang.Iterable),70,74,"/**
* Creates a TreeRangeSet from an iterable of ranges.
* @param ranges iterable of Range objects to include in the set
* @return TreeRangeSet instance containing all specified ranges
*/","* Returns a {@code TreeRangeSet} representing the union of the specified ranges.
   *
   * <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. An
   * element will be contained in this {@code RangeSet} if and only if it is contained in at least
   * one {@code Range} in {@code ranges}.
   *
   * @since 21.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:<init>(java.util.NavigableMap),461,463,"/**
* Augments positive ranges with their complementary ranges based on lower bounds.
* @param positiveRangesByLowerBound map of positive ranges keyed by lower bound
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,asMap,com.google.common.collect.TreeMultimap:asMap(),199,202,"/**
* Returns this map's contents as a navigable map.
*/","* {@inheritDoc}
   *
   * <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link
   * NavigableMap}, instead of the {@link java.util.Map} specified in the {@link Multimap}
   * interface.
   *
   * @since 14.0 (present with return type {@code SortedMap} since 2.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,clear,com.google.common.collect.AbstractTable$CellSet:clear(),158,161,"/**
* Clears all data in this table.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,clear,com.google.common.collect.AbstractTable$Values:clear(),222,225,"/**
 * Clears the table content.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,iterator,com.google.common.collect.AbstractTable$Values:iterator(),207,210,"/**
* Returns an iterator over the collection of associated values.
* @return Iterator instance or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,hashCode,com.google.common.collect.ArrayTable:hashCode(),238,241,"/**
* Returns hash code based on the hash code of the underlying CellSet.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,hashCode,com.google.common.collect.ImmutableTable:hashCode(),238,241,"/**
* Returns the hash code of this collection's element set.
* @return The hash code value as an integer.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,cellSet,com.google.common.collect.HashBasedTable:cellSet(),235,238,"/**
* Returns a set of cells in this table.
* @return Set of Cell objects or empty set if none exist
*/","* {@inheritDoc}
   *
   * <p>The set's iterator traverses the mappings for the first row, the mappings for the second
   * row, and so on.
   *
   * <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the
   * time the cell is returned by a method call to the set or its iterator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,containsValue,com.google.common.collect.ImmutableTable:containsValue(java.lang.Object),388,391,"/**
* Checks if the collection contains a specific value.
* @param value the object to search for
* @return true if found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,values,com.google.common.collect.HashBasedTable:values(),795,798,"/**
* Returns a collection view of the map's values.
* @return Collection of values or empty collection if none exist
*/","* {@inheritDoc}
   *
   * <p>The collection's iterator traverses the values for the first row, the values for the second
   * row, and so on.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,onKeys,com.google.common.collect.Ordering:onKeys(),463,465,"/**
* Returns an ordering based on map keys. 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,ordering,com.google.common.collect.MinMaxPriorityQueue$Builder:ordering(),228,231,"/**
* Creates an Ordering instance from the comparator.
* @return Ordering object for type T
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,nullsFirst,com.google.common.collect.NaturalOrdering:nullsFirst(),45,53,"/**
* Returns a comparator that orders null values first.
* @return Ordering object or cached instance if already created
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsLastOrdering.java,nullsFirst,com.google.common.collect.NullsLastOrdering:nullsFirst(),57,60,"/**
* Returns an ordering that prioritizes null values first.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,nullsLast,com.google.common.collect.NaturalOrdering:nullsLast(),55,63,"/**
* Returns a comparator that orders values with nulls last.
* @return Ordering object or cached instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsFirstOrdering.java,nullsLast,com.google.common.collect.NullsFirstOrdering:nullsLast(),63,66,"/**
* Returns a new ordering that treats null values as last. 
* @return an Ordering instance with null values at the end
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,<init>,com.google.common.collect.DescendingImmutableSortedSet:<init>(com.google.common.collect.ImmutableSortedSet),32,35,"/**
* Creates a descending immutable sorted set from an existing one.
* @param forward original immutable sorted set
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,comparator,com.google.common.collect.DescendingMultiset:comparator(),41,48,"/**
* Returns a comparator for the multiset, or creates and returns a reversed comparator if none exists.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,reverse,com.google.common.collect.GeneralRange:reverse(),269,285,"/**
* Reverses the range, returning a new reversed GeneralRange object.
* @return The reversed GeneralRange object or null if original is null
*/",Returns the same range relative to the reversed comparator.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,reverse,com.google.common.collect.Maps$DescendingMap:reverse(java.util.Comparator),4300,4302,"/**
* Reverses a given comparator to produce an ordering in descending order.
* @param forward original comparator for ascending order
* @return reversed comparator for descending order
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,<init>,"com.google.common.collect.MinMaxPriorityQueue:<init>(com.google.common.collect.MinMaxPriorityQueue$Builder,int)",241,251,"/**
* Initializes MinMaxPriorityQueue with specified queue size and ordering.
* @param queueSize maximum capacity of the queue
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsFirstOrdering.java,reverse,com.google.common.collect.NullsFirstOrdering:reverse(),50,55,"/**
* Reverses the given ordering.
* @return a new reversed ordering of type S
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsLastOrdering.java,reverse,com.google.common.collect.NullsLastOrdering:reverse(),50,55,"/**
* Reverses the ordering for a given type.
* @return reversed Ordering object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,reverse,com.google.common.collect.Sets$DescendingSet:reverse(java.util.Comparator),2246,2248,"/**
* Reverses an existing comparator to produce its inverse ordering.
* @param forward original comparator to be reversed
* @return the reversed comparator as an Ordering instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,collectTypes,com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Iterable),1380,1387,"/**
* Collects and sorts unique types from an iterable by order number.
* @param types iterable of types to process
* @return sorted list of unique types ordered by their position in the hierarchy
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,cellOf,"com.google.common.collect.ImmutableTable:cellOf(java.lang.Object,java.lang.Object,java.lang.Object)",157,162,"/**
* Creates an immutable cell with the given key-value pair.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value cell value to store","* Verifies that {@code rowKey}, {@code columnKey} and {@code value} are non-null, and returns a
   * new entry with those values.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,next,com.google.common.collect.StandardTable$CellIterator:next(),255,277,"/**
* Returns next cell in iteration sequence.
* @return Cell object or null if exhausted
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,elementSet,com.google.common.collect.ImmutableMultiset:elementSet(),354,355,"/**
* Returns an immutable set of elements contained in this collection.
* @return Set of elements (type E) or empty set if no elements present
*/",* @since 21.0 (present with return type {@code Set} since 2.0),,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,put,"com.google.common.collect.ImmutableMap$Builder:put(java.lang.Object,java.lang.Object)",451,458,"/**
* Adds a new mapping from the given key to the specified value.
* @param key unique identifier for the entry
* @param value associated value for the entry
*/","* Associates {@code key} with {@code value} in the built map. If the same key is put more than
     * once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last
     * value put for that key.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",142,144,"/**
* Creates an immutable map with two key-value pairs.
* @param k1 first key
* @param v1 value associated with k1
* @param k2 second key
* @param v2 value associated with k2
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",151,153,"/**
* Creates an ImmutableMap with three key-value pairs.
* @param k1 first key
* @param v1 value for k1
* @param k2 second key
* @param v2 value for k2
* @param k3 third key
* @param v3 value for k3
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",160,163,"/**
* Creates an ImmutableMap with four entries.
* @param k1 key for first entry
* @param v1 value for first entry
* @param k2 key for second entry
* @param v2 value for second entry
* @param k3 key for third entry
* @param v3 value for third entry
* @param k4 key for fourth entry
* @param v4 value for fourth entry","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",170,174,"/**
* Creates an ImmutableMap with five key-value pairs.
* @param k1 first key
* @param v1 value for k1
* @param k2 second key
* @param v2 value for k2
* @param k3 third key
* @param v3 value for k3
* @param k4 fourth key
* @param v4 value for k4
* @param k5 fifth key
* @param v5 value for k5","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",182,191,"/**
* Creates an ImmutableMap with up to six entries.
* @param k1 key of first entry
* @param v1 value of first entry
* @param k2 key of second entry (null if only one entry)
* @param v2 value of second entry (null if only one entry)
* @param k3 key of third entry (null if only two entries)
* @param v3 value of third entry (null if only two entries)
* @param k4 key of fourth entry (null if only three entries)
* @param v4 value of fourth entry (null if only three entries)
* @param k5 key of fifth entry (null if only four entries)
* @param v5 value of fifth entry (null if only four entries)
* @param k6 key of sixth entry (null if only five entries)
* @return ImmutableMap with specified entries
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",199,209,"/**
* Creates an ImmutableMap with up to 7 key-value pairs.
* @param k1,k2,k3,k4,k5,k6,k7 keys
* @param v1,v2,v3,v4,v5,v6,v7 values
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",217,243,"/**
* Creates an ImmutableMap from key-value pairs.
* @param k1,k2,k3,k4,k5,k6,k7,k8 keys
* @param v1,v2,v3,v4,v5,v6,v7,v8 values
* @return ImmutableMap with specified entries","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",251,280,"/**
* Creates an ImmutableMap with up to 9 key-value pairs.
* @param k1 key for value v1
* @param v1 value associated with key k1
* @param k2 key for value v2
* @param v2 value associated with key k2
* ...
* @param k9 key for value v9
* @param v9 value associated with key k9
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",288,320,"/**
* Creates an ImmutableMap with up to 10 key-value pairs.
* @param k1-k10 keys for the map
* @param v1-v10 values corresponding to each key
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntry.java,<init>,"com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry)",123,130,"/**
* Constructs a NonTerminalImmutableBiMapEntry with specified key and value.
* @param key the key of this entry
* @param value the value of this entry
* @param nextInKeyBucket next entry in key bucket, or null if none
* @param nextInValueBucket next entry in value bucket, or null if none
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,fromEntryArrayCheckingBucketOverflow,"com.google.common.collect.RegularImmutableMap:fromEntryArrayCheckingBucketOverflow(int,java.util.Map$Entry[],boolean)",104,172,"/**
* Creates an ImmutableMap from a sorted array of Entry objects.
* @param n number of entries
* @param entryArray sorted array of nullable Entries
* @param throwIfDuplicateKeys whether to throw exception for duplicate keys
* @return ImmutableMap object or throws BucketOverflowException if overflowed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,makeImmutable,com.google.common.collect.RegularImmutableMap:makeImmutable(java.util.Map$Entry),213,215,"/**
* Wraps an Entry into an ImmutableMapEntry.
* @param entry the underlying map entry
*/",Makes an entry usable internally by a new ImmutableMap.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,put,com.google.common.collect.ImmutableListMultimap$Builder:put(java.util.Map$Entry),265,270,"/**
* Adds an entry to the map and returns the builder instance.
* @param entry Entry object containing key-value pair
*/","* {@inheritDoc}
     *
     * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,putAll,com.google.common.collect.ImmutableMultimap$Builder:putAll(java.lang.Iterable),265,271,"/**
* Adds all entries from the specified iterable to the map.
* @param entries collection of key-value pairs to add
* @return Builder instance for method chaining
*/","* Adds entries to the built multimap.
     *
     * @since 19.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,put,com.google.common.collect.ImmutableSetMultimap$Builder:put(java.util.Map$Entry),314,319,"/**
* Adds an entry to the map and returns the builder instance.
* @param entry key-value pair to be added
*/","* Adds an entry to the built multimap if it is not already present.
     *
     * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble:trySplit(),376,399,"/**
* Tries to split the spliterator into two, returning a new spliterator.
* @return new spliterator or null if not possible
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong:trySplit(),376,399,"/**
* Attempts to split the spliterator into two parts.
* @return a new spliterator for one part or null if not possible
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multiset.java,spliterator,com.google.common.collect.Multiset:spliterator(),481,484,"/**
* Returns an iterator over the elements in this multiset. 
* @return Spliterator instance for iterating over elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$FilteredNavigableSet:<init>(java.util.NavigableSet,com.google.common.base.Predicate)",1348,1350,"/**
* Creates a filtered navigable set from an existing navigable set.
* @param unfiltered original navigable set
* @param predicate filter condition for elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets$FilteredSortedSet:subSet(java.lang.Object,java.lang.Object)",1309,1313,"/**
* Returns a subset of elements in this set, between the specified range.
* @param fromElement starting element (inclusive)
* @param toElement ending element (exclusive)
* @return SortedSet containing filtered elements or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,headSet,com.google.common.collect.Sets$FilteredSortedSet:headSet(java.lang.Object),1315,1318,"/**
* Returns a view of elements in this sorted set strictly less than the given element.
* @param toElement the upper bound (exclusive)
* @return SortedSet containing elements less than toElement or an empty set if none exist
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,tailSet,com.google.common.collect.Sets$FilteredSortedSet:tailSet(java.lang.Object),1320,1323,"/**
* Returns a sorted set of elements in this set and its successors, 
* starting with the least element greater than or equal to the given fromElement. 
* @param fromElement the beginning of the desired range (inclusive)",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,filter,"com.google.common.collect.Sets:filter(java.util.SortedSet,com.google.common.base.Predicate)",1229,1240,"/**
* Filters a sorted set of objects based on the given predicate.
* @param unfiltered input sorted set
* @param predicate condition to apply for filtering
* @return filtered sorted set or null if unfiltered is not a FilteredSet
*/","* Returns the elements of a {@code SortedSet}, {@code unfiltered}, that satisfy a predicate. The
   * returned set is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting set's iterator does not support {@code remove()}, but all other set methods
   * are supported. When given an element that doesn't satisfy the predicate, the set's {@code
   * add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods
   * such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements
   * that satisfy the filter will be removed from the underlying set.
   *
   * <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in
   * the underlying set and determine which elements satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and
   * use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,getValue,com.google.common.collect.CompactHashMap$MapEntry:getValue(),911,932,"/**
* Returns the map value associated with the key, or null if the entry has been removed.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,firstEntryIndex,com.google.common.collect.CompactHashMap:firstEntryIndex(),608,610,"/**
* Returns index of first entry in collection; returns -1 if empty.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,clear,com.google.common.collect.CompactLinkedHashMap:clear(),288,299,"/**
* Clears the internal state and resets links array.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,trimToSize,com.google.common.collect.CompactHashMap:trimToSize(),1070,1090,"/**
* Trims the internal data structure to optimal size based on current entries.
* @param none
*/","* Ensures that this {@code CompactHashMap} has the smallest representation in memory, given its
   * current size.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,trimToSize,com.google.common.collect.CompactHashSet:trimToSize(),655,675,"/**
* Trims internal data structures to optimal size based on the number of entries.
*/","* Ensures that this {@code CompactHashSet} has the smallest representation in memory, given its
   * current size.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,firstEntryIndex,com.google.common.collect.CompactHashSet:firstEntryIndex(),522,524,"/**
* Returns index of first entry in collection (0-based), or -1 if empty.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,clear,com.google.common.collect.CompactLinkedHashSet:clear(),247,260,"/**
* Clears internal state and reinitializes endpoint markers.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,allocArrays,com.google.common.collect.CompactLinkedHashMap:allocArrays(),122,127,"/**
* Allocates arrays for internal data structures.
* @return Expected size of allocated arrays
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,allocArrays,com.google.common.collect.CompactLinkedHashSet:allocArrays(),139,145,"/**
* Allocates arrays for predecessor and successor data structures.
* @return size of allocated arrays
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setSucceeds,"com.google.common.collect.CompactLinkedHashMap:setSucceeds(int,int)",167,179,"/**
* Updates predecessor and successor relationships for a given endpoint.
* @param pred previous endpoint
* @param succ next endpoint
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,insertEntry,"com.google.common.collect.CompactLinkedHashSet:insertEntry(int,java.lang.Object,int,int)",193,198,"/**
* Inserts a new entry at the specified index and updates succeed pointers.
* @param entryIndex index where to insert the new entry
* @param object object to be inserted
* @param hash hash value of the object
* @param mask mask value for the object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,readResolve,com.google.common.collect.EmptyContiguousSet$SerializedForm:readResolve(),157,159,"/**
* Returns an empty contiguous set instance with the specified domain.
* @return EmptyContiguousSet object with given domain
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,readResolve,com.google.common.collect.RegularContiguousSet$SerializedForm:readResolve(),253,255,"/**
* Reconstructs the original set from serialized state.
* @return RegularContiguousSet instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,createDescendingSet,com.google.common.collect.EmptyContiguousSet:createDescendingSet(),177,181,"/**
* Creates an empty descending set ordered by natural key.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,emptySet,com.google.common.collect.ImmutableSetMultimap:emptySet(java.util.Comparator),648,652,"/**
* Returns an empty set of values, potentially sorted based on a comparator.
* @param valueComparator optional comparator for sorting the set
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,emptyMap,com.google.common.collect.ImmutableSortedMap:emptyMap(java.util.Comparator),119,126,"/**
* Creates an empty sorted map with the given comparator.
* @param comparator key comparison function
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,<init>,com.google.common.collect.RegularImmutableSortedMultiset:<init>(java.util.Comparator),47,52,"/**
* Initializes a new empty multiset with the specified comparator.
* @param comparator comparator to use for ordering elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,canonical,com.google.common.collect.Cut$BelowAll:canonical(com.google.common.collect.DiscreteDomain),187,194,"/**
* Returns a cut below the minimum value in the given discrete domain.
* @return Cut object or self if domain has no elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,getEntry,com.google.common.collect.TreeRangeMap:getEntry(java.lang.Comparable),126,135,"/**
* Retrieves the entry associated with the given key.
* @param key search key
* @return Entry object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,isEmpty,com.google.common.collect.Range:isEmpty(),398,400,"/**
* Checks if the interval is empty.
* @return true if lower and upper bounds are equal, false otherwise
*/","* Returns {@code true} if this range is of the form {@code [v..v)} or {@code (v..v]}. (This does
   * not encompass ranges of the form {@code (v..v)}, because such ranges are <i>invalid</i> and
   * can't be constructed at all.)
   *
   * <p>Note that certain discrete ranges such as the integer range {@code (3..4)} are <b>not</b>
   * considered empty, even though they contain no actual values. In these cases, it may be helpful
   * to preprocess ranges with {@link #canonical(DiscreteDomain)}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,equals,com.google.common.collect.Range:equals(java.lang.Object),662,669,"/**
* Compares this range with another for equality.
* @param object the object to compare with, must be a Range
*/","* Returns {@code true} if {@code object} is a range having the same endpoints and bound types as
   * this range. Note that discrete ranges such as {@code (1..4)} and {@code [2..3]} are <b>not</b>
   * equal to one another, despite the fact that they each contain precisely the same set of values.
   * Similarly, empty ranges are not equal unless they have exactly the same representation, so
   * {@code [3..3)}, {@code (3..3]}, {@code (4..4]} are all unequal.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,get,com.google.common.collect.TreeRangeSet$RangesByUpperBound:get(java.lang.Object),342,360,"/**
* Retrieves range for given key, handling Cut instances and ClassCastException.
* @param key the object to find a range for
* @return Range of type C or null if not found or invalid key
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,create,"com.google.common.collect.Range:create(com.google.common.collect.Cut,com.google.common.collect.Cut)",132,134,"/**
* Creates a range with specified lower and upper bounds.
* @param lowerBound the minimum value (inclusive)
* @param upperBound the maximum value (inclusive)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,encloses,com.google.common.collect.TreeRangeSet:encloses(com.google.common.collect.Range),148,153,"/**
* Checks if the given range is enclosed by another range in the collection.
* @param range the range to check
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,rangeEnclosing,com.google.common.collect.TreeRangeSet:rangeEnclosing(com.google.common.collect.Range),155,161,"/**
* Finds the range enclosing a given range.
* @param range The input range to search for enclosure
* @return The enclosing range or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardAdd,com.google.common.collect.ForwardingList:standardAdd(java.lang.Object),136,139,"/**
* Adds an element to the collection.
* @param element the element to be added
*/","* A sensible default implementation of {@link #add(Object)}, in terms of {@link #add(int,
   * Object)}. If you override {@link #add(int, Object)}, you may wish to override {@link
   * #add(Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardIterator,com.google.common.collect.ForwardingList:standardIterator(),181,183,"/**
* Returns an iterator over the elements in this collection.
* @return iterator over the collection's elements
*/","* A sensible default implementation of {@link #iterator}, in terms of {@link #listIterator()}. If
   * you override {@link #listIterator()}, you may wish to override {@link #iterator} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardListIterator,com.google.common.collect.ForwardingList:standardListIterator(),192,194,"/**
* Returns a list iterator starting at index 0.
* @return ListIterator object to iterate over the collection
*/","* A sensible default implementation of {@link #listIterator()}, in terms of {@link
   * #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override
   * {@link #listIterator()} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,asMap,com.google.common.collect.ForwardingMultimap:asMap(),49,52,"/**
* Returns map representation of underlying data structure.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,clear,com.google.common.collect.ForwardingMultimap:clear(),54,57,"/**
* Clears all data in the underlying storage.
* Calls the corresponding method on the delegate object. 
* @see Delegate#clear()
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,containsEntry,"com.google.common.collect.ForwardingMultimap:containsEntry(java.lang.Object,java.lang.Object)",59,62,"/**
* Checks if map entry exists with specified key-value pair.
* @param key object to search by (null for any key)
* @param value object to search by (null for any value)
* @return true if entry found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,containsKey,com.google.common.collect.ForwardingMultimap:containsKey(java.lang.Object),64,67,"/**
* Checks if the backing map contains a specified key.
* @param key object to search for in the map
* @return true if the key is present, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,containsValue,com.google.common.collect.ForwardingMultimap:containsValue(java.lang.Object),69,72,"/**
* Checks if a given value exists in the underlying map.
* @param value object to search for
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,entries,com.google.common.collect.ForwardingMultimap:entries(),74,77,"/**
* Returns a collection of key-value pairs in this map.
* @return Collection of Entry objects or an empty collection if map is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,get,com.google.common.collect.ForwardingMultimap:get(java.lang.Object),79,82,"/**
* Retrieves value associated with specified key from underlying collection.
* @param key unique identifier for retrieved value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,isEmpty,com.google.common.collect.ForwardingMultimap:isEmpty(),84,87,"/**
* Checks if the underlying collection is empty.
* @return true if the collection has no elements, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,keys,com.google.common.collect.ForwardingMultimap:keys(),89,92,"/**
* Returns a multiset of keys from this map.
* @return Multiset containing all key values in this map
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,keySet,com.google.common.collect.ForwardingMultimap:keySet(),94,97,"/**
* Returns a set of keys in this map.
* @return unmodifiable set of keys or an empty set if map is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,put,"com.google.common.collect.ForwardingMultimap:put(java.lang.Object,java.lang.Object)",99,103,"/**
* Puts a value into the map.
* @param key unique identifier for the entry
* @param value associated data for the entry
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,putAll,"com.google.common.collect.ForwardingMultimap:putAll(java.lang.Object,java.lang.Iterable)",105,109,"/**
* Adds all elements from the given iterable to the map for the specified key.
* @param key unique key identifier
* @param values iterable of values to be added
* @return true if operation was successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,putAll,com.google.common.collect.ForwardingMultimap:putAll(com.google.common.collect.Multimap),111,115,"/**
* Adds all entries from the given Multimap to this map.
* @param multimap multimap containing entries to add
* @return true if changes were made; false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,remove,"com.google.common.collect.ForwardingMultimap:remove(java.lang.Object,java.lang.Object)",117,121,"/**
* Removes entry from map by specified key or value.
* @param key object to search for (can be null)
* @param value object to search for (can be null)
* @return true if removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,removeAll,com.google.common.collect.ForwardingMultimap:removeAll(java.lang.Object),123,127,"/**
* Removes all occurrences of specified key from collection.
* @param key object to remove, or null if no action needed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,replaceValues,"com.google.common.collect.ForwardingMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",129,133,"/**
* Replaces values associated with a given key.
* @param key unique identifier for the replacement operation
* @param values collection of new values to replace existing ones
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,size,com.google.common.collect.ForwardingMultimap:size(),135,138,"/**
* Returns the number of elements in this collection.
* @return Count of items in the underlying collection.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,values,com.google.common.collect.ForwardingMultimap:values(),140,143,"/**
* Delegates collection value retrieval to the underlying delegate.
* @return Collection of values or null if not available
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,equals,com.google.common.collect.ForwardingMultimap:equals(java.lang.Object),145,150,"/**
* Compares this instance with another object for equality, using its delegate's equals method if necessary. 
* @param object the object to compare with, or null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,hashCode,com.google.common.collect.ForwardingMultimap:hashCode(),152,155,"/**
* Returns hash code based on delegate's implementation.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,count,com.google.common.collect.TreeMultiset:count(java.lang.Object),242,255,"/**
* Counts occurrences of the specified element in the AVL tree.
* @param element the object to count, or null for no change
* @return occurrence count, or 0 if not found or invalid element
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,firstNode,com.google.common.collect.TreeMultiset:firstNode(),394,415,"/**
* Retrieves the first node within the specified range, or null if no such node exists.
* @return AvlNode object or null
*/",Returns the first node in the tree that is in range.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,lastNode,com.google.common.collect.TreeMultiset:lastNode(),417,438,"/**
* Retrieves the last AvlNode within the specified range.
* @return Last AvlNode or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,create,com.google.common.collect.HashBasedTable:create(com.google.common.collect.Table),95,100,"/**
* Creates a copy of the given table with its contents.
* @param table original table to be copied
* @return new HashBasedTable instance or null if input is null
*/","* Creates a {@code HashBasedTable} with the same mappings as the specified table.
   *
   * @param table the table to copy
   * @throws NullPointerException if any of the row keys, column keys, or values in {@code table} is
   *     null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,create,com.google.common.collect.TreeBasedTable:create(),100,103,"/**
* Creates an empty TreeBasedTable instance with default comparators.
* @return TreeBasedTable object
*/","* Creates an empty {@code TreeBasedTable} that uses the natural orderings of both row and column
   * keys.
   *
   * <p>The method signature specifies {@code R extends Comparable} with a raw {@link Comparable},
   * instead of {@code R extends Comparable<? super R>}, and the same for {@code C}. That's
   * necessary to support classes defined without generics.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,create,"com.google.common.collect.TreeBasedTable:create(java.util.Comparator,java.util.Comparator)",111,116,"/**
* Creates a TreeBasedTable instance with customized row and column comparators.
* @param rowComparator comparator for tree-based row ordering
* @param columnComparator comparator for tree-based column ordering
*/","* Creates an empty {@code TreeBasedTable} that is ordered by the specified comparators.
   *
   * @param rowComparator the comparator that orders the row keys
   * @param columnComparator the comparator that orders the column keys",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,create,com.google.common.collect.HashBiMap:create(int),76,79,"/**
* Creates a HashBiMap instance with specified capacity.
* @param expectedSize estimated number of key-value pairs
*/","* Constructs a new, empty bimap with the specified expected size.
   *
   * @param expectedSize the expected number of entries
   * @throws IllegalArgumentException if the specified expected size is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,containsKey,com.google.common.collect.CompactHashMap:containsKey(java.lang.Object),502,506,"/**
* Checks if a map or index contains the specified key.
* @param key object to search for
* @return true if found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,get,com.google.common.collect.CompactHashMap:get(java.lang.Object),508,520,"/**
* Retrieves the value associated with a given key from the underlying map or collection.
* @param key object to search for, or null to retrieve all values
* @return value associated with the key, or null if not found or if no data is available
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,moveLastEntry,"com.google.common.collect.CompactLinkedHashSet:moveLastEntry(int,int)",200,212,"/**
* Moves the last entry to a specified position in the sequence.
* @param dstIndex target index for the moved entry
* @param mask     (unused) mask value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap$EntrySetView:remove(java.lang.Object),840,871,"/**
* Removes an entry from the map.
* @param o the entry to remove or null
* @return true if removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,removeHelper,com.google.common.collect.CompactHashMap:removeHelper(java.lang.Object),534,559,"/**
* Removes an entry from the hash table by key.
* @param key object to remove
* @return removed value or NOT_FOUND if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,remove,com.google.common.collect.CompactHashSet:remove(java.lang.Object),448,477,"/**
* Removes an object from the collection.
* @param object object to be removed
* @return true if removal was successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,put,"com.google.common.collect.HashBiMap:put(java.lang.Object,java.lang.Object)",288,292,"/**
* Puts a value in the map by key.
* @param key unique identifier for the entry
* @param value value to associate with the key
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,forcePut,"com.google.common.collect.HashBiMap:forcePut(java.lang.Object,java.lang.Object)",328,332,"/**
* Forces a new value into the map without merging with existing value.
* @param key unique key identifier
* @param value new value to be inserted
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,builder,com.google.common.collect.ImmutableBiMap:builder(),290,292,"/**
* Creates a new instance of the Builder class. 
* @return A configured Builder object ready to construct instances of type K and V.","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,<init>,com.google.common.collect.ImmutableClassToInstanceMap$Builder:<init>(),97,97,"/**
* Initializes a new instance of the Builder class. 
*/",Creates a new builder.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,<init>,com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:<init>(),64,64,"/**
* Private constructor to prevent direct instantiation of this class. 
* Intended for use with builder pattern only.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,makeBuilder,com.google.common.collect.ImmutableSortedMap$SerializedForm:makeBuilder(int),1152,1155,"/**
* Creates a builder instance with specified capacity.
* @param size initial capacity of the map
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,naturalOrder,com.google.common.collect.ImmutableSortedMap:naturalOrder(),567,569,"/**
* Creates a builder with a natural ordering comparator. 
* @return Builder instance with specified ordering
*/","* Returns a builder that creates immutable sorted maps whose keys are ordered by their natural
   * ordering. The sorted maps use {@link Ordering#natural()} as the comparator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,orderedBy,com.google.common.collect.ImmutableSortedMap:orderedBy(java.util.Comparator),579,581,"/**
* Creates an ordered builder instance with the specified key comparator.
* @param comparator key comparator to order the map entries
*/","* Returns a builder that creates immutable sorted maps with an explicit comparator. If the
   * comparator has a more general type than the map's keys, such as creating a {@code
   * SortedMap<Integer, String>} with a {@code Comparator<Number>}, use the {@link Builder}
   * constructor instead.
   *
   * @throws NullPointerException if {@code comparator} is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,reverseOrder,com.google.common.collect.ImmutableSortedMap:reverseOrder(),587,589,"/**
* Creates a builder with data in reverse order. 
* @return Builder instance with reversed ordering
*/","* Returns a builder that creates immutable sorted maps whose keys are ordered by the reverse of
   * their natural ordering.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object)",133,135,"/**
* Creates an immutable map with one entry.
* @param k1 key
* @param v1 value
*/","* Returns an immutable map containing a single entry. This map behaves and performs comparably to
   * {@link Collections#singletonMap} but will not accept a null key or value. It is preferable
   * mainly for consistency and maintainability of your code.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,inverse,com.google.common.collect.ImmutableBiMap:inverse(),582,583,"/**
* Returns an inverted view of this map.","* {@inheritDoc}
   *
   * <p>The inverse of an {@code ImmutableBiMap} is another {@code ImmutableBiMap}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,combine,com.google.common.collect.ImmutableBiMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder),419,424,"/**
* Combines an existing ImmutableMap.Builder into this builder.
* @param builder the builder to be combined
* @return this builder instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,combine,com.google.common.collect.ImmutableSortedMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder),697,702,"/**
* Combines another immutable map builder into this builder.
* @param other the other builder to merge with this one
* @return this builder instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,builder,com.google.common.collect.ImmutableList:builder(),759,761,"/**
* Creates a new instance of the Builder class.
* @return Builder instance for constructing objects of type E
*/","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,orderedBy,com.google.common.collect.ImmutableSortedSet:orderedBy(java.util.Comparator),396,398,"/**
* Creates a Builder instance with a custom ordering based on the provided Comparator. 
* @param comparator Comparator to order elements by
*/","* Returns a builder that creates immutable sorted sets with an explicit comparator. If the
   * comparator has a more general type than the set being generated, such as creating a {@code
   * SortedSet<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor
   * instead.
   *
   * @throws NullPointerException if {@code comparator} is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,reverseOrder,com.google.common.collect.ImmutableSortedSet:reverseOrder(),404,406,"/**
* Creates a builder with elements in reverse order. 
* @return A new Builder instance with reversed ordering.","* Returns a builder that creates immutable sorted sets whose elements are ordered by the reverse
   * of their natural ordering.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,naturalOrder,com.google.common.collect.ImmutableSortedSet:naturalOrder(),414,416,"/**
* Creates a builder with a natural ordering comparator.
* @return A Builder instance with the specified ordering
*/","* Returns a builder that creates immutable sorted sets whose elements are ordered by their
   * natural ordering. The sorted sets use {@link Ordering#natural()} as the comparator. This method
   * provides more type-safety than {@link #builder}, as it can be called only for classes that
   * implement {@link Comparable}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,reverse,com.google.common.collect.ImmutableList:reverse(),633,635,"/**
* Reverses the order of elements in the list.
* @return a new reversed list or the original if empty or single-element
*/","* Returns a view of this immutable list in reverse order. For example, {@code ImmutableList.of(1,
   * 2, 3).reverse()} is equivalent to {@code ImmutableList.of(3, 2, 1)}.
   *
   * @return a view of this immutable list in reverse order
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,charactersOf,com.google.common.collect.Lists:charactersOf(java.lang.String),749,751,"/**
* Extracts immutable list of characters from input string.
* @param string input string to process
*/","* Returns a view of the specified string as an immutable list of {@code Character} values.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,createValues,com.google.common.collect.RegularImmutableMap:createValues(),372,375,"/**
* Creates an immutable collection of values associated with this instance.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,of,com.google.common.collect.ImmutableList:of(java.lang.Object),98,100,"/**
* Creates an immutable list containing a single element.
* @param e1 the element to include in the list
*/","* Returns an immutable list containing a single element. This list behaves and performs
   * comparably to {@link Collections#singletonList}, but will not accept a null element. It is
   * preferable mainly for consistency and maintainability of your code.
   *
   * @throws NullPointerException if the element is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,entries,com.google.common.collect.ImmutableSetMultimap:entries(),594,598,"/**
* Returns an immutable set of key-value mapping entries.
* @return Set of entries or null if not initialized
*/","* Returns an immutable collection of all key-value pairs in the multimap. Its iterator traverses
   * the values for the first key, the values for the second key, and so on.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,of,com.google.common.collect.ImmutableSet:of(java.lang.Object),91,93,"/**
* Creates an immutable set containing a single element.
* @param e1 the single element in the set
*/","* Returns an immutable set containing the given element. Preferred over {@link
   * Collections#singleton} for code consistency, {@code null} rejection, and because the return
   * type conveys the immutability guarantee.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,iterator,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:iterator(),62,65,"/**
* Returns an unmodifiable iterator over the map's entries.
* @return Iterator over key-value pairs or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,iterator,com.google.common.collect.ImmutableSet$Indexed:iterator(),338,341,"/**
* Returns an unmodifiable iterator over elements in this collection.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,iterator,com.google.common.collect.ImmutableSortedMap$1EntrySet:iterator(),396,399,"/**
* Returns an unmodifiable iterator over the elements in this collection.
* @return Iterator instance or null if collection is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,iterator,com.google.common.collect.IndexedImmutableSet:iterator(),32,35,"/**
* Returns an unmodifiable iterator over the elements of this collection.
* @return Iterator object to iterate over the collection's elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,iterator,com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:iterator(),264,267,"/**
* Returns an unmodifiable iterator over the entries of this map.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,iterator,com.google.common.collect.RegularImmutableSortedSet:iterator(),69,72,"/**
* Returns an unmodifiable iterator over the elements in this collection.
* @return Iterator instance with read-only access to the underlying elements.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,hashCode,com.google.common.collect.Sets$CartesianSet:hashCode(),1626,1646,"/**
* Calculates the hash code of this ImmutableSet instance.
* @return a unique integer identifier for this set
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,charset,com.google.common.net.MediaType:charset(),857,875,"/**
* Retrieves the charset for this object, resolving any ambiguity by throwing an exception.
*@return Charset instance or null if not found
*/","* Returns an optional charset for the value of the charset parameter if it is specified.
   *
   * @throws IllegalStateException if multiple charset values have been set for this media type
   * @throws IllegalCharsetNameException if a charset value is present, but illegal
   * @throws UnsupportedCharsetException if a charset value is present, but no support is available
   *     in this instance of the Java virtual machine",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getAnnotation,com.google.common.reflect.Parameter:getAnnotation(java.lang.Class),77,86,"/**
* Retrieves a specific annotation by type.
* @param annotationType the class of the desired annotation
* @return the annotation object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,toString,com.google.common.reflect.Types$WildcardTypeImpl:toString(),502,512,"/**
* Generates class type expression as a string.
* @return Class type expression in format ""super Type1 extends Type2...""
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,stopAsync,com.google.common.util.concurrent.ServiceManager:stopAsync(),340,346,"/**
* Stops all registered services asynchronously.
* @return This instance to enable chaining calls.","* Initiates service {@linkplain Service#stopAsync shutdown} if necessary on all the services
   * being managed.
   *
   * @return this",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,isHealthy,com.google.common.util.concurrent.ServiceManager:isHealthy(),390,397,"/**
* Checks if all services are running.
* @return true if all services are operational, false otherwise
*/","* Returns true if all services are currently in the {@linkplain State#RUNNING running} state.
   *
   * <p>Users who want more detailed information should use the {@link #servicesByState} method to
   * get detailed information about which services are not running.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,writeReplace,com.google.common.collect.ImmutableBiMap:writeReplace(),635,639,"/**
* Returns a serialized form of this object.
* @return SerializedForm instance containing this object's state
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$Builder:<init>(),481,483,"/**
 * Initializes a new instance of the builder with default settings.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,builderWithExpectedSize,com.google.common.collect.ImmutableSet:builderWithExpectedSize(int),449,452,"/**
* Creates a builder with an initial capacity based on the expected size.
* @param expectedSize initial list capacity
*/","* Returns a new builder, expecting the specified number of distinct elements to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of distinct elements added to the builder
   * before {@link Builder#build} is called, the builder is likely to perform better than an unsized
   * {@link #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of distinct elements added to the builder.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copy,com.google.common.collect.ImmutableSet$Builder:copy(),510,513,"/**
* Copies the underlying implementation and assigns it to this object.
* @throws NullPointerException if impl is null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,subListUnchecked,"com.google.common.collect.ImmutableSortedAsList:subListUnchecked(int,int)",76,86,"/**
* Returns a sublist of the underlying sorted set.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
* @return ImmutableList containing elements in the specified range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,spliterator,com.google.common.collect.ImmutableSortedAsList:spliterator(),88,95,"/**
* Returns a Spliterator for iterating over the list.
* @return Spliterator with sorted, distinct elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,lastIndexOf,com.google.common.collect.ImmutableSortedAsList:lastIndexOf(java.lang.Object),64,68,"/**
* Returns index of last occurrence of specified object in this set.
* @param target object to search for, may be null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,contains,com.google.common.collect.ImmutableSortedAsList:contains(java.lang.Object),70,74,"/**
* Checks if the collection contains the specified object.
* @param target object to search for
* @return true if found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,hashCode,com.google.common.collect.ImmutableRangeMap:hashCode(),404,407,"/**
* Returns the hash code of the ranges map.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,equals,com.google.common.collect.ImmutableRangeMap:equals(java.lang.Object),409,416,"/**
* Compares this RangeMap to another object for equality.
* @param o the other object, which must be a RangeMap
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,writeReplace,com.google.common.collect.ImmutableRangeMap:writeReplace(),454,456,"/**
* Returns a serialized form of this object.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,writeReplace,com.google.common.collect.ImmutableSortedMap:writeReplace(),1160,1164,"/**
* Creates a serialized form of the object. 
* @return SerializedForm instance containing this object's state.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,putAll,"com.google.common.collect.ImmutableListMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)",284,289,"/**
* Adds all values to a map with a given key.
* @param key unique map key
* @param values iterable of values to add
* @return Builder instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,putAll,com.google.common.collect.ImmutableMultimap$Builder:putAll(com.google.common.collect.Multimap),322,329,"/**
* Adds all entries from the given Multimap to this builder.
* @param multimap Multimap containing key-value pairs to add
*/","* Stores another multimap's entries in the built multimap. The generated multimap's key and
     * value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view,
     * with new keys and values following any existing keys and values.
     *
     * @throws NullPointerException if any key or value in {@code multimap} is null. The builder is
     *     left in an invalid state.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,combine,com.google.common.collect.ImmutableMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder),353,361,"/**
* Merges another builder's data into this one.
* @param other the Builder instance to combine with
* @return this Builder instance, allowing method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,putAll,"com.google.common.collect.ImmutableSetMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)",333,338,"/**
* Adds all values from the given iterable to the map under the specified key.
* @param key unique key identifier
* @param values collection of values to store
* @return Builder instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,throwDeleteFailed,"com.google.common.io.MoreFiles:throwDeleteFailed(java.nio.file.Path,java.util.Collection)",786,804,"/**
* Throws a custom exception when deleting fails on the specified path.
* @param path Path of the deletion operation
* @param exceptions Collection of IOExceptions that occurred during deletion
*/","* Throws an exception indicating that one or more files couldn't be deleted when deleting {@code
   * path} or its contents.
   *
   * <p>If there is only one exception in the collection, and it is a {@link NoSuchFileException}
   * thrown because {@code path} itself didn't exist, then throws that exception. Otherwise, the
   * thrown exception contains all the exceptions in the given collection as suppressed exceptions.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean)",110,133,"/**
* Executes a callable with timeout and interrupts if requested.
* @param callable the task to execute
* @param timeoutDuration duration of the timeout in specified unit
* @param timeoutUnit unit of time for the timeout (e.g., seconds, milliseconds)
* @param amInterruptible whether to interrupt the task on timeout
* @return result of the executed task or null if not found
* @throws Exception if an error occurs during execution
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,com.google.common.collect.Iterators:concat(java.util.Iterator),556,559,"/**
* Concatenates multiple iterators into a single iterator.
* @param inputs variable-length array of input iterators
* @return concatenated iterator or null if all inputs are empty
*/","* Combines multiple iterators into a single iterator. The returned iterator iterates across the
   * elements of each iterator in {@code inputs}. The input iterators are not polled until
   * necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.
   *
   * @throws NullPointerException if any of the provided iterators is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,readObject,com.google.common.collect.LinkedListMultimap:readObject(java.io.ObjectInputStream),854,867,"/**
* Deserializes object graph from input stream.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if type not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,lastIndexOf,com.google.common.collect.ImmutableList$ReverseImmutableList:lastIndexOf(java.lang.Object),668,672,"/**
* Finds the last occurrence of an object in the list.
* @param object object to search for
* @return last index or -1 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,contains,com.google.common.collect.ImmutableList:contains(java.lang.Object),435,438,"/**
* Checks if a specified object is present in this collection.
* @param object the object to search for
* @return true if found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,indexOf,com.google.common.collect.ImmutableList$ReverseImmutableList:indexOf(java.lang.Object),662,666,"/**
* Returns the index of an object in the list, 
* or -1 if not found. The search is performed 
* using the forward and reverse lists.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,nextEntry,com.google.common.collect.MapMakerInternalMap$HashIterator:nextEntry(),2613,2620,"/**
* Returns the next write-through entry, advancing to the next external entry.
* @throws NoSuchElementException if no more entries are available
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",632,638,"/**
* Creates a new dummy value segment with the specified capacity.
* @param map internal map instance
* @param initialCapacity initial capacity of the segment
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",439,446,"/**
* Creates a new strong key-strong value segment with given capacity.
* @param map the internal map to associate with
* @param initialCapacity the initial capacity of the segment
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",537,543,"/**
* Creates a new strong key weak value segment.
* @param map internal map instance
* @param initialCapacity initial segment capacity
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",744,749,"/**
* Creates a new WeakKeyDummyValueSegment instance for the given map.
* @param map internal map instance
* @param initialCapacity segment's initial capacity
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",833,839,"/**
* Creates a new WeakKeyStrongValueSegment instance for the given map.
* @param map internal map to associate with this segment
* @param initialCapacity initial capacity of the segment
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",933,938,"/**
* Creates a new weak key/weak value segment for the provided internal map.
* @param map the internal map to associate with this segment
* @param initialCapacity the initial capacity of this segment
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getLiveEntry,"com.google.common.collect.MapMakerInternalMap$Segment:getLiveEntry(java.lang.Object,int)",1435,1437,"/**
 * Retrieves live entry by key and hash.
 * @param key object to search
 * @param hash hash code of the key
 * @return LiveEntry object or null if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getEntry,com.google.common.collect.MapMakerInternalMap:getEntry(java.lang.Object),2368,2374,"/**
* Retrieves a map entry by its associated key.
* @param key the object to look up
* @return the corresponding entry or null if not found
*/","* Returns the internal entry for the specified key. The entry may be computing or partially
   * collected. Does not impact recency ordering.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,put,"com.google.common.collect.MapMakerInternalMap$Segment:put(java.lang.Object,int,java.lang.Object,boolean)",1498,1553,"/**
* Inserts or updates a value in the map with given key and hash.
* @param key unique map key
* @param hash hash code for the key
* @param value new value to associate with the key
* @param onlyIfAbsent true if update should only occur if key is absent, false otherwise
* @return existing value if updated (null or value), null otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap$Segment:replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",1624,1669,"/**
* Replaces the value associated with a given key if it matches the old value.
* @param key the key to update
* @param hash the hash code of the key
* @param oldValue the current value to replace
* @param newValue the new value to set
* @return true if the replacement was successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap$Segment:replace(java.lang.Object,int,java.lang.Object)",1671,1710,"/**
* Replaces value associated with a given key.
* @param key key to update
* @param hash hash code of the key
* @param newValue new value to store
* @return old value or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,"com.google.common.collect.MapMakerInternalMap$Segment:remove(java.lang.Object,int)",1712,1751,"/**
* Removes and returns the value associated with the given key from the map.
* @param key key to remove
* @param hash hash code of the key
* @return removed value or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,"com.google.common.collect.MapMakerInternalMap$Segment:remove(java.lang.Object,int,java.lang.Object)",1753,1792,"/**
* Removes the entry with specified key and value from the map.
* @param key unique identifier for removal
* @param hash hash code of the entry to remove
* @param value actual value associated with the entry (optional)
* @return true if entry was removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,run,com.google.common.collect.MapMakerInternalMap$CleanupMapTask:run(),2285,2295,"/**
* Runs cleanup on internal map segments, throwing cancellation exception if map is unavailable.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,postReadCleanup,com.google.common.collect.MapMakerInternalMap$Segment:postReadCleanup(),1988,1992,"/**
* Performs cleanup after reading data, running cleanup task when read count reaches threshold.
*/","* Performs routine cleanup following a read. Normally cleanup happens during writes, or from
     * the cleanupExecutor. If cleanup is not observed after a sufficient number of reads, try
     * cleaning up from the read thread.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$EntrySet:clear(),2781,2784,"/**
* Clears internal map.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$KeySet:clear(),2703,2706,"/**
 * Clears the internal map.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$Values:clear(),2732,2735,"/**
* Clears the internal map.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)",966,975,"/**
* Creates a new entry for the given segment with the specified key and hash.
* @param segment segment to add the entry to
* @param key unique key value
* @param hash key hash code
* @param next optional next entry in linked list
* @return newly created WeakKeyWeakValueEntry or LinkedWeakKeyWeakValueEntry",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,standardContainsKey,com.google.common.collect.ForwardingSortedMap:standardContainsKey(java.lang.Object),132,143,"/**
* Checks if a sorted map contains the specified key.
* @param key object to search for
* @return true if found, false otherwise
*/","* A sensible definition of {@link #containsKey} in terms of the {@code firstKey()} method of
   * {@link #tailMap}. If you override {@link #tailMap}, you may wish to override {@link
   * #containsKey} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,standardSubMap,"com.google.common.collect.ForwardingSortedMap:standardSubMap(java.lang.Object,java.lang.Object)",152,155,"/**
* Returns a submap of this map, containing all mappings in the range [fromKey, toKey].
* @param fromKey inclusive lower bound
* @param toKey exclusive upper bound
*/","* A sensible default implementation of {@link #subMap(Object, Object)} in terms of {@link
   * #headMap(Object)} and {@link #tailMap(Object)}. In some situations, you may wish to override
   * {@link #subMap(Object, Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,size,com.google.common.collect.ForwardingMap:size(),67,70,"/**
* Returns the number of elements in this collection.
* @return The count of items in the underlying collection.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,isEmpty,com.google.common.collect.ForwardingMap:isEmpty(),72,75,"/**
* Checks if this collection is empty.
* @return true if collection contains no elements, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,remove,com.google.common.collect.ForwardingMap:remove(java.lang.Object),77,81,"/**
* Removes an entry by its key and returns associated value.
* @param key object identifier, or null to remove all entries
* @return associated value, or null if not found or removed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,clear,com.google.common.collect.ForwardingMap:clear(),83,86,"/**
 * Clears all data maintained by this object.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,containsKey,com.google.common.collect.ForwardingMap:containsKey(java.lang.Object),88,91,"/**
* Checks if map contains specified key.
* @param key object to search for
* @return true if found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,containsValue,com.google.common.collect.ForwardingMap:containsValue(java.lang.Object),93,96,"/**
* Checks if a given value is present in the map.
* @param value the object to search for
* @return true if found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,get,com.google.common.collect.ForwardingMap:get(java.lang.Object),98,101,"/**
 * Retrieves value associated with given key from underlying data store.
 * @param key object representing key to retrieve value for, or null if no key specified
 * @return value associated with key, or null if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,put,"com.google.common.collect.ForwardingMap:put(java.lang.Object,java.lang.Object)",103,107,"/**
* Puts a value in the map with the given key.
* @param key unique identifier for the entry
* @param value value to be associated with the key
* @return previous value associated with the key or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,putAll,com.google.common.collect.ForwardingMap:putAll(java.util.Map),109,112,"/**
* Copies all entries from the specified map to this map.
* @param map map containing key-value pairs to be copied
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,keySet,com.google.common.collect.ForwardingMap:keySet(),114,117,"/**
* Returns a set of keys from the underlying map.
* @return non-null set of keys
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,values,com.google.common.collect.ForwardingMap:values(),119,122,"/**
* Delegates collection value retrieval to underlying data source.
* @return Collection of values or empty collection if not supported
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,entrySet,com.google.common.collect.ForwardingMap:entrySet(),124,127,"/**
* Returns a set of key-value entries in this map.
* @return non-null set of map entries
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,equals,com.google.common.collect.ForwardingMap:equals(java.lang.Object),129,132,"/**
* Compares the current object with another object for equality.
* @param object the other object to compare with (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,hashCode,com.google.common.collect.ForwardingMap:hashCode(),134,137,"/**
* Returns hash code based on delegate's implementation.
* @see Delegate#hashCode()
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,difference,"com.google.common.collect.Maps:difference(java.util.Map,java.util.Map,com.google.common.base.Equivalence)",527,540,"/**
* Calculates the difference between two maps.
* @param left first map
* @param right second map
* @param valueEquivalence equivalence function for values
* @return MapDifference object containing the differences
*/","* Computes the difference between two maps. This difference is an immutable snapshot of the state
   * of the maps at the time this method is called. It will never change, even if the maps change at
   * a later time.
   *
   * <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps
   * must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}.
   *
   * @param left the map to treat as the ""left"" map for purposes of comparison
   * @param right the map to treat as the ""right"" map for purposes of comparison
   * @param valueEquivalence the equivalence relationship to use to compare values
   * @return the difference between the two maps
   * @since 10.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,difference,"com.google.common.collect.Maps:difference(java.util.SortedMap,java.util.Map)",559,573,"/**
* Computes the difference between two sorted maps.
* @param left   first map (must not be null)
* @param right  second map (must not be null)
* @return a SortedMapDifference object describing the differences
*/","* Computes the difference between two sorted maps, using the comparator of the left map, or
   * {@code Ordering.natural()} if the left map uses the natural ordering of its elements. This
   * difference is an immutable snapshot of the state of the maps at the time this method is called.
   * It will never change, even if the maps change at a later time.
   *
   * <p>Since this method uses {@code TreeMap} instances internally, the keys of the right map must
   * all compare as distinct according to the comparator of the left map.
   *
   * <p><b>Note:</b>If you only need to know whether two sorted maps have the same mappings, call
   * {@code left.equals(right)} instead of this method.
   *
   * @param left the map to treat as the ""left"" map for purposes of comparison
   * @param right the map to treat as the ""right"" map for purposes of comparison
   * @return the difference between the two maps
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/AsyncEventBus.java,<init>,"com.google.common.eventbus.AsyncEventBus:<init>(java.lang.String,java.util.concurrent.Executor)",36,38,"/**
* Initializes an asynchronous event bus instance.
* @param identifier unique identifier
* @param executor Executor instance for asynchronous processing
*/","* Creates a new AsyncEventBus that will use {@code executor} to dispatch events. Assigns {@code
   * identifier} as the bus's name for logging purposes.
   *
   * @param identifier short name for the bus, for logging purposes.
   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut
   *     down the executor after the last event has been posted to this event bus.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/AsyncEventBus.java,<init>,"com.google.common.eventbus.AsyncEventBus:<init>(java.util.concurrent.Executor,com.google.common.eventbus.SubscriberExceptionHandler)",49,51,"/**
* Initializes an instance of AsyncEventBus with custom executor and exception handler.
* @param executor thread pool executor for asynchronous event processing
* @param subscriberExceptionHandler custom exception handler for subscribers
*/","* Creates a new AsyncEventBus that will use {@code executor} to dispatch events.
   *
   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut
   *     down the executor after the last event has been posted to this event bus.
   * @param subscriberExceptionHandler Handler used to handle exceptions thrown from subscribers.
   *     See {@link SubscriberExceptionHandler} for more information.
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/AsyncEventBus.java,<init>,com.google.common.eventbus.AsyncEventBus:<init>(java.util.concurrent.Executor),59,61,"/**
* Initializes an instance of AsyncEventBus with the specified executor.
* @param executor Executor to be used by the bus
*/","* Creates a new AsyncEventBus that will use {@code executor} to dispatch events.
   *
   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut
   *     down the executor after the last event has been posted to this event bus.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,com.google.common.eventbus.EventBus:<init>(java.lang.String),175,178,"/**
 * Constructs an EventBus instance with the specified identifier.
 * @param identifier unique event bus identifier
 */","* Creates a new EventBus with the given {@code identifier}.
   *
   * @param identifier a brief name for this bus, for logging purposes. Should be a valid Java
   *     identifier.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,com.google.common.eventbus.EventBus:<init>(com.google.common.eventbus.SubscriberExceptionHandler),186,188,"/**
* Initializes an instance of EventBus with custom exception handling.
* @param exceptionHandler handler to manage subscriber exceptions
*/","* Creates a new EventBus with the given {@link SubscriberExceptionHandler}.
   *
   * @param exceptionHandler Handler for subscriber exceptions.
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,findMinChild,com.google.common.collect.MinMaxPriorityQueue$Heap:findMinChild(int),617,619,"/**
* Recursively finds the minimum child node at a given index.
* @param index current node index
*/",Returns the minimum child or {@code -1} if no child exists.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,findMinGrandChild,com.google.common.collect.MinMaxPriorityQueue$Heap:findMinGrandChild(int),622,628,"/**
* Recursively finds the minimum grandchild value at a given index.
* @param index current node index
* @return minimum grandchild value or -1 if not found
*/",Returns the minimum grand child or -1 if no grand child exists.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,peekLast,com.google.common.collect.MinMaxPriorityQueue:peekLast(),390,392,"/**
* Returns the last element in the collection without removing it.
* @return Last element or null if empty
*/","* Retrieves, but does not remove, the greatest element of this queue, or returns {@code null} if
   * the queue is empty.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,bubbleUp,"com.google.common.collect.MinMaxPriorityQueue$Heap:bubbleUp(int,java.lang.Object)",565,576,"/**
* Bubbles up a value to the correct position in a heap.
* @param index current index of the value
* @param x new value to insert
*/",Bubbles a value from {@code index} up the appropriate heap if required.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:get(java.lang.Object),873,876,"/**
* Retrieves a sorted set of values associated with the given key.
* @param key unique identifier for which to fetch the value set
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,valueComparator,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:valueComparator(),888,891,"/**
* Returns comparator used to compare values in the collection.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardContains,com.google.common.collect.ForwardingMultiset:standardContains(java.lang.Object),114,117,"/**
* Checks if the collection contains a given object.
* @param object the object to search for (may be null)
* @return true if found, false otherwise
*/","* A sensible definition of {@link #contains} in terms of {@link #count}. If you override {@link
   * #count}, you may wish to override {@link #contains} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardAdd,com.google.common.collect.ForwardingMultiset:standardAdd(java.lang.Object),154,157,"/**
* Adds an element to the collection with default priority (1). 
* @param element element to be added
*/","* A sensible definition of {@link #add(Object)} in terms of {@link #add(Object, int)}. If you
   * override {@link #add(Object, int)}, you may wish to override {@link #add(Object)} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardRemove,com.google.common.collect.ForwardingMultiset:standardRemove(java.lang.Object),178,181,"/**
* Removes specified element from collection and returns true if successful.
* @param element object to be removed (may be null)
*/","* A sensible definition of {@link #remove(Object)} in terms of {@link #remove(Object, int)}. If
   * you override {@link #remove(Object, int)}, you may wish to override {@link #remove(Object)} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardClear,com.google.common.collect.ForwardingMultiset:standardClear(),126,129,"/**
 * Clears all entries in this map. 
 */","* A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #clear} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardCount,com.google.common.collect.ForwardingMultiset:standardCount(java.lang.Object),138,145,"/**
* Retrieves a standard count associated with the given object.
* @param object the object to search for, or null
* @return the corresponding count, or 0 if not found
*/","* A sensible, albeit inefficient, definition of {@link #count} in terms of {@link #entrySet}. If
   * you override {@link #entrySet}, you may wish to override {@link #count} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardHashCode,com.google.common.collect.ForwardingMultiset:standardHashCode(),296,298,"/**
* Computes hash code of this map based on its entries.
* @return hash code value as an integer
*/","* A sensible definition of {@link #hashCode} as {@code entrySet().hashCode()} . If you override
   * {@link #entrySet}, you may wish to override {@link #hashCode} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardToString,com.google.common.collect.ForwardingMultiset:standardToString(),307,310,"/**
* Returns a string representation of this collection.
* @return A string containing the key-value pairs in the collection.","* A sensible definition of {@link #toString} as {@code entrySet().toString()} . If you override
   * {@link #entrySet}, you may wish to override {@link #toString} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,toArray,com.google.common.collect.ImmutableCollection:toArray(),193,197,"/**
* Returns an array representation of this collection.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,toArray,com.google.common.collect.CompactLinkedHashSet:toArray(java.lang.Object[]),236,240,"/**
* Converts this collection to an array.
* @param a the target array (may be null or have incorrect length)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardToArray,com.google.common.collect.ForwardingCollection:standardToArray(java.lang.Object[]),255,257,"/**
* Converts an array to a standard array.
* @param array input array
* @return new standard array instance
*/","* A sensible definition of {@link #toArray(Object[])} in terms of {@link #size} and {@link
   * #iterator}. If you override either of these methods, you may wish to override {@link #toArray}
   * to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:toArray(java.lang.Object[]),1000,1006,"/**
* Converts the delegate to a native array.
* @param array target array, may be null or empty
* @return native array representation of the delegate
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,max,com.google.common.collect.ReverseOrdering:max(java.lang.Iterable),88,91,"/**
* Returns maximum element from the given iterable.
* @param iterable collection of elements to search
* @return maximal element or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,min,com.google.common.collect.ReverseOrdering:min(java.lang.Iterable),67,70,"/**
* Finds the minimum element in an iterable.
* @param iterable collection of elements to search from
* @return minimum element or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,descendingSet,com.google.common.collect.Maps$6:descendingSet(),155,158,"/**
* Returns a set of elements in descending order.
* @return NavigableSet of elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardPollLast,com.google.common.collect.ForwardingNavigableSet:standardPollLast(),141,143,"/**
 * Retrieves the last element from the sorted collection.
 * @return The polled element or null if not available
 */","* A sensible definition of {@link #pollLast} in terms of the {@code descendingIterator} method.
   * If you override {@link #descendingIterator} you may wish to override {@link #pollLast} to
   * forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardLast,com.google.common.collect.ForwardingNavigableSet:standardLast(),150,153,"/**
 * Returns the last element of the collection in descending order.
 * @return The last element (E) or null if empty.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardSubSet,"com.google.common.collect.ForwardingNavigableSet:standardSubSet(java.lang.Object,java.lang.Object)",209,213,"/**
* Returns a subset of elements in the set starting from and up to the specified elements.
* @param fromElement start element (inclusive)
* @param toElement end element (exclusive)
*/","* A sensible definition of {@link #subSet(Object, Object)} in terms of the {@link #subSet(Object,
   * boolean, Object, boolean)} method. If you override {@link #subSet(Object, boolean, Object,
   * boolean)}, you may wish to override {@link #subSet(Object, Object)} to forward to this
   * implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,subSet,"com.google.common.collect.Maps$6:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",181,188,"/**
* Returns a subset of elements in this set, between the specified range.
* @param fromElement start element (inclusive if fromInclusive is true)
* @param fromInclusive whether to include start element
* @param toElement end element (inclusive if toInclusive is true)
* @param toInclusive whether to include end element
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardLower,com.google.common.collect.ForwardingNavigableSet:standardLower(java.lang.Object),71,73,"/**
* Retrieves the smallest element in the set that is greater than or equal to the input.
* @param e input value
* @return the smallest element or null if not found
*/","* A sensible definition of {@link #lower} in terms of the {@code descendingIterator} method of
   * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may
   * wish to override {@link #lower} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardFloor,com.google.common.collect.ForwardingNavigableSet:standardFloor(java.lang.Object),85,87,"/**
* Retrieves the smallest element in the set that is greater than or equal to the input value.
* @param e the input value
* @return the smallest element in the set or null if not found
*/","* A sensible definition of {@link #floor} in terms of the {@code descendingIterator} method of
   * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may
   * wish to override {@link #floor} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardHeadSet,com.google.common.collect.ForwardingNavigableSet:standardHeadSet(java.lang.Object),225,227,"/**
* Returns a view of the range of elements strictly less than the given element.
* @param toElement element that defines the end of the view
*/","* A sensible definition of {@link #headSet(Object)} in terms of the {@link #headSet(Object,
   * boolean)} method. If you override {@link #headSet(Object, boolean)}, you may wish to override
   * {@link #headSet(Object)} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,headSet,"com.google.common.collect.Maps$6:headSet(java.lang.Object,boolean)",215,218,"/**
* Returns a view of the portion of this set from the beginning up to, but not including, the specified element.
* @param toElement element to exclude
* @param inclusive whether to include the specified element
* @return NavigableSet containing elements up to but not including toElement",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardCeiling,com.google.common.collect.ForwardingNavigableSet:standardCeiling(java.lang.Object),99,101,"/**
* Returns the smallest value in the set that is greater than or equal to the given element.
* @param e the target element
* @return the ceiling value or null if not found
*/","* A sensible definition of {@link #ceiling} in terms of the {@code iterator} method of {@link
   * #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to
   * override {@link #ceiling} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardHigher,com.google.common.collect.ForwardingNavigableSet:standardHigher(java.lang.Object),113,115,"/**
* Returns next higher element in set.
* @param e current element
* @return next higher element or null if not found
*/","* A sensible definition of {@link #higher} in terms of the {@code iterator} method of {@link
   * #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to
   * override {@link #higher} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardSubSet,"com.google.common.collect.ForwardingNavigableSet:standardSubSet(java.lang.Object,boolean,java.lang.Object,boolean)",195,201,"/**
* Returns a NavigableSet containing elements in the range [fromElement, toElement].
* @param fromElement lower bound (inclusive if fromInclusive)
* @param fromInclusive whether lower bound is inclusive
* @param toElement upper bound (exclusive if !toInclusive)
* @param toInclusive whether upper bound is inclusive
*/","* A sensible definition of {@link #subSet(Object, boolean, Object, boolean)} in terms of the
   * {@code headSet} and {@code tailSet} methods. In many cases, you may wish to override {@link
   * #subSet(Object, boolean, Object, boolean)} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardTailSet,com.google.common.collect.ForwardingNavigableSet:standardTailSet(java.lang.Object),239,241,"/**
* Returns a view of all elements in this set strictly greater than the given element.
* @param fromElement lower bound for tail set
*/","* A sensible definition of {@link #tailSet(Object)} in terms of the {@link #tailSet(Object,
   * boolean)} method. If you override {@link #tailSet(Object, boolean)}, you may wish to override
   * {@link #tailSet(Object)} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,tailSet,"com.google.common.collect.Maps$6:tailSet(java.lang.Object,boolean)",229,232,"/**
* Returns a view of this set's elements greater than or equal to the specified fromElement.
* @param fromElement the lower bound (inclusive if inclusive=true)
* @param inclusive whether to include the fromElement in the result
* @return a NavigableSet containing all elements >= fromElement",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,comparator,com.google.common.collect.ForwardingSortedSet:comparator(),70,73,"/**
* Returns comparator delegate from underlying data source. 
* @return Comparator object or null if not available
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,first,com.google.common.collect.ForwardingSortedSet:first(),75,79,"/**
* Retrieves the first element from this collection.
* @return the first element or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,headSet,com.google.common.collect.ForwardingSortedSet:headSet(java.lang.Object),81,84,"/**
* Returns a sorted set containing all elements less than the specified element.
* @param toElement upper bound of the returned set (elements < this are included)
* @return SortedSet containing elements less than toElement, or an empty set if none
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,last,com.google.common.collect.ForwardingSortedSet:last(),86,90,"/**
* Retrieves the last element from this collection.
* @return the last element or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,subSet,"com.google.common.collect.ForwardingSortedSet:subSet(java.lang.Object,java.lang.Object)",92,95,"/**
* Returns a subset of elements in this set, between the specified range.
* @param fromElement starting element (inclusive)
* @param toElement ending element (exclusive)
* @return SortedSet containing subset elements or empty set if invalid range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,tailSet,com.google.common.collect.ForwardingSortedSet:tailSet(java.lang.Object),97,100,"/**
* Returns a sorted set of elements greater than or equal to the specified element.
* @param fromElement the lower bound (inclusive) of the returned set
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,descendingIterator,com.google.common.collect.SortedMultisets$NavigableElementSet:descendingIterator(),128,131,"/**
* Returns an iterator over elements in descending order.
* @return Iterator over E objects or null if set is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Row:remove(java.lang.Object),367,376,"/**
* Removes an entry from the backing map and updates internal state.
* @param key object to be removed (null for no-op)
* @return value associated with the removed key or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,clear,com.google.common.collect.StandardTable$Row:clear(),378,385,"/**
* Clears internal data structures and resets invariant state.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,headMap,com.google.common.collect.StandardRowSortedTable$RowSortedMap:headMap(java.lang.Object),122,127,"/**
* Returns a sorted map of entries up to the specified key.
* @param toKey key value delimiter
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,subMap,"com.google.common.collect.StandardRowSortedTable$RowSortedMap:subMap(java.lang.Object,java.lang.Object)",129,135,"/**
* Returns a sub-map of this map, containing entries from the given key range.
* @param fromKey inclusive start key
* @param toKey exclusive end key
* @return SortedMap with subset of original keys and values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,tailMap,com.google.common.collect.StandardRowSortedTable$RowSortedMap:tailMap(java.lang.Object),137,142,"/**
* Returns a sorted map of rows starting from the given key.
* @param fromKey starting key for tail map
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowKeySet,com.google.common.collect.StandardRowSortedTable:rowKeySet(),74,77,"/**
* Returns a sorted set of unique row keys.
*/","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link
   * Table} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowMap,com.google.common.collect.TreeBasedTable:rowMap(),85,88,"/**
* Returns a sorted map of rows where each key is a unique row identifier and the value is a map of column names to values.","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link
   * Table} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowKeySet,com.google.common.collect.HashBasedTable:rowKeySet(),665,668,"/**
* Returns a set of unique row keys.
* @return Unmodifiable Set of R objects representing row keys.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableSet,"com.google.common.collect.Synchronized:navigableSet(java.util.NavigableSet,java.lang.Object)",1576,1580,"/**
* Returns a synchronized version of the given navigable set.
* @param navigableSet original navigable set
* @param mutex synchronization object or null for no sync
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,typePreservingSet,"com.google.common.collect.Synchronized:typePreservingSet(java.util.Set,java.lang.Object)",947,954,"/**
* Returns a type-preserving set instance based on the input set.
* If the input is a SortedSet, returns a SortedSet instance; otherwise,
* returns a regular Set instance. Both methods are called with the same
* parameters (set and mutex).",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,iterator,com.google.common.collect.Synchronized$SynchronizedAsMapValues:iterator(),1447,1456,"/**
* Returns an iterator over collections of type V, synchronized using a shared lock.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,add,"com.google.common.collect.Synchronized$SynchronizedList:add(int,java.lang.Object)",380,385,"/**
* Adds an element at the specified index in the underlying collection.
* @param index position to insert the element
* @param element item to be inserted
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addAll,"com.google.common.collect.Synchronized$SynchronizedList:addAll(int,java.util.Collection)",387,392,"/**
* Adds all elements from the specified collection at the given index.
* @param index insertion point in this list
* @param c collection of elements to add
* @return true if successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedList:get(int),394,399,"/**
* Returns element at specified index, synchronizing access to underlying data source.
* @param index position of element to retrieve
* @return Element object or null if out of bounds
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,indexOf,com.google.common.collect.Synchronized$SynchronizedList:indexOf(java.lang.Object),401,406,"/**
* Synchronized index retrieval for the given object.
* @param o the object to search for
* @return index of the object in this collection, or -1 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lastIndexOf,com.google.common.collect.Synchronized$SynchronizedList:lastIndexOf(java.lang.Object),408,413,"/**
* Synchronized implementation of lastIndexOf operation.
* @param o object to search for in the underlying collection
* @return index of last occurrence or -1 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,listIterator,com.google.common.collect.Synchronized$SynchronizedList:listIterator(),415,418,"/**
* Returns a list iterator over this collection.
* @return ListIterator object to iterate over elements in this collection
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,listIterator,com.google.common.collect.Synchronized$SynchronizedList:listIterator(int),420,423,"/**
* Returns a list iterator with the specified index.
* @param index starting position in the list (0-based)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedList:remove(int),425,430,"/**
* Removes element at specified index.
* @param index position of element to be removed
* @return removed object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,set,"com.google.common.collect.Synchronized$SynchronizedList:set(int,java.lang.Object)",432,437,"/**
 * Sets an element at a specified index in the collection.
 * @param index index of the element to be replaced
 * @param element new element to be inserted
 * @return the old element at the given index or null if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceAll,com.google.common.collect.Synchronized$SynchronizedList:replaceAll(java.util.function.UnaryOperator),439,444,"/**
* Replaces all elements in the collection with the specified unary operation.
* @param operator a function that takes one element and returns its replacement
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sort,com.google.common.collect.Synchronized$SynchronizedList:sort(java.util.Comparator),446,451,"/**
* Sorts elements using the provided comparator.
* @param c optional comparator to determine sorting order
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subList,"com.google.common.collect.Synchronized$SynchronizedList:subList(int,int)",453,458,"/**
* Returns a view of portion of this list.
* @param fromIndex start index of sublist
* @param toIndex end index of sublist
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedList:equals(java.lang.Object),460,468,"/**
* Checks equality with another object.
* @param o the object to compare with, or null
* @return true if equal, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedList:hashCode(),470,475,"/**
* Computes and returns the hash code of this object.
* Ensures thread safety by synchronizing on mutex.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,count,com.google.common.collect.Synchronized$SynchronizedMultiset:count(java.lang.Object),511,516,"/**
* Synchronized wrapper around delegate's count operation.
* @param o object to count instances of
* @return number of instances, or 0 if null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,add,"com.google.common.collect.Synchronized$SynchronizedMultiset:add(java.lang.Object,int)",518,523,"/**
* Adds an element to the collection with synchronization and null handling.
* @param e element to be added
* @param n collection index
* @return result of addition operation
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedMultiset:remove(java.lang.Object,int)",525,530,"/**
* Removes an object from the collection synchronizing access.
* @param o object to be removed or null for no operation
* @param n size of the collection
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setCount,"com.google.common.collect.Synchronized$SynchronizedMultiset:setCount(java.lang.Object,int)",532,537,"/**
* Sets element count in a thread-safe manner.
* @param element object to update count for
* @param count new count value
* @return updated count value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setCount,"com.google.common.collect.Synchronized$SynchronizedMultiset:setCount(java.lang.Object,int,int)",539,544,"/**
* Sets user count by updating the underlying counter.
* @param element user data to update
* @param oldCount current count value
* @param newCount updated count value
* @return true if successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,elementSet,com.google.common.collect.Synchronized$SynchronizedMultiset:elementSet(),546,554,"/**
* Returns a set of elements in this collection, synchronizing access.
* @return Set containing all elements or an empty set if none
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entrySet,com.google.common.collect.Synchronized$SynchronizedMultiset:entrySet(),556,564,"/**
* Returns a set of multiset entries.
* @return Set of Multiset.Entry objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedMultiset:equals(java.lang.Object),566,574,"/**
* Compares this object with the given object for equality.
* @param o the object to compare with
* @return true if equal, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedMultiset:hashCode(),576,581,"/**
* Returns a hash code for this object, synchronized to ensure thread safety.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedDeque:delegate(),1906,1909,"/**
* Returns the underlying deque from the superclass.
* @return The wrapped deque instance.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,element,com.google.common.collect.Synchronized$SynchronizedQueue:element(),1857,1862,"/**
* Returns the underlying element of this wrapper object.
* @return the wrapped element instance.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,offer,com.google.common.collect.Synchronized$SynchronizedQueue:offer(java.lang.Object),1864,1869,"/**
* Offers an element to the underlying collection.
* @param e the element to be offered
* @return true if the element was successfully added, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,peek,com.google.common.collect.Synchronized$SynchronizedQueue:peek(),1871,1876,"/**
* Retrieves the next element without removing it from the queue.
* @return next element or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,poll,com.google.common.collect.Synchronized$SynchronizedQueue:poll(),1878,1883,"/**
* Retrieves an element from the queue using the underlying delegate.
* @return polled element or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedQueue:remove(),1885,1890,"/**
* Removes and returns an element from this collection.
* @return collection's element or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedSet:equals(java.lang.Object),282,290,"/**
* Compares this object with another for equality.
* @param o the object to compare with
* @return true if both objects are equal, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedSet:hashCode(),292,297,"/**
* Returns hash code of this object, synchronizing with mutex to ensure thread safety.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSortedSet:delegate(),313,316,"/**
* Returns a sorted set view of this collection.
* @return SortedSet containing all elements in this collection
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedBiMap:values(),1363,1371,"/**
* Returns a set of values from the delegate.
* @return non-null set of values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forcePut,"com.google.common.collect.Synchronized$SynchronizedBiMap:forcePut(java.lang.Object,java.lang.Object)",1373,1378,"/**
* Forces a put operation on the map with synchronization.
* @param key unique map key
* @param value associated value to store
* @return stored value or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedAsMap:get(java.lang.Object),1402,1408,"/**
* Retrieves a collection of values associated with the given object key.
* @param key object to fetch collection for
* @return Collection of values or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedNavigableMap:delegate(),1609,1612,"/**
* Delegates to parent's navigation map.
* @return Navigation map of type K to V or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,comparator,com.google.common.collect.Synchronized$SynchronizedSortedMap:comparator(),1294,1299,"/**
* Returns a comparator for objects of type K, synchronized on mutex.
* @return Comparator or null if not available
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,firstKey,com.google.common.collect.Synchronized$SynchronizedSortedMap:firstKey(),1301,1306,"/**
 * Returns the first key in the backing map.
 * @return the first key or null if empty.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lastKey,com.google.common.collect.Synchronized$SynchronizedSortedMap:lastKey(),1315,1320,"/**
* Retrieves the last key from the underlying map.
* @return The last key or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedListMultimap:get(java.lang.Object),802,807,"/**
* Retrieves a list of items associated with a given key.
* @param key unique identifier
* @return List of V objects or empty list if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",816,821,"/**
* Replaces values in a backing data store with the given values.
* @param key unique identifier for the data to replace
* @param values new values to insert; may be empty or null if not applicable
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedSetMultimap:get(java.lang.Object),847,852,"/**
* Retrieves a set of values associated with a given key.
* @param key unique identifier
* @return non-null set of values or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedSetMultimap:removeAll(java.lang.Object),854,859,"/**
* Removes all elements associated with the given key.
* @param key object to remove, may be null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",861,866,"/**
* Replaces values in a map with the given key.
* @param key unique key identifier
* @param values new values to replace with
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entries,com.google.common.collect.Synchronized$SynchronizedSetMultimap:entries(),868,876,"/**
* Returns a set of key-value pairs in the map.
* @return Set of Map.Entry objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:delegate(),897,900,"/**
* Returns a sorted set multimap instance. 
* @return SortedSetMultimap<K, V> implementation of the underlying data structure",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,synchronizedDeque,com.google.common.collect.Queues:synchronizedDeque(java.util.Deque),490,493,"/**
* Wraps a Deque in a synchronized implementation.
* @param deque the original Deque to synchronize
* @return a synchronized Deque instance
*/","* Returns a synchronized (thread-safe) deque backed by the specified deque. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing deque is accomplished
   * through the returned deque.
   *
   * <p>It is imperative that the user manually synchronize on the returned deque when accessing any
   * of the deque's iterators:
   *
   * {@snippet :
   * Deque<E> deque = Queues.synchronizedDeque(Queues.<E>newArrayDeque());
   * ...
   * deque.add(element);  // Needn't be in synchronized block
   * ...
   * synchronized (deque) {  // Must synchronize on deque!
   *   Iterator<E> i = deque.iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned deque will be serializable if the specified deque is serializable.
   *
   * @param deque the deque to be wrapped in a synchronized view
   * @return a synchronized view of the specified deque
   * @since 15.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,typePreservingCollection,"com.google.common.collect.Synchronized:typePreservingCollection(java.util.Collection,java.lang.Object)",933,945,"/**
* Creates a type-preserving collection from the given collection and mutex.
* @param collection input collection to preserve
* @param mutex optional synchronization object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,rangeContains,com.google.common.collect.TreeBasedTable$TreeRow:rangeContains(java.lang.Object),219,223,"/**
* Checks if an object is within the defined range.
* @param o Object to check; can be null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,rotateLeft,com.google.common.collect.TreeMultiset$AvlNode:rotateLeft(),976,986,"/**
* Rotates the AVL tree to the left.
* @return the new top node of the rotated tree
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,rotateRight,com.google.common.collect.TreeMultiset$AvlNode:rotateRight(),988,998,"/**
* Rotates the tree to the right, returning the new top node.
* @return The root of the rotated AVL tree
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,aggregateForEntries,com.google.common.collect.TreeMultiset:aggregateForEntries(com.google.common.collect.TreeMultiset$Aggregate),166,176,"/**
* Calculates the aggregated value for entries within specified range.
* @param aggr Aggregate object used to calculate tree aggregates
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedCharEscaper.java,<init>,"com.google.common.escape.ArrayBasedCharEscaper:<init>(java.util.Map,char,char)",65,69,"/**
* Creates an array-based character escaper with specified replacements and safety range.
* @param replacementMap map of chars to replace
* @param safeMin minimum safe ASCII value
* @param safeMax maximum safe ASCII value
*/","* Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe
   * range. If {@code safeMax < safeMin} then no characters are considered safe.
   *
   * <p>If a character has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param replacementMap a map of characters to their escaped representations
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,toEscaper,com.google.common.escape.CharEscaperBuilder:toEscaper(),124,126,"/**
* Converts this Escaper instance to a CharArrayDecorator.
* @return Decorated escaper with character array data
*/","* Convert this builder into a char escaper which is just a decorator around the underlying array
   * of replacement char[]s.
   *
   * @return an escaper that escapes based on the underlying array.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedUnicodeEscaper.java,<init>,"com.google.common.escape.ArrayBasedUnicodeEscaper:<init>(java.util.Map,int,int,java.lang.String)",72,78,"/**
* Creates an ArrayBasedUnicodeEscaper instance from a replacement map.
* @param replacementMap mapping of characters to escaped strings
* @param safeMin minimum Unicode code point for safe range
* @param safeMax maximum Unicode code point for safe range
* @param unsafeReplacement replacement string for unsafe characters","* Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified
   * safe range. If {@code safeMax < safeMin} then no code points are considered safe.
   *
   * <p>If a code point has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param replacementMap a map of characters to their escaped representations
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range
   * @param unsafeReplacement the default replacement for unsafe characters or null if no default
   *     replacement is required",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,checkedConnections,com.google.common.graph.StandardNetwork:checkedConnections(java.lang.Object),178,185,"/**
* Retrieves the network connections for a given node, throwing an exception if not found.
* @param node unique node identifier
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,checkedConnections,com.google.common.graph.StandardValueGraph:checkedConnections(java.lang.Object),159,166,"/**
* Retrieves the connections for a given node from the cache, throwing an exception if it's not found.
* @param node the node to fetch connections for
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnectingInternal,"com.google.common.graph.StandardValueGraph:hasEdgeConnectingInternal(java.lang.Object,java.lang.Object)",172,175,"/**
* Checks if node V is connected to internal nodes via node U.
* @param nodeU source node
* @param nodeV target node
* @return true if edge exists, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefaultInternal,"com.google.common.graph.StandardValueGraph:edgeValueOrDefaultInternal(java.lang.Object,java.lang.Object,java.lang.Object)",177,186,"/**
* Retrieves edge value from node V or returns default value if not found.
* @param nodeU source node
* @param nodeV target node
* @param defaultValue fallback value to return when edge is null
* @return edge value or default value as a nullable V object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,newTraversal,com.google.common.graph.Traverser$2:newTraversal(),345,345,"/**
* Creates a new traversal instance.
* @return A newly created traversal object. 
* The actual type of the returned object is determined by subclasses.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putBytesInternal,com.google.common.hash.AbstractStreamingHasher:putBytesInternal(java.nio.ByteBuffer),110,134,"/**
* Processes input bytes into a hasher, filling internal buffers as needed.
* @param readBuffer ByteBuffer containing input data
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putByte,com.google.common.hash.AbstractStreamingHasher:putByte(byte),146,152,"/**
* Adds a byte to the hasher's buffer.
* @return This hasher instance for chaining.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putShort,com.google.common.hash.AbstractStreamingHasher:putShort(short),154,160,"/**
* Adds a short value to the hasher.
* @param s short integer value to hash
* @return this Hasher instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putChar,com.google.common.hash.AbstractStreamingHasher:putChar(char),162,168,"/**
* Puts a single character into the hasher and returns itself.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putInt,com.google.common.hash.AbstractStreamingHasher:putInt(int),170,176,"/**
* Adds an integer value to the hasher.
* @param i integer value to hash
* @return this Hasher instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putLong,com.google.common.hash.AbstractStreamingHasher:putLong(long),178,184,"/**
* Appends a long value to the hasher and possibly flushes it if full.
* @return this hasher instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,fingerprint,"com.google.common.hash.FarmHashFingerprint64:fingerprint(byte[],int,int)",67,80,"/**
* Computes a fingerprint for the given byte array slice.
* @param bytes byte array to process
* @param offset starting offset in the byte array
* @param length length of the byte array slice
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,fingerprint,"com.google.common.hash.Fingerprint2011:fingerprint(byte[],int,int)",58,74,"/**
* Computes a fingerprint of the given byte array.
* @param bytes input data
* @param offset starting position in bytes
* @param length number of bytes to process
* @return unique 64-bit hash value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromBytes,com.google.common.hash.HashCode:fromBytes(byte[]),237,240,"/**
* Creates a HashCode instance from a byte array.
* @param bytes input byte array (must be at least 1 byte)
*/","* Creates a {@code HashCode} from a byte array. The array is defensively copied to preserve the
   * immutability contract of {@code HashCode}. The array cannot be empty.
   *
   * @since 15.0 (since 12.0 in HashCodes)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromString,com.google.common.hash.HashCode:fromString(java.lang.String),335,350,"/**
* Converts a string of hexadecimal digits into a HashCode object.
* @param string input string containing hexadecimal characters
*/","* Creates a {@code HashCode} from a hexadecimal ({@code base 16}) encoded string. The string must
   * be at least 2 characters long, and contain only valid, lower-cased hexadecimal characters.
   *
   * <p>This method accepts the exact format generated by {@link #toString}. If you require more
   * lenient {@code base 16} decoding, please use {@link com.google.common.io.BaseEncoding#decode}
   * (and pass the result to {@link #fromBytes}).
   *
   * @since 15.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,combineOrdered,com.google.common.hash.Hashing:combineOrdered(java.lang.Iterable),698,712,"/**
* Combines multiple hash codes into a single hash code.
* @param hashCodes iterable of hash codes to combine
* @return combined HashCode object or null if invalid input
*/","* Returns a hash code, having the same bit length as each of the input hash codes, that combines
   * the information of these hash codes in an ordered fashion. That is, whenever two equal hash
   * codes are produced by two calls to this method, it is <i>as likely as possible</i> that each
   * was computed from the <i>same</i> input hash codes in the <i>same</i> order.
   *
   * @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all
   *     have the same bit length",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,combineUnordered,com.google.common.hash.Hashing:combineUnordered(java.lang.Iterable),723,736,"/**
* Combines multiple unordered hash codes into a single hash code.
* @param hashCodes iterable collection of hash codes to combine
* @return combined HashCode object or null if invalid input
*/","* Returns a hash code, having the same bit length as each of the input hash codes, that combines
   * the information of these hash codes in an unordered fashion. That is, whenever two equal hash
   * codes are produced by two calls to this method, it is <i>as likely as possible</i> that each
   * was computed from the <i>same</i> input hash codes in <i>some</i> order.
   *
   * @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all
   *     have the same bit length",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,hash,com.google.common.hash.MacHashFunction$MacHasher:hash(),134,139,"/**
* Calculates and returns the hash code based on the MAC calculation.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,hash,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:hash(),161,168,"/**
* Computes and returns a hash code based on the underlying digest.
* @return a unique hash code representation
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,makeHash,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:makeHash(),169,189,"/**
* Computes and returns a 128-bit hash code using the FNV-1a mixing function.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,makeHash,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:makeHash(),114,122,"/**
* Computes a hash code based on the accumulated CRC values.
* @return A unique hash code value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,fmix,"com.google.common.hash.Murmur3_32HashFunction:fmix(int,int)",259,267,"/**
* Calculates a mixed hash code using the FNV-1a algorithm.
* @param h1 initial hash value
* @param length input length (used to mix with hash)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/ChecksumHashFunction.java,hash,com.google.common.hash.ChecksumHashFunction$ChecksumHasher:hash(),91,104,"/**
* Computes hash code based on checksum value, respecting bit size.
* @return 32-bit or 64-bit hash code depending on bits
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,makeHash,com.google.common.hash.SipHashFunction$SipHasher:makeHash(),145,155,"/**
* Calculates and returns a hash code based on internal state.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacMd5,com.google.common.hash.Hashing:hmacMd5(byte[]),318,320,"/**
* Creates an HMAC-MD5 hash function using the provided secret key.
* @param key secret key to use for hashing
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * MD5 (128 hash bits) hash function and a {@link SecretKeySpec} created from the given byte array
   * and the MD5 algorithm.
   *
   * <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other
   * future-proof algorithms <a
   * href=""https://datatracker.ietf.org/doc/html/rfc6151#section-2.3"">over {@code hmacMd5}</a>.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha1,com.google.common.hash.Hashing:hmacSha1(byte[]),342,344,"/**
* Creates an HMAC SHA-1 hash function instance with the given secret key.
* @param key secret key bytes, must not be null
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-1 (160 hash bits) hash function and a {@link SecretKeySpec} created from the given byte
   * array and the SHA-1 algorithm.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha256,com.google.common.hash.Hashing:hmacSha256(byte[]),366,368,"/**
* Creates an HMAC SHA-256 hash function with the given secret key.
* @param key secret key to use for hashing
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-256 (256 hash bits) hash function and a {@link SecretKeySpec} created from the given byte
   * array and the SHA-256 algorithm.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha512,com.google.common.hash.Hashing:hmacSha512(byte[]),390,392,"/**
* Initializes HMAC-SHA-512 hash function with provided secret key.
* @param key secret key for HMAC calculation
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-512 (512 hash bits) hash function and a {@link SecretKeySpec} created from the given byte
   * array and the SHA-512 algorithm.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,com.google.common.io.ByteSource$EmptyByteSource:<init>(),652,654,"/**
* Initializes an empty byte source with zero-length buffer.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,wrap,com.google.common.io.ByteSource:wrap(byte[]),427,429,"/**
* Wraps a byte array as a ByteSource.
* @param b input byte array
*/","* Returns a view of the given byte array as a {@link ByteSource}. To view only a specific range
   * in the array, use {@code ByteSource.wrap(b).slice(offset, length)}.
   *
   * <p>Note that the given byte array may be passed directly to methods on, for example, {@code
   * OutputStream} (when {@code copyTo(OutputStream)} is called on the resulting {@code
   * ByteSource}). This could allow a malicious {@code OutputStream} implementation to modify the
   * contents of the array, but provides better performance in the normal case.
   *
   * @since 15.0 (since 14.0 as {@code ByteStreams.asByteSource(byte[])}).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,newInstance,"com.google.common.io.BaseEncoding$Base16Encoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",992,995,"/**
* Creates a new instance of Base16 encoding with specified Alphabet. 
* @param alphabet encoding alphabet to use
* @param paddingChar optional character for padding (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,newInstance,"com.google.common.io.BaseEncoding$Base64Encoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",1049,1052,"/**
* Creates a new instance of Base64 encoding.
* @param alphabet Alphabet instance to use
* @param paddingChar Optional character for padding (null if not used)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,omitPadding,com.google.common.io.BaseEncoding$StandardBaseEncoding:omitPadding(),851,854,"/**
* Returns an encoding with padding omitted or a new instance without padding. 
* @return BaseEncoding object without padding if present, otherwise this instance.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,withPadChar,com.google.common.io.BaseEncoding$StandardBaseEncoding:withPadChar(char),856,864,"/**
* Updates the base encoding with a new padding character.
* @param padChar new padding character
* @return updated BaseEncoding instance or self if unchanged
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$EmptyCharSource:<init>(),677,679,"/**
 * Initializes an empty character source with an empty string.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,wrap,com.google.common.io.CharSource:wrap(java.lang.CharSequence),492,496,"/**
* Wraps a CharSequence into either a String or CharSequence CharSource.
* @param charSequence input character sequence to be wrapped
* @return CharSource instance wrapping the input sequence
*/","* Returns a view of the given character sequence as a {@link CharSource}. The behavior of the
   * returned {@code CharSource} and any {@code Reader} instances created by it is unspecified if
   * the {@code charSequence} is mutated while it is being read, so don't do that.
   *
   * @since 15.0 (since 14.0 as {@code CharStreams.asCharSource(String)})",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,openStream,com.google.common.io.CharSource$AsByteSource:openStream(),524,527,"/**
* Returns an input stream from this CharSource, wrapped with buffering and decoding.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,com.google.common.io.CharSink:writeLines(java.lang.Iterable),109,111,"/**
* Writes an iterable of lines to output using system-defined newline character.
* @param lines iterable of line strings
*/","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the operating system's default line separator. This method is equivalent to {@code
   * writeLines(lines, System.getProperty(""line.separator""))}.
   *
   * @throws IOException if an I/O error occurs while writing to this sink",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,com.google.common.io.CharSink:writeLines(java.util.stream.Stream),132,134,"/**
* Writes a stream of character sequences to the output, separated by line separators.
* @param lines input sequence of characters
*/","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the operating system's default line separator. This method is equivalent to {@code
   * writeLines(lines, System.getProperty(""line.separator""))}.
   *
   * @throws IOException if an I/O error occurs while writing to this sink
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,write,com.google.common.io.FileBackedOutputStream:write(byte[]),207,210,"/**
 * Writes an array of bytes to the underlying stream. 
 * This is a convenience method that calls write(array, offset, length) with default offset and length values.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,read,"com.google.common.io.ReaderInputStream:read(byte[],int,int)",129,191,"/**
* Reads bytes from the underlying stream into the given buffer, starting at the specified offset and reading up to len bytes.
* @param b output buffer
* @param off offset in the buffer where data should be written
* @param len maximum number of bytes to read
* @return actual number of bytes read, or -1 if end-of-stream encountered before reading any bytes",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openStream,com.google.common.io.ByteSource$ConcatenatedByteSource:openStream(),681,684,"/**
* Returns an InputStream that aggregates data from multiple sources.
* @throws IOException if an I/O error occurs while opening streams
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,skip,com.google.common.io.MultiInputStream:skip(long),107,120,"/**
* Skips n bytes from the underlying input stream, returning the actual number of bytes skipped.
* @param n number of bytes to skip
* @return actual number of bytes skipped or 0 if not possible
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,openStream,com.google.common.io.CharSource$ConcatenatedCharSource:openStream(),695,698,"/**
* Opens and returns a reader stream to iterate over sources.
* @throws IOException if an I/O error occurs
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$Partition:get(int),718,724,"/**
* Retrieves a sublist of elements from the underlying list at the specified index.
* @param index target index in the list
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long,double,com.google.common.hash.BloomFilter$Strategy)",438,463,"/**
* Creates a Bloom filter with specified parameters.
* @param funnel data funnel to use for hash functions
* @param expectedInsertions expected number of insertions
* @param fpp false positive probability threshold
* @param strategy strategy to use for creating the filter
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,readFrom,"com.google.common.hash.BloomFilter:readFrom(java.io.InputStream,com.google.common.hash.Funnel)",618,661,"/**
* Reads a BloomFilter from an InputStream and deserializes its components.
* @param in the input stream containing the filter's state
* @param funnel a functor to serialize/deserialize the filter's elements
* @return the reconstructed BloomFilter object or throws IOException if failed
*/","* Reads a byte stream, which was written by {@linkplain #writeTo(OutputStream)}, into a {@code
   * BloomFilter}.
   *
   * <p>The {@code Funnel} to be used is not encoded in the stream, so it must be provided here.
   * <b>Warning:</b> the funnel provided <b>must</b> behave identically to the one used to populate
   * the original Bloom filter!
   *
   * @throws IOException if the InputStream throws an {@code IOException}, or if its data does not
   *     appear to be a BloomFilter serialized using the {@linkplain #writeTo(OutputStream)} method.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,mean,com.google.common.math.DoubleMath:mean(java.lang.Iterable),488,493,"/**
* Calculates the arithmetic mean of an iterable collection of numbers.
* @param values Collection of numbers for which to calculate the mean
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of
   * {@code values}.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * @param values a nonempty series of values, which will be converted to {@code double} values
   *     (this may cause loss of precision)
   * @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value
   * @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite
   *     values.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,log2,"com.google.common.math.DoubleMath:log2(double,java.math.RoundingMode)",239,279,"/**
* Computes the base-2 logarithm of a double value with specified rounding mode.
* @param x input value, must be positive and finite
* @param mode RoundingMode to apply
* @return integer log2(x) or rounded result if necessary
*/","* Returns the base 2 logarithm of a double value, rounded with the specified rounding mode to an
   * {@code int}.
   *
   * <p>Regardless of the rounding mode, this is faster than {@code (int) log2(x)}.
   *
   * @throws IllegalArgumentException if {@code x <= 0.0}, {@code x} is NaN, or {@code x} is
   *     infinite",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundIntermediate,"com.google.common.math.DoubleMath:roundIntermediate(double,java.math.RoundingMode)",53,111,"/**
* Rounds a double value according to the specified RoundingMode.
* @param mode rounding mode
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,ensureTableCapacity,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:ensureTableCapacity(int),846,859,"/**
* Ensures the hash table capacity meets or exceeds the specified minimum.
* @param minCapacity minimum required capacity
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,hashFloodingDetected,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:hashFloodingDetected(java.lang.Object[]),889,925,"/**
* Detects hash flooding in a given table by finding consecutive null elements.
* @param hashTable the input array to check
* @return true if hash flooding is detected, false otherwise
*/","* Checks the whole hash table for poor hash distribution. Takes O(n) in the worst case, O(n /
     * log n) on average.
     *
     * <p>The online hash flooding detecting in RegularSetBuilderImpl.add can detect e.g. many
     * exactly matching hash codes, which would cause construction to take O(n^2), but can't detect
     * e.g. hash codes adversarially designed to go into ascending table locations, which keeps
     * construction O(n) (as desired) but then can have O(n) queries later.
     *
     * <p>If this returns false, then no query can take more than O(log n).
     *
     * <p>Note that for a RegularImmutableSet with elements with truly random hash codes, contains
     * operations take expected O(1) time but with high probability take O(log n) for at least some
     * element. (https://en.wikipedia.org/wiki/Linear_probing#Analysis)
     *
     * <p>This method may return {@code true} even on truly random input, but {@code
     * ImmutableSetTest} tests that the probability of that is low.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,offer,com.google.common.collect.TopKSelector:offer(java.lang.Object),138,159,"/**
* Offers an element to the buffer, maintaining a threshold value and resizing as necessary.
* @param elem element to add
*/","* Adds {@code elem} as a candidate for the top {@code k} elements. This operation takes amortized
   * O(1) time.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Alphabet:<init>(java.lang.String,char[])",445,447,"/**
* Constructs an Alphabet instance from a string and character array.
* @param name string representation of the alphabet
* @param chars underlying character array for encoding/decoding
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,ignoreCase,com.google.common.io.BaseEncoding$Alphabet:ignoreCase(),494,517,"/**
* Converts to case-insensitive alphabet by copying and modifying the decoding table.
* @return A new Alphabet instance with modified decodabet
*/",Returns an equivalent {@code Alphabet} except it ignores case.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,growIfNeeded,com.google.common.collect.MinMaxPriorityQueue:growIfNeeded(),958,965,"/**
* Dynamically resizes the queue if current size exceeds capacity.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,least,"com.google.common.collect.TopKSelector:least(int,java.util.Comparator)",79,82,"/**
* Creates a selector to find the top K elements based on the given comparator.
* @param k number of top elements to select
* @param comparator comparison function for sorting
*/","* Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it,
   * relative to the specified comparator, and returns them via {@link #topK} in ascending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,greatest,"com.google.common.collect.TopKSelector:greatest(int,java.util.Comparator)",101,104,"/**
* Creates a TopKSelector that returns the greatest k elements.
* @param k number of top elements to select
* @param comparator comparison function for sorting elements
* @return TopKSelector instance with reversed ordering
*/","* Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it,
   * relative to the specified comparator, and returns them via {@link #topK} in descending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,inverse,com.google.common.math.LinearTransformation$VerticalLinearTransformation:inverse(),262,266,"/**
* Computes and returns the inverse linear transformation.
* @return The inverse linear transformation, or this instance if it's its own inverse
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,and,"com.google.common.math.LinearTransformation$LinearTransformationBuilder:and(double,double)",82,90,"/**
* Creates a LinearTransformation object based on two points.
* @param x2 the x-coordinate of the second point
* @param y2 the y-coordinate of the second point
*/","* Finish building an instance which also maps {@code x = x2} to {@code y = y2}. These values
     * must not both be identical to the values given in the first mapping. If only the {@code x}
     * values are identical, the transformation is vertical. If only the {@code y} values are
     * identical, the transformation is horizontal (i.e. the slope is zero).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,leastSquaresFit,com.google.common.math.PairedStats:leastSquaresFit(),181,198,"/**
* Computes the least squares linear fit of data points.
* @return Linear transformation mapping x to y with optimal slope and intercept
*/","* Returns a linear transformation giving the best fit to the data according to <a
   * href=""http://mathworld.wolfram.com/LeastSquaresFitting.html"">Ordinary Least Squares linear
   * regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and
   * either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is
   * guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y}
   * data, and vertical if there is variance in the {@code y} data but not the {@code x} data.
   *
   * <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This
   * error is defined as the square root of the mean of the squares of the differences between the
   * actual {@code y} values of the data and the values predicted by the fit for the {@code x}
   * values (i.e. it is the square root of the mean of the squares of the vertical distances between
   * the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 -
   * R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's
   * correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}).
   *
   * <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a
   * fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit
   * does not normally minimize that error: to do that, you should swap the roles of {@code x} and
   * {@code y}.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link
   * LinearTransformation#forNaN()}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     both the {@code x} and {@code y} dataset must have zero population variance",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,leastSquaresFit,com.google.common.math.PairedStatsAccumulator:leastSquaresFit(),214,231,"/**
* Computes the least-squares linear transformation fitting this dataset.
* @return a LinearTransformation object representing the best-fit line
*/","* Returns a linear transformation giving the best fit to the data according to <a
   * href=""http://mathworld.wolfram.com/LeastSquaresFitting.html"">Ordinary Least Squares linear
   * regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and
   * either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is
   * guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y}
   * data, and vertical if there is variance in the {@code y} data but not the {@code x} data.
   *
   * <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This
   * error is defined as the square root of the mean of the squares of the differences between the
   * actual {@code y} values of the data and the values predicted by the fit for the {@code x}
   * values (i.e. it is the square root of the mean of the squares of the vertical distances between
   * the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 -
   * R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's
   * correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}).
   *
   * <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a
   * fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit
   * does not normally minimize that error: to do that, you should swap the roles of {@code x} and
   * {@code y}.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link
   * LinearTransformation#forNaN()}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     both the {@code x} and {@code y} dataset have zero population variance",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,inverse,com.google.common.math.LinearTransformation$RegularLinearTransformation:inverse(),206,210,"/**
* Calculates and returns the inverse of this linear transformation.
* If an existing inverse is cached, it's reused; otherwise, a new one is created. 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,isPrime,com.google.common.math.LongMath:isPrime(long),984,1036,"/**
* Determines whether a given number is prime.
* @param n the number to check
* @return true if prime, false otherwise
*/","* Returns {@code true} if {@code n} is a <a
   * href=""http://mathworld.wolfram.com/PrimeNumber.html"">prime number</a>: an integer <i>greater
   * than one</i> that cannot be factored into a product of <i>smaller</i> positive integers.
   * Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be
   * factored into smaller positive integers).
   *
   * <p>To test larger numbers, use {@link BigInteger#isProbablePrime}.
   *
   * @throws IllegalArgumentException if {@code n} is negative
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,log10,"com.google.common.math.BigIntegerMath:log10(java.math.BigInteger,java.math.RoundingMode)",141,206,"/**
* Computes the base-10 logarithm of a BigInteger with specified rounding mode.
* @param x input number
* @param mode rounding mode (FLOOR, CEILING, etc.)
* @return log10(x) as an int or int + 1 if rounding to nearest
*/","* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of ten",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,binomial,"com.google.common.math.LongMath:binomial(int,int)",791,849,"/**
* Calculates the binomial coefficient (n choose k) using various optimizations.
* @param n input value
* @param k input value
* @return binomial coefficient or Long.MAX_VALUE if too large
*/","* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
   * {@code k}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}.
   *
   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,toString,com.google.common.math.PairedStats:toString(),240,254,"/**
* Returns a string representation of the object, including statistics and covariance.
* @return String representation or empty if no data available
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,meanOf,com.google.common.math.Stats:meanOf(java.lang.Iterable),474,476,"/**
* Calculates the arithmetic mean of an iterable collection of numbers.
* @param values collection of numeric values
* @return mean value or NaN if empty or null input
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>The definition of the mean is the same as {@link Stats#mean}.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)
   * @throws IllegalArgumentException if the dataset is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,add,"com.google.common.math.PairedStatsAccumulator:add(double,double)",46,67,"/**
* Updates running statistics of series with new values, adding to mean and count.
* @param x value in the first series
* @param y value in the second series
*/",Adds the given pair of values to the dataset.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.lang.Iterable),84,88,"/**
* Adds all numbers from an iterable to this collection.
* @param values iterable of numbers to add
*/","* Adds the given values to the dataset.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.Iterator),96,100,"/**
* Adds all numeric values from an iterator to this collection.
* @param values iterator of numbers to be added
*/","* Adds the given values to the dataset.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(com.google.common.math.Stats),171,176,"/**
* Adds all stats from the provided Stats object.
* @param values collection of statistics to add
*/","* Adds the given statistics to the dataset, as if the individual values used to compute the
   * statistics had been added directly.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(com.google.common.math.StatsAccumulator),184,189,"/**
* Accumulates statistics from the provided StatsAccumulator.
* @param values input statistics to add
*/","* Adds the given statistics to the dataset, as if the individual values used to compute the
   * statistics had been added directly.
   *
   * @since 28.2",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,selectInPlace,"com.google.common.math.Quantiles:selectInPlace(int,double[],int,int)",537,565,"/**
* Partitions the array [from, to] around the required element and updates the range.
* @param required the target index
* @param array the input array
* @param from start of current range
* @param to end of current range
*/","* Performs an in-place selection to find the element which would appear at a given index in a
   * dataset if it were sorted. The following preconditions should hold:
   *
   * <ul>
   *   <li>{@code required}, {@code from}, and {@code to} should all be indexes into {@code array};
   *   <li>{@code required} should be in the range [{@code from}, {@code to}];
   *   <li>all the values with indexes in the range [0, {@code from}) should be less than or equal
   *       to all the values with indexes in the range [{@code from}, {@code to}];
   *   <li>all the values with indexes in the range ({@code to}, {@code array.length - 1}] should be
   *       greater than or equal to all the values with indexes in the range [{@code from}, {@code
   *       to}].
   * </ul>
   *
   * This method will reorder the values with indexes in the range [{@code from}, {@code to}] such
   * that all the values with indexes in the range [{@code from}, {@code required}) are less than or
   * equal to the value with index {@code required}, and all the values with indexes in the range
   * ({@code required}, {@code to}] are greater than or equal to that value. Therefore, the value at
   * {@code required} is the value which would appear at that index in the sorted dataset.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.util.stream.DoubleStream),279,288,"/**
* Adds all elements from the given DoubleStream to the builder.
* @param stream DoubleStream containing numbers to add
*/","* Appends all values from {@code stream}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.
     *
     * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.lang.Iterable),249,258,"/**
* Adds all specified double values to the builder.
* @param values iterable of double values
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,writeReplace,com.google.common.primitives.ImmutableDoubleArray:writeReplace(),639,641,"/**
* Returns serialized representation of this object. 
* This implementation simply calls trimmed().",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,contains,com.google.common.primitives.ImmutableDoubleArray$AsList:contains(java.lang.Object),504,507,"/**
* Checks if a specified object is present in the collection.
* @param target object to search for (may be null)
* @return true if found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.util.stream.IntStream),276,285,"/**
* Adds all integers from the given stream to a builder.
* @param stream IntStream containing integers to add
*/","* Appends all values from {@code stream}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.
     *
     * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.lang.Iterable),246,255,"/**
* Adds all integers from the given iterable to the builder.
* @param values iterable of integers to be added
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,writeReplace,com.google.common.primitives.ImmutableIntArray:writeReplace(),629,631,"/**
* Returns a serialized representation of this object.
* @return serialized object representation
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.util.stream.LongStream),278,287,"/**
* Adds all elements from the given LongStream to the builder.
* @param stream input stream of long values
*/","* Appends all values from {@code stream}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.
     *
     * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,readObject,com.google.common.util.concurrent.AtomicDoubleArray:readObject(java.io.ObjectInputStream),317,326,"/**
* Deserializes an ImmutableLongArray object from the given stream.
* @param s ObjectInputStream to read from
*/","Reconstitutes the instance from a stream (that is, deserializes it).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.lang.Iterable),248,257,"/**
* Adds all IDs from the given iterable to this builder.
* @param values iterable of IDs to be added
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,writeReplace,com.google.common.primitives.ImmutableLongArray:writeReplace(),631,633,"/**
* Returns a serialized representation of this object.
* @return a serialized version of the trimmed object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,tryParse,com.google.common.primitives.Ints:tryParse(java.lang.String),816,818,"/**
* Attempts to parse an integer from the given string.
* @param string input string to parse
*/","* Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'}
   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of an integer value
   * @return the integer value represented by {@code string}, or {@code null} if {@code string} has
   *     a length of zero or cannot be parsed as an integer value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,com.google.common.primitives.UnsignedInteger:valueOf(java.lang.String),105,107,"/**
* Parses a decimal String representation into an Unsigned Integer.
* @param string the decimal String to parse
*/","* Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as
   * an unsigned {@code int} value.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}
   *     value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,dividedBy,com.google.common.primitives.UnsignedLong:dividedBy(com.google.common.primitives.UnsignedLong),160,162,"/**
* Divides this unsigned long value by another.
* @param val divisor (must be non-zero)
*/","* Returns the result of dividing this by {@code val}.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,toString,"com.google.common.primitives.UnsignedLongs:toString(long,int)",459,502,"/**
* Converts a long value to a string representation in the specified radix.
* @param x long value to convert
* @param radix base of the numeral system (2-36)
* @return string representation or ""0"" if x is zero
*/","* Returns a string representation of {@code x} for the given radix, where {@code x} is treated as
   * unsigned.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long, int)} instead.
   *
   * @param x the value to convert to a string.
   * @param radix the radix to use while working with {@code x}
   * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}
   *     and {@link Character#MAX_RADIX}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,mulMod,"com.google.common.math.LongMath$MillerRabinTester$2:mulMod(long,long,long)",1166,1166,"/**
* Computes (a * b) mod m using modular multiplication.
* @param a base value
* @param b multiplier value
* @param m modulus value
*/",Returns a * b mod m.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,squareMod,"com.google.common.math.LongMath$MillerRabinTester$2:squareMod(long,long)",1169,1169,"/**
* Computes (a^2) % m using modular arithmetic.
* @param a input value to be squared
* @param m modulus for modular operation
*/",Returns a^2 mod m.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,mod,com.google.common.primitives.UnsignedLong:mod(com.google.common.primitives.UnsignedLong),169,171,"/**
* Computes the remainder of this unsigned long value modulo another.
* @param val value to take the modulus with
*/","* Returns this modulo {@code val}.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,com.google.common.primitives.UnsignedLong:valueOf(java.lang.String),107,110,"/**
* Parses a string into an UnsignedLong representation with base 10.
* @param string input string to parse
*/","* Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an
   * unsigned {@code long} value.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code long}
   *     value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,standardEquals,com.google.common.collect.ForwardingMapEntry:standardEquals(java.lang.Object),96,103,"/**
* Compares this entry with another object for standard equality.
* @param object the other object to compare
* @return true if both entries have same key and value, false otherwise
*/","* A sensible definition of {@link #equals(Object)} in terms of {@link #getKey()} and {@link
   * #getValue()}. If you override either of these methods, you may wish to override {@link
   * #equals(Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,standardHashCode,com.google.common.collect.ForwardingMapEntry:standardHashCode(),112,116,"/**
* Calculates a standard hash code for the map entry.
* @return combined hash code of key and value
*/","* A sensible definition of {@link #hashCode()} in terms of {@link #getKey()} and {@link
   * #getValue()}. If you override either of these methods, you may wish to override {@link
   * #hashCode()} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,standardToString,com.google.common.collect.ForwardingMapEntry:standardToString(),125,127,"/**
* Returns string representation of this key-value pair.
*/","* A sensible definition of {@link #toString} in terms of {@link #getKey} and {@link #getValue}.
   * If you override either of these methods, you may wish to override {@link #equals} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1:setValue(java.lang.Object),72,77,"/**
* Sets the value using the underlying delegate.
* @param value new value to set, may be null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.MutableClassToInstanceMap$1:setValue(java.lang.Object),72,77,"/**
* Sets the value of this object using the delegate's setValue method.
* @param value new value to set, may be null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.StandardTable$Row$2:setValue(java.lang.Object),72,77,"/**
* Sets value using the underlying delegate.
* @param value new value to be set
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,equals,com.google.common.reflect.Invokable:equals(java.lang.Object),210,217,"/**
* Compares this invokable object with another for equality.
* @param obj Object to compare, must be an Invokable
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isArray,com.google.common.reflect.TypeToken:isArray(),526,528,"/**
* Determines whether this is an array type.
* @return true if it's an array, false otherwise
*/","* Returns true if this type is known to be an array type, such as {@code int[]}, {@code T[]},
   * {@code <? extends Map<String, Integer>[]>} etc.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getArraySupertype,com.google.common.reflect.TypeToken:getArraySupertype(java.lang.Class),1226,1249,"/**
* Retrieves the supertype of this array type.
* @param supertype Class representing a super type of this array
* @return TypeToken for the supertype, or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:get(),92,97,"/**
* Retrieves the result of the computation.
* @throws InterruptedException if interrupted while waiting for result
* @throws ExecutionException if execution failed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,listeningDecorator,com.google.common.util.concurrent.MoreExecutors:listeningDecorator(java.util.concurrent.ExecutorService),461,468,"/**
* Decorates an ExecutorService with listening capabilities.
* @param delegate underlying executor service instance
*/","* Creates an {@link ExecutorService} whose {@code submit} and {@code invokeAll} methods submit
   * {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as well
   * as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code
   * delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that
   * the returned {@code ListeningExecutorService} never calls the delegate's {@code submit}, {@code
   * invokeAll}, and {@code invokeAny} methods, so any special handling of tasks must be implemented
   * in the delegate's {@code execute} method or by wrapping the returned {@code
   * ListeningExecutorService}.
   *
   * <p>If the delegate executor was already an instance of {@code ListeningExecutorService}, it is
   * returned untouched, and the rest of this documentation does not apply.
   *
   * @since 10.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,listeningDecorator,com.google.common.util.concurrent.MoreExecutors:listeningDecorator(java.util.concurrent.ScheduledExecutorService),486,492,"/**
* Decorates a scheduled executor service to add listening capabilities.
* @param delegate the underlying executor service
*/","* Creates a {@link ScheduledExecutorService} whose {@code submit} and {@code invokeAll} methods
   * submit {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as
   * well as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code
   * delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that
   * the returned {@code ListeningScheduledExecutorService} never calls the delegate's {@code
   * submit}, {@code invokeAll}, and {@code invokeAny} methods, so any special handling of tasks
   * must be implemented in the delegate's {@code execute} method or by wrapping the returned {@code
   * ListeningScheduledExecutorService}.
   *
   * <p>If the delegate executor was already an instance of {@code
   * ListeningScheduledExecutorService}, it is returned untouched, and the rest of this
   * documentation does not apply.
   *
   * @since 10.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,invokeAnyImpl,"com.google.common.util.concurrent.MoreExecutors:invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long,java.util.concurrent.TimeUnit)",675,759,"/**
* Invokes any of the given tasks, returning at most one result.
* @param executorService Executor service to use
* @param tasks Collection of callable tasks
* @param timed Whether invocation is timed
* @param timeout Timeout value in specified unit
* @param unit Unit for timeout value
* @return Result from first task that completes
* @throws InterruptedException if interrupted while waiting
* @throws ExecutionException if any task throws an exception
* @throws TimeoutException if timed invocation times out
*/","* An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService}
   * implementations.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,<init>,"com.google.common.util.concurrent.CollectionFuture$ListFuture:<init>(com.google.common.collect.ImmutableCollection,boolean)",87,92,"/**
* Combines multiple asynchronous operations into a single future.
* @param futures collection of listenable futures to combine
* @param allMustSucceed whether all sub-futures must succeed for the combined future to complete successfully
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,callAsync,"com.google.common.util.concurrent.Futures$FutureCombiner:callAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)",719,722,"/**
* Asynchronously calls an async callable with a specified executor.
* @param combiner the async callable to be called
* @param executor the executor to run the call on
* @return a ListenableFuture containing the result of the call or null if not found
*/","* Creates the {@link ListenableFuture} which will return the result of calling {@link
     * AsyncCallable#call} in {@code combiner} when all futures complete, using the specified {@code
     * executor}.
     *
     * <p>If the combiner throws a {@code CancellationException}, the returned future will be
     * cancelled.
     *
     * <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code
     * ExecutionException} will be extracted and returned as the cause of the new {@code
     * ExecutionException} that gets thrown by the returned combined future.
     *
     * <p>Canceling this future will attempt to cancel all the component futures.
     *
     * @return a future whose result is based on {@code combiner} (or based on the input futures
     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code
     *     FutureCombiner}). Even if you don't care about the value of the future, you should
     *     typically check whether it failed: See <a
     *     href=""https://errorprone.info/bugpattern/FutureReturnValueIgnored"">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,call,"com.google.common.util.concurrent.Futures$FutureCombiner:call(java.util.concurrent.Callable,java.util.concurrent.Executor)",744,747,"/**
* Combines a callable with an existing future set, returning a combined future.
* @param combiner function to combine with the existing futures
* @param executor thread pool for execution
* @return ListenableFuture representing the combined result
*/","* Creates the {@link ListenableFuture} which will return the result of calling {@link
     * Callable#call} in {@code combiner} when all futures complete, using the specified {@code
     * executor}.
     *
     * <p>If the combiner throws a {@code CancellationException}, the returned future will be
     * cancelled.
     *
     * <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code
     * ExecutionException} will be extracted and returned as the cause of the new {@code
     * ExecutionException} that gets thrown by the returned combined future.
     *
     * <p>Canceling this future will attempt to cancel all the component futures.
     *
     * @return a future whose result is based on {@code combiner} (or based on the input futures
     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code
     *     FutureCombiner}). Even if you don't care about the value of the future, you should
     *     typically check whether it failed: See <a
     *     href=""https://errorprone.info/bugpattern/FutureReturnValueIgnored"">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,processCompleted,com.google.common.util.concurrent.AggregateFuture:processCompleted(com.google.common.collect.ImmutableCollection),302,324,"/**
* Processes completed futures, collecting values from non-cancelled ones and clearing resources.
* @param futuresIfNeedToCollectAtCompletion collection of completed futures (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,checkAcquiredLock,"com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)",623,675,"/**
* Verifies that acquiring the current lock does not lead to a deadlock.
* @param policy Locking policy
* @param acquiredLock The lock already acquired by another thread
*/","* Checks the acquisition-ordering between {@code this}, which is about to be acquired, and the
     * specified {@code acquiredLock}.
     *
     * <p>When this method returns, the {@code acquiredLock} should be in either the {@code
     * preAcquireLocks} map, for the case in which it is safe to acquire {@code this} after the
     * {@code acquiredLock}, or in the {@code disallowedPriorLocks} map, in which case it is not
     * safe.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,reload,"com.google.common.cache.CacheLoader$1:reload(java.lang.Object,java.lang.Object)",96,101,"/**
* Reloads a cached object and returns its future value.
* @param key unique cache identifier
* @param oldValue previous cached value (for caching purposes)
* @return ListenableFuture containing the reloaded object or null if not found
*/","* Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This
   * method is called when an existing cache entry is refreshed by {@link
   * CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}.
   *
   * <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be
   * overridden with an asynchronous implementation when using {@link
   * CacheBuilder#refreshAfterWrite}.
   *
   * <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>.
   *
   * @param key the non-null key whose value should be loaded
   * @param oldValue the non-null old value corresponding to {@code key}
   * @return the future new value associated with {@code key}; <b>must not be null, must not return
   *     null</b>
   * @throws Exception if unable to reload the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,com.google.common.util.concurrent.ClosingFuture:<init>(com.google.common.util.concurrent.ListenableFuture),631,633,"/**
* Constructs a new ClosingFuture with an empty close list.
* @param future underlying ListenableFuture to be closed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,offer,com.google.common.collect.ForwardingQueue:offer(java.lang.Object),57,61,"/**
* Offers an element to be added to the collection.
* @param o the element to add (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,poll,com.google.common.collect.ForwardingQueue:poll(),63,67,"/**
* Retrieves and removes an element from the queue, or null if empty.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,remove,com.google.common.collect.ForwardingQueue:remove(),69,74,"/**
* Removes and returns an element from this collection.
* @return removed element or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,peek,com.google.common.collect.ForwardingQueue:peek(),76,79,"/**
* Returns an element from the iterator without removing it.
* @return next element in iteration or null if empty.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,element,com.google.common.collect.ForwardingQueue:element(),81,85,"/**
* Retrieves and returns the current element of this iterable.
* @return the current element or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,cancel,com.google.common.util.concurrent.ForwardingFuture:cancel(boolean),46,50,"/**
* Cancels asynchronous operation if running or not. 
* @param mayInterruptIfRunning true to interrupt if currently running, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,isCancelled,com.google.common.util.concurrent.ForwardingFuture:isCancelled(),52,55,"/**
* Checks if the operation has been cancelled.
* @return true if cancelled, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,isDone,com.google.common.util.concurrent.ForwardingFuture:isDone(),57,60,"/**
* Checks if the task is completed by delegating to the underlying task.
* @return true if done, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,get,com.google.common.util.concurrent.ForwardingFuture:get(),62,67,"/**
* Retrieves result value from asynchronous task.
* @throws InterruptedException if interrupted while waiting
* @throws ExecutionException if task execution failed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,get,"com.google.common.util.concurrent.ForwardingFuture:get(long,java.util.concurrent.TimeUnit)",69,75,"/**
* Retrieves a value with specified timeout.
* @param timeout time to wait for result in given unit
* @param unit time unit for the timeout (e.g. seconds, milliseconds)
* @return V object or throws exception if timed out
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,statusFuture,com.google.common.util.concurrent.ClosingFuture:statusFuture(),651,653,"/**
* Returns a future containing the result of transforming the original future.
* @return ListenableFuture with transformed result or null
*/","* Returns a future that finishes when this step does. Calling {@code get()} on the returned
   * future returns {@code null} if the step is successful or throws the same exception that would
   * be thrown by calling {@code finishToFuture().get()} if this were the last step. Calling {@code
   * cancel()} on the returned future has no effect on the {@code ClosingFuture} pipeline.
   *
   * <p>{@code statusFuture} differs from most methods on {@code ClosingFuture}: You can make calls
   * to {@code statusFuture} <i>in addition to</i> the call you make to {@link #finishToFuture()} or
   * a derivation method <i>on the same instance</i>. This is important because calling {@code
   * statusFuture} alone does not provide a way to close the pipeline.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,submitAsync,"com.google.common.util.concurrent.ExecutionSequencer:submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)",175,264,"/**
* Submits an asynchronous computation for execution on a given executor.
* @param callable the computation to be executed
* @param executor the executor to run the computation on
* @return a ListenableFuture representing the result of the computation
*/","* Enqueues a task to run when the previous task (if any) completes.
   *
   * <p>Cancellation does not propagate from the output future to the future returned from {@code
   * callable} or a callable that has begun to execute, but if the output future is cancelled before
   * {@link AsyncCallable#call()} is invoked, {@link AsyncCallable#call()} will not be invoked.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getChecked,"com.google.common.util.concurrent.FuturesGetChecked:getChecked(com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator,java.util.concurrent.Future,java.lang.Class)",52,67,"/**
* Retrieves a value from a future while validating and handling exceptions.
* @param validator GetCheckedTypeValidator instance
* @param future Future containing the result
* @param exceptionClass Class of expected exception
* @return Value from the future or throws an exception
*/","Implementation of {@link Futures#getChecked(Future, Class)}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getChecked,"com.google.common.util.concurrent.FuturesGetChecked:getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit)",70,87,"/**
* Retrieves a future value while handling potential exceptions.
* @param future the future to be retrieved
* @param exceptionClass class that will be thrown for any errors
* @param timeout maximum time to wait for the result
* @param unit time unit for the timeout
* @throws X any exception specified by exceptionClass
*/","Implementation of {@link Futures#getChecked(Future, Class, long, TimeUnit)}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,checkExceptionClassValidity,com.google.common.util.concurrent.FuturesGetChecked:checkExceptionClassValidity(java.lang.Class),296,307,"/**
* Verifies that the provided exception class is valid for getChecked methods.
* @param exceptionClass the Exception subclass to validate
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueStartingEvent,com.google.common.util.concurrent.AbstractService:enqueueStartingEvent(),530,532,"/**
* Enqueues the STARTING_EVENT.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueRunningEvent,com.google.common.util.concurrent.AbstractService:enqueueRunningEvent(),534,536,"/**
* Enqueues an event indicating that an application is running.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueStoppingEvent,com.google.common.util.concurrent.AbstractService:enqueueStoppingEvent(com.google.common.util.concurrent.Service$State),538,546,"/**
* Enqueues event based on previous state when stopping.
* @param from current state of the system
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueTerminatedEvent,com.google.common.util.concurrent.AbstractService:enqueueTerminatedEvent(com.google.common.util.concurrent.Service$State),548,566,"/**
* Enqueues terminated event based on the state transition.
* @param from current state of the process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueFailedEvent,"com.google.common.util.concurrent.AbstractService:enqueueFailedEvent(com.google.common.util.concurrent.Service$State,java.lang.Throwable)",568,582,"/**
* Notifies listeners of a failed event with the specified state and exception.
* @param from current state
* @param cause underlying exception
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,enqueueStoppedEvent,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueStoppedEvent(),728,730,"/**
* Enqueues a stopped event notification. 
* @param STOPPED_EVENT type of event being enqueued",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,enqueueHealthyEvent,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueHealthyEvent(),732,734,"/**
 * Enqueues a healthy event for processing by listeners.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,enqueueFailedEvent,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueFailedEvent(com.google.common.util.concurrent.Service),736,749,"/**
* Enqueues a failed event for the specified Service, notifying listeners of failure.
* @param service Service instance experiencing failure
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,leave,com.google.common.util.concurrent.Monitor:leave(),929,939,"/**
* Signals next waiter to run and releases lock.
*/",Leaves this monitor. May be called only by a thread currently occupying this monitor.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,await,"com.google.common.util.concurrent.Monitor:await(com.google.common.util.concurrent.Monitor$Guard,boolean)",1178,1191,"/**
* Awaits condition satisfaction for the given Guard.
* @param guard Guard object to wait on
* @param signalBeforeWaiting whether to signal next waiter before waiting
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,awaitUninterruptibly,"com.google.common.util.concurrent.Monitor:awaitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean)",1193,1206,"/**
* Waits uninterruptibly for a condition to be satisfied, optionally signaling next waiter before waiting.
* @param guard Guard object
* @param signalBeforeWaiting whether to signal next waiter before waiting
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,awaitNanos,"com.google.common.util.concurrent.Monitor:awaitNanos(com.google.common.util.concurrent.Monitor$Guard,long,boolean)",1209,1233,"/**
* Awaits the specified time in nanoseconds, returning false when exhausted.
* @param guard lock guarding the condition
* @param nanos maximum wait duration in nanoseconds
* @param signalBeforeWaiting whether to signal next waiter before waiting
*/",Caller should check before calling that guard is not satisfied.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,withTimeout,"com.google.common.util.concurrent.Futures:withTimeout(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",403,415,"/**
* Creates a timed-out future from a listenable future.
* @param delegate original listenable future
* @param time timeout duration in specified unit
* @param unit time unit (e.g. TimeUnit.SECONDS)
* @param scheduledExecutor executor service for timing out the future
* @return ListenableFuture with added timeout, or original if already done","* Returns a future that delegates to another but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires.
   *
   * <p>The delegate future is interrupted and cancelled if it times out.
   *
   * @param delegate The future to delegate to.
   * @param time when to time out the future
   * @param unit the time unit of the time parameter
   * @param scheduledExecutor The executor service to enforce the timeout.
   * @since 19.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,scheduleAsync,"com.google.common.util.concurrent.Futures:scheduleAsync(com.google.common.util.concurrent.AsyncCallable,java.time.Duration,java.util.concurrent.ScheduledExecutorService)",229,235,"/**
* Schedules a task for asynchronous execution with a specified delay.
* @param callable the task to be executed
* @param delay time to wait before executing the task
* @param executorService service used to schedule the task
* @return ListenableFuture representing the scheduled task's result
*/","* Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,getIfPresent,"com.google.common.base.Enums:getIfPresent(java.lang.Class,java.lang.String)",67,71,"/**
* Retrieves an enum constant by name if present.
* @param enumClass Enum class to search
* @param value Name of the enum constant to find
* @return Optional enum constant or empty if not found
*/","* Returns an optional enum constant for the given type, using {@link Enum#valueOf}. If the
   * constant does not exist, {@link Optional#absent} is returned. A common use case is for parsing
   * user input or falling back to a default enum constant. For example, {@code
   * Enums.getIfPresent(Country.class, countryInput).or(Country.DEFAULT);}
   *
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,tryFind,"com.google.common.collect.Iterables:tryFind(java.lang.Iterable,com.google.common.base.Predicate)",699,701,"/**
* Attempts to find an element in an iterable that matches a given predicate.
* @param iterable collection of elements to search
* @param predicate condition to match
* @return Optional containing the matching element, or empty if not found
*/","* Returns an {@link Optional} containing the first element in {@code iterable} that satisfies the
   * given predicate, if such an element exists.
   *
   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}
   * is matched in {@code iterable}, a NullPointerException will be thrown.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}
   *
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,isEmpty,com.google.common.collect.Collections2$FilteredCollection:isEmpty(),169,172,"/**
* Checks if collection is empty.
* @return true if no elements match the predicate, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,anyMatch,com.google.common.collect.FluentIterable:anyMatch(com.google.common.base.Predicate),441,443,"/**
* Checks if any element matches the given predicate.
* @param predicate condition to match
* @return true if at least one element satisfies the predicate, false otherwise
*/","* Returns {@code true} if any element in this fluent iterable satisfies the predicate.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch} (same).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,isEmpty,com.google.common.collect.Maps$FilteredEntryNavigableMap:isEmpty(),3285,3288,"/**
* Checks if the unfiltered set is empty.
* @return true if empty, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,precomputedPositive,"com.google.common.base.CharMatcher:precomputedPositive(int,java.util.BitSet,java.lang.String)",447,464,"/**
* Creates a precomputed CharMatcher for a given number of characters.
* @param totalCharacters total count of characters
* @param table precomputed bitset data
* @param description human-readable description
*/",* Helper method for {@link #precomputedInternal} that doesn't test if the negation is cheaper.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfPossible,"com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable,java.lang.Class,java.lang.Class)",187,196,"/**
* Propagates a throwable to its declared type if possible.
* @param throwable the throwable to propagate
* @param declaredType1 first potential type
* @param declaredType2 second potential type
*/","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
   * RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}.
   *
   * @param throwable the Throwable to possibly propagate
   * @param declaredType1 any checked exception type declared by the calling method
   * @param declaredType2 any other checked exception type declared by the calling method
   * @deprecated Use a combination of two calls to {@link #throwIfInstanceOf} and one call to {@link
   *     #throwIfUnchecked}, which togther provide the same behavior except that they reject {@code
   *     null}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,rethrow,com.google.common.io.Closer:rethrow(java.lang.Throwable),130,136,"/**
* Rethrows a checked exception as an unchecked RuntimeException.
* @param e the Throwable to rethrow
*/","* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code
   * IOException}, {@code RuntimeException} or {@code Error}. Otherwise, it will be rethrown wrapped
   * in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception
   * types your try block can throw when calling an overload of this method so as to avoid losing
   * the original exception type.
   *
   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e);}
   * to ensure the compiler knows that it will throw.
   *
   * @return this method does not return; it always throws
   * @throws IOException when the given throwable is an IOException",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,rethrow,"com.google.common.io.Closer:rethrow(java.lang.Throwable,java.lang.Class)",152,160,"/**
* Rethrows a Throwable as an unchecked RuntimeException,
* potentially with a more specific exception type.
* @param e the original Throwable to rethrow
* @param declaredType the class of the expected exception
*/","* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code
   * IOException}, {@code RuntimeException}, {@code Error} or a checked exception of the given type.
   * Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to
   * declare all of the checked exception types your try block can throw when calling an overload of
   * this method so as to avoid losing the original exception type.
   *
   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e,
   * ...);} to ensure the compiler knows that it will throw.
   *
   * @return this method does not return; it always throws
   * @throws IOException when the given throwable is an IOException
   * @throws X when the given throwable is of the declared type X",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,close,com.google.common.io.Closer:close(),195,218,"/**
* Closes resources and handles exceptions in LIFO order.
* @throws IOException if an exception is thrown during closing
*/","* Closes all {@code Closeable} instances that have been added to this {@code Closer}. If an
   * exception was thrown in the try block and passed to one of the {@code exceptionThrown} methods,
   * any exceptions thrown when attempting to close a closeable will be suppressed. Otherwise, the
   * <i>first</i> exception to be thrown from an attempt to close a closeable will be thrown and any
   * additional exceptions that are thrown after that will be suppressed.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,newThread,"com.google.common.util.concurrent.MoreExecutors:newThread(java.lang.String,java.lang.Runnable)",838,851,"/**
* Creates a new thread with the specified name and runnable task.
* @param name unique identifier for the thread
* @param runnable executable task to run on the new thread
* @return newly created Thread object
*/","* Creates a thread using {@link #platformThreadFactory}, and sets its name to {@code name} unless
   * changing the name is forbidden by the security manager.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeCollectedEntry,com.google.common.cache.LocalCache$Segment:removeCollectedEntry(com.google.common.cache.ReferenceEntry),3279,3289,"/**
* Removes collected entry from the map and notifies the removal.
* @param entry ReferenceEntry object to remove
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterKeys,"com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",2025,2038,"/**
* Filters a multimap to include only entries where the key matches a predicate.
* @param unfiltered original multimap
* @param keyPredicate function to test keys
* @return filtered multimap or new instance if none of the above
*/","* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterEntries,"com.google.common.collect.Multimaps:filterEntries(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",2206,2213,"/**
* Filters entries in the multimap based on a predicate.
* @param unfiltered input multimap
* @param entryPredicate predicate to filter entries by
* @return filtered multimap with matching entries
*/","* Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned multimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key/value pair that
   * doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getDeclaredAnnotation,com.google.common.reflect.Parameter:getDeclaredAnnotation(java.lang.Class),112,116,"/**
* Retrieves a declared annotation of the specified type, or null if not found.
* @param annotationType Class object representing the annotation to search for
* @return Annotation object of type A, or null if not found.",* @since 18.0,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,mergeSorted,"com.google.common.collect.Iterators:mergeSorted(java.lang.Iterable,java.util.Comparator)",1302,1308,"/**
* Merges multiple sorted Iterables into a single sorted UnmodifiableIterator.
* @param iterators Iterable of Iterators to merge
* @param comparator Comparator for sorting and merging elements
* @return UnmodifiableIterator containing merged and sorted data
*/","* Returns an iterator over the merged contents of all given {@code iterators}, traversing every
   * element of the input iterators. Equivalent entries will not be de-duplicated.
   *
   * <p>Callers must ensure that the source {@code iterators} are in non-descending order as this
   * method does not sort its input.
   *
   * <p>For any equivalent elements across all {@code iterators}, it is undefined which element is
   * returned first.
   *
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,size,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:size(),622,625,"/**
* Returns the number of elements in this collection.
* @return count of elements in the underlying iterator
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeAll,com.google.common.collect.Maps$EntrySet:removeAll(java.util.Collection),4240,4248,"/**
* Removes all elements from this set that are contained in the specified collection.
* @param c collection of elements to be removed
* @return true if any element was removed, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,remove,com.google.common.collect.FilteredEntryMultimap$AsMap:remove(java.lang.Object),198,222,"/**
* Removes items from the multimap that satisfy a key, returning them as a collection.
* @param key object to filter by
* @return Collection of removed items or null if none were found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toArray,"com.google.common.collect.Iterables:toArray(java.lang.Iterable,java.lang.Object[])",293,296,"/**
* Converts an Iterable to a typed array.
* @param iterable input iterable
* @param array output array
* @return populated array or original array if unchanged
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toArray,com.google.common.collect.Iterables:toArray(java.lang.Iterable),304,306,"/**
* Converts an iterable to a regular array.
* @param iterable input collection
*/","* Copies an iterable's elements into an array.
   *
   * @param iterable the iterable to copy
   * @return a newly-allocated array into which all the elements of the iterable have been copied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,replaceValues,"com.google.common.collect.LinkedListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",621,646,"/**
* Replaces existing values for a given key with new ones and returns the old values.
* @param key unique identifier
* @param values new values to replace or add
* @return List of replaced old values
*/","* {@inheritDoc}
   *
   * <p>If any entries for the specified {@code key} already exist in the multimap, their values are
   * changed in-place without affecting the iteration order.
   *
   * <p>The returned list is immutable and implements {@link java.util.RandomAccess}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,removeAll,com.google.common.collect.LinkedListMultimap:removeAll(java.lang.Object),657,670,"/**
* Removes all values associated with a given key.
* @param key the key to remove
* @return list of removed values or null if not found
*/","* {@inheritDoc}
   *
   * <p>The returned list is immutable and implements {@link java.util.RandomAccess}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AllEqualOrdering.java,sortedCopy,com.google.common.collect.AllEqualOrdering:sortedCopy(java.lang.Iterable),41,44,"/**
* Creates a new list containing all elements from the input iterable.
* @param iterable Input collection of objects to copy and sort
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,"com.google.common.collect.Collections2$OrderedPermutationIterator:<init>(java.util.List,java.util.Comparator)",509,512,"/**
* Initializes iterator with ordered permutation of elements from input list.
* @param list the input list to generate permutations for
* @param comparator a custom comparator to order elements (null for default ordering)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newCopyOnWriteArrayList,com.google.common.collect.Lists:newCopyOnWriteArrayList(java.lang.Iterable),283,294,"/**
* Creates a CopyOnWriteArrayList from an iterable collection of elements.
* @param elements Iterable collection of elements to copy into the list
*/","* Creates a {@code CopyOnWriteArrayList} instance containing the given elements.
   *
   * @param elements the elements that the list should contain, in order
   * @return a new {@code CopyOnWriteArrayList} containing those elements
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newCopyOnWriteArraySet,com.google.common.collect.Sets:newCopyOnWriteArraySet(java.lang.Iterable),479,490,"/**
* Creates a CopyOnWriteArraySet from an iterable of elements.
* @param elements iterable of elements to include in the set
*/","* Creates a {@code CopyOnWriteArraySet} instance containing the given elements.
   *
   * @param elements the elements that the set should contain, in order
   * @return a new {@code CopyOnWriteArraySet} containing those elements
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedLists.java,binarySearch,"com.google.common.collect.SortedLists:binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior)",271,303,"/**
* Performs binary search on a sorted list using the provided comparator.
* @param list sorted list to search
* @param key value to search for
* @param comparator comparison function for values in the list
* @param presentBehavior behavior when the key is found (e.g. index, offset)
* @param absentBehavior behavior when the key is not found (e.g. index, offset)
*/","* Searches the specified list for the specified object using the binary search algorithm. The
   * list must be sorted into ascending order according to the specified comparator (as by the
   * {@link Collections#sort(List, Comparator) Collections.sort(List, Comparator)} method), prior to
   * making this call. If it is not sorted, the results are undefined.
   *
   * <p>If there are elements in the list which compare as equal to the key, the choice of {@link
   * KeyPresentBehavior} decides which index is returned. If no elements compare as equal to the
   * key, the choice of {@link KeyAbsentBehavior} decides which index is returned.
   *
   * <p>This method runs in log(n) time on random-access lists, which offer near-constant-time
   * access to each list element.
   *
   * @param list the list to be searched.
   * @param key the value to be searched for.
   * @param comparator the comparator by which the list is ordered.
   * @param presentBehavior the specification for what to do if at least one element of the list
   *     compares as equal to the key.
   * @param absentBehavior the specification for what to do if no elements of the list compare as
   *     equal to the key.
   * @return the index determined by the {@code KeyPresentBehavior}, if the key is in the list;
   *     otherwise the index determined by the {@code KeyAbsentBehavior}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,bulkGet,com.google.common.util.concurrent.Striped:bulkGet(java.lang.Iterable),141,184,"/**
* Retrieves multiple instances of type L by batched IDs.
* @param keys Iterable of object keys to fetch
* @return Iterable of corresponding L objects or empty iterable if none found
*/","* Returns the stripes that correspond to the passed objects, in ascending (as per {@link
   * #getAt(int)}) order. Thus, threads that use the stripes in the order returned by this method
   * are guaranteed to not deadlock each other.
   *
   * <p>It should be noted that using a {@code Striped<L>} with relatively few stripes, and {@code
   * bulkGet(keys)} with a relative large number of keys can cause an excessive number of shared
   * stripes (much like the birthday paradox, where much fewer than anticipated birthdays are needed
   * for a pair of them to match). Please consider carefully the implications of the number of
   * stripes, the intended concurrency level, and the typical number of keys used in a {@code
   * bulkGet(keys)} operation. See <a href=""http://www.mathpages.com/home/kmath199.htm"">Balls in
   * Bins model</a> for mathematical formulas that can be used to estimate the probability of
   * collisions.
   *
   * @param keys arbitrary non-null keys
   * @return the stripes corresponding to the objects (one per each object, derived by delegating to
   *     {@link #get(Object)}; may contain duplicates), in an increasing index order.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$TransformedEntriesListMultimap:get(java.lang.Object),1626,1629,"/**
* Retrieves list of V2 objects associated with given key.
* @param key unique identifier or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,removeAll,com.google.common.collect.Multimaps$TransformedEntriesListMultimap:removeAll(java.lang.Object),1631,1635,"/**
* Removes all values associated with the specified key from a multimap.
* @param key object to remove from multimap; may be null for removal of all keys
* @return list of removed V2 objects or empty list if no matches were found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$TransformedEntriesMultimap:get(java.lang.Object),1547,1550,"/**
* Retrieves collection of V2 objects associated with the specified key.
* @param key unique identifier or null if not applicable
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,removeAll,com.google.common.collect.Multimaps$TransformedEntriesMultimap:removeAll(java.lang.Object),1588,1592,"/**
* Removes all entries with specified key.
* @param key object to remove (null for no-op)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$SortedAsMapView:subMap(java.lang.Object,java.lang.Object)",1005,1008,"/**
* Returns a sorted map containing entries between the specified keys.
* @param fromKey starting key (inclusive)
* @param toKey ending key (exclusive)
* @return SortedMap of key-value pairs or empty map if invalid range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$SortedAsMapView:headMap(java.lang.Object),1010,1013,"/**
* Returns a sorted map containing all entries from this map with keys less than the specified key.
* @param toKey key up to which entries are included
* @return SortedMap of entries or null if backing set is empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$SortedAsMapView:tailMap(java.lang.Object),1015,1018,"/**
* Returns a sorted map containing all entries with keys greater than or equal to the specified key.
* @param fromKey lower bound of the key range (inclusive)
* @return SortedMap object or empty map if no entries match
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,equals,com.google.common.graph.AbstractNetwork:equals(java.lang.Object),253,266,"/**
* Compares this network to another object for equality.
* @param obj the object to compare with
* @return true if both networks are equal, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,hashCode,com.google.common.graph.AbstractNetwork:hashCode(),268,271,"/**
 * Computes and returns the hash code of this object.
 * Uses the hash code of the underlying map to ensure consistency with equals().
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,toString,com.google.common.graph.AbstractNetwork:toString(),274,286,"/**
* Returns a string representation of the graph, including its properties and node/edge counts.
*/",Returns a string representation of this network.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,equals,com.google.common.graph.AbstractValueGraph:equals(java.lang.Object),121,134,"/**
* Compares this ValueGraph instance with another object for equality.
* @param obj the object to compare with
* @return true if objects are equal, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,hashCode,com.google.common.graph.AbstractValueGraph:hashCode(),136,139,"/**
 * Computes and returns the hash code of this graph based on its edge values.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,toString,com.google.common.graph.AbstractValueGraph:toString(),142,152,"/**
* Returns a human-readable string representation of the graph.
* @return formatted string containing graph properties and node count
*/",Returns a string representation of this graph.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,navigableKeySet,com.google.common.collect.AbstractNavigableMap:navigableKeySet(),140,143,"/**
* Returns a NavigableSet of keys in this map.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,navigableKeySet,com.google.common.collect.Maps$DescendingMap:navigableKeySet(),4414,4418,"/**
* Returns a NavigableSet of keys, lazily initializing it if not already created.
* @return NavigableSet of keys or null if not initialized
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingEntryIterator,com.google.common.collect.Maps$NavigableAsMapView:descendingEntryIterator(),1110,1113,"/**
* Returns an iterator over the entries in this map that are present after the end of the original map.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntries,"com.google.common.collect.Maps:transformEntries(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)",2068,2074,"/**
* Transforms entries in a navigable map using the provided entry transformer.
* @param fromMap original navigable map
* @param transformer function to transform key-value pairs
* @return new navigable map with transformed entries
*/","* Returns a view of a navigable map whose values are derived from the original navigable map's
   * entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may
   * depend on the key as well as the value.
   *
   * <p>All other properties of the transformed map, such as iteration order, are left intact. For
   * example, the code:
   *
   * {@snippet :
   * NavigableMap<String, Boolean> options = Maps.newTreeMap();
   * options.put(""verbose"", false);
   * options.put(""sort"", true);
   * EntryTransformer<String, Boolean, String> flagPrefixer =
   *     new EntryTransformer<String, Boolean, String>() {
   *       public String transformEntry(String key, Boolean value) {
   *         return value ? key : (""yes"" + key);
   *       }
   *     };
   * NavigableMap<String, String> transformed =
   *     LabsMaps.transformNavigableEntries(options, flagPrefixer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {sort=yessort, verbose=verbose}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys and null values provided that
   * the transformer is capable of accepting null inputs. The transformed map might contain null
   * values if the transformer sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * map to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map
   * doesn't need to be a view, copy the returned map into a new map of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed map.
   *
   * @since 13.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$TransformedEntriesSortedMap:headMap(java.lang.Object),2243,2246,"/**
* Returns a sorted map containing entries up to and including the specified key.
* @param toKey the upper bound of the map (inclusive)
* @return a SortedMap object or an empty map if no keys are present
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$TransformedEntriesSortedMap:subMap(java.lang.Object,java.lang.Object)",2254,2257,"/**
* Retrieves a subset of the map entries between two specified keys.
* @param fromKey starting key (inclusive)
* @param toKey ending key (exclusive)
* @return SortedMap containing subset entries or null if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$TransformedEntriesSortedMap:tailMap(java.lang.Object),2259,2262,"/**
* Returns a sorted map containing entries starting from the specified key.
* @param fromKey key to begin the map from
* @return SortedMap of transformed entries or null if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformValues,"com.google.common.collect.Maps:transformValues(java.util.SortedMap,com.google.common.base.Function)",1862,1868,"/**
* Transforms the values of a sorted map using a provided function.
* @param fromMap input sorted map
* @param function function to apply to each value
* @return new sorted map with transformed values
*/","* Returns a view of a sorted map where each value is transformed by a function. All other
   * properties of the map, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * SortedMap<String, Integer> map = ImmutableSortedMap.of(""a"", 4, ""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * SortedMap<String, Double> transformed =
   *      Maps.transformValues(map, sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=2.0, b=3.0}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed map might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
   * view, copy the returned map into a new map of your choosing.
   *
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,asMap,com.google.common.collect.Multimaps$UnmodifiableMultimap:asMap(),701,711,"/**
* Returns an unmodifiable Map representation of this multimap.
* @return A Map where each key is a unique key from the underlying map,
* and each value is a collection of values associated with that key. 
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,row,com.google.common.collect.Tables$TransformedTable:row(java.lang.Object),471,474,"/**
* Transforms table data by applying a specified function to each value.
* @param rowKey unique identifier for the table row
* @return Map of transformed values, or null if not found",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,column,com.google.common.collect.Tables$TransformedTable:column(java.lang.Object),476,479,"/**
* Fetches map of values from table by column key.
* @param columnKey unique column identifier
* @return Map with transformed values or empty if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowMap,com.google.common.collect.Tables$TransformedTable:rowMap(),510,513,"/**
* Transforms table rows into a map of column maps.
* @return A map where each key is a row ID and the value is another map
*         containing column values transformed by the provided function.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,columnMap,com.google.common.collect.Tables$TransformedTable:columnMap(),515,519,"/**
* Transforms table column map by applying a function to each row.
* @return transformed map of columns to maps of rows
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,columnMap,com.google.common.collect.Tables$UnmodifiableTable:columnMap(),574,577,"/**
* Returns an unmodifiable map of column mappings.
* @return immutable map with column headers as keys and value maps as values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowMap,com.google.common.collect.Tables$UnmodifiableTable:rowMap(),607,610,"/**
* Returns an unmodifiable map of rows to column maps.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,add,"com.google.common.collect.HashMultiset:add(java.lang.Object,int)",264,284,"/**
* Adds specified occurrences of an element to the collection.
* @param element element to add
* @param occurrences number of times to add the element
* @return previous count of the element in the collection
*/","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if the call would result in more than {@link
   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,add,"com.google.common.collect.LinkedHashMultiset:add(java.lang.Object,int)",264,284,"/**
* Adds occurrences of an element to the collection.
* @param element element to add
* @param occurrences number of times to add the element
* @return previous count of the element or 0 if not found
*/","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if the call would result in more than {@link
   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,"com.google.common.collect.HashMultiset:remove(java.lang.Object,int)",286,311,"/**
* Removes specified element with given occurrences from the collection.
* @param element object to remove
* @param occurrences count of removals
* @return old count of elements, or 0 if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,"com.google.common.collect.LinkedHashMultiset:remove(java.lang.Object,int)",286,311,"/**
* Removes specified element instances, updating count and map.
* @param element element to remove
* @param occurrences number of elements to remove
* @return original count if all removed; otherwise, remaining count
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,contains,"com.google.common.collect.ImmutableTable:contains(java.lang.Object,java.lang.Object)",383,386,"/**
* Checks if data exists at specified row and column keys.
* @param rowKey unique row identifier or null for all rows
* @param columnKey unique column identifier or null for all columns
* @return true if data found, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,"com.google.common.collect.HashBasedTable:get(java.lang.Object,java.lang.Object)",114,117,"/**
* Fetches a value from the underlying data structure.
* @param rowKey unique identifier for the row
* @param columnKey unique identifier for the column
* @return Value object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$Column:get(java.lang.Object),471,474,"/**
* Retrieves value by specified key from underlying table.
* @param key object to look up (may be null)
* @return value associated with key or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsMapping,"com.google.common.collect.StandardTable:containsMapping(java.lang.Object,java.lang.Object,java.lang.Object)",192,195,"/**
* Checks if a mapping exists with the given keys and value.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value potential map value
* @return true if mapping found, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,"com.google.common.collect.HashBasedTable:contains(java.lang.Object,java.lang.Object)",86,89,"/**
* Checks if a cell exists at the specified row and column keys.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @return true if cell exists, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$Column$KeySet:contains(java.lang.Object),621,624,"/**
* Checks if table contains specified object.
* @param obj object to search for
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$Column:containsKey(java.lang.Object),476,479,"/**
* Checks if table contains specified key.
* @param key object to search for
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:contains(java.lang.Object),929,939,"/**
* Checks if a given object exists in the map, using Entry instances for exact key-value matches. 
* @param obj the object to search for (null returns false) 
* @return true if found, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformValues,"com.google.common.collect.Multimaps:transformValues(com.google.common.collect.ListMultimap,com.google.common.base.Function)",1378,1385,"/**
* Transforms values in a multimap using the provided function.
* @param fromMultimap input multimap
* @param function transformation function for each value
* @return new ListMultimap with transformed values
*/","* Returns a view of a {@code ListMultimap} where each value is transformed by a function. All
   * other properties of the multimap, such as iteration order, are left intact. For example, the
   * code:
   *
   * {@snippet :
   * ListMultimap<String, Integer> multimap =
   *      ImmutableListMultimap.of(""a"", 4, ""a"", 16, ""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * ListMultimap<String, Double> transformed = Multimaps.transformValues(map,
   *     sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=[2.0, 4.0], b=[3.0]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys, and even null values
   * provided that the function is capable of accepting null input. The transformed multimap might
   * contain null values, if the function sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the function will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to
   * perform well, {@code function} should be fast. To avoid lazy evaluation when the returned
   * multimap doesn't need to be a view, copy the returned multimap into a new multimap of your
   * choosing.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,addAll,com.google.common.collect.AbstractMultiset:addAll(java.util.Collection),105,109,"/**
* Adds all specified elements to this multiset.
* @param elementsToAdd collection of elements to add
* @return true if the operation was successful; false otherwise
*/","* {@inheritDoc}
   *
   * <p>This implementation is highly efficient when {@code elementsToAdd} is itself a {@link
   * Multiset}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardAddAll,com.google.common.collect.ForwardingMultiset:standardAddAll(java.util.Collection),166,169,"/**
* Adds all elements from the given collection to this multiset.
* @param elementsToAdd collection of elements to add
* @return true if successful, false otherwise
*/","* A sensible definition of {@link #addAll(Collection)} in terms of {@link #add(Object)} and
   * {@link #add(Object, int)}. If you override either of these methods, you may wish to override
   * {@link #addAll(Collection)} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,asMap,com.google.common.collect.Synchronized$SynchronizedMultimap:asMap(),740,748,"/**
* Returns a synchronized map representation of the underlying data structure.
* @return Map containing key-value pairs or null if not initialized
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,inverse,com.google.common.collect.Synchronized$SynchronizedBiMap:inverse(),1380,1388,"/**
* Returns the inverse mapping of this bi-map.
* @return a synchronized BiMap representing the inverse mapping
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:<init>(java.util.NavigableMap,java.lang.Object)",1605,1607,"/**
* Creates a synchronized NavigableMap instance from the given delegate map.
* @param delegate the underlying navigable map
* @param mutex synchronization lock object (may be null)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sortedMap,"com.google.common.collect.Synchronized:sortedMap(java.util.SortedMap,java.lang.Object)",1277,1280,"/**
* Wraps a sorted map in a synchronized version.
* @param sortedMap the original sorted map
* @param mutex synchronization lock (or null for no locking)
* @return synchronized SortedMap instance
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,row,com.google.common.collect.Synchronized$SynchronizedTable:row(java.lang.Object),2132,2137,"/**
* Retrieves a row from the underlying data structure using the provided key.
* @param rowKey unique identifier for the desired row
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,column,com.google.common.collect.Synchronized$SynchronizedTable:column(java.lang.Object),2139,2144,"/**
* Retrieves a column from the underlying data structure.
* @param columnKey unique identifier for the column
* @return A Map containing the column's key-value pairs or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,rowMap,com.google.common.collect.Synchronized$SynchronizedTable:rowMap(),2174,2179,"/**
* Returns a map of rows to maps of columns to values, synchronizing access via the provided mutex.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,columnMap,com.google.common.collect.Synchronized$SynchronizedTable:columnMap(),2181,2186,"/**
* Returns a nested map of column names to maps of row keys to values.
* @return Map of column names to maps of row keys to values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,listMultimap,"com.google.common.collect.Synchronized:listMultimap(com.google.common.collect.ListMultimap,java.lang.Object)",782,788,"/**
* Creates or returns a synchronized list multimap.
* @param multimap original multimap
* @param mutex synchronization mutex (null for no sync)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:<init>(com.google.common.collect.SortedSetMultimap,java.lang.Object)",893,895,"/**
* Creates a synchronized sorted set multimap from a delegate.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setMultimap,"com.google.common.collect.Synchronized:setMultimap(com.google.common.collect.SetMultimap,java.lang.Object)",826,832,"/**
* Converts a regular set multimap to a synchronized one.
* @param multimap the input set multimap
* @param mutex synchronization lock (may be null)
* @return synchronized set multimap or original if already synchronized
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedMultimap,com.google.common.collect.Multimaps:synchronizedMultimap(com.google.common.collect.Multimap),639,643,"/**
* Returns a thread-safe version of the given multimap.
* @param multimap original multimap to synchronize
*/","* Returns a synchronized (thread-safe) multimap backed by the specified multimap. In order to
   * guarantee serial access, it is critical that <b>all</b> access to the backing multimap is
   * accomplished through the returned multimap.
   *
   * <p>It is imperative that the user manually synchronize on the returned multimap when accessing
   * any of its collection views:
   *
   * {@snippet :
   * Multimap<K, V> multimap = Multimaps.synchronizedMultimap(
   *     HashMultimap.<K, V>create());
   * ...
   * Collection<V> values = multimap.get(key);  // Needn't be in synchronized block
   * ...
   * synchronized (multimap) {  // Synchronizing on multimap, not values!
   *   Iterator<V> i = values.iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>Note that the generated multimap's {@link Multimap#removeAll} and {@link
   * Multimap#replaceValues} methods return collections that aren't synchronized.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param multimap the multimap to be wrapped in a synchronized view
   * @return a synchronized view of the specified multimap",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,synchronizedTable,com.google.common.collect.Tables:synchronizedTable(com.google.common.collect.Table),699,703,"/**
* Returns a synchronized version of the input table.
* @param table input table to synchronize
*/","* Returns a synchronized (thread-safe) table backed by the specified table. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing table is accomplished
   * through the returned table.
   *
   * <p>It is imperative that the user manually synchronize on the returned table when accessing any
   * of its collection views:
   *
   * {@snippet :
   * Table<R, C, V> table = Tables.synchronizedTable(HashBasedTable.<R, C, V>create());
   * ...
   * Map<C, V> row = table.row(rowKey);  // Needn't be in synchronized block
   * ...
   * synchronized (table) {  // Synchronizing on table, not row!
   *   Iterator<Entry<C, V>> i = row.entrySet().iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned table will be serializable if the specified table is serializable.
   *
   * @param table the table to be wrapped in a synchronized view
   * @return a synchronized view of the specified table
   * @since 22.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,escape,com.google.common.escape.UnicodeEscaper:escape(java.lang.String),100,106,"/**
* Escapes special characters in a given string.
* @param string input string to be escaped
*/","* Returns the escaped form of a given literal string.
   *
   * <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to
   * use this method. If an input string ends with an unmatched high surrogate character, then this
   * method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a
   * href=""http://en.wikipedia.org/wiki/UTF-16"">UTF-16</a> before calling this method.
   *
   * <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for
   * efficiency by inlining the implementation of {@link #nextEscapeIndex(CharSequence, int, int)}
   * directly. Doing this for {@link com.google.common.net.PercentEscaper} more than doubled the
   * performance for unescaped strings (as measured by {@code CharEscapersBenchmark}).
   *
   * @param string the literal string to be escaped
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null
   * @throws IllegalArgumentException if invalid surrogate characters are encountered",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,removeNode,com.google.common.graph.StandardMutableGraph:removeNode(java.lang.Object),60,63,"/**
* Removes a node from the graph.
* @param node Node to be removed
* @return true if removal was successful, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,removeEdge,"com.google.common.graph.StandardMutableGraph:removeEdge(java.lang.Object,java.lang.Object)",65,68,"/**
* Removes directed edge between two nodes.
* @param nodeU source node identifier
* @param nodeV target node identifier
* @return true if edge removed successfully, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,removeEdge,com.google.common.graph.StandardMutableValueGraph:removeEdge(com.google.common.graph.EndpointPair),180,185,"/**
* Removes edge between two nodes.
* @param endpoints EndpointPair containing node IDs (U, V)
* @return removed Edge object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentNodes,com.google.common.graph.StandardNetwork:incidentNodes(java.lang.Object),135,141,"/**
* Returns a pair of nodes associated with an incident edge.
* @param edge The edge for which to fetch the incident nodes
* @return EndpointPair containing this endpoint and the two incident nodes
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,toStringBuilder,com.google.common.io.CharStreams:toStringBuilder(java.lang.Readable),174,182,"/**
* Converts a Readable object to a StringBuilder.
* @param r the readable object to convert
*/","* Reads all characters from a {@link Readable} object into a new {@link StringBuilder} instance.
   * Does not close the {@code Readable}.
   *
   * @param r the object to read from
   * @return a {@link StringBuilder} containing all the characters
   * @throws IOException if an I/O error occurs",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,visitParameterizedType,com.google.common.reflect.TypeResolver$TypeMappingIntrospector:visitParameterizedType(java.lang.reflect.ParameterizedType),393,404,"/**
* Visits a parameterized type, mapping its type variables to actual types.
* @param parameterizedType ParameterizedType object to process
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,catching,"com.google.common.util.concurrent.Futures:catching(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)",298,306,"/**
* Creates a future that catches exceptions of the specified type and returns a fallback value.
* @param input original future to be wrapped
* @param exceptionType throwable class to catch
* @param fallback function to return in case of an exception
* @param executor executor service for asynchronous processing
*/","* Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the
   * primary input fails with the given {@code exceptionType}, from the result provided by the
   * {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so
   * if the primary input succeeds, it is never invoked. If, during the invocation of {@code
   * fallback}, an exception is thrown, this exception is used as the result of the output {@code
   * Future}.
   *
   * <p>Usage example:
   *
   * {@snippet :
   * ListenableFuture<Integer> fetchCounterFuture = ...;
   *
   * // Falling back to a zero counter in case an exception happens when
   * // processing the RPC to fetch counters.
   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(
   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the warnings the {@link MoreExecutors#directExecutor} documentation.
   *
   * @param input the primary input {@code Future}
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against the input's exception. ""The input's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a
   *     different kind of exception, that exception itself. To avoid hiding bugs and other
   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code
   *     Throwable.class} in particular.
   * @param fallback the {@link Function} to be called if {@code input} fails with the expected
   *     exception type. The function's argument is the input's exception. ""The input's exception""
   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if
   *     {@code get()} throws a different kind of exception, that exception itself.
   * @param executor the executor that runs {@code fallback} if {@code input} fails
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,cancel,com.google.common.util.concurrent.AbstractFuture:cancel(boolean),342,410,"/**
* Cancels this Future if it is not already done.
* @param mayInterruptIfRunning whether to interrupt running tasks or not
* @return true if cancelled, false otherwise
*/","* {@inheritDoc}
   *
   * <p>If a cancellation attempt succeeds on a {@code Future} that had previously been {@linkplain
   * #setFuture set asynchronously}, then the cancellation will also be propagated to the delegate
   * {@code Future} that was supplied in the {@code setFuture} call.
   *
   * <p>Rather than override this method to perform additional cancellation work or cleanup,
   * subclasses should override {@link #afterDone}, consulting {@link #isCancelled} and {@link
   * #wasInterrupted} as necessary. This ensures that the work is done even if the future is
   * cancelled without a call to {@code cancel}, such as by calling {@code
   * setFuture(cancelledFuture)}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,set,com.google.common.util.concurrent.AbstractFuture:set(java.lang.Object),487,495,"/**
* Sets the given value while ensuring atomicity using CAS.
* @param value new value to be set
*/","* Sets the result of this {@code Future} unless this {@code Future} has already been cancelled or
   * set (including {@linkplain #setFuture set asynchronously}). When a call to this method returns,
   * the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b> the call was
   * accepted (in which case it returns {@code true}). If it returns {@code false}, the {@code
   * Future} may have previously been set asynchronously, in which case its result may not be known
   * yet. That result, though not yet known, cannot be overridden by a call to a {@code set*}
   * method, only by a call to {@link #cancel}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.
   *
   * @param value the value to be used as the result
   * @return true if the attempt was accepted, completing the {@code Future}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,setException,com.google.common.util.concurrent.AbstractFuture:setException(java.lang.Throwable),512,520,"/**
* Sets an exception and updates the associated value.
* @param throwable the exception to set
* @return true if updated successfully, false otherwise
*/","* Sets the failed result of this {@code Future} unless this {@code Future} has already been
   * cancelled or set (including {@linkplain #setFuture set asynchronously}). When a call to this
   * method returns, the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b>
   * the call was accepted (in which case it returns {@code true}). If it returns {@code false}, the
   * {@code Future} may have previously been set asynchronously, in which case its result may not be
   * known yet. That result, though not yet known, cannot be overridden by a call to a {@code set*}
   * method, only by a call to {@link #cancel}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.
   *
   * @param throwable the exception to be used as the failed result
   * @return true if the attempt was accepted, completing the {@code Future}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,setFuture,com.google.common.util.concurrent.AbstractFuture:setFuture(com.google.common.util.concurrent.ListenableFuture),551,603,"/**
* Sets a future value, possibly propagating an interrupt from the caller.
* @param future ListenableFuture to set
* @return true if successful, false otherwise
*/","* Sets the result of this {@code Future} to match the supplied input {@code Future} once the
   * supplied {@code Future} is done, unless this {@code Future} has already been cancelled or set
   * (including ""set asynchronously,"" defined below).
   *
   * <p>If the supplied future is {@linkplain #isDone done} when this method is called and the call
   * is accepted, then this future is guaranteed to have been completed with the supplied future by
   * the time this method returns. If the supplied future is not done and the call is accepted, then
   * the future will be <i>set asynchronously</i>. Note that such a result, though not yet known,
   * cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}.
   *
   * <p>If the call {@code setFuture(delegate)} is accepted and this {@code Future} is later
   * cancelled, cancellation will be propagated to {@code delegate}. Additionally, any call to
   * {@code setFuture} after any cancellation will propagate cancellation to the supplied {@code
   * Future}.
   *
   * <p>Note that, even if the supplied future is cancelled and it causes this future to complete,
   * it will never trigger interruption behavior. In particular, it will not cause this future to
   * invoke the {@link #interruptTask} method, and the {@link #wasInterrupted} method will not
   * return {@code true}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.
   *
   * @param future the future to delegate to
   * @return true if the attempt was accepted, indicating that the {@code Future} was not previously
   *     cancelled or set.
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,transform,"com.google.common.util.concurrent.Futures:transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)",486,490,"/**
* Transforms a ListenableFuture of one type into another using a provided Function.
* @param input original future to transform
* @param function maps input values to output values
* @param executor executes the transformation; may be null for default executor
*/","* Returns a new {@code Future} whose result is derived from the result of the given {@code
   * Future}. If {@code input} fails, the returned {@code Future} fails with the same exception (and
   * the function is not invoked). Example usage:
   *
   * {@snippet :
   * ListenableFuture<QueryResult> queryFuture = ...;
   * ListenableFuture<List<Row>> rowsFuture =
   *     transform(queryFuture, QueryResult::getRows, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the warnings the {@link MoreExecutors#directExecutor} documentation.
   *
   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the
   * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel
   * the input, and if the input is cancelled, the returned {@code Future} will receive a callback
   * in which it will attempt to cancel itself.
   *
   * <p>An example use of this method is to convert a serializable object returned from an RPC into
   * a POJO.
   *
   * @param input The future to transform
   * @param function A Function to transform the results of the provided future to the results of
   *     the returned future.
   * @param executor Executor to run the function in.
   * @return A future that holds result of the transformation.
   * @since 9.0 (in 2.0 as {@code compose})",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,incrementAndGet,com.google.common.util.concurrent.AtomicLongMap:incrementAndGet(java.lang.Object),91,94,"/**
* Increments and returns the value associated with the given key.
* @param key unique identifier for the key to be incremented
*/","* Increments by one the value currently associated with {@code key}, and returns the new value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,decrementAndGet,com.google.common.util.concurrent.AtomicLongMap:decrementAndGet(java.lang.Object),99,102,"/**
* Decrements and returns the value associated with the given key.
* @param key unique identifier for the value to be decremented
*/","* Decrements by one the value currently associated with {@code key}, and returns the new value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndIncrement,com.google.common.util.concurrent.AtomicLongMap:getAndIncrement(java.lang.Object),116,119,"/**
* Atomically increments and returns value associated with given key.
* @param key unique identifier for data to be incremented
*/","* Increments by one the value currently associated with {@code key}, and returns the old value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndDecrement,com.google.common.util.concurrent.AtomicLongMap:getAndDecrement(java.lang.Object),124,127,"/**
* Decrements and returns value associated with given key.
* @param key unique identifier of the key to decrement
*/","* Decrements by one the value currently associated with {@code key}, and returns the old value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,create,com.google.common.util.concurrent.AtomicLongMap:create(java.util.Map),74,78,"/**
* Creates an AtomicLongMap instance and populates it from the given map.
* @param m input map containing key-value pairs to initialize the map
*/",Creates an {@code AtomicLongMap} with the same mappings as the specified {@code Map}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractGraph:incidentEdgeOrder(),101,104,"/**
* Returns the edge order of an incident element. 
* @return Edge order as unordered.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractValueGraph:incidentEdgeOrder(),101,104,"/**
* Returns the edge order of incidents, defaulting to unordered. 
* @return Edge order as ElementOrder enum value.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,<init>,com.google.common.graph.GraphBuilder:<init>(boolean),77,79,"/**
* Initializes a new graph builder with specified directionality.
* @param directed true to create an undirected graph, false otherwise
*/",Creates a new instance with the specified edge directionality.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,<init>,com.google.common.graph.NetworkBuilder:<init>(boolean),82,84,"/**
 * Initializes a new NetworkBuilder instance with the specified graph directionality.
 * @param directed true to create a directed network, false otherwise
 */",Creates a new instance with the specified edge directionality.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,<init>,com.google.common.graph.ValueGraphBuilder:<init>(boolean),79,81,"/**
* Initializes ValueGraphBuilder with graph directionality.
* @param directed true for directed graph, false otherwise
*/",Creates a new instance with the specified edge directionality.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,addListener,"com.google.common.util.concurrent.AbstractService:addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor)",510,513,"/**
* Registers an event listener with the specified executor.
* @param listener event listener to register
* @param executor executor service for listener execution
*/",* @since 13.0,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,addListener,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor)",579,581,"/**
* Adds a listener to the list of event handlers.
* @param listener the event handler to register
* @param executor the thread executor to use when invoking the listener
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,apply,com.google.common.base.Converter:apply(java.lang.Object),447,470,"/**
* Applies conversion from A to B using the underlying converter.
* @param a input value of type A
*/",* @deprecated Provided to satisfy the {@code Function} interface; use {@link #convert} instead.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,create,com.google.common.collect.CompactHashMap:create(),97,100,"/**
* Creates an empty CompactHashMap instance.
* @return newly created map with no entries
*/",Creates an empty {@code CompactHashMap} instance.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,createWithExpectedSize,com.google.common.collect.CompactHashMap:createWithExpectedSize(int),111,114,"/**
* Creates a CompactHashMap with an expected size.
* @param expectedSize estimated map size
*/","* Creates a {@code CompactHashMap} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactHashMap} with enough capacity to hold {@code expectedSize}
   *     elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,<init>,"com.google.common.collect.CompactLinkedHashMap:<init>(int,boolean)",110,113,"/**
* Creates a compact linked hash map with specified size and access order.
* @param expectedSize initial capacity
* @param accessOrder true for last-access-order, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,create,com.google.common.collect.CompactHashSet:create(),85,87,"/**
* Creates an empty compact hash set.
*/",Creates an empty {@code CompactHashSet} instance.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,<init>,com.google.common.collect.CompactLinkedHashSet:<init>(),126,126,"/**
* Creates an empty compact linked hash set. 
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,createWithExpectedSize,com.google.common.collect.CompactHashSet:createWithExpectedSize(int),126,129,"/**
* Creates a compact hash set with an estimated size.
* @param expectedSize initial capacity estimate
*/","* Creates a {@code CompactHashSet} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactHashSet} with enough capacity to hold {@code expectedSize}
   *     elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,<init>,com.google.common.collect.CompactLinkedHashSet:<init>(int),128,130,"/**
 * Initializes a compact linked hash set with an estimated size. 
 * @param expectedSize initial capacity estimate */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newListMultimap,"com.google.common.collect.Multimaps:newListMultimap(java.util.Map,com.google.common.base.Supplier)",330,334,"/**
* Creates a new list multimap from a map and a collection factory.
* @param map input map with keys to values collections
* @param factory supplier of list for storing values
*/","* Creates a new {@code ListMultimap} that uses the provided map and factory. It can generate a
   * multimap based on arbitrary {@link Map} and {@link List} classes. Most users should prefer
   * {@link MultimapBuilder}, though a small number of users will need this method to cover map or
   * collection types that {@link MultimapBuilder} does not support.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. The multimap's {@code get}, {@code
   * removeAll}, and {@code replaceValues} methods return {@code RandomAccess} lists if the factory
   * does. However, the multimap's {@code get} method returns instances of a different class than
   * does {@code factory.get()}.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the lists generated by {@code
   * factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedListMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()} and {@link
   * LinkedListMultimap#create()} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the lists returned by
   * {@code factory}. Those objects should not be manually updated, they should be empty when
   * provided, and they should not use soft, weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty lists that will each hold all values for a given key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedKeySortedSetMultimap.java,<init>,com.google.common.collect.AbstractSortedKeySortedSetMultimap:<init>(java.util.SortedMap),39,41,"/**
* Constructs an instance from a sorted key-value map.
* @param map a map where keys are sorted and values are collections of multimap entries
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomSortedSetMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",535,539,"/**
* Initializes a custom sorted multimap with the given map and a factory for sorted sets.
* @param map underlying map
* @param factory supplier of sorted set instances
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newSetMultimap,"com.google.common.collect.Multimaps:newSetMultimap(java.util.Map,com.google.common.base.Supplier)",416,420,"/**
* Creates a new set multimap from an existing map and a set factory.
* @param map initial map of key to value collections
* @param factory supplier for creating sets used in the multimap
*/","* Creates a new {@code SetMultimap} that uses the provided map and factory. It can generate a
   * multimap based on arbitrary {@link Map} and {@link Set} classes. Most users should prefer
   * {@link MultimapBuilder}, though a small number of users will need this method to cover map or
   * collection types that {@link MultimapBuilder} does not support.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}
   * method returns instances of a different class than {@code factory.get()} does.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code
   * factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedSetMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link HashMultimap#create()}, {@link
   * LinkedHashMultimap#create()}, {@link TreeMultimap#create()}, and {@link
   * TreeMultimap#create(Comparator, Comparator)} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by
   * {@code factory}. Those objects should not be manually updated and they should not use soft,
   * weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty sets that will each hold all values for a given key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMultiset,"com.google.common.collect.CollectCollectors:toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction)",152,165,"/**
* Converts stream elements to immutable multiset.
* @param elementFunction function to extract key from each element
* @param countFunction function to get count of each element
* @return Collector that produces an ImmutableMultiset instance
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,<init>,com.google.common.collect.ImmutableMultiset$Builder:<init>(),483,485,"/**
* Initializes the builder with an empty multiset.
*/","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableMultiset#builder}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,spliterator,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:spliterator(),67,70,"/**
* Returns a Spliterator to iterate over the map's entries.
* @return Spliterator of Entry objects or null if empty.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,spliterator,com.google.common.collect.ImmutableSortedMap$1EntrySet:spliterator(),611,614,"/**
* Returns a Spliterator instance to iterate over elements in this collection.
* @return Spliterator instance with specified characteristics and size
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,spliterator,com.google.common.collect.RegularImmutableSortedSet:spliterator(),80,83,"/**
* Returns a spliterator for this collection.
* @return Spliterator over elements in this list
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,newHasher,com.google.common.hash.Crc32cHashFunction:newHasher(),35,38,"/**
* Returns a new instance of CRC-32C hash algorithm.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,newHasher,com.google.common.hash.Murmur3_128HashFunction:newHasher(),63,66,"/**
* Creates a new instance of Murmur3-128 hasher with the specified seed. 
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,newHasher,com.google.common.hash.SipHashFunction:newHasher(),71,74,"/**
* Creates a new hasher instance with specified parameters.
* @return Hasher object initialized with c, d, k0 and k1 values.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,toString,com.google.common.math.Stats:toString(),445,458,"/**
* Returns a string representation of the statistics object.
* @return formatted string with key-value pairs for count, mean, 
* population standard deviation, min, and max values.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,andThen,com.google.common.base.Converter:andThen(com.google.common.base.Converter),376,378,"/**
* Composes two converters into one by chaining their transformations.
* @param secondConverter second converter to be applied after the first
*/","* Returns a converter whose {@code convert} method applies {@code secondConverter} to the result
   * of this converter. Its {@code reverse} method applies the converters in reverse order.
   *
   * <p>The returned converter is serializable if {@code this} converter and {@code secondConverter}
   * are.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,equals,com.google.common.collect.Sets$CartesianSet:equals(java.lang.Object),1611,1624,"/**
* Determines if the set is equal to another object.
* @param object the other object for comparison
* @return true if sets are equal, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$TypeVariableImpl:equals(java.lang.Object),438,462,"/**
* Compares this type variable to another object for equality.
* @param obj the object to compare with
* @return true if equal, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$WildcardTypeImpl:equals(java.lang.Object),487,495,"/**
* Compares this WildcardType object with another for equality.
* @param obj the object to compare with
* @return true if both objects have matching lower and upper bounds, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.lang.Object[])",168,173,"/**
* Appends a collection of objects to the StringBuilder.
* @param builder target StringBuilder instance
* @param parts array of objects to be appended
* @return the modified StringBuilder instance
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,
   * Iterable)}, except that it does not throw {@link IOException}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner:join(java.lang.Iterable),193,233,"/**
* Concatenates an iterable of parts into a single string using the provided separator.
* @param parts Iterable of objects to concatenate
*/","* Returns a string containing the string representation of each of {@code parts}, using the
   * previously configured separator between each.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,create,com.google.common.collect.MapMakerInternalMap:create(com.google.common.collect.MapMaker),205,223,"/**
* Creates a custom internal map based on the provided MapMaker configuration.
* @param builder MapMaker instance with strength settings
*/",Returns a fresh {@link MapMakerInternalMap} as specified by the given {@code builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,createWithDummyValues,com.google.common.collect.MapMakerInternalMap:createWithDummyValues(com.google.common.collect.MapMaker),235,250,"/**
* Creates a MapMakerInternalMap with dummy value entries based on the given MapMaker configuration.
* @param builder MapMaker instance defining map properties
*/","* Returns a fresh {@link MapMakerInternalMap} with {@link MapMaker.Dummy} values but otherwise as
   * specified by the given {@code builder}. The returned {@link MapMakerInternalMap} will be
   * optimized to saved memory. Since {@link MapMaker.Dummy} is a singleton, we don't need to store
   * any values at all. Because of this optimization, {@code build.getValueStrength()} must be
   * {@link Strength#STRONG}.
   *
   * <p>This method is intended to only be used by the internal implementation of {@link Interners},
   * since a map of dummy values is the exact use case there.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,concat,com.google.common.collect.FluentIterable:concat(java.lang.Iterable),252,256,"/**
* Concatenates multiple iterables into a single fluent iterable.
* @param inputs variable-length array of input iterables
*/","* Returns a fluent iterable that combines several iterables. The returned iterable has an
   * iterator that traverses the elements of each iterable in {@code inputs}. The input iterators
   * are not polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>{@code Stream} equivalent:</b> to concatenate an arbitrary number of streams, use {@code
   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code
   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.
   *
   * @throws NullPointerException if any of the provided iterables is {@code null}
   * @since 20.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,toString,com.google.common.util.concurrent.AbstractFuture:toString(),859,877,"/**
* Returns a human-readable string representation of the Future object.
* @return status string, e.g. ""CANCELLED"", ""[status=PENDING]"", etc.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,get,com.google.common.collect.FluentIterable:get(int),835,838,"/**
* Retrieves an element at the specified index from the underlying collection.
* @param position the index of the desired element (0-based)
*/","* Returns the element at the specified position in this fluent iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (but note
   * that this throws different exception types, and throws an exception if {@code null} would be
   * returned).
   *
   * @param position position of the element to return
   * @return the element at the specified position in this fluent iterable
   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to
   *     the size of this fluent iterable",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,of,com.google.common.graph.DirectedMultiNetworkConnections:of(),49,54,"/**
* Creates an empty directed multi-network with default capacity and load factor.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,newConnections,com.google.common.graph.StandardMutableValueGraph:newConnections(),187,191,"/**
* Creates a new graph connection object based on the graph's directionality.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,acquire,com.google.common.util.concurrent.RateLimiter:acquire(),288,291,"/**
* Acquires one unit of resource with default quantity.
* @return Resource value or zero if failed
*/","* Acquires a single permit from this {@code RateLimiter}, blocking until the request can be
   * granted. Tells the amount of time slept, if any.
   *
   * <p>This method is equivalent to {@code acquire(1)}.
   *
   * @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited
   * @since 16.0 (present in 13.0 with {@code void} return type})",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enter,com.google.common.util.concurrent.Monitor:enter(java.time.Duration),391,393,"/**
* Converts duration to nanoseconds and enters it.
* @param time duration to convert and enter
*/","* Enters this monitor. Blocks at most the given time.
   *
   * @return whether the monitor was entered
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterIf,"com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",709,726,"/**
* Enters the guarded block and checks the condition.
* @param guard Guard object to monitor
* @param time timeout value in specified unit
* @param unit TimeUnit for the timeout value
* @return true if condition satisfied, false otherwise
*/","* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the
   * lock, but does not wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,from,com.google.common.cache.CacheBuilder:from(com.google.common.cache.CacheBuilderSpec),329,332,"/**
* Creates a CacheBuilder instance from a specification.
* @param spec CacheBuilder specification object
* @return CacheBuilder instance for building caches
*/","* Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}.
   *
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,newStrongInterner,com.google.common.collect.Interners:newStrongInterner(),103,105,"/**
* Creates a strong interned instance of the Map.
* @return Interner object
*/","* Returns a new thread-safe interner which retains a strong reference to each instance it has
   * interned, thus preventing these instances from being garbage-collected. If this retention is
   * acceptable, this implementation may perform better than {@link #newWeakInterner}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,newWeakInterner,com.google.common.collect.Interners:newWeakInterner(),113,116,"/**
* Creates an interned object cache with weak references.
*/","* Returns a new thread-safe interner which retains a weak reference to each instance it has
   * interned, and so does not prevent these instances from being garbage-collected. This most
   * likely does not perform as well as {@link #newStrongInterner}, but is the best alternative when
   * the memory usage of that implementation is unacceptable.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,entrySpliterator,com.google.common.collect.ArrayTable$ArrayMap:entrySpliterator(),256,259,"/**
* Creates an indexed spliterator for entries in the map.
* @return spliterator yielding map entries in order
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getValue,com.google.common.collect.ArrayTable$Column:getValue(int),628,631,"/**
* Retrieves value from collection at specified index.
* @param index position of value to fetch
* @return Value object or null if out of bounds
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getValue,com.google.common.collect.ArrayTable$Row:getValue(int),720,723,"/**
* Retrieves value at specified index from collection.
* @param index position of desired element
* @return value at index or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,get,"com.google.common.collect.ArrayTable:get(java.lang.Object,java.lang.Object)",436,441,"/**
* Retrieves a value from the table by row and column keys.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @return Value object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getValue,com.google.common.collect.ArrayTable:getValue(int),587,591,"/**
* Retrieves value from the data structure at specified row and column indices.
* @param index unique identifier for row and column combination
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,setValue,"com.google.common.collect.ArrayTable$Column:setValue(int,java.lang.Object)",633,636,"/**
* Sets value at specified column index and returns current value.
* @param index column index to update
* @param newValue new value to assign (may be null)
* @return previous value or null if not previously set
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,setValue,"com.google.common.collect.ArrayTable$Row:setValue(int,java.lang.Object)",725,728,"/**
* Sets value at specified index in collection.
* @param index position to update
* @param newValue new value to assign (may be null)
* @return previous value or null if not present
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,put,"com.google.common.collect.ArrayTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",457,467,"/**
* Sets a cell value by row and column keys.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value new cell value (may be null)
* @return previous value in the cell or null if not set
*/","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if {@code rowKey} is not in {@link #rowKeySet()} or {@code
   *     columnKey} is not in {@link #columnKeySet()}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,erase,"com.google.common.collect.ArrayTable:erase(java.lang.Object,java.lang.Object)",516,524,"/**
* Removes a data point from the table by row and column keys.
* @param rowKey unique row identifier or null for none
* @param columnKey unique column identifier or null for none
* @return V object or null if not found
*/","* Associates the value {@code null} with the specified keys, assuming both keys are valid. If
   * either key is null or isn't among the keys provided during construction, this method has no
   * effect.
   *
   * <p>This method is equivalent to {@code put(rowKey, columnKey, null)} when both provided keys
   * are valid.
   *
   * @param rowKey row key of mapping to be erased
   * @param columnKey column key of mapping to be erased
   * @return the value previously associated with the keys, or {@code null} if no mapping existed
   *     for the keys",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,remove,com.google.common.collect.Lists$ReverseList:remove(int),896,900,"/**
* Removes element at specified index from list.
* @param index position of element to remove (1-based)
* @return removed element or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,set,"com.google.common.collect.Lists$ReverseList:set(int,java.lang.Object)",907,911,"/**
* Sets an element at specified index in the list.
* @param index position to insert the element
* @param element value to be inserted
* @return same type as input (T)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$ReverseList:get(int),913,917,"/**
* Retrieves an element at the given index from the underlying list.
* @param index position to retrieve
* @return object of type T or null if out of bounds
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,get,com.google.common.primitives.ImmutableDoubleArray$AsList:get(int),499,502,"/**
* Delegates retrieval of value at specified index to parent collection.
* @param index position in collection to retrieve value from
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,equals,com.google.common.primitives.ImmutableDoubleArray:equals(java.lang.Object),570,588,"/**
* Compares this ImmutableDoubleArray to another object for equality.
* @param object object to compare with
* @return true if equal, false otherwise
*/","* Returns {@code true} if {@code object} is an {@code ImmutableDoubleArray} containing the same
   * values as this one, in the same order. Values are compared as if by {@link Double#equals}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,get,com.google.common.primitives.ImmutableIntArray$AsList:get(int),494,497,"/**
* Delegates retrieval of element at specified index to parent collection.
* @param index position of element in collection (0-based)
* @return integer value at given index or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,equals,com.google.common.primitives.ImmutableIntArray:equals(java.lang.Object),565,583,"/**
* Compares this ImmutableIntArray with another object for equality.
* @param object the object to compare with
* @return true if both arrays have the same length and elements, false otherwise
*/","* Returns {@code true} if {@code object} is an {@code ImmutableIntArray} containing the same
   * values as this one, in the same order.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,get,com.google.common.primitives.ImmutableLongArray$AsList:get(int),496,499,"/**
* Retrieves value at specified index from parent collection.
* @param index position of desired value
* @return Long value or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,equals,com.google.common.primitives.ImmutableLongArray:equals(java.lang.Object),567,585,"/**
* Compares this ImmutableLongArray with another object.
* @param object the object to compare
* @return true if equal, false otherwise
*/","* Returns {@code true} if {@code object} is an {@code ImmutableLongArray} containing the same
   * values as this one, in the same order.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
* Converts string to specified case format.
* @param format CaseFormat enum value
* @param s input string
*/",Enum values can override for performance reasons.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,com.google.common.base.CharMatcher:indexIn(java.lang.CharSequence),544,546,"/**
* Returns the starting index of this char sequence within a given CharSequence.
* @param sequence the CharSequence to search in
*/","* Returns the index of the first matching BMP character in a character sequence, or {@code -1} if
   * no matching character is present.
   *
   * <p>The default implementation iterates over the sequence in forward order calling {@link
   * #matches} for each character.
   *
   * @param sequence the character sequence to examine from the beginning
   * @return an index, or {@code -1} if no character matches",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeTokenIfPresent,com.google.common.net.MediaType$Tokenizer:consumeTokenIfPresent(com.google.common.base.CharMatcher),1152,1158,"/**
* Consumes and returns the current token based on the provided matcher.
* @param matcher character matcher to determine token boundaries
* @return the consumed token as a String or an empty string if no more tokens are available
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,<init>,com.google.common.collect.AbstractIndexedListIterator:<init>(int),50,52,"/**
* Constructs an iterator over an empty list of specified size.
* @param size initial size of the underlying list
*/","* Constructs an iterator across a sequence of the given size whose initial position is 0. That
   * is, the first call to {@link #next()} will return the first element (or throw {@link
   * NoSuchElementException} if {@code size} is zero).
   *
   * @throws IllegalArgumentException if {@code size} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,add,com.google.common.collect.FilteredKeyMultimap$AddRejectingList:add(java.lang.Object),147,151,"/**
* Adds an object to the collection without adjusting its position.
* @param v object to be added (must not be null)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,addAll,com.google.common.collect.FilteredKeyMultimap$AddRejectingList:addAll(java.util.Collection),159,163,"/**
* Adds all elements from the given collection to this set.
* @param collection collection of elements to add
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,add,"com.google.common.collect.Lists$ReverseList:add(int,java.lang.Object)",886,889,"/**
* Inserts an element at the given position in the list.
* @param index 0-based index where the element will be added
* @param element element to insert into the list
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,listIterator,com.google.common.collect.Lists$ReverseList:listIterator(int),935,1003,"/**
* Returns a ListIterator positioned at the specified index.
* @param index target position in the list
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getTeredoInfo,com.google.common.net.InetAddresses:getTeredoInfo(java.net.Inet6Address),823,842,"/**
* Retrieves Teredo information from a given IPv6 address.
* @param ip the IPv6 address to extract info from
* @return TeredoInfo object containing server IP, client IP, port, and flags or null if invalid
*/","* Returns the Teredo information embedded in a Teredo address.
   *
   * @param ip {@link Inet6Address} to be examined for embedded Teredo information
   * @return extracted {@code TeredoInfo}
   * @throws IllegalArgumentException if the argument is not a valid IPv6 Teredo address",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,isWellFormed,com.google.common.base.Utf8:isWellFormed(byte[]),110,112,"/**
* Verifies whether the given byte array represents a well-formed binary data structure.
*/","* Returns {@code true} if {@code bytes} is a <i>well-formed</i> UTF-8 byte sequence according to
   * Unicode 6.0. Note that this is a stronger criterion than simply whether the bytes can be
   * decoded. For example, some versions of the JDK decoder will accept ""non-shortest form"" byte
   * sequences, but encoding never reproduces these. Such byte sequences are <i>not</i> considered
   * well-formed.
   *
   * <p>This method returns {@code true} if and only if {@code Arrays.equals(bytes, new
   * String(bytes, UTF_8).getBytes(UTF_8))} does, but is more efficient in both time and space.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$KeySetView:toArray(java.lang.Object[]),713,727,"/**
* Converts collection to array of specified type.
* @param a target array with same element type
* @return array representation or original array if allocation needed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$ValuesView:toArray(java.lang.Object[]),1035,1049,"/**
* Converts collection to array.
* @param a the array to fill or new array if needsAllocArrays()
* @return T[] filled array or original array if not needing allocation
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,toArray,com.google.common.collect.CompactHashSet:toArray(java.lang.Object[]),635,649,"/**
* Converts this collection to an array.
* @param a target array, or new one if needsAllocArrays()
* @return array representation of the collection
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$KeySetView:toArray(),702,711,"/**
* Converts collection to array.
* @return Array of objects or empty array if allocation is needed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$ValuesView:toArray(),1024,1033,"/**
* Returns an array representation of this collection.
* @return Array of objects or empty array if allocation is required
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putBytes,com.google.common.hash.AbstractHasher:putBytes(byte[]),63,67,"/**
* Puts byte array into hasher.
* @param bytes input data to hash
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putBytes,com.google.common.hash.AbstractHasher:putBytes(java.nio.ByteBuffer),79,91,"/**
* Puts a ByteBuffer into the Hasher.
* @param b input byte buffer
* @return this Hasher instance for chaining
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,"com.google.common.hash.Hasher:putBytes(byte[],int,int)",66,68,"/**
* Updates this hasher with specified byte array.
* @param bytes the byte array to update from
* @param off offset in bytes array to start updating from
* @param len length of data to update (must be non-negative)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,makeHash,com.google.common.hash.Hashing$ConcatenatedHashFunction:makeHash(com.google.common.hash.Hasher[]),798,807,"/**
* Concatenates hashes from multiple Hasher instances.
* @param hashers array of Hasher objects to combine
* @return resulting HashCode object
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeTo,"com.google.common.io.BaseEncoding$StandardBaseEncoding:encodeTo(java.lang.Appendable,byte[],int,int)",683,690,"/**
* Encodes a byte array to an Appendable target in chunks.
* @param target output stream
* @param bytes byte array to encode
* @param off offset into bytes array
* @param len length of bytes array chunk
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encode,com.google.common.io.BaseEncoding:encode(byte[]),146,148,"/**
* Encodes byte array into a string.
* @param bytes input byte array to be encoded
*/","Encodes the specified byte array, and returns the encoded {@code String}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,toString,com.google.common.io.ByteSource$ByteArrayByteSource:toString(),640,645,"/**
* Returns string representation of ByteSource instance.
* @return hexadecimal encoded bytes wrapped in ByteSource object
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,readFully,"com.google.common.io.ByteStreams:readFully(java.io.InputStream,byte[],int,int)",813,819,"/**
* Reads fully from the specified InputStream into a byte array.
* @param in InputStream to read from
* @param b Byte array to store the data
* @param off Offset within the byte array to start writing
* @param len Number of bytes to read and write
*/","* Attempts to read {@code len} bytes from the stream into the given array starting at {@code
   * off}, with the same behavior as {@link DataInput#readFully(byte[], int, int)}. Does not close
   * the stream.
   *
   * @param in the input stream to read from.
   * @param b the buffer into which the data is read.
   * @param off an int specifying the offset into the data.
   * @param len an int specifying the number of bytes to read.
   * @throws EOFException if this stream reaches the end before reading all the bytes.
   * @throws IOException if an I/O error occurs.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,reverse,com.google.common.primitives.Booleans:reverse(boolean[]),539,542,"/**
 * Reverses the order of elements in the specified boolean array.
 * @param array input boolean array to be reversed
 */","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Booleans.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,rotate,"com.google.common.primitives.Booleans:rotate(boolean[],int,int,int)",590,612,"/**
* Rotates a boolean array within the specified range by the given distance.
* @param array boolean array to rotate
* @param distance number of positions to shift
* @param fromIndex start index of rotation section (inclusive)
* @param toIndex end index of rotation section (exclusive)","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Booleans.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * somewhat faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,reverse,com.google.common.primitives.Bytes:reverse(byte[]),390,393,"/**
* Reverses the order of bytes in the specified array.
* @param array byte array to be reversed
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Bytes.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,rotate,"com.google.common.primitives.Bytes:rotate(byte[],int,int,int)",441,463,"/**
* Rotates a byte array by specified distance within the given range.
* @param array the byte array to rotate
* @param distance the number of positions to rotate
* @param fromIndex the start index of the section to rotate
* @param toIndex the end index of the section to rotate
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is somewhat
   * faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,sortDescending,"com.google.common.primitives.SignedBytes:sortDescending(byte[],int,int)",211,216,"/**
* Sorts the specified range of the byte array in descending order.
* @param array the byte array to sort
* @param fromIndex start index of the range (inclusive)
* @param toIndex end index of the range (exclusive) 
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,sortDescending,"com.google.common.primitives.Chars:sortDescending(char[],int,int)",467,472,"/**
* Sorts the specified range of a character array in descending order.
* @param array the array to sort
* @param fromIndex the starting index (inclusive)
* @param toIndex the ending index (exclusive) 
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,reverse,com.google.common.primitives.Chars:reverse(char[]),480,483,"/**
* Reverses the characters in the given array in-place.
* @param array the character array to be reversed
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Chars.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,rotate,"com.google.common.primitives.Chars:rotate(char[],int,int,int)",531,553,"/**
* Rotates a substring within the given array by the specified distance.
* @param array input character array
* @param distance rotation distance
* @param fromIndex start index of the substring
* @param toIndex end index of the substring
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Chars.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,sortDescending,"com.google.common.primitives.Doubles:sortDescending(double[],int,int)",441,446,"/**
* Sorts the specified range of double array in descending order.
* @param array the array to sort
* @param fromIndex the starting index of the range (inclusive)
* @param toIndex the ending index of the range (exclusive)","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,reverse,com.google.common.primitives.Doubles:reverse(double[]),454,457,"/**
* Reverses the order of elements in a double array.
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Doubles.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,rotate,"com.google.common.primitives.Doubles:rotate(double[],int,int,int)",505,527,"/**
* Rotates a subarray within the given array by the specified distance.
* @param array input double array
* @param distance number of positions to rotate
* @param fromIndex starting index of subarray to rotate
* @param toIndex ending index of subarray to rotate
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,sortDescending,"com.google.common.primitives.Floats:sortDescending(float[],int,int)",438,443,"/**
* Sorts the specified subarray of floats in descending order.
* @param array the array containing the elements to sort
* @param fromIndex start index of the subarray (inclusive)
* @param toIndex end index of the subarray (exclusive) 
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,reverse,com.google.common.primitives.Floats:reverse(float[]),451,454,"/**
* Reverses the order of elements in the given float array.
* @param array input array to be reversed
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Floats.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,rotate,"com.google.common.primitives.Floats:rotate(float[],int,int,int)",502,524,"/**
* Rotates elements in a float array within specified range by given distance.
* @param array the input array
* @param distance the number of positions to rotate
* @param fromIndex start index of rotation range (inclusive)
* @param toIndex end index of rotation range (inclusive) 
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Floats.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,subList,"com.google.common.primitives.ImmutableDoubleArray$AsList:subList(int,int)",519,522,"/**
* Extracts a sublist of doubles from the underlying data structure.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return list of Double values or empty list if invalid indices
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,subList,"com.google.common.primitives.ImmutableIntArray$AsList:subList(int,int)",514,517,"/**
* Extracts sublist of integers from parent collection.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List of integers in the specified range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,subList,"com.google.common.primitives.ImmutableLongArray$AsList:subList(int,int)",516,519,"/**
* Returns a sublist of IDs within the specified range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (inclusive)
* @return list of IDs or empty list if range is invalid
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,sortDescending,"com.google.common.primitives.Ints:sortDescending(int[],int,int)",500,505,"/**
* Sorts the specified range of an array in descending order.
* @param array the array to sort
* @param fromIndex start index (inclusive) of the range to sort
* @param toIndex end index (exclusive) of the range to sort
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,reverse,com.google.common.primitives.Ints:reverse(int[]),513,516,"/**
* Reverses the order of elements in the given integer array.
* @param array input array to be reversed
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Ints.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,rotate,"com.google.common.primitives.Ints:rotate(int[],int,int,int)",564,612,"/**
* Rotates a portion of an array by the specified distance.
* @param array input array
* @param distance number of positions to rotate
* @param fromIndex start index of rotation section (inclusive)
* @param toIndex end index of rotation section (exclusive)
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Ints.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,sortDescending,"com.google.common.primitives.Longs:sortDescending(long[],int,int)",578,583,"/**
* Sorts the specified range of elements in the array in descending order.
* @param array input array
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,reverse,com.google.common.primitives.Longs:reverse(long[]),591,594,"/**
* Reverses the order of elements in a long array.
* @param array input array to be reversed
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Longs.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,rotate,"com.google.common.primitives.Longs:rotate(long[],int,int,int)",642,664,"/**
* Rotates a portion of the array by specified distance.
* @param array input array
* @param distance number of positions to rotate
* @param fromIndex start index of rotation section (inclusive)
* @param toIndex end index of rotation section (exclusive) 
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Longs.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,sortDescending,"com.google.common.primitives.Shorts:sortDescending(short[],int,int)",490,495,"/**
* Sorts the specified portion of the short array in descending order.
* @param array input array
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,reverse,com.google.common.primitives.Shorts:reverse(short[]),503,506,"/**
* Reverses the order of elements in the specified short array.
* @param array input array to be reversed
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Shorts.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,rotate,"com.google.common.primitives.Shorts:rotate(short[],int,int,int)",554,576,"/**
* Rotates a portion of the given array by the specified distance.
* @param array the input array
* @param distance rotation distance (positive for forward rotation)
* @param fromIndex start index of rotation section
* @param toIndex end index of rotation section
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Shorts.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sort,com.google.common.primitives.UnsignedBytes:sort(byte[]),516,519,"/**
* Sorts an array of bytes in-place. 
* @param array byte array to be sorted
*/","* Sorts the array, treating its elements as unsigned bytes.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sortDescending,com.google.common.primitives.UnsignedBytes:sortDescending(byte[]),545,548,"/**
* Sorts an array of bytes in descending order.
*/","* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 8-bit
   * integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sort,com.google.common.primitives.UnsignedInts:sort(int[]),224,227,"/**
 * Sorts an integer array in ascending order using quicksort algorithm.
 * @param array input array to be sorted
 */","* Sorts the array, treating its elements as unsigned 32-bit integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sortDescending,com.google.common.primitives.UnsignedInts:sortDescending(int[]),253,256,"/**
* Sorts an integer array in descending order.
* @param array input array to be sorted
*/","* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 32-bit
   * integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sort,com.google.common.primitives.UnsignedLongs:sort(long[]),188,191,"/**
* Sorts an array of long integers in ascending order.
* @param array input array to be sorted
*/","* Sorts the array, treating its elements as unsigned 64-bit integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sortDescending,com.google.common.primitives.UnsignedLongs:sortDescending(long[]),217,220,"/**
* Sorts an array of long integers in descending order.
*/","* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 64-bit
   * integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,delegate,com.google.common.collect.FilteredKeyMultimap$Entries:delegate(),192,195,"/**
* Filters unfiltered entries based on the provided predicate.
* @return filtered collection of entries or empty collection if none match
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,toString,com.google.common.util.concurrent.ServiceManager:toString(),437,442,"/**
* Returns a human-readable string representation of ServiceManager.
* Includes services excluding NoOpService instances. 
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(java.lang.String),166,195,"/**
* Creates a Splitter with the specified non-empty separator.
* @param separator single character or multi-character separator string
*/","* Returns a splitter that uses the given fixed string as a separator. For example, {@code
   * Splitter.on("", "").split(""foo, bar,baz"")} returns an iterable containing {@code [""foo"",
   * ""bar,baz""]}.
   *
   * @param separator the literal, nonempty string to recognize as a separator
   * @return a splitter, with default settings, that recognizes that separator",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,withKeyValueSeparator,com.google.common.base.Splitter:withKeyValueSeparator(char),442,444,"/**
* Returns a MapSplitter instance using a custom key-value separator.
* @param separator character used to separate keys and values
*/","* Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries
   * into keys and values using the specified separator.
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$ComputingValueReference:<init>(com.google.common.cache.LocalCache$ValueReference),3628,3630,"/**
* Initializes ValueReference with existing value.
* @param oldValue ValueReference instance to inherit from 
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LoadingValueReference:<init>(),3496,3498,"/**
* Constructs an empty LoadingValueReference instance.
* @param valueReference optional initial value reference (null by default) 
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,createFromSystemTimer,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch:createFromSystemTimer(),474,490,"/**
* Creates a sleeping stopwatch instance based on system timer.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,startFinalizer,"com.google.common.base.internal.Finalizer:startFinalizer(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference)",62,110,"/**
* Starts a Finalizer thread for the given class and queue.
* @param finalizableReferenceClass class of the FinalizableReference
* @param queue ReferenceQueue to use for cleanup
* @throws IllegalArgumentException if invalid class is provided
*/","* Starts the Finalizer thread. FinalizableReferenceQueue calls this method reflectively.
   *
   * @param finalizableReferenceClass FinalizableReference.class.
   * @param queue a reference queue that the thread will poll.
   * @param frqReference a phantom reference to the FinalizableReferenceQueue, which will be queued
   *     either when the FinalizableReferenceQueue is no longer referenced anywhere, or when its
   *     close() method is called.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,builder,com.google.common.collect.ImmutableListMultimap:builder(),193,195,"/**
* Creates an empty Builder instance.
* @return A new Builder object with default configuration
*/","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,builder,com.google.common.collect.ImmutableSetMultimap:builder(),221,223,"/**
* Creates an empty Builder instance.
* @return A new Builder with default configuration
*/",Returns a new {@link Builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LoadingSerializationProxy:<init>(com.google.common.cache.LocalCache),4795,4797,"/**
 * Initializes the proxy with the specified local cache instance.
 * @param cache LocalCache object containing key-value pairs
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,writeReplace,com.google.common.cache.LocalCache$LocalManualCache:writeReplace(),4926,4928,"/**
* Creates a proxy object to handle serialization of local cache.
* @return ManualSerializationProxy instance containing local cache data
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,unmodifiableMultiset,com.google.common.collect.Multisets:unmodifiableMultiset(com.google.common.collect.Multiset),106,114,"/**
* Wraps a modifiable multiset in an unmodifiable view.
* @param multiset the original multiset to wrap
* @return an unmodifiable Multiset instance or an existing one if it's already unmodifiable
*/","* Returns an unmodifiable view of the specified multiset. Query operations on the returned
   * multiset ""read through"" to the specified multiset, and attempts to modify the returned multiset
   * result in an {@link UnsupportedOperationException}.
   *
   * <p>The returned multiset will be serializable if the specified multiset is serializable.
   *
   * @param multiset the multiset for which an unmodifiable view is to be generated
   * @return an unmodifiable view of the multiset",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,<init>,com.google.common.collect.UnmodifiableSortedMultiset:<init>(com.google.common.collect.SortedMultiset),40,42,"/**
* Creates an unmodifiable view of the specified sorted multiset.
* @param delegate the underlying sorted multiset
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,create,com.google.common.collect.EvictingQueue:create(int),66,68,"/**
* Creates an EvictingQueue instance with specified maximum size.
* @param maxSize maximum number of elements in queue
*/","* Creates and returns a new evicting queue that will hold up to {@code maxSize} elements.
   *
   * <p>When {@code maxSize} is zero, elements will be evicted immediately after being added to the
   * queue.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,<init>,com.google.common.collect.ForwardingBlockingDeque:<init>(),56,56,"/**
* Creates an empty forwarding blocking deque. 
* This constructor is intended to be used by subclasses. 
*/",Constructor for use by subclasses.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,<init>,com.google.common.util.concurrent.ForwardingBlockingDeque:<init>(),54,54,"/**
* Creates an empty unmodifiable BlockingDeque instance. 
* This constructor is used to create a view of another collection. 
* The returned deque is serializable if the backing collection is serializable. 
*/",Constructor for use by subclasses.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,get,com.google.common.collect.FilteredKeyMultimap:get(java.lang.Object),103,112,"/**
* Retrieves a collection of values associated with the given key.
* @param key unique identifier
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,<init>,com.google.common.collect.ForwardingNavigableSet:<init>(),56,56,"/**
* Creates an empty forwarding navigable set.
*/",Constructor for use by subclasses.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,com.google.common.collect.Sets$UnmodifiableNavigableSet:<init>(java.util.NavigableSet),1963,1966,"/**
* Wraps an existing NavigableSet in an unmodifiable view.
* @param delegate the underlying navigable set
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableEntrySet,com.google.common.collect.Maps:unmodifiableEntrySet(java.util.Set),1482,1485,"/**
* Returns an unmodifiable view of the given entry set.
* @param entrySet original entry set
*/","* Returns an unmodifiable view of the specified set of entries. The {@link Entry#setValue}
   * operation throws an {@link UnsupportedOperationException}, as do any operations that would
   * modify the returned set.
   *
   * @param entrySet the entries for which to return an unmodifiable view
   * @return an unmodifiable view of the entries",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$SerializationProxy:<init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)",2883,2892,"/**
* Constructs a serialization proxy with specified strengths and equivalences.
* @param keyStrength strength of key serialization
* @param valueStrength strength of value serialization
* @param keyEquivalence equivalence strategy for keys
* @param valueEquivalence equivalence strategy for values
* @param concurrencyLevel concurrency level for underlying map
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableNavigableMap,com.google.common.collect.Maps:unmodifiableNavigableMap(java.util.NavigableMap),3432,3443,"/**
* Returns an unmodifiable view of the specified navigable map.
* @param map navigable map to wrap
*/","* Returns an unmodifiable view of the specified navigable map. Query operations on the returned
   * map read through to the specified map, and attempts to modify the returned map, whether direct
   * or via its views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned navigable map will be serializable if the specified navigable map is
   * serializable.
   *
   * <p>This method's signature will not permit you to convert a {@code NavigableMap<? extends K,
   * V>} to a {@code NavigableMap<K, V>}. If it permitted this, the returned map's {@code
   * comparator()} method might return a {@code Comparator<? extends K>}, which works only on a
   * particular subtype of {@code K}, but promise that it's a {@code Comparator<? super K>}, which
   * must work on any type of {@code K}.
   *
   * @param map the navigable map for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified navigable map
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$UnmodifiableNavigableMap:descendingMap(),3584,3590,"/**
* Returns a read-only NavigableMap view of the backing map in reverse order.
* @return NavigableMap object or null if not initialized
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,readResolve,com.google.common.collect.MutableClassToInstanceMap$SerializedForm:readResolve(),202,204,"/**
* Reconstructs the original object graph from the backing map.
* @return reconstructed object instance
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableListMultimap,com.google.common.collect.Multimaps:unmodifiableListMultimap(com.google.common.collect.ListMultimap),1007,1013,"/**
* Wraps a ListMultimap in an unmodifiable view.
* @param delegate original multimap instance
*/","* Returns an unmodifiable view of the specified {@code ListMultimap}. Query operations on the
   * returned multimap ""read through"" to the specified multimap, and attempts to modify the returned
   * multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:<init>(com.google.common.collect.SortedSetMultimap),864,866,"/**
* Creates an unmodifiable view of the provided sorted multimap.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableSetMultimap,com.google.common.collect.Multimaps:unmodifiableSetMultimap(com.google.common.collect.SetMultimap),923,929,"/**
* Returns an unmodifiable view of the given set multimap.
* @param delegate original set multimap
*/","* Returns an unmodifiable view of the specified {@code SetMultimap}. Query operations on the
   * returned multimap ""read through"" to the specified multimap, and attempts to modify the returned
   * multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,unmodifiableRowSortedTable,com.google.common.collect.Tables:unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable),632,641,"/**
* Returns an unmodifiable view of the input row-sorted table.
* @param table input table to wrap
*/","* Returns an unmodifiable view of the specified row-sorted table. This method allows modules to
   * provide users with ""read-only"" access to internal tables. Query operations on the returned
   * table ""read through"" to the specified table, and attempts to modify the returned table, whether
   * direct or via its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned table will be serializable if the specified table is serializable.
   *
   * @param table the row-sorted table for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified table
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:<init>(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.ScheduledFuture)",587,591,"/**
* Initializes a ListenableScheduledTask with both a listenable and scheduled future. 
* @param listenableDelegate listenable future to be executed
* @param scheduledDelegate scheduled future for execution timing
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,listenInPoolThread,com.google.common.util.concurrent.JdkFutureAdapters:listenInPoolThread(java.util.concurrent.Future),56,62,"/**
* Adapts the given Future to be Listenable in a thread-safe pool.
* @param future original non-Listenable Future
* @return ListenableFuture that wraps the original or its adapter
*/","* Assigns a thread to the given {@link Future} to provide {@link ListenableFuture} functionality.
   *
   * <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the
   * returned future will emulate {@link ListenableFuture#addListener} by taking a thread from an
   * internal, unbounded pool at the first call to {@code addListener} and holding it until the
   * future is {@linkplain Future#isDone() done}.
   *
   * <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link
   * MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link
   * ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code
   * Future} instances to be upgraded to {@code ListenableFuture} after the fact.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,hashCode,com.google.common.collect.ImmutableMultiset$EntrySet:hashCode(),401,404,"/**
* Returns the hash code of this immutable multiset.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,addCallback,"com.google.common.util.concurrent.Futures:addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)",1095,1099,"/**
* Adds a callback to the given ListenableFuture.
* @param future future to add callback to
* @param callback callback to invoke on completion
* @param executor executor to run callback in
*/","* Registers separate success and failure callbacks to be run when the {@code Future}'s
   * computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the
   * computation is already complete, immediately.
   *
   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of
   * callbacks, but any callback added through this method is guaranteed to be called once the
   * computation is complete.
   *
   * <p>Exceptions thrown by a {@code callback} will be propagated up to the executor. Any exception
   * thrown during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an
   * exception thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught
   * and logged.
   *
   * <p>Example:
   *
   * {@snippet :
   * ListenableFuture<QueryResult> future = ...;
   * Executor e = ...
   * addCallback(future,
   *     new FutureCallback<QueryResult>() {
   *       public void onSuccess(QueryResult result) {
   *         storeInCache(result);
   *       }
   *       public void onFailure(Throwable t) {
   *         reportError(t);
   *       }
   *     }, e);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the warnings the {@link MoreExecutors#directExecutor} documentation.
   *
   * <p>For a more general interface to attach a completion listener to a {@code Future}, see {@link
   * ListenableFuture#addListener addListener}.
   *
   * @param future The future attach the callback to.
   * @param callback The callback to invoke when {@code future} is completed.
   * @param executor The executor to run {@code callback} when the future completes.
   * @since 10.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache:<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)",246,322,"/**
* Initializes a LocalCache instance with given parameters.
* @param builder CacheBuilder instance
* @param loader optional CacheLoader instance
*/","* Creates a new, empty map with the specified strategy, initial capacity and concurrency level.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractGraph:inDegree(java.lang.Object),147,150,"/**
* Calculates the in-degree of a given graph node.
* @param node the node to calculate in-degree for
* @return the number of incoming edges or -1 if not found (for undirected graphs)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractValueGraph:inDegree(java.lang.Object),147,150,"/**
* Calculates the in-degree of a node.
* @param node graph node to calculate in-degree for
* @return integer in-degree value or -1 if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractGraph:outDegree(java.lang.Object),152,155,"/**
* Calculates the out-degree of a node in a graph.
* @param node Node to calculate out-degree for
* @return Out-degree (number of outgoing edges) or -1 if graph is undirected
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractValueGraph:outDegree(java.lang.Object),152,155,"/**
* Calculates the out-degree of a given node.
* @param node node to calculate out-degree for
* @return out-degree of the node (0 if undirected) or -1 if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractValueGraph$1:degree(java.lang.Object),136,145,"/**
* Calculates the degree of a node in this graph.
* @param node the node to calculate the degree for
* @return the total number of edges connected to the node
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,read,com.google.common.io.MoreFiles$PathByteSource:read(),160,165,"/**
* Reads file contents into a byte array.
* @throws IOException if an I/O error occurs
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,<init>,"com.google.common.collect.EnumBiMap:<init>(java.lang.Class,java.lang.Class)",90,95,"/**
* Creates a bidirectional map from an EnumMap for the given key and value types.
* @param keyTypeOrObjectUnderJ2cl Class of enum keys
* @param valueTypeOrObjectUnderJ2cl Class of enum values",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,<init>,com.google.common.collect.EnumHashBiMap:<init>(java.lang.Class),78,82,"/**
* Initializes an EnumHashBiMap with a predefined key type.
* @param keyType the class of the enum keys
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,create,com.google.common.collect.TreeMultiset:create(),77,80,"/**
* Creates a new instance of TreeMultiset with natural ordering.
*/","* Creates a new, empty multiset, sorted according to the elements' natural order. All elements
   * inserted into the multiset must implement the {@code Comparable} interface. Furthermore, all
   * such elements must be <i>mutually comparable</i>: {@code e1.compareTo(e2)} must not throw a
   * {@code ClassCastException} for any elements {@code e1} and {@code e2} in the multiset. If the
   * user attempts to add an element to the multiset that violates this constraint (for example, the
   * user attempts to add a string element to a set whose elements are integers), the {@code
   * add(Object)} call will throw a {@code ClassCastException}.
   *
   * <p>The type specification is {@code <E extends Comparable>}, instead of the more specific
   * {@code <E extends Comparable<? super E>>}, to support classes defined without generics.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,create,com.google.common.collect.TreeMultiset:create(java.util.Comparator),93,99,"/**
* Creates a TreeMultiset instance with optional custom comparator.
* @param comparator nullable comparator for tree ordering
* @return TreeMultiset object or default natural ordering if null
*/","* Creates a new, empty multiset, sorted according to the specified comparator. All elements
   * inserted into the multiset must be <i>mutually comparable</i> by the specified comparator:
   * {@code comparator.compare(e1, e2)} must not throw a {@code ClassCastException} for any elements
   * {@code e1} and {@code e2} in the multiset. If the user attempts to add an element to the
   * multiset that violates this constraint, the {@code add(Object)} call will throw a {@code
   * ClassCastException}.
   *
   * @param comparator the comparator that will be used to sort this multiset. A null value
   *     indicates that the elements' <i>natural ordering</i> should be used.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putAll,com.google.common.collect.AbstractBiMap:putAll(java.util.Map),187,192,"/**
* Adds all entries from the provided map to this map.
* @param map Map containing key-value pairs to be added
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,put,"com.google.common.collect.EnumBiMap:put(java.lang.Object,java.lang.Object)",124,128,"/**
* Inserts a new key-value pair into the map.
* @param key unique identifier for the entry
* @param value associated data for the entry
* @return previous value for this key or null if not present
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,forcePut,"com.google.common.collect.EnumBiMap:forcePut(java.lang.Object,java.lang.Object)",130,134,"/**
* Forces a value into both maps, returning the previous value or null.
* @param key unique map key
* @param value new value to store
* @return previous value in map or null if not present
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,navigableKeySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:navigableKeySet(),1644,1647,"/**
* Returns a navigable set view of keys in this map.
* @return A NavigableSet containing all keys in this map.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,replaceValues,"com.google.common.collect.AbstractListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",105,109,"/**
* Replaces values in a map with the specified keys and values.
* @param key unique identifier for replacement
* @param values iterable of new values to replace with
*/","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,replaceValues,"com.google.common.collect.AbstractSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",114,118,"/**
* Replaces values in a map with the given iterable.
* @param key unique map identifier
* @param values new values to replace with
* @return Set of replaced values or null if not found
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,removeAll,com.google.common.collect.AbstractSortedSetMultimap:removeAll(java.lang.Object),102,106,"/**
* Removes all elements equal to the given key from this set.
* @param key element to be removed, or null for no operation
* @return this set itself, for method chaining
*/","* Removes all values associated with a given key. The returned collection is immutable.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollLast,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:pollLast(),1095,1098,"/**
* Retrieves and removes the last element from the collection.
* @return the removed element or null if empty",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,toString,com.google.common.collect.ImmutableRangeMap:toString(),418,421,"/**
 * Returns a string representation of this object's ranges.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset$EntrySet:toArray(),575,578,"/**
* Converts this collection to an array.
* @return Array representation of the collection or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset$EntrySet:toArray(java.lang.Object[]),580,584,"/**
* Converts the object graph to an array of objects.
* @param array target array with type parameter T
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,create,com.google.common.collect.HashMultiset:create(int),50,52,"/**
* Creates a new HashMultiset with specified number of distinct elements.
* @param distinctElements initial count of unique elements
*/","* Creates a new, empty {@code HashMultiset} with the specified expected number of distinct
   * elements.
   *
   * @param distinctElements the expected number of distinct elements
   * @throws IllegalArgumentException if {@code distinctElements} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,<init>,"com.google.common.collect.ArrayListMultimap:<init>(int,int)",118,122,"/**
* Initializes a new ArrayListMultimap with expected keys and values per key.
* @param expectedKeys total number of unique keys
* @param expectedValuesPerKey average number of values per key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,<init>,"com.google.common.collect.HashMultimap:<init>(int,int)",109,113,"/**
* Initializes a HashMultimap with the specified expected key count and values per key.
* @param expectedKeys number of keys in the multimap
* @param expectedValuesPerKey average number of values per key",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,<init>,com.google.common.collect.HashMultimap:<init>(com.google.common.collect.Multimap),115,118,"/**
* Initializes a new instance from an existing Multimap.
* @param multimap the underlying Multimap to copy
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,readObject,com.google.common.collect.HashMultimap:readObject(java.io.ObjectInputStream),143,152,"/**
* Deserializes object from stream and initializes multimap data structure.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if type not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,<init>,com.google.common.collect.LinkedListMultimap:<init>(int),184,186,"/**
* Initializes a multimap with an expected number of keys.
* @param expectedKeys estimated number of unique keys
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasCycle,com.google.common.graph.Graphs:hasCycle(com.google.common.graph.Network),88,97,"/**
* Checks for cycles in a given network, handling both directed and undirected cases.
* @param network the graph to check
* @return true if a cycle exists, false otherwise
*/","* Returns true if {@code network} has at least one cycle. A cycle is defined as a non-empty
   * subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges)
   * starting and ending with the same node.
   *
   * <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,create,com.google.common.collect.LinkedHashMultiset:create(int),58,60,"/**
* Creates a new LinkedHashMultiset with specified number of distinct elements.
* @param distinctElements the initial size of the multiset
*/","* Creates a new, empty {@code LinkedHashMultiset} with the specified expected number of distinct
   * elements.
   *
   * @param distinctElements the expected number of distinct elements
   * @throws IllegalArgumentException if {@code distinctElements} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,<init>,"com.google.common.collect.LinkedHashMultimap:<init>(int,int)",264,271,"/**
* Initializes a LinkedHashMultimap with specified key and value capacities.
* @param keyCapacity maximum size of the backing map
* @param valueSetCapacity expected number of values per key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,readObject,com.google.common.collect.LinkedHashMultimap:readObject(java.io.ObjectInputStream),633,660,"/**
* Deserializes a Multimap from an ObjectInputStream, populating the map with entries read from the stream. 
* @throws IOException if deserialization fails
* @throws ClassNotFoundException if a serialized class cannot be found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,<init>,com.google.common.graph.StandardNetwork:<init>(com.google.common.graph.NetworkBuilder),65,71,"/**
* Initializes a StandardNetwork instance from a NetworkBuilder.
* @param builder NetworkBuilder providing configuration parameters
*/",Constructs a graph with the properties specified in {@code builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,<init>,com.google.common.graph.StandardValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder),56,62,"/**
* Constructs a StandardValueGraph with the provided builder and initial node connections.
* @param builder graph builder instance
*/",Constructs a graph with the properties specified in {@code builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,forceJdk,com.google.common.collect.ImmutableSet$Builder:forceJdk(),497,501,"/**
* Forces use of JDK-backed set builder implementation.
* @throws NullPointerException if impl is null
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copy,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:copy(),964,967,"/**
* Creates a deep copy of this set builder instance.
* @return A new SetBuilderImpl instance with identical configuration.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,createCollection,com.google.common.collect.HashMultimap:createCollection(),127,130,"/**
* Creates a new hash set with expected size based on configuration.
*/","* {@inheritDoc}
   *
   * <p>Creates an empty {@code HashSet} for a collection of values for one key.
   *
   * @return a new {@code HashSet} containing a collection of values for one key",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,get,com.google.common.collect.MultimapBuilder$HashSetSupplier:get(),221,224,"/**
* Returns a set of values with expected size based on configuration.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,createCollection,com.google.common.collect.LinkedHashMultimap:createCollection(),280,283,"/**
 * Creates a new linked set with expected size based on value capacity.
 * @return Linked set of type V or null if not initialized.","* {@inheritDoc}
   *
   * <p>Creates an empty {@code LinkedHashSet} for a collection of values for one key.
   *
   * @return a new {@code LinkedHashSet} containing a collection of values for one key",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,get,com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:get(),235,238,"/**
* Returns a set of values with expected size based on platform constraints.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollFirstEntry,com.google.common.collect.TreeMultiset:pollFirstEntry(),78,88,"/**
* Retrieves and removes the first entry from the multiset, or returns null if empty.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollLastEntry,com.google.common.collect.TreeMultiset:pollLastEntry(),90,100,"/**
* Retrieves the last entry in descending order and removes it.
* @return Last entry or null if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,firstEntry,com.google.common.collect.RegularImmutableSortedMultiset:firstEntry(),79,82,"/**
* Returns the first entry in the map or null if empty.
* @return Entry object at index 0 or null if map is empty.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,lastEntry,com.google.common.collect.RegularImmutableSortedMultiset:lastEntry(),84,87,"/**
* Retrieves the entry at the end of the collection.
* @return last Entry object or null if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset:toArray(),168,171,"/**
* Returns an array representation of the data snapshot.
* @return Array containing data elements or null if not initialized
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset:toArray(java.lang.Object[]),173,177,"/**
* Converts this snapshot to an array of type T.
* @param array the array to fill with snapshot elements
* @return the filled array or null if not possible
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,createDescendingSet,com.google.common.collect.ContiguousSet:createDescendingSet(),243,247,"/**
* Creates a descending set view of this sorted set. 
* @return a DescendingImmutableSortedSet instance, backed by this set
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,createDescendingSet,com.google.common.collect.ImmutableRangeSet$AsSet:createDescendingSet(),696,699,"/**
* Creates an immutable descending set from this sorted collection. 
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$DescendingMap:comparator(),4285,4297,"/**
* Returns a Comparator for the current key type, either using the existing
* comparator or creating a reversed comparator from the forward one.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,comparator,com.google.common.collect.Sets$DescendingSet:comparator(),2234,2243,"/**
* Returns a comparator for the collection, optionally reversing the order of the natural ordering.
* @return Comparator instance or natural reversed comparator if no custom comparator is provided
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,put,"com.google.common.collect.ImmutableTable$Builder:put(java.lang.Object,java.lang.Object,java.lang.Object)",220,224,"/**
* Adds a new cell with specified key-value pair to the data set.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value cell value
*/","* Associates the ({@code rowKey}, {@code columnKey}) pair with {@code value} in the built
     * table. Duplicate key pairs are not allowed and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,size,com.google.common.collect.ImmutableMultiset$EntrySet:size(),383,386,"/**
* Returns the number of elements in this collection.
* @return count of unique elements in the set
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,put,"com.google.common.collect.ImmutableBiMap$Builder:put(java.lang.Object,java.lang.Object)",355,360,"/**
* Adds a new entry to the map with the specified key and value.
* @param key unique identifier for the entry
* @param value associated data for the entry
* @return mutable Builder instance for chaining further operations
*/","* Associates {@code key} with {@code value} in the built bimap. Duplicate keys or values are
     * not allowed, and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,put,"com.google.common.collect.ImmutableClassToInstanceMap$Builder:put(java.lang.Class,java.lang.Object)",105,109,"/**
* Adds a value to the builder's underlying map.
* @param key class of the value being added
* @param value instance of type T to be stored in the map
* @return this Builder object for method chaining
*/","* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,
     * and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,putAll,com.google.common.collect.ImmutableClassToInstanceMap$Builder:putAll(java.util.Map),118,126,"/**
* Puts all entries from a Map into the builder.
* @param map map containing key-value pairs to add
*/","* Associates all of {@code map's} keys and values in the built map. Duplicate keys are not
     * allowed, and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code map} is null
     * @throws ClassCastException if any value is not an instance of the type specified by its key",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,put,com.google.common.collect.ImmutableMap$Builder:put(java.util.Map$Entry),467,470,"/**
* Inserts a key-value pair into the map using an existing Entry object.
* @param entry pre-existing Entry containing key and value to be added
*/","* Adds the given {@code entry} to the map, making it immutable if necessary. If the same key is
     * put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will
     * keep the last value put for that key.
     *
     * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,put,"com.google.common.collect.ImmutableSortedMap$Builder:put(java.lang.Object,java.lang.Object)",628,633,"/**
* Adds a new entry to the map with the specified key and value.
* @param key unique key identifier
* @param value associated value for the key
* @return Builder instance for method chaining
*/","* Associates {@code key} with {@code value} in the built map. Duplicate keys, according to the
     * comparator (which might be the keys' natural order), are not allowed, and will cause {@link
     * #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,put,"com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:put(java.lang.Class,java.lang.Object)",70,74,"/**
* Adds a value to the builder's map.
* @param key class type of the value being added
* @param value object to be associated with the given key
* @return this Builder instance for method chaining
*/","* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,
     * and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,put,"com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:put(com.google.common.reflect.TypeToken,java.lang.Object)",80,84,"/**
* Puts a value into the builder's map with the given TypeToken as key.
* @param key unique identifier for the value
* @param value object to be stored in the map
*/","* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,
     * and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,putAll,com.google.common.collect.ImmutableListMultimap$Builder:putAll(java.lang.Iterable),277,282,"/**
* Adds all entries to the builder.
* @param entries iterable of key-value pairs to add
* @return this Builder instance for method chaining
*/","* {@inheritDoc}
     *
     * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,putAll,com.google.common.collect.ImmutableSetMultimap$Builder:putAll(java.lang.Iterable),326,331,"/**
* Adds multiple key-value pairs from the given iterable to this builder.
* @param entries collection of entries to add
* @return this builder instance for method chaining
*/","* {@inheritDoc}
     *
     * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,filter,"com.google.common.collect.Sets:filter(java.util.NavigableSet,com.google.common.base.Predicate)",1266,1278,"/**
* Filters a navigable set based on the provided predicate.
* @param unfiltered original navigable set
* @param predicate filtering condition
* @return filtered navigable set or null if unfiltered is null
*/","* Returns the elements of a {@code NavigableSet}, {@code unfiltered}, that satisfy a predicate.
   * The returned set is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting set's iterator does not support {@code remove()}, but all other set methods
   * are supported. When given an element that doesn't satisfy the predicate, the set's {@code
   * add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods
   * such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements
   * that satisfy the filter will be removed from the underlying set.
   *
   * <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in
   * the underlying set and determine which elements satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and
   * use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,filter,"com.google.common.collect.Sets:filter(java.util.Set,com.google.common.base.Predicate)",1189,1203,"/**
* Filters a set of elements based on the provided predicate.
* @param unfiltered original set to filter
* @param predicate condition to apply for filtering
* @return filtered set or a new filtered set with combined predicates if unfiltered is already filtered
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,forEach,com.google.common.collect.CompactHashMap$KeySetView:forEach(java.util.function.Consumer),754,765,"/**
* Iterates over the map's entries, applying the given consumer action to each.
* @param action consumer function to apply to each entry
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,forEach,com.google.common.collect.CompactHashMap$ValuesView:forEach(java.util.function.Consumer),1000,1011,"/**
* Iterates over the map's values, applying the provided Consumer to each.
* @param action Consumer to apply to each value
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactHashMap:convertToHashFloodingResistantImplementation(),296,308,"/**
* Converts to a hash flooding resistant implementation.
* @return Map with updated table and reset entries, keys, values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,forEach,com.google.common.collect.CompactHashMap:forEach(java.util.function.BiConsumer),782,793,"/**
* Iterates over the map entries, applying a consumer to each.
* @param action BiConsumer to apply to each entry
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactHashSet:convertToHashFloodingResistantImplementation(),260,271,"/**
* Converts to a hash flooding resistant implementation.
* @return Set of elements or null if none
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,forEach,com.google.common.collect.CompactHashSet:forEach(java.util.function.Consumer),602,613,"/**
* Iterates over the map entries, applying a given consumer to each entry.
* @param action Consumer function to apply to each entry
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,insertEntry,"com.google.common.collect.CompactLinkedHashMap:insertEntry(int,java.lang.Object,java.lang.Object,int,int)",181,187,"/**
* Inserts a new entry into the map with the provided index, key, and value.
* @param entryIndex position of the new entry
* @param key unique identifier for the entry
* @param value associated data for the entry
* @param hash hash code for the entry
* @param mask mask value for the entry
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,accessEntry,com.google.common.collect.CompactLinkedHashMap:accessEntry(int),189,199,"/**
* Reorders entry access to maintain sorted order upon accessing an entry by index.
* @param index position of accessed entry
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,moveLastEntry,"com.google.common.collect.CompactLinkedHashMap:moveLastEntry(int,int)",201,212,"/**
* Moves the last entry to a specified position and updates successor links.
* @param dstIndex index where the last entry will be moved
* @param mask unused parameter (legacy code)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,<init>,"com.google.common.collect.ImmutableSetMultimap:<init>(com.google.common.collect.ImmutableMap,int,java.util.Comparator)",513,519,"/**
* Constructs an immutable multimap with a specified set of key-value pairs.
* @param map key-value pairs to store
* @param size initial capacity
* @param valueComparator comparator for sorting values in the sets (optional)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,buildOrThrow,com.google.common.collect.ImmutableSortedMap$Builder:buildOrThrow(),727,739,"/**
* Builds an ImmutableSortedMap instance based on the provided entries.
* @return ImmutableSortedMap object or throws exception if invalid
*/","* Returns a newly-created immutable sorted map, or throws an exception if any two keys are
     * equal.
     *
     * @throws IllegalArgumentException if any two keys are equal according to the comparator (which
     *     might be the keys' natural order)
     * @since 31.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,emptyMultiset,com.google.common.collect.ImmutableSortedMultiset:emptyMultiset(java.util.Comparator),317,324,"/**
* Creates an empty multiset with the specified comparator.
* @param comparator comparison function for elements
* @return ImmutableSortedMultiset instance or a pre-built one if natural ordering is used
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap:get(java.lang.Comparable),120,124,"/**
* Retrieves value associated with given key.
* @param key unique identifier for the value to fetch
* @return Value object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,put,"com.google.common.collect.ImmutableRangeMap$Builder:put(com.google.common.collect.Range,java.lang.Object)",123,130,"/**
* Adds a key-value entry with the specified range and value to the builder.
* @param range non-empty Range object
* @param value associated value
*/","* Associates the specified range with the specified value.
     *
     * @throws IllegalArgumentException if {@code range} is empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,add,com.google.common.collect.ImmutableRangeSet$Builder:add(com.google.common.collect.Range),772,777,"/**
* Adds a non-empty Range to the collection of ranges.
* @param range non-empty Range object
*/","* Add the specified range to this builder. Adjacent ranges are permitted and will be merged,
     * but overlapping ranges will cause an exception when {@link #build()} is called.
     *
     * @throws IllegalArgumentException if {@code range} is empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,entryIterator,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:entryIterator(),768,793,"/**
* Returns an iterator over entries in sub-range, including duplicates.
* @return Iterator over Entry<Range<K>, V> objects or empty iterator if sub-range is empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,entryIterator,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:entryIterator(),773,813,"/**
* Iterates over entries of Cut and Range pairs that intersect with the restriction.
* @return Iterator over valid Cut and Range pairs
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,descendingEntryIterator,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:descendingEntryIterator(),815,849,"/**
* Returns an iterator over lower bounds and their corresponding ranges in descending order.
* @return Iterator of Entry objects containing Cut and Range values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,replaceRangeWithSameLowerBound,com.google.common.collect.TreeRangeSet:replaceRangeWithSameLowerBound(com.google.common.collect.Range),267,273,"/**
* Updates the ranges map with a new range having the same lower bound.
* @param range Range object to replace or add
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,complement,com.google.common.collect.ImmutableRangeSet:complement(),384,398,"/**
* Computes the complement range set.
* @return ImmutableRangeSet representing all elements not in this set
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,readResolve,com.google.common.collect.Range:readResolve(),704,710,"/**
* Resolves object to its actual value.
* @return the resolved object or ALL if unresolved
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap$AsMapOfRanges:get(java.lang.Object),361,371,"/**
* Retrieves value associated with a given key, or Range and returns the corresponding value.
* @param key unique identifier for the value to be retrieved
* @return V object if found, otherwise null
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,subRangeMap,com.google.common.collect.TreeRangeMap:subRangeMap(com.google.common.collect.Range),384,391,"/**
* Returns a sub-range map view of this range map, containing only values within the specified range.
* @param subRange range to filter by
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,size,com.google.common.collect.TreeRangeSet$RangesByUpperBound:size(),433,439,"/**
* Returns the number of elements in the collection.
* @return count of entries or all lower-bound entries if upper bound is unbounded
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,isEmpty,com.google.common.collect.TreeRangeSet$RangesByUpperBound:isEmpty(),441,446,"/**
* Checks if the interval collection is empty.
* @return true if the collection is empty, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subRangeSet,com.google.common.collect.TreeRangeSet:subRangeSet(com.google.common.collect.Range),857,860,"/**
* Returns a sub-range set containing all elements within the given range.
* @param view the range to consider
* @return RangeSet or its subclass if view is not the full range, otherwise this object itself
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,containsKey,com.google.common.collect.TreeRangeSet$RangesByUpperBound:containsKey(java.lang.Object),337,340,"/**
* Checks if a given key exists in the underlying map.
* @param key the object to search for
* @return true if key is present, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,span,com.google.common.collect.ImmutableRangeMap:span(),215,223,"/**
* Returns the overall span of this range collection.
* @return Range object representing the combined bounds
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,get,com.google.common.collect.ImmutableRangeSet$ComplementRanges:get(int),349,368,"/**
* Retrieves a range by index.
* @param index the desired range's position
* @return Range object or null if invalid index
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,span,com.google.common.collect.ImmutableRangeSet:span(),212,218,"/**
* Returns the overall range of values in this collection.
* @return Range object spanning all elements or throws exception if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,intersection,com.google.common.collect.Range:intersection(com.google.common.collect.Range),536,557,"/**
* Computes the intersection of two ranges.
* @param connectedRange other range to intersect with
* @return intersected Range object or original range if no overlap
*/","* Returns the maximal range {@linkplain #encloses enclosed} by both this range and {@code
   * connectedRange}, if such a range exists.
   *
   * <p>For example, the intersection of {@code [1..5]} and {@code (3..7)} is {@code (3..5]}. The
   * resulting range may be empty; for example, {@code [1..5)} intersected with {@code [5..7)}
   * yields the empty range {@code [5..5)}.
   *
   * <p>The intersection exists if and only if the two ranges are {@linkplain #isConnected
   * connected}.
   *
   * <p>The intersection operation is commutative, associative and idempotent, and its identity
   * element is {@link Range#all}).
   *
   * @throws IllegalArgumentException if {@code isConnected(connectedRange)} is {@code false}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,gap,com.google.common.collect.Range:gap(com.google.common.collect.Range),576,597,"/**
* Calculates the gap between two ranges.
* @param otherRange the range to compare with
* @return a new range representing the gap between the input ranges
*/","* Returns the maximal range lying between this range and {@code otherRange}, if such a range
   * exists. The resulting range may be empty if the two ranges are adjacent but non-overlapping.
   *
   * <p>For example, the gap of {@code [1..5]} and {@code (7..10)} is {@code (5..7]}. The resulting
   * range may be empty; for example, the gap between {@code [1..5)} {@code [5..7)} yields the empty
   * range {@code [5..5)}.
   *
   * <p>The gap exists if and only if the two ranges are either disconnected or immediately adjacent
   * (any intersection must be an empty range).
   *
   * <p>The gap operation is commutative.
   *
   * @throws IllegalArgumentException if this range and {@code otherRange} have a nonempty
   *     intersection
   * @since 27.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,span,com.google.common.collect.Range:span(com.google.common.collect.Range),610,622,"/**
* Merges two ranges into one.
* @param other Range to merge with
* @return merged Range object or original if identical
*/","* Returns the minimal range that {@linkplain #encloses encloses} both this range and {@code
   * other}. For example, the span of {@code [1..3]} and {@code (5..7)} is {@code [1..7)}.
   *
   * <p><i>If</i> the input ranges are {@linkplain #isConnected connected}, the returned range can
   * also be called their <i>union</i>. If they are not, note that the span might contain values
   * that are not contained in either input range.
   *
   * <p>Like {@link #intersection(Range) intersection}, this operation is commutative, associative
   * and idempotent. Unlike it, it is always well-defined for any two input ranges.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,canonical,com.google.common.collect.Range:canonical(com.google.common.collect.DiscreteDomain),648,653,"/**
* Returns a canonical Range instance for the given domain.
* @param domain DiscreteDomain object defining the range's bounds
*/","* Returns the canonical form of this range in the given domain. The canonical form has the
   * following properties:
   *
   * <ul>
   *   <li>equivalence: {@code a.canonical().contains(v) == a.contains(v)} for all {@code v} (in
   *       other words, {@code ContiguousSet.create(a.canonical(domain), domain).equals(
   *       ContiguousSet.create(a, domain))}
   *   <li>uniqueness: unless {@code a.isEmpty()}, {@code ContiguousSet.create(a,
   *       domain).equals(ContiguousSet.create(b, domain))} implies {@code
   *       a.canonical(domain).equals(b.canonical(domain))}
   *   <li>idempotence: {@code a.canonical(domain).canonical(domain).equals(a.canonical(domain))}
   * </ul>
   *
   * <p>Furthermore, this method guarantees that the range returned will be one of the following
   * canonical forms:
   *
   * <ul>
   *   <li>[start..end)
   *   <li>[start..+∞)
   *   <li>(-∞..end) (only if type {@code C} is unbounded below)
   *   <li>(-∞..+∞) (only if type {@code C} is unbounded below)
   * </ul>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,range,"com.google.common.collect.RegularContiguousSet:range(com.google.common.collect.BoundType,com.google.common.collect.BoundType)",216,221,"/**
* Creates a new Range instance based on the given bound types.
* @param lowerBoundType type of the lower bound
* @param upperBoundType type of the upper bound
* @return Range object with updated bounds
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,<init>,"com.google.common.collect.TreeRangeMap$RangeMapEntry:<init>(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object)",99,101,"/**
* Creates a new range map entry with specified bounds and value.
* @param lowerBound lower bound of the range
* @param upperBound upper bound of the range
* @param value associated value for the range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,span,com.google.common.collect.TreeRangeMap$SubRangeMap:span(),500,526,"/**
* Computes the span of this range as a Range object.
* @return Range object spanning this range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,span,com.google.common.collect.TreeRangeMap:span(),195,205,"/**
* Computes and returns the span of this range map as a Range object.
* @return Range object representing the entire span of key values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,span,com.google.common.collect.TreeRangeSet:span(),163,175,"/**
* Returns span of ranges as a single range.
* @return Range object containing lower and upper bounds
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,getCount,com.google.common.collect.TreeMultiset$1:getCount(),1037,1039,"/**
* Returns the current element count. 
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,forEachEntry,com.google.common.collect.TreeMultiset:forEachEntry(java.util.function.ObjIntConsumer),532,540,"/**
* Iterates through AVL tree entries, applying a consumer to each.
* @param action consumer function to process entries
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,create,com.google.common.collect.HashBiMap:create(),66,68,"/**
* Creates a new instance of HashBiMap with default capacity (16). 
* @return an empty HashBiMap instance
*/","Returns a new, empty {@code HashBiMap} with the default initial capacity (16).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,create,com.google.common.collect.HashBiMap:create(java.util.Map),85,90,"/**
* Creates a HashBiMap instance from a given Map.
* @param map input Map to populate the BiMap
*/","* Constructs a new bimap containing initial values from {@code map}. The bimap is created with an
   * initial capacity sufficient to hold the mappings in the specified map.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,of,com.google.common.graph.DirectedNetworkConnections:of(),41,44,"/**
* Creates a directed network with default expected degree.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,of,com.google.common.graph.UndirectedNetworkConnections:of(),41,43,"/**
* Creates an empty undirected network connections instance with expected degree.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap:remove(java.lang.Object),522,532,"/**
* Removes and returns value associated with the given key, or null if not found.
* @param key object to be removed
* @return V object that was previously mapped to key, or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,replaceAll,com.google.common.collect.HashBiMap:replaceAll(java.util.function.BiFunction),580,588,"/**
* Replaces all map values using the provided transformation function.
* @param function BiFunction to transform key-value pairs
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,builder,com.google.common.collect.ImmutableClassToInstanceMap:builder(),74,76,"/**
* Creates a new instance of the Builder.
* @return A Builder object ready to build an instance of type B
*/","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,of,"com.google.common.collect.ImmutableClassToInstanceMap:of(java.lang.Class,java.lang.Object)",65,68,"/**
* Creates an instance of ImmutableClassToInstanceMap containing a single entry.
* @param type class type (extends B)
* @param value instance to map to the provided class
* @return ImmutableClassToInstanceMap<B> with the specified key-value pair
*/","* Returns an {@code ImmutableClassToInstanceMap} containing a single entry.
   *
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,asImmutable,com.google.common.collect.ImmutableEnumMap:asImmutable(java.util.EnumMap),42,52,"/**
* Converts an EnumMap to an ImmutableMap.
* @param map source EnumMap
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,column,com.google.common.collect.SingletonImmutableTable:column(java.lang.Object),47,53,"/**
* Returns a map of values for the specified column.
* @param columnKey unique column identifier
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,columnMap,com.google.common.collect.SingletonImmutableTable:columnMap(),55,58,"/**
* Returns an immutable map of columns to maps of rows and values.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,rowMap,com.google.common.collect.SingletonImmutableTable:rowMap(),60,63,"/**
* Returns an immutable map of a single row with the specified key and value.
* @return Immutable map containing the row data
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,values,com.google.common.collect.ImmutableBiMap:values(),589,592,"/**
* Returns an immutable set of values from the inverse mapping.
* @return Set of V values or empty set if no mappings exist
*/","* Returns an immutable set of the values in this map, in the same order they appear in {@link
   * #entrySet}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,readResolve,com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm:readResolve(),335,337,"/**
* Returns the inverse of the forward mapping.
* @return Inverse mapping as an Object
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,getEntry,com.google.common.collect.DescendingImmutableSortedMultiset:getEntry(int),60,63,"/**
* Retrieves an entry at the specified index from the reversed list of entries.
* @param index zero-based index of the desired entry
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,asDescendingMapOfRanges,com.google.common.collect.ImmutableRangeMap:asDescendingMapOfRanges(),317,325,"/**
* Converts to a descending map of ranges.
* @return Map of ranges in descending order or empty map if input is empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,asDescendingSetOfRanges,com.google.common.collect.ImmutableRangeSet:asDescendingSetOfRanges(),311,317,"/**
* Returns a set of ranges in descending order.
* @return Set of ranges or empty set if input is empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,descendingMap,com.google.common.collect.ImmutableSortedMap:descendingMap(),1109,1126,"/**
* Returns a descending view of the map, or null if not cached.
* @return ImmutableSortedMap object or null if not cached
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,reverse,com.google.common.collect.Lists:reverse(java.util.List),847,861,"/**
* Reverses a list, handling various types and access patterns.
* @param list input list to reverse
* @return reversed list of the same type as input
*/","* Returns a reversed view of the specified list. For example, {@code
   * Lists.reverse(Arrays.asList(1, 2, 3))} returns a list containing {@code 3, 2, 1}. The returned
   * list is backed by this list, so changes in the returned list are reflected in this list, and
   * vice-versa. The returned list supports all of the optional list operations supported by this
   * list.
   *
   * <p>The returned list is random-access if the specified list is random access.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,descendingIterator,com.google.common.collect.RegularImmutableSortedSet:descendingIterator(),74,78,"/**
* Returns an unmodifiable iterator over the elements in reverse order.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,createDescendingSet,com.google.common.collect.RegularImmutableSortedSet:createDescendingSet(),319,325,"/**
* Creates a descending immutable sorted set from the existing set.
* @return an ImmutableSortedSet in reverse order
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,subList,"com.google.common.collect.Lists$StringAsImmutableList:subList(int,int)",785,789,"/**
* Returns a sublist of characters from the string, starting at the specified index up to but not including the end index.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive) 
* @return list of characters in the range or null if invalid indexes
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.lang.Object[]),291,300,"/**
* Creates an immutable list from a given array.
* @param elements input array to copy
*/","* Returns an immutable list containing the given elements, in order.
   *
   * @throws NullPointerException if {@code elements} contains a null element
   * @since 3.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,asImmutableList,"com.google.common.collect.ImmutableList:asImmutableList(java.lang.Object[],int)",368,390,"/**
* Converts an array to a immutable list.
* @param elements array of elements
* @param length number of elements to include
* @return ImmutableList object or empty list if length is 0
*/","* Views the array as an immutable list. Copies if the specified range does not cover the complete
   * array. Does not check for nulls.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,subList,"com.google.common.collect.ImmutableList:subList(int,int)",453,466,"/**
* Returns a sublist containing elements from the specified range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/","* Returns an immutable list of the elements between the specified {@code fromIndex}, inclusive,
   * and {@code toIndex}, exclusive. (If {@code fromIndex} and {@code toIndex} are equal, the empty
   * immutable list is returned.)
   *
   * <p><b>Note:</b> in almost all circumstances, the returned {@link ImmutableList} retains a
   * strong reference to {@code this}, which may prevent the original list from being garbage
   * collected. If you want the original list to be eligible for garbage collection, you should
   * create and use a copy of the sub list (e.g., {@code
   * ImmutableList.copyOf(originalList.subList(...))}).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,of,"com.google.common.collect.ImmutableRangeMap:of(com.google.common.collect.Range,java.lang.Object)",80,82,"/**
* Creates an immutable range map with a single entry for the given key-value pair.
* @param range unique key range
* @param value associated value
*/",Returns an immutable range map mapping a single range to a single value.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,readResolve,com.google.common.collect.ImmutableRangeSet$SerializedForm:readResolve(),855,863,"/**
* Resolves the object to a more concrete representation based on its ranges.
* @return an ImmutableRangeSet, UserProfile object, or null if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,of,com.google.common.collect.ImmutableRangeSet:of(com.google.common.collect.Range),92,101,"/**
* Creates an ImmutableRangeSet from a single Range.
* @param range the input Range
*/","* Returns an immutable range set containing the specified single range. If {@link Range#isEmpty()
   * range.isEmpty()}, this is equivalent to {@link ImmutableRangeSet#of()}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,of,"com.google.common.collect.ImmutableSortedMap:of(java.util.Comparator,java.lang.Object,java.lang.Object)",146,150,"/**
* Creates an immutable sorted map with a single key-value pair.
* @param comparator the comparator to use for sorting
* @param k1 the key
* @param v1 the value
*/",Returns an immutable map containing a single entry.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableSet.java,asList,com.google.common.collect.SingletonImmutableSet:asList(),60,63,"/**
* Returns an immutable list containing the single element of this collection.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,userPermissions,com.google.common.io.TempFileCreator$JavaNioCreator:userPermissions(),166,199,"/**
* Retrieves user-specific permissions as a supplier. 
* @return Supplier of file attributes containing ACL entries for the current user
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,collectTypes,com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Object),1376,1378,"/**
* Creates an immutable list containing a single type.
* @param type the type to include in the list
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,asImmutable,com.google.common.collect.ImmutableEnumSet:asImmutable(java.util.EnumSet),42,51,"/**
* Converts an EnumSet to an ImmutableSet.
* @param set EnumSet containing enum elements
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,get,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:get(java.lang.Object),1146,1150,"/**
* Retrieves a set of values associated with the given key.
* @param key object to look up in the map
* @return set of values or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:build(),801,825,"/**
* Builds an immutable set from the deduplicated elements.
* @return ImmutableSet containing the distinct elements
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.lang.Object[]),253,255,"/**
* Creates an empty immutable set with specified initial capacity.
* @param elements array of elements to be copied into the set
*/","* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order
   * each appears first in the source array.
   *
   * @throws NullPointerException if any of {@code elements} is null
   * @since 3.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,createEntrySet,com.google.common.collect.SingletonImmutableBiMap:createEntrySet(),87,90,"/**
* Creates an immutable set of entries with a single key-value pair.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,createKeySet,com.google.common.collect.SingletonImmutableBiMap:createKeySet(),92,95,"/**
* Creates an immutable set containing a single key.
* @return Set of keys with only one element
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,createCellSet,com.google.common.collect.SingletonImmutableTable:createCellSet(),70,73,"/**
* Creates an immutable set of cells with a single cell instance.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,createValues,com.google.common.collect.SingletonImmutableTable:createValues(),75,78,"/**
* Creates an immutable set containing a single value.
* @return Set of values with size 1.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,adjacentEdges,com.google.common.graph.AbstractNetwork:adjacentEdges(java.lang.Object),163,170,"/**
* Retrieves edges adjacent to the given edge in the network.
* @param edge Edge object to find adjacent edges for
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,iterator,com.google.common.collect.ImmutableSet$CachingAsList:iterator(),338,341,"/**
* Returns an unmodifiable iterator over the elements of this collection.
* @return Iterator over the elements in the underlying list.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,containsAll,com.google.common.collect.RegularImmutableSortedSet:containsAll(java.util.Collection),104,154,"/**
* Checks if all elements are present in this sorted multiset.
* @param targets collection of target elements to search for
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,isAnnotationPresent,com.google.common.reflect.Parameter:isAnnotationPresent(java.lang.Class),72,75,"/**
* Checks if an annotation of specified type is present.
* @param annotationType class of the annotation to check for
* @return true if annotation is found, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,builder,com.google.common.collect.ImmutableSet:builder(),433,435,"/**
* Creates a new instance of Builder.
*/","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,valuesBuilder,com.google.common.collect.ImmutableSetMultimap:valuesBuilder(java.util.Comparator),654,659,"/**
* Creates a builder for an immutable set of values.
* @param valueComparator optional comparator to order the set
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyIfNecessary,com.google.common.collect.ImmutableSet$Builder:copyIfNecessary(),503,508,"/**
* Copies data if forceCopy flag is set.
* @param forceCopy indicates whether to perform a forced copy
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,putAll,com.google.common.collect.ImmutableListMultimap$Builder:putAll(com.google.common.collect.Multimap),298,303,"/**
* Adds all entries from a Multimap to this builder.
* @param multimap Multimap containing key-value pairs
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,combine,com.google.common.collect.ImmutableListMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder),305,310,"/**
* Combines another multimap builder into this one.
* @param other the builder to merge with
* @return this builder instance for method chaining
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,combine,com.google.common.collect.ImmutableSetMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder),356,361,"/**
* Combines another ImmutableMultimap builder into this one.
* @param other the builder to merge with
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,putAll,com.google.common.collect.ImmutableSetMultimap$Builder:putAll(com.google.common.collect.Multimap),346,354,"/**
* Adds all entries from the given Multimap to this Map.
* @param multimap map of key-value pairs to add
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,"com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator)",502,507,"/**
* Concatenates two iterators into one.
* @param a first iterator
* @param b second iterator
* @return concatenated iterator or null if either input is null
*/","* Combines two iterators into a single iterator. The returned iterator iterates across the
   * elements in {@code a}, followed by the elements in {@code b}. The source iterators are not
   * polled until necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,"com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator,java.util.Iterator)",517,523,"/**
* Concatenates three iterators into one iterator.
* @param a first iterator
* @param b second iterator
* @param c third iterator
* @return concatenated iterator of type T
*/","* Combines three iterators into a single iterator. The returned iterator iterates across the
   * elements in {@code a}, followed by the elements in {@code b}, followed by the elements in
   * {@code c}. The source iterators are not polled until necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,"com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator,java.util.Iterator,java.util.Iterator)",534,544,"/**
* Concatenates four iterators into one iterator.
* @param a first iterator
* @param b second iterator
* @param c third iterator
* @param d fourth iterator
* @return concatenated iterator of type T or null if any input is null
*/","* Combines four iterators into a single iterator. The returned iterator iterates across the
   * elements in {@code a}, followed by the elements in {@code b}, followed by the elements in
   * {@code c}, followed by the elements in {@code d}. The source iterators are not polled until
   * necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getSubscribers,com.google.common.eventbus.SubscriberRegistry:getSubscribers(java.lang.Object),125,140,"/**
* Retrieves iterators for all subscribers of the given event.
* @param event Object representing an event
* @return Iterator over a flat collection of all subscribers
*/","* Gets an iterator representing an immutable snapshot of all subscribers to the given event at
   * the time this method is called.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,contains,com.google.common.collect.ImmutableList$ReverseImmutableList:contains(java.lang.Object),657,660,"/**
* Checks if the list contains a specified object.
* @param object the object to search for (can be null)
* @return true if found, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,getDone,com.google.common.util.concurrent.ClosingFuture$Peeker:getDone(com.google.common.util.concurrent.ClosingFuture),1151,1157,"/**
* Retrieves the result of a completed future, or null if not.
* @param closingFuture the future to retrieve from
* @return D object or null if not found
*/","* Returns the value of {@code closingFuture}.
     *
     * @throws ExecutionException if {@code closingFuture} is a failed step
     * @throws CancellationException if the {@code closingFuture}'s future was cancelled
     * @throws IllegalArgumentException if {@code closingFuture} is not one of the futures passed to
     *     {@link #whenAllComplete(Iterable)} or {@link #whenAllComplete(Iterable)}
     * @throws IllegalStateException if called outside of a call to {@link
     *     CombiningCallable#call(DeferredCloser, Peeker)} or {@link
     *     AsyncCombiningCallable#call(DeferredCloser, Peeker)}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,put,"com.google.common.collect.MapMakerInternalMap:put(java.lang.Object,java.lang.Object)",2423,2430,"/**
* Inserts or updates a value for the given key.
* @param key unique identifier
* @param value new value to associate with key
* @return null (since this method is designed to be ignored)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,putIfAbsent,"com.google.common.collect.MapMakerInternalMap:putIfAbsent(java.lang.Object,java.lang.Object)",2432,2439,"/**
* Inserts value if absent for given key.
* @param key unique key identifier
* @param value new value to insert
* @return previous or null if newly inserted
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)",2468,2478,"/**
* Replaces a value associated with the given key in this map.
* @param key unique identifier for the entry to replace
* @param oldValue the existing value (must not be null)
* @param newValue the new value to associate with the key
* @return true if the old value was replaced, false otherwise",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap:replace(java.lang.Object,java.lang.Object)",2480,2487,"/**
 * Replaces the value associated with a given key in this map. 
 * @param key unique key identifier
 * @param value new value to be stored
 * @return old value or null if not present
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap:remove(java.lang.Object),2448,2456,"/**
* Removes an entry from the map by its key.
* @param key object to be removed
* @return value associated with the key or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,"com.google.common.collect.MapMakerInternalMap:remove(java.lang.Object,java.lang.Object)",2458,2466,"/**
* Removes an entry from the map based on the provided key-value pair.
* @param key unique identifier for removal
* @param value associated value to be removed (can be null)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,get,"com.google.common.collect.MapMakerInternalMap$Segment:get(java.lang.Object,int)",1439,1454,"/**
* Retrieves a value associated with the given key, performing cleanup and draining reference queues as needed.
* @param key object to look up
* @param hash hash code of the key
* @return associated value or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsKey,"com.google.common.collect.MapMakerInternalMap$Segment:containsKey(java.lang.Object,int)",1456,1467,"/**
* Checks if a key-value pair exists in the map.
* @param key object to search for
* @param hash hash value of the key
* @return true if key is present, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsValue,com.google.common.collect.MapMakerInternalMap$Segment:containsValue(java.lang.Object),1473,1496,"/**
* Checks if the map contains a specified value.
* @param value Object to search for
*/","* This method is a convenience for testing. Code should call {@link
     * MapMakerInternalMap#containsValue} directly.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)",940,956,"/**
* Creates a copy of the given weak value entry.
* @param segment associated segment
* @param entry original entry to copy
* @param newNext potential new next entry in copied chain
* @return copied WeakKeyWeakValueEntry or null if key is collected
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,put,"com.google.common.collect.MutableClassToInstanceMap:put(java.lang.Class,java.lang.Object)",153,158,"/**
* Puts a value into the map using the given class as a key.
* @param key Class of the object to be stored
* @param value Value to be stored in the map
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,putAll,com.google.common.collect.MutableClassToInstanceMap:putAll(java.util.Map),160,167,"/**
* Copies and casts all entries from the provided map into this object's internal structure.
* @param map Map of classes to values to be copied and casted
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardRemove,com.google.common.collect.ForwardingMap:standardRemove(java.lang.Object),160,171,"/**
* Removes and returns the associated value for a given key.
* @param key object to be removed
* @return associated value or null if not found
*/","* A sensible, albeit inefficient, definition of {@link #remove} in terms of the {@code iterator}
   * method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link
   * #remove} to forward to this implementation.
   *
   * <p>Alternately, you may wish to override {@link #remove} with {@code keySet().remove}, assuming
   * that approach would not lead to an infinite loop.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardClear,com.google.common.collect.ForwardingMap:standardClear(),180,182,"/**
 * Clears all entries in this map.
 */","* A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link
   * #entrySet}. In many cases, you may wish to override {@link #clear} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardIsEmpty,com.google.common.collect.ForwardingMap:standardIsEmpty(),264,266,"/**
* Checks if this standard has any entries.
* @return true if empty, false otherwise
*/","* A sensible definition of {@link #isEmpty} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #isEmpty} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardHashCode,com.google.common.collect.ForwardingMap:standardHashCode(),286,288,"/**
* Computes the standard hash code based on entry set.
* @return unique hash code value
*/","* A sensible definition of {@link #hashCode} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #hashCode} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,entrySet,com.google.common.reflect.MutableTypeToInstanceMap:entrySet(),96,99,"/**
* Returns an unmodifiable set of entries mapping type tokens to values.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,difference,"com.google.common.collect.Maps:difference(java.util.Map,java.util.Map)",502,511,"/**
* Compares two maps for differences.
* @param left first map to compare
* @param right second map to compare
* @return MapDifference object describing the differences between the two maps
*/","* Computes the difference between two maps. This difference is an immutable snapshot of the state
   * of the maps at the time this method is called. It will never change, even if the maps change at
   * a later time.
   *
   * <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps
   * must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}.
   *
   * <p><b>Note:</b>If you only need to know whether two maps have the same mappings, call {@code
   * left.equals(right)} instead of this method.
   *
   * @param left the map to treat as the ""left"" map for purposes of comparison
   * @param right the map to treat as the ""right"" map for purposes of comparison
   * @return the difference between the two maps",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,com.google.common.eventbus.EventBus:<init>(),165,167,"/**
* Constructs an EventBus instance with default configuration.
* @param name optional bus name (defaults to ""default"") 
*/","Creates a new EventBus named ""default"".",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,crossOver,"com.google.common.collect.MinMaxPriorityQueue$Heap:crossOver(int,java.lang.Object)",702,712,"/**
* Swaps a node in the queue with its child if it's smaller than the given value.
* @param index index of the node to swap
* @param x value to compare with children
* @return new index of the swapped node or result of crossOverUp","* Crosses an element over to the opposite heap by moving it one level down (or up if there are
     * no elements below it).
     *
     * <p>Returns the new position of the element.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,fillHoleAt,com.google.common.collect.MinMaxPriorityQueue$Heap:fillHoleAt(int),721,728,"/**
* Fills the hole at a given index by recursively finding and replacing with the smallest grandchild. 
* @param index index of the hole to fill
* @return new index after filling the hole
*/","* Fills the hole at {@code index} by moving in the least of its grandchildren to this position,
     * then recursively filling the new hole created.
     *
     * @return the position of the new hole (where the lowest grandchild moved from, that had no
     *     grandchild to replace it)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,writeReplace,com.google.common.collect.ImmutableCollection:writeReplace(),392,397,"/**
* Returns a serialized form of this list's contents. 
* @return SerializedList object containing the list's elements.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,headSet,com.google.common.collect.Maps$5:headSet(java.lang.Object),81,84,"/**
* Returns a view of elements in this set strictly less than the given element.
* @param toElement the upper bound (exclusive)
* @return SortedSet containing elements less than toElement
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,subSet,"com.google.common.collect.Maps$5:subSet(java.lang.Object,java.lang.Object)",92,95,"/**
* Returns a view of the portion of this set from specified fromElement to 
* toElement (exclusive). The returned SortedSet is backed by this set so 
* changes to the original set are reflected in the view and vice-versa.
* @param fromElement lower bound (inclusive)
* @param toElement upper bound (exclusive)",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,standardContains,com.google.common.collect.ForwardingSortedSet:standardContains(java.lang.Object),109,120,"/**
* Checks if the specified object is in this sorted set.
* @param object the object to search for
* @return true if found, false otherwise
*/","* A sensible definition of {@link #contains} in terms of the {@code first()} method of {@link
   * #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #contains} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,standardRemove,com.google.common.collect.ForwardingSortedSet:standardRemove(java.lang.Object),129,147,"/**
* Removes the first occurrence of the specified object from this sorted set.
* @param object the object to remove
* @return true if removed, false otherwise or on removal failure
*/","* A sensible definition of {@link #remove} in terms of the {@code iterator()} method of {@link
   * #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #remove} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,standardSubSet,"com.google.common.collect.ForwardingSortedSet:standardSubSet(java.lang.Object,java.lang.Object)",156,159,"/**
* Returns a subset of this set containing elements between (inclusive) 'fromElement' and 'toElement'.
* @param fromElement lower bound element
* @param toElement upper bound element","* A sensible default implementation of {@link #subSet(Object, Object)} in terms of {@link
   * #headSet(Object)} and {@link #tailSet(Object)}. In some situations, you may wish to override
   * {@link #subSet(Object, Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,tailSet,com.google.common.collect.Maps$5:tailSet(java.lang.Object),97,100,"/**
* Returns a sorted set of elements greater than or equal to the specified fromElement. 
* @param fromElement element to start the tail set from
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowKeySet,com.google.common.collect.TreeBasedTable:rowKeySet(),74,77,"/**
* Returns a sorted set of row keys.","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link
   * Table} interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableSet,com.google.common.collect.Synchronized:navigableSet(java.util.NavigableSet),1582,1585,"/**
* Wraps an existing NavigableSet instance.
* @param navigableSet the set to wrap
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addFirst,com.google.common.collect.Synchronized$SynchronizedDeque:addFirst(java.lang.Object),1911,1916,"/**
* Adds an element at the front of the collection.
* @param e the element to be added
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addLast,com.google.common.collect.Synchronized$SynchronizedDeque:addLast(java.lang.Object),1918,1923,"/**
* Adds an element to the end of the collection.
* @param e the element to be added
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,offerFirst,com.google.common.collect.Synchronized$SynchronizedDeque:offerFirst(java.lang.Object),1925,1930,"/**
* Offers first element to underlying queue.
* @param e element to offer
* @return true if added, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,offerLast,com.google.common.collect.Synchronized$SynchronizedDeque:offerLast(java.lang.Object),1932,1937,"/**
* Offers last element to queue synchronously.
* @param e element to add
* @return true if added, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeFirst,com.google.common.collect.Synchronized$SynchronizedDeque:removeFirst(),1939,1944,"/**
* Removes and returns the first element from this collection.
* @return The removed element or null if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeLast,com.google.common.collect.Synchronized$SynchronizedDeque:removeLast(),1946,1951,"/**
* Removes and returns last element from collection.
* @return Last element in collection, or null if empty.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollFirst,com.google.common.collect.Synchronized$SynchronizedDeque:pollFirst(),1953,1958,"/**
* Retrieves the first element from the underlying collection.
* @return The polled element or null if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollLast,com.google.common.collect.Synchronized$SynchronizedDeque:pollLast(),1960,1965,"/**
* Retrieves and removes the last element from the collection.
* @return the polled element or null if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getFirst,com.google.common.collect.Synchronized$SynchronizedDeque:getFirst(),1967,1972,"/**
* Returns the first element of the collection, synchronizing access to ensure thread safety.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getLast,com.google.common.collect.Synchronized$SynchronizedDeque:getLast(),1974,1979,"/**
* Returns last element in iteration.
* @return element of type E or null if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,peekFirst,com.google.common.collect.Synchronized$SynchronizedDeque:peekFirst(),1981,1986,"/**
* Returns the first element in the collection without removing it.
* @return The first element, or null if empty.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,peekLast,com.google.common.collect.Synchronized$SynchronizedDeque:peekLast(),1988,1993,"/**
* Returns the last element in the collection without removing it.
* @return The last element or null if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeFirstOccurrence,com.google.common.collect.Synchronized$SynchronizedDeque:removeFirstOccurrence(java.lang.Object),1995,2000,"/**
* Removes first occurrence of object from collection.
* @param o object to be removed
* @return true if found and removed, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeLastOccurrence,com.google.common.collect.Synchronized$SynchronizedDeque:removeLastOccurrence(java.lang.Object),2002,2007,"/**
* Removes last occurrence of specified object from collection.
* @param o the object to be removed, may be null
* @return true if removal was successful, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,push,com.google.common.collect.Synchronized$SynchronizedDeque:push(java.lang.Object),2009,2014,"/**
* Pushes an element onto the underlying collection.
* @param e the element to be added 
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pop,com.google.common.collect.Synchronized$SynchronizedDeque:pop(),2016,2021,"/**
* Retrieves an element from the data structure and releases the lock.
* @return The popped element or null if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingIterator,com.google.common.collect.Synchronized$SynchronizedDeque:descendingIterator(),2023,2028,"/**
* Returns a reverse iterator over this collection.
* @return an Iterator instance iterating in descending order
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedNavigableSet:delegate(),1469,1472,"/**
* Returns a navigable set view of this map's keys.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,comparator,com.google.common.collect.Synchronized$SynchronizedSortedSet:comparator(),318,323,"/**
* Returns a comparator for elements of type E, synchronizing on mutex.
* @return Comparator object or null if not available
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subSet,"com.google.common.collect.Synchronized$SynchronizedSortedSet:subSet(java.lang.Object,java.lang.Object)",325,330,"/**
* Returns a subset of this set containing all elements in the range [fromElement, toElement].
* @param fromElement lower bound (inclusive)
* @param toElement upper bound (inclusive)",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headSet,com.google.common.collect.Synchronized$SynchronizedSortedSet:headSet(java.lang.Object),332,337,"/**
* Returns a view of the portion of this set from the beginning up to, but not including, the given element.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailSet,com.google.common.collect.Synchronized$SynchronizedSortedSet:tailSet(java.lang.Object),339,344,"/**
* Returns a view of elements in this set greater than or equal to the given element.
* @param fromElement the minimum element for this view
* @return a SortedSet view containing elements from this set that are greater than or equal to fromElement
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,first,com.google.common.collect.Synchronized$SynchronizedSortedSet:first(),346,351,"/**
* Returns the first element of this collection.
* @return The first element or null if empty.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,last,com.google.common.collect.Synchronized$SynchronizedSortedSet:last(),353,358,"/**
* Returns the last element of the collection.
* Synchronized access to ensure thread safety.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,ceilingEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:ceilingEntry(java.lang.Object),1614,1619,"/**
* Retrieves entry with highest value less than or equal to specified key.
* @param key the key to search for
* @return Map.Entry object or null if not found",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,ceilingKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:ceilingKey(java.lang.Object),1621,1626,"/**
* Returns the largest key in this map that is less than or equal to the given key.
* @param key the target key
* @return the largest key, or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingKeySet,com.google.common.collect.Synchronized$SynchronizedNavigableMap:descendingKeySet(),1630,1638,"/**
* Returns a NavigableSet of keys in descending order.
* @return A synchronized NavigableSet containing key values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,firstEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:firstEntry(),1652,1657,"/**
* Retrieves the first entry from the map, synchronizing access to ensure thread safety.
* @return The first map entry or null if the map is empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,floorEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:floorEntry(java.lang.Object),1659,1664,"/**
* Retrieves entry with lowest value greater than or equal to the specified key.
* @param key target key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,floorKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:floorKey(java.lang.Object),1666,1671,"/**
* Returns floor key of given key using synchronized delegate. 
* @param key input key to find floor for",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,higherEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:higherEntry(java.lang.Object),1685,1690,"/**
* Retrieves the entry with a higher key.
* @param key key to find the next entry for
* @return Entry object or null if none found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,higherKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:higherKey(java.lang.Object),1692,1697,"/**
* Returns the highest key in the map greater than the given key.
* @param key the given key to compare with
* @return the highest key or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lastEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:lastEntry(),1699,1704,"/**
* Returns the last entry in this map.
* @return Entry object or null if map is empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lowerEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:lowerEntry(java.lang.Object),1706,1711,"/**
* Retrieves the lowest entry in the map with a key less than or equal to the provided key.
* @param key key to compare entries against
* @return Map.Entry object with key and value, or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lowerKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:lowerKey(java.lang.Object),1713,1718,"/**
* Returns the lowest key in the map that is greater than or equal to the given key.
* @param key key to find a matching low bound for
* @return matching low bound key, or null if none found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableKeySet,com.google.common.collect.Synchronized$SynchronizedNavigableMap:navigableKeySet(),1727,1735,"/**
* Returns a synchronized navigable key set view of the underlying map.
* @return NavigableSet containing keys or null if not initialized
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollFirstEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:pollFirstEntry(),1737,1742,"/**
* Retrieves and removes the first entry from the map.
* @return null if map is empty; otherwise, a Map.Entry containing the key-value pair
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollLastEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:pollLastEntry(),1744,1749,"/**
* Retrieves and removes the last entry from the map.
* @return a Map.Entry object or null if the map is empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SetMultimap.java,removeAll,com.google.common.collect.SetMultimap:removeAll(java.lang.Object),73,75,"/**
* Removes all occurrences of specified element from this set.
* @param key element to remove (may be null)
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}
   * interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:get(java.lang.Object),902,907,"/**
* Retrieves a set of values associated with a given key.
* @param key unique identifier for the data to retrieve
* @return SortedSet of values or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:removeAll(java.lang.Object),909,914,"/**
* Removes all elements from the set that are equal to the specified object.
* @param key object to remove from set
* @return a new sorted set with removed elements
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",916,921,"/**
* Replaces values associated with a given key in the backing map.
* @param key unique identifier for the key to replace
* @param values new values to associate with the key
* @return SortedSet of replaced values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,valueComparator,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:valueComparator(),923,928,"/**
* Returns a comparator for values in this map.
* @return Comparator instance or null if not set
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,subMap,"com.google.common.collect.TreeBasedTable$TreeRow:subMap(java.lang.Object,java.lang.Object)",225,229,"/**
* Returns a sorted map view of the range [fromKey, toKey].
* @param fromKey start key (inclusive)
* @param toKey end key (inclusive)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,headMap,com.google.common.collect.TreeBasedTable$TreeRow:headMap(java.lang.Object),231,235,"/**
* Returns a sorted map of rows up to the specified key.
* @param toKey key up to which the map is truncated
* @return SortedMap of rows or null if invalid range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,tailMap,com.google.common.collect.TreeBasedTable$TreeRow:tailMap(java.lang.Object),237,241,"/**
* Returns a sorted map containing all entries with keys greater than or equal to the specified key.
* @param fromKey key value for tail map boundary
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,containsKey,com.google.common.collect.TreeBasedTable$TreeRow:containsKey(java.lang.Object),296,299,"/**
* Checks if this map contains a specific key.
* @param key object to search for
* @return true if key is present, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,put,"com.google.common.collect.TreeBasedTable$TreeRow:put(java.lang.Object,java.lang.Object)",301,305,"/**
* Inserts or updates a value in the map with a given key.
* @param key unique identifier for the entry
* @return previous value associated with the key, or null if not present
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,rebalance,com.google.common.collect.TreeMultiset$AvlNode:rebalance(),950,970,"/**
* Rebalances the AVL tree node by rotating and updating its children.
* @return rebalanced AvlNode or itself if already balanced
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,size,com.google.common.collect.TreeMultiset:size(),228,231,"/**
* Returns the number of entries in this collection.
* @return The size of the collection.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,distinctElements,com.google.common.collect.TreeMultiset:distinctElements(),233,236,"/**
* Calculates the number of unique elements in this collection.
* @return count of distinct elements, or saturated cast result if failed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentEdges,com.google.common.graph.StandardNetwork:incidentEdges(java.lang.Object),130,133,"/**
* Retrieves the set of edges associated with the given node.
* @param node Node object to fetch edges for
* @return Set of edge objects or empty set if invalidatable
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,adjacentNodes,com.google.common.graph.StandardNetwork:adjacentNodes(java.lang.Object),143,146,"/**
* Retrieves all adjacent nodes from a given node.
* @param node Node to fetch adjacent nodes for
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edgesConnecting,"com.google.common.graph.StandardNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",148,156,"/**
* Retrieves edges connecting two nodes in the graph.
* @param nodeU first node to consider
* @param nodeV second node to consider
* @return set of edge types between the nodes or an empty set if none exist
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,inEdges,com.google.common.graph.StandardNetwork:inEdges(java.lang.Object),158,161,"/**
* Retrieves a set of edges incident to the specified node.
* @param node Node object for which to fetch incident edges
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,outEdges,com.google.common.graph.StandardNetwork:outEdges(java.lang.Object),163,166,"/**
* Returns a set of outgoing edges from the specified node.
* @param node the node to retrieve edges for
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,predecessors,com.google.common.graph.StandardNetwork:predecessors(java.lang.Object),168,171,"/**
* Retrieves all predecessor nodes for the given node.
* @param node Node object to fetch predecessors for
* @return Set of predecessor Node objects or empty set if none found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,successors,com.google.common.graph.StandardNetwork:successors(java.lang.Object),173,176,"/**
* Retrieves set of valid successors for the given node.
* @param node Node object to fetch successors for
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,adjacentNodes,com.google.common.graph.StandardValueGraph:adjacentNodes(java.lang.Object),103,106,"/**
* Retrieves all adjacent nodes from the provided node.
* @param node Node object to fetch adjacent nodes for
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,predecessors,com.google.common.graph.StandardValueGraph:predecessors(java.lang.Object),108,111,"/**
* Retrieves all predecessor nodes of the given node.
* @param node the node to find predecessors for
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,successors,com.google.common.graph.StandardValueGraph:successors(java.lang.Object),113,116,"/**
* Retrieves direct successors of a given graph node.
* @param node graph node identifier
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,incidentEdges,com.google.common.graph.StandardValueGraph:incidentEdges(java.lang.Object),118,129,"/**
* Retrieves the set of incident edges for a given node.
* @param node the node to retrieve incident edges for
* @return Set<EndpointPair<N>> containing incident edges or an empty set if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,"com.google.common.graph.StandardValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",131,134,"/**
* Checks if two nodes are connected by an edge.
* @param nodeU first node to check
* @param nodeV second node to check
* @return true if connected, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,com.google.common.graph.StandardValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),136,141,"/**
* Checks if there's an edge connecting two nodes in the graph.
* @param endpoints pair of nodes to check
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.StandardValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)",143,146,"/**
* Returns the edge value between two nodes or a default value if not found.
* @param nodeU first graph node
* @param nodeV second graph node
* @param defaultValue default value to return if edge is missing
* @return V edge value or defaultValue
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.StandardValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)",148,152,"/**
* Returns the edge value for a given endpoint pair or returns the default value if not found.
* @param endpoints unique identifier of nodes and their relationship
* @param defaultValue fallback value to return when edge is not present
* @return edge value or null if not found, otherwise defaultValue",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putBytes,"com.google.common.hash.AbstractStreamingHasher:putBytes(byte[],int,int)",92,96,"/**
* Puts a byte array into the hasher.
* @param bytes input byte array
* @param off offset within the array to start from
* @param len length of the array slice to process
* @return this Hasher instance (for chaining)",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putBytes,com.google.common.hash.AbstractStreamingHasher:putBytes(java.nio.ByteBuffer),98,108,"/**
* Puts the contents of a ByteBuffer into the Hasher, ignoring byte order.
* @param readBuffer input buffer containing bytes to be hashed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashBytes,"com.google.common.hash.FarmHashFingerprint64:hashBytes(byte[],int,int)",49,53,"/**
* Computes a hash code for the specified byte array slice.
* @param input the byte array to process
* @param off starting offset in bytes
* @param len length of the slice in bytes
* @return HashCode object representing the computed hash
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,hashBytes,"com.google.common.hash.Fingerprint2011:hashBytes(byte[],int,int)",40,44,"/**
* Computes hash code for a byte array segment.
* @param input the byte array
* @param off starting offset
* @param len length of the segment
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashInt,com.google.common.hash.Murmur3_32HashFunction:hashInt(int),108,114,"/**
* Computes a 64-bit hash code from the given integer.
* @param input integer value to be hashed
* @return 64-bit hash code as an integer
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashLong,com.google.common.hash.Murmur3_32HashFunction:hashLong(long),116,128,"/**
* Computes a hash code from a long integer.
* @param input the input value to be hashed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashUnencodedChars,com.google.common.hash.Murmur3_32HashFunction:hashUnencodedChars(java.lang.CharSequence),130,149,"/**
* Computes hash code for unencoded chars in CharSequence.
* @param input CharSequence to be hashed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashString,"com.google.common.hash.Murmur3_32HashFunction:hashString(java.lang.CharSequence,java.nio.charset.Charset)",151,220,"/**
* Computes the hash code for a string using the specified charset.
* @param input CharSequence to be hashed
* @param charset Charset used to interpret the string
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashBytes,"com.google.common.hash.Murmur3_32HashFunction:hashBytes(byte[],int,int)",222,238,"/**
* Computes a hash code from the specified byte array slice.
* @param input byte array
* @param off starting offset
* @param len length of byte array slice
* @return hash code value
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long,double)",433,436,"/**
* Creates a new Bloom filter with the specified parameters.
* @param funnel function to transform input elements
* @param expectedInsertions estimated number of insertions
* @param fpp target false positive probability
*/","* Creates a {@link BloomFilter} with the expected number of insertions and expected false
   * positive probability.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @param fpp the desired false positive probability (must be positive and less than 1.0)
   * @return a {@code BloomFilter}
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundToInt,"com.google.common.math.DoubleMath:roundToInt(double,java.math.RoundingMode)",127,135,"/**
* Rounds a double to an integer using the specified rounding mode.
* @param x value to be rounded
* @param mode RoundingMode to apply
* @return rounded int value or throws if out of range
*/","* Returns the {@code int} value that is equal to {@code x} rounded with the specified rounding
   * mode, if possible.
   *
   * @throws ArithmeticException if
   *     <ul>
   *       <li>{@code x} is infinite or NaN
   *       <li>{@code x}, after being rounded to a mathematical integer using the specified rounding
   *           mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code
   *           Integer.MAX_VALUE}
   *       <li>{@code x} is not a mathematical integer and {@code mode} is {@link
   *           RoundingMode#UNNECESSARY}
   *     </ul>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundToLong,"com.google.common.math.DoubleMath:roundToLong(double,java.math.RoundingMode)",154,162,"/**
* Rounds a double value to a long using the specified RoundingMode.
* @param x double value to round
* @param mode rounding strategy
* @return rounded long value or throws if invalid inputs
*/","* Returns the {@code long} value that is equal to {@code x} rounded with the specified rounding
   * mode, if possible.
   *
   * @throws ArithmeticException if
   *     <ul>
   *       <li>{@code x} is infinite or NaN
   *       <li>{@code x}, after being rounded to a mathematical integer using the specified rounding
   *           mode, is either less than {@code Long.MIN_VALUE} or greater than {@code
   *           Long.MAX_VALUE}
   *       <li>{@code x} is not a mathematical integer and {@code mode} is {@link
   *           RoundingMode#UNNECESSARY}
   *     </ul>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundToBigInteger,"com.google.common.math.DoubleMath:roundToBigInteger(double,java.math.RoundingMode)",183,195,"/**
* Rounds a double to a BigInteger using specified RoundingMode.
* @param x the value to round, must be within MIN_LONG_AS_DOUBLE and MAX_LONG_AS_DOUBLE_PLUS_ONE
* @param mode rounding mode
* @return BigInteger representation of x or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,insertInHashTable,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:insertInHashTable(java.lang.Object),760,780,"/**
* Inserts an element into the hash table.
* @param e the element to insert
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,review,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:review(),787,799,"/**
* Rebuilds and optimizes the internal hash table based on distinct elements.
* @return SetBuilderImpl instance with updated hash table or a fallback implementation if hash flooding is detected
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,combine,com.google.common.collect.TopKSelector:combine(com.google.common.collect.TopKSelector),242,248,"/**
* Combines the elements of another TopKSelector into this one.
* @param other the TopKSelector to merge
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,offerAll,com.google.common.collect.TopKSelector:offerAll(java.util.Iterator),269,273,"/**
* Offers all remaining elements from the iterator to this data structure.
* @param elements iterator yielding elements to be offered
*/","* Adds each member of {@code elements} as a candidate for the top {@code k} elements. This
   * operation takes amortized linear time in the length of {@code elements}. The iterator is
   * consumed after this operation completes.
   *
   * <p>If all input data to this {@code TopKSelector} is in a single {@code Iterator}, prefer
   * {@link Ordering#leastOf(Iterator, int)}, which provides a simpler API for that use case.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Base16Encoding:<init>(java.lang.String,java.lang.String)",954,956,"/**
* Constructs a new Base16Encoding instance with the specified name and character set.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Base64Encoding:<init>(java.lang.String,java.lang.String,java.lang.Character)",999,1001,"/**
* Initializes Base64 encoding with custom alphabet and padding character.
* @param name base64 encoding name
* @param alphabetChars characters to use in the encoding alphabet
* @param paddingChar optional padding character (null for default)",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$StandardBaseEncoding:<init>(java.lang.String,java.lang.String,java.lang.Character)",619,621,"/**
* Creates a new standard base encoding instance with specified name and character set.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,upperCase,com.google.common.io.BaseEncoding$Alphabet:upperCase(),564,575,"/**
* Converts alphabet to uppercase.
* @return Uppercase Alphabet object or original if no lowercase characters present
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,lowerCase,com.google.common.io.BaseEncoding$Alphabet:lowerCase(),577,588,"/**
* Converts the alphabet to lowercase.
* @return a new Alphabet object if mixed-case, otherwise this instance
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,ignoreCase,com.google.common.io.BaseEncoding$StandardBaseEncoding:ignoreCase(),907,915,"/**
* Returns a case-insensitive version of the BaseEncoding instance.
* @return BaseEncoding object or null if not available
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,least,com.google.common.collect.TopKSelector:least(int),69,71,"/**
* Returns a TopKSelector instance to select top K elements based on natural ordering.
* @param k number of top elements to select
*/","* Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it,
   * relative to the natural ordering of the elements, and returns them via {@link #topK} in
   * ascending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,greatest,com.google.common.collect.TopKSelector:greatest(int),91,93,"/**
* Constructs a TopKSelector to select the greatest K elements.
* @param k number of top elements to select
*/","* Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it,
   * relative to the natural ordering of the elements, and returns them via {@link #topK} in
   * descending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,isPrime,com.google.common.math.IntMath:isPrime(int),725,728,"/**
* Checks if an integer is prime.
* @param n input number to check for primality
*/","* Returns {@code true} if {@code n} is a <a
   * href=""http://mathworld.wolfram.com/PrimeNumber.html"">prime number</a>: an integer <i>greater
   * than one</i> that cannot be factored into a product of <i>smaller</i> positive integers.
   * Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be
   * factored into smaller positive integers).
   *
   * <p>To test larger numbers, use {@link LongMath#isPrime} or {@link BigInteger#isProbablePrime}.
   *
   * @throws IllegalArgumentException if {@code n} is negative
   * @since 20.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,binomial,"com.google.common.math.BigIntegerMath:binomial(int,int)",465,511,"/**
* Calculates the binomial coefficient (n choose k) using dynamic long arithmetic.
* @param n input value
* @param k input value
* @return BigInteger representing the result or null if invalid input
*/","* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
   * {@code k}, that is, {@code n! / (k! (n - k)!)}.
   *
   * <p><b>Warning:</b> the result can take as much as <i>O(k log n)</i> space.
   *
   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.lang.Iterable),103,107,"/**
* Calculates statistics (mean, median, etc.) from an iterable of numbers.
* @param values collection of numeric values to process
* @return Stats object containing calculated statistics or null if empty
*/","* Returns statistics over a dataset containing the given values.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.Iterator),116,120,"/**
* Calculates statistics from an iterator of numbers.
* @param values iterator of numeric values
*/","* Returns statistics over a dataset containing the given values. The iterator will be completely
   * consumed by this method.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,addAll,com.google.common.math.PairedStatsAccumulator:addAll(com.google.common.math.PairedStats),73,92,"/**
* Adds all paired statistics from the provided PairedStats object.
* @param values paired statistics to add
*/","* Adds the given statistics to the dataset, as if the individual values used to compute the
   * statistics had been added directly.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.stream.DoubleStream),166,170,"/**
* Computes statistics from a stream of numeric values.
* @param values DoubleStream containing numeric data
* @return calculated Stats object
*/","* Returns statistics over a dataset containing the given values. The stream will be completely
   * consumed by this method.
   *
   * <p>If you have a {@code Stream<Double>} rather than a {@code DoubleStream}, you should collect
   * the values using {@link #toStats()} instead.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.stream.IntStream),182,186,"/**
* Computes aggregate statistics from a stream of integer values.
* @param values IntStream containing integers to accumulate
* @return Stats object encapsulating calculated statistics
*/","* Returns statistics over a dataset containing the given values. The stream will be completely
   * consumed by this method.
   *
   * <p>If you have a {@code Stream<Integer>} rather than an {@code IntStream}, you should collect
   * the values using {@link #toStats()} instead.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.stream.LongStream),199,203,"/**
* Accumulates statistics from a LongStream.
* @param values input stream of long values
* @return Stats object with aggregated metrics or null if empty
*/","* Returns statistics over a dataset containing the given values. The stream will be completely
   * consumed by this method.
   *
   * <p>If you have a {@code Stream<Long>} rather than a {@code LongStream}, you should collect the
   * values using {@link #toStats()} instead.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.stream.DoubleStream),142,144,"/**
* Accumulates statistics from provided DoubleStream.
* @param values stream of numerical values to process
*/","* Adds the given values to the dataset. The stream will be completely consumed by this method.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.stream.IntStream),152,154,"/**
* Accumulates statistics from an IntStream into a StatsAccumulator.
*/","* Adds the given values to the dataset. The stream will be completely consumed by this method.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.stream.LongStream),163,165,"/**
* Accumulates stream of Long values into internal statistics.
* @param values LongStream to process
*/","* Adds the given values to the dataset. The stream will be completely consumed by this method.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,selectAllInPlace,"com.google.common.math.Quantiles:selectAllInPlace(int[],int,int,double[],int,int)",627,653,"/**
* Recursively selects all occurrences of a value in an array within specified ranges.
* @param allRequired array of values to search for
* @param requiredFrom start index of first range (inclusive)
* @param requiredTo end index of last range (exclusive)
* @param array target array to select from
* @param from start index of current selection range (inclusive)
* @param to end index of current selection range (inclusive)","* Performs an in-place selection, like {@link #selectInPlace}, to select all the indexes {@code
   * allRequired[i]} for {@code i} in the range [{@code requiredFrom}, {@code requiredTo}]. These
   * indexes must be sorted in the array and must all be in the range [{@code from}, {@code to}].",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(java.lang.Iterable),164,169,"/**
* Creates an immutable double array from a collection of doubles.
* @param values iterable of double values
*/","* Returns an immutable array containing the given values, in order.
   *
   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code
   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link
   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(java.lang.Iterable),161,166,"/**
* Creates an immutable integer array from the given iterable.
* @param values input iterable of integers
*/","* Returns an immutable array containing the given values, in order.
   *
   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code
   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link
   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(java.lang.Iterable),163,168,"/**
* Creates an immutable long array from a collection of longs.
* @param values iterable of long values
*/","* Returns an immutable array containing the given values, in order.
   *
   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code
   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link
   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,toString,com.google.common.primitives.UnsignedLong:toString(int),262,264,"/**
* Converts to string representation in specified base.
* @param radix target number base (e.g. 2 for binary)
*/","* Returns a string representation of the {@code UnsignedLong} value, in base {@code radix}. If
   * {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code
   * 10} is used.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,toString,com.google.common.primitives.UnsignedLongs:toString(long),444,446,"/**
 * Converts a long integer to its string representation in base 10.
 */","* Returns a string representation of x, where x is treated as unsigned.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long)} instead.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,equals,com.google.common.reflect.Parameter:equals(java.lang.Object),139,146,"/**
* Compares this Parameter object with the given object for equality.
* @param obj the object to compare with
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,invokeAnyImpl,"com.google.common.util.concurrent.MoreExecutors:invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,java.time.Duration)",658,669,"/**
* Executes any of the provided tasks with a specified timeout.
* @param executorService thread pool for task execution
* @param tasks collection of callable tasks
* @param timed whether to use a timeout
* @param timeout maximum time to wait in nanoseconds
* @return result of the first completed task or null if all failed
*/","* An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService}
   * implementations.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,run,"com.google.common.util.concurrent.Futures$FutureCombiner:run(java.lang.Runnable,java.util.concurrent.Executor)",765,775,"/**
* Executes a Runnable in the given Executor.
* @param combiner The Runnable to be executed
* @param executor The thread pool to execute the Runnable in
* @return A ListenableFuture representing the execution result
*/","* Creates the {@link ListenableFuture} which will return the result of running {@code combiner}
     * when all Futures complete. {@code combiner} will run using {@code executor}.
     *
     * <p>If the combiner throws a {@code CancellationException}, the returned future will be
     * cancelled.
     *
     * <p>Canceling this Future will attempt to cancel all the component futures.
     *
     * @since 23.6
     * @return a future whose result is based on {@code combiner} (or based on the input futures
     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code
     *     FutureCombiner}). Even though the future never produces a value other than {@code null},
     *     you should typically check whether it failed: See <a
     *     href=""https://errorprone.info/bugpattern/FutureReturnValueIgnored"">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,decrementCountAndMaybeComplete,com.google.common.util.concurrent.AggregateFuture:decrementCountAndMaybeComplete(com.google.common.collect.ImmutableCollection),292,300,"/**
* Decrements the count of remaining futures and possibly completes processing.
* @param futuresIfNeedToCollectAtCompletion collection of futures to collect on completion
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,checkAcquiredLocks,"com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:checkAcquiredLocks(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.List)",608,612,"/**
* Verifies acquired locks against the given policy.
* @param policy Locking policy to enforce
* @param acquiredLocks List of acquired lock nodes to verify
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,from,com.google.common.util.concurrent.ClosingFuture:from(com.google.common.util.concurrent.ListenableFuture),450,452,"/**
* Wraps a ListenableFuture into a ClosingFuture.
* @param future underlying ListenableFuture to wrap
*/","* Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}.
   *
   * <p>{@code future}'s value will not be closed when the pipeline is done even if {@code V}
   * implements {@link Closeable}. In order to start a pipeline with a value that will be closed
   * when the pipeline is done, use {@link #submit(ClosingCallable, Executor)} instead.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,derive,com.google.common.util.concurrent.ClosingFuture:derive(com.google.common.util.concurrent.FluentFuture),1115,1119,"/**
* Derives a closing future from the given fluent future.
* @param future Fluent future to derive from
* @return Derived closing future or null if failed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,standardPoll,com.google.common.collect.ForwardingQueue:standardPoll(),121,127,"/**
 * Attempts to poll an element from this queue; returns null if empty.
 * @return polled element or null if queue is empty
 */","* A sensible definition of {@link #poll} in terms of {@link #remove}. If you override {@link
   * #remove}, you may wish to override {@link #poll} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,standardPeek,com.google.common.collect.ForwardingQueue:standardPeek(),107,113,"/**
* Returns the current element without removing it from the queue.
* If the queue is empty, returns null.","* A sensible definition of {@link #peek} in terms of {@link #element}. If you override {@link
   * #element}, you may wish to override {@link #peek} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,submit,"com.google.common.util.concurrent.ExecutionSequencer:submit(java.util.concurrent.Callable,java.util.concurrent.Executor)",149,166,"/**
* Submits a Callable task to the specified Executor, returning a ListenableFuture result.
* @param callable task to execute
* @param executor execution context
* @return ListenableFuture containing the task's result or null if failed
*/","* Enqueues a task to run when the previous task (if any) completes.
   *
   * <p>Cancellation does not propagate from the output future to a callable that has begun to
   * execute, but if the output future is cancelled before {@link Callable#call()} is invoked,
   * {@link Callable#call()} will not be invoked.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getChecked,"com.google.common.util.concurrent.FuturesGetChecked:getChecked(java.util.concurrent.Future,java.lang.Class)",44,49,"/**
* Retrieves a checked value from a Future, throwing the specified exception if it fails.
* @param future Future containing the value to retrieve
* @param exceptionClass Class of exception to throw on failure
* @throws X exception thrown if retrieval fails
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getChecked,"com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit)",1324,1332,"/**
* Retrieves a result from a Future with checked exceptions.
* @param future the Future to retrieve the result from
* @param exceptionClass the Class of the expected exception
* @param timeout and unit for the maximum wait time
* @throws X the expected exception if thrown by the Future
*/","* Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new
   * instance of the given checked exception type. This reduces boilerplate for a common use of
   * {@code Future} in which it is unnecessary to programmatically distinguish between exception
   * types or to extract other information from the exception instance.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause
   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code
   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.
   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the
   *       interrupt).
   *   <li>Any {@link TimeoutException} is wrapped in an {@code X}.
   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link
   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to continue to treat every checked exception as a checked
   * exception, every unchecked exception as an unchecked exception, and every error as an error. In
   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the
   * new stack trace matches that of the current thread.
   *
   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor
   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}
   * (preferring constructors with at least one {@code String}) and calling the constructor via
   * reflection. If the exception did not already have a cause, one is set by calling {@link
   * Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code
   * IllegalArgumentException} is thrown.
   *
   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}
   *     whose cause is not itself a checked exception
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a
   *     {@code RuntimeException} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or
   *     does not have a suitable constructor
   * @since 19.0 (in 10.0 as {@code get} and with different parameter order)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,validateClass,com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator:validateClass(java.lang.Class),159,183,"/**
* Validates a custom exception class and adds it to the cache, capping at 1000 entries.
* @param exceptionClass Class of the exception to validate
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,notifyStopped,com.google.common.util.concurrent.AbstractService:notifyStopped(),436,456,"/**
* Notifies the service as stopped, updating its state and dispatching events.
* @throws IllegalStateException if service is not in a stoppable state
*/","* Implementing classes should invoke this method once their service has stopped. It will cause
   * the service to transition from {@link State#STARTING} or {@link State#STOPPING} to {@link
   * State#TERMINATED}.
   *
   * @throws IllegalStateException if the service is not one of {@link State#STOPPING}, {@link
   *     State#STARTING}, or {@link State#RUNNING}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,notifyFailed,com.google.common.util.concurrent.AbstractService:notifyFailed(java.lang.Throwable),463,487,"/**
* Notifies that the task has failed.
* @param cause the underlying exception
*/","* Invoke this method to transition the service to the {@link State#FAILED}. The service will
   * <b>not be stopped</b> if it is running. Invoke this method when a service has failed critically
   * or otherwise cannot be started nor stopped.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,tryStartTiming,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:tryStartTiming(com.google.common.util.concurrent.Service),539,549,"/**
* Starts timing for the given service using a synchronized stopwatch.
* @param service service to start timing for
*/","* Attempts to start the timer immediately prior to the service being started via {@link
     * Service#startAsync()}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,transitionService,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State)",673,726,"/**
* Transitions a service from one state to another.
* @param service Service object being transitioned
* @param from Current state of the service
* @param to Target state of the service
*/","* Updates the state with the given service transition.
     *
     * <p>This method performs the main logic of ServiceManager in the following steps.
     *
     * <ol>
     *   <li>Update the {@link #servicesByState()}
     *   <li>Update the {@link #startupTimers}
     *   <li>Based on the new state queue listeners to run
     *   <li>Run the listeners (outside of the lock)
     * </ol>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhen,com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard),472,491,"/**
* Waits on the specified guard until it's satisfied.
* @param guard monitor to wait on
*/","* Enters this monitor when the guard is satisfied. Blocks indefinitely, but may be interrupted.
   *
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitFor,com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard),823,830,"/**
* Waits for the specified Guard to be satisfied or interrupted.
* @param guard Guard object being monitored
*/","* Waits for the guard to be satisfied. Waits indefinitely, but may be interrupted. May be called
   * only by a thread currently occupying this monitor.
   *
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhenUninterruptibly,com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard),570,589,"/**
* Waits uninterruptibly for the given guard to be satisfied.
* @param guard monitor and condition to wait on
*/",Enters this monitor when the guard is satisfied. Blocks indefinitely.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitForUninterruptibly,com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard),870,877,"/**
* Waits uninterruptibly for the guard to be satisfied.
* @param guard Guard object to monitor
*/","* Waits for the guard to be satisfied. Waits indefinitely. May be called only by a thread
   * currently occupying this monitor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhen,"com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",514,567,"/**
* Waits on a Guard until it's satisfied or the specified time elapses.
* @param guard condition to wait for
* @param time duration to wait
* @param unit TimeUnit for the specified duration
* @return true if the condition is met, false otherwise
*/","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied, and may be
   * interrupted.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhenUninterruptibly,"com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",608,667,"/**
* Waits for the specified guard condition to be satisfied or times out.
* @param guard Guard object to monitor
* @param time Time duration to wait
* @param unit TimeUnit of the timeout duration
* @return true if the condition is met, false otherwise
*/","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitFor,"com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",851,864,"/**
* Waits for a Guard to be satisfied within a specified time limit.
* @param guard the condition being monitored
* @param time maximum waiting duration in given TimeUnit
* @param unit TimeUnit of the waiting duration
* @return true if the Guard is satisfied, false otherwise
*/","* Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May
   * be called only by a thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitForUninterruptibly,"com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",896,926,"/**
* Waits uninterruptibly for the specified guard to be satisfied or times out.
* @param guard monitor object to wait on
* @param time maximum duration to wait in given unit
* @param unit TimeUnit for time parameter
* @return true if guard is satisfied, false otherwise","* Waits for the guard to be satisfied. Waits at most the given time. May be called only by a
   * thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,withTimeout,"com.google.common.util.concurrent.FluentFuture:withTimeout(long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",289,295,"/**
* Executes the operation with a specified time-out.
* @param timeout duration to wait for completion
* @param unit time unit of the time-out
* @return FluentFuture containing result or exception
*/","* Returns a future that delegates to this future but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires.
   * If the timeout expires, not only will the output future finish, but also the input future
   * ({@code this}) will be cancelled and interrupted.
   *
   * @param timeout when to time out the future
   * @param unit the time unit of the time parameter
   * @param scheduledExecutor The executor service to enforce the timeout.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,withTimeout,"com.google.common.util.concurrent.Futures:withTimeout(com.google.common.util.concurrent.ListenableFuture,java.time.Duration,java.util.concurrent.ScheduledExecutorService)",384,389,"/**
* Wraps a listenable future with a timeout.
* @param delegate original listenable future
* @param time timeout duration
* @param scheduledExecutor executor service for timed out operations
*/","* Returns a future that delegates to another but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires.
   *
   * <p>The delegate future is interrupted and cancelled if it times out.
   *
   * @param delegate The future to delegate to.
   * @param time when to time out the future
   * @param scheduledExecutor The executor service to enforce the timeout.
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,firstMatch,com.google.common.collect.FluentIterable:firstMatch(com.google.common.base.Predicate),464,467,"/**
* Finds the first element matching a given predicate in an iterable sequence.
* @param predicate condition to match
* @return Optional containing the first matching element, or empty if none found
*/","* Returns an {@link Optional} containing the first element in this fluent iterable that satisfies
   * the given predicate, if such an element exists.
   *
   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}
   * is matched in this fluent iterable, a {@link NullPointerException} will be thrown.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,precomputedInternal,com.google.common.base.CharMatcher:precomputedInternal(),417,442,"/**
* Creates a fast CharMatcher instance with precomputed matches.
* @return Fast matcher or NegatedFastMatcher if total characters exceed DISTINCT_CHARS limit
*/","* This is the actual implementation of {@link #precomputed}, but we bounce calls through a method
   * on {@link Platform} so that we can have different behavior in GWT.
   *
   * <p>This implementation tries to be smart in a number of ways. It recognizes cases where the
   * negation is cheaper to precompute than the matcher itself; it tries to build small hash tables
   * for matchers that only match a few characters, and so on. In the worst-case scenario, it
   * constructs an eight-kilobyte bit array and queries that. In many situations this produces a
   * matcher which is faster to query than the original.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,rethrow,"com.google.common.io.Closer:rethrow(java.lang.Throwable,java.lang.Class,java.lang.Class)",177,186,"/**
* Re-throws a Throwable as a RuntimeException or its declared type.
* @param e the Throwable to rethrow
* @param declaredType1 first potential exception type
* @param declaredType2 second potential exception type
*/","* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code
   * IOException}, {@code RuntimeException}, {@code Error} or a checked exception of either of the
   * given types. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b>
   * Be sure to declare all of the checked exception types your try block can throw when calling an
   * overload of this method so as to avoid losing the original exception type.
   *
   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e,
   * ...);} to ensure the compiler knows that it will throw.
   *
   * @return this method does not return; it always throws
   * @throws IOException when the given throwable is an IOException
   * @throws X1 when the given throwable is of the declared type X1
   * @throws X2 when the given throwable is of the declared type X2",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSink.java,write,com.google.common.io.ByteSink:write(byte[]),98,104,"/**
* Writes byte array to output stream.
* @param bytes data to be written
*/","* Writes all the given bytes to this sink.
   *
   * @throws IOException if an I/O occurs while writing to this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSink.java,writeFrom,com.google.common.io.ByteSink:writeFrom(java.io.InputStream),113,120,"/**
* Writes data from an InputStream to a newly opened OutputStream.
* @param input InputStream containing the data to be written
* @return the total number of bytes written or -1 on error
*/","* Writes all the bytes from the given {@code InputStream} to this sink. Does not close {@code
   * input}.
   *
   * @return the number of bytes written
   * @throws IOException if an I/O occurs while reading from {@code input} or writing to this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sliceStream,com.google.common.io.ByteSource$SlicedByteSource:sliceStream(java.io.InputStream),505,527,"/**
* Limits and skips input stream to specified offset and length.
* @param in InputStream to slice
* @return sliced InputStream or empty byte array if offset exceeds EOF
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,isEmpty,com.google.common.io.ByteSource:isEmpty(),151,165,"/**
* Checks if the underlying stream is empty.
* @return true if the stream has no content, false otherwise
*/","* Returns whether the source has zero bytes. The default implementation first checks {@link
   * #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be non-zero.
   * If the size is not known, it falls back to opening a stream and checking for EOF.
   *
   * <p>Note that, in cases where {@code sizeIfKnown} returns zero, it is <i>possible</i> that bytes
   * are actually available for reading. (For example, some special files may return a size of 0
   * despite actually having content when read.) This means that a source may return {@code true}
   * from {@code isEmpty()} despite having readable content.
   *
   * @throws IOException if an I/O error occurs
   * @since 15.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,size,com.google.common.io.ByteSource:size(),204,229,"/**
* Calculates the size of this resource.
* @return size in bytes, or -1 if unknown
*/","* Returns the size of this source in bytes, even if doing so requires opening and traversing an
   * entire stream. To avoid a potentially expensive operation, see {@link #sizeIfKnown}.
   *
   * <p>The default implementation calls {@link #sizeIfKnown} and returns the value if present. If
   * absent, it will fall back to a heavyweight operation that will open a stream, read (or {@link
   * InputStream#skip(long) skip}, if possible) to the end of the stream and return the total number
   * of bytes that were read.
   *
   * <p>Note that for some sources that implement {@link #sizeIfKnown} to provide a more efficient
   * implementation, it is <i>possible</i> that this method will return a different number of bytes
   * than would be returned by reading all of the bytes (for example, some special files may return
   * a size of 0 despite actually having content when read).
   *
   * <p>In either case, for mutable sources such as files, a subsequent read may return a different
   * number of bytes if the contents are changed.
   *
   * @throws IOException if an I/O error occurs while reading the size of this source",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,copyTo,com.google.common.io.ByteSource:copyTo(java.io.OutputStream),249,262,"/**
* Copies user data to the specified OutputStream.
* @param output target stream for copying
*/","* Copies the contents of this byte source to the given {@code OutputStream}. Does not close
   * {@code output}.
   *
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     output}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,copyTo,com.google.common.io.ByteSource:copyTo(com.google.common.io.ByteSink),271,285,"/**
* Copies data to the specified sink.
* @param sink target stream for copying
*/","* Copies the contents of this byte source to the given {@code ByteSink}.
   *
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     sink}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,read,com.google.common.io.ByteSource:read(),292,305,"/**
* Reads data from an underlying stream into a byte array.
* @return byte[] containing the read data or null if not known
*/","* Reads the full contents of this byte source as a byte array.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,read,com.google.common.io.ByteSource:read(com.google.common.io.ByteProcessor),316,330,"/**
* Reads data from the input stream using a specified byte processor.
* @param processor ByteProcessor to process the read bytes
* @return T object processed by the processor, or null if not found
*/","* Reads the contents of this byte source using the given {@code processor} to process bytes as
   * they are read. Stops when all bytes have been read or the consumer returns {@code false}.
   * Returns the result produced by the processor.
   *
   * @throws IOException if an I/O error occurs while reading from this source or if {@code
   *     processor} throws an {@code IOException}
   * @since 16.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,contentEquals,com.google.common.io.ByteSource:contentEquals(com.google.common.io.ByteSource),349,361,"/**
* Compares byte content of this source to another.
* @param other ByteSource to compare with
*/","* Checks that the contents of this byte source are equal to the contents of the given byte
   * source.
   *
   * @throws IOException if an I/O error occurs while reading from this source or {@code other}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,write,com.google.common.io.CharSink:write(java.lang.CharSequence),94,100,"/**
* Writes CharSequence to underlying stream.
* @param charSequence sequence of characters to be written
*/","* Writes the given character sequence to this sink.
   *
   * @throws IOException if an I/O error while writing to this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeFrom,com.google.common.io.CharSink:writeFrom(java.lang.Readable),167,174,"/**
* Writes data from a Readable source to the underlying output stream.
* @param readable input data source
*/","* Writes all the text from the given {@link Readable} (such as a {@link Reader}) to this sink.
   * Does not close {@code readable} if it is {@code Closeable}.
   *
   * @return the number of characters written
   * @throws IOException if an I/O error occurs while reading from {@code readable} or writing to
   *     this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,copyTo,com.google.common.io.CharSource$StringCharSource:copyTo(com.google.common.io.CharSink),657,670,"/**
* Copies sequence data to a CharSink.
* @param sink output stream
* @return length of copied data
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,length,com.google.common.io.CharSource:length(),213,228,"/**
* Calculates the length of a streamable entity.
* @return Length in bytes, or -1 if unknown
*/","* Returns the length of this source in chars, even if doing so requires opening and traversing an
   * entire stream. To avoid a potentially expensive operation, see {@link #lengthIfKnown}.
   *
   * <p>The default implementation calls {@link #lengthIfKnown} and returns the value if present. If
   * absent, it will fall back to a heavyweight operation that will open a stream, {@link
   * Reader#skip(long) skip} to the end of the stream, and return the total number of chars that
   * were skipped.
   *
   * <p>Note that for sources that implement {@link #lengthIfKnown} to provide a more efficient
   * implementation, it is <i>possible</i> that this method will return a different number of chars
   * than would be returned by reading all of the chars.
   *
   * <p>In either case, for mutable sources such as files, a subsequent read may return a different
   * number of chars if the contents are changed.
   *
   * @throws IOException if an I/O error occurs while reading the length of this source
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,copyTo,com.google.common.io.CharSource:copyTo(java.lang.Appendable),247,260,"/**
* Copies user profile data to the specified writable destination.
* @param appendable writable output target
* @return number of bytes written or -1 on error
*/","* Appends the contents of this source to the given {@link Appendable} (such as a {@link Writer}).
   * Does not close {@code appendable} if it is {@code Closeable}.
   *
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     appendable}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,copyTo,com.google.common.io.CharSource:copyTo(com.google.common.io.CharSink),269,283,"/**
* Copies user data to a specified sink.
* @param sink destination for the copy operation
*/","* Copies the contents of this source to the given sink.
   *
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     sink}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readFirstLine,com.google.common.io.CharSource:readFirstLine(),312,322,"/**
* Reads the first line from a stream, handling exceptions and resource closure.
*/","* Reads the first line of this source as a string. Returns {@code null} if this source is empty.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource:readLines(com.google.common.io.LineProcessor),366,380,"/**
* Reads lines from the stream and processes them with the given processor.
* @param processor LineProcessor to apply to each line
* @return processed result or null if not applicable
*/","* Reads lines of text from this source, processing each line as it is read using the given {@link
   * LineProcessor processor}. Stops when all lines have been processed or the processor returns
   * {@code false} and returns the result produced by the processor.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source or if {@code
   *     processor} throws an {@code IOException}
   * @since 16.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,isEmpty,com.google.common.io.CharSource:isEmpty(),416,430,"/**
* Checks if the underlying stream is empty.
* @return true if the stream has no content, false otherwise
*/","* Returns whether the source has zero chars. The default implementation first checks {@link
   * #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be
   * non-zero. If the length is not known, it falls back to opening a stream and checking for EOF.
   *
   * <p>Note that, in cases where {@code lengthIfKnown} returns zero, it is <i>possible</i> that
   * chars are actually available for reading. This means that a source may return {@code true} from
   * {@code isEmpty()} despite having readable content.
   *
   * @throws IOException if an I/O error occurs
   * @since 15.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,read,com.google.common.io.Files$FileByteSource:read(),151,162,"/**
* Reads data from the underlying stream and returns it as a byte array.
* @throws IOException if an I/O error occurs
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,mapInternal,"com.google.common.io.Files:mapInternal(java.io.File,java.nio.channels.FileChannel$MapMode,long)",696,712,"/**
* Maps a file to a MappedByteBuffer using the specified mode.
* @param file the file to map
* @param mode the mapping mode (READ_ONLY or READ_WRITE)
* @param size the requested size of the mapped region; -1 for full file
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,addDelayedShutdownHook,"com.google.common.util.concurrent.MoreExecutors$Application:addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)",263,283,"/**
* Adds a delayed shutdown hook to the given ExecutorService.
* @param service ExecutorService to add hook to
* @param terminationTimeout timeout for awaitTermination call
* @param timeUnit unit of terminationTimeout
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,expand,com.google.common.cache.LocalCache$Segment:expand(),2865,2932,"/**
* Expands the hash table to twice its current capacity.
* @GuardedBy(""this"")
*/",Expands the table if possible.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeEntryFromChain,"com.google.common.cache.LocalCache$Segment:removeEntryFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",3261,3277,"/**
* Removes a specific entry from the reference chain.
* @param first head of the reference chain
* @param entry entry to be removed
* @return new head of the reference chain or null if all entries were removed
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterKeys,"com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.Multimap,com.google.common.base.Predicate)",1980,1996,"/**
* Filters keys in a multimap using the given predicate.
* @param unfiltered Multimap to filter
* @param keyPredicate Predicate to apply to each key
* @return New filtered multimap or existing one if already filtered
*/","* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,checkHealthy,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:checkHealthy(),759,771,"/**
* Verifies the health of this instance by checking all services are running.
* @throws IllegalStateException if any services are not in the RUNNING state
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterValues,"com.google.common.collect.Multimaps:filterValues(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",2138,2142,"/**
* Filters values in a multimap based on a predicate.
* @param unfiltered the original multimap
* @param valuePredicate predicate to apply to each value
* @return filtered SetMultimap with values matching the predicate
*/","* Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a value that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose value satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterEntries,"com.google.common.collect.Multimaps:filterEntries(com.google.common.collect.Multimap,com.google.common.base.Predicate)",2169,2179,"/**
* Filters entries in a multimap based on the provided predicate.
* @param unfiltered original multimap
* @param entryPredicate filter criteria for entries
* @return filtered Multimap object or new instance if not filtered
*/","* Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned multimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key/value pair that
   * doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,createColumnKeyIterator,com.google.common.collect.TreeBasedTable:createColumnKeyIterator(),309,338,"/**
* Creates an iterator for unique column keys, eliminating duplicates based on the configured comparator.
* @return Iterator over unique column keys or empty iterator if none found.",Overridden column iterator to return columns values in globally sorted order.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,remove,com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl:remove(java.lang.Object),198,222,"/**
* Removes elements from the multimap that match the specified key.
* @param key unique identifier to filter by
* @return Collection of removed values or null if none found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompoundOrdering.java,<init>,com.google.common.collect.CompoundOrdering:<init>(java.lang.Iterable),38,42,"/**
* Initializes the CompoundOrdering with a collection of comparators.
* @param comparators iterable of Comparator objects to order by
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,copyOf,com.google.common.collect.ImmutableBiMap:copyOf(java.lang.Iterable),556,573,"/**
* Creates an Immutable Bi-Map from an iterable of key-value entries.
* @param entries iterable of entries to copy
*/","* Returns an immutable bimap containing the given entries. The returned bimap iterates over
   * entries in the same order as the original iterable.
   *
   * @throws IllegalArgumentException if two keys have the same value or two values have the same
   *     key
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,copyOf,com.google.common.collect.ImmutableMap:copyOf(java.lang.Iterable),713,731,"/**
* Creates an ImmutableMap from a collection of entries.
*@param entries Iterable of key-value pairs to copy into map
*/","* Returns an immutable map containing the specified entries. The returned map iterates over
   * entries in the same order as the original iterable.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @throws IllegalArgumentException if two entries have the same key
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toArray,"com.google.common.collect.Iterables:toArray(java.lang.Iterable,java.lang.Class)",287,291,"/**
* Converts an iterable to a typed array.
* @param iterable input collection
* @param type expected element class
* @return array containing all elements or null if empty
*/","* Copies an iterable's elements into an array.
   *
   * @param iterable the iterable to copy
   * @param type the type of the elements
   * @return a newly-allocated array into which all the elements of the iterable have been copied",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,"com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.lang.Iterable)",296,311,"/**
* Creates a copy of the given sorted iterable with the specified comparator. 
* If the original is an ImmutableSortedSet with the same comparator, returns it directly.
* Otherwise, constructs a new ImmutableSortedSet from the iterable's elements.
* @param comparator comparison function for the set
* @param elements iterable containing the set's elements
*/","* Returns an immutable sorted set containing the given elements sorted by the given {@code
   * Comparator}. When multiple elements are equivalent according to {@code compare()}, only the
   * first one specified is included. This method iterates over {@code elements} at most once.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,sortedCopy,com.google.common.collect.Ordering:sortedCopy(java.lang.Iterable),862,867,"/**
* Creates a sorted copy of the input iterable.
* @param elements Iterable containing elements to be sorted
* @return List of sorted elements or empty list if input is empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$OrderedPermutationCollection:iterator(),485,488,"/**
* Returns an ordered permutation iterator over the input list. 
* @return iterator yielding all permutations of E elements in inputList.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedLists.java,binarySearch,"com.google.common.collect.SortedLists:binarySearch(java.util.List,com.google.common.base.Function,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior)",237,246,"/**
* Performs binary search on a list using a custom key function and comparator.
* @param list input list to search
* @param keyFunction function to extract the search key from each element
* @param key target search key
* @param keyComparator comparator for searching key
* @param presentBehavior behavior when search key is present in list
* @param absentBehavior behavior when search key is not present in list
*/","* Binary searches the list for the specified key, using the specified key function.
   *
   * <p>Equivalent to {@link #binarySearch(List, Object, Comparator, KeyPresentBehavior,
   * KeyAbsentBehavior)} using {@link Lists#transform(List, Function) Lists.transform(list,
   * keyFunction)}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ListMultimap.java,removeAll,com.google.common.collect.ListMultimap:removeAll(java.lang.Object),61,63,"/**
 * Removes all elements from this list that are contained in the given collection.
 * @param key the collection of elements to remove
 */","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link java.util.Collection} specified in
   * the {@link Multimap} interface.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,"com.google.common.collect.Multimaps$TransformedEntriesMultimap:remove(java.lang.Object,java.lang.Object)",1582,1586,"/**
* Removes an entry from the map by its key and value.
* @param key unique identifier for the map entry to remove (may be null)
* @param value value of the map entry to remove (may be null)
* @return true if removed, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,keySet,com.google.common.collect.AbstractNavigableMap:keySet(),145,148,"/**
* Returns a set of keys in this map.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$DescendingMap:keySet(),4407,4410,"/**
* Returns a set view of this map's keys.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:descendingMap(),2290,2293,"/**
* Returns a new descending navigable map view of this map.
* @return A new map with entries sorted in reverse order.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:headMap(java.lang.Object,boolean)",2315,2318,"/**
* Returns a map with entries up to the specified key.
* @param toKey the upper bound of the map
* @param inclusive whether to include the key itself in the result
* @return NavigableMap containing entries up to and possibly including the given key",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",2360,2368,"/**
* Returns a navigable map subset from the given key range.
* @param fromKey starting key
* @param fromInclusive whether to include start key in result
* @param toKey ending key
* @param toInclusive whether to include end key in result
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:tailMap(java.lang.Object,boolean)",2380,2383,"/**
* Returns a map of entries starting from the specified key.
* @param fromKey starting key
* @param inclusive whether to include the start key in the result
* @return NavigableMap containing transformed entries or null if empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformValues,"com.google.common.collect.Maps:transformValues(java.util.NavigableMap,com.google.common.base.Function)",1903,1910,"/**
* Transforms the values in a navigable map using a given function.
* @param fromMap source map with keys and original values
* @param function transformation function applied to each value
* @return new map with transformed values, same keys as input map
*/","* Returns a view of a navigable map where each value is transformed by a function. All other
   * properties of the map, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * NavigableMap<String, Integer> map = Maps.newTreeMap();
   * map.put(""a"", 4);
   * map.put(""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * NavigableMap<String, Double> transformed =
   *      Maps.transformNavigableValues(map, sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=2.0, b=3.0}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed map might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
   * view, copy the returned map into a new map of your choosing.
   *
   * @since 13.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowMap,com.google.common.collect.Tables$UnmodifiableRowSortedMap:rowMap(),656,660,"/**
* Returns an immutable sorted map of rows by key.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,put,"com.google.common.collect.TableCollectors$ImmutableTableCollectorState:put(java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)",141,150,"/**
* Merges or inserts a new value into the specified table location.
* @param row     unique row identifier
* @param column  unique column identifier
* @param value   new value to merge or insert
* @param merger  binary operation to apply when merging with existing value
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeMapping,"com.google.common.collect.StandardTable:removeMapping(java.lang.Object,java.lang.Object,java.lang.Object)",198,205,"/**
* Removes mapping by key-value pair if present.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value associated value to remove
* @return true if removed, false otherwise
*/","Remove a row key / column key / value mapping, if present.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:remove(java.lang.Object),941,953,"/**
* Removes a column by its associated Entry object.
* @param obj the Entry object to remove
* @return true if removed, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,computeToString,com.google.common.net.MediaType:computeToString(),1236,1250,"/**
* Generates a string representation of the object.
* @return formatted string containing type/subtype and parameters (if any)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableMap,"com.google.common.collect.Synchronized:navigableMap(java.util.NavigableMap,java.lang.Object)",1593,1597,"/**
 * Creates a synchronized NavigableMap instance.
 * @param navigableMap the underlying NavigableMap
 * @param mutex synchronization lock object or null for no locking
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headMap,com.google.common.collect.Synchronized$SynchronizedSortedMap:headMap(java.lang.Object),1308,1313,"/**
* Returns a new sorted map containing all entries of this map up to the specified key.
* @param toKey end key of the submap
* @return SortedMap object or null if empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subMap,"com.google.common.collect.Synchronized$SynchronizedSortedMap:subMap(java.lang.Object,java.lang.Object)",1322,1327,"/**
* Returns a view of the map containing all key-value pairs with keys in the range [fromKey, toKey].
* @param fromKey starting key
* @param toKey ending key
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailMap,com.google.common.collect.Synchronized$SynchronizedSortedMap:tailMap(java.lang.Object),1329,1334,"/**
* Returns a view of the map's entries starting from the specified key.
* @param fromKey key to start retrieving entries from
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedListMultimap,com.google.common.collect.Multimaps:synchronizedListMultimap(com.google.common.collect.ListMultimap),990,994,"/**
* Returns a thread-safe wrapper for the provided list multimap.
* @param multimap list multimap to synchronize
* @return synchronized list multimap or null if input is null
*/","* Returns a synchronized (thread-safe) {@code ListMultimap} backed by the specified multimap.
   *
   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.
   *
   * @param multimap the multimap to be wrapped
   * @return a synchronized view of the specified multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sortedSetMultimap,"com.google.common.collect.Synchronized:sortedSetMultimap(com.google.common.collect.SortedSetMultimap,java.lang.Object)",881,888,"/**
* Converts a non-synchronized multimap to a synchronized one.
* @param multimap the input multimap
* @param mutex synchronization lock (may be null)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedSetMultimap,com.google.common.collect.Multimaps:synchronizedSetMultimap(com.google.common.collect.SetMultimap),906,910,"/**
 * Returns a thread-safe version of the provided set multimap.
 * @param multimap input multimap to synchronize
 */","* Returns a synchronized (thread-safe) {@code SetMultimap} backed by the specified multimap.
   *
   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param multimap the multimap to be wrapped
   * @return a synchronized view of the specified multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,removeEdge,com.google.common.graph.StandardMutableGraph:removeEdge(com.google.common.graph.EndpointPair),70,74,"/**
* Removes an edge between two nodes.
* @param endpoints pair of nodes defining the edge to be removed
* @return true if removal was successful, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentNodes,com.google.common.graph.ImmutableNetwork:incidentNodes(java.lang.Object),135,141,"/**
* Fetches incident nodes for a given edge, returning an EndpointPair.
* @param edge Edge object
* @return EndpointPair containing the current endpoint and the two incident nodes, or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,toString,com.google.common.io.CharStreams:toString(java.lang.Readable),162,164,"/**
* Converts a Readable object to its string representation.
* @param r Readable object to convert
*/","* Reads all characters from a {@link Readable} object into a {@link String}. Does not close the
   * {@code Readable}.
   *
   * @param r the object to read from
   * @return a string containing all the characters
   * @throws IOException if an I/O error occurs",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,catching,"com.google.common.util.concurrent.FluentFuture:catching(java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)",190,195,"/**
* Catches specific exceptions and returns a fallback value.
* @param exceptionType type of exception to catch
* @param fallback function to execute on caught exception
* @param executor executor service for fallback execution
* @return FluentFuture containing result or fallback value
*/","* Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code
   * Future} fails with the given {@code exceptionType}, from the result provided by the {@code
   * fallback}. {@link Function#apply} is not invoked until the primary input has failed, so if the
   * primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an
   * exception is thrown, this exception is used as the result of the output {@code Future}.
   *
   * <p>Usage example:
   *
   * {@snippet :
   * // Falling back to a zero counter in case an exception happens when processing the RPC to fetch
   * // counters.
   * ListenableFuture<Integer> faultTolerantFuture =
   *     fetchCounters().catching(FetchException.class, x -> 0, directExecutor());
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It
   * can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle}
   * and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link
   * #transform}.
   *
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against the input's exception. ""The input's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a
   *     different kind of exception, that exception itself. To avoid hiding bugs and other
   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code
   *     Throwable.class} in particular.
   * @param fallback the {@link Function} to be called if the input fails with the expected
   *     exception type. The function's argument is the input's exception. ""The input's exception""
   *     means the cause of the {@link ExecutionException} thrown by {@code this.get()} or, if
   *     {@code get()} throws a different kind of exception, that exception itself.
   * @param executor the executor that runs {@code fallback} if the input fails",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,cancel,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:cancel(boolean),122,126,"/**
* Cancels this task if it's currently running.
* @param mayInterruptIfRunning whether to interrupt the running task
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,cancel,com.google.common.util.concurrent.Futures$InCompletionOrderFuture:cancel(boolean),954,970,"/**
* Cancels this Future, optionally interrupting its underlying task if running.
* @param interruptIfRunning whether to interrupt the task if it's still running
* @return true if cancellation was successful, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,recordInputCompletion,"com.google.common.util.concurrent.Futures$InCompletionOrderState:recordInputCompletion(com.google.common.collect.ImmutableList,int)",1019,1040,"/**
* Updates input completion status by propagating it to all delegates.
* @param delegates Iterable of AbstractFuture instances
* @param inputFutureIndex Index of input future being completed
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadFuture,"com.google.common.cache.LocalCache$LoadingValueReference:loadFuture(java.lang.Object,com.google.common.cache.CacheLoader)",3547,3575,"/**
* Loads cache value by key, potentially reloading it from loader.
* @param key unique cache key
* @param loader CacheLoader to use for loading/reloading values
* @return ListenableFuture containing loaded value or null if failed
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,transform,"com.google.common.util.concurrent.FluentFuture:transform(com.google.common.base.Function,java.util.concurrent.Executor)",373,376,"/**
* Transforms a Future into a new Future of type T using the provided function.
* @param function transformation function
* @param executor execution context for the transformation
*/","* Returns a new {@code Future} whose result is derived from the result of this {@code Future}. If
   * this input {@code Future} fails, the returned {@code Future} fails with the same exception (and
   * the function is not invoked). Example usage:
   *
   * {@snippet :
   * ListenableFuture<List<Row>> rowsFuture =
   *     queryFuture.transform(QueryResult::getRows, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the
   * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel
   * the input, and if the input is cancelled, the returned {@code Future} will receive a callback
   * in which it will attempt to cancel itself.
   *
   * <p>An example use of this method is to convert a serializable object returned from an RPC into
   * a POJO.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenApply} and
   * {@link java.util.concurrent.CompletableFuture#thenApplyAsync}. It can also serve some of the
   * use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link
   * java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}.
   *
   * @param function A Function to transform the results of this future to the results of the
   *     returned future.
   * @param executor Executor to run the function in.
   * @return A future that holds result of the transformation.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractValueGraph$1:incidentEdgeOrder(),101,104,"/**
* Returns an unordered edge order for incidents.
* @return ElementOrder instance indicating edge order.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,directed,com.google.common.graph.GraphBuilder:directed(),82,84,"/**
* Creates a directed graph builder.
* @return GraphBuilder instance with directed graph capability
*/",Returns a {@link GraphBuilder} for building directed graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,undirected,com.google.common.graph.GraphBuilder:undirected(),87,89,"/**
* Creates an undirected graph builder.
* @return GraphBuilder instance with directed=false
*/",Returns a {@link GraphBuilder} for building undirected graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,from,com.google.common.graph.GraphBuilder:from(com.google.common.graph.Graph),98,103,"/**
* Creates a new GraphBuilder instance from an existing graph.
* @param graph the original graph to copy settings from
*/","* Returns a {@link GraphBuilder} initialized with all properties queryable from {@code graph}.
   *
   * <p>The ""queryable"" properties are those that are exposed through the {@link Graph} interface,
   * such as {@link Graph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)},
   * are not set in the new builder.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,copy,com.google.common.graph.GraphBuilder:copy(),185,192,"/**
* Creates a deep copy of the current graph builder.
* @return A new GraphBuilder instance with identical properties
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,directed,com.google.common.graph.NetworkBuilder:directed(),87,89,"/**
* Creates a network builder with a directed topology.
* @return NetworkBuilder instance with directed topology
*/",Returns a {@link NetworkBuilder} for building directed networks.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,undirected,com.google.common.graph.NetworkBuilder:undirected(),92,94,"/**
* Creates an undirected network builder. 
* @return NetworkBuilder instance with directed=false property set
*/",Returns a {@link NetworkBuilder} for building undirected networks.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,from,com.google.common.graph.NetworkBuilder:from(com.google.common.graph.Network),104,110,"/**
* Creates a NetworkBuilder instance from an existing network.
* @param network the original network to copy properties from
*/","* Returns a {@link NetworkBuilder} initialized with all properties queryable from {@code
   * network}.
   *
   * <p>The ""queryable"" properties are those that are exposed through the {@link Network} interface,
   * such as {@link Network#isDirected()}. Other properties, such as {@link
   * #expectedNodeCount(int)}, are not set in the new builder.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,directed,com.google.common.graph.ValueGraphBuilder:directed(),84,86,"/**
* Creates a directed ValueGraphBuilder instance.
*/",Returns a {@link ValueGraphBuilder} for building directed graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,undirected,com.google.common.graph.ValueGraphBuilder:undirected(),89,91,"/**
* Creates an undirected graph builder.
*/",Returns a {@link ValueGraphBuilder} for building undirected graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,from,com.google.common.graph.ValueGraphBuilder:from(com.google.common.graph.ValueGraph),101,106,"/**
* Creates a ValueGraphBuilder instance from an existing graph.
* @param graph the input graph
*/","* Returns a {@link ValueGraphBuilder} initialized with all properties queryable from {@code
   * graph}.
   *
   * <p>The ""queryable"" properties are those that are exposed through the {@link ValueGraph}
   * interface, such as {@link ValueGraph#isDirected()}. Other properties, such as {@link
   * #expectedNodeCount(int)}, are not set in the new builder.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,copy,com.google.common.graph.ValueGraphBuilder:copy(),193,200,"/**
* Creates a deep copy of the ValueGraphBuilder instance.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,addListener,"com.google.common.util.concurrent.ServiceManager:addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor)",259,261,"/**
* Adds a listener to the internal state.
* @param listener Listener object to be added
* @param executor Executor instance for concurrent execution
*/","* Registers a {@link Listener} to be {@linkplain Executor#execute executed} on the given
   * executor. The listener will not have previous state changes replayed, so it is suggested that
   * listeners are added before any of the managed services are {@linkplain Service#startAsync
   * started}.
   *
   * <p>{@code addListener} guarantees execution ordering across calls to a given listener but not
   * across calls to multiple listeners. Specifically, a given listener will have its callbacks
   * invoked in the same order as the underlying service enters those states. Additionally, at most
   * one of the listener's callbacks will execute at once. However, multiple listeners' callbacks
   * may execute concurrently, and listeners may execute in an order different from the one in which
   * they were registered.
   *
   * <p>RuntimeExceptions thrown by a listener will be caught and logged. Any exception thrown
   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException}) will be caught and
   * logged.
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}
   * documentation.
   *
   * @param listener the listener to run when the manager changes state
   * @param executor the executor in which the listeners callback methods will be run.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,<init>,com.google.common.collect.CompactLinkedHashMap:<init>(int),106,108,"/**
* Initializes a compact linked hash map with an estimated size.
* @param expectedSize initial capacity of the map
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,create,com.google.common.collect.CompactLinkedHashSet:create(),56,58,"/**
* Creates an empty CompactLinkedHashSet instance.
* @return A new, empty CompactLinkedHashSet object.",Creates an empty {@code CompactLinkedHashSet} instance.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,create,com.google.common.collect.CompactHashSet:create(java.util.Collection),96,101,"/**
* Creates a compact hash set from the given collection.
* @param collection input collection to convert
*/","* Creates a <i>mutable</i> {@code CompactHashSet} instance containing the elements of the given
   * collection in unspecified order.
   *
   * @param collection the elements that the set should contain
   * @return a new {@code CompactHashSet} containing those elements (minus duplicates)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,createWithExpectedSize,com.google.common.collect.CompactLinkedHashSet:createWithExpectedSize(int),97,100,"/**
* Creates a compact linked hash set with expected size.
* @param expectedSize anticipated number of elements
*/","* Creates a {@code CompactLinkedHashSet} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactLinkedHashSet} with enough capacity to hold {@code
   *     expectedSize} elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,<init>,"com.google.common.collect.TreeMultimap:<init>(java.util.Comparator,java.util.Comparator)",113,117,"/**
* Constructs a TreeMultimap with specified key and value comparators.
* @param keyComparator comparator for sorting keys
* @param valueComparator comparator for sorting values within each key group
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newSortedSetMultimap,"com.google.common.collect.Multimaps:newSortedSetMultimap(java.util.Map,com.google.common.base.Supplier)",523,527,"/**
* Creates a sorted set multimap from a backing map and a sorted set factory.
* @param map backing map of key-value collections
* @param factory supplier for creating sorted sets of values
*/","* Creates a new {@code SortedSetMultimap} that uses the provided map and factory. It can generate
   * a multimap based on arbitrary {@link Map} and {@link SortedSet} classes.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}
   * method returns instances of a different class than {@code factory.get()} does.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code
   * factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedSortedSetMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link TreeMultimap#create()} and {@link
   * TreeMultimap#create(Comparator, Comparator)} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by
   * {@code factory}. Those objects should not be manually updated and they should not use soft,
   * weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty sorted sets that will each hold all values for a given
   *     key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,toImmutableMultiset,com.google.common.collect.ImmutableMultiset:toImmutableMultiset(),69,71,"/**
* Converts a collection of elements into an immutable multiset.
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableMultiset}. Elements iterate in order by the <i>first</i> appearance of that element in
   * encounter order.
   *
   * @since 21.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,toImmutableMultiset,"com.google.common.collect.ImmutableMultiset:toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction)",84,89,"/**
* Converts a collection of elements with optional counts into an immutable multiset.
* @param elementFunction maps each element to its type
* @param countFunction extracts the count from each element
* @return ImmutableMultiset containing all elements with their respective counts
*/","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableMultiset} whose
   * elements are the result of applying {@code elementFunction} to the inputs, with counts equal to
   * the result of applying {@code countFunction} to the inputs.
   *
   * <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the first
   * occurrence in encounter order appears in the resulting multiset, with count equal to the sum of
   * the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element.
   *
   * @since 22.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,builder,com.google.common.collect.ImmutableMultiset:builder(),453,455,"/**
* Creates a new instance of the Builder class.
* @return A Builder object with default configuration.
*/","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner:join(java.lang.Object[]),257,261,"/**
* Joins an array of objects into a string using the join method.
* @param parts Array of objects to be joined, may be null
*/","* Returns a string containing the string representation of each of {@code parts}, using the
   * previously configured separator between each.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,join,com.google.common.collect.FluentIterable:join(com.google.common.base.Joiner),819,821,"/**
* Joins elements of this collection using the specified Joiner.
* @param joiner join strategy to apply
*/","* Returns a {@link String} containing all of the elements of this fluent iterable joined with
   * {@code joiner}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code joiner.join(stream.iterator())}, or, if you are not
   * using any optional {@code Joiner} features, {@code
   * stream.collect(Collectors.joining(delimiter)}.
   *
   * @since 18.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,simplifyPath,com.google.common.io.Files:simplifyPath(java.lang.String),734,778,"/**
* Simplifies a Unix-style file path by resolving ., .., and //.
* @param pathname the path to simplify
* @return simplified path as a string or ""."" for an empty input
*/","* Returns the lexically cleaned form of the path name, <i>usually</i> (but not always) equivalent
   * to the original. The following heuristics are used:
   *
   * <ul>
   *   <li>empty string becomes .
   *   <li>. stays as .
   *   <li>fold out ./
   *   <li>fold out ../ when possible
   *   <li>collapse multiple slashes
   *   <li>delete trailing slashes (unless the path is just ""/"")
   * </ul>
   *
   * <p>These heuristics do not always match the behavior of the filesystem. In particular, consider
   * the path {@code a/../b}, which {@code simplifyPath} will change to {@code b}. If {@code a} is a
   * symlink to {@code x}, {@code a/../b} may refer to a sibling of {@code x}, rather than the
   * sibling of {@code a} referred to by {@code b}.
   *
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,toString,com.google.common.reflect.Types$ParameterizedTypeImpl:toString(),281,293,"/**
* Returns a string representation of the type.
* @return formatted type name with owner and generic arguments
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/thirdparty/publicsuffix/TrieParser.java,doParseTrieToBuilder,"com.google.thirdparty.publicsuffix.TrieParser:doParseTrieToBuilder(java.util.Deque,java.lang.CharSequence,int,com.google.common.collect.ImmutableMap$Builder)",64,114,"/**
* Parses trie to builder, recursively processing encoded string and populating suffix map.
* @param stack Deque for building domain strings
* @param encoded encoded trie string
* @param start starting index in the encoded string
* @param builder map builder for public suffix entries
* @return number of characters processed
*/","* Parses a trie node and returns the number of characters consumed.
   *
   * @param stack The prefixes that precede the characters represented by this node. Each entry of
   *     the stack is in reverse order.
   * @param encoded The serialized trie.
   * @param start An index in the encoded serialized trie to begin reading characters from.
   * @param builder A map builder to which all entries will be added.
   * @return The number of characters consumed from {@code encoded}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,makeMap,com.google.common.collect.MapMaker:makeMap(),283,288,"/**
* Creates a concurrent map instance using either the default ConcurrentHashMap or a custom implementation.
* @return ConcurrentMap instance
*/","* Builds a thread-safe map. This method does not alter the state of this {@code MapMaker}
   * instance, so it can be invoked again to create multiple independent maps.
   *
   * <p>The bulk operations {@code putAll}, {@code equals}, and {@code clear} are not guaranteed to
   * be performed atomically on the returned map. Additionally, {@code size} and {@code
   * containsValue} are implemented as bulk read operations, and thus may fail to observe concurrent
   * writes.
   *
   * @return a serializable concurrent map having the requested features",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,<init>,com.google.common.collect.Interners$InternerImpl:<init>(com.google.common.collect.MapMaker),123,126,"/**
* Initializes internal map with dummy values using provided MapMaker configuration.
* @param mapMaker configuration for key equivalence and other internal map parameters
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,transformAndConcat,com.google.common.collect.FluentIterable:transformAndConcat(com.google.common.base.Function),497,500,"/**
* Concatenates iterables resulting from transforming input iterable using the given function.
* @param function transformation function for each element in the input iterable
*/","* Applies {@code function} to each element of this fluent iterable and returns a fluent iterable
   * with the concatenated combination of results. {@code function} returns an Iterable of results.
   *
   * <p>The returned fluent iterable's iterator supports {@code remove()} if this function-returned
   * iterables' iterator does. After a successful {@code remove()} call, the returned fluent
   * iterable no longer contains the corresponding element.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#flatMap} (using a function that produces
   * streams, not iterables).
   *
   * @since 13.0 (required {@code Function<E, Iterable<T>>} until 14.0)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,com.google.common.collect.Iterables:concat(java.lang.Iterable),483,486,"/**
* Concatenates multiple iterables into a single iterable.
* @param inputs variable-length parameter list of iterables to concatenate
*/","* Combines multiple iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements of each iterable in {@code inputs}. The input iterators are not polled
   * until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Streams.concat(...)}.
   *
   * @throws NullPointerException if any of the provided iterables is null",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,"com.google.common.util.concurrent.AbstractFuture:get(long,java.util.concurrent.TimeUnit)",233,239,"/**
* Retrieves a value with specified timeout and time unit.
* @param timeout maximum wait duration in specified time unit
* @param unit time unit for the timeout (e.g. TimeUnit.SECONDS)
* @throws InterruptedException if interrupted while waiting
* @throws TimeoutException if operation timed out
* @throws ExecutionException if underlying execution failed","* {@inheritDoc}
   *
   * <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the
   * current thread is interrupted during the call, even if the value is already available.
   *
   * @throws CancellationException {@inheritDoc}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,addNodeInternal,com.google.common.graph.StandardMutableValueGraph:addNodeInternal(java.lang.Object),78,83,"/**
* Adds a new node to the graph and returns its associated connections.
* @param node unique node identifier
*/","* Adds {@code node} to the graph and returns the associated {@link GraphConnections}.
   *
   * @throws IllegalStateException if {@code node} is already present",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterIf,"com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",699,701,"/**
* Enters a guarded region with specified duration.
* @param guard Guard object
* @param time duration in nanoseconds
*/","* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the
   * lock, but does not wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,valuesSpliterator,com.google.common.collect.ArrayTable:valuesSpliterator(),801,804,"/**
* Returns an indexed spliterator for iterable values.
* @return Spliterator of nullable values with ordered indexing
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,equals,com.google.common.primitives.ImmutableDoubleArray$AsList:equals(java.lang.Object),530,552,"/**
* Compares the AsList object with another Object.
* @param object Object to compare, must be an instance of List
* @return true if equal, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,equals,com.google.common.primitives.ImmutableIntArray$AsList:equals(java.lang.Object),525,547,"/**
* Compares the AsList instance with another object.
* @param object object to compare with
* @return true if objects are equal, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,equals,com.google.common.primitives.ImmutableLongArray$AsList:equals(java.lang.Object),527,549,"/**
* Compares two AsList instances based on their backing List and parent data.
* @param object Object to compare with
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat$1:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
* Converts the given string to the specified case format.
* @param format CaseFormat enum value
* @param s input string to convert
*/",Enum values can override for performance reasons.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat$2:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
* Converts a string to the specified case format.
* @param format CaseFormat enum value
* @param s input string to convert
*/",Enum values can override for performance reasons.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat$5:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
* Converts a string to the specified case format.
* @param format CaseFormat enum value
* @param s input string
*/",Enum values can override for performance reasons.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,to,"com.google.common.base.CaseFormat:to(com.google.common.base.CaseFormat,java.lang.String)",129,133,"/**
* Converts string to specified case format.
* @param format target case format
* @param str input string
* @return converted string or original if format is default
*/","* Converts the specified {@code String str} from this format to the specified {@code format}. A
   * ""best effort"" approach is taken; if {@code str} does not conform to the assumed format, then
   * the behavior of this method is undefined but we make a reasonable effort at converting anyway.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesNoneOf,com.google.common.base.CharMatcher:matchesNoneOf(java.lang.CharSequence),530,532,"/**
* Checks if given CharSequence does not match any pattern.
* @return true if no match found, false otherwise
*/","* Returns {@code true} if a character sequence contains no matching BMP characters. Equivalent to
   * {@code !matchesAnyOf(sequence)}.
   *
   * <p>The default implementation iterates over the sequence, invoking {@link #matches} for each
   * character, until this returns {@code true} or the end is reached.
   *
   * @param sequence the character sequence to examine, possibly empty
   * @return {@code true} if this matcher matches no characters in the sequence, including when the
   *     sequence is empty",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,removeFrom,com.google.common.base.CharMatcher:removeFrom(java.lang.CharSequence),618,645,"/**
* Removes all occurrences of a specified character from the given sequence.
* @param sequence input CharSequence
* @return modified string with characters removed or original string if none found
*/","* Returns a string containing all non-matching characters of a character sequence, in order. For
   * example:
   *
   * {@snippet :
   * CharMatcher.is('a').removeFrom(""bazaar"")
   * }
   *
   * ... returns {@code ""bzr""}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,replaceFrom,"com.google.common.base.CharMatcher:replaceFrom(java.lang.CharSequence,char)",680,694,"/**
* Replaces occurrences of a character in a string with a specified replacement.
* @param sequence input string-like object
* @param replacement the character to replace
* @return modified string or original if not found
*/","* Returns a string copy of the input character sequence, with each matching BMP character
   * replaced by a given replacement character. For example:
   *
   * {@snippet :
   * CharMatcher.is('a').replaceFrom(""radar"", 'o')
   * }
   *
   * ... returns {@code ""rodor""}.
   *
   * <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching
   * character, then iterates the remainder of the sequence calling {@link #matches(char)} for each
   * character.
   *
   * @param sequence the character sequence to replace matching characters in
   * @param replacement the character to append to the result string in place of each matching
   *     character in {@code sequence}
   * @return the new string",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeToken,com.google.common.net.MediaType$Tokenizer:consumeToken(com.google.common.base.CharMatcher),1160,1165,"/**
* Consumes and returns a token matching the specified pattern.
* @param matcher CharMatcher to determine token boundaries
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getEmbeddedIPv4ClientAddress,com.google.common.net.InetAddresses:getEmbeddedIPv4ClientAddress(java.net.Inet6Address),918,932,"/**
* Resolves the embedded IPv4 client address for a given IPv6 address.
* @param ip IPv6 address to resolve
* @return Inet4Address object or throws exception if not found
*/","* Examines the Inet6Address to extract the embedded IPv4 client address if the InetAddress is an
   * IPv6 address of one of the specified address types that contain an embedded IPv4 address.
   *
   * <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial
   * spoofability. With other transition addresses spoofing involves (at least) infection of one's
   * BGP routing table.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 client address
   * @return {@link Inet4Address} of embedded IPv4 client address
   * @throws IllegalArgumentException if the argument does not have a valid embedded IPv4 address",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putString,"com.google.common.hash.AbstractHasher:putString(java.lang.CharSequence,java.nio.charset.Charset)",57,61,"/**
* Converts a CharSequence to bytes using the specified charset and adds it to the hasher.
* @param charSequence input string sequence
* @param charset character encoding scheme
* @return this Hasher instance (for method chaining)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,com.google.common.hash.Hasher:putBytes(byte[]),62,64,"/**
* Adds byte array to hasher.
* @param bytes input data to hash
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,"com.google.common.hash.AbstractCompositeHashFunction$1:putBytes(byte[],int,int)",66,68,"/**
* Updates hasher with specified byte array slice.
* @param bytes input byte array
* @param off starting offset in array
* @param len length of array slice to process
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashBytes,"com.google.common.hash.AbstractHashFunction:hashBytes(byte[],int,int)",64,68,"/**
* Computes a hash code for the specified byte array segment.
* @param input byte array to process
* @param off starting offset within the array
* @param len length of the segment
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingInputStream.java,read,"com.google.common.hash.HashingInputStream:read(byte[],int,int)",64,72,"/**
* Reads bytes from input and updates hash with the read data.
* @param bytes buffer to store read data
* @param off offset in the buffer where data should be written
* @param len number of bytes to read
* @return number of bytes read, or -1 if end-of-input reached
*/","* Reads the specified bytes of data from the underlying input stream and updates the hasher with
   * the bytes read.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingOutputStream.java,write,"com.google.common.hash.HashingOutputStream:write(byte[],int,int)",55,59,"/**
* Writes specified bytes to output stream and updates hash.
* @param bytes byte array to write
* @param off offset within the byte array to start writing from
* @param len number of bytes to write
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,readFully,"com.google.common.io.ByteStreams:readFully(java.io.InputStream,byte[])",797,799,"/**
* Copies data from InputStream to specified byte array.
* @param in input stream
* @param b target byte array
*/","* Attempts to read enough bytes from the stream to fill the given byte array, with the same
   * behavior as {@link DataInput#readFully(byte[])}. Does not close the stream.
   *
   * @param in the input stream to read from.
   * @param b the buffer into which the data is read.
   * @throws EOFException if this stream reaches the end before reading all the bytes.
   * @throws IOException if an I/O error occurs.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readFully,"com.google.common.io.LittleEndianDataInputStream:readFully(byte[],int,int)",68,71,"/**
* Reads fully into provided byte array.
* @param b the byte array to fill
* @param off starting offset in the array
* @param len number of bytes to read
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,rotate,"com.google.common.primitives.Booleans:rotate(boolean[],int)",574,576,"/**
* Rotates elements in the given boolean array by specified distance.
* @param array boolean array to be rotated
* @param distance number of positions to shift elements
*/","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Booleans.asList(array),
   * distance)}, but is somewhat faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,rotate,"com.google.common.primitives.Bytes:rotate(byte[],int)",425,427,"/**
* Rotates elements in a byte array by specified distance.
* @param array byte array to be rotated
* @param distance number of positions to shift elements
*/","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array),
   * distance)}, but is somewhat faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,sortDescending,com.google.common.primitives.SignedBytes:sortDescending(byte[]),200,203,"/**
* Sorts an array of bytes in descending order.
*/","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,sortDescending,com.google.common.primitives.Chars:sortDescending(char[]),456,459,"/**
* Sorts an array of characters in descending order.
* @param array the input character array
*/","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,rotate,"com.google.common.primitives.Chars:rotate(char[],int)",515,517,"/**
* Rotates characters in the given array by the specified distance.
* @param array input character array to be rotated
* @param distance number of positions to shift elements
*/","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Chars.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,sortDescending,com.google.common.primitives.Doubles:sortDescending(double[]),427,430,"/**
* Sorts an array of doubles in descending order.
* @param array input array to be sorted
*/","* Sorts the elements of {@code array} in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,rotate,"com.google.common.primitives.Doubles:rotate(double[],int)",489,491,"/**
* Rotates elements in the given array by the specified distance.
* @param array input array to be rotated
* @param distance number of positions to shift elements
*/","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,sortDescending,com.google.common.primitives.Floats:sortDescending(float[]),424,427,"/**
* Sorts an array of floats in descending order.
* @param array input float array to be sorted
*/","* Sorts the elements of {@code array} in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,rotate,"com.google.common.primitives.Floats:rotate(float[],int)",486,488,"/**
* Rotates elements in the given array by the specified distance.
* @param array input array to be rotated
* @param distance number of positions to shift each element
*/","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Floats.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,sortDescending,com.google.common.primitives.Ints:sortDescending(int[]),489,492,"/**
* Sorts an integer array in descending order.
* @param array input array to be sorted
*/","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,rotate,"com.google.common.primitives.Ints:rotate(int[],int)",548,550,"/**
* Rotates elements in an integer array by given distance.
* @param array input array to be rotated
* @param distance number of positions to shift elements
*/","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Ints.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,sortDescending,com.google.common.primitives.Longs:sortDescending(long[]),567,570,"/**
* Sorts an array of long integers in descending order.
*/","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,rotate,"com.google.common.primitives.Longs:rotate(long[],int)",626,628,"/**
* Rotates elements in the given array by specified distance.
* @param array input array
* @param distance rotation distance
*/","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Longs.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,sortDescending,com.google.common.primitives.Shorts:sortDescending(short[]),479,482,"/**
* Sorts an array of shorts in descending order.
* @param array input array to be sorted
*/","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,rotate,"com.google.common.primitives.Shorts:rotate(short[],int)",538,540,"/**
 * Rotates the given short array by the specified distance.
 * @param array the input array to be rotated
 * @param distance the number of positions to shift elements
 */","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Shorts.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,delegate,com.google.common.collect.ForwardingCollection:delegate(),56,57,"/**
* Returns a collection of elements to be processed by this container.
* @return Collection of elements, never null
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,withKeyValueSeparator,com.google.common.base.Splitter:withKeyValueSeparator(java.lang.String),432,434,"/**
 * Configures key-value splitter with a custom separator.
 * @param separator string to use as separator in split operation
 */","* Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries
   * into keys and values using the specified separator.
   *
   * @since 10.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,com.google.common.util.concurrent.RateLimiter:create(double),117,132,"/**
* Creates a RateLimiter with specified permits per second.
* @param permitsPerSecond rate limit in requests per second
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,long,java.util.concurrent.TimeUnit)",193,198,"/**
* Creates a RateLimiter with specified permits per second and warm-up period.
* @param permitsPerSecond rate limit in units of {@code unit}
* @param warmupPeriod initial warm-up duration
* @param unit time unit for permit rate (e.g. SECONDS, MILLISECONDS)
*/","* Creates a {@code RateLimiter} with the specified stable throughput, given as ""permits per
   * second"" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>,
   * during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum
   * rate at the end of the period (as long as there are enough requests to saturate it). Similarly,
   * if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it
   * will gradually return to its ""cold"" state, i.e. it will go through the same warming up process
   * as when it was first created.
   *
   * <p>The returned {@code RateLimiter} is intended for cases where the resource that actually
   * fulfills the requests (e.g., a remote server) needs ""warmup"" time, rather than being
   * immediately accessed at the stable (maximum) rate.
   *
   * <p>The returned {@code RateLimiter} starts in a ""cold"" state (i.e. the warmup period will
   * follow), and if it is left unused for long enough, it will return to that state.
   *
   * @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many
   *     permits become available per second
   * @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate,
   *     before reaching its stable (maximum) rate
   * @param unit the time unit of the warmupPeriod argument
   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code
   *     warmupPeriod} is negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,writeReplace,com.google.common.cache.LocalCache$LocalLoadingCache:writeReplace(),4979,4982,"/**
* Returns a proxy object for serializing and deserializing local cache data.
* @return LoadingSerializationProxy instance containing cached data.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,keys,com.google.common.collect.Multimaps$UnmodifiableMultimap:keys(),732,739,"/**
* Returns an unmodifiable multiset of unique keys from the delegate.
* @return Unmodifiable Multiset object or null if not initialized
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,unmodifiableSortedMultiset,com.google.common.collect.Multisets:unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset),244,248,"/**
* Returns an unmodifiable view of the given sorted multiset.
* @param sortedMultiset original sorted multiset to wrap
*/","* Returns an unmodifiable view of the specified sorted multiset. Query operations on the returned
   * multiset ""read through"" to the specified multiset, and attempts to modify the returned multiset
   * result in an {@link UnsupportedOperationException}.
   *
   * <p>The returned multiset will be serializable if the specified multiset is serializable.
   *
   * @param sortedMultiset the sorted multiset for which an unmodifiable view is to be generated
   * @return an unmodifiable view of the multiset
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,descendingMultiset,com.google.common.collect.UnmodifiableSortedMultiset:descendingMultiset(),66,75,"/**
* Creates or returns a read-only view of the multiset in descending order.
* @return UnmodifiableSortedMultiset object
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,get,com.google.common.collect.FilteredKeyListMultimap:get(java.lang.Object),41,44,"/**
* Retrieves list of values associated with the given key.
* @param key unique identifier or key for lookup
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,get,com.google.common.collect.FilteredKeySetMultimap:get(java.lang.Object),43,46,"/**
* Retrieves a set of associated values by key.
* @param key unique identifier or key
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,com.google.common.collect.Sets$DescendingSet:<init>(java.util.NavigableSet),2151,2153,"/**
* Initializes a new instance with a sorted set in ascending order.
* @param forward NavigableSet containing elements to be mirrored
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingSet,com.google.common.collect.Sets$UnmodifiableNavigableSet:descendingSet(),2027,2035,"/**
* Returns an unmodifiable NavigableSet view of the elements in reverse order.
* @return UnmodifiableNavigableSet containing elements or null if not initialized
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,unmodifiableNavigableSet,com.google.common.collect.Sets:unmodifiableNavigableSet(java.util.NavigableSet),1950,1956,"/**
* Wraps a navigable set in an unmodifiable interface.
* @param set original navigable set
*/","* Returns an unmodifiable view of the specified navigable set. This method allows modules to
   * provide users with ""read-only"" access to internal navigable sets. Query operations on the
   * returned set ""read through"" to the specified set, and attempts to modify the returned set,
   * whether direct or via its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned navigable set will be serializable if the specified navigable set is
   * serializable.
   *
   * <p><b>Java 8+ users and later:</b> Prefer {@link Collections#unmodifiableNavigableSet}.
   *
   * @param set the navigable set for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified navigable set
   * @since 12.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,entries,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:entries(),843,846,"/**
* Returns an unmodifiable set of key-value entry pairs.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableEntries,com.google.common.collect.Multimaps:unmodifiableEntries(java.util.Collection),1058,1064,"/**
* Returns an unmodifiable collection of map entries.
* @param entries input collection of entries
*/","* Returns an unmodifiable view of the specified collection of entries. The {@link Entry#setValue}
   * operation throws an {@link UnsupportedOperationException}. If the specified collection is a
   * {@code Set}, the returned collection is also a {@code Set}.
   *
   * @param entries the entries for which to return an unmodifiable view
   * @return an unmodifiable view of the entries",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,writeReplace,com.google.common.collect.MapMakerInternalMap:writeReplace(),2791,2799,"/**
* Returns a serialization proxy for the current object.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",3612,3620,"/**
* Returns a sub-map of the key-value pairs in this map.
* @param fromKey start key
* @param fromInclusive whether to include the start key
* @param toKey end key
* @param toInclusive whether to include the end key
* @return NavigableMap with specified bounds or null if empty",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:headMap(java.lang.Object,boolean)",3627,3630,"/**
* Returns a map of key-value pairs up to, but not including, the specified key.
* @param toKey the boundary key
* @param inclusive whether to include the boundary key in the result
* @return a read-only NavigableMap containing entries up to 'toKey'",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:tailMap(java.lang.Object,boolean)",3637,3640,"/**
* Returns a navigable map containing entries starting from the specified key.
* @param fromKey key to start the map from
* @param inclusive whether to include the specified key in the result
* @return NavigableMap object or null if no entries found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableSortedSetMultimap,com.google.common.collect.Multimaps:unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap),974,980,"/**
* Returns an unmodifiable view of the specified sorted set multimap.
* @param delegate original mutable sorted set multimap
*/","* Returns an unmodifiable view of the specified {@code SortedSetMultimap}. Query operations on
   * the returned multimap ""read through"" to the specified multimap, and attempts to modify the
   * returned multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,schedule,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",549,555,"/**
* Schedules a Runnable command to execute after a specified delay.
* @param command the task to be executed
* @param delay time before execution in units of {@code unit}
* @param unit time unit for the delay (e.g. TimeUnit.SECONDS)
* @return ListenableScheduledFuture representing the scheduled task",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,schedule,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",557,563,"/**
* Schedules a callable to run after a specified delay.
* @param callable the operation to execute
* @param delay time until execution in specified units
* @param unit time unit for delay (e.g. seconds, milliseconds)
* @return ListenableScheduledFuture representing scheduled task",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,scheduleAtFixedRate,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",565,571,"/**
* Schedules a fixed-rate execution of the provided command.
* @param command Runnable task to execute at regular intervals
* @param initialDelay delay before first execution in milliseconds
* @param period subsequent execution interval in milliseconds
* @param unit time unit for period (e.g. TimeUnit.MILLISECONDS)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,scheduleWithFixedDelay,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",573,580,"/**
* Schedules a command to run with fixed delays between executions.
* @param command Runnable task to execute
* @param initialDelay initial delay before first execution
* @param delay subsequent delay between executions
* @param unit time unit for delay (e.g. seconds, milliseconds)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,eventuallyClosing,"com.google.common.util.concurrent.ClosingFuture:eventuallyClosing(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.Executor)",475,493,"/**
* Wraps a ListenableFuture with eventual auto-closing functionality.
* @param future the original future to be wrapped
* @param closingExecutor executor for closing resources
* @return ClosingFuture object or null if not found
*/","* Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}.
   *
   * <p>If {@code future} succeeds, its value will be closed (using {@code closingExecutor)}) when
   * the pipeline is done, even if the pipeline is canceled or fails.
   *
   * <p>Cancelling the pipeline will not cancel {@code future}, so that the pipeline can access its
   * value in order to close it.
   *
   * @param future the future to create the {@code ClosingFuture} from. For discussion of the
   *     future's result type {@code C}, see {@link DeferredCloser#eventuallyClose(Object,
   *     Executor)}.
   * @param closingExecutor the future's result will be closed on this executor
   * @deprecated Creating {@link Future}s of closeable types is dangerous in general because the
   *     underlying value may never be closed if the {@link Future} is canceled after its operation
   *     begins. Consider replacing code that creates {@link ListenableFuture}s of closeable types,
   *     including those that pass them to this method, with {@link #submit(ClosingCallable,
   *     Executor)} in order to ensure that resources do not leak. Or, to start a pipeline with a
   *     {@link ListenableFuture} that doesn't create values that should be closed, use {@link
   *     ClosingFuture#from}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,addCallback,"com.google.common.util.concurrent.FluentFuture:addCallback(com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)",415,417,"/**
* Adds a callback to be executed when this future completes.
* @param callback callback to execute
* @param executor executor to use for running the callback
*/","* Registers separate success and failure callbacks to be run when this {@code Future}'s
   * computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the
   * computation is already complete, immediately.
   *
   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of
   * callbacks, but any callback added through this method is guaranteed to be called once the
   * computation is complete.
   *
   * <p>Example:
   *
   * {@snippet :
   * future.addCallback(
   *     new FutureCallback<QueryResult>() {
   *       public void onSuccess(QueryResult result) {
   *         storeInCache(result);
   *       }
   *       public void onFailure(Throwable t) {
   *         reportError(t);
   *       }
   *     }, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight callbacks passed to this method.
   *
   * <p>For a more general interface to attach a completion listener, see {@link #addListener}.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#whenComplete} and
   * {@link java.util.concurrent.CompletableFuture#whenCompleteAsync}. It also serves the use case
   * of {@link java.util.concurrent.CompletableFuture#thenAccept} and {@link
   * java.util.concurrent.CompletableFuture#thenAcceptAsync}.
   *
   * @param callback The callback to invoke when this {@code Future} is completed.
   * @param executor The executor to run {@code callback} when the future completes.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$LocalLoadingCache:<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)",4938,4941,"/**
* Constructs a local loading cache with the specified builder and loader.
* @param builder cache configuration
* @param loader function to load values from underlying storage
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LocalManualCache:<init>(com.google.common.cache.CacheBuilder),4838,4840,"/**
* Constructs LocalManualCache instance using provided CacheBuilder.
* @param builder CacheBuilder instance to configure cache
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractValueGraph$1:inDegree(java.lang.Object),147,150,"/**
* Calculates the in-degree of a graph node.
* @param node graph node to calculate in-degree for
* @return number of incoming edges (directed) or total neighbors (undirected)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractValueGraph$1:outDegree(java.lang.Object),152,155,"/**
* Calculates the out-degree of a graph node.
* @param node the node to calculate out-degree for
* @return number of outgoing edges (or zero if undirected)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,create,"com.google.common.collect.EnumBiMap:create(java.lang.Class,java.lang.Class)",69,72,"/**
* Creates a bi-directional enum map between two types.
* @param keyType the type of enums to use as keys
* @param valueType the type of enums to use as values
*/","* Returns a new, empty {@code EnumBiMap} using the specified key and value types.
   *
   * @param keyType the key type
   * @param valueType the value type",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,create,com.google.common.collect.EnumHashBiMap:create(java.lang.Class),56,59,"/**
* Creates an EnumHashBiMap instance with the specified enum type as keys.
* @param keyType the enum class to use as keys
*/","* Returns a new, empty {@code EnumHashBiMap} using the specified key type.
   *
   * @param keyType the key type",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,create,com.google.common.collect.TreeMultiset:create(java.lang.Iterable),110,115,"/**
* Creates a TreeMultiset from an iterable of comparable elements.
* @param elements Iterable of elements to populate the multiset with
*/","* Creates an empty multiset containing the given initial elements, sorted according to the
   * elements' natural order.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * <p>The type specification is {@code <E extends Comparable>}, instead of the more specific
   * {@code <E extends Comparable<? super E>>}, to support classes defined without generics.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,<init>,com.google.common.collect.ImmutableSortedMultiset$Builder:<init>(java.util.Comparator),461,463,"/**
* Initializes a new Builder with a custom comparator.
* @param comparator comparator to order elements in the multiset
*/","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableSortedMultiset#orderedBy(Comparator)}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putAll,com.google.common.collect.EnumBiMap:putAll(java.util.Map),187,192,"/**
* Adds all key-value pairs from the specified map to this map.
* @param map source map containing entries to add
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putAll,com.google.common.collect.EnumHashBiMap:putAll(java.util.Map),187,192,"/**
* Adds all entries from the provided map to this map.
* @param map Map containing key-value pairs to add
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,replaceValues,"com.google.common.collect.AbstractSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",118,122,"/**
* Replaces values associated with a given key in the map.
* @param key unique identifier for replacement
* @param values new values to associate with the key
*/","* Stores a collection of values with the same key, replacing any existing values for that key.
   * The returned collection is immutable.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SetMultimap.java,replaceValues,"com.google.common.collect.SetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",86,88,"/**
* Replaces values in the set associated with the given key.
* @param key unique identifier of the set to modify
* @param values new values to store in the set
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}
   * interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,create,com.google.common.collect.HashMultiset:create(java.lang.Iterable),61,66,"/**
* Creates a HashMultiset from an iterable of elements.
* @param elements collection of elements to include in the multiset
* @return populated HashMultiset instance
*/","* Creates a new {@code HashMultiset} containing the specified elements.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,create,"com.google.common.collect.ArrayListMultimap:create(int,int)",95,98,"/**
* Creates a new ArrayListMultimap with specified key and value counts.
* @param expectedKeys total number of keys
* @param expectedValuesPerKey average values per key
*/","* Constructs an empty {@code ArrayListMultimap} with enough capacity to hold the specified
   * numbers of keys and values without resizing.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys(expectedKeys).arrayListValues(expectedValuesPerKey).build()}, which
   * provides more control over the underlying data structure.
   *
   * @param expectedKeys the expected number of distinct keys
   * @param expectedValuesPerKey the expected average number of values per key
   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is
   *     negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,<init>,com.google.common.collect.ArrayListMultimap:<init>(),114,116,"/**
* Initializes Multimap with default values per key.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,<init>,com.google.common.collect.ArrayListMultimap:<init>(com.google.common.collect.Multimap),124,131,"/**
* Copies an existing Multimap into a new instance.
* @param multimap original Multimap to copy from
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,create,"com.google.common.collect.HashMultimap:create(int,int)",84,87,"/**
* Creates a new HashMultimap with specified capacity.
* @param expectedKeys estimated number of unique keys
* @param expectedValuesPerKey estimated average values per key
*/","* Constructs an empty {@code HashMultimap} with enough capacity to hold the specified numbers of
   * keys and values without rehashing.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys(expectedKeys).hashSetValues(expectedValuesPerKey).build()}, which
   * provides more control over the underlying data structure.
   *
   * @param expectedKeys the expected number of distinct keys
   * @param expectedValuesPerKey the expected average number of values per key
   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is
   *     negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,<init>,com.google.common.collect.HashMultimap:<init>(),105,107,"/**
* Initializes a new instance with default values per key.
* @param initialCapacity initial capacity of the multimap
* @param valuesPerKey number of default values per key
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,create,com.google.common.collect.HashMultimap:create(com.google.common.collect.Multimap),100,103,"/**
* Creates a HashMultimap from an existing Multimap instance.
* @param multimap the original Multimap to clone
* @return a new HashMultimap with same key-value pairs as input
*/","* Constructs a {@code HashMultimap} with the same mappings as the specified multimap. If a
   * key-value mapping appears multiple times in the input multimap, it only appears once in the
   * constructed multimap.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().hashSetValues().build(multimap)}, which provides more control over
   * the underlying data structure.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,create,com.google.common.collect.LinkedListMultimap:create(int),163,166,"/**
* Creates a LinkedListMultimap with the specified expected key count.
* @param expectedKeys desired number of keys in the multimap
*/","* Constructs an empty {@code LinkedListMultimap} with enough capacity to hold the specified
   * number of keys without rehashing.
   *
   * @param expectedKeys the expected number of distinct keys
   * @throws IllegalArgumentException if {@code expectedKeys} is negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,<init>,com.google.common.collect.LinkedListMultimap:<init>(),180,182,"/**
* Constructs an empty multimap with initial capacity of 12.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,<init>,com.google.common.collect.LinkedListMultimap:<init>(com.google.common.collect.Multimap),188,191,"/**
* Constructs a new LinkedListMultimap from an existing Multimap.
* @param multimap existing Multimap to copy
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,create,com.google.common.collect.LinkedHashMultiset:create(java.lang.Iterable),69,74,"/**
* Creates a linked hash multiset from an iterable of elements.
* @param elements input collection of elements
* @return LinkedHashMultiset instance populated with unique elements and added duplicates
*/","* Creates a new {@code LinkedHashMultiset} containing the specified elements.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,create,com.google.common.collect.LinkedHashMultimap:create(),91,94,"/**
* Creates a new LinkedHashMultimap instance with default key and value set capacities.
*/","Creates a new, empty {@code LinkedHashMultimap} with the default initial capacities.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,create,"com.google.common.collect.LinkedHashMultimap:create(int,int)",105,109,"/**
* Creates a LinkedHashMultimap with estimated key and value capacities.
* @param expectedKeys number of unique keys
* @param expectedValuesPerKey average values per key
*/","* Constructs an empty {@code LinkedHashMultimap} with enough capacity to hold the specified
   * numbers of keys and values without rehashing.
   *
   * @param expectedKeys the expected number of distinct keys
   * @param expectedValuesPerKey the expected average number of values per key
   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is
   *     negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,<init>,com.google.common.graph.StandardMutableNetwork:<init>(com.google.common.graph.NetworkBuilder),47,49,"/**
* Constructs a standard mutable network using the provided builder.
* @param builder NetworkBuilder instance to configure the network
*/",Constructs a mutable graph with the properties specified in {@code builder}.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,<init>,com.google.common.graph.StandardMutableValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder),50,53,"/**
* Initializes a new graph with the specified builder settings.
* @param builder Graph builder instance
*/",Constructs a mutable graph with the properties specified in {@code builder}.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,put,com.google.common.collect.ImmutableTable$Builder:put(com.google.common.collect.Table$Cell),230,243,"/**
* Adds a cell to the table, either as an immutable object or by individual key-value pairs.
* @param cell Cell object (may be immutable)
*/","* Adds the given {@code cell} to the table, making it immutable if necessary. Duplicate key
     * pairs are not allowed and will cause {@link #build} to fail.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,put,com.google.common.collect.ImmutableBiMap$Builder:put(java.util.Map$Entry),368,373,"/**
* Adds an entry to the map and returns this builder instance.
* @param entry Map entry to add
*/","* Adds the given {@code entry} to the bimap. Duplicate keys or values are not allowed, and will
     * cause {@link #build} to fail.
     *
     * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,putAll,com.google.common.collect.ImmutableMap$Builder:putAll(java.lang.Iterable),492,501,"/**
* Adds all entries from the given iterable to the map.
* @param entries collection of key-value pairs to add
* @return this Builder instance for method chaining
*/","* Adds all of the given entries to the built map. If the same key is put more than once, {@link
     * #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for
     * that key.
     *
     * @throws NullPointerException if any key, value, or entry is null
     * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,put,com.google.common.collect.ImmutableSortedMap$Builder:put(java.util.Map$Entry),642,647,"/**
* Adds an entry to the map and returns the builder instance.
*/","* Adds the given {@code entry} to the map, making it immutable if necessary. Duplicate keys,
     * according to the comparator (which might be the keys' natural order), are not allowed, and
     * will cause {@link #build} to fail.
     *
     * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingSet,com.google.common.collect.Sets$FilteredNavigableSet:descendingSet(),1386,1389,"/**
* Returns a descending set view of this multiset.
* @return NavigableSet containing elements in reverse order",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets$FilteredNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",1402,1410,"/**
* Returns a subset of the collection within the specified range.
* @param fromElement start element (inclusive/exclusive)
* @param fromInclusive true if inclusive
* @param toElement end element (inclusive/exclusive)
* @param toInclusive true if inclusive
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,headSet,"com.google.common.collect.Sets$FilteredNavigableSet:headSet(java.lang.Object,boolean)",1412,1415,"/**
* Returns a view of elements in this set strictly less than (or equal to)
* the specified toElement. The returned set is a NavigableSet.
* @param toElement element that serves as threshold for headSet
* @param inclusive true if toElement should be included, false otherwise",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,tailSet,"com.google.common.collect.Sets$FilteredNavigableSet:tailSet(java.lang.Object,boolean)",1417,1420,"/**
* Returns a navigable set of elements greater than or equal to the specified element.
* @param fromElement the minimum element in the set
* @param inclusive whether to include the fromElement in the result
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,filterCollection,"com.google.common.collect.FilteredEntryMultimap:filterCollection(java.util.Collection,com.google.common.base.Predicate)",92,99,"/**
* Filters a collection based on the provided predicate.
* @param collection input collection to filter
* @param predicate condition to apply for filtering
* @return filtered collection of elements that match the predicate
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createKeySet,com.google.common.collect.FilteredKeyMultimap:createKeySet(),98,101,"/**
 * Creates a filtered set of keys based on the provided predicate.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryMap:<init>(java.util.Map,com.google.common.base.Predicate)",3010,3013,"/**
* Filters entries in a map based on the provided predicate.
* @param unfiltered original map
* @param entryPredicate filter criteria for entries
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createEntrySet,com.google.common.collect.Maps$FilteredKeyMap:createEntrySet(),2983,2986,"/**
* Creates an entry set filtered by the provided predicate.
* @return A set of entries that match the filter criteria
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createKeySet,com.google.common.collect.Maps$FilteredKeyMap:createKeySet(),2988,2991,"/**
* Creates a filtered set of keys based on provided predicate.
* @return Set of valid keys or empty set if none match",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,createElementSet,com.google.common.collect.Multisets$FilteredMultiset:createElementSet(),343,346,"/**
* Filters unfiltered element set using predicate and returns filtered result. 
* @return Set of elements that match predicate criteria",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,createEntrySet,com.google.common.collect.Multisets$FilteredMultiset:createEntrySet(),353,356,"/**
* Filters unfiltered entry set based on predicate.
* @return filtered Entry set containing only matching entries.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgesConnecting,"com.google.common.graph.AbstractNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",172,182,"/**
* Returns a set of edges connecting two nodes.
* @param nodeU first node
* @param nodeV second node
* @return Set of edge types or empty set if invalid node pair
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,put,"com.google.common.collect.CompactHashMap:put(java.lang.Object,java.lang.Object)",334,398,"/**
* Inserts or updates a mapping from the specified key to the specified value.
* @param key unique identifier for the entry
* @param value associated value for the entry
* @return previous value associated with the key, or null if not present
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactLinkedHashMap:convertToHashFloodingResistantImplementation(),134,140,"/**
* Overrides hash flooding resistant implementation.
* @return A HashMap with existing data
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,add,com.google.common.collect.CompactHashSet:add(java.lang.Object),294,352,"/**
* Adds an entry to the table with hash-based collision resolution.
* @param object the entry to be added
* @return true if the entry was successfully added, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactLinkedHashSet:convertToHashFloodingResistantImplementation(),147,154,"/**
* Converts to a hash flooding resistant implementation.
* @return Set of elements or empty set if conversion fails
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyImmutableSetMultimap.java,<init>,com.google.common.collect.EmptyImmutableSetMultimap:<init>(),33,35,"/**
* Initializes an empty immutable set multimap.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,asMultimap,com.google.common.collect.ImmutableMap:asMultimap(),1116,1125,"/**
* Converts to a Set-based Multimap.
* @return ImmutableSetMultimap instance or creates one if not already built
*/","* Returns a multimap view of the map.
   *
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,build,com.google.common.collect.ImmutableSortedMap$Builder:build(),714,717,"/**
* Builds and returns an immutable sorted map.
*/","* Returns a newly-created immutable sorted map.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate keys. The {@code build()} method will soon be
     * deprecated.
     *
     * @throws IllegalArgumentException if any two keys are equal according to the comparator (which
     *     might be the keys' natural order)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,descendingMultiset,com.google.common.collect.ImmutableSortedMultiset:descendingMultiset(),338,348,"/**
* Returns a view of the multiset in descending order.
* @return ImmutableSortedMultiset instance or cached if already computed
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap$SubRangeMap:get(java.lang.Comparable),484,487,"/**
* Returns value associated with specified key from this map if it exists in current range, otherwise returns null.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,putAll,com.google.common.collect.ImmutableRangeMap$Builder:putAll(com.google.common.collect.RangeMap),133,139,"/**
* Copies all entries from a RangeMap to this builder.
* @param rangeMap map of ranges and values to copy
* @return this Builder instance, allowing method chaining
*/",Copies all associations from the specified range map into this builder.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,addAll,com.google.common.collect.ImmutableRangeSet$Builder:addAll(java.lang.Iterable),796,802,"/**
* Adds multiple ranges to the builder.
* @param ranges iterable of Range objects to be added
* @return this Builder instance for method chaining
*/","* Add all of the specified ranges to this builder. Adjacent ranges are permitted and will be
     * merged, but overlapping ranges will cause an exception when {@link #build()} is called.
     *
     * @throws IllegalArgumentException if any inserted ranges are empty
     * @since 21.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,size,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:size(),851,854,"/**
* Returns the number of entries in this iterator.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,add,com.google.common.collect.TreeRangeSet:add(com.google.common.collect.Range),177,222,"/**
* Adds a new range to the set of ranges, merging and coalescing with existing ranges as necessary.
* @param rangeToAdd the range to add (must not be empty)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,remove,com.google.common.collect.TreeRangeSet:remove(com.google.common.collect.Range),224,265,"/**
* Removes a specified range from the range set.
* @param rangeToRemove the range to be removed
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,containsKey,com.google.common.collect.TreeRangeMap$AsMapOfRanges:containsKey(java.lang.Object),356,359,"/**
* Checks if map contains a given key.
* @param key object to search for
* @return true if key exists, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,intersectRanges,com.google.common.collect.ImmutableRangeSet:intersectRanges(com.google.common.collect.Range),445,512,"/**
* Intersects the given range with a collection of ranges, returning an immutable list of intersecting sub-ranges.
* @param range Range to intersect with
*/","* Returns a list containing the nonempty intersections of {@code range} with the ranges in this
   * range set.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,create,"com.google.common.collect.ContiguousSet:create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)",62,95,"/**
* Creates a contiguous set of comparable elements within the specified range and domain.
* @param range the desired range of values
* @param domain the discrete domain that defines the set's bounds
* @return ContiguousSet containing the requested elements or an empty set if none exist
*/","* Returns a {@code ContiguousSet} containing the same values in the given domain {@linkplain
   * Range#contains contained} by the range.
   *
   * @throws IllegalArgumentException if neither range nor the domain has a lower bound, or if
   *     neither has an upper bound
   * @since 13.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:get(java.lang.Object),659,690,"/**
* Retrieves a value from the map using the provided key.
* @param key unique identifier or range of keys
* @return associated value or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,getEntry,com.google.common.collect.TreeRangeMap$SubRangeMap:getEntry(java.lang.Comparable),489,498,"/**
* Retrieves the entry for a given key within the sub-range.
* @param key unique key identifier
* @return Entry object with intersecting range and value, or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,subRangeMap,com.google.common.collect.TreeRangeMap$SubRangeMap:subRangeMap(com.google.common.collect.Range),586,593,"/**
* Returns a new RangeMap containing values within the intersection of the input range and this map's sub-range.
* @param range Range object defining the desired sub-range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:subMap(com.google.common.collect.Range),472,479,"/**
* Returns a navigable map of ranges for the given sub-window.
* @param subWindow Range object defining the desired subset
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,com.google.common.collect.TreeRangeSet$RangesByUpperBound:subMap(com.google.common.collect.Range),305,311,"/**
* Returns a sub-map of ranges by upper bound within the given window.
* @param window range to filter by
* @return NavigableMap or empty map if not connected
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,encloses,com.google.common.collect.TreeRangeSet$SubRangeSet:encloses(com.google.common.collect.Range),872,879,"/**
* Checks if the given range is enclosed by the tree's restriction and intersection.
* @param range Range object to check
* @return true if the range is enclosed, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subRangeSet,com.google.common.collect.TreeRangeSet$SubRangeSet:subRangeSet(com.google.common.collect.Range),917,926,"/**
* Computes the sub-range set of the current range, based on the given view.
* @param view Range object defining the sub-range criteria
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:subMap(com.google.common.collect.Range),704,711,"/**
* Returns a sub-map of NavigableMap within the given window range.
* @param window Range object defining the sub-map bounds
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,get,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:get(java.lang.Object),744,771,"/**
* Retrieves a range of values for the given key, intersecting with the restriction.
* @param key object to fetch range for
* @return Range object or null if not found or invalid key",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,intersects,com.google.common.collect.TreeRangeSet:intersects(com.google.common.collect.Range),133,146,"/**
* Checks if the given range intersects with any existing range in this collection.
* @param range Range to check for intersection
* @return true if range intersects, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,coalesce,"com.google.common.collect.TreeRangeMap:coalesce(com.google.common.collect.Range,java.lang.Object,java.util.Map$Entry)",173,181,"/**
* Coalesces a range with a matching value from the given entry.
* @param range the initial range
* @param value the value to match
* @param entry optional RangeMapEntry containing the key and value
* @return updated range or original range if no match found
*/","Returns the range that spans the given range and entry, if the entry can be coalesced.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,asSet,com.google.common.collect.ImmutableRangeSet:asSet(com.google.common.collect.DiscreteDomain),547,568,"/**
* Converts to an immutable sorted set of discrete values within a given domain.
* @param domain DiscreteDomain to constrain the set
*/","* Returns an {@link ImmutableSortedSet} containing the same values in the given domain
   * {@linkplain RangeSet#contains contained} by this range set.
   *
   * <p><b>Note:</b> {@code a.asSet(d).equals(b.asSet(d))} does not imply {@code a.equals(b)}! For
   * example, {@code a} and {@code b} could be {@code [2..4]} and {@code (1..5)}, or the empty
   * ranges {@code [3..3)} and {@code [4..4)}.
   *
   * <p><b>Warning:</b> Be extremely careful what you do with the {@code asSet} view of a large
   * range set (such as {@code ImmutableRangeSet.of(Range.greaterThan(0))}). Certain operations on
   * such a set can be performed efficiently, but others (such as {@link Set#hashCode} or {@link
   * Collections#frequency}) can cause major performance problems.
   *
   * <p>The returned set's {@link Object#toString} method returns a shorthand form of the set's
   * contents, such as {@code ""[1..100]}""}.
   *
   * @throws IllegalArgumentException if neither this range nor the domain has a lower bound, or if
   *     neither has an upper bound",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,range,com.google.common.collect.RegularContiguousSet:range(),211,214,"/**
* Returns a Range of type C spanning the entire domain.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putRangeMapEntry,"com.google.common.collect.TreeRangeMap:putRangeMapEntry(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object)",207,209,"/**
* Stores a range map entry with the given lower and upper bounds.
* @param lowerBound inclusive lower bound of the range
* @param upperBound exclusive upper bound of the range
* @param value associated value for this range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,newConnections,com.google.common.graph.StandardMutableNetwork:newConnections(),166,174,"/**
* Creates a new network connections instance based on graph type and parallel edge settings.
* @return NetworkConnections object with specified properties
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap$Itr:remove(),651,659,"/**
* Removes the entry at specified index and updates internal state.
* @throws ConcurrentModificationException if removed while iterating
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMap,com.google.common.collect.CollectCollectors$EnumMapAccumulator:toImmutableMap(),338,340,"/**
* Converts a regular map to an immutable map.
* @return an ImmutableMap instance or empty map if input is null
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,copyOfEnumMap,com.google.common.collect.ImmutableMap:copyOfEnumMap(java.util.EnumMap),733,741,"/**
* Copies an EnumMap into an immutable map.
* @param original the EnumMap to be copied
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,immutableEnumMap,com.google.common.collect.Maps:immutableEnumMap(java.util.Map),157,182,"/**
* Converts a map to an immutable enum map.
* @param map input map
* @return ImmutableEnumMap object or empty map if input is empty
*/","* Returns an immutable map instance containing the given entries. Internally, the returned map
   * will be backed by an {@link EnumMap}.
   *
   * <p>The iteration order of the returned map follows the enum's iteration order, not the order in
   * which the elements appear in the given map.
   *
   * @param map the map to make an immutable copy of
   * @return an immutable map containing those entries
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,rowMap,com.google.common.collect.ImmutableTable:rowMap(),380,381,"/**
* Returns an immutable map of rows to their corresponding column maps.
* @return map where keys are row identifiers and values are column maps
*/","* {@inheritDoc}
   *
   * <p>The value {@code Map<C, V>} instances in the returned map are {@link ImmutableMap} instances
   * as well.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,asDescendingMapOfRanges,com.google.common.collect.ImmutableRangeMap$2:asDescendingMapOfRanges(),317,325,"/**
* Converts this map to a descending map of ranges.
* @return a map where keys are sorted in descending order
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,subList,"com.google.common.collect.Lists$ReverseList:subList(int,int)",924,928,"/**
* Returns a sublist of elements within the specified range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List<T> subset or empty list if invalid indices
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,descendingIterator,com.google.common.collect.ImmutableSortedSet:descendingIterator(),845,847,"/**
 * Returns an iterator over the elements in this set in reverse order.
 * @return Descending iterator or null if empty
 */",* @since 12.0,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,readResolve,com.google.common.collect.ImmutableList$SerializedForm:readResolve(),736,738,"/**
* Creates a deep copy of the elements collection.
* @return copied Collection object
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,<init>,"com.google.common.reflect.Parameter:<init>(com.google.common.reflect.Invokable,int,com.google.common.reflect.TypeToken,java.lang.annotation.Annotation[],java.lang.Object)",49,60,"/**
* Initializes a Parameter instance with the specified details.
* @param declaration Invokable object being parameterized
* @param position index of this parameter
* @param type TypeToken describing the parameter's type
* @param annotations array of annotations on this parameter
* @param annotatedType optional additional type information
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,<init>,"com.google.common.reflect.Types$TypeVariableImpl:<init>(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])",401,406,"/**
* Creates a type variable implementation with specified declaration, name, and bounds.
* @param genericDeclaration the enclosing generic declaration
* @param name unique identifier for the type variable
* @param bounds array of types that this type variable can represent
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,build,com.google.common.collect.ImmutableList$Builder:build(),922,926,"/**
* Builds an immutable list from the current contents.
* @return ImmutableList of type E or null if contents are empty
*/",* Returns a newly-created {@code ImmutableList} based on the contents of the {@code Builder}.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,asImmutableList,com.google.common.collect.ImmutableList:asImmutableList(java.lang.Object[]),360,362,"/**
* Converts an array of objects to an immutable list.
* @param elements the input array
*/","* Views the array as an immutable list. Does not check for nulls; does not copy.
   *
   * <p>The array must be internally created.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:build(),969,984,"/**
* Builds an immutable set based on the deduplicated elements.
* @param distinct number of unique elements
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,build,com.google.common.collect.ImmutableSortedSet$Builder:build(),586,596,"/**
* Builds an ImmutableSortedSet instance from internal elements.
* @return ImmutableSortedSet containing deduplicated and sorted elements
*/","* Returns a newly-created {@code ImmutableSortedSet} based on the contents of the {@code
     * Builder} and its comparator.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,create,"com.google.common.collect.JdkBackedImmutableBiMap:create(int,java.util.Map$Entry[])",35,53,"/**
* Creates an immutable bi-map from an array of entries.
* @param n expected size of the map
* @param entryArray array of key-value pairs to populate the map
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,create,"com.google.common.collect.JdkBackedImmutableMap:create(int,java.util.Map$Entry[],boolean)",41,86,"/**
* Creates an immutable map from a sorted array of entries.
* @param n size of the input array
* @param entryArray array of key-value pairs to populate the map
* @param throwIfDuplicateKeys whether to throw an exception on duplicate keys
* @return ImmutableMap instance or null if duplicates are allowed and all values are deleted.","* Creates an {@code ImmutableMap} backed by a JDK HashMap. Used when probable hash flooding is
   * detected. This implementation may replace the entries in entryArray with its own entry objects
   * (though they will have the same key/value contents), and will take ownership of entryArray.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,subList,"com.google.common.collect.ImmutableList$ReverseImmutableList:subList(int,int)",674,678,"/**
* Returns a sublist of elements from the specified fromIndex to toIndex.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,subList,"com.google.common.collect.ImmutableList$SubList:subList(int,int)",496,500,"/**
* Returns a sublist of elements within the specified range.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,subRangeMap,com.google.common.collect.ImmutableRangeMap:subRangeMap(com.google.common.collect.Range),327,402,"/**
* Returns a sub-range map containing ranges and values that intersect with the given range.
* @param range the enclosing range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,getSubSet,"com.google.common.collect.RegularImmutableSortedSet:getSubSet(int,int)",289,298,"/**
* Retrieves a subset of the sorted set within specified index range.
* @param newFromIndex starting index (inclusive)
* @param newToIndex ending index (inclusive)
* @return RegularImmutableSortedSet object or empty set if invalid range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,findSuffixOfType,com.google.common.net.InternetDomainName:findSuffixOfType(com.google.common.base.Optional),213,239,"/**
* Finds the index of the first matching suffix type.
* @param desiredType Optional PublicSuffixType to match
*/","* Returns the index of the leftmost part of the suffix, or -1 if not found. Note that the value
   * defined as a suffix may not produce {@code true} results from {@link #isPublicSuffix()} or
   * {@link #isRegistrySuffix()} if the domain ends with an excluded domain pattern such as {@code
   * ""nhs.uk""}.
   *
   * <p>If a {@code desiredType} is specified, this method only finds suffixes of the given type.
   * Otherwise, it finds the first suffix of any type.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,fromEntries,"com.google.common.collect.ImmutableSortedMap:fromEntries(java.util.Comparator,boolean,java.util.Map$Entry[],int)",498,561,"/**
* Creates an immutable sorted map from an array of entries.
* @param comparator key comparison function
* @param sameComparator whether the comparator is the same as the one used to create this map
* @param entryArray array of entries to use in creating the map
* @return ImmutableSortedMap object
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSet,com.google.common.collect.CollectCollectors$EnumSetAccumulator:toImmutableSet(),133,140,"/**
* Converts a Set to an immutable version.
* @return ImmutableSet object or empty set if input was null
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOfEnumSet,com.google.common.collect.ImmutableSet:copyOfEnumSet(java.util.EnumSet),272,275,"/**
* Copies an EnumSet instance into an ImmutableEnumSet.
* @param enumSet the original EnumSet to copy
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,immutableEnumSet,com.google.common.collect.Sets:immutableEnumSet(java.lang.Iterable),121,141,"/**
* Creates an immutable set of enums from the given iterable.
* @param elements iterable containing enum values
*/","* Returns an immutable set instance containing the given enum elements. Internally, the returned
   * set will be backed by an {@link EnumSet}.
   *
   * <p>The iteration order of the returned set follows the enum's iteration order, not the order in
   * which the elements appear in the given collection.
   *
   * @param elements the elements, all of the same {@code enum} type, that the set should contain
   * @return an immutable set containing those elements, minus duplicates",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,readResolve,com.google.common.collect.ImmutableSet$SerializedForm:readResolve(),411,413,"/**
* Returns a shallow copy of the elements collection.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,createValues,com.google.common.collect.ImmutableTable:createValues(),323,324,"/**
 * Creates an immutable collection of values.
 * @return Collection of values, cannot be modified.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,equals,com.google.common.collect.RegularImmutableSortedSet:equals(java.lang.Object),170,205,"/**
* Compares this Set for equality with the given Object.
* @param object the object to compare with, or null
* @return true if equal, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,combine,com.google.common.collect.ImmutableSet$Builder:combine(com.google.common.collect.ImmutableSet$Builder),554,569,"/**
* Combines two builders, merging their internal state.
* @param other the builder to merge with
* @return this builder for chaining
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,iterator,com.google.common.graph.AbstractBaseGraph$2:iterator(),732,733,"/**
* Returns an unmodifiable iterator over elements in this collection.
* @return Iterator instance allowing iteration over elements
*/","* Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view.
     *
     * @since 20.0 (present with return type {@link Iterator} since 2.0)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,incidentEdgeIterator,com.google.common.graph.DirectedGraphConnections:incidentEdgeIterator(java.lang.Object),367,411,"/**
* Returns an iterator over incident edges of the node, including self-loops.
* @param thisNode current node
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,post,com.google.common.eventbus.EventBus:post(java.lang.Object),259,267,"/**
* Dispatches an event to subscribed listeners or posts a DeadEvent.
* @param event Event object to dispatch or post as DeadEvent if no listeners found
*/","* Posts an event to all registered subscribers. This method will return successfully after the
   * event has been posted to all subscribers, and regardless of any exceptions thrown by
   * subscribers.
   *
   * <p>If no subscribers have been subscribed for {@code event}'s class, and {@code event} is not
   * already a {@link DeadEvent}, it will be wrapped in a DeadEvent and reposted.
   *
   * @param event event to post.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,setValue,com.google.common.collect.MapMakerInternalMap$WriteThroughEntry:setValue(java.lang.Object),2660,2664,"/**
* Sets a value in this map and returns the previous value.
* @param newValue new value to be set
* @return previous value or null if not previously set
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,putAll,com.google.common.collect.MapMakerInternalMap:putAll(java.util.Map),2441,2446,"/**
* Adds all entries from the given map to this backing store.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,intern,com.google.common.collect.Interners$InternerImpl:intern(java.lang.Object),128,157,"/**
* Retrieves the canonical value for a given object from a concurrent map.
* @param sample the object to retrieve the canonical value for
* @return the canonical value or null if not found; may block indefinitely in rare cases
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap$HashIterator:remove(),2622,2627,"/**
* Removes and cleans up the previously returned entry.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap$KeySet:remove(java.lang.Object),2698,2701,"/**
* Removes specified object from the map and returns true if removed.
* @param o object to be removed
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap$EntrySet:remove(java.lang.Object),2761,2769,"/**
* Removes a specified entry from the map.
* @param o object to remove (must be an instance of Entry)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,get,com.google.common.collect.MapMakerInternalMap:get(java.lang.Object),2355,2362,"/**
* Retrieves value by key from the map using its hash and segment.
* @param key object to look up, or null for null result
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsKey,com.google.common.collect.MapMakerInternalMap:containsKey(java.lang.Object),2376,2383,"/**
* Checks whether a given object is present in the map.
* @param key object to search for
* @return true if found, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,putInstance,"com.google.common.collect.MutableClassToInstanceMap:putInstance(java.lang.Class,java.lang.Object)",169,174,"/**
* Inserts an instance of a given class and returns the inserted object.
* @param type Class to insert
* @param value Instance to insert
* @return Inserted object or null if failure
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,tryCrossOverAndBubbleUp,"com.google.common.collect.MinMaxPriorityQueue$Heap:tryCrossOverAndBubbleUp(int,int,java.lang.Object)",538,562,"/**
* Tries crossing over and bubbling up in the heap, returning a MoveDesc if successful.
* @param removeIndex index to remove
* @param vacated index that will be vacated
* @param toTrickle element to trickle up
* @return MoveDesc with new parent or null on failure","* Tries to move {@code toTrickle} from a min to a max level and bubble up there. If it moved
     * before {@code removeIndex} this method returns a pair as described in {@link #removeAt}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,rowComparator,com.google.common.collect.TreeBasedTable:rowComparator(),144,154,"/**
* Returns the comparator used for sorting rows in this collection. 
* @return Comparator object or null if not set (not applicable)","* Returns the comparator that orders the rows. With natural ordering, {@link Ordering#natural()}
   * is returned.
   *
   * @deprecated Use {@code table.rowKeySet().comparator()} instead.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,synchronizedNavigableSet,com.google.common.collect.Sets:synchronizedNavigableSet(java.util.NavigableSet),2112,2117,"/**
* Returns a synchronized version of the provided NavigableSet.
* @param navigableSet original set to synchronize
*/","* Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In
   * order to guarantee serial access, it is critical that <b>all</b> access to the backing
   * navigable set is accomplished through the returned navigable set (or its views).
   *
   * <p>It is imperative that the user manually synchronize on the returned sorted set when
   * iterating over it or any of its {@code descendingSet}, {@code subSet}, {@code headSet}, or
   * {@code tailSet} views.
   *
   * {@snippet :
   * NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>());
   *  ...
   * synchronized (set) {
   *   // Must be in the synchronized block
   *   Iterator<E> it = set.iterator();
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>or:
   *
   * {@snippet :
   * NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>());
   * NavigableSet<E> set2 = set.descendingSet().headSet(foo);
   *  ...
   * synchronized (set) { // Note: set, not set2!!!
   *   // Must be in the synchronized block
   *   Iterator<E> it = set2.descendingIterator();
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned navigable set will be serializable if the specified navigable set is
   * serializable.
   *
   * <p><b>Java 8+ users and later:</b> Prefer {@link Collections#synchronizedNavigableSet}.
   *
   * @param navigableSet the navigable set to be ""wrapped"" in a synchronized navigable set.
   * @return a synchronized view of the specified navigable set.
   * @since 13.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,ceiling,com.google.common.collect.Synchronized$SynchronizedNavigableSet:ceiling(java.lang.Object),1474,1479,"/**
* Returns the smallest value in this set that is greater than or equal to the given element.
* @param e the target element
* @return the ceiling element, or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingIterator,com.google.common.collect.Synchronized$SynchronizedNavigableSet:descendingIterator(),1481,1484,"/**
* Returns a reverse-order iterator over this collection.
* @return an iterator that traverses in descending order
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingSet,com.google.common.collect.Synchronized$SynchronizedNavigableSet:descendingSet(),1488,1498,"/**
* Returns a synchronized descending set view of the underlying map.
* @return NavigableSet containing all entries in reverse order
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,floor,com.google.common.collect.Synchronized$SynchronizedNavigableSet:floor(java.lang.Object),1500,1505,"/**
* Synchronized implementation of floor() method.
* @param e input value to be floored
* @return floored value or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:headSet(java.lang.Object,boolean)",1507,1512,"/**
* Returns a navigable set of elements less than the specified element.
* @param toElement upper bound of the set
* @param inclusive whether to include the upper bound in the result
* @return NavigableSet containing elements or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,higher,com.google.common.collect.Synchronized$SynchronizedNavigableSet:higher(java.lang.Object),1519,1524,"/**
* Delegates higher element retrieval to underlying collection.
* @param e element to find higher version of
* @return higher element or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lower,com.google.common.collect.Synchronized$SynchronizedNavigableSet:lower(java.lang.Object),1526,1531,"/**
* Delegates lower-bound operation to underlying delegate.
* @param e element to find lower bound of
* @return Lower-bound element or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollFirst,com.google.common.collect.Synchronized$SynchronizedNavigableSet:pollFirst(),1533,1538,"/**
* Retrieves the first element from the queue.
* @return the polled element or null if empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollLast,com.google.common.collect.Synchronized$SynchronizedNavigableSet:pollLast(),1540,1545,"/**
* Retrieves and removes the last element from the collection.
* @return the polled element, or null if empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",1547,1554,"/**
* Returns a subset of elements in the range [fromElement, toElement].
* @param fromElement start of the subset (inclusive if fromInclusive is true)
* @param fromInclusive whether to include the start element
* @param toElement end of the subset (inclusive if toInclusive is true)
* @param toInclusive whether to include the end element
* @return a navigable set containing elements in the specified range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:tailSet(java.lang.Object,boolean)",1561,1566,"/**
* Returns a navigable set of elements greater than or equal to the specified element.
* @param fromElement element to start from
* @param inclusive whether to include the fromElement in the result
* @return NavigableSet containing elements >= fromElement, synchronized on mutex
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keySet,com.google.common.collect.Synchronized$SynchronizedNavigableMap:keySet(),1720,1723,"/**
 * Returns a set view of the keys contained in this map.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,removeAll,com.google.common.collect.ForwardingSetMultimap:removeAll(java.lang.Object),56,60,"/**
* Removes all occurrences of a specified element from this set.
* @param key object to be removed, or null for no-op
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,add,"com.google.common.collect.TreeMultiset$AvlNode:add(java.util.Comparator,java.lang.Object,int,int[])",675,719,"/**
* Adds an element to the AVL tree.
* @param comparator comparison function for elements
* @param e new element to add
* @param count number of times to add the element
* @param result array to store result (e.g., 0 if added successfully)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,removeMin,com.google.common.collect.TreeMultiset$AvlNode:removeMin(com.google.common.collect.TreeMultiset$AvlNode),912,921,"/**
* Removes the minimum element from the AVL tree, rebalancing if necessary.
* @param node current node in the tree
* @return new root of the modified tree or null if tree is empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,removeMax,com.google.common.collect.TreeMultiset$AvlNode:removeMax(com.google.common.collect.TreeMultiset$AvlNode),924,933,"/**
* Removes the maximum element from an AVL tree and returns the new root.
* @param node current tree node
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentEdges,com.google.common.graph.ImmutableNetwork:incidentEdges(java.lang.Object),130,133,"/**
* Retrieves incident edges from a given node.
* @param node Node object
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,adjacentNodes,com.google.common.graph.ImmutableNetwork:adjacentNodes(java.lang.Object),143,146,"/**
* Retrieves and returns adjacent nodes of the given node.
* @param node Node object to fetch adjacent nodes for
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edgesConnecting,"com.google.common.graph.ImmutableNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",148,156,"/**
* Returns a set of edges connecting two nodes.
* @param nodeU first node
* @param nodeV second node
* @return Set of edge types (E) or empty set if no connections exist between the nodes.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,inEdges,com.google.common.graph.ImmutableNetwork:inEdges(java.lang.Object),158,161,"/**
* Retrieves edges from the given node.
* @param node graph node to fetch edges from
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,outEdges,com.google.common.graph.ImmutableNetwork:outEdges(java.lang.Object),163,166,"/**
* Retrieves the set of outgoing edges from the specified node.
* @param node the graph node to fetch edges for
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,successors,com.google.common.graph.ImmutableNetwork:successors(java.lang.Object),173,176,"/**
* Retrieves successors of a given node.
* @param node Node to fetch successors from
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,adjacentNodes,com.google.common.graph.ImmutableValueGraph:adjacentNodes(java.lang.Object),103,106,"/**
* Retrieves a set of adjacent nodes for the given node.
* @param node the node to fetch adjacent nodes for
* @return a set of adjacent node objects or an empty set if invalid
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,predecessors,com.google.common.graph.ImmutableValueGraph:predecessors(java.lang.Object),108,111,"/**
* Retrieves all predecessor nodes of the given node.
* @param node graph node to fetch predecessors for
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,successors,com.google.common.graph.ImmutableValueGraph:successors(java.lang.Object),113,116,"/**
* Retrieves all nodes that are directly connected to the given node.
* @param node current node in question
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,incidentEdges,com.google.common.graph.ImmutableValueGraph:incidentEdges(java.lang.Object),118,129,"/**
* Returns a set of incident edges for the given node.
* @param node the node for which to fetch incident edges
* @return Set<EndpointPair<N>> containing incident edges or an empty set if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,"com.google.common.graph.ImmutableValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",131,134,"/**
* Checks if two nodes are connected by an edge.
* @param nodeU first node to check
* @param nodeV second node to check
* @return true if nodes are connected, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,com.google.common.graph.ImmutableValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),136,141,"/**
* Checks if there's an edge connecting two endpoints.
* @param endpoints pair of nodes to check
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.ImmutableValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)",143,146,"/**
* Returns the edge value between two nodes or a default value if not found.
* @param nodeU first node (not null)
* @param nodeV second node (not null)
* @param defaultValue fallback value to return
* @return V edge value or defaultValue",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.ImmutableValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)",148,152,"/**
* Returns the edge value for a given endpoint pair or uses the default value if not available.
* @param endpoints EndpointPair containing nodes U and V
* @param defaultValue Value to use in case of absence; null if no default
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,int,double)",407,410,"/**
* Creates a Bloom Filter with specified expected insertions and false positive probability.
* @param funnel serialization function for filter elements
* @param expectedInsertions estimated number of elements to be inserted
* @param fpp desired false positive probability
*/","* Creates a {@link BloomFilter} with the expected number of insertions and expected false
   * positive probability.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @param fpp the desired false positive probability (must be positive and less than 1.0)
   * @return a {@code BloomFilter}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long)",509,512,"/**
* Creates a Bloom Filter with the given funnel and expected insertions.
* @param funnel Funnel to use for hashing elements
* @param expectedInsertions Estimated number of elements to add
*/","* Creates a {@link BloomFilter} with the expected number of insertions and a default expected
   * false positive probability of 3%.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @return a {@code BloomFilter}
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,approximateElementCount,com.google.common.hash.BloomFilter:approximateElementCount(),221,234,"/**
* Estimates the approximate number of elements stored.
* @return Element count based on hash function and bit statistics
*/","* Returns an estimate for the total number of distinct elements that have been added to this
   * Bloom filter. This approximation is reasonably accurate if it does not exceed the value of
   * {@code expectedInsertions} that was used when constructing the filter.
   *
   * @since 22.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,toX,"com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:toX(double,java.math.RoundingMode)",344,347,"/**
* Rounds double value to BigInteger using specified rounding mode.
* @param d double value to round
* @param mode rounding mode (e.g. HALF_UP, HALF_DOWN)
* @return rounded BigInteger value
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,sqrtApproxWithDoubles,com.google.common.math.BigIntegerMath:sqrtApproxWithDoubles(java.math.BigInteger),297,300,"/**
* Approximates square root of a BigInteger using doubles.
* @param x input number to find square root for
* @return approximate square root as BigInteger
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:add(java.lang.Object),743,758,"/**
* Adds an element to the set, potentially updating the hash table.
* @param e the element to add
* @return this SetBuilderImpl instance with updated state
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$Builder:build(),571,577,"/**
* Builds and returns an immutable set of elements.
* @return ImmutableSet object containing the constructed set
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,least,"com.google.common.collect.Comparators:least(int,java.util.Comparator)",132,142,"/**
* Returns a collector that selects the top K elements based on a given comparator.
* @param k number of top elements to select
* @param comparator for sorting and selecting top elements
*/","* Returns a {@code Collector} that returns the {@code k} smallest (relative to the specified
   * {@code Comparator}) input elements, in ascending order, as an unmodifiable {@code List}. Ties
   * are broken arbitrarily.
   *
   * <p>For example:
   *
   * {@snippet :
   * Stream.of(""foo"", ""quux"", ""banana"", ""elephant"")
   *     .collect(least(2, comparingInt(String::length)))
   * // returns {""foo"", ""quux""}
   * }
   *
   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log
   * k)), as opposed to e.g. {@code Stream.sorted(comparator).limit(k)}, which currently takes O(n
   * log n) time and O(n) space.
   *
   * @throws IllegalArgumentException if {@code k < 0}
   * @since 22.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,leastOf,"com.google.common.collect.Ordering:leastOf(java.util.Iterator,int)",781,802,"/**
* Retrieves the k smallest elements from an iterator.
* @param iterator input iterator
* @param k number of smallest elements to retrieve
* @return List of k smallest elements or empty list if not found
*/","* Returns the {@code k} least elements from the given iterator according to this ordering, in
   * order from least to greatest. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.least(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending
   *     order
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,offerAll,com.google.common.collect.TopKSelector:offerAll(java.lang.Iterable),257,259,"/**
* Offers all elements from the given iterable to the underlying queue.
* @param elements iterable containing elements to be offered
*/","* Adds each member of {@code elements} as a candidate for the top {@code k} elements. This
   * operation takes amortized linear time in the length of {@code elements}.
   *
   * <p>If all input data to this {@code TopKSelector} is in a single {@code Iterable}, prefer
   * {@link Ordering#leastOf(Iterable, int)}, which provides a simpler API for that use case.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,upperCase,com.google.common.io.BaseEncoding$StandardBaseEncoding:upperCase(),887,895,"/**
* Returns the uppercase version of this encoding.
* @return BaseEncoding object or null if no uppercase variant exists
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,lowerCase,com.google.common.io.BaseEncoding$StandardBaseEncoding:lowerCase(),897,905,"/**
* Returns or creates a lowercase base encoding.
* @return BaseEncoding object for lowercase characters
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,toString,com.google.common.primitives.UnsignedLong:toString(),252,255,"/**
* Returns a string representation of this unsigned long value.
* @return human-readable string representation of the value.","Returns a string representation of the {@code UnsignedLong} value, in base 10.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,aboutToAcquire,com.google.common.util.concurrent.CycleDetectingLockFactory:aboutToAcquire(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock),713,721,"/**
* Validates and records the lock acquisition for a CycleDetectingLock.
* @param lock the lock being acquired
*/",* CycleDetectingLock implementations must call this method before attempting to acquire the lock.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,transform,"com.google.common.util.concurrent.ClosingFuture:transform(com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)",688,705,"/**
* Transforms a ClosingFuture using the provided asynchronous function.
* @param function async transformation function
* @param executor Executor for executing the transformation
* @return transformed ClosingFuture or null if not found
*/","* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function
   * to its value. The function can use a {@link DeferredCloser} to capture objects to be closed
   * when the pipeline is done.
   *
   * <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code
   * ClosingFuture} will be equivalent to this one.
   *
   * <p>If the function throws an exception, that exception is used as the result of the derived
   * {@code ClosingFuture}.
   *
   * <p>Example usage:
   *
   * {@snippet :
   * ClosingFuture<List<Row>> rowsFuture =
   *     queryFuture.transform((closer, result) -> result.getRows(), executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings
   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on
   * the original {@code ClosingFuture} instance.
   *
   * @param function transforms the value of this step to the value of the derived step
   * @param executor executor to run the function in
   * @return the derived step
   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this
   *     one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture()
   *     finished}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,transformAsync,"com.google.common.util.concurrent.ClosingFuture:transformAsync(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)",782,798,"/**
* Transforms a future using an asynchronous closing function.
* @param function asynchronous closing function to apply
* @param executor Executor instance for async computation
* @return ClosingFuture object representing transformed result
*/","* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function
   * that returns a {@code ClosingFuture} to its value. The function can use a {@link
   * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those
   * captured by the returned {@link ClosingFuture}).
   *
   * <p>If this {@code ClosingFuture} succeeds, the derived one will be equivalent to the one
   * returned by the function.
   *
   * <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code
   * ClosingFuture} will be equivalent to this one.
   *
   * <p>If the function throws an exception, that exception is used as the result of the derived
   * {@code ClosingFuture}. But if the exception is thrown after the function creates a {@code
   * ClosingFuture}, then none of the closeable objects in that {@code ClosingFuture} will be
   * closed.
   *
   * <p>Usage guidelines for this method:
   *
   * <ul>
   *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a
   *       {@code ClosingFuture}. If possible, prefer calling {@link #transform(ClosingFunction,
   *       Executor)} instead, with a function that returns the next value directly.
   *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}
   *       for every closeable object this step creates in order to capture it for later closing.
   *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code
   *       ClosingFuture} call {@link #from(ListenableFuture)}.
   *   <li>In case this step doesn't create new closeables, you can adapt an API that returns a
   *       {@link ListenableFuture} to return a {@code ClosingFuture} by wrapping it with a call to
   *       {@link #withoutCloser(AsyncFunction)}
   * </ul>
   *
   * <p>Example usage:
   *
   * {@snippet :
   * // Result.getRowsClosingFuture() returns a ClosingFuture.
   * ClosingFuture<List<Row>> rowsFuture =
   *     queryFuture.transformAsync((closer, result) -> result.getRowsClosingFuture(), executor);
   *
   * // Result.writeRowsToOutputStreamFuture() returns a ListenableFuture that resolves to the
   * // number of written rows. openOutputFile() returns a FileOutputStream (which implements
   * // Closeable).
   * ClosingFuture<Integer> rowsFuture2 =
   *     queryFuture.transformAsync(
   *         (closer, result) -> {
   *           FileOutputStream fos = closer.eventuallyClose(openOutputFile(), closingExecutor);
   *           return ClosingFuture.from(result.writeRowsToOutputStreamFuture(fos));
   *      },
   *      executor);
   *
   * // Result.getRowsFuture() returns a ListenableFuture (no new closeables are created).
   * ClosingFuture<List<Row>> rowsFuture3 =
   *     queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor);
   *
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings
   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.
   * (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside
   * {@code AsyncClosingFunction.apply}. Any heavyweight operations should occur in other threads
   * responsible for completing the returned {@code ClosingFuture}.)
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on
   * the original {@code ClosingFuture} instance.
   *
   * @param function transforms the value of this step to a {@code ClosingFuture} with the value of
   *     the derived step
   * @param executor executor to run the function in
   * @return the derived step
   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this
   *     one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture()
   *     finished}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catchingMoreGeneric,"com.google.common.util.concurrent.ClosingFuture:catchingMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)",879,896,"/**
* Catches and handles exceptions of type X using the provided fallback function.
* @param exceptionType Class of the exception to catch
* @param fallback Function to call when an exception is caught
* @param executor Executor for the asynchronous operation
* @return A closing future with a more generic result type W
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catchingAsyncMoreGeneric,"com.google.common.util.concurrent.ClosingFuture:catchingAsyncMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)",975,991,"/**
* Catches asynchronous exceptions of type X and returns a ClosingFuture.
* @param exceptionType Class of the exception to catch
* @param fallback AsyncClosingFunction to execute on exception
* @param executor Executor to run the fallback function in
* @return ClosingFuture with result of fallback function or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getChecked,"com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class)",1220,1227,"/**
* Retrieves a value from a future with checked exceptions.
* @param future the future containing the value
* @param exceptionClass class of expected exception
* @return the retrieved value or null if not available
*/","* Returns the result of {@link Future#get()}, converting most exceptions to a new instance of the
   * given checked exception type. This reduces boilerplate for a common use of {@code Future} in
   * which it is unnecessary to programmatically distinguish between exception types or to extract
   * other information from the exception instance.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause
   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code
   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.
   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the
   *       interrupt).
   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link
   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to continue to treat every checked exception as a checked
   * exception, every unchecked exception as an unchecked exception, and every error as an error. In
   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the
   * new stack trace matches that of the current thread.
   *
   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor
   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}
   * (preferring constructors with at least one {@code String}, then preferring constructors with at
   * least one {@code Throwable}) and calling the constructor via reflection. If the exception did
   * not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it.
   * If no such constructor exists, an {@code IllegalArgumentException} is thrown.
   *
   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}
   *     whose cause is not itself a checked exception
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a
   *     {@code RuntimeException} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or
   *     does not have a suitable constructor
   * @since 19.0 (in 10.0 as {@code get})",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getChecked,"com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class,java.time.Duration)",1272,1279,"/**
* Retrieves a checked result from a future, throwing the specified exception type if timed out or failed.
* @param future Future containing the result
* @param exceptionClass Exception class to throw on timeout/failure
* @param timeout Maximum wait time in nanoseconds
*/","* Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new
   * instance of the given checked exception type. This reduces boilerplate for a common use of
   * {@code Future} in which it is unnecessary to programmatically distinguish between exception
   * types or to extract other information from the exception instance.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause
   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code
   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.
   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the
   *       interrupt).
   *   <li>Any {@link TimeoutException} is wrapped in an {@code X}.
   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link
   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to continue to treat every checked exception as a checked
   * exception, every unchecked exception as an unchecked exception, and every error as an error. In
   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the
   * new stack trace matches that of the current thread.
   *
   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor
   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}
   * (preferring constructors with at least one {@code String}, then preferring constructors with at
   * least one {@code Throwable}) and calling the constructor via reflection. If the exception did
   * not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it.
   * If no such constructor exists, an {@code IllegalArgumentException} is thrown.
   *
   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}
   *     whose cause is not itself a checked exception
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a
   *     {@code RuntimeException} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or
   *     does not have a suitable constructor
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,reschedule,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:reschedule(),607,648,"/**
* Reschedules this task with a new schedule, handling failures and locking.
* @return a Cancellable object or immediateCancelledFuture() on failure
*/","* Atomically reschedules this task and assigns the new future to {@link
       * #cancellationDelegate}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,startAsync,com.google.common.util.concurrent.AbstractService:startAsync(),244,263,"/**
* Starts the service asynchronously, invoking startup logic and notifying listeners.
* @return This Service instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,stopAsync,com.google.common.util.concurrent.AbstractService:stopAsync(),265,301,"/**
* Stops the service asynchronously, transitioning to STOPPING state.
* @return this Service instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,notifyStarted,com.google.common.util.concurrent.AbstractService:notifyStarted(),400,426,"/**
* Notifies the service as started, potentially transitioning to STOPPING or RUNNING state.
* @throws IllegalStateException if service is not in STARTING state
*/","* Implementing classes should invoke this method once their service has started. It will cause
   * the service to transition from {@link State#STARTING} to {@link State#RUNNING}.
   *
   * @throws IllegalStateException if the service is not {@link State#STARTING}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startAsync,com.google.common.util.concurrent.ServiceManager:startAsync(),271,289,"/**
* Starts all services asynchronously. Ensures all services are in NEW state before proceeding.
* @return This ServiceManager instance
*/","* Initiates service {@linkplain Service#startAsync startup} on all the services being managed. It
   * is only valid to call this method if all of the services are {@linkplain State#NEW new}.
   *
   * @return this
   * @throws IllegalStateException if any of the Services are not {@link State#NEW new} when the
   *     method is called.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,starting,com.google.common.util.concurrent.ServiceManager$ServiceListener:starting(),790,799,"/**
* Transitions the service to the starting state.
* @param service Service instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,running,com.google.common.util.concurrent.ServiceManager$ServiceListener:running(),801,807,"/**
* Transitions service to running state.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,stopping,com.google.common.util.concurrent.ServiceManager$ServiceListener:stopping(com.google.common.util.concurrent.Service$State),809,815,"/**
* Transitions service to stopping state.
* @param from current state of the service
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,terminated,com.google.common.util.concurrent.ServiceManager$ServiceListener:terminated(com.google.common.util.concurrent.Service$State),817,831,"/**
* Handles service termination, logging and updating the state.
* @param from previous service state
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,failed,"com.google.common.util.concurrent.ServiceManager$ServiceListener:failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable)",833,855,"/**
* Handles service failure by logging and transitioning to the FAILED state.
*@param from current service state
*@param failure exception causing the failure
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitRunning,com.google.common.util.concurrent.AbstractService:awaitRunning(),303,311,"/**
* Waits until this thread has reached the RUNNING state.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitTerminated,com.google.common.util.concurrent.AbstractService:awaitTerminated(),338,346,"/**
* Waits until the thread has terminated and its state is valid.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitStopped(),607,610,"/**
 * Waits until the stopped guard is released.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhen,"com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",502,504,"/**
* Enters the specified Guard when its timeout is reached.
* @param guard Guard object
* @param time duration in nanoseconds
*/","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied, and may be
   * interrupted.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitRunning,"com.google.common.util.concurrent.AbstractService:awaitRunning(long,java.util.concurrent.TimeUnit)",321,336,"/**
* Waits for this object to reach the running state within the specified timeout.
* @param timeout maximum time to wait in milliseconds
* @param unit time unit of the timeout value
* @throws TimeoutException if unable to reach running state within the timeout
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitTerminated,"com.google.common.util.concurrent.AbstractService:awaitTerminated(long,java.util.concurrent.TimeUnit)",356,376,"/**
* Waits until the object reaches a terminal state or times out, throwing TimeoutException.
* @param timeout maximum wait duration in specified unit
* @param unit time unit for timeout (e.g. seconds, milliseconds)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhenUninterruptibly,"com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",598,600,"/**
* Enters the given Guard uninterruptibly for a specified duration.
* @param guard Guard object to enter
* @param time duration in nanoseconds
*/","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitFor,"com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",840,842,"/**
* Waits for a specified duration while monitoring a Guard.
* @param guard the Guard to monitor
* @param time the duration to wait in nanoseconds
* @return true if the Guard was satisfied within the given time, false otherwise
*/","* Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May
   * be called only by a thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitForUninterruptibly,"com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",886,888,"/**
* Waits uninterruptibly for the Guard to be released within a specified duration.
* @param guard the Guard to wait on
* @param time the maximum waiting duration
* @return true if the Guard was released, false otherwise
*/","* Waits for the guard to be satisfied. Waits at most the given time. May be called only by a
   * thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitStopped(long,java.util.concurrent.TimeUnit)",612,624,"/**
* Waits for all services to stop within a specified timeout.
* @param timeout maximum waiting time in the given unit
* @param unit time unit (e.g. seconds, milliseconds)
* @throws TimeoutException if services do not stop within time limit
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,withTimeout,"com.google.common.util.concurrent.FluentFuture:withTimeout(java.time.Duration,java.util.concurrent.ScheduledExecutorService)",272,277,"/**
* Executes the operation with a specified time limit.
* @param timeout time duration for execution
* @param scheduledExecutor executor service to use
*/","* Returns a future that delegates to this future but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires.
   * If the timeout expires, not only will the output future finish, but also the input future
   * ({@code this}) will be cancelled and interrupted.
   *
   * @param timeout when to time out the future
   * @param scheduledExecutor The executor service to enforce the timeout.
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,precomputeCharMatcher,com.google.common.base.Platform:precomputeCharMatcher(com.google.common.base.CharMatcher),37,39,"/**
* Returns a cached version of the provided CharMatcher.
* @param matcher CharMatcher instance to cache
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,write,"com.google.common.io.Files:write(byte[],java.io.File)",268,270,"/**
 * Writes byte array content to a specified file.
 * @param from byte array data to be written
 * @param to target file for writing
 */","* Overwrites a file with the contents of a byte array.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)}.
   *
   * @param from the bytes to write
   * @param to the destination file
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openStream,com.google.common.io.ByteSource$SlicedByteSource:openStream(),495,498,"/**
* Returns an InputStream for reading data from this ByteSource.
* @return InputStream to read from or null if not available
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openBufferedStream,com.google.common.io.ByteSource$SlicedByteSource:openBufferedStream(),500,503,"/**
* Opens a buffered stream from underlying byte source.
* @throws IOException if an I/O error occurs
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,isEmpty,com.google.common.io.ByteSource$ConcatenatedByteSource:isEmpty(),686,694,"/**
* Checks if all byte sources are empty.
* @return true if all sources have no data, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,isEmpty,com.google.common.io.ByteSource$SlicedByteSource:isEmpty(),539,542,"/**
 * Checks if the underlying storage is empty.
 * @return true if no data exists, false otherwise
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,size,com.google.common.io.ByteSource$ConcatenatedByteSource:size(),725,740,"/**
* Calculates total size by aggregating sizes from all sources.
* @return Total size in bytes or Long.MAX_VALUE on overflow
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,hash,com.google.common.io.ByteSource:hash(com.google.common.hash.HashFunction),337,341,"/**
* Computes the hash of the object using a specified hash function.
* @param hashFunction instance of HashFunction to use for hashing
* @return HashCode object or throws IOException on failure
*/","* Hashes the contents of this byte source using the given hash function.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,copy,"com.google.common.io.Files:copy(java.io.File,java.io.OutputStream)",300,302,"/**
* Copies file contents from source to destination stream.
* @param from source file
* @param to destination output stream
*/","* Copies all bytes from a file to an output stream.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#copy(java.nio.file.Path, OutputStream)}.
   *
   * @param from the source file
   * @param to the output stream
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,copy,"com.google.common.io.Resources:copy(java.net.URL,java.io.OutputStream)",171,173,"/**
* Copies content from a URL to an output stream.
* @param from URL to read from
* @param to Output stream to write to
*/","* Copies all bytes from a URL to an output stream.
   *
   * @param from the URL to read from
   * @param to the output stream
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,copy,"com.google.common.io.Files:copy(java.io.File,java.io.File)",323,326,"/**
* Copies the contents of one file to another.
* @param from source file
* @param to destination file
* @throws IOException if an I/O error occurs","* Copies all the bytes from one file to another.
   *
   * <p>Copying is not an atomic operation - in the case of an I/O error, power loss, process
   * termination, or other problems, {@code to} may not be a complete copy of {@code from}. If you
   * need to guard against those conditions, you should employ other file-level synchronization.
   *
   * <p><b>Warning:</b> If {@code to} represents an existing file, that file will be overwritten
   * with the contents of {@code from}. If {@code to} and {@code from} refer to the <i>same</i>
   * file, the contents of that file will be deleted.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)}.
   *
   * @param from the source file
   * @param to the destination file
   * @throws IOException if an I/O error occurs
   * @throws IllegalArgumentException if {@code from.equals(to)}",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,read,com.google.common.io.ByteSource$AsCharSource:read(),464,474,"/**
* Reads all data from input source as a byte array and returns it as a string, avoiding extra copies.
* @return The read data as a string.",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,toByteArray,com.google.common.io.Files:toByteArray(java.io.File),236,238,"/**
* Converts a File object to its byte array representation.
* @param file input file
* @return byte array containing file data or null on error
*/","* Reads all bytes from a file into a byte array.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#readAllBytes}.
   *
   * @param file the file to read from
   * @return a byte array containing all the bytes from file
   * @throws IllegalArgumentException if the file is bigger than the largest possible byte array
   *     (2^31 - 1)
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,toByteArray,com.google.common.io.Resources:toByteArray(java.net.URL),94,96,"/**
* Converts a URL to its byte representation.
* @param url URL object
*/","* Reads all bytes from a URL into a byte array.
   *
   * @param url the URL to read from
   * @return a byte array containing all the bytes from the URL
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readBytes,"com.google.common.io.Files:readBytes(java.io.File,com.google.common.io.ByteProcessor)",600,610,"/**
* Reads the contents of a file into bytes and processes them.
* @param file file to be processed
* @param processor callback function for processing each byte
* @return result of processing or null if process returns null
*/","* Process the bytes of a file.
   *
   * <p>(If this seems too complicated, maybe you're looking for {@link #toByteArray}.)
   *
   * @param file the file to read
   * @param processor the object to which the bytes of the file are passed.
   * @return the result of the byte processor
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asByteSource(file).read(processor)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,equal,"com.google.common.io.Files:equal(java.io.File,java.io.File)",372,390,"/**
* Compares two files for equality by comparing their lengths and contents.
* @param file1 first File object to compare
* @param file2 second File object to compare
* @return true if files are equal, false otherwise
*/","* Returns true if the given files exist, are not directories, and contain the same bytes.
   *
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,equal,"com.google.common.io.MoreFiles:equal(java.nio.file.Path,java.nio.file.Path)",363,383,"/**
* Compares two file paths for equality.
* @param path1 first file path
* @param path2 second file path
* @return true if paths are the same, false otherwise
*/","* Returns true if the files located by the given paths exist, are not directories, and contain
   * the same bytes.
   *
   * @throws IOException if an I/O error occurs
   * @since 22.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,write,"com.google.common.io.Files:write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)",282,288,"/**
* Writes a CharSequence to a file using the specified charset.
* @param from CharSequence to write
* @param to target file location
* @param charset character encoding scheme
*/","* Writes a character sequence (such as a string) to a file using the given character set.
   *
   * @param from the character sequence to write
   * @param to the destination file
   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSink(to, charset).write(from)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,append,"com.google.common.io.Files:append(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)",358,365,"/**
* Appends a CharSequence to a file using the specified charset and mode.
* @param from CharSequence to write
* @param to target file path
* @param charset character encoding for writing
*/","* Appends a character sequence (such as a string) to a file using the given character set.
   *
   * @param from the character sequence to append
   * @param to the destination file
   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSink(to, charset, FileWriteMode.APPEND).write(from)}. This
   *     method is scheduled to be removed in October 2019.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,length,com.google.common.io.CharSource$ConcatenatedCharSource:length(),723,730,"/**
* Calculates total length of all underlying CharSources.
* @return cumulative character count or -1 if I/O error occurs
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,copy,"com.google.common.io.Files:copy(java.io.File,java.nio.charset.Charset,java.lang.Appendable)",338,345,"/**
* Copies character data from a file to an appendable target.
* @param from source file
* @param charset encoding to use
* @param to destination for copied content
*/","* Copies all characters from a file to an appendable object, using the given character set.
   *
   * @param from the source file
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @param to the appendable object
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(from, charset).copyTo(to)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readFirstLine,"com.google.common.io.Files:readFirstLine(java.io.File,java.nio.charset.Charset)",519,526,"/**
* Reads the first line from a file using the specified character set.
* @param file the file to read from
* @param charset the character encoding for reading
* @return the first line of text or null if empty
*/","* Reads the first line from a file. The line does not include line-termination characters, but
   * does include other leading and trailing whitespace.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return the first line, or null if the file is empty
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(file, charset).readFirstLine()}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readLines,"com.google.common.io.Files:readLines(java.io.File,java.nio.charset.Charset)",544,563,"/**
* Reads lines from a file into a list.
* @param file the file to read
* @param charset the character set of the file content
* @return list of strings representing the file's lines
*/","* Reads all of the lines from a file. The lines do not include line-termination characters, but
   * do include other leading and trailing whitespace.
   *
   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code
   * Files.asCharSource(file, charset).readLines()}.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#readAllLines(java.nio.file.Path, Charset)}.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a mutable {@link List} containing all the lines
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readLines,"com.google.common.io.Files:readLines(java.io.File,java.nio.charset.Charset,com.google.common.io.LineProcessor)",577,587,"/**
* Reads lines from a file into the provided callback.
* @param file file to read
* @param charset character encoding for reading
* @param callback callback to process each line
* @return result of processing (may be null)
*/","* Streams lines from a {@link File}, stopping when our callback returns false, or we have read
   * all of the lines.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @param callback the {@link LineProcessor} to use to handle the lines
   * @return the output of processing the lines
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(file, charset).readLines(callback)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,readLines,"com.google.common.io.Resources:readLines(java.net.URL,java.nio.charset.Charset,com.google.common.io.LineProcessor)",122,127,"/**
* Reads lines from a URL into a target object.
* @param url source URL
* @param charset character set to use for decoding
* @param callback processor to convert each line into the target object
* @return the resulting target object or null if not processed
*/","* Streams lines from a URL, stopping when our callback returns false, or we have read all of the
   * lines.
   *
   * @param url the URL to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @param callback the LineProcessor to use to handle the lines
   * @return the output of processing the lines
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,isEmpty,com.google.common.io.CharSource$ConcatenatedCharSource:isEmpty(),700,708,"/**
* Checks if all sources are empty.
* @return true if no data is available, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,map,"com.google.common.io.Files:map(java.io.File,java.nio.channels.FileChannel$MapMode)",668,670,"/**
* Maps a file to a memory-mapped buffer.
* @param file file to be mapped
* @param mode mapping mode (e.g. read-only, read-write)
*/","* Fully maps a file in to memory as per {@link
   * FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested {@link
   * MapMode}.
   *
   * <p>Files are mapped from offset 0 to its length.
   *
   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.
   *
   * @param file the file to map
   * @param mode the mode to use when mapping {@code file}
   * @return a buffer reflecting {@code file}
   * @throws FileNotFoundException if the {@code file} does not exist
   * @throws IOException if an I/O error occurs
   * @see FileChannel#map(MapMode, long, long)
   * @since 2.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,map,"com.google.common.io.Files:map(java.io.File,java.nio.channels.FileChannel$MapMode,long)",691,694,"/**
* Maps a file to memory with specified parameters.
* @param file file to map
* @param mode access mode for mapped buffer
* @param size requested size of mapped buffer
*/","* Maps a file in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode,
   * long, long)} using the requested {@link MapMode}.
   *
   * <p>Files are mapped from offset 0 to {@code size}.
   *
   * <p>If the mode is {@link MapMode#READ_WRITE} and the file does not exist, it will be created
   * with the requested {@code size}. Thus this method is useful for creating memory mapped files
   * which do not yet exist.
   *
   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.
   *
   * @param file the file to map
   * @param mode the mode to use when mapping {@code file}
   * @return a buffer reflecting {@code file}
   * @throws IOException if an I/O error occurs
   * @see FileChannel#map(MapMode, long, long)
   * @since 2.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,"com.google.common.util.concurrent.MoreExecutors$Application:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",238,244,"/**
* Creates an unconfigurable thread pool executor with a daemon thread factory and shutdown hook. 
* @param executor existing ThreadPoolExecutor instance
* @param terminationTimeout timeout for shutdown in specified unit
* @param timeUnit time unit for termination timeout
* @return ExecutorService instance with configured properties
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,"com.google.common.util.concurrent.MoreExecutors$Application:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",250,256,"/**
* Configures and returns an exiting scheduled executor service.
* @param executor initial thread pool executor
* @param terminationTimeout shutdown timeout in specified unit
* @param timeUnit time unit for shutdown timeout
* @return ScheduledExecutorService instance
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,addDelayedShutdownHook,"com.google.common.util.concurrent.MoreExecutors:addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)",224,230,"/**
* Adds a shutdown hook with delayed execution.
* @param service ExecutorService instance
* @param terminationTimeout timeout duration in specified unit
* @param timeUnit time unit for timeout (e.g., SECONDS) 
*/","* Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}.
   * This is useful if the given service uses daemon threads, and we want to keep the JVM from
   * exiting immediately on shutdown, instead giving these daemon threads a chance to terminate
   * normally.
   *
   * @param service ExecutorService which uses daemon threads
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @param timeUnit unit of time for the time parameter",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeValueFromChain,"com.google.common.cache.LocalCache$Segment:removeValueFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause)",3240,3259,"/**
* Removes a value from the hash chain and notifies the relevant queues.
* @param first starting point of the hash chain
* @return new head of the hash chain or null if loading
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeLoadingValue,"com.google.common.cache.LocalCache$Segment:removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference)",3372,3404,"/**
* Removes loading value reference by key and hash.
* @param key the key to search for
* @param hash the hash code of the value to remove
* @param valueReference the reference to remove
* @return true if removed, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitHealthy(),583,590,"/**
* Waits until health guard is healthy and then checks if instance is healthy.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitHealthy(long,java.util.concurrent.TimeUnit)",592,605,"/**
* Waits for the monitored services to become healthy within a specified timeout.
* @param timeout maximum time to wait
* @param unit TimeUnit for the timeout value
* @throws TimeoutException if services do not become healthy within the timeout
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterValues,"com.google.common.collect.Multimaps:filterValues(com.google.common.collect.Multimap,com.google.common.base.Predicate)",2106,2109,"/**
* Filters values in a multimap based on the provided predicate.
* @param unfiltered input multimap
* @param valuePredicate predicate to evaluate each value
* @return filtered multimap with matching values removed","* Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a value that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose value satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,compound,com.google.common.collect.Ordering:compound(java.lang.Iterable),508,511,"/**
* Creates an ordering based on multiple comparators.
* @param comparators iterable of comparators to combine
* @return Ordering instance for the given comparators
*/","* Returns an ordering which tries each given comparator in order until a non-zero result is
   * found, returning that result, and returning zero only if all comparators return zero. The
   * returned ordering is based on the state of the {@code comparators} iterable at the time it was
   * provided to this method.
   *
   * <p>The returned ordering is equivalent to that produced using {@code
   * Ordering.from(comp1).compound(comp2).compound(comp3) . . .}.
   *
   * <p>The returned object is serializable if each of the {@code comparators} is serializable.
   *
   * <p><b>Warning:</b> Supplying an argument with undefined iteration order, such as a {@link
   * HashSet}, will produce non-deterministic results.
   *
   * <p><b>Java 8+ users:</b> Use a chain of calls to {@link Comparator#thenComparing(Comparator)},
   * or {@code comparatorCollection.stream().reduce(Comparator::thenComparing).get()} (if the
   * collection might be empty, also provide a default comparator as the {@code identity} parameter
   * to {@code reduce}).
   *
   * @param comparators the comparators to try in order",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,copyOf,com.google.common.collect.ImmutableBiMap:copyOf(java.util.Map),534,545,"/**
* Creates an immutable bi-map by copying the provided map.
* @param map source map to copy, can be a partial view of a BiMap
*/","* Returns an immutable bimap containing the same entries as {@code map}. If {@code map} somehow
   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose
   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.
   *
   * <p>The returned {@code BiMap} iterates over entries in the same order as the {@code entrySet}
   * of the original map.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws IllegalArgumentException if two keys have the same value or two values have the same
   *     key
   * @throws NullPointerException if any key or value in {@code map} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startupTimes,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:startupTimes(),641,659,"/**
* Returns a map of service startup times.
* @return Map of services to their elapsed startup times in milliseconds
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toArray,com.google.common.collect.FluentIterable:toArray(java.lang.Class),779,782,"/**
* Converts internal delegate to an array of specified type.
* @param type Class of elements in the returned array
* @return Array of type E or null if not found (but never empty)
*/","* Returns an array containing all of the elements from this fluent iterable in iteration order.
   *
   * <p><b>{@code Stream} equivalent:</b> if an object array is acceptable, use {@code
   * stream.toArray()}; if {@code type} is a class literal such as {@code MyType.class}, use {@code
   * stream.toArray(MyType[]::new)}. Otherwise use {@code stream.toArray( len -> (E[])
   * Array.newInstance(type, len))}.
   *
   * @param type the type of the elements
   * @return a newly-allocated array into which all the elements of this fluent iterable have been
   *     copied",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,toArray,"com.google.common.collect.Iterators:toArray(java.util.Iterator,java.lang.Class)",350,355,"/**
* Converts an iterator to a typed array.
* @param iterator iterator over elements of type T
* @param type class of the array elements
* @return array of type T or null if iteration failed
*/","* Copies an iterator's elements into an array. The iterator will be left exhausted: its {@code
   * hasNext()} method will return {@code false}.
   *
   * @param iterator the iterator to copy
   * @param type the type of the elements
   * @return a newly-allocated array into which all the elements of the iterator have been copied",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toSortedSet,com.google.common.collect.FluentIterable:toSortedSet(java.util.Comparator),669,672,"/**
* Converts this collection to an immutable sorted set using the specified comparator.
* @param comparator comparator for sorting elements
* @return ImmutableSortedSet instance or null if delegate is null
*/","* Returns an {@code ImmutableSortedSet} containing all of the elements from this {@code
   * FluentIterable} in the order specified by {@code comparator}, with duplicates (determined by
   * {@code comparator.compare(x, y) == 0}) removed. To produce an {@code ImmutableSortedSet} sorted
   * by its natural ordering, use {@code toSortedSet(Ordering.natural())}.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSortedSet#toImmutableSortedSet} to
   * {@code stream.collect()}.
   *
   * @param comparator the function by which to sort set elements
   * @throws NullPointerException if any element of this iterable is {@code null}
   * @since 14.0 (since 12.0 as {@code toImmutableSortedSet()}).",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,com.google.common.collect.ImmutableSortedSet:copyOf(java.lang.Iterable),214,220,"/**
* Creates an immutable sorted set from the given iterable of elements.
* @param elements input iterable
*/","* Returns an immutable sorted set containing the given elements sorted by their natural ordering.
   * When multiple elements are equivalent according to {@code compareTo()}, only the first one
   * specified is included. To create a copy of a {@code SortedSet} that preserves the comparator,
   * call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.
   *
   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)}
   * returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s},
   * while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>}
   * containing one element (the given set itself).
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,"com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.util.Collection)",328,331,"/**
* Creates an immutable sorted set from a collection of elements.
* @param comparator comparison function for sorting
* @param elements collection of elements to include in the set
*/","* Returns an immutable sorted set containing the given elements sorted by the given {@code
   * Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the
   * first one specified is included.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null
   * @since 7.0 (source-compatible since 2.0)",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,intersects,com.google.common.collect.ImmutableRangeSet:intersects(com.google.common.collect.Range),162,180,"/**
* Checks if the current range intersects with another.
* @param otherRange Range object to check for intersection
* @return true if ranges intersect, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,encloses,com.google.common.collect.ImmutableRangeSet:encloses(com.google.common.collect.Range),182,193,"/**
* Checks if this range encloses the given range.
* @param otherRange the Range to check against
* @return true if this range fully contains the other, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,rangeContaining,com.google.common.collect.ImmutableRangeSet:rangeContaining(java.lang.Comparable),195,210,"/**
* Finds the smallest range containing a given value.
* @param value target value to search for
* @return Range object or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,removeAll,com.google.common.collect.ForwardingListMultimap:removeAll(java.lang.Object),51,55,"/**
* Removes all elements from this collection that are equal to the specified key.
* @param key object to match for removal (may be null)
* @return list of removed elements, or empty list if none found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedListMultimap:removeAll(java.lang.Object),809,814,"/**
* Removes all elements from the list that match the given key.
* @param key object to search for in the list
* @return updated List of type V or null if original list is null
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:headMap(java.lang.Object),2310,2313,"/**
* Returns a navigable map containing all entries in this map up to but not including the entry with the key 'toKey'.
* @param toKey the upper bound of the map
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:subMap(java.lang.Object,java.lang.Object)",2370,2373,"/**
* Returns a sub-range map of the navigation map.
* @param fromKey start key (inclusive)
* @param toKey end key (exclusive)",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:tailMap(java.lang.Object),2375,2378,"/**
* Returns a navigable map containing all entries starting from the given key.
* @param fromKey key to start from
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RowSortedTable.java,rowMap,com.google.common.collect.RowSortedTable:rowMap(),55,56,"/**
* Returns a sorted map of rows to columns with values.
*/","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link
   * Table} interface.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,combine,"com.google.common.collect.TableCollectors$ImmutableTableCollectorState:combine(com.google.common.collect.TableCollectors$ImmutableTableCollectorState,java.util.function.BinaryOperator)",157,164,"/**
* Merges another collector state with this one using the provided merger function.
* @param other State to merge
* @param merger Function to combine values in case of conflicts
* @return This collector state with merged data
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,toString,com.google.common.net.MediaType:toString(),1225,1234,"/**
* Generates a string representation of this object.
* @return A human-readable string or null if not computed yet
*/","* Returns the string representation of this media type in the format described in <a
   * href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045</a>.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingMap,com.google.common.collect.Synchronized$SynchronizedNavigableMap:descendingMap(),1642,1650,"/**
* Returns a view of the map that contains all entries in reverse order.
* @return NavigableMap containing all entries in descending key order
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:headMap(java.lang.Object,boolean)",1673,1678,"/**
* Returns a map containing all entries of the underlying map whose keys are less than the specified key.
* @param toKey key up to which to include entries
* @param inclusive whether to include the entry for the specified key if it exists
* @return NavigableMap object or null if the underlying map is empty
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",1751,1757,"/**
* Returns a submap view of the underlying map.
* @param fromKey starting key
* @param fromInclusive whether to include the start key
* @param toKey ending key
* @param toInclusive whether to include the end key
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:tailMap(java.lang.Object,boolean)",1764,1769,"/**
* Returns a map view of all entries in this map with keys greater than or equal to the specified key.
* @param fromKey key to start mapping from
* @param inclusive whether to include the specified key in the result
* @return NavigableMap object or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableMap,com.google.common.collect.Synchronized:navigableMap(java.util.NavigableMap),1587,1591,"/**
* Creates a view of the given map that returns keys in ascending order.
* @param navigableMap input map to be wrapped
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedSortedSetMultimap,com.google.common.collect.Multimaps:synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap),957,961,"/**
* Returns a synchronized version of the given sorted set multimap.
* @param multimap input multimap to synchronize
*/","* Returns a synchronized (thread-safe) {@code SortedSetMultimap} backed by the specified
   * multimap.
   *
   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param multimap the multimap to be wrapped
   * @return a synchronized view of the specified multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,read,com.google.common.io.CharSource:read(),290,300,"/**
* Reads input from a stream and returns as a string.
* @throws IOException if an I/O error occurs
*/","* Reads the contents of this source as a string.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadAsync,"com.google.common.cache.LocalCache$Segment:loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)",2307,2324,"/**
* Asynchronously loads a value from the cache or computes it using the provided loader.
* @param key unique cache key
* @return ListenableFuture containing the loaded value or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,createWithExpectedSize,com.google.common.collect.CompactLinkedHashMap:createWithExpectedSize(int),76,79,"/**
* Creates a compact linked hash map with an expected size.
* @param expectedSize anticipated number of entries
*/","* Creates a {@code CompactLinkedHashMap} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactLinkedHashMap} with enough capacity to hold {@code
   *     expectedSize} elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,<init>,com.google.common.collect.CompactLinkedHashMap:<init>(),102,104,"/**
* Initializes a compact linked hash map with default capacity.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,create,com.google.common.collect.CompactLinkedHashSet:create(java.util.Collection),67,72,"/**
* Creates a compact linked hash set from the given collection.
* @param collection input collection of elements
*/","* Creates a <i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements of the
   * given collection in the order returned by the collection's iterator.
   *
   * @param collection the elements that the set should contain
   * @return a new {@code CompactLinkedHashSet} containing those elements (minus duplicates)",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,create,com.google.common.collect.TreeMultimap:create(),84,87,"/**
* Creates a new empty TreeMultimap with natural ordering for keys and values.
*/",* Creates an empty {@code TreeMultimap} ordered by the natural ordering of its keys and values.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,create,"com.google.common.collect.TreeMultimap:create(java.util.Comparator,java.util.Comparator)",96,99,"/**
* Creates a TreeMultimap instance with custom comparators for keys and values.
* @param keyComparator comparator for ordering keys
* @param valueComparator comparator for ordering values
*/","* Creates an empty {@code TreeMultimap} instance using explicit comparators. Neither comparator
   * may be null; use {@link Ordering#natural()} to specify natural order.
   *
   * @param keyComparator the comparator that determines the key ordering
   * @param valueComparator the comparator that determines the value ordering",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,<init>,"com.google.common.collect.TreeMultimap:<init>(java.util.Comparator,java.util.Comparator,com.google.common.collect.Multimap)",119,125,"/**
* Constructs a TreeMultimap from an existing Multimap.
* @param keyComparator key comparator to use
* @param valueComparator value comparator to use
* @param multimap existing Multimap to copy from
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,captureAsTypeVariable,com.google.common.reflect.TypeResolver$WildcardCapturer:captureAsTypeVariable(java.lang.reflect.Type[]),500,504,"/**
* Captures a type variable with the given upper bounds.
* @param upperBounds array of Type objects representing the bounds
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,readObject,com.google.common.collect.MapMakerInternalMap$SerializationProxy:readObject(java.io.ObjectInputStream),2899,2905,"/**
* Reads object state from an ObjectInputStream.
* @param in input stream containing serialized data
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:<init>(java.lang.String),600,602,"/**
* Initializes LockGraphNode with the specified lock name.
* @param lockName unique identifier of the lock
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,"com.google.common.util.concurrent.Striped$LargeLazyStriped:<init>(int,com.google.common.base.Supplier)",480,485,"/**
* Initializes a LargeLazyStriped instance with the specified number of stripes and supplier.
* @param stripes number of stripes to divide data into
* @param supplier function providing elements for each stripe
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,"com.google.common.util.concurrent.AbstractFuture$TrustedFuture:get(long,java.util.concurrent.TimeUnit)",99,105,"/**
* Retrieves a value with specified timeout.
* @param timeout maximum wait time in given unit
* @param unit unit of timeout (e.g. seconds, milliseconds) 
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,addNode,com.google.common.graph.StandardMutableValueGraph:addNode(java.lang.Object),60,71,"/**
* Adds a new node to the collection.
* @param node Node object to be added
* @return True if added successfully; False if already exists
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,putEdgeValue,"com.google.common.graph.StandardMutableValueGraph:putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object)",85,110,"/**
* Adds an edge between two nodes with a given value.
* @param nodeU first node
* @param nodeV second node
* @param value edge value to associate
* @return previous edge value or null if new edge added",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,doForward,com.google.common.base.CaseFormat$StringConverter:doForward(java.lang.String),178,181,"/**
* Formats input string according to target format.
* @param s input string to be formatted
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,doBackward,com.google.common.base.CaseFormat$StringConverter:doBackward(java.lang.String),183,186,"/**
* Formats input string to target format.
* @param s input string to transform
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesAllOf,com.google.common.base.CharMatcher$Negated:matchesAllOf(java.lang.CharSequence),1530,1533,"/**
* Checks if input sequence matches none of original patterns.
* @param sequence input character sequence to match against
* @return true if sequence does not match any pattern, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesAnyOf,com.google.common.base.CharMatcher:matchesAnyOf(java.lang.CharSequence),496,498,"/**
* Checks if input sequence matches any of predefined patterns.
* @return true if sequence matches any pattern, false otherwise
*/","* Returns {@code true} if a character sequence contains at least one matching BMP character.
   * Equivalent to {@code !matchesNoneOf(sequence)}.
   *
   * <p>The default implementation iterates over the sequence, invoking {@link #matches} for each
   * character, until this returns {@code true} or the end is reached.
   *
   * @param sequence the character sequence to examine, possibly empty
   * @return {@code true} if this matcher matches at least one character in the sequence
   * @since 8.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,retainFrom,com.google.common.base.CharMatcher:retainFrom(java.lang.CharSequence),657,659,"/**
* Removes characters from a given sequence based on negation operation.
* @param sequence input character sequence
*/","* Returns a string containing all matching BMP characters of a character sequence, in order. For
   * example:
   *
   * {@snippet :
   * CharMatcher.is('a').retainFrom(""bazaar"")
   * }
   *
   * ... returns {@code ""aaa""}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,replaceFrom,"com.google.common.base.CharMatcher:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)",714,742,"/**
* Replaces a sequence of characters with a replacement string.
* @param sequence CharSequence to modify
* @param replacement replacement string
* @return modified CharSequence or original if not found
*/","* Returns a string copy of the input character sequence, with each matching BMP character
   * replaced by a given replacement sequence. For example:
   *
   * {@snippet :
   * CharMatcher.is('a').replaceFrom(""yaha"", ""oo"")
   * }
   *
   * ... returns {@code ""yoohoo""}.
   *
   * <p><b>Note:</b> If the replacement is a fixed string with only one character, you are better
   * off calling {@link #replaceFrom(CharSequence, char)} directly.
   *
   * @param sequence the character sequence to replace matching characters in
   * @param replacement the characters to append to the result string in place of each matching
   *     character in {@code sequence}
   * @return the new string",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getCoercedIPv4Address,com.google.common.net.InetAddresses:getCoercedIPv4Address(java.net.InetAddress),997,1039,"/**
* Converts an InetAddress to a coerced IPv4 address, handling special cases and embedded IPv6 addresses.
* @param ip the input InetAddress
* @return Inet4Address object or null if not found
*/","* Coerces an IPv6 address into an IPv4 address.
   *
   * <p>HACK: As long as applications continue to use IPv4 addresses for indexing into tables,
   * accounting, et cetera, it may be necessary to <b>coerce</b> IPv6 addresses into IPv4 addresses.
   * This method does so by hashing 64 bits of the IPv6 address into {@code 224.0.0.0/3} (64 bits
   * into 29 bits):
   *
   * <ul>
   *   <li>If the IPv6 address contains an embedded IPv4 address, the function hashes that.
   *   <li>Otherwise, it hashes the upper 64 bits of the IPv6 address.
   * </ul>
   *
   * <p>A ""coerced"" IPv4 address is equivalent to itself.
   *
   * <p>NOTE: This method is failsafe for security purposes: ALL IPv6 addresses (except localhost
   * (::1)) are hashed to avoid the security risk associated with extracting an embedded IPv4
   * address that might permit elevated privileges.
   *
   * @param ip {@link InetAddress} to ""coerce""
   * @return {@link Inet4Address} represented ""coerced"" address
   * @since 7.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putString,"com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putString(java.lang.CharSequence,java.nio.charset.Charset)",353,397,"/**
* Encodes CharSequence to Hasher using UTF-8 encoding.
* Optimizes for ASCII and handles surrogate pairs efficiently.
* @param input the string to encode
* @param charset the character set (currently only UTF-8 is optimized)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,com.google.common.hash.AbstractCompositeHashFunction$1:putBytes(byte[]),62,64,"/**
* Updates the hasher with the given byte array.
* @param bytes input data to be hashed
* @return this Hasher instance (for chaining)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashBytes,com.google.common.hash.AbstractHashFunction:hashBytes(byte[]),59,62,"/**
* Returns hash code of given byte array.
* @param input byte array to be hashed
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readFully,com.google.common.io.LittleEndianDataInputStream:readFully(byte[]),63,66,"/**
 * Reads fully from this input stream into the provided byte array.
 * @param b the byte array to fill with data
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,iterator,com.google.common.collect.ForwardingCollection:iterator(),59,62,"/**
 * Returns an iterator over elements in this collection.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,size,com.google.common.collect.ForwardingCollection:size(),64,67,"/**
* Returns the size of the underlying collection.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,removeAll,com.google.common.collect.ForwardingCollection:removeAll(java.util.Collection),69,73,"/**
* Removes all elements from this set that are also contained in the specified collection.
* @param collection collection of elements to remove
* @return true if the set changed, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,isEmpty,com.google.common.collect.ForwardingCollection:isEmpty(),75,78,"/**
* Checks if the collection is empty.
* @return true if collection has no elements, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,contains,com.google.common.collect.ForwardingCollection:contains(java.lang.Object),80,83,"/**
* Checks if a given object is contained in this collection.
* @param object the object to search for (may be null)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,add,com.google.common.collect.ForwardingCollection:add(java.lang.Object),85,89,"/**
* Adds an element to this collection.
* @param element the element to be added
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,remove,com.google.common.collect.ForwardingCollection:remove(java.lang.Object),91,95,"/**
* Removes an object from this collection.
* @param object the object to remove (may be null)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,containsAll,com.google.common.collect.ForwardingCollection:containsAll(java.util.Collection),97,100,"/**
* Checks if the collection contains all elements.
* @param collection Collection of objects to check
* @return true if collection is a superset, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,addAll,com.google.common.collect.ForwardingCollection:addAll(java.util.Collection),102,106,"/**
* Adds all elements from the specified collection to this set.
* @param collection collection of elements to add
* @return true if any element was added, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,retainAll,com.google.common.collect.ForwardingCollection:retainAll(java.util.Collection),108,112,"/**
* Retains all elements from this set that are contained in the specified collection.
* @param collection collection of elements to retain
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,clear,com.google.common.collect.ForwardingCollection:clear(),114,117,"/**
 * Clears all data in this object by delegating to its underlying implementation. 
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,toArray,com.google.common.collect.ForwardingCollection:toArray(),119,122,"/**
* Returns an array representation of this collection.
* @return Array containing all elements in this collection or null if empty
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,toArray,com.google.common.collect.ForwardingCollection:toArray(java.lang.Object[]),124,129,"/**
* Converts this collection to a specified array type.
* @param array the array to fill with collection elements
* @return the filled array or null if array is null
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,java.time.Duration)",165,167,"/**
* Creates a rate limiter with specified permits per second and warm-up period.
* @param permitsPerSecond maximum permits allowed per second
* @param warmupPeriod duration for initial warm-up before limiting kicks in
*/","* Creates a {@code RateLimiter} with the specified stable throughput, given as ""permits per
   * second"" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>,
   * during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum
   * rate at the end of the period (as long as there are enough requests to saturate it). Similarly,
   * if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it
   * will gradually return to its ""cold"" state, i.e. it will go through the same warming up process
   * as when it was first created.
   *
   * <p>The returned {@code RateLimiter} is intended for cases where the resource that actually
   * fulfills the requests (e.g., a remote server) needs ""warmup"" time, rather than being
   * immediately accessed at the stable (maximum) rate.
   *
   * <p>The returned {@code RateLimiter} starts in a ""cold"" state (i.e. the warmup period will
   * follow), and if it is left unused for long enough, it will return to that state.
   *
   * @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many
   *     permits become available per second
   * @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate,
   *     before reaching its stable (maximum) rate
   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code
   *     warmupPeriod} is negative
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,headMultiset,"com.google.common.collect.UnmodifiableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",97,100,"/**
* Returns a read-only sorted multiset with elements less than the specified upper bound.
* @param upperBound element to consider as an upper limit
* @param boundType type of bound (e.g., inclusive or exclusive)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,subMultiset,"com.google.common.collect.UnmodifiableSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",102,110,"/**
* Creates a sub-multiset from the current multiset within a specified range.
* @param lowerBound lower bound of the range
* @param lowerBoundType type of the lower bound
* @param upperBound upper bound of the range
* @param upperBoundType type of the upper bound
* @return SortedMultiset object for the sub-range or null if empty
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,tailMultiset,"com.google.common.collect.UnmodifiableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",112,115,"/**
* Returns an unmodifiable sorted multiset for the tail of elements.
* @param lowerBound lower bound element
* @param boundType type of boundary (inclusive or exclusive)",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,unmodifiableCollectionSubclass,com.google.common.collect.AbstractSortedSetMultimap:unmodifiableCollectionSubclass(java.util.Collection),59,67,"/**
* Returns an unmodifiable view of the provided collection, 
* delegating to a navigable or sorted set if applicable. 
* @param collection input collection to be wrapped 
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,navigableKeySet,com.google.common.collect.Maps$UnmodifiableNavigableMap:navigableKeySet(),3597,3600,"/**
* Returns an unmodifiable NavigableSet view of the key set.
* @return a NavigableSet containing all keys in this map, backed by the delegate's key set
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingKeySet,com.google.common.collect.Maps$UnmodifiableNavigableMap:descendingKeySet(),3602,3605,"/**
* Returns an unmodifiable NavigableSet of keys in descending order.
* @return set of keys or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableCollectionSubclass,com.google.common.collect.Multimaps$CustomMultimap:unmodifiableCollectionSubclass(java.util.Collection),240,254,"/**
* Returns an unmodifiable view of the given collection, 
* using a suitable implementation based on its type. 
* @param collection input collection to be made unmodifiable
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableCollectionSubclass,com.google.common.collect.Multimaps$CustomSetMultimap:unmodifiableCollectionSubclass(java.util.Collection),447,457,"/**
* Returns an unmodifiable Collection view of the given Collection.
* @param collection input Collection to be wrapped
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets$UnmodifiableNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",2042,2050,"/**
* Returns a view of the range [fromElement, toElement] (inclusive or exclusive).
* @param fromElement starting element
* @param fromInclusive whether start is inclusive
* @param toElement ending element
* @param toInclusive whether end is inclusive
* @return NavigableSet containing elements in the specified range",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,headSet,"com.google.common.collect.Sets$UnmodifiableNavigableSet:headSet(java.lang.Object,boolean)",2052,2055,"/**
* Returns a view of elements in this set strictly less than the given element.
* @param toElement element to include or exclude from head set
* @param inclusive true if element is included, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,tailSet,"com.google.common.collect.Sets$UnmodifiableNavigableSet:tailSet(java.lang.Object,boolean)",2057,2060,"/**
* Returns a view of elements in this set whose lower bound is greater than or equal to the given element.
* @param fromElement lower bound element
* @param inclusive whether to include the element itself in the result
* @return NavigableSet containing elements starting from fromElement (inclusive if specified)",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,createElementSet,com.google.common.collect.UnmodifiableSortedMultiset:createElementSet(),54,57,"/**
* Returns an unmodifiable set of elements using the delegate's element set.
* @return UnmodifiableNavigableSet containing the delegate's elements.",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SetMultimap.java,entries,com.google.common.collect.SetMultimap:entries(),97,98,"/**
* Returns an unmodifiable set of key-value entry pairs.
* @return Set of Entry objects containing keys and values.","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}
   * interface.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:subMap(java.lang.Object,java.lang.Object)",3607,3610,"/**
* Returns a sorted map containing entries from the given key range.
* @param fromKey start of the range (inclusive)
* @param toKey end of the range (exclusive)",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$UnmodifiableNavigableMap:headMap(java.lang.Object),3622,3625,"/**
* Returns a sorted map containing all entries up to but not including the key.
* @param toKey upper bound of the returned map
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$UnmodifiableNavigableMap:tailMap(java.lang.Object),3632,3635,"/**
* Returns a view of the map's portion of the key range [fromKey, infinity).
* @param fromKey starting key for the view
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,schedule,"com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",43,44,"/**
* Schedules a one-time execution of a Runnable command after a specified delay. 
* @param command the task to be executed
* @param delay time to wait before executing the command
* @param unit time unit for the delay (e.g., seconds, milliseconds)",* @since 15.0 (previously returned ScheduledFuture),,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,build,com.google.common.cache.CacheBuilder:build(com.google.common.cache.CacheLoader),1029,1033,"/**
* Builds a weighted cache with the given cache loader.
* @param loader CacheLoader instance for loading values
*/","* Builds a cache, which either returns an already-loaded value for a given key or atomically
   * computes or retrieves it using the supplied {@code CacheLoader}. If another thread is currently
   * loading the value for this key, simply waits for that thread to finish and returns its loaded
   * value. Note that multiple threads can concurrently load values for distinct keys.
   *
   * <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be
   * invoked again to create multiple independent caches.
   *
   * @param loader the cache loader used to obtain new values
   * @return a cache having the requested features",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,build,com.google.common.cache.CacheBuilder:build(),1047,1051,"/**
* Builds a local cache instance with the current configuration.
*/","* Builds a cache which does not automatically load values when keys are requested.
   *
   * <p>Consider {@link #build(CacheLoader)} instead, if it is feasible to implement a {@code
   * CacheLoader}.
   *
   * <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be
   * invoked again to create multiple independent caches.
   *
   * @return a cache having the requested features
   * @since 11.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,orderedBy,com.google.common.collect.ImmutableSortedMultiset:orderedBy(java.util.Comparator),407,409,"/**
* Creates an ordered builder using the provided comparator.
* @param comparator function to determine order of elements
*/","* Returns a builder that creates immutable sorted multisets with an explicit comparator. If the
   * comparator has a more general type than the set being generated, such as creating a {@code
   * SortedMultiset<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor
   * instead.
   *
   * @throws NullPointerException if {@code comparator} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,reverseOrder,com.google.common.collect.ImmutableSortedMultiset:reverseOrder(),419,421,"/**
* Creates a builder with elements in descending order. 
* @return Builder instance with reversed ordering
*/","* Returns a builder that creates immutable sorted multisets whose elements are ordered by the
   * reverse of their natural ordering.
   *
   * <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code
   * Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a
   * href=""https://bugs.openjdk.org/browse/JDK-6468354"">JDK-6468354</a>.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,naturalOrder,com.google.common.collect.ImmutableSortedMultiset:naturalOrder(),433,435,"/**
* Creates a builder with a natural ordering comparator.
* @return Builder instance with natural ordering
*/","* Returns a builder that creates immutable sorted multisets whose elements are ordered by their
   * natural ordering. The sorted multisets use {@link Ordering#natural()} as the comparator. This
   * method provides more type-safety than {@link #builder}, as it can be called only for classes
   * that implement {@link Comparable}.
   *
   * <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code
   * Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a
   * href=""https://bugs.openjdk.org/browse/JDK-6468354"">JDK-6468354</a>.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,create,com.google.common.collect.EnumBiMap:create(java.util.Map),83,88,"/**
* Creates a bidirectional enum map from the given key-value map.
* @param map input map of enums to enums
*/","* Returns a new bimap with the same mappings as the specified map. If the specified map is an
   * {@code EnumBiMap}, the new bimap has the same types as the provided map. Otherwise, the
   * specified map must contain at least one mapping, in order to determine the key and value types.
   *
   * @param map the map whose mappings are to be placed in this map
   * @throws IllegalArgumentException if map is not an {@code EnumBiMap} instance and contains no
   *     mappings",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,create,com.google.common.collect.EnumHashBiMap:create(java.util.Map),71,76,"/**
* Creates an EnumHashBiMap from a given Map.
* @param map input map with enum keys and values
*/","* Constructs a new bimap with the same mappings as the specified map. If the specified map is an
   * {@code EnumHashBiMap} or an {@link EnumBiMap}, the new bimap has the same key type as the input
   * bimap. Otherwise, the specified map must contain at least one mapping, in order to determine
   * the key type.
   *
   * @param map the map whose mappings are to be placed in this map
   * @throws IllegalArgumentException if map is not an {@code EnumBiMap} or an {@code EnumHashBiMap}
   *     instance and contains no mappings",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedSetMultimap.java,replaceValues,"com.google.common.collect.SortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",88,90,"/**
* Replaces existing values associated with the specified key in this map.
* @param key the key to replace values for
* @param values new values to associate with the key
* @return this map, or null if the key is not present
*/","* Stores a collection of values with the same key, replacing any existing values for that key.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link java.util.Collection} specified in the
   * {@link Multimap} interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,replaceValues,"com.google.common.collect.ForwardingSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",62,66,"/**
* Replaces values associated with a given key.
* @param key unique identifier for replacement
* @param values new values to be assigned
* @return set of replaced values or empty set if none exist
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,isPermutation,"com.google.common.collect.Collections2:isPermutation(java.util.List,java.util.List)",694,701,"/**
* Checks if two lists are permutations of each other.
* @param first first list
* @param second second list
* @return true if lists are permutations, false otherwise
*/",Returns {@code true} if the second list is a permutation of the first.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,predecessorsMultiset,com.google.common.graph.DirectedMultiNetworkConnections:predecessorsMultiset(),69,76,"/**
* Returns a multiset of node IDs that are predecessors in the graph.
* @return Multiset containing predecessor node IDs
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,successorsMultiset,com.google.common.graph.DirectedMultiNetworkConnections:successorsMultiset(),85,92,"/**
* Returns a multiset of nodes that are successors to the current node.
* @return Multiset of successor nodes, or null if not initialized
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,adjacentNodesMultiset,com.google.common.graph.UndirectedMultiNetworkConnections:adjacentNodesMultiset(),65,72,"/**
* Creates or retrieves a multiset of adjacent nodes.
* @return Multiset of adjacent nodes, lazily initialized if null
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,create,com.google.common.collect.ArrayListMultimap:create(),77,80,"/**
* Creates an empty multimap with object keys and values. 
*/","* Creates a new, empty {@code ArrayListMultimap} with the default initial capacities.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().arrayListValues().build()}, which provides more control over the
   * underlying data structure.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,create,com.google.common.collect.ArrayListMultimap:create(com.google.common.collect.Multimap),109,112,"/**
* Creates a new ArrayListMultimap instance from the given Multimap.
* @param multimap existing Multimap to copy elements from
*/","* Constructs an {@code ArrayListMultimap} with the same mappings as the specified multimap.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().arrayListValues().build(multimap)}, which provides more control over
   * the underlying data structure.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,create,com.google.common.collect.HashMultimap:create(),66,69,"/**
* Creates an empty multimap with type parameters K and V.
* @return a newly created HashMultimap instance
*/","* Creates a new, empty {@code HashMultimap} with the default initial capacities.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().hashSetValues().build()}, which provides more control over the
   * underlying data structure.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,create,com.google.common.collect.LinkedListMultimap:create(),151,154,"/**
* Creates an empty LinkedList-based multimap.
*/","Creates a new, empty {@code LinkedListMultimap} with the default initial capacity.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,create,com.google.common.collect.LinkedListMultimap:create(com.google.common.collect.Multimap),175,178,"/**
* Creates a LinkedListMultimap from an existing Multimap.
* @param multimap input multimap to copy
*/","* Constructs a {@code LinkedListMultimap} with the same mappings as the specified {@code
   * Multimap}. The new multimap has the same {@link Multimap#entries()} iteration order as the
   * input multimap.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,create,com.google.common.collect.LinkedHashMultimap:create(com.google.common.collect.Multimap),119,124,"/**
* Creates a new linked hash multimap from an existing one.
* @param multimap source multimap
*/","* Constructs a {@code LinkedHashMultimap} with the same mappings as the specified multimap. If a
   * key-value mapping appears multiple times in the input multimap, it only appears once in the
   * constructed multimap. The new multimap has the same {@link Multimap#entries()} iteration order
   * as the input multimap, except for excluding duplicate mappings.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,build,com.google.common.graph.NetworkBuilder:build(),194,196,"/**
* Builds and returns a mutable network instance.
*/",Returns an empty {@link MutableNetwork} with the properties of this {@link NetworkBuilder}.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,<init>,com.google.common.graph.StandardMutableGraph:<init>(com.google.common.graph.AbstractGraphBuilder),35,37,"/**
* Initializes a graph using an AbstractGraphBuilder.
* @param builder Graph configuration builder
*/",Constructs a {@link MutableGraph} with the properties specified in {@code builder}.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,build,com.google.common.graph.ValueGraphBuilder:build(),189,191,"/**
* Builds and returns an instance of StandardMutableValueGraph.
* @return a new instance of StandardMutableValueGraph
*/","* Returns an empty {@link MutableValueGraph} with the properties of this {@link
   * ValueGraphBuilder}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,putAll,com.google.common.collect.ImmutableTable$Builder:putAll(com.google.common.collect.Table),251,257,"/**
* Puts all cells from the given table into this builder.
* @param table Table containing data to be added
*/","* Associates all of the given table's keys and values in the built table. Duplicate row key
     * column key pairs are not allowed, and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code table} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,putAll,com.google.common.collect.ImmutableBiMap$Builder:putAll(java.lang.Iterable),395,400,"/**
* Adds all key-value pairs from an iterable of entries.
* @param entries collection of entries to add
* @return this Builder instance for method chaining
*/","* Adds all of the given entries to the built bimap. Duplicate keys or values are not allowed,
     * and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key, value, or entry is null
     * @since 19.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,putAll,com.google.common.collect.ImmutableMap$Builder:putAll(java.util.Map),479,482,"/**
* Adds all entries from the given map to this builder.
* @param map input map containing key-value pairs
*/","* Associates all of the given map's keys and values in the built map. If the same key is put
     * more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep
     * the last value put for that key.
     *
     * @throws NullPointerException if any key or value in {@code map} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,putAll,com.google.common.collect.ImmutableSortedMap$Builder:putAll(java.lang.Iterable),671,676,"/**
* Adds multiple key-value pairs from the given iterable.
* @param entries iterable of entries to add
* @return this builder instance for method chaining
*/","* Adds all the given entries to the built map. Duplicate keys, according to the comparator
     * (which might be the keys' natural order), are not allowed, and will cause {@link #build} to
     * fail.
     *
     * @throws NullPointerException if any key, value, or entry is null
     * @since 19.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,get,com.google.common.collect.FilteredEntryMultimap$AsMap:get(java.lang.Object),186,196,"/**
* Retrieves filtered collection of values by key.
* @param key unique identifier or key object
* @return Collection of values or null if empty or not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,get,com.google.common.collect.FilteredEntryMultimap:get(java.lang.Object),124,127,"/**
* Retrieves collection of values associated with the given key.
* @param key unique identifier or attribute name
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,createEntries,com.google.common.collect.FilteredEntryMultimap:createEntries(),129,132,"/**
* Creates a filtered collection of entries based on a given predicate. 
* @return A collection of entries that match the predicate or an empty collection if none found.",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,removeEntriesIf,com.google.common.collect.FilteredEntryMultimap:removeEntriesIf(com.google.common.base.Predicate),154,172,"/**
* Removes entries from the map that match a given predicate.
* @param predicate condition to filter entries
* @return true if any entries were removed, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryBiMap:<init>(com.google.common.collect.BiMap,com.google.common.base.Predicate,com.google.common.collect.BiMap)",3377,3381,"/**
* Creates a filtered entry bi-map from the given delegate and inverse maps.
* @param delegate original bi-map to filter
* @param predicate filtering condition for entries
* @param inverse inverse map of the filtered bi-map
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryNavigableMap:<init>(java.util.NavigableMap,com.google.common.base.Predicate)",3238,3243,"/**
* Creates a filtered map from an unfiltered map, only retaining entries that match a given predicate.
* @param unfiltered original map to filter
* @param entryPredicate condition for which entries are retained
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntrySortedMap:<init>(java.util.SortedMap,com.google.common.base.Predicate)",3126,3129,"/**
* Creates a filtered sorted map from an existing one.
* @param unfiltered original sorted map
* @param entryPredicate predicate to filter entries
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate)",2803,2807,"/**
* Creates a filtered view of the specified map with an additional filter.
* @param map original AbstractFilteredMap instance
* @param entryPredicate predicate to apply on each entry
*/","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * map.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,degree,com.google.common.graph.AbstractNetwork:degree(java.lang.Object),144,151,"/**
* Calculates the degree of a node in the graph.
* @param node the node for which to calculate the degree
* @return total number of incident edges (directed) or connections (undirected)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgesConnecting,com.google.common.graph.AbstractNetwork:edgesConnecting(com.google.common.graph.EndpointPair),184,188,"/**
* Retrieves a set of edges connecting two given nodes.
* @param endpoints pair of nodes (U and V) for which to find edges
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnectingOrNull,"com.google.common.graph.AbstractNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)",205,216,"/**
* Retrieves the edge connecting two nodes or returns null if none.
* @param nodeU first node
* @param nodeV second node
* @return Edge object or null if no connection found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setValue,com.google.common.collect.CompactHashMap$MapEntry:setValue(java.lang.Object),934,950,"/**
* Sets the value associated with a given key.
* @param value new value to store
* @return previous value if present; null otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,readObject,com.google.common.collect.CompactHashMap:readObject(java.io.ObjectInputStream),1126,1140,"/**
* Deserializes object from stream and populates collection.
* @throws IOException on serialization errors
* @throws ClassNotFoundException if unknown class encountered
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,readObject,com.google.common.collect.CompactHashSet:readObject(java.io.ObjectInputStream),707,720,"/**
* Deserializes object from stream, initializing and populating collection.
*@throws InvalidObjectException if invalid size is encountered
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSortedMap,"com.google.common.collect.CollectCollectors:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function)",209,227,"/**
* Converts a stream of objects to an immutable sorted map with specified key and value functions.
* @param comparator key comparison function
* @param keyFunction extracts the key from each object
* @param valueFunction extracts the value from each object
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,headMultiset,"com.google.common.collect.DescendingImmutableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",70,73,"/**
* Returns an immutable sorted multiset of elements less than the given upper bound.
* @param upperBound element value to consider as upper limit
* @param boundType type of bound comparison (inclusion or exclusion)
* @return ImmutableSortedMultiset containing elements less than the upper bound, empty if none",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,tailMultiset,"com.google.common.collect.DescendingImmutableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",75,78,"/**
* Returns a multiset of elements greater than the specified lower bound.
* @param lowerBound element to serve as upper bound for the returned multiset
* @param boundType type of boundary (e.g. inclusive or exclusive)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,addAll,com.google.common.collect.ImmutableRangeSet$Builder:addAll(com.google.common.collect.RangeSet),784,787,"/**
* Adds all ranges from the given RangeSet to this builder.
*/","* Add all ranges from the specified range set to this builder. Adjacent ranges are permitted
     * and will be merged, but overlapping ranges will cause an exception when {@link #build()} is
     * called.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,combine,com.google.common.collect.ImmutableRangeSet$Builder:combine(com.google.common.collect.ImmutableRangeSet$Builder),804,808,"/**
* Merges another builder's ranges into this one.
* @param builder Builder to merge, must be of same type C
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,remove,com.google.common.collect.TreeRangeSet$Complement:remove(com.google.common.collect.Range),661,664,"/**
* Removes a specified range from this tree range set.
* @param rangeToRemove range to be removed
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,add,com.google.common.collect.TreeRangeSet$SubRangeSet:add(com.google.common.collect.Range),890,898,"/**
* Adds a range to the parent RangeSet.
* @param rangeToAdd range to be added
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,add,com.google.common.collect.TreeRangeSet$Complement:add(com.google.common.collect.Range),656,659,"/**
* Removes the specified range from the tree set.
* @param rangeToAdd Range to be removed
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,remove,com.google.common.collect.TreeRangeSet$SubRangeSet:remove(com.google.common.collect.Range),900,905,"/**
* Removes specified range from this tree range set.
* @param rangeToRemove Range to be removed, must intersect with this set's restriction
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,clear,com.google.common.collect.TreeRangeSet$SubRangeSet:clear(),912,915,"/**
* Removes all restrictions from this range set.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subRangeSet,com.google.common.collect.ImmutableRangeSet:subRangeSet(com.google.common.collect.Range),515,526,"/**
* Returns a subset of ranges that intersect with the given range.
* @param range range to intersect with
* @return sub-range set or original range if fully contained, empty if not found
*/",Returns a view of the intersection of this range set with the given range.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closed,"com.google.common.collect.ContiguousSet:closed(int,int)",105,107,"/**
* Creates a contiguous set of integers from the given range.
* @param lower inclusive lower bound
* @param upper exclusive upper bound
*/","* Returns a nonempty contiguous set containing all {@code int} values from {@code lower}
   * (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code
   * Range.closed(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closed,"com.google.common.collect.ContiguousSet:closed(long,long)",117,119,"/**
* Creates a contiguous set of numbers in the range [lower, upper].
* @param lower lowest value (inclusive)
* @param upper highest value (inclusive)
*/","* Returns a nonempty contiguous set containing all {@code long} values from {@code lower}
   * (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code
   * Range.closed(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closedOpen,"com.google.common.collect.ContiguousSet:closedOpen(int,int)",129,131,"/**
* Creates a contiguous set of integers from an open range.
* @param lower lower bound (inclusive)
* @param upper upper bound (exclusive)
*/","* Returns a contiguous set containing all {@code int} values from {@code lower} (inclusive) to
   * {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the
   * same values contained in {@code Range.closedOpen(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closedOpen,"com.google.common.collect.ContiguousSet:closedOpen(long,long)",141,143,"/**
* Creates a contiguous set of discrete values from the closed-open range [lower, upper).
* @param lower lower bound (inclusive)
* @param upper upper bound (exclusive)
*/","* Returns a contiguous set containing all {@code long} values from {@code lower} (inclusive) to
   * {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the
   * same values contained in {@code Range.closedOpen(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,size,com.google.common.collect.ImmutableRangeSet$AsSet:size(),580,595,"/**
* Calculates the approximate number of elements in this set.
* @return The estimated size, or 0 if unknown
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,indexOf,com.google.common.collect.ImmutableRangeSet$AsSet:indexOf(java.lang.Object),678,694,"/**
* Searches for the index of an object in a set of ranges.
* @param target Object to search for
* @return Index if found, -1 otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,intersectionInCurrentDomain,com.google.common.collect.RegularContiguousSet:intersectionInCurrentDomain(com.google.common.collect.Range),47,51,"/**
* Computes the intersection of this contiguous set with another in the current domain.
* @param other Range to intersect
* @return Intersection result or empty set if disconnected
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,intersection,com.google.common.collect.RegularContiguousSet:intersection(com.google.common.collect.ContiguousSet),195,209,"/**
* Computes the intersection of this contiguous set with another.
* @param other The set to intersect with
* @return A contiguous set representing the intersection or an empty set if they do not overlap
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,containsKey,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:containsKey(java.lang.Object),654,657,"/**
* Checks if a map entry exists by its key.
* @param key object to search for in map
* @return true if entry found, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)",481,488,"/**
* Creates a sub-range NavigableMap within the given cut boundaries.
* @param fromKey starting key
* @param fromInclusive whether start is inclusive
* @param toKey ending key
* @param toInclusive whether end is inclusive
* @return NavigableMap of Cut<C> keys and Range<C> values
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,headMap,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:headMap(com.google.common.collect.Cut,boolean)",490,493,"/**
* Returns a navigable map with all entries up to the specified cut key.
* @param toKey cut key
* @param inclusive whether to include the cut key itself
* @return NavigableMap with entries up to and possibly including toKey
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,tailMap,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:tailMap(com.google.common.collect.Cut,boolean)",495,498,"/**
* Returns a map of elements starting from the given key (inclusive or exclusive).
* @param fromKey the start key
* @param inclusive whether to include the start key in the result
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,"com.google.common.collect.TreeRangeSet$RangesByUpperBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)",313,320,"/**
* Returns a sub-range map with specified bounds.
* @param fromKey key of the lower bound
* @param fromInclusive whether the lower bound is inclusive
* @param toKey key of the upper bound
* @param toInclusive whether the upper bound is inclusive
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,headMap,"com.google.common.collect.TreeRangeSet$RangesByUpperBound:headMap(com.google.common.collect.Cut,boolean)",322,325,"/**
* Returns a navigable map containing all keys less than the specified key.
* @param toKey key to truncate at
* @param inclusive whether to include the key in the result
* @return NavigableMap of Cut objects or null if empty
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,tailMap,"com.google.common.collect.TreeRangeSet$RangesByUpperBound:tailMap(com.google.common.collect.Cut,boolean)",327,330,"/**
* Returns a map of elements with keys greater than or equal to the specified cut.
* @param fromKey Cut object representing the starting key
* @param inclusive true if the start key is included, false otherwise
* @return NavigableMap containing tail elements or null if empty
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)",713,722,"/**
* Returns a navigable map of keys within the specified range.
* @param fromKey start key
* @param fromInclusive whether start is inclusive
* @param toKey end key
* @param toInclusive whether end is inclusive
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,headMap,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:headMap(com.google.common.collect.Cut,boolean)",724,727,"/**
* Returns a navigable map of keys up to the specified cut point.
* @param toKey cut point
* @param inclusive whether to include the cut point itself
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,tailMap,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:tailMap(com.google.common.collect.Cut,boolean)",729,732,"/**
* Returns a map of elements greater than or equal to the specified key.
* @param fromKey Cut object representing the start key
* @param inclusive true if the start key is inclusive, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,containsKey,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:containsKey(java.lang.Object),739,742,"/**
* Checks if map contains a given key.
* @param key object to search for
* @return true if found, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,coalescedRange,"com.google.common.collect.TreeRangeMap:coalescedRange(com.google.common.collect.Range,java.lang.Object)",159,170,"/**
* Coalesces a range with a single point or another range.
* @param range original range
* @param value point to merge with
*/",Computes the coalesced range for the given range+value - does not mutate the map.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,readResolve,com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm:readResolve(),732,734,"/**
* Converts ranges to an immutable set within the specified domain.
* @return ImmutableSet object representing the range set
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap:remove(com.google.common.collect.Range),211,259,"/**
* Removes the specified range from this RangeMap.
* @param rangeToRemove the range to be removed
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,split,com.google.common.collect.TreeRangeMap:split(com.google.common.collect.Cut),261,278,"/**
 * Splits the specified Cut into two parts and updates the RangeMap accordingly.
 * @param cut the Cut to split
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addNodeInternal,com.google.common.graph.StandardMutableNetwork:addNodeInternal(java.lang.Object),69,74,"/**
* Adds a new node and returns its associated network connections.
* @param node the newly added node
*/","* Adds {@code node} to the graph and returns the associated {@link NetworkConnections}.
   *
   * @throws IllegalStateException if {@code node} is already present",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableEnumMap,"com.google.common.collect.CollectCollectors:toImmutableEnumMap(java.util.function.Function,java.util.function.Function)",257,283,"/**
* Converts a stream of objects to an immutable enum map.
* @param keyFunction function to extract the enum key from each object
* @param valueFunction function to extract the map value from each object
* @return ImmutableMap with enum keys and values, or empty if no input
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableEnumMap,"com.google.common.collect.CollectCollectors:toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",285,309,"/**
* Converts a stream of objects to an immutable enum map.
* @param keyFunction maps each object to an enum key
* @param valueFunction maps each object to a map value
* @param mergeFunction combines values for duplicate keys
* @return ImmutableMap with enum keys and user-specified values
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,copyOf,com.google.common.collect.ImmutableMap:copyOf(java.util.Map),687,703,"/**
* Creates an immutable map by copying a given map's contents.
* @param map the original map to be copied
*/","* Returns an immutable map containing the same entries as {@code map}. The returned map iterates
   * over entries in the same order as the {@code entrySet} of the original map. If {@code map}
   * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose
   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code map} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,row,com.google.common.collect.ImmutableTable:row(java.lang.Object),362,367,"/**
* Retrieves a row from the map by its key.
* @param rowKey unique identifier for the row
* @return an empty map if not found or null
*/","* {@inheritDoc}
   *
   * @throws NullPointerException if {@code rowKey} is {@code null}",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,rowKeySet,com.google.common.collect.ImmutableTable:rowKeySet(),369,372,"/**
* Returns an immutable set of row keys.
* @return Set of row keys in this data structure.",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,removeRange,"com.google.common.collect.Lists$ReverseList:removeRange(int,int)",902,905,"/**
* Removes elements in the specified range.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,iterator,com.google.common.collect.DescendingImmutableSortedSet:iterator(),47,50,"/**
* Returns an unmodifiable iterator over elements in this collection.
* The returned iterator is a view into the underlying collection and does not support removals. 
* @return Iterator object or null if empty
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,lower,com.google.common.collect.ImmutableSortedSet:lower(java.lang.Object),721,725,"/**
* Returns the smallest element in this set that is greater than or equal to the specified element.
* @param e element to find a lower bound for
* @return Smallest element >= e or null if not found
*/",* @since 12.0,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,floor,com.google.common.collect.ImmutableSortedSet:floor(java.lang.Object),730,733,"/**
* Returns the largest element in the set that is less than or equal to the given value.
* @param e input value
* @return closest element in the set or null if not found
*/",* @since 12.0,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,last,com.google.common.collect.ImmutableSortedSet:last(),757,760,"/**
* Retrieves the last element in the iteration order.
* @return The last element of type E or null if empty.",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newTypeVariableImpl,"com.google.common.reflect.Types:newTypeVariableImpl(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])",316,324,"/**
* Creates a proxy for a TypeVariable instance.
* @param genericDeclaration parent GenericDeclaration
* @param name variable name
* @param bounds variable bounds (may be empty)
* @return TypeVariable object or null if not created
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.util.Iterator),272,283,"/**
* Creates an immutable list from an iterator.
* @param elements the source iterator
*/","* Returns an immutable list containing the given elements, in order.
   *
   * @throws NullPointerException if {@code elements} contains a null element",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,build,com.google.common.collect.ImmutableRangeMap$Builder:build(),153,170,"/**
* Builds an ImmutableRangeMap from sorted entries.
* @return RangeMap object or throws exception on overlapping ranges
*/","* Returns an {@code ImmutableRangeMap} containing the associations previously added to this
     * builder.
     *
     * @throws IllegalArgumentException if any two ranges inserted into this builder overlap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,copyOf,com.google.common.collect.ImmutableRangeMap:copyOf(com.google.common.collect.RangeMap),84,98,"/**
* Copies a RangeMap into an ImmutableRangeMap.
* @param rangeMap the RangeMap to copy, must be convertible
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,build,com.google.common.collect.ImmutableRangeSet$Builder:build(),815,845,"/**
* Merges and sorts input ranges into a single immutable set.
* @return ImmutableRangeSet object or empty set if no ranges
*/","* Returns an {@code ImmutableRangeSet} containing the ranges added to this builder.
     *
     * @throws IllegalArgumentException if any input ranges have nonempty overlap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOfSortedEntries,"com.google.common.collect.ImmutableSortedMultiset:copyOfSortedEntries(java.util.Comparator,java.util.Collection)",297,315,"/**
* Creates a sorted multiset from a collection of weighted entries.
* @param comparator element comparator
* @param entries collection of weighted entries
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,ofImmutable,"com.google.common.graph.DirectedGraphConnections:ofImmutable(java.lang.Object,java.lang.Iterable,com.google.common.base.Function)",178,231,"/**
* Constructs a directed graph connections object from an immutable set of incident edges.
* @param thisNode the central node in the graph
* @param incidentEdges iterable of endpoint pairs representing the graph's edges
* @param successorNodeToValueFn function mapping successor nodes to their values
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,parseJavaClassPath,com.google.common.reflect.ClassPath:parseJavaClassPath(),636,651,"/**
* Parses Java class path into a list of URLs.
* @return List of URLs representing the class path entries
*/","* Returns the URLs in the class path specified by the {@code java.class.path} {@linkplain
   * System#getProperty system property}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getParameters,com.google.common.reflect.Invokable:getParameters(),271,284,"/**
* Creates a list of method parameters.
*/","* Returns all declared parameters of this {@code Invokable}. Note that if this is a constructor
   * of a non-static inner class, unlike {@link Constructor#getParameterTypes}, the hidden {@code
   * this} parameter of the enclosing class is excluded from the returned parameters.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getExceptionTypes,com.google.common.reflect.Invokable:getExceptionTypes(),287,297,"/**
* Retrieves the set of throwable types for this token.
* @return Immutable list of TypeTokens representing exception types
*/",Returns all declared exception types of this {@code Invokable}.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,collectTypes,com.google.common.reflect.TypeToken$TypeCollector$3:collectTypes(java.lang.Iterable),1380,1387,"/**
* Collects and sorts unique types from an iterable of types.
* @param types iterable of types to process
* @return sorted list of unique types
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,usedInGenericType,com.google.common.reflect.Types$JavaVersion:usedInGenericType(java.lang.reflect.Type[]),644,650,"/**
* Recursively fetches type usage in generic types.
*@param types array of Type objects to recurse through
*@return list of Type objects used in generics
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,wrapTasks,com.google.common.util.concurrent.WrappingExecutorService:wrapTasks(java.util.Collection),83,90,"/**
* Wraps a collection of tasks into an immutable list.
* @param tasks Collection of Callable tasks to wrap
*/","* Wraps a collection of tasks.
   *
   * @throws NullPointerException if any element of {@code tasks} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,sortedCopyOf,com.google.common.collect.ImmutableList:sortedCopyOf(java.lang.Iterable),317,323,"/**
* Creates a sorted copy of the specified iterable.
* @param elements the input collection to sort
* @return a sorted ImmutableList or null if input is empty
*/","* Returns an immutable list containing the given elements, sorted according to their natural
   * order. The sorting algorithm used is stable, so elements that compare as equal will stay in the
   * order in which they appear in the input.
   *
   * <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code
   * ImmutableSortedSet.copyOf(elements)}; if you want a {@code List} you can use its {@code
   * asList()} view.
   *
   * <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted
   * {@code ImmutableList}, use {@code stream.sorted().collect(toImmutableList())}.
   *
   * @throws NullPointerException if any element in the input is null
   * @since 21.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,sortedCopyOf,"com.google.common.collect.ImmutableList:sortedCopyOf(java.util.Comparator,java.lang.Iterable)",340,348,"/**
* Creates a sorted copy of the given iterable.
* @param comparator sorting order comparator
* @param elements input collection to be sorted
* @return sorted ImmutableList object
*/","* Returns an immutable list containing the given elements, in sorted order relative to the
   * specified comparator. The sorting algorithm used is stable, so elements that compare as equal
   * will stay in the order in which they appear in the input.
   *
   * <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code
   * ImmutableSortedSet.copyOf(comparator, elements)}; if you want a {@code List} you can use its
   * {@code asList()} view.
   *
   * <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted
   * {@code ImmutableList}, use {@code stream.sorted(comparator).collect(toImmutableList())}.
   *
   * @throws NullPointerException if any element in the input is null
   * @since 21.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,<init>,"com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:<init>(com.google.common.collect.ImmutableMap,java.util.Map$Entry[])",42,44,"/**
* Initializes a regular entry set with the given immutable map and array of entries.
* @param map immutable map to initialize from
* @param entries array of entries to add to the set
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,create,com.google.common.collect.JdkBackedImmutableMultiset:create(java.util.Collection),40,57,"/**
* Creates an ImmutableMultiset from a collection of Entry objects.
* @param entries collection of entries to populate the multiset
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,<init>,"com.google.common.collect.RegularImmutableAsList:<init>(com.google.common.collect.ImmutableCollection,java.lang.Object[])",42,44,"/**
* Wraps an immutable collection with an immutable list. 
* @param delegate original immutable collection
* @param array array to convert and wrap
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSortedSet,com.google.common.collect.CollectCollectors:toImmutableSortedSet(java.util.Comparator),82,90,"/**
* Creates a collector to accumulate elements into an immutable sorted set.
* @param comparator Comparator for sorting the set
* @return Collector that produces an ImmutableSortedSet<E>",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,readResolve,com.google.common.collect.ImmutableSortedSet$SerializedForm:readResolve(),868,871,"/**
* Reconstructs object state after serialization.
* @return fully constructed E instance
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,"com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.util.Iterator)",280,283,"/**
* Creates an immutable sorted set from a given iterator of elements.
* @param comparator comparison function for sorting
* @param elements iterator over elements to include in the set
* @return ImmutableSortedSet object containing all elements
*/","* Returns an immutable sorted set containing the given elements sorted by the given {@code
   * Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the
   * first one specified is included.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,fromEntryArray,"com.google.common.collect.RegularImmutableBiMap:fromEntryArray(int,java.util.Map$Entry[])",68,114,"/**
* Builds an ImmutableBiMap from an array of Entry objects.
* @param n expected number of elements
* @param entryArray array of Entry objects
* @return ImmutableBiMap or JdkBackedImmutableBiMap if conflicts occur
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,buildJdkBacked,com.google.common.collect.ImmutableMap$Builder:buildJdkBacked(),629,644,"/**
* Builds a JDK-backed immutable map for testing purposes.
* @throws AssertionError if valueComparator is not null
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,fromEntryArray,"com.google.common.collect.RegularImmutableMap:fromEntryArray(int,java.util.Map$Entry[],boolean)",87,102,"/**
* Creates an ImmutableMap from a sorted array of key-value pairs.
* @param n expected number of entries
* @param entryArray sorted array of Entry objects
* @param throwIfDuplicateKeys whether to throw on duplicate keys
* @return ImmutableMap or fallback implementation if overflow occurs
*/","* Creates an ImmutableMap from the first n entries in entryArray. This implementation may replace
   * the entries in entryArray with its own entry objects (though they will have the same key/value
   * contents), and may take ownership of entryArray.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,subRangeMap,com.google.common.collect.ImmutableRangeMap$2:subRangeMap(com.google.common.collect.Range),327,402,"/**
* Returns a sub-range map containing ranges that overlap the given range.
* @param range the range to intersect with this map
* @return an ImmutableRangeMap or null if no ranges overlap",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,getSubMap,"com.google.common.collect.ImmutableSortedMap:getSubMap(int,int)",919,928,"/**
* Returns a sub-sorted map within the specified range.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,getSubMultiset,"com.google.common.collect.RegularImmutableSortedMultiset:getSubMultiset(int,int)",117,128,"/**
* Retrieves a subset of elements within the specified range.
* @param from inclusive start index
* @param to exclusive end index
* @return ImmutableSortedMultiset containing elements in the range or an empty multiset if the range is invalid
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,headSetImpl,"com.google.common.collect.RegularImmutableSortedSet:headSetImpl(java.lang.Object,boolean)",247,250,"/**
* Returns an immutable sorted set of elements less than or equal to the given 'toElement'.
* @param toElement element up to which the subset is fetched
* @param inclusive whether to include the 'toElement' in the result
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,tailSetImpl,"com.google.common.collect.RegularImmutableSortedSet:tailSetImpl(java.lang.Object,boolean)",267,270,"/**
* Returns a sorted set of elements greater than or equal to the specified element.
* @param fromElement element to start the set from
* @param inclusive whether to include the fromElement in the set
* @return ImmutableSortedSet containing the specified subset
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,publicSuffixIndex,com.google.common.net.InternetDomainName:publicSuffixIndex(),180,187,"/**
* Retrieves the public suffix index from cache or recalculates it if not initialized.
* @return The public suffix index (0-based)","* The index in the {@link #parts()} list at which the public suffix begins. For example, for the
   * domain name {@code myblog.blogspot.co.uk}, the value would be 1 (the index of the {@code
   * blogspot} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no public
   * suffix was found.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,registrySuffixIndex,com.google.common.net.InternetDomainName:registrySuffixIndex(),195,202,"/**
* Retrieves the registry suffix index from cache or initializes it if not set.
* @return registry suffix index
*/","* The index in the {@link #parts()} list at which the registry suffix begins. For example, for
   * the domain name {@code myblog.blogspot.co.uk}, the value would be 2 (the index of the {@code
   * co} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no registry suffix
   * was found.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,fromEntries,"com.google.common.collect.ImmutableSortedMap:fromEntries(java.util.Comparator,boolean,java.lang.Iterable)",486,496,"/**
* Creates an ImmutableSortedMap from a collection of entries.
* @param comparator key comparison function
* @param sameComparator whether to use the provided comparator for sorting
* @param entries iterable of key-value pairs
*/","* Accepts a collection of possibly-null entries. If {@code sameComparator}, then it is assumed
   * that they do not need to be sorted or checked for dupes.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableEnumSetGeneric,com.google.common.collect.CollectCollectors:toImmutableEnumSetGeneric(),97,105,"/**
* Creates a collector for accumulating enums into an unordered, immutable set.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.util.Collection),175,207,"/**
* Copies a Collection into an ImmutableSet, handling various collection types and duplicates.
* @param elements Collection to copy
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,contains,com.google.common.collect.MapMakerInternalMap$EntrySet:contains(java.lang.Object),2746,2759,"/**
* Checks if map contains a given Entry object.
* @param o the Entry to check for
* @return true if Entry is present, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,contains,com.google.common.collect.MapMakerInternalMap$KeySet:contains(java.lang.Object),2693,2696,"/**
* Checks if the map contains an object.
* @param o the object to search for
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,fillHole,"com.google.common.collect.MinMaxPriorityQueue:fillHole(int,java.lang.Object)",444,464,"/**
* Fills a ""hole"" at the specified index in the heap with elements from lower levels.
* @param index position of the hole
* @param toTrickle value to fill the hole with
* @return MoveDesc object describing the filled hole, or null if not modified
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,create,com.google.common.collect.TreeBasedTable:create(com.google.common.collect.TreeBasedTable),122,129,"/**
* Creates a copy of the given TreeBasedTable with same type parameters.
* @param table original table to be copied
*/","* Creates a {@code TreeBasedTable} with the same mappings and sort order as the specified {@code
   * TreeBasedTable}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headSet,com.google.common.collect.Synchronized$SynchronizedNavigableSet:headSet(java.lang.Object),1514,1517,"/**
* Returns a view of the portion of this sorted set from the beginning to the element less than {@code toElement}.",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:subSet(java.lang.Object,java.lang.Object)",1556,1559,"/**
* Returns a subset of elements in this set, between specified bounds.
* @param fromElement start element (inclusive)
* @param toElement end element (exclusive)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailSet,com.google.common.collect.Synchronized$SynchronizedNavigableSet:tailSet(java.lang.Object),1568,1571,"/**
* Returns a sorted set of elements greater than or equal to the specified element. 
* @param fromElement the lower bound (inclusive)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,add,"com.google.common.collect.TreeMultiset:add(java.lang.Object,int)",257,277,"/**
* Inserts an element with specified occurrences into the set.
* @param element element to insert
* @param occurrences number of times to insert
* @return number of elements in the set after insertion (0 if set was empty)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,deleteMe,com.google.common.collect.TreeMultiset$AvlNode:deleteMe(),885,909,"/**
* Deletes the current node and rebalances the AVL tree.
* @return The new root of the tree, or null if empty
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,int)",484,487,"/**
* Creates a Bloom filter with specified expected insertions.
* @param funnel funnel to serialize objects
* @param expectedInsertions estimated number of inserts
*/","* Creates a {@link BloomFilter} with the expected number of insertions and a default expected
   * false positive probability of 3%.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @return a {@code BloomFilter}",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,sqrtFloor,com.google.common.math.BigIntegerMath:sqrtFloor(java.math.BigInteger),253,295,"/**
* Calculates the floor of the square root of a BigInteger.
* @param x input value
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$Builder:add(java.lang.Object),515,523,"/**
* Adds an element to the collection.
* @param element element to be added
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:add(java.lang.Object),665,668,"/**
* Adds an element to the set and returns this builder instance.
* @return Builder instance with added element
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getRawTypes,com.google.common.reflect.TypeToken:getRawTypes(),1093,1125,"/**
* Extracts raw type hierarchy of the given runtime type.
* @return Set of parent classes, including Object. Uses TypeVisitor to traverse the type hierarchy.",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,greatest,"com.google.common.collect.Comparators:greatest(int,java.util.Comparator)",164,167,"/**
* Returns a collector that finds the top K elements based on the given comparator.
* @param k number of top elements to find
* @param comparator comparison function for elements
* @return Collector that produces a list of top K elements
*/","* Returns a {@code Collector} that returns the {@code k} greatest (relative to the specified
   * {@code Comparator}) input elements, in descending order, as an unmodifiable {@code List}. Ties
   * are broken arbitrarily.
   *
   * <p>For example:
   *
   * {@snippet :
   * Stream.of(""foo"", ""quux"", ""banana"", ""elephant"")
   *     .collect(greatest(2, comparingInt(String::length)))
   * // returns {""elephant"", ""banana""}
   * }
   *
   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log
   * k)), as opposed to e.g. {@code Stream.sorted(comparator.reversed()).limit(k)}, which currently
   * takes O(n log n) time and O(n) space.
   *
   * @throws IllegalArgumentException if {@code k < 0}
   * @since 22.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,leastOf,"com.google.common.collect.Ordering:leastOf(java.lang.Iterable,int)",745,763,"/**
* Retrieves the top K elements from an iterable.
* @param iterable input collection
* @param k number of elements to retrieve
* @return list of top K elements or null if not found
*/","* Returns the {@code k} least elements of the given iterable according to this ordering, in order
   * from least to greatest. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.least(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending
   *     order
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 8.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,greatestOf,"com.google.common.collect.Ordering:greatestOf(java.util.Iterator,int)",842,844,"/**
* Returns the greatest K elements from an iterable.
* @param iterator iterable of elements
* @param k number of elements to find
* @return List of greatest K elements or empty list if not enough elements
*/","* Returns the {@code k} greatest elements from the given iterator according to this ordering, in
   * order from greatest to least. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.greatest(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in
   *     <i>descending order</i>
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 14.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catching,"com.google.common.util.concurrent.ClosingFuture:catching(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)",873,876,"/**
* Catches a specific exception type and returns a fallback value.
* @param exceptionType class of the exception to catch
* @param fallback function to execute if caught, returning result
* @param executor thread pool executor for asynchronous execution
*/","* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function
   * to its exception if it is an instance of a given exception type. The function can use a {@link
   * DeferredCloser} to capture objects to be closed when the pipeline is done.
   *
   * <p>If this {@code ClosingFuture} succeeds or fails with a different exception type, the
   * function will not be called, and the derived {@code ClosingFuture} will be equivalent to this
   * one.
   *
   * <p>If the function throws an exception, that exception is used as the result of the derived
   * {@code ClosingFuture}.
   *
   * <p>Example usage:
   *
   * {@snippet :
   * ClosingFuture<QueryResult> queryFuture =
   *     queryFuture.catching(
   *         QueryException.class, (closer, x) -> Query.emptyQueryResult(), executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings
   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on
   * the original {@code ClosingFuture} instance.
   *
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against this step's exception. ""This step's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future}
   *     underlying this step or, if {@code get()} throws a different kind of exception, that
   *     exception itself. To avoid hiding bugs and other unrecoverable errors, callers should
   *     prefer more specific types, avoiding {@code Throwable.class} in particular.
   * @param fallback the function to be called if this step fails with the expected exception type.
   *     The function's argument is this step's exception. ""This step's exception"" means the cause
   *     of the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future}
   *     underlying this step or, if {@code get()} throws a different kind of exception, that
   *     exception itself.
   * @param executor the executor that runs {@code fallback} if the input fails",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catchingAsync,"com.google.common.util.concurrent.ClosingFuture:catchingAsync(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)",967,972,"/**
* Catches asynchronous exceptions of specified type and returns a fallback value.
* @param exceptionType class of exception to catch
* @param fallback function to execute on exception or timeout
* @param executor thread pool executor for async execution
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,call,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:call(),596,601,"/**
* Executes the wrapped runnable and schedules a retry.
* @throws Exception if an error occurs during execution or rescheduling
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,schedule,"com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)",721,725,"/**
* Schedules a one-time task to be executed asynchronously.
* @param service abstract service instance
* @param executor scheduled executor service
* @param runnable task to execute
* @return Cancellable object for rescheduling or cancelling the task
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,com.google.common.util.concurrent.ServiceManager:awaitStopped(),353,355,"/**
 * Waits until the current operation has been stopped.
 */","* Waits for the all the services to reach a terminal state. After this method returns all
   * services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain
   * Service.State#FAILED failed}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,"com.google.common.util.concurrent.ServiceManager:awaitStopped(long,java.util.concurrent.TimeUnit)",379,382,"/**
* Waits until the stopped state is achieved.
* @param timeout maximum time to wait in specified units
* @param unit time unit (e.g. TimeUnit.SECONDS)
*/","* Waits for the all the services to reach a terminal state for no more than the given time. After
   * this method returns all services will either be {@linkplain Service.State#TERMINATED
   * terminated} or {@linkplain Service.State#FAILED failed}.
   *
   * @param timeout the maximum time to wait
   * @param unit the time unit of the timeout argument
   * @throws TimeoutException if not all of the services have stopped within the deadline",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,precomputed,com.google.common.base.CharMatcher:precomputed(),401,403,"/**
* Returns a precomputed CharMatcher instance.
* @return precomputed CharMatcher object
*/","* Returns a {@code char} matcher functionally equivalent to this one, but which may be faster to
   * query than the original; your mileage may vary. Precomputation takes time and requires more
   * memory, so it is only likely to be worthwhile if the precomputed matcher is queried very often.
   *
   * <p>This method has no effect (returns {@code this}) when called in GWT: it's unclear whether a
   * precomputed matcher is faster, but it certainly would consume more memory (which doesn't seem
   * like a worthwhile tradeoff in a browser).",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,hash,"com.google.common.io.Files:hash(java.io.File,com.google.common.hash.HashFunction)",622,629,"/**
* Replaced by Files.asByteSource().hash() for efficient hashing.
* @param file input file to hash
* @param hashFunction hash function to apply
*/","* Computes the hash code of the {@code file} using {@code hashFunction}.
   *
   * @param file the file to read
   * @param hashFunction the hash function to use to hash the data
   * @return the {@link HashCode} of all of the bytes in the file
   * @throws IOException if an I/O error occurs
   * @since 12.0
   * @deprecated Prefer {@code asByteSource(file).hash(hashFunction)}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,move,"com.google.common.io.Files:move(java.io.File,java.io.File)",492,506,"/**
* Moves a file from one location to another.
* @param from source file
* @param to destination file
* @throws IOException if move operation fails
*/","* Moves a file from one path to another. This method can rename a file and/or move it to a
   * different directory. In either case {@code to} must be the target path for the file itself; not
   * just the new name for the file or the path to the new parent directory.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#move}.
   *
   * @param from the source file
   * @param to the destination file
   * @throws IOException if an I/O error occurs
   * @throws IllegalArgumentException if {@code from.equals(to)}",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,readLines,"com.google.common.io.Resources:readLines(java.net.URL,java.nio.charset.Charset)",142,162,"/**
* Reads lines from a URL into a list.
* @param url the URL to read from
* @param charset the character set to use for reading
*/","* Reads all of the lines from a URL. The lines do not include line-termination characters, but do
   * include other leading and trailing whitespace.
   *
   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code
   * Resources.asCharSource(url, charset).readLines()}.
   *
   * @param url the URL to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a mutable {@link List} containing all the lines
   * @throws IOException if an I/O error occurs",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,map,com.google.common.io.Files:map(java.io.File),646,649,"/**
* Maps a File to a mapped byte buffer in read-only mode.
* @param file input file to be mapped
*/","* Fully maps a file read-only in to memory as per {@link
   * FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)}.
   *
   * <p>Files are mapped from offset 0 to its length.
   *
   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.
   *
   * @param file the file to map
   * @return a read-only buffer reflecting {@code file}
   * @throws FileNotFoundException if the {@code file} does not exist
   * @throws IOException if an I/O error occurs
   * @see FileChannel#map(MapMode, long, long)
   * @since 2.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,com.google.common.util.concurrent.MoreExecutors$Application:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor),246,248,"/**
* Returns an existing ThreadPoolExecutor as an ExecutorService.
* @param executor the underlying thread pool executor
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",106,112,"/**
* Returns an exiting executor service with specified termination timeout.
* @param executor existing thread pool executor
* @param terminationTimeout duration to wait for tasks to complete
* @param timeUnit unit of time for termination timeout
*/","* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application
   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their
   * completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @param timeUnit unit of time for the time parameter
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,com.google.common.util.concurrent.MoreExecutors$Application:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor),258,261,"/**
* Returns an exiting ScheduledExecutorService with a graceful shutdown timeout.
* @param executor ScheduledThreadPoolExecutor instance
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",167,174,"/**
* Returns an exiting scheduled executor service with a specified termination timeout.
* @param executor Scheduled thread pool executor
* @param terminationTimeout time to wait before shutting down the executor
* @param timeUnit unit of time for the termination timeout
*/","* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when
   * the application is complete. It does so by using daemon threads and adding a shutdown hook to
   * wait for their completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @param timeUnit unit of time for the time parameter
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,addDelayedShutdownHook,"com.google.common.util.concurrent.MoreExecutors:addDelayedShutdownHook(java.util.concurrent.ExecutorService,java.time.Duration)",207,211,"/**
* Adds a shutdown hook with a delay based on the specified timeout.
* @param service ExecutorService instance
* @param terminationTimeout duration of shutdown delay in nanoseconds
*/","* Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}.
   * This is useful if the given service uses daemon threads, and we want to keep the JVM from
   * exiting immediately on shutdown, instead giving these daemon threads a chance to terminate
   * normally.
   *
   * @param service ExecutorService which uses daemon threads
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimKey,"com.google.common.cache.LocalCache$Segment:reclaimKey(com.google.common.cache.ReferenceEntry,int)",3292,3325,"/**
* Reclaims a key-value entry from the hash table.
* @param entry Entry to reclaim
* @param hash Hash of the reclaimed key
* @return true if entry was successfully reclaimed, false otherwise
*/",Removes an entry whose key has been garbage collected.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimValue,"com.google.common.cache.LocalCache$Segment:reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference)",3328,3370,"/**
* Removes a value reference from the map by key or hash.
* @param key unique key identifier
* @param hash hash code for key lookup
* @param valueReference ValueReference object to be removed
* @return true if removal was successful, false otherwise
*/",Removes an entry whose value has been garbage collected.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeEntry,"com.google.common.cache.LocalCache$Segment:removeEntry(com.google.common.cache.ReferenceEntry,int,com.google.common.cache.RemovalCause)",3406,3435,"/**
* Removes a reference entry from the map.
* @param entry Entry to remove
* @param hash Hash code of key in removed entry
* @param cause Cause for removal
* @return true if entry was found and removed, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,com.google.common.util.concurrent.ServiceManager:awaitHealthy(),299,301,"/**
 * Waits for the system to reach a healthy state.
 */","* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy}. The manager
   * will become healthy after all the component services have reached the {@linkplain State#RUNNING
   * running} state.
   *
   * @throws IllegalStateException if the service manager reaches a state from which it cannot
   *     become {@linkplain #isHealthy() healthy}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,"com.google.common.util.concurrent.ServiceManager:awaitHealthy(long,java.util.concurrent.TimeUnit)",329,332,"/**
* Waits until the system is healthy or times out.
* @param timeout maximum duration to wait
* @param unit time unit for timeout
*/","* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more
   * than the given time. The manager will become healthy after all the component services have
   * reached the {@linkplain State#RUNNING running} state.
   *
   * @param timeout the maximum time to wait
   * @param unit the time unit of the timeout argument
   * @throws TimeoutException if not all of the services have finished starting within the deadline
   * @throws IllegalStateException if the service manager reaches a state from which it cannot
   *     become {@linkplain #isHealthy() healthy}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,ofImmutable,"com.google.common.graph.DirectedNetworkConnections:ofImmutable(java.util.Map,java.util.Map,int)",46,50,"/**
* Creates an immutable directed network from edge maps and self-loop count.
* @param inEdges map of incoming edges
* @param outEdges map of outgoing edges
* @param selfLoopCount number of self-loops in the network
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,ofImmutable,com.google.common.graph.UndirectedNetworkConnections:ofImmutable(java.util.Map),45,47,"/**
* Creates an instance of UndirectedNetworkConnections from a map of immutable edges.
* @param incidentEdges map of edge to node mappings
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startupTimes,com.google.common.util.concurrent.ServiceManager:startupTimes(),419,421,"/**
* Returns a read-only map of service startup times.
*/","* Returns the service load times. This value will only return startup times for services that
   * have finished starting.
   *
   * @return Map of services and their corresponding startup time in millis, the map entries will be
   *     ordered by startup time.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getDeclaredAnnotationsByType,com.google.common.reflect.Parameter:getDeclaredAnnotationsByType(java.lang.Class),121,128,"/**
* Retrieves annotations of specified type from the current class.
* @param annotationType Class of desired annotations
* @return Array of annotations or empty array if none found
*/",* @since 18.0,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Collection),246,252,"/**
* Creates an immutable sorted set from the given collection.
* @param elements input collection of elements
*/","* Returns an immutable sorted set containing the given elements sorted by their natural ordering.
   * When multiple elements are equivalent according to {@code compareTo()}, only the first one
   * specified is included. To create a copy of a {@code SortedSet} that preserves the comparator,
   * call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.
   *
   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)}
   * returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s},
   * while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>}
   * containing one element (the given set itself).
   *
   * <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code
   * ImmutableSortedSet}, it may be returned instead of a copy.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null
   * @since 7.0 (source-compatible since 2.0)",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headMap,com.google.common.collect.Synchronized$SynchronizedNavigableMap:headMap(java.lang.Object),1680,1683,"/**
* Returns a sorted map containing all entries with keys less than the specified key.
* @param toKey upper bound of the returned map (exclusive)
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:subMap(java.lang.Object,java.lang.Object)",1759,1762,"/**
* Returns a subset of this map containing all keys from {@code fromKey} up to but not including {@code toKey}. 
* @param fromKey the start key (inclusive)
* @param toKey the end key (exclusive)",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailMap,com.google.common.collect.Synchronized$SynchronizedNavigableMap:tailMap(java.lang.Object),1771,1774,"/**
* Returns a view of all entries in this map whose keys are greater than or equal to the given key.
* @param fromKey key value to start mapping from
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,synchronizedNavigableMap,com.google.common.collect.Maps:synchronizedNavigableMap(java.util.NavigableMap),3692,3697,"/**
* Returns a synchronized version of the input NavigableMap.
* @param navigableMap input map to synchronize
*/","* Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In
   * order to guarantee serial access, it is critical that <b>all</b> access to the backing
   * navigable map is accomplished through the returned navigable map (or its views).
   *
   * <p>It is imperative that the user manually synchronize on the returned navigable map when
   * iterating over any of its collection views, or the collections views of any of its {@code
   * descendingMap}, {@code subMap}, {@code headMap} or {@code tailMap} views.
   *
   * {@snippet :
   * NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());
   *
   * // Needn't be in synchronized block
   * NavigableSet<K> set = map.navigableKeySet();
   *
   * synchronized (map) { // Synchronizing on map, not set!
   *   Iterator<K> it = set.iterator(); // Must be in synchronized block
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>or:
   *
   * {@snippet :
   * NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());
   * NavigableMap<K, V> map2 = map.subMap(foo, false, bar, true);
   *
   * // Needn't be in synchronized block
   * NavigableSet<K> set2 = map2.descendingKeySet();
   *
   * synchronized (map) { // Synchronizing on map, not map2 or set2!
   *   Iterator<K> it = set2.iterator(); // Must be in synchronized block
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned navigable map will be serializable if the specified navigable map is
   * serializable.
   *
   * @param navigableMap the navigable map to be ""wrapped"" in a synchronized navigable map.
   * @return a synchronized view of the specified navigable map.
   * @since 13.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,toString,"com.google.common.io.Files:toString(java.io.File,java.nio.charset.Charset)",250,256,"/**
* Wraps a File into a char source for reading.
* @param file the file to read from
* @param charset encoding of the file content
* @return string representation of the file content or null on error
*/","* Reads all characters from a file into a {@link String}, using the given character set.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a string containing all the characters from the file
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(file, charset).read()}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,toString,"com.google.common.io.Resources:toString(java.net.URL,java.nio.charset.Charset)",107,109,"/**
* Converts URL to string representation.
* @param url input URL
* @param charset character encoding (e.g. UTF-8)
*/","* Reads all characters from a URL into a {@link String}, using the given character set.
   *
   * @param url the URL to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a string containing all the characters from the URL
   * @throws IOException if an I/O error occurs.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,create,com.google.common.collect.CompactLinkedHashMap:create(),62,65,"/**
* Creates an empty CompactLinkedHashMap instance.
*/",Creates an empty {@code CompactLinkedHashMap} instance.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,create,com.google.common.collect.TreeMultimap:create(com.google.common.collect.Multimap),107,111,"/**
* Creates a TreeMultimap from an existing Multimap instance.
* @param multimap the input Multimap to transform
* @return a new TreeMultimap with comparable keys and values
*/","* Constructs a {@code TreeMultimap}, ordered by the natural ordering of its keys and values, with
   * the same mappings as the specified multimap.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,captureAsTypeVariable,com.google.common.reflect.TypeResolver$WildcardCapturer$1:captureAsTypeVariable(java.lang.reflect.Type[]),500,504,"/**
* Creates a type variable with the given bounds and unique name.
* @param upperBounds array of upper bound types
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantLock,"com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantLock(java.lang.String,boolean)",244,248,"/**
* Creates a reentrant lock with the specified name and fairness policy.
* @param lockName unique lock identifier
* @param fair whether to use fair locking or not
*/","* Creates a {@link ReentrantLock} with the given fairness policy. The {@code lockName} is used in
   * the warning or exception output to help identify the locks involved in the detected deadlock.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantReadWriteLock,"com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantReadWriteLock(java.lang.String,boolean)",260,264,"/**
* Creates a ReentrantReadWriteLock instance with specified name and fairness.
* @param lockName unique lock identifier
* @param fair whether to use fair locking policy
*/","* Creates a {@link ReentrantReadWriteLock} with the given fairness policy. The {@code lockName}
   * is used in the warning or exception output to help identify the locks involved in the detected
   * deadlock.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,createNodes,com.google.common.util.concurrent.CycleDetectingLockFactory:createNodes(java.lang.Class),301,322,"/**
* Creates a map of LockGraphNode objects for each enum value in the given class.
* @param clazz Enum class to create nodes for
* @return Map of enum values to corresponding LockGraphNode objects
*/","* For a given Enum type, creates an immutable map from each of the Enum's values to a
   * corresponding LockGraphNode, with the {@code allowedPriorLocks} and {@code
   * disallowedPriorLocks} prepopulated with nodes according to the natural ordering of the
   * associated Enum values.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,addNode,com.google.common.graph.StandardMutableGraph:addNode(java.lang.Object),44,47,"/**
* Adds a new node to the graph.
* @param node Node object to be added
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,putEdge,"com.google.common.graph.StandardMutableGraph:putEdge(java.lang.Object,java.lang.Object)",49,52,"/**
* Adds an edge between two nodes in the graph.
* @param nodeU first node of the edge
* @param nodeV second node of the edge
* @return true if edge was successfully added, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,putEdgeValue,"com.google.common.graph.StandardMutableValueGraph:putEdgeValue(com.google.common.graph.EndpointPair,java.lang.Object)",112,117,"/**
* Sets edge value for a given endpoint pair.
* @param endpoints unique node identifiers (u, v)
* @param value edge value to store
* @return stored value or null if unchanged
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,validatePart,"com.google.common.net.InternetDomainName:validatePart(java.lang.String,boolean)",307,351,"/**
* Validates a domain part by checking length, ASCII content, and character rules.
* @param part the domain part to validate
* @param isFinalPart whether this is the final part of the domain
* @return true if valid, false otherwise
*/","* Helper method for {@link #validateSyntax(List)}. Validates that one part of a domain name is
   * valid.
   *
   * @param part The domain name part to be validated
   * @param isFinalPart Is this the final (rightmost) domain part?
   * @return Whether the part is valid",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,coerceToInteger,com.google.common.net.InetAddresses:coerceToInteger(java.net.InetAddress),1059,1061,"/**
* Converts InetAddress to integer using IPv4 address.
* @param ip InetAddress object
* @return integer representation of the IP address or -1 if not found
*/","* Returns an integer representing an IPv4 address regardless of whether the supplied argument is
   * an IPv4 address or not.
   *
   * <p>IPv6 addresses are <b>coerced</b> to IPv4 addresses before being converted to integers.
   *
   * <p>As long as there are applications that assume that all IP addresses are IPv4 addresses and
   * can therefore be converted safely to integers (for whatever purpose) this function can be used
   * to handle IPv6 addresses as well until the application is suitably fixed.
   *
   * <p>NOTE: an IPv6 address coerced to an IPv4 address can only be used for such purposes as
   * rudimentary identification or indexing into a collection of real {@link InetAddress}es. They
   * cannot be used as real addresses for the purposes of network communication.
   *
   * @param ip {@link InetAddress} to convert
   * @return {@code int}, ""coerced"" if ip is not an IPv4 address
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardContains,com.google.common.collect.ForwardingCollection:standardContains(java.lang.Object),138,140,"/**
* Checks if the iterator contains the specified object.
* @param object the object to search for
*/","* A sensible definition of {@link #contains} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #contains} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardRemove,com.google.common.collect.ForwardingCollection:standardRemove(java.lang.Object),170,179,"/**
* Removes the specified object from the collection.
* @param object the object to remove, or null for no-op
* @return true if removed, false otherwise
*/","* A sensible definition of {@link #remove} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #remove} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardRemoveAll,com.google.common.collect.ForwardingCollection:standardRemoveAll(java.util.Collection),188,190,"/**
* Removes all elements from the current collection that are present in the given collection.
* @param collection collection of elements to remove
* @return true if any elements were removed, false otherwise
*/","* A sensible definition of {@link #removeAll} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #removeAll} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardRetainAll,com.google.common.collect.ForwardingCollection:standardRetainAll(java.util.Collection),199,201,"/**
* Retains all elements from the given Collection.
* @param collection Collection to filter from
*/","* A sensible definition of {@link #retainAll} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #retainAll} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardClear,com.google.common.collect.ForwardingCollection:standardClear(),210,212,"/**
* Clears iterator and associated data.
*/","* A sensible definition of {@link #clear} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #clear} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardIsEmpty,com.google.common.collect.ForwardingCollection:standardIsEmpty(),221,223,"/**
 * Checks if the iterator contains no elements.
 */","* A sensible definition of {@link #isEmpty} as {@code !iterator().hasNext}. If you override
   * {@link #isEmpty}, you may wish to override {@link #isEmpty} to forward to this implementation.
   * Alternately, it may be more efficient to implement {@code isEmpty} as {@code size() == 0}.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardToArray,com.google.common.collect.ForwardingCollection:standardToArray(),243,246,"/**
* Returns an array representation of the collection.
*/","* A sensible definition of {@link #toArray()} in terms of {@link #toArray(Object[])}. If you
   * override {@link #toArray(Object[])}, you may wish to override {@link #toArray} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,createUnmodifiableEmptyCollection,com.google.common.collect.AbstractSortedSetMultimap:createUnmodifiableEmptyCollection(),54,57,"/**
* Creates an immutable empty collection of type V. 
* @return UnmodifiableSortedSet instance",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$UnmodifiableNavigableMap:keySet(),3592,3595,"/**
* Returns a set of keys in this map.
* @return A NavigableSet view of the keys contained in this map. 
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,createEntries,com.google.common.collect.FilteredEntrySetMultimap:createEntries(),58,61,"/**
* Creates a set of entries based on the unfiltered entries and entry predicate.",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,entries,com.google.common.collect.ForwardingSetMultimap:entries(),46,49,"/**
* Returns an unmodifiable set of key-value mappings.
*@return Unmodifiable Set containing all entries in this map.",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,schedule,"com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.lang.Runnable,java.time.Duration)",51,54,"/**
* Schedules a Runnable with a specified delay in the given unit.
* @param command the task to be executed
* @param delay duration of delay
*/","* Duration-based overload of {@link #schedule(Runnable, long, TimeUnit)}.
   *
   * @since 29.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,readObject,com.google.common.cache.LocalCache$LoadingSerializationProxy:readObject(java.io.ObjectInputStream),4799,4803,"/**
* Recreates cache builder and delegate based on persisted state.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if class not found during deserialization
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,readObject,com.google.common.cache.LocalCache$ManualSerializationProxy:readObject(java.io.ObjectInputStream),4765,4769,"/**
* Reconstructs the cache after serialization.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,replaceValues,"com.google.common.collect.ForwardingSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",57,60,"/**
* Replaces values associated with a given key in the underlying data structure.
* @param key unique identifier for the key to update
* @param values new values to associate with the key
* @return SortedSet of updated values
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,predecessors,com.google.common.graph.DirectedMultiNetworkConnections:predecessors(),64,67,"/**
* Returns an unmodifiable set of node IDs that have edges pointing to this node.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,successors,com.google.common.graph.DirectedMultiNetworkConnections:successors(),80,83,"/**
* Returns an unmodifiable set of successors.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,adjacentNodes,com.google.common.graph.UndirectedMultiNetworkConnections:adjacentNodes(),60,63,"/**
* Returns an unmodifiable set of adjacent nodes.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,findAllSubscribers,com.google.common.eventbus.SubscriberRegistry:findAllSubscribers(java.lang.Object),156,165,"/**
 * Retrieves all subscribers for a given listener instance.
 * @param listener target listener object
 * @return multimap of event types to subscriber instances
 */",* Returns all subscribers for the given listener grouped by the type of event they subscribe to.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inducedSubgraph,"com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.Network,java.lang.Iterable)",576,594,"/**
* Creates an induced subgraph from a given Network.
* @param network original network
* @param nodes subset of nodes to include in the subgraph
* @return MutableNetwork representing the induced subgraph","* Returns the subgraph of {@code network} induced by {@code nodes}. This subgraph is a new graph
   * that contains all of the nodes in {@code nodes}, and all of the {@link Network#edges() edges}
   * from {@code network} for which the {@link Network#incidentNodes(Object) incident nodes} are
   * both contained by {@code nodes}.
   *
   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,copyOf,com.google.common.graph.Graphs:copyOf(com.google.common.graph.Network),626,640,"/**
* Creates a mutable copy of the given network.
* @param network original network to duplicate
* @return MutableNetwork object with same topology as input network
*/",Creates a mutable copy of {@code network} with the same nodes and edges.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,<init>,com.google.common.graph.ImmutableNetwork$Builder:<init>(com.google.common.graph.NetworkBuilder),160,162,"/**
 * Initializes a new builder with a pre-built network.
 * @param networkBuilder existing network builder instance
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,build,com.google.common.graph.GraphBuilder:build(),181,183,"/**
* Creates a new mutable graph instance from this builder.
* @return A new StandardMutableGraph instance
*/",Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inducedSubgraph,"com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.ValueGraph,java.lang.Iterable)",545,566,"/**
* Creates an induced subgraph containing specified nodes and their successors.
*@param graph original ValueGraph
*@param nodes subset of nodes to include in the subgraph
*@return MutableValueGraph representing the induced subgraph
*/","* Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph
   * that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges}
   * (and associated edge values) from {@code graph} for which both nodes are contained by {@code
   * nodes}.
   *
   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,copyOf,com.google.common.graph.Graphs:copyOf(com.google.common.graph.ValueGraph),609,623,"/**
* Creates a deep copy of the given ValueGraph.
* @param graph original graph to be copied
* @return a new MutableValueGraph instance containing all nodes and edges from the original graph.","Creates a mutable copy of {@code graph} with the same nodes, edges, and edge values.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,<init>,com.google.common.graph.ImmutableValueGraph$Builder:<init>(com.google.common.graph.ValueGraphBuilder),133,138,"/**
* Creates a new mutable value graph from the given immutable graph builder.
* @param graphBuilder Immutable graph builder to copy
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,putAll,com.google.common.collect.ImmutableBiMap$Builder:putAll(java.util.Map),381,386,"/**
* Adds all entries from the given map to the builder.
* @param map map containing key-value pairs to add
* @return updated Builder instance for method chaining
*/","* Associates all of the given map's keys and values in the built bimap. Duplicate keys or
     * values are not allowed, and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code map} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,putAll,com.google.common.collect.ImmutableSortedMap$Builder:putAll(java.util.Map),656,661,"/**
* Adds all key-value pairs from a given map to the builder.
* @param map map containing entries to add
* @return this Builder instance for method chaining
*/","* Associates all of the given map's keys and values in the built map. Duplicate keys, according
     * to the comparator (which might be the keys' natural order), are not allowed, and will cause
     * {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code map} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,containsKey,com.google.common.collect.FilteredEntryMultimap$AsMap:containsKey(java.lang.Object),176,179,"/**
* Checks if a given key exists in the underlying data structure.
* @param key the object to search for (can be null)
* @return true if the key is present, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,get,com.google.common.collect.FilteredEntrySetMultimap:get(java.lang.Object),43,46,"/**
* Retrieves a set of values associated with the given key from the backing map.
* @param key unique identifier for the data set
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,removeEntriesIf,com.google.common.collect.FilteredEntryMultimap$Keys$1:removeEntriesIf(com.google.common.base.Predicate),154,172,"/**
* Removes entries from the map based on the provided predicate.
* @param predicate filter condition for each entry
* @return true if any entries were removed, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryBiMap:<init>(com.google.common.collect.BiMap,com.google.common.base.Predicate)",3371,3375,"/**
* Creates a filtered entry bi-map from the given delegate and predicate.
* @param delegate original BiMap instance
* @param predicate filter criteria for entries
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntryNavigableMap,com.google.common.base.Predicate)",2824,2831,"/**
* Combines a filtered map with an additional filter.
* @param map the original filtered map
* @param entryPredicate the additional filter criterion
* @return a new filtered navigable map
*/","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * navigable map.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$FilteredEntrySortedMap:headMap(java.lang.Object),3208,3211,"/**
* Returns a sorted map containing entries up to the specified key.
* @param toKey key to include in the resulting map
* @return SortedMap object or null if the input is null
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$FilteredEntrySortedMap:subMap(java.lang.Object,java.lang.Object)",3213,3216,"/**
* Returns a subset of the sorted map with keys in the range [fromKey, toKey].
* @param fromKey starting key (inclusive)
* @param toKey ending key (inclusive)",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$FilteredEntrySortedMap:tailMap(java.lang.Object),3218,3221,"/**
* Returns a view of the map's entries starting from the given key.
* @param fromKey starting key (inclusive)
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate)",2813,2818,"/**
* Combines the filter from a SortedMap with an additional entry predicate.
* @param map original filtered sorted map
* @param entryPredicate predicate to apply to each entry
* @return new filtered sorted map
*/","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * sorted map.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(java.util.Map,com.google.common.base.Predicate)",2428,2435,"/**
* Filters a map by applying the given predicate to its keys.
* @param unfiltered original map
* @param keyPredicate key filter condition
* @return filtered map with matching keys or null if empty
*/","* Returns a map containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The
   * returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and
   * {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(java.util.Map,com.google.common.base.Predicate)",2684,2690,"/**
* Filters a map based on the provided predicate.
* @param unfiltered input map to be filtered
* @param entryPredicate predicate to determine filter criteria
* @return filtered Map or existing AbstractFilteredMap if applicable","* Returns a map containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code
   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the
   * map's entries have a {@link Entry#setValue} method that throws an {@link
   * IllegalArgumentException} when the existing key and the provided value don't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings that satisfy the filter will be removed from the underlying map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,inDegree,com.google.common.graph.AbstractNetwork:inDegree(java.lang.Object),153,156,"/**
* Calculates the in-degree of a given node.
* @param node Node to calculate in-degree for
* @return In-degree value or -1 if not applicable (for undirected graph)
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,outDegree,com.google.common.graph.AbstractNetwork:outDegree(java.lang.Object),158,161,"/**
* Calculates the out-degree of a given node.
* @param node graph node to calculate out-degree for
* @return non-negative integer representing out-degree or -1 if not found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnecting,"com.google.common.graph.AbstractNetwork:edgeConnecting(java.lang.Object,java.lang.Object)",194,197,"/**
* Finds an edge connecting two nodes.
* @param nodeU first node
* @param nodeV second node
* @return Edge object or empty if no connection found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnectingOrNull,com.google.common.graph.AbstractNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair),218,222,"/**
* Finds an edge connecting two nodes in a graph.
* @param endpoints pair of nodes U and V
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,toImmutableSortedMap,"com.google.common.collect.ImmutableSortedMap:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function)",80,86,"/**
* Converts a stream to an immutable sorted map.
* @param comparator map key comparator
* @param keyFunction function to extract keys from elements
* @param valueFunction function to extract values from elements
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose
   * keys and values are the result of applying the provided mapping functions to the input
   * elements. The generated map is sorted by the specified comparator.
   *
   * <p>If the mapped keys contain duplicates (according to the specified comparator), an {@code
   * IllegalArgumentException} is thrown when the collection operation is performed. (This differs
   * from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which
   * throws an {@code IllegalStateException}.)
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subSet,com.google.common.collect.ImmutableRangeSet$AsSet:subSet(com.google.common.collect.Range),638,640,"/**
* Returns an immutable subset of elements within a given range.
* @param range Range of elements to include
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,headSetImpl,"com.google.common.collect.RegularContiguousSet:headSetImpl(java.lang.Comparable,boolean)",53,56,"/**
* Returns a contiguous set containing elements up to but not including (exclusive)
* or including (inclusive) the specified element.
* @param toElement upper bound of the set
* @param inclusive whether to include the upper bound in the result
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,subSetImpl,"com.google.common.collect.RegularContiguousSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)",58,70,"/**
* Creates a contiguous subset of the current set within a specified range.
* @param fromElement start element
* @param fromInclusive whether start is inclusive
* @param toElement end element
* @param toInclusive whether end is inclusive
* @return ContiguousSet or EmptyContiguousSet if invalid range",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,tailSetImpl,"com.google.common.collect.RegularContiguousSet:tailSetImpl(java.lang.Comparable,boolean)",72,75,"/**
* Computes the contiguous set of elements in the current domain that are greater than or equal to a specified element.
* @param fromElement element to start from
* @param inclusive whether to include the fromElement itself
* @return ContiguousSet containing the result
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,get,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:get(java.lang.Object),627,643,"/**
* Retrieves a Range of values starting from the given Cut key.
* @param key Cut object or null for no range
* @return Range of values or null if not found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:remove(java.lang.Object),692,703,"/**
* Removes a key-value pair from the map.
* @param key unique identifier for the range to remove
* @return associated value or null if not found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,removeEntryIf,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:removeEntryIf(com.google.common.base.Predicate),710,721,"/**
* Removes entries matching the provided predicate.
* @param predicate condition to apply to each entry
* @return true if any entries were removed, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,clear,com.google.common.collect.TreeRangeMap$SubRangeMap:clear(),561,564,"/**
* Removes and clears all entries from this range map. 
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$SubRangeMap:remove(com.google.common.collect.Range),566,571,"/**
* Removes overlapping range from this map.
* @param range Range to be removed
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,put,"com.google.common.collect.TreeRangeMap:put(com.google.common.collect.Range,java.lang.Object)",137,144,"/**
* Inserts or updates a value within the specified range.
* @param range non-empty range with lower bound
* @param value new value to insert or update
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addNode,com.google.common.graph.StandardMutableNetwork:addNode(java.lang.Object),51,62,"/**
* Adds a new node to the collection.
* @param node Node object to be added
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addEdge,"com.google.common.graph.StandardMutableNetwork:addEdge(java.lang.Object,java.lang.Object,java.lang.Object)",76,118,"/**
* Adds an undirected edge between two nodes.
* @param nodeU source node
* @param nodeV target node
* @param edge the edge to add
* @return true if added successfully, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toImmutableEnumMap,"com.google.common.collect.Maps:toImmutableEnumMap(java.util.function.Function,java.util.function.Function)",198,203,"/**
* Converts a collection to an immutable enum map.
* @param keyFunction function to extract key enum from input
* @param valueFunction function to extract map values from input
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements. The
   * resulting implementation is specialized for enum key types. The returned map and its views will
   * iterate over keys in their enum definition order, not encounter order.
   *
   * <p>If the mapped keys contain duplicates, an {@code IllegalArgumentException} is thrown when
   * the collection operation is performed. (This differs from the {@code Collector} returned by
   * {@link java.util.stream.Collectors#toMap(java.util.function.Function,
   * java.util.function.Function) Collectors.toMap(Function, Function)}, which throws an {@code
   * IllegalStateException}.)
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toImmutableEnumMap,"com.google.common.collect.Maps:toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",216,222,"/**
* Converts a stream of objects to an immutable enum map.
* @param keyFunction maps each object to its corresponding enum key
* @param valueFunction maps each object to its associated value
* @param mergeFunction merges values for duplicate enum keys
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements. The
   * resulting implementation is specialized for enum key types. The returned map and its views will
   * iterate over keys in their enum definition order, not encounter order.
   *
   * <p>If the mapped keys contain duplicates, the values are merged using the specified merging
   * function.
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,getAllPresent,com.google.common.cache.AbstractCache:getAllPresent(java.lang.Iterable),67,81,"/**
* Retrieves all present values from the map for specified keys.
* @param keys iterable of object keys to fetch
* @return immutable map with fetched key-value pairs or empty if none found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,getAll,com.google.common.cache.AbstractLoadingCache:getAll(java.lang.Iterable),58,67,"/**
* Fetches values for all specified keys and returns them as a map.
* @param keys iterable of unique keys to fetch
* @return Map containing fetched values or empty map if none found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMap,"com.google.common.collect.CollectCollectors:toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",198,207,"/**
* Converts a collection of objects into an immutable map.
* @param keyFunction function to extract the map key from each object
* @param valueFunction function to extract the map value from each object
* @param mergeFunction function to merge values when keys collide
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,columnMap,com.google.common.collect.DenseImmutableTable:columnMap(),283,288,"/**
* Returns a read-only map of columns to their respective value maps.
* @return Immutable map of columns to value maps
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,rowMap,com.google.common.collect.DenseImmutableTable:rowMap(),290,295,"/**
* Returns a read-only map of rows to their respective column maps.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,columnMap,com.google.common.collect.SparseImmutableTable:columnMap(),96,101,"/**
* Returns a copy of the underlying column map as an immutable map. 
* @return An immutable map from columns to maps of row values.",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,rowMap,com.google.common.collect.SparseImmutableTable:rowMap(),103,108,"/**
* Returns a read-only map of rows to their respective column maps.
* @return immutable map of R to maps of C to V
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,ofImmutable,"com.google.common.graph.DirectedMultiNetworkConnections:ofImmutable(java.util.Map,java.util.Map,int)",56,60,"/**
* Creates a directed multi-network connections instance from immutable edge maps.
* @param inEdges incoming edges
* @param outEdges outgoing edges
* @param selfLoopCount count of self-loops
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,ofImmutable,com.google.common.graph.UndirectedGraphConnections:ofImmutable(java.util.Map),60,62,"/**
* Creates an undirected graph connections instance from a map of immutable node values.
* @param adjacentNodeValues map of nodes to their respective values
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,ofImmutable,com.google.common.graph.UndirectedMultiNetworkConnections:ofImmutable(java.util.Map),54,56,"/**
* Creates an immutable undirected multi-network connections instance.
* @param incidentEdges map of edges to their corresponding nodes
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,getTypeMappings,com.google.common.reflect.TypeResolver$TypeMappingIntrospector:getTypeMappings(java.lang.reflect.Type),380,385,"/**
* Returns a map of type mappings for the given context type.
* @param contextType the type to generate mappings for
* @return immutable map of key-value pairs or empty if no mappings found
*/","* Returns type mappings using type parameters and type arguments found in the generic
     * superclass and the super interfaces of {@code contextClass}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,create,"com.google.common.collect.ImmutableTable$SerializedForm:create(com.google.common.collect.ImmutableTable,int[],int[])",472,480,"/**
* Creates a serialized form from the given table and cell indices.
* @param table input table with row, column keys and values
* @param cellRowIndices array of row indices for cells to serialize
* @param cellColumnIndices array of column indices for cells to serialize
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,iterator,com.google.common.collect.ImmutableSortedSet:iterator(),628,629,"/**
 * Returns an unmodifiable iterator over this iterable's elements.
 * @return Iterator object or null if empty
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,higher,com.google.common.collect.DescendingImmutableSortedSet:higher(java.lang.Object),101,104,"/**
* Finds the higher element in the data structure.
* @param element element to compare with existing elements
* @return higher element or null if not found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,ceiling,com.google.common.collect.DescendingImmutableSortedSet:ceiling(java.lang.Object),96,99,"/**
* Returns the smallest value in this set that is greater than or equal to the given element.
* @param element the input element
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lastKey,com.google.common.collect.ImmutableSortedMap:lastKey(),914,917,"/**
* Returns the last key in the collection. 
* @return The last key or null if empty.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,concat,com.google.common.io.ByteSource:concat(java.util.Iterator),396,398,"/**
* Concatenates multiple ByteSources into one. 
* @param sources iterable of ByteSources to concatenate
*/","* Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method
   * is called. This will fail if the iterator is infinite and may cause problems if the iterator
   * eagerly fetches data for each source when iterated (rather than producing sources that only
   * load data through their streams). Prefer using the {@link #concat(Iterable)} overload if
   * possible.
   *
   * @param sources the sources to concatenate
   * @return a {@code ByteSource} containing the concatenated data
   * @throws NullPointerException if any of {@code sources} is {@code null}
   * @since 15.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource$CharSequenceCharSource:readLines(),603,606,"/**
* Returns an immutable list of strings representing lines from the iterator.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,concat,com.google.common.io.CharSource:concat(java.util.Iterator),465,467,"/**
* Concatenates an iterator of char sources into a single char source.
* @param sources iterable collection of CharSource objects
*/","* Concatenates multiple {@link CharSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method
   * is called. This will fail if the iterator is infinite and may cause problems if the iterator
   * eagerly fetches data for each source when iterated (rather than producing sources that only
   * load data through their streams). Prefer using the {@link #concat(Iterable)} overload if
   * possible.
   *
   * @param sources the sources to concatenate
   * @return a {@code CharSource} containing the concatenated data
   * @throws NullPointerException if any of {@code sources} is {@code null}
   * @since 15.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableRangeMap,"com.google.common.collect.CollectCollectors:toImmutableRangeMap(java.util.function.Function,java.util.function.Function)",343,355,"/**
* Converts a collection of objects to an immutable range map.
* @param keyFunction function to apply for each object's key
* @param valueFunction function to apply for each object's value
* @return ImmutableRangeMap or null if input is empty
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,createRangeMap,com.google.common.collect.ImmutableRangeMap$SerializedForm:createRangeMap(),443,449,"/**
* Creates a range-based map from the existing map of ranges.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,copyOf,com.google.common.collect.ImmutableRangeSet:copyOf(java.lang.Iterable),135,137,"/**
* Creates an immutable range set from the given iterable of ranges.
* @param ranges collection of ranges to include in the range set
*/","* Returns an {@code ImmutableRangeSet} containing each of the specified disjoint ranges.
   * Overlapping ranges and empty ranges are forbidden, though adjacent ranges are permitted and
   * will be merged.
   *
   * @throws IllegalArgumentException if any ranges overlap or are empty
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,"com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Comparator,java.lang.Iterable)",259,276,"/**
* Creates a new ImmutableSortedMultiset from an iterable of elements and a comparator.
* @param comparator comparison function for the multiset
* @param elements iterable of elements to include in the multiset
* @return ImmutableSortedMultiset instance or a copy if input is already sorted
*/","* Returns an immutable sorted multiset containing the given elements sorted by the given {@code
   * Comparator}. This method iterates over {@code elements} at most once.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOfSorted,com.google.common.collect.ImmutableSortedMultiset:copyOfSorted(com.google.common.collect.SortedMultiset),292,295,"/**
* Creates a deep copy of the given SortedMultiset.
* @param sortedMultiset multiset to be copied
*/","* Returns an immutable sorted multiset containing the elements of a sorted multiset, sorted by
   * the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always
   * uses the natural ordering of the elements.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is safe to use even when {@code sortedMultiset} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code sortedMultiset} or any of its elements is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getClassLoaderUrls,com.google.common.reflect.ClassPath:getClassLoaderUrls(java.lang.ClassLoader),622,630,"/**
* Retrieves a list of URLs associated with the given ClassLoader.
* @param classloader The ClassLoader instance to fetch URLs for
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,<init>,"com.google.common.reflect.Types$ParameterizedTypeImpl:<init>(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])",257,264,"/**
* Constructs a ParameterizedTypeImpl instance with given type arguments.
* @param ownerType the owning type (may be null)
* @param rawType the raw class
* @param typeArguments array of type arguments
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,<init>,"com.google.common.reflect.Types$WildcardTypeImpl:<init>(java.lang.reflect.Type[],java.lang.reflect.Type[])",470,475,"/**
* Initializes a WildcardTypeImpl with bounds.
* @param lowerBounds array of types representing the lower bounds
* @param upperBounds array of types representing the upper bounds
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAll,com.google.common.util.concurrent.WrappingExecutorService:invokeAll(java.util.Collection),114,118,"/**
* Invokes a collection of tasks and returns their futures.
* @param tasks collection of callable tasks
* @return list of task futures or null if interrupted
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAll,"com.google.common.util.concurrent.WrappingExecutorService:invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)",120,125,"/**
* Invokes all specified tasks concurrently with a given timeout.
* @param tasks collection of tasks to execute
* @param timeout execution time limit in the specified unit
* @param unit time unit for the timeout (e.g., seconds, milliseconds)
* @return list of task futures or null if interrupted
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAny,com.google.common.util.concurrent.WrappingExecutorService:invokeAny(java.util.Collection),127,131,"/**
* Invokes any task in the collection that completes without interruption.
* @param tasks collection of tasks to attempt
* @return result of first successfully completed task or null if none complete
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAny,"com.google.common.util.concurrent.WrappingExecutorService:invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)",133,138,"/**
* Invokes any of the provided callable tasks with a specified timeout.
* @param tasks collection of callable tasks to execute
* @param timeout maximum time in milliseconds to wait for result
* @param unit time unit for timeout (e.g. TimeUnit.SECONDS)
* @return result of first task that completes or throws exception if none complete within timeout
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,"com.google.common.collect.Collections2$OrderedPermutationCollection:<init>(java.lang.Iterable,java.util.Comparator)",439,443,"/**
* Initializes an ordered permutation collection from the given iterable.
* @param input iterable elements to be ordered
* @param comparator comparison function for sorting
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,immutableSortedCopy,com.google.common.collect.Ordering:immutableSortedCopy(java.lang.Iterable),885,887,"/**
* Creates an immutable sorted copy of this iterable.
* @param elements Iterable to be merged with this
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,createEntrySet,com.google.common.collect.RegularImmutableBiMap:createEntrySet(),153,158,"/**
* Creates an immutable set of map entries.
* @return Set of key-value pairs or empty set if the map is empty
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,createEntrySet,com.google.common.collect.RegularImmutableMap:createEntrySet(),307,310,"/**
* Creates an immutable set of map entries.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,buildJdkBacked,com.google.common.collect.ImmutableMultiset$Builder:buildJdkBacked(),594,600,"/**
* Creates a JDK-backed immutable multiset instance.
* @return ImmutableMultiset object
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,create,com.google.common.collect.RegularImmutableMultiset:create(java.util.Collection),43,85,"/**
* Creates a multiset from the given entries.
* @param entries collection of entries to be included in the multiset
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,asList,com.google.common.collect.ImmutableCollection:asList(),361,370,"/**
* Converts this collection to an immutable list.
* @return ImmutableList object containing all elements
*/","* Returns an {@code ImmutableList} containing the same elements, in the same order, as this
   * collection.
   *
   * <p><b>Performance note:</b> in most cases this method can return quickly without actually
   * copying anything. The exact circumstances under which the copy is performed are undefined and
   * subject to change.
   *
   * @since 2.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,createAsList,com.google.common.collect.ImmutableSet$CachingAsList:createAsList(),321,323,"/**
* Creates an immutable list containing this collection's elements. 
* @return Immutable list or empty list if this is empty.",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSet.java,createAsList,com.google.common.collect.RegularImmutableSet:createAsList(),111,116,"/**
* Creates an immutable list from table contents.
* @return empty list if table is empty, otherwise a new ImmutableAsList instance
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,toImmutableSortedSet,com.google.common.collect.ImmutableSortedSet:toImmutableSortedSet(java.util.Comparator),81,84,"/**
* Converts a stream into an immutable sorted set.
* @param comparator Comparator for sorting elements
* @return Collector that produces ImmutableSortedSet
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableSortedSet}, ordered by the specified comparator.
   *
   * <p>If the elements contain duplicates (according to the comparator), only the first duplicate
   * in encounter order will appear in the result.
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Iterator),265,271,"/**
* Creates an immutable sorted set from the given iterator of elements.
* @param elements iterator yielding unique elements to include in the set
*/","* Returns an immutable sorted set containing the given elements sorted by their natural ordering.
   * When multiple elements are equivalent according to {@code compareTo()}, only the first one
   * specified is included.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,buildOrThrow,com.google.common.collect.ImmutableBiMap$Builder:buildOrThrow(),451,481,"/**
* Builds a BiMap from the Builder's state or throws an exception if invalid.
* @return ImmutableBiMap object
*/","* Returns a newly-created immutable bimap, or throws an exception if any key or value was added
     * more than once. The iteration order of the returned bimap is the order in which entries were
     * inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case
     * entries are sorted by value.
     *
     * @throws IllegalArgumentException if duplicate keys or values were added
     * @since 31.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,buildJdkBacked,com.google.common.collect.ImmutableBiMap$Builder:buildJdkBacked(),498,515,"/**
* Builds a JDK-backed immutable bi-map for testing.
* @return ImmutableBiMap instance or empty map if size is 0
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,build,com.google.common.collect.ImmutableMap$Builder:build(boolean),529,580,"/**
 * Builds an ImmutableMap from the provided entries.
 * @param throwIfDuplicateKeys whether to throw on duplicate keys or keep last
 * @return a populated ImmutableMap object
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,headMap,"com.google.common.collect.ImmutableSortedMap:headMap(java.lang.Object,boolean)",955,958,"/**
* Returns an immutable sorted map containing all entries up to but not including (or including) the specified key.
* @param toKey the boundary key
* @param inclusive whether to include the boundary key in the result
* @return ImmutableSortedMap object or null if input is invalid
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less
   * than (or equal to, if {@code inclusive}) {@code toKey}.
   *
   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code
   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code toKey}.
   *
   * @since 12.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,tailMap,"com.google.common.collect.ImmutableSortedMap:tailMap(java.lang.Object,boolean)",1026,1029,"/**
* Returns an immutable sorted map containing all entries greater than or equal to the specified key.
* @param fromKey key value to start inclusion at
* @param inclusive whether to include keys equal to the from key as well
* @return ImmutableSortedMap object or empty map if no entries match","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are
   * greater than (or equal to, if {@code inclusive}) {@code fromKey}.
   *
   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code
   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code fromKey}.
   *
   * @since 12.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,headMultiset,"com.google.common.collect.RegularImmutableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",106,109,"/**
* Returns a sub-multiset containing elements less than the given upper bound.
* @param upperBound element to consider as an upper limit
* @param boundType type of boundary (OPEN or CLOSED)
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,tailMultiset,"com.google.common.collect.RegularImmutableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",111,115,"/**
* Retrieves a sub-multiset from the tail of this multiset.
* @param lowerBound minimum value (inclusive)
* @param boundType type of bounds for result (OPEN or CLOSED)
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,subSetImpl,"com.google.common.collect.RegularImmutableSortedSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",261,265,"/**
* Creates a subset of this sorted set.
* @param fromElement start element (inclusive/exclusive)
* @param toElement end element (inclusive/exclusive)
* @return ImmutableSortedSet containing subset elements
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isPublicSuffix,com.google.common.net.InternetDomainName:isPublicSuffix(),382,384,"/**
* Checks whether URL has public suffix.
* @return true if URL matches public suffix, false otherwise
*/","* Indicates whether this domain name represents a <i>public suffix</i>, as defined by the Mozilla
   * Foundation's <a href=""http://publicsuffix.org/"">Public Suffix List</a> (PSL). A public suffix
   * is one under which Internet users can directly register names, such as {@code com}, {@code
   * co.uk} or {@code pvt.k12.wy.us}. Examples of domain names that are <i>not</i> public suffixes
   * include {@code google.com}, {@code foo.co.uk}, and {@code myblog.blogspot.com}.
   *
   * <p>Public suffixes are a proper superset of {@linkplain #isRegistrySuffix() registry suffixes}.
   * The list of public suffixes additionally contains privately owned domain names under which
   * Internet users can register subdomains. An example of a public suffix that is not a registry
   * suffix is {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i>
   * registry suffixes, since domain name registries collectively control all internet domain names.
   *
   * <p>For considerations on whether the public suffix or registry suffix designation is more
   * suitable for your application, see <a
   * href=""https://github.com/google/guava/wiki/InternetDomainNameExplained"">this article</a>.
   *
   * @return {@code true} if this domain name appears exactly on the public suffix list
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,hasPublicSuffix,com.google.common.net.InternetDomainName:hasPublicSuffix(),398,400,"/**
* Checks if a domain has a publicly recognized suffix.
* @return true if suffix is recognized, false otherwise
*/","* Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},
   * including if it is a public suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code
   * google.invalid}. This is the recommended method for determining whether a domain is potentially
   * an addressable host.
   *
   * <p>Note that this method is equivalent to {@link #hasRegistrySuffix()} because all registry
   * suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes.
   *
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isUnderPublicSuffix,com.google.common.net.InternetDomainName:isUnderPublicSuffix(),424,426,"/**
* Checks if domain name is under a publicly registered suffix.
* @return true if under public suffix, false otherwise
*/","* Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},
   * while not being a public suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code myblog.blogspot.com}, but not for {@code com},
   * {@code co.uk}, {@code google.invalid}, or {@code blogspot.com}.
   *
   * <p>This method can be used to determine whether it will probably be possible to set cookies on
   * the domain, though even that depends on individual browsers' implementations of cookie
   * controls. See <a href=""http://www.ietf.org/rfc/rfc2109.txt"">RFC 2109</a> for details.
   *
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isTopPrivateDomain,com.google.common.net.InternetDomainName:isTopPrivateDomain(),440,442,"/**
* Checks if the current domain is a top-level private domain (e.g. example.com).
*/","* Indicates whether this domain name is composed of exactly one subdomain component followed by a
   * {@linkplain #isPublicSuffix() public suffix}. For example, returns {@code true} for {@code
   * google.com} {@code foo.co.uk}, and {@code myblog.blogspot.com}, but not for {@code
   * www.google.com}, {@code co.uk}, or {@code blogspot.com}.
   *
   * <p>This method can be used to determine whether a domain is probably the highest level for
   * which cookies may be set, though even that depends on individual browsers' implementations of
   * cookie controls. See <a href=""http://www.ietf.org/rfc/rfc2109.txt"">RFC 2109</a> for details.
   *
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isRegistrySuffix,com.google.common.net.InternetDomainName:isRegistrySuffix(),491,493,"/**
* Checks if registry suffix is enabled.
* @return true if registry suffix is enabled, false otherwise
*/","* Indicates whether this domain name represents a <i>registry suffix</i>, as defined by a subset
   * of the Mozilla Foundation's <a href=""http://publicsuffix.org/"">Public Suffix List</a> (PSL). A
   * registry suffix is one under which Internet users can directly register names via a domain name
   * registrar, and have such registrations lawfully protected by internet-governing bodies such as
   * ICANN. Examples of registry suffixes include {@code com}, {@code co.uk}, and {@code
   * pvt.k12.wy.us}. Examples of domain names that are <i>not</i> registry suffixes include {@code
   * google.com} and {@code foo.co.uk}.
   *
   * <p>Registry suffixes are a proper subset of {@linkplain #isPublicSuffix() public suffixes}. The
   * list of public suffixes additionally contains privately owned domain names under which Internet
   * users can register subdomains. An example of a public suffix that is not a registry suffix is
   * {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i> registry
   * suffixes, since domain name registries collectively control all internet domain names.
   *
   * <p>For considerations on whether the public suffix or registry suffix designation is more
   * suitable for your application, see <a
   * href=""https://github.com/google/guava/wiki/InternetDomainNameExplained"">this article</a>.
   *
   * @return {@code true} if this domain name appears exactly on the public suffix list as part of
   *     the registry suffix section (labelled ""ICANN"").
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,hasRegistrySuffix,com.google.common.net.InternetDomainName:hasRegistrySuffix(),506,508,"/**
* Checks if a registry suffix is present.
* @return true if suffix found, false otherwise
*/","* Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix},
   * including if it is a registry suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code
   * google.invalid}.
   *
   * <p>Note that this method is equivalent to {@link #hasPublicSuffix()} because all registry
   * suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes.
   *
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isUnderRegistrySuffix,com.google.common.net.InternetDomainName:isUnderRegistrySuffix(),528,530,"/**
* Checks if the current domain name is under a registry suffix.
* @return true if registered under a suffix, false otherwise
*/","* Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix},
   * while not being a registry suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code blogspot.com}, but not for {@code com}, {@code
   * co.uk}, or {@code google.invalid}.
   *
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isTopDomainUnderRegistrySuffix,com.google.common.net.InternetDomainName:isTopDomainUnderRegistrySuffix(),543,545,"/**
* Checks if top domain is under registry suffix.
* @return true if index is 1, false otherwise
*/","* Indicates whether this domain name is composed of exactly one subdomain component followed by a
   * {@linkplain #isRegistrySuffix() registry suffix}. For example, returns {@code true} for {@code
   * google.com}, {@code foo.co.uk}, and {@code blogspot.com}, but not for {@code www.google.com},
   * {@code co.uk}, or {@code myblog.blogspot.com}.
   *
   * <p><b>Warning:</b> This method should not be used to determine the probable highest level
   * parent domain for which cookies may be set. Use {@link #topPrivateDomain()} for that purpose.
   *
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,"com.google.common.collect.ImmutableSortedMap:copyOf(java.lang.Iterable,java.util.Comparator)",419,423,"/**
* Creates an immutable sorted map from the given entries and comparator.
* @param entries iterable of key-value pairs
* @param comparator for sorting keys
* @return ImmutableSortedMap instance or null if entries are null
*/","* Returns an immutable map containing the given entries, with keys sorted by the provided
   * comparator.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to the comparator
   * @since 19.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOfSorted,com.google.common.collect.ImmutableSortedMap:copyOfSorted(java.util.SortedMap),435,453,"/**
* Creates an immutable sorted map copy of the given sorted map.
* @param map the original sorted map
*/","* Returns an immutable map containing the same entries as the provided sorted map, with the same
   * ordering.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code map} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOfInternal,"com.google.common.collect.ImmutableSortedMap:copyOfInternal(java.util.Map,java.util.Comparator)",455,475,"/**
* Creates an immutable sorted map copy of the given input map.
* @param map input map to copy
* @param comparator comparator for sorting keys
* @return ImmutableSortedMap or null if partial view and not modifiable
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,valueSet,"com.google.common.collect.ImmutableSetMultimap:valueSet(java.util.Comparator,java.util.Collection)",641,646,"/**
* Creates an immutable set of values with optional comparator-based ordering.
* @param valueComparator Comparator for sorting the set, or null for unordered
* @param values Collection of values to include in the set
* @return An ImmutableSet containing all unique values
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,create,com.google.common.collect.Sets$CartesianSet:create(java.util.List),1543,1580,"/**
* Creates a Cartesian product of sets.
* @param sets collection of sets to combine
* @return Set of lists containing combined elements
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,immutableCopy,com.google.common.collect.Sets$SetView:immutableCopy(),602,613,"/**
* Creates an immutable copy of the set.
* @return non-null ImmutableSet containing all elements or empty set if size is 0
*/","* Returns an immutable copy of the current contents of this set view. Does not support null
     * elements.
     *
     * <p><b>Warning:</b> this may have unexpected results if a backing set of this view uses a
     * nonstandard notion of equivalence, for example if it is a {@link TreeSet} using a comparator
     * that is inconsistent with {@link Object#equals(Object)}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,rawTypes,com.google.common.reflect.TypeToken$ClassSet:rawTypes(),786,793,"/**
* Collects raw types of a type token.
* @return Set of Class objects representing the raw types
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,rawTypes,com.google.common.reflect.TypeToken$TypeSet:rawTypes(),703,709,"/**
* Collects and returns a set of raw types that can be assigned to the generic type T. 
* @return Set of Class<? super T> representing raw types.","Returns the raw types of the types in this set, in the same order.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeAt,com.google.common.collect.MinMaxPriorityQueue:removeAt(int),407,442,"/**
* Removes the element at specified index and adjusts heap accordingly.
* @param index position of element to remove
* @return MoveDesc object describing changes or null if removed element is last
*/","* Removes the element at position {@code index}.
   *
   * <p>Normally this method leaves the elements at up to {@code index - 1}, inclusive, untouched.
   * Under these circumstances, it returns {@code null}.
   *
   * <p>Occasionally, in order to maintain the heap invariant, it must swap a later element of the
   * list with one before {@code index}. Under these circumstances it returns a pair of elements as
   * a {@link MoveDesc}. The first one is the element that was previously at the end of the heap and
   * is now at some position before {@code index}. The second element is the one that was swapped
   * down to replace the element at {@code index}. This fact is used by iterator.remove so as to
   * visit elements during a traversal once and only once.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,remove,"com.google.common.collect.TreeMultiset$AvlNode:remove(java.util.Comparator,java.lang.Object,int,int[])",721,771,"/**
* Removes at most 'count' elements equal to 'e' from the AVL tree.
* @param comparator comparison function
* @param e element to remove
* @param count maximum number of removals
* @param result array to store actual removal count
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset$AvlNode:setCount(java.util.Comparator,java.lang.Object,int,int[])",773,820,"/**
* Updates node's count and rebalances tree.
* @param comparator comparison function
* @param e element to compare with current node
* @param count new count value
* @param result array to store updated count
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset$AvlNode:setCount(java.util.Comparator,java.lang.Object,int,int,int[])",822,883,"/**
* Sets the count of elements under this node, rebalancing if necessary.
* @param comparator element comparator
* @param e element to add or remove
* @param expectedCount current count before update
* @param newCount updated count
* @param result array containing resulting count
* @return root node after updating and possibly rebalancing",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,sqrt,"com.google.common.math.BigIntegerMath:sqrt(java.math.BigInteger,java.math.RoundingMode)",218,251,"/**
* Computes the square root of a BigInteger using the specified rounding mode.
* @param x non-negative BigInteger value
* @param mode RoundingMode to apply in case of exactness ambiguity
* @return approximate or exact square root as BigInteger","* Returns the square root of {@code x}, rounded with the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x < 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code
   *     sqrt(x)} is not an integer",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.util.Iterator),233,244,"/**
* Creates an immutable set from an iterator of elements.
* @param elements iterator containing the elements to be copied
*/","* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order
   * each appears first in the source iterator.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanJarFile,"com.google.common.reflect.ClassPath$LocationInfo:scanJarFile(java.util.jar.JarFile,com.google.common.collect.ImmutableSet$Builder)",492,501,"/**
* Scans a JAR file and adds its resources to the given builder.
* @param file JarFile to scan
* @param builder Builder for ResourceInfo objects
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanDirectory,"com.google.common.reflect.ClassPath$LocationInfo:scanDirectory(java.io.File,java.lang.String,java.util.Set,com.google.common.collect.ImmutableSet$Builder)",521,548,"/**
* Recursively scans a directory and its subdirectories for resources.
* @param directory the directory to scan
* @param packagePrefix prefix for resource names
* @param currentPath set of currently visited directories
* @param builder builder for ResourceInfo objects
*/","* Recursively scan the given directory, adding resources for each file encountered. Symlinks
     * which have already been traversed in the current tree path will be skipped to eliminate
     * cycles; otherwise symlinks are traversed.
     *
     * @param directory the root of the directory to scan
     * @param packagePrefix resource path prefix inside {@code classloader} for any files found
     *     under {@code directory}
     * @param currentPath canonical files already visited in the current directory tree path, for
     *     cycle elimination",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getClassPathFromManifest,"com.google.common.reflect.ClassPath:getClassPathFromManifest(java.io.File,java.util.jar.Manifest)",577,601,"/**
* Retrieves classpath entries from the given JAR file's manifest.
* @param jarFile the JAR file to extract classpath from
* @param manifest optional manifest to use; if null, returns empty set
* @return ImmutableSet of File objects representing classpath entries or an empty set if no entries found
*/","* Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according
   * to <a
   * href=""http://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#Main_Attributes"">JAR
   * File Specification</a>. If {@code manifest} is null, it means the jar file has no manifest, and
   * an empty set will be returned.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getRawType,com.google.common.reflect.TypeToken:getRawType(),193,199,"/**
* Returns the raw type of the generic type, which is its first bound.
*/","* Returns the raw type of {@code T}. Formally speaking, if {@code T} is returned by {@link
   * java.lang.reflect.Method#getGenericReturnType}, the raw type is what's returned by {@link
   * java.lang.reflect.Method#getReturnType} of the same method object. Specifically:
   *
   * <ul>
   *   <li>If {@code T} is a {@code Class} itself, {@code T} itself is returned.
   *   <li>If {@code T} is a {@link ParameterizedType}, the raw type of the parameterized type is
   *       returned.
   *   <li>If {@code T} is a {@link GenericArrayType}, the returned type is the corresponding array
   *       class. For example: {@code List<Integer>[] => List[]}.
   *   <li>If {@code T} is a type variable or a wildcard type, the raw type of the first upper bound
   *       is returned. For example: {@code <X extends Foo> => Foo}.
   * </ul>",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,someRawTypeIsSubclassOf,com.google.common.reflect.TypeToken:someRawTypeIsSubclassOf(java.lang.Class),885,892,"/**
* Checks if any raw type is a subclass of the given superclass.
* @param superclass Class to check against
* @return true if found, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,greatestOf,"com.google.common.collect.Ordering:greatestOf(java.lang.Iterable,int)",820,824,"/**
* Finds the greatest of up to K elements in a collection.
* @param iterable input collection
* @param k maximum number of elements to consider
* @return List of greatest elements or an empty list if less than K elements are found
*/","* Returns the {@code k} greatest elements of the given iterable according to this ordering, in
   * order from greatest to least. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.greatest(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in
   *     <i>descending order</i>
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 8.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,com.google.common.util.concurrent.ServiceManager:awaitStopped(java.time.Duration),366,368,"/**
* Converts specified duration to nanoseconds and awaits stopped state.
* @param timeout duration to wait before timing out
*/","* Waits for the all the services to reach a terminal state for no more than the given time. After
   * this method returns all services will either be {@linkplain Service.State#TERMINATED
   * terminated} or {@linkplain Service.State#FAILED failed}.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if not all of the services have stopped within the deadline
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor),127,131,"/**
* Retrieves an exiting executor service instance.
* @param executor ThreadPoolExecutor instance to wrap
*/","* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application
   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their
   * completion.
   *
   * <p>This method waits 120 seconds before continuing with JVM termination, even if the executor
   * has not finished its work.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,java.time.Duration)",85,91,"/**
* Returns an exiting executor service with a specified termination timeout.
* @param executor existing thread pool executor
* @param terminationTimeout duration before shutting down the executor
*/","* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application
   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their
   * completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @return an unmodifiable version of the input which will not hang the JVM
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor),189,194,"/**
* Retrieves a scheduled executor service with exit handling.
* @param executor existing thread pool executor
*/","* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when
   * the application is complete. It does so by using daemon threads and adding a shutdown hook to
   * wait for their completion.
   *
   * <p>This method waits 120 seconds before continuing with JVM termination, even if the executor
   * has not finished its work.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,java.time.Duration)",146,152,"/**
* Retrieves an existing scheduled executor service with a specified termination timeout.
* @param executor Scheduled thread pool executor
* @param terminationTimeout duration in nanoseconds before shutdown
*/","* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when
   * the application is complete. It does so by using daemon threads and adding a shutdown hook to
   * wait for their completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @return an unmodifiable version of the input which will not hang the JVM
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimKey,com.google.common.cache.LocalCache:reclaimKey(com.google.common.cache.ReferenceEntry),1737,1740,"/**
* Reclaims key from given ReferenceEntry, updating associated Segment.
* @param entry ReferenceEntry containing key to be reclaimed
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimValue,com.google.common.cache.LocalCache:reclaimValue(com.google.common.cache.LocalCache$ValueReference),1731,1735,"/**
* Reclaims the value associated with a given ValueReference.
* @param valueReference reference to reclaim
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,expireEntries,com.google.common.cache.LocalCache$Segment:expireEntries(long),2606,2621,"/**
* Removes expired entries from the write and access queues.
* @param now current timestamp
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,evictEntries,com.google.common.cache.LocalCache$Segment:evictEntries(com.google.common.cache.ReferenceEntry),2644,2666,"/**
* Evicts entries from the segment to maintain size within bounds.
* @param newest the newest entry by weight
*/","* Performs eviction if the segment is over capacity. Avoids flushing the entire cache if the
     * newest entry exceeds the maximum weight all on its own.
     *
     * @param newest the most recently added entry",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,com.google.common.util.concurrent.ServiceManager:awaitHealthy(java.time.Duration),314,316,"/**
* Awaits until the health check is successful or times out.
* @param timeout maximum duration to wait before throwing an exception
*/","* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more
   * than the given time. The manager will become healthy after all the component services have
   * reached the {@linkplain State#RUNNING running} state.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if not all of the services have finished starting within the deadline
   * @throws IllegalStateException if the service manager reaches a state from which it cannot
   *     become {@linkplain #isHealthy() healthy}.
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startupDurations,com.google.common.util.concurrent.ServiceManager:startupDurations(),431,435,"/**
 * Returns a map of service to startup duration in milliseconds.
 */","* Returns the service load times. This value will only return startup times for services that
   * have finished starting.
   *
   * @return Map of services and their corresponding startup time, the map entries will be ordered
   *     by startup time.
   * @since 31.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getAnnotationsByType,com.google.common.reflect.Parameter:getAnnotationsByType(java.lang.Class),96,99,"/**
* Fetches annotations of specified type from this element.
* @param annotationType Class of the annotations to search for
* @return Array of annotations found or null if none exist
*/",* @since 18.0,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantLock,com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantLock(java.lang.String),236,238,"/**
 * Creates a new ReentrantLock with the specified name.
 * @param lockName unique identifier for the lock
 */","Equivalent to {@code newReentrantLock(lockName, false)}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantReadWriteLock,com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantReadWriteLock(java.lang.String),251,253,"/**
* Creates a new Reentrant Read-Write Lock with the specified name.
* @param lockName unique identifier for the lock
*/","Equivalent to {@code newReentrantReadWriteLock(lockName, false)}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,getOrCreateNodes,com.google.common.util.concurrent.CycleDetectingLockFactory:getOrCreateNodes(java.lang.Class),283,293,"/**
* Retrieves or creates a map of enum values to LockGraphNode instances.
* @param clazz Enum class for which to retrieve or create nodes
* @return Map of enum values to LockGraphNode instances
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,putEdge,com.google.common.graph.StandardMutableGraph:putEdge(com.google.common.graph.EndpointPair),54,58,"/**
* Adds an edge between two nodes.
* @param endpoints pair of node identifiers
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,validateSyntax,com.google.common.net.InternetDomainName:validateSyntax(java.util.List),270,287,"/**
* Validates the syntax of a command by checking each part.
* @param parts list of command parts
* @return true if syntax is valid, false otherwise
*/","* Validation method used by {@code from} to ensure that the domain name is syntactically valid
   * according to RFC 1035.
   *
   * @return Is the domain name syntactically valid?",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,register,com.google.common.eventbus.SubscriberRegistry:register(java.lang.Object),74,91,"/**
* Registers a listener by adding its subscriber methods to the corresponding event type.
* @param listener object with subscriber methods
*/",Registers all subscriber methods on the given listener object.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,unregister,com.google.common.eventbus.SubscriberRegistry:unregister(java.lang.Object),94,114,"/**
* Removes event subscriber registrations for the given listener.
* @param listener object to unregister from events
*/",Unregisters all subscribers on the given listener object.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,immutable,com.google.common.graph.NetworkBuilder:immutable(),119,122,"/**
* Creates an immutable network builder.
*/","* Returns an {@link ImmutableNetwork.Builder} with the properties of this {@link NetworkBuilder}.
   *
   * <p>The returned builder can be used for populating an {@link ImmutableNetwork}.
   *
   * @since 28.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inducedSubgraph,"com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.Graph,java.lang.Iterable)",519,535,"/**
* Creates an induced subgraph from the given nodes.
* @param graph parent graph
* @param nodes iterable of node identifiers to include
* @return MutableGraph representing the subgraph or null if invalid input
*/","* Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph
   * that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges}
   * from {@code graph} for which both nodes are contained by {@code nodes}.
   *
   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,copyOf,com.google.common.graph.Graphs:copyOf(com.google.common.graph.Graph),597,606,"/**
* Creates a deep copy of the given graph.
* @param graph original graph to copy
* @return MutableGraph object representing the copied graph
*/",Creates a mutable copy of {@code graph} with the same nodes and edges.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,<init>,com.google.common.graph.ImmutableGraph$Builder:<init>(com.google.common.graph.GraphBuilder),136,140,"/**
* Copies and configures the given graph builder for immutable graphs.
* @param graphBuilder input graph builder to be copied
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,immutable,com.google.common.graph.ValueGraphBuilder:immutable(),119,122,"/**
* Returns an immutable builder for the value graph.
* @return Builder for immutable ValueGraph
*/","* Returns an {@link ImmutableValueGraph.Builder} with the properties of this {@link
   * ValueGraphBuilder}.
   *
   * <p>The returned builder can be used for populating an {@link ImmutableValueGraph}.
   *
   * <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link
   * ElementOrder#stable()}, regardless of the value that was set in this builder.
   *
   * @since 28.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate)",2837,2842,"/**
* Combines filtered map and entry predicate to create a new filtered map.
* @param map original filtered map
* @param entryPredicate additional filter for entries
* @return new filtered BiMap instance
*/","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * map.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(java.util.NavigableMap,com.google.common.base.Predicate)",2753,2761,"/**
* Filters a navigable map's entries using the provided predicate.
* @param unfiltered original map to filter
* @param entryPredicate predicate to apply to each entry
* @return filtered NavigableMap or null if input is invalid
*/","* Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate.
   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code
   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the
   * map's entries have a {@link Entry#setValue} method that throws an {@link
   * IllegalArgumentException} when the existing key and the provided value don't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings that satisfy the filter will be removed from the underlying map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:headSet(java.lang.Object),3158,3161,"/**
* Returns a view of all keys in this set strictly less than the given element.
* @param toElement key value up to which keys are included
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:subSet(java.lang.Object,java.lang.Object)",3152,3156,"/**
* Returns a subset of keys within the specified range.
* @param fromElement lower bound (inclusive)
* @param toElement upper bound (exclusive)
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:tailSet(java.lang.Object),3163,3166,"/**
* Returns a view of elements in this set greater than or equal to the specified element.
* @param fromElement the lower bound of the view
* @return a SortedSet containing all elements from the specified element onwards, or an empty set if no such elements exist.",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(java.util.SortedMap,com.google.common.base.Predicate)",2718,2725,"/**
* Filters a sorted map based on the provided predicate.
* @param unfiltered input map to be filtered
* @param entryPredicate filter criteria for each entry
* @return filtered sorted map or null if input is not FilteredEntrySortedMap
*/","* Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate.
   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code
   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the
   * map's entries have a {@link Entry#setValue} method that throws an {@link
   * IllegalArgumentException} when the existing key and the provided value don't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings that satisfy the filter will be removed from the underlying map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 11.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createAsMap,com.google.common.collect.FilteredKeyMultimap:createAsMap(),217,220,"/**
* Creates an AsMap representation of the unfiltered data,
* filtered by the provided key predicate.",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(java.util.Map,com.google.common.base.Predicate)",2558,2561,"/**
* Filters a map by applying the given predicate to its values.
* @param unfiltered original map
* @param valuePredicate predicate for filtering values
* @return new map with filtered values or null if all entries removed
*/","* Returns a map containing the mappings in {@code unfiltered} whose values satisfy a predicate.
   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},
   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose values satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnecting,com.google.common.graph.AbstractNetwork:edgeConnecting(com.google.common.graph.EndpointPair),199,203,"/**
* Finds an edge connecting two nodes in the graph.
* @param endpoints pair of nodes to find a connecting edge for
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,headSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:headSetImpl(java.lang.Comparable,boolean)",642,645,"/**
* Returns a view of elements up to but not including (if inclusive=false) or 
* equal to and including (if inclusive=true) the specified element.
* @param toElement element up to which to return elements
* @param inclusive whether to include the toElement itself in the result
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)",647,657,"/**
* Returns a subset of elements in the sorted set within a specified range.
* @param fromElement starting element
* @param fromInclusive whether start is inclusive (true) or exclusive (false)
* @param toElement ending element
* @param toInclusive whether end is inclusive (true) or exclusive (false)
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,tailSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:tailSetImpl(java.lang.Comparable,boolean)",659,662,"/**
* Returns an immutable sorted set of elements starting from the specified 'fromElement', 
* optionally including it if 'inclusive' is true.
* @param fromElement element to start from
* @param inclusive whether to include the 'fromElement'
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,headSetImpl,"com.google.common.collect.RegularContiguousSet:headSetImpl(java.lang.Object,boolean)",53,56,"/**
* Returns a contiguous set of elements up to the specified toElement,
* optionally including it.",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,subSetImpl,"com.google.common.collect.RegularContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",58,70,"/**
* Creates a contiguous subset within the current domain.
* @param fromElement start element
* @param fromInclusive whether start is inclusive
* @param toElement end element
* @param toInclusive whether end is inclusive
* @return ContiguousSet instance or EmptyContiguousSet if invalid range",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,tailSetImpl,"com.google.common.collect.RegularContiguousSet:tailSetImpl(java.lang.Object,boolean)",72,75,"/**
* Returns contiguous subset of elements starting from {@code fromElement} (inclusive if {@code inclusive} is true).
* @param fromElement element to start the set from
* @param inclusive whether the set includes {@code fromElement}
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,containsKey,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:containsKey(java.lang.Object),645,648,"/**
* Checks if a map contains a specified key.
* @param key object to search for
* @return true if key exists, false otherwise
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1:remove(java.lang.Object),692,703,"/**
* Removes a key-value pair from the map, returning the removed value.
* @param key unique identifier for the key to be removed
* @return the removed value or null if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,clear,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:clear(),705,708,"/**
 * Clears all mappings in this sub-range map.
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,put,"com.google.common.collect.TreeRangeMap$SubRangeMap:put(com.google.common.collect.Range,java.lang.Object)",528,533,"/**
* Puts a value into the map for the given enclosed range.
* @param range Range to store the value in
* @param value Value to be stored
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putCoalescing,"com.google.common.collect.TreeRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)",146,156,"/**
* Puts a value into the map with coalescing logic for overlapping ranges.
* @param range key range
* @param value associated value
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putAll,com.google.common.collect.TreeRangeMap:putAll(com.google.common.collect.RangeMap),183,188,"/**
* Adds all entries from a RangeMap to this map.
* @param rangeMap the source RangeMap
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addEdge,"com.google.common.graph.StandardMutableNetwork:addEdge(com.google.common.graph.EndpointPair,java.lang.Object)",120,125,"/**
* Adds an edge between two nodes in the graph.
* @param endpoints pair of node endpoints
* @param edge the edge to be added
* @return true if edge was successfully added, false otherwise
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,toImmutableMap,"com.google.common.collect.ImmutableMap:toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",108,114,"/**
* Converts a stream of objects to an immutable map, 
* applying the specified key and value functions. 
* @param keyFunction maps each object to its unique key
* @param valueFunction maps each object to its associated value
* @param mergeFunction merges values for duplicate keys
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements.
   *
   * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}), the
   * values are merged using the specified merging function. If the merging function returns {@code
   * null}, then the collector removes the value that has been computed for the key thus far (though
   * future occurrences of the key would reinsert it).
   *
   * <p>Entries will appear in the encounter order of the first occurrence of the key.
   *
   * @since 21.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,connectionsOf,"com.google.common.graph.ImmutableGraph:connectionsOf(com.google.common.graph.Graph,java.lang.Object)",96,104,"/**
* Retrieves connections of a node in the graph.
* @param graph Graph object
* @param node Node ID
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,connectionsOf,"com.google.common.graph.ImmutableValueGraph:connectionsOf(com.google.common.graph.ValueGraph,java.lang.Object)",96,106,"/**
* Retrieves connections for a given node in the value graph.
* @param graph ValueGraph instance
* @param node Node identifier
* @return GraphConnections object or null if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,connectionsOf,"com.google.common.graph.ImmutableNetwork:connectionsOf(com.google.common.graph.Network,java.lang.Object)",104,119,"/**
* Retrieves connections of a given node in the specified network.
* @param network Network object
* @param node Node identifier
* @return NetworkConnections object containing edge and node information
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,descendingIterator,com.google.common.collect.DescendingImmutableSortedSet:descendingIterator(),74,78,"/**
* Returns an unmodifiable iterator over this set in descending order.
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,first,com.google.common.collect.ImmutableSortedSet:first(),752,755,"/**
* Retrieves and returns the first element of the iteration sequence.
* @return The first element (of type E) or null if empty.",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,toImmutableRangeMap,"com.google.common.collect.ImmutableRangeMap:toImmutableRangeMap(java.util.function.Function,java.util.function.Function)",62,67,"/**
* Converts a collection of elements to an immutable range map.
* @param keyFunction function to extract the range key
* @param valueFunction function to extract the associated value
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableRangeMap}. As in {@link Builder}, overlapping ranges are not permitted.
   *
   * @since 23.1",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,readResolve,com.google.common.collect.ImmutableRangeMap$SerializedForm:readResolve(),435,441,"/**
* Determines the instance to be serialized based on mapOfRanges state.
* @return either an empty range map or a populated one
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,com.google.common.collect.ImmutableSortedMultiset:copyOf(java.lang.Iterable),211,217,"/**
* Creates a sorted multiset from the given iterable of elements.
* @param elements input iterable to be copied
*/","* Returns an immutable sorted multiset containing the given elements sorted by their natural
   * ordering. To create a copy of a {@code SortedMultiset} that preserves the comparator, call
   * {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.
   *
   * <p>Note that if {@code s} is a {@code Multiset<String>}, then {@code
   * ImmutableSortedMultiset.copyOf(s)} returns an {@code ImmutableSortedMultiset<String>}
   * containing each of the strings in {@code s}, while {@code ImmutableSortedMultiset.of(s)}
   * returns an {@code ImmutableSortedMultiset<Multiset<String>>} containing one element (the given
   * multiset itself).
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,build,com.google.common.collect.ImmutableSortedMultiset$Builder:build(),560,563,"/**
* Builds and returns an ImmutableSortedMultiset instance from existing sorted multiset data.
* @return ImmutableSortedMultiset object representing the built collection.","* Returns a newly-created {@code ImmutableSortedMultiset} based on the contents of the {@code
     * Builder}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getClassPathEntries,com.google.common.reflect.ClassPath:getClassPathEntries(java.lang.ClassLoader),603,620,"/**
* Builds a map of ClassLoader instances keyed by their corresponding file paths.
* @param classloader the ClassLoader instance to process
* @return an immutable map of (File, ClassLoader) pairs or an empty map if none found.",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveWildcardType,com.google.common.reflect.TypeResolver:resolveWildcardType(java.lang.reflect.WildcardType),245,249,"/**
* Resolves wildcard bounds to their actual types.
* @param type WildcardType instance
* @return resolved WildcardType instance
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,canonicalizeWildcardType,"com.google.common.reflect.TypeToken:canonicalizeWildcardType(java.lang.reflect.TypeVariable,java.lang.reflect.WildcardType)",1031,1041,"/**
* Canonicalizes the given WildcardType by updating its bounds based on the type variable declaration.
* @param declaration the type variable declaration
* @param type the WildcardType to canonicalize
* @return the updated WildcardType
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,subtypeOf,com.google.common.reflect.Types:subtypeOf(java.lang.reflect.Type),147,150,"/**
* Creates a wildcard type that extends the given upper bound.
* @param upperBound the supertype of the wildcard type
*/",Returns a new {@link WildcardType} with {@code upperBound}.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,supertypeOf,com.google.common.reflect.Types:supertypeOf(java.lang.reflect.Type),153,156,"/**
* Creates a WildcardType that is a supertype of the given Type, allowing any Object.
* @param lowerBound minimum type bound
*/",Returns a new {@link WildcardType} with {@code lowerBound}.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,orderedPermutations,"com.google.common.collect.Collections2:orderedPermutations(java.lang.Iterable,java.util.Comparator)",429,432,"/**
* Generates all ordered permutations of input elements.
* @param elements iterable collection of elements to permute
* @param comparator ordering comparator for the permutation order
*/","* Returns a {@link Collection} of all the permutations of the specified {@link Iterable} using
   * the specified {@link Comparator} for establishing the lexicographical ordering.
   *
   * <p>Examples:
   *
   * {@snippet :
   * for (List<String> perm : orderedPermutations(asList(""b"", ""c"", ""a""))) {
   *   println(perm);
   * }
   * // -> [""a"", ""b"", ""c""]
   * // -> [""a"", ""c"", ""b""]
   * // -> [""b"", ""a"", ""c""]
   * // -> [""b"", ""c"", ""a""]
   * // -> [""c"", ""a"", ""b""]
   * // -> [""c"", ""b"", ""a""]
   *
   * for (List<Integer> perm : orderedPermutations(asList(1, 2, 2, 1))) {
   *   println(perm);
   * }
   * // -> [1, 1, 2, 2]
   * // -> [1, 2, 1, 2]
   * // -> [1, 2, 2, 1]
   * // -> [2, 1, 1, 2]
   * // -> [2, 1, 2, 1]
   * // -> [2, 2, 1, 1]
   * }
   *
   * <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations
   * Generation, described in Knuth's ""The Art of Computer Programming"", Volume 4, Chapter 7,
   * Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the
   * first permutation will be in ascending order, and the last will be in descending order.
   *
   * <p>Elements that compare equal are considered equal and no new permutations are created by
   * swapping them.
   *
   * <p>An empty iterable has only one permutation, which is an empty list.
   *
   * @param elements the original iterable whose elements have to be permuted.
   * @param comparator a comparator for the iterable's elements.
   * @return an immutable {@link Collection} containing all the different permutations of the
   *     original iterable.
   * @throws NullPointerException If the specified iterable is null, has any null elements, or if
   *     the specified comparator is null.
   * @since 12.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toSortedList,com.google.common.collect.FluentIterable:toSortedList(java.util.Comparator),636,639,"/**
* Converts delegate iterable to a sorted, immutable list.
* @param comparator comparison function for sorting
* @return ImmutableList of elements in sorted order or null if not found
*/","* Returns an {@code ImmutableList} containing all of the elements from this {@code
   * FluentIterable} in the order specified by {@code comparator}. To produce an {@code
   * ImmutableList} sorted by its natural ordering, use {@code toSortedList(Ordering.natural())}.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code
   * stream.sorted(comparator).collect()}.
   *
   * @param comparator the function by which to sort list elements
   * @throws NullPointerException if any element of this iterable is {@code null}
   * @since 14.0 (since 13.0 as {@code toSortedImmutableList()}).",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyFromEntries,com.google.common.collect.ImmutableMultiset:copyFromEntries(java.util.Collection),217,224,"/**
* Creates an immutable multiset from a collection of key-value pairs.
* @param entries collection of entries to copy from
* @return ImmutableMultiset instance or empty set if input is empty
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableAsList.java,readResolve,com.google.common.collect.ImmutableAsList$SerializedForm:readResolve(),71,73,"/**
* Returns collection as an unmodifiable list.
* @return List representation of this collection
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.util.Collection),258,265,"/**
* Creates an immutable copy of the specified collection.
* @param elements Collection to be copied
*/","* Returns an immutable list containing the given elements, in order.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>Note that if {@code list} is a {@code List<String>}, then {@code ImmutableList.copyOf(list)}
   * returns an {@code ImmutableList<String>} containing each of the strings in {@code list}, while
   * {@code ImmutableList.of(list)} returns an {@code ImmutableList<List<String>>} containing one
   * element (the given list itself).
   *
   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code elements} contains a null element",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,getValue,com.google.common.collect.SparseImmutableTable:getValue(int),125,131,"/**
* Retrieves a value from the table by index.
* @param index unique position of the value in the table
* @return value associated with the given index or null if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,asList,com.google.common.collect.ImmutableSet$CachingAsList:asList(),311,319,"/**
* Returns a list view of this collection, lazily creating it if not already initialized.
* @return List containing all elements in this collection.",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,build,com.google.common.collect.ImmutableBiMap$Builder:build(),437,440,"/**
 * Builds and returns an immutable bi-map. 
 * This is a convenience method that simply calls {@link #buildOrThrow()}.
 */","* Returns a newly-created immutable bimap. The iteration order of the returned bimap is the
     * order in which entries were inserted into the builder, unless {@link #orderEntriesByValue}
     * was called, in which case entries are sorted by value.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate keys or values. The {@code build()} method
     * will soon be deprecated.
     *
     * @throws IllegalArgumentException if duplicate keys or values were added",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,buildOrThrow,com.google.common.collect.ImmutableMap$Builder:buildOrThrow(),606,608,"/**
* Builds an immutable map and throws any exception that occurs.
* @return ImmutableMap of K to V or null if build fails
*/","* Returns a newly-created immutable map, or throws an exception if any key was added more than
     * once. The iteration order of the returned map is the order in which entries were inserted
     * into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are
     * sorted by value.
     *
     * @throws IllegalArgumentException if duplicate keys were added
     * @since 31.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,buildKeepingLast,com.google.common.collect.ImmutableMap$Builder:buildKeepingLast(),625,627,"/**
 * Builds an immutable map keeping only the last entry.
 * @return An empty map if no entries were kept
 */","* Returns a newly-created immutable map, using the last value for any key that was added more
     * than once. The iteration order of the returned map is the order in which entries were
     * inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case
     * entries are sorted by value. If a key was added more than once, it appears in iteration order
     * based on the first time it was added, again unless {@link #orderEntriesByValue} was called.
     *
     * <p>In the current implementation, all values associated with a given key are stored in the
     * {@code Builder} object, even though only one of them will be used in the built map. If there
     * can be many repeated keys, it may be more space-efficient to use a {@link
     * java.util.LinkedHashMap LinkedHashMap} and {@link ImmutableMap#copyOf(Map)} rather than
     * {@code ImmutableMap.Builder}.
     *
     * @since 31.1",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,headMap,com.google.common.collect.ImmutableSortedMap:headMap(java.lang.Object),939,942,"/**
* Returns an immutable sorted map containing all entries with keys less than the specified key.
* @param toKey upper bound of the returned map's key range
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less
   * than {@code toKey}.
   *
   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code
   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code toKey}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lowerEntry,com.google.common.collect.ImmutableSortedMap:lowerEntry(java.lang.Object),1031,1034,"/**
* Retrieves the entry with the lowest key value less than or equal to the given key.
* @param key the key to find a lower entry for
* @return the corresponding Entry object or null if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,floorEntry,com.google.common.collect.ImmutableSortedMap:floorEntry(java.lang.Object),1041,1044,"/**
* Retrieves entry with greatest key less than or equal to specified key.
* @param key target key value
* @return Entry object for matching key or null if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,subMap,"com.google.common.collect.ImmutableSortedMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",988,999,"/**
* Returns a sub-map of this map, containing keys within the specified range.
* @param fromKey starting key
* @param fromInclusive whether starting key is inclusive
* @param toKey ending key
* @param toInclusive whether ending key is inclusive
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges
   * from {@code fromKey} to {@code toKey}, inclusive or exclusive as indicated by the boolean
   * flags.
   *
   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link
   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.
   * However, this method doesn't throw an exception in that situation, but instead keeps the
   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of
   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.
   *
   * @since 12.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,tailMap,com.google.common.collect.ImmutableSortedMap:tailMap(java.lang.Object),1010,1013,"/**
* Returns an immutable map containing all entries with keys greater than or equal to the specified key.
* @param fromKey key to start including in the returned map
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are
   * greater than or equals to {@code fromKey}.
   *
   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code
   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code fromKey}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,ceilingEntry,com.google.common.collect.ImmutableSortedMap:ceilingEntry(java.lang.Object),1051,1054,"/**
* Retrieves the first entry with a key greater than or equal to the specified value.
* @param key target key value
* @return Entry object containing the matching key and value, or null if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,higherEntry,com.google.common.collect.ImmutableSortedMap:higherEntry(java.lang.Object),1061,1064,"/**
* Retrieves the entry with the highest key value less than or equal to the given key.
* @param key the key value threshold
* @return Entry object or null if no entries are found",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,com.google.common.collect.ImmutableSortedMap:copyOf(java.lang.Iterable),402,409,"/**
* Creates an immutable sorted map from the given entries.
* @param entries Iterable of key-value pairs
*/","* Returns an immutable map containing the given entries, with keys sorted by their natural
   * ordering.
   *
   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually
   * comparable.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to the comparator
   * @since 19.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSortedMap,"com.google.common.collect.CollectCollectors:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",229,242,"/**
* Converts a collection of objects into an immutable sorted map.
* @param comparator key comparison function
* @param keyFunction maps each object to its corresponding key
* @param valueFunction maps each object to its corresponding value
* @param mergeFunction merges duplicate values
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,com.google.common.collect.ImmutableSortedMap:copyOf(java.util.Map),367,373,"/**
* Creates an immutable sorted map from the given map, using natural order for keys. 
* @param map input map to copy from
*/","* Returns an immutable map containing the same entries as {@code map}, sorted by the natural
   * ordering of the keys.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the keys in {@code map} are not mutually comparable
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to their natural ordering",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,"com.google.common.collect.ImmutableSortedMap:copyOf(java.util.Map,java.util.Comparator)",386,389,"/**
* Creates an immutable sorted map from the given map and comparator.
* @param map map to copy
* @param comparator key comparator for sorting
* @return ImmutableSortedMap instance
*/","* Returns an immutable map containing the same entries as {@code map}, with keys sorted by the
   * provided comparator.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to the comparator",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,cartesianProduct,com.google.common.collect.Sets:cartesianProduct(java.util.List),1476,1478,"/**
* Generates Cartesian product of input sets.
* @param sets collection of sets to combine
* @return set of lists representing all possible combinations
*/","* Returns every possible list that can be formed by choosing one element from each of the given
   * sets in order; the ""n-ary <a href=""http://en.wikipedia.org/wiki/Cartesian_product"">Cartesian
   * product</a>"" of the sets. For example:
   *
   * {@snippet :
   * Sets.cartesianProduct(ImmutableList.of(
   *     ImmutableSet.of(1, 2),
   *     ImmutableSet.of(""A"", ""B"", ""C"")))
   * }
   *
   * <p>returns a set containing six lists:
   *
   * <ul>
   *   <li>{@code ImmutableList.of(1, ""A"")}
   *   <li>{@code ImmutableList.of(1, ""B"")}
   *   <li>{@code ImmutableList.of(1, ""C"")}
   *   <li>{@code ImmutableList.of(2, ""A"")}
   *   <li>{@code ImmutableList.of(2, ""B"")}
   *   <li>{@code ImmutableList.of(2, ""C"")}
   * </ul>
   *
   * <p>The result is guaranteed to be in the ""traditional"", lexicographical order for Cartesian
   * products that you would get from nesting for loops:
   *
   * {@snippet :
   * for (B b0 : sets.get(0)) {
   *   for (B b1 : sets.get(1)) {
   *     ...
   *     ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...);
   *     // operate on tuple
   *   }
   * }
   * }
   *
   * <p>Note that if any input set is empty, the Cartesian product will also be empty. If no sets at
   * all are provided (an empty list), the resulting Cartesian product has one element, an empty
   * list (counter-intuitive, but mathematically consistent).
   *
   * <p><i>Performance notes:</i> while the cartesian product of sets of size {@code m, n, p} is a
   * set of size {@code m x n x p}, its actual memory consumption is much smaller. When the
   * cartesian set is constructed, the input sets are merely copied. Only as the resulting set is
   * iterated are the individual lists created, and these are not retained after iteration.
   *
   * @param sets the sets to choose elements from, in the order that the elements chosen from those
   *     sets should appear in the resulting lists
   * @param <B> any common base class shared by all axes (often just {@link Object})
   * @return the Cartesian product, as an immutable set containing immutable lists
   * @throws NullPointerException if {@code sets}, any one of the {@code sets}, or any element of a
   *     provided set is null
   * @throws IllegalArgumentException if the cartesian product size exceeds the {@code int} range
   * @since 2.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeExact,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:removeExact(java.lang.Object),849,857,"/**
* Removes the exact object from the queue.
* @param target Object to be removed
* @return true if removed, false otherwise
*/","Removes only this exact instance, not others that are equals()",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeAndGet,com.google.common.collect.MinMaxPriorityQueue:removeAndGet(int),478,482,"/**
* Removes and returns an element at specified index.
* @param index position of the element to remove
*/",Removes and returns the value at {@code index}.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,remove,"com.google.common.collect.TreeMultiset:remove(java.lang.Object,int)",279,301,"/**
* Removes specified elements from the set within a given number of occurrences.
* @param element object to remove
* @param occurrences maximum number of removals to attempt
* @return actual number of removed elements or 0 if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset:setCount(java.lang.Object,int)",303,323,"/**
* Updates the count of an existing element in the collection.
* @param element element to update
* @param count new count value
* @return updated count value or 0 if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset:setCount(java.lang.Object,int,int)",325,347,"/**
* Updates tree count by adding or removing an element.
* @param element item to add/remove
* @param oldCount previous count
* @param newCount updated count
* @return true if count changed, false otherwise
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.lang.Iterable),221,225,"/**
* Creates an immutable set from the given iterable.
* @param elements collection of elements to be copied
*/","* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order
   * each appears first in the source iterable. This method iterates over {@code elements} only
   * once.
   *
   * <p><b>Performance note:</b> This method will sometimes recognize that the actual copy operation
   * is unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only
   * once. This reduces the expense of habitually making defensive copies at API boundaries.
   * However, the precise conditions for skipping the copy operation are undefined.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanDirectory,"com.google.common.reflect.ClassPath$LocationInfo:scanDirectory(java.io.File,com.google.common.collect.ImmutableSet$Builder)",503,508,"/**
* Recursively scans the specified directory and its subdirectories for resources.
* @param directory root directory to scan
* @param builder accumulator for ResourceInfo objects
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanJar,"com.google.common.reflect.ClassPath$LocationInfo:scanJar(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder)",465,490,"/**
* Scans a JAR file and its dependencies for resource information.
* @param file the JAR file to scan
* @param scannedUris set of already-scanned URIs to avoid duplicates
* @param builder builder for collecting ResourceInfo objects
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,boundAsSuperclass,com.google.common.reflect.TypeToken:boundAsSuperclass(java.lang.reflect.Type),325,333,"/**
* Returns the TypeToken for the superclass of T, or null if bound is an interface.
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,boundsAsInterfaces,com.google.common.reflect.TypeToken:boundsAsInterfaces(java.lang.reflect.Type[]),364,374,"/**
* Extracts interface bounds from a given array of type tokens.
* @param bounds input array of type tokens
* @return immutable list of interface TypeTokens or empty if none found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,constructor,com.google.common.reflect.TypeToken:constructor(java.lang.reflect.Constructor),629,661,"/**
* Creates an Invokable for a constructor.
* @param constructor the Constructor to create an Invokable for
*/","* Returns the {@link Invokable} for {@code constructor}, which must be a member of {@code T}.
   *
   * @since 14.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOf,com.google.common.reflect.TypeToken:isSubtypeOf(java.lang.reflect.Type),487,520,"/**
* Checks if this type is a subtype of the given supertype.
* @param supertype the supertype to check against
* @return true if this type is a subtype, false otherwise
*/","* Returns true if this type is a subtype of the given {@code type}. ""Subtype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,method,com.google.common.reflect.TypeToken:method(java.lang.reflect.Method),590,622,"/**
* Creates an Invokable instance for the given Method.
* @param method the target method to invoke
*/","* Returns the {@link Invokable} for {@code method}, which must be a member of {@code T}.
   *
   * @since 14.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainKeyReferenceQueue,com.google.common.cache.LocalCache$Segment:drainKeyReferenceQueue(),2475,2487,"/**
* Drains the key reference queue by reclaiming keys up to a maximum count.
* @GuardedBy(""this"") ensures thread safety
* @param i is incremented for each reclaimed key, breaking at DRAIN_MAX
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainValueReferenceQueue,com.google.common.cache.LocalCache$Segment:drainValueReferenceQueue(),2489,2501,"/**
* Drains a specified number of values from the reference queue.
* @throws RuntimeException on failure to reclaim values
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,tryExpireEntries,com.google.common.cache.LocalCache$Segment:tryExpireEntries(long),2595,2604,"/**
* Tries to expire entries based on the current timestamp.
* @param now current system time in milliseconds
*/",Cleanup expired entries when the lock is available.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newInstanceWithExplicitOrdering,"com.google.common.util.concurrent.CycleDetectingLockFactory:newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)",272,281,"/**
* Creates a new instance with explicit ordering for the given enum class and policy.
* @param enumClass Class of the enumeration to process
* @param policy Policy object used in processing
*/",Creates a {@code CycleDetectingLockFactory.WithExplicitOrdering<E>}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,register,com.google.common.eventbus.EventBus:register(java.lang.Object),235,237,"/**
* Registers an object with the subscribers list.
* @param object Object to be registered
*/","* Registers all subscriber methods on {@code object} to receive events.
   *
   * @param object object whose subscriber methods should be registered.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,unregister,com.google.common.eventbus.EventBus:unregister(java.lang.Object),245,247,"/**
* Unregisters an object from subscription service.
* @param object Object to be unregistered
*/","* Unregisters all subscriber methods on a registered {@code object}.
   *
   * @param object object whose subscriber methods should be unregistered.
   * @throws IllegalArgumentException if the object was not previously registered.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,immutable,com.google.common.graph.GraphBuilder:immutable(),115,118,"/**
* Returns an ImmutableGraph Builder instance.
*/","* Returns an {@link ImmutableGraph.Builder} with the properties of this {@link GraphBuilder}.
   *
   * <p>The returned builder can be used for populating an {@link ImmutableGraph}.
   *
   * <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link
   * ElementOrder#stable()}, regardless of the value that was set in this builder.
   *
   * @since 28.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate)",2790,2797,"/**
* Filters BiMap entries based on the provided predicate.
* @param unfiltered original BiMap
* @param entryPredicate predicate to filter entries by
* @return filtered BiMap or null if unfiltered is not a FilteredEntryBiMap
*/","* Returns a bimap containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the bimap's
   * {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link
   * IllegalArgumentException}. Similarly, the map's entries have an {@link Entry#setValue} method
   * that throws an {@link IllegalArgumentException} when the existing key and the provided value
   * don't satisfy the predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
   * bimap.
   *
   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying bimap and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered bimap and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$FilteredEntryNavigableMap:descendingMap(),3335,3338,"/**
* Returns a view of this map's entries in reverse order.
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$FilteredEntryNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",3340,3348,"/**
* Returns a sub-map of the navigable map, filtered by the given key range.
* @param fromKey starting key
* @param fromInclusive whether start is inclusive
* @param toKey ending key
* @param toInclusive whether end is inclusive
* @return NavigableMap object for the specified range or null if empty",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$FilteredEntryNavigableMap:headMap(java.lang.Object,boolean)",3350,3353,"/**
* Returns a navigable map containing entries up to but not including the specified key.
* @param toKey  key up to which to include entries
* @param inclusive true if toKey is included in the result, false otherwise
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$FilteredEntryNavigableMap:tailMap(java.lang.Object,boolean)",3355,3358,"/**
* Returns a NavigableMap containing entries with keys greater than or equal to the specified key.
* @param fromKey starting key
* @param inclusive whether to include the start key in the result
* @return NavigableMap of filtered entries or null if empty
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(java.util.NavigableMap,com.google.common.base.Predicate)",2496,2503,"/**
* Filters keys from the input map based on the provided predicate.
* @param unfiltered original map to filter
* @param keyPredicate condition to apply to each key
* @return filtered NavigableMap or null if all entries removed
*/","* Returns a navigable map containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and
   * {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(java.util.NavigableMap,com.google.common.base.Predicate)",2621,2626,"/**
* Filters a navigable map by retaining entries with values matching the given predicate.
* @param unfiltered original map to be filtered
* @param valuePredicate predicate to determine which values to keep
* @return filtered NavigableMap or null if input is null
*/","* Returns a navigable map containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},
   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose values satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(java.util.SortedMap,com.google.common.base.Predicate)",2463,2468,"/**
* Filters the keys of a sorted map based on a predicate.
* @param unfiltered input map to filter
* @param keyPredicate key filtering condition
* @return filtered SortedMap with matching keys
*/","* Returns a sorted map containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and
   * {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(java.util.SortedMap,com.google.common.base.Predicate)",2589,2593,"/**
* Filters a sorted map by a predicate on its values.
* @param unfiltered the original map to filter
* @param valuePredicate the condition for inclusion in the result
* @return a new sorted map with filtered entries or an empty map if all entries are removed
*/","* Returns a sorted map containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},
   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose values satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,headSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:headSetImpl(java.lang.Object,boolean)",642,645,"/**
* Returns a sorted set of elements up to the specified 'toElement', 
* optionally including it if 'inclusive' is true.
* @param toElement element up to which to include
* @param inclusive whether to include 'toElement'
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",647,657,"/**
* Returns a subset of elements within the specified range.
* @param fromElement starting element
* @param fromInclusive whether start is inclusive
* @param toElement ending element
* @param toInclusive whether end is inclusive
* @return ImmutableSortedSet containing subset elements or empty set if equal bounds",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,tailSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:tailSetImpl(java.lang.Object,boolean)",659,662,"/**
* Returns an immutable sorted set of elements greater than or equal to the specified 'fromElement'.
* @param fromElement element to start the set from
* @param inclusive whether to include the 'fromElement' in the set
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putCoalescing,"com.google.common.collect.TreeRangeMap$SubRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)",535,545,"/**
* Puts a value into the map with coalescing to existing range values.
* @param range Range of keys to update
* @param value Value to store
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putAll,com.google.common.collect.TreeRangeMap$SubRangeMap:putAll(com.google.common.collect.RangeMap),547,559,"/**
* Merges all key-value pairs from the given RangeMap into this Map.
* @param rangeMap RangeMap to merge
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,firstKey,com.google.common.collect.ImmutableSortedMap:firstKey(),909,912,"/**
* Returns the first key in this map's key set.
* @return The first key or null if the map is empty.",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,readResolve,com.google.common.collect.ImmutableSortedMultiset$SerializedForm:readResolve(),586,593,"/**
* Reconstructs the original object from its serialized form.
* @return a newly constructed object with elements and counts
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,"com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Comparator,java.util.Iterator)",243,247,"/**
* Creates an immutable sorted multiset from a collection of elements.
* @param comparator comparison function for sorting elements
* @param elements iterator over elements to include in the set
*/","* Returns an immutable sorted multiset containing the given elements sorted by the given {@code
   * Comparator}.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,locationsFrom,com.google.common.reflect.ClassPath:locationsFrom(java.lang.ClassLoader),395,401,"/**
* Creates an immutable set of location information from the given class loader.
* @param classloader Class loader to fetch location info for
*/","* Returns all locations that {@code classloader} and parent loaders load classes and resources
   * from. Callers can {@linkplain LocationInfo#scanResources scan} individual locations selectively
   * or even in parallel.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,subtypeOfComponentType,com.google.common.reflect.Types:subtypeOfComponentType(java.lang.reflect.Type[]),198,214,"/**
* Finds the first component type in a given bounds array.
* @param bounds array of potential bounds
* @return first class or array component type, or null if not found
*/","* Returns {@code ? extends X} if any of {@code bounds} is a subtype of {@code X[]}; or null
   * otherwise.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newArrayType,com.google.common.reflect.Types:newArrayType(java.lang.reflect.Type),61,75,"/**
* Creates a new array type from the given component type.
* @param componentType the type of elements in the array
*/",Returns the array type of {@code componentType}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,orderedPermutations,com.google.common.collect.Collections2:orderedPermutations(java.lang.Iterable),378,381,"/**
* Generates all permutations of input elements in sorted order.
* @param elements iterable collection of comparable elements
*/","* Returns a {@link Collection} of all the permutations of the specified {@link Iterable}.
   *
   * <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations
   * Generation, described in Knuth's ""The Art of Computer Programming"", Volume 4, Chapter 7,
   * Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the
   * first permutation will be in ascending order, and the last will be in descending order.
   *
   * <p>Duplicate elements are considered equal. For example, the list [1, 1] will have only one
   * permutation, instead of two. This is why the elements have to implement {@link Comparable}.
   *
   * <p>An empty iterable has only one permutation, which is an empty list.
   *
   * <p>This method is equivalent to {@code Collections2.orderedPermutations(list,
   * Ordering.natural())}.
   *
   * @param elements the original iterable whose elements have to be permuted.
   * @return an immutable {@link Collection} containing all the different permutations of the
   *     original iterable.
   * @throws NullPointerException if the specified iterable is null or has any null elements.
   * @since 12.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyOf,com.google.common.collect.ImmutableMultiset:copyOf(java.lang.Iterable),182,197,"/**
* Creates a new ImmutableMultiset from the given iterable of elements.
* @param elements iterable containing the elements to be copied into the multiset
*/","* Returns an immutable multiset containing the given elements, in the ""grouped iteration order""
   * described in the class documentation.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyOf,com.google.common.collect.ImmutableMultiset:copyOf(java.util.Iterator),205,209,"/**
* Creates a read-only multiset from an iterator of elements.
* @param elements iterable collection of elements
* @return ImmutableMultiset object representing the copied data
*/","* Returns an immutable multiset containing the given elements, in the ""grouped iteration order""
   * described in the class documentation.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,copyHighestCountFirst,com.google.common.collect.Multisets:copyHighestCountFirst(com.google.common.collect.Multiset),1150,1156,"/**
* Copies the multiset with elements ordered by highest count first.
* @param multiset input multiset to copy
* @return a new ImmutableMultiset instance","* Returns a copy of {@code multiset} as an {@link ImmutableMultiset} whose iteration order puts
   * the highest count first, with ties broken by the iteration order of the original multiset.
   *
   * @since 11.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,create,com.google.common.collect.CartesianList:create(java.util.List),40,50,"/**
* Creates a Cartesian product of input lists.
* @param lists list of lists to combine
* @return list of combined lists or empty list if any input is empty
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,computeNext,com.google.common.collect.Collections2$OrderedPermutationIterator:computeNext(),514,522,"/**
* Computes the next permutation in a sequence.
* @return List of elements for the next permutation or null if exhausted
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,computeNext,com.google.common.collect.Collections2$PermutationIterator:computeNext(),646,654,"/**
* Computes the next permutation in the list.
* @return List of elements or null if at end of data
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,permutations,com.google.common.collect.Collections2:permutations(java.util.Collection),589,591,"/**
* Generates all possible permutations of given collection's elements.
* @param elements input iterable to permute
*/","* Returns a {@link Collection} of all the permutations of the specified {@link Collection}.
   *
   * <p><i>Notes:</i> This is an implementation of the Plain Changes algorithm for permutations
   * generation, described in Knuth's ""The Art of Computer Programming"", Volume 4, Chapter 7,
   * Section 7.2.1.2.
   *
   * <p>If the input list contains equal elements, some of the generated permutations will be equal.
   *
   * <p>An empty collection has only one permutation, which is an empty list.
   *
   * @param elements the original collection whose elements have to be permuted.
   * @return an immutable {@link Collection} containing all the different permutations of the
   *     original collection.
   * @throws NullPointerException if the specified collection is null or has any null elements.
   * @since 12.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.lang.Iterable),234,239,"/**
* Creates an immutable list from the given iterable.
* @param elements input collection
*/","* Returns an immutable list containing the given elements, in order. If {@code elements} is a
   * {@link Collection}, this method behaves exactly as {@link #copyOf(Collection)}; otherwise, it
   * behaves exactly as {@code copyOf(elements.iterator()}.
   *
   * @throws NullPointerException if {@code elements} contains a null element",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,copyOf,com.google.common.collect.ImmutableRangeSet:copyOf(com.google.common.collect.RangeSet),110,125,"/**
* Creates an immutable copy of the given RangeSet.
* @param rangeSet input RangeSet to be copied
*/",Returns an immutable copy of the specified {@code RangeSet}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOfSorted,com.google.common.collect.ImmutableSortedSet:copyOfSorted(java.util.SortedSet),347,355,"/**
* Creates an immutable sorted set from a given sorted set.
* @param sortedSet input sorted set
* @return ImmutableSortedSet instance or empty set if input is empty
*/","* Returns an immutable sorted set containing the elements of a sorted set, sorted by the same
   * {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always uses the
   * natural ordering of the elements.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is safe to use even when {@code sortedSet} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code sortedSet} or any of its elements is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getAnnotatedMethodsNotCached,com.google.common.eventbus.SubscriberRegistry:getAnnotatedMethodsNotCached(java.lang.Class),193,225,"/**
* Retrieves non-cached methods annotated with @Subscribe from the given class and its superclasses.
* @param clazz Class to search for subscriber methods
* @return List of non-cached subscriber methods or an empty list if none found
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,removeNode,com.google.common.graph.StandardMutableNetwork:removeNode(java.lang.Object),127,144,"/**
* Removes a node from the network, including its edges and connections.
* @param node Node to be removed
* @return true if the node was successfully removed, false otherwise
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource:readLines(),335,350,"/**
* Reads and returns a list of lines from the underlying stream.
* @return List<String> containing read lines or an empty list if none
*/","* Reads all the lines of this source as a list of strings. The returned list will be empty if
   * this source is empty.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableBiMap,"com.google.common.collect.CollectCollectors:toImmutableBiMap(java.util.function.Function,java.util.function.Function)",244,255,"/**
* Converts a collection of objects to an immutable bi-map.
* @param keyFunction function to extract the map's keys from each object
* @param valueFunction function to extract the map's values from each object
* @return ImmutableBiMap containing the collected data
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,build,com.google.common.collect.ImmutableClassToInstanceMap$Builder:build(),138,145,"/**
* Constructs an immutable map from the builder's results.
* @return non-empty map or empty map if build() method returned no mappings
*/","* Returns a new immutable class-to-instance map containing the entries provided to this
     * builder.
     *
     * @throws IllegalArgumentException if duplicate keys were added",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,fromMapEntries,"com.google.common.collect.ImmutableListMultimap:fromMapEntries(java.util.Collection,java.util.Comparator)",386,410,"/**
* Creates a multimap from map entries, with optional value sorting.
* @param mapEntries collection of key-value pairs where values are collections
* @param valueComparator (optional) comparator to sort values before adding to multimap
* @return ImmutableListMultimap or empty instance if input is empty",Creates an ImmutableListMultimap from an asMap.entrySet.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,readObject,com.google.common.collect.ImmutableListMultimap:readObject(java.io.ObjectInputStream),519,554,"/**
* Deserializes an ImmutableMap and its size from the ObjectInputStream.
* @throws InvalidObjectException if key or value count is invalid
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,build,com.google.common.collect.ImmutableMap$Builder:build(),593,595,"/**
* Builds an immutable map instance.
* Calls buildOrThrow() internally to perform actual construction.
*/","* Returns a newly-created immutable map. The iteration order of the returned map is the order
     * in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was
     * called, in which case entries are sorted by value.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate keys. The {@code build()} method will soon be
     * deprecated.
     *
     * @throws IllegalArgumentException if duplicate keys were added",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,legacyReadResolve,com.google.common.collect.ImmutableMap$SerializedForm:legacyReadResolve(),1283,1294,"/**
* Reconstructs a Map instance from its constituent parts.
* @return A new Map object containing the original key-value pairs. 
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,fromMapEntries,"com.google.common.collect.ImmutableSetMultimap:fromMapEntries(java.util.Collection,java.util.Comparator)",458,479,"/**
* Creates a multimap from map entries, filtering out empty value collections.
* @param mapEntries collection of key-value pairs with collection values
* @param valueComparator comparator for ordering values (optional)
* @return ImmutableSetMultimap or an empty one if input is empty
*/",Creates an ImmutableSetMultimap from an asMap.entrySet.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,readObject,com.google.common.collect.ImmutableSetMultimap:readObject(java.io.ObjectInputStream),687,730,"/**
* Deserializes an ImmutableMap and its associated fields from a stream.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if class not found during deserialization
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,uniqueIndex,"com.google.common.collect.Maps:uniqueIndex(java.util.Iterator,com.google.common.base.Function,com.google.common.collect.ImmutableMap$Builder)",1392,1406,"/**
* Creates an ImmutableMap with unique keys by indexing values.
* @param values iterator of values to index
* @param keyFunction function to generate keys from values
* @return ImmutableMap with unique keys or throws exception on duplicates
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,fromProperties,com.google.common.collect.Maps:fromProperties(java.util.Properties),1418,1455,"/**
* Converts a Properties object into an ImmutableMap of key-value pairs.
* @param properties input Properties object
*/","* Creates an {@code ImmutableMap<String, String>} from a {@code Properties} instance. Properties
   * normally derive from {@code Map<Object, Object>}, but they typically contain strings, which is
   * awkward. This method lets you get a plain-old-{@code Map} out of a {@code Properties}.
   *
   * @param properties a {@code Properties} object to be converted
   * @return an immutable map containing all the entries in {@code properties}
   * @throws ClassCastException if any key in {@code properties} is not a {@code String}
   * @throws NullPointerException if any key or value in {@code properties} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,indexMap,com.google.common.collect.Maps:indexMap(java.util.Collection),4471,4478,"/**
* Creates an index map from a collection of elements.
* @param list input collection
* @return ImmutableMap with element as key and index as value
*/",Returns a map from the ith element of list to i.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,getNodeConnections,com.google.common.graph.ImmutableGraph:getNodeConnections(com.google.common.graph.Graph),84,94,"/**
* Builds an immutable map of graph nodes to their connections.
* @param graph the input graph
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,getNodeConnections,com.google.common.graph.ImmutableNetwork:getNodeConnections(com.google.common.graph.Network),82,91,"/**
* Retrieves a map of network connections for each node in the given network.
* @param network Network object containing nodes and edges
* @return Map of Node to NetworkConnections or throws an exception if building the map fails
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,getEdgeToReferenceNode,com.google.common.graph.ImmutableNetwork:getEdgeToReferenceNode(com.google.common.graph.Network),93,102,"/**
* Maps each edge to its reference node in the given network.
* @param network The input graph
* @return A map of edges to their corresponding reference nodes
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,getNodeConnections,com.google.common.graph.ImmutableValueGraph:getNodeConnections(com.google.common.graph.ValueGraph),84,94,"/**
* Builds an immutable map of node connections from a ValueGraph.
* @param graph input graph
* @return ImmutableMap of node IDs to GraphConnections objects or throws exception on failure
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,build,com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:build(),91,93,"/**
* Builds an immutable map of type instances from the builder's result. 
* @return An ImmutableTypeToInstanceMap containing the built data.","* Returns a new immutable type-to-instance map containing the entries provided to this builder.
     *
     * @throws IllegalArgumentException if duplicate keys were added",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,where,com.google.common.reflect.TypeResolver$TypeTable:where(java.util.Map),289,299,"/**
* Builds a TypeTable from the given mappings and user-supplied type variables.
* @param mappings map of type variable keys to their corresponding types
*/",Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/thirdparty/publicsuffix/TrieParser.java,parseFullString,com.google.thirdparty.publicsuffix.TrieParser:parseFullString(java.lang.String),41,52,"/**
* Parses full public suffix string into an immutable map.
* @param encoded full public suffix string to parse
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toMap,"com.google.common.collect.Maps:toMap(java.util.Iterator,com.google.common.base.Function)",1293,1303,"/**
* Converts an iterator of keys and a function to values into an immutable map.
* @param keys iterator of unique keys
* @param valueFunction function to compute corresponding values
*/","* Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value
   * for each key was computed by {@code valueFunction}. The map's iteration order is the order of
   * the first appearance of each key in {@code keys}.
   *
   * <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code
   * valueFunction} will be applied to more than one instance of that key and, if it is, which
   * result will be mapped to that key in the returned map.
   *
   * @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code
   *     valueFunction} produces {@code null} for any key
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lowerKey,com.google.common.collect.ImmutableSortedMap:lowerKey(java.lang.Object),1036,1039,"/**
* Finds the lowest key in the map that is greater than or equal to the given key.
* @param key input key
* @return Comparable object representing the lowest key, or null if not found
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,floorKey,com.google.common.collect.ImmutableSortedMap:floorKey(java.lang.Object),1046,1049,"/**
* Returns the floor key of the given key.
* @param key input key to find the floor for
* @return floor key or null if not found
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,subMap,"com.google.common.collect.ImmutableSortedMap:subMap(java.lang.Object,java.lang.Object)",970,973,"/**
* Returns a subset of this map containing keys within the specified range.
* @param fromKey starting key (inclusive)
* @param toKey ending key (exclusive)","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges
   * from {@code fromKey}, inclusive, to {@code toKey}, exclusive.
   *
   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link
   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.
   * However, this method doesn't throw an exception in that situation, but instead keeps the
   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of
   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,ceilingKey,com.google.common.collect.ImmutableSortedMap:ceilingKey(java.lang.Object),1056,1059,"/**
* Returns the smallest entry whose key is greater than or equal to the given key. 
* @param key target key value
* @return K object representing the ceiling entry, or null if not found",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,higherKey,com.google.common.collect.ImmutableSortedMap:higherKey(java.lang.Object),1066,1069,"/**
* Finds and returns the next key in a sorted order.
* @param key current key to compare with others
* @return next key or null if none found
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,toImmutableSortedMap,"com.google.common.collect.ImmutableSortedMap:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",99,107,"/**
* Converts a stream of objects to an immutable sorted map.
* @param comparator key comparison function
* @param keyFunction maps each object to its key
* @param valueFunction maps each object to its value
* @param mergeFunction merges values for duplicate keys
* @return ImmutableSortedMap<K, V>
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose
   * keys and values are the result of applying the provided mapping functions to the input
   * elements.
   *
   * <p>If the mapped keys contain duplicates (according to the comparator), the values are merged
   * using the specified merging function. Entries will appear in the encounter order of the first
   * occurrence of the key.
   *
   * @since 21.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,remove,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:remove(),807,834,"/**
* Removes element at current position, updating forget and skip lists.
* @throws IllegalStateException if removal is not allowed
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,poll,com.google.common.collect.MinMaxPriorityQueue:poll(),303,307,"/**
* Retrieves and removes the head element from this queue.
* @return The removed element, or null if empty.",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,pollLast,com.google.common.collect.MinMaxPriorityQueue:pollLast(),368,371,"/**
* Retrieves and removes the last element from the collection.
* @return the removed element, or null if empty.","* Removes and returns the greatest element of this queue, or returns {@code null} if the queue is
   * empty.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeLast,com.google.common.collect.MinMaxPriorityQueue:removeLast(),378,384,"/**
* Removes and returns the last element.
* @return Element removed or null if empty
*/","* Removes and returns the greatest element of this queue.
   *
   * @throws NoSuchElementException if the queue is empty",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toSet,com.google.common.collect.FluentIterable:toSet(),651,654,"/**
* Converts this object to an immutable set of elements.
* @return Set of elements or null if delegate is null
*/","* Returns an {@code ImmutableSet} containing all of the elements from this fluent iterable with
   * duplicates removed.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSet#toImmutableSet} to {@code
   * stream.collect()}.
   *
   * @throws NullPointerException if any element is {@code null}
   * @since 14.0 (since 12.0 as {@code toImmutableSet()}).",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,validate,com.google.common.graph.Traverser:validate(java.lang.Iterable),347,354,"/**
* Validates a set of nodes by checking their existence in the graph.
* @param startNodes Iterable of nodes to validate
* @return Validated set of nodes, or an empty set if any are invalid
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scan,"com.google.common.reflect.ClassPath$LocationInfo:scan(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder)",447,463,"/**
* Recursively scans a file or directory for resources and builds a set of ResourceInfo entries. 
* @param file the file to scan
* @param scannedUris set of already-scanned URIs (for jar scanning)
* @param builder ImmutableSet.Builder for collecting ResourceInfo entries
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOf,com.google.common.reflect.TypeToken:isSupertypeOf(com.google.common.reflect.TypeToken),451,453,"/**
* Checks if this TypeToken is a supertype of another.
* @param type the TypeToken to check against
* @return true if this token is a superclass, false otherwise
*/","* Returns true if this type is a supertype of the given {@code type}. ""Supertype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOf,com.google.common.reflect.TypeToken:isSupertypeOf(java.lang.reflect.Type),463,465,"/**
* Checks if the given Type is a supertype of this Type.
* @param type Type to check
* @return true if given Type is a supertype, false otherwise
*/","* Returns true if this type is a supertype of the given {@code type}. ""Supertype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOf,com.google.common.reflect.TypeToken:isSubtypeOf(com.google.common.reflect.TypeToken),475,477,"/**
* Checks if this token is a subtype of another TypeToken.
* @param type TypeToken to check against
*/","* Returns true if this type is a subtype of the given {@code type}. ""Subtype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isOwnedBySubtypeOf,com.google.common.reflect.TypeToken:isOwnedBySubtypeOf(java.lang.reflect.Type),1127,1135,"/**
* Checks if the object is owned by a class that is a subtype of the given supertype.
* @param supertype the super type to check against
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainReferenceQueues,com.google.common.cache.LocalCache$Segment:drainReferenceQueues(),2465,2473,"/**
* Drains reference queues for map, handling key and value references separately.
*/","* Drain the key and value reference queues, cleaning up internal entries containing garbage
     * collected keys or values.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(com.google.common.collect.BiMap,com.google.common.base.Predicate)",2529,2533,"/**
* Filters the keys of a BiMap based on a predicate.
* @param unfiltered input BiMap to filter
* @param keyPredicate function to test each key
* @return filtered BiMap with only matching keys
*/","* Returns a bimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate.
   * The returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap
   * and its views. When given a key that doesn't satisfy the predicate, the bimap's {@code put()},
   * {@code forcePut()} and {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
   * bimap.
   *
   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key in
   * the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>
   * needed, it may be faster to copy the filtered bimap and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(com.google.common.collect.BiMap,com.google.common.base.Predicate)",2655,2658,"/**
* Filters entries in a bidirectional map based on the provided predicate for values.
* @param unfiltered input BiMap to filter
* @param valuePredicate predicate to evaluate each value
* @return filtered BiMap with updated key-value pairs
*/","* Returns a bimap containing the mappings in {@code unfiltered} whose values satisfy a predicate.
   * The returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap
   * and its views. When given a value that doesn't satisfy the predicate, the bimap's {@code
   * put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link
   * IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method
   * that throws an {@link IllegalArgumentException} when the provided value doesn't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
   * bimap.
   *
   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every value in
   * the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>
   * needed, it may be faster to copy the filtered bimap and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Iterator),229,235,"/**
* Creates a new sorted multiset from an iterator of elements.
* @param elements iterator containing elements to be copied
*/","* Returns an immutable sorted multiset containing the given elements sorted by their natural
   * ordering.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,capture,com.google.common.reflect.TypeResolver$WildcardCapturer:capture(java.lang.reflect.Type),461,498,"/**
* Captures a Type object, returning its resolved form.
* @param type Type to capture
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveGenericArrayType,com.google.common.reflect.TypeResolver:resolveGenericArrayType(java.lang.reflect.GenericArrayType),251,255,"/**
* Resolves a generic array type to its underlying type.
* @param type GenericArrayType instance
* @return The underlying type of the array or null if not resolvable
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,canonicalizeWildcardsInType,com.google.common.reflect.TypeToken:canonicalizeWildcardsInType(java.lang.reflect.Type),1017,1026,"/**
* Recursively canonicalizes wildcards in the given Type object.
* @param type Type object to process
* @return The input Type with wildcards resolved, or null if not applicable
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,toGenericType,com.google.common.reflect.TypeToken:toGenericType(java.lang.Class),1158,1184,"/**
* Transforms a Class to its corresponding TypeToken.
* @param cls the input Class
*/","* Returns the type token representing the generic type declaration of {@code cls}. For example:
   * {@code TypeToken.getGenericType(Iterable.class)} returns {@code Iterable<T>}.
   *
   * <p>If {@code cls} isn't parameterized and isn't a generic array, the type token of the class is
   * returned.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toMultiset,com.google.common.collect.FluentIterable:toMultiset(),683,686,"/**
* Converts this multimap to an immutable multiset.
* @return Multiset containing all elements from the original map
*/","* Returns an {@code ImmutableMultiset} containing all of the elements from this fluent iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableMultiset#toImmutableMultiset} to
   * {@code stream.collect()}.
   *
   * @throws NullPointerException if any element is null
   * @since 19.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,build,com.google.common.collect.ImmutableMultiset$Builder:build(),589,592,"/**
* Builds an ImmutableMultiset from the underlying contents.
* @return ImmutableMultiset instance containing all elements.","* Returns a newly-created {@code ImmutableMultiset} based on the contents of the {@code
     * Builder}.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,readResolve,com.google.common.collect.ImmutableMultiset$SerializedForm:readResolve(),661,667,"/**
* Converts the object's internal state to an immutable multiset.
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,parametersAsMap,com.google.common.net.MediaType:parametersAsMap(),845,847,"/**
* Converts parameter map to multiset map.
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,cartesianProduct,com.google.common.collect.Lists:cartesianProduct(java.util.List),456,458,"/**
* Computes the Cartesian product of multiple lists.
* @param lists list of lists to combine
* @return a list containing all possible combinations as sublists
*/","* Returns every possible list that can be formed by choosing one element from each of the given
   * lists in order; the ""n-ary <a href=""http://en.wikipedia.org/wiki/Cartesian_product"">Cartesian
   * product</a>"" of the lists. For example:
   *
   * {@snippet :
   * Lists.cartesianProduct(ImmutableList.of(
   *     ImmutableList.of(1, 2),
   *     ImmutableList.of(""A"", ""B"", ""C"")))
   * }
   *
   * <p>returns a list containing six lists in the following order:
   *
   * <ul>
   *   <li>{@code ImmutableList.of(1, ""A"")}
   *   <li>{@code ImmutableList.of(1, ""B"")}
   *   <li>{@code ImmutableList.of(1, ""C"")}
   *   <li>{@code ImmutableList.of(2, ""A"")}
   *   <li>{@code ImmutableList.of(2, ""B"")}
   *   <li>{@code ImmutableList.of(2, ""C"")}
   * </ul>
   *
   * <p>The result is guaranteed to be in the ""traditional"", lexicographical order for Cartesian
   * products that you would get from nesting for loops:
   *
   * {@snippet :
   * for (B b0 : lists.get(0)) {
   *   for (B b1 : lists.get(1)) {
   *     ...
   *     ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...);
   *     // operate on tuple
   *   }
   * }
   * }
   *
   * <p>Note that if any input list is empty, the Cartesian product will also be empty. If no lists
   * at all are provided (an empty list), the resulting Cartesian product has one element, an empty
   * list (counter-intuitive, but mathematically consistent).
   *
   * <p><i>Performance notes:</i> while the cartesian product of lists of size {@code m, n, p} is a
   * list of size {@code m x n x p}, its actual memory consumption is much smaller. When the
   * cartesian product is constructed, the input lists are merely copied. Only as the resulting list
   * is iterated are the individual lists created, and these are not retained after iteration.
   *
   * @param lists the lists to choose elements from, in the order that the elements chosen from
   *     those lists should appear in the resulting lists
   * @param <B> any common base class shared by all axes (often just {@link Object})
   * @return the Cartesian product, as an immutable list containing immutable lists
   * @throws IllegalArgumentException if the size of the cartesian product would be greater than
   *     {@link Integer#MAX_VALUE}
   * @throws NullPointerException if {@code lists}, any one of the {@code lists}, or any element of
   *     a provided list is null
   * @since 19.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,com.google.common.cache.CacheBuilderSpec:parse(java.lang.String),141,163,"/**
* Parses a string into CacheBuilderSpec object.
* @param cacheBuilderSpecification string representation of cache builder specs
*/","* Creates a CacheBuilderSpec from a string.
   *
   * @param cacheBuilderSpecification the string form",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AllEqualOrdering.java,immutableSortedCopy,com.google.common.collect.AllEqualOrdering:immutableSortedCopy(java.lang.Iterable),46,49,"/**
* Returns an immutable sorted copy of the given iterable.
* @param iterable input collection to be copied and sorted
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toList,com.google.common.collect.FluentIterable:toList(),619,622,"/**
* Converts this immutable collection to a list.
* @return List of elements or null if delegate is null
*/","* Returns an {@code ImmutableList} containing all of the elements from this fluent iterable in
   * proper sequence.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code
   * stream.collect()}.
   *
   * @throws NullPointerException if any element is {@code null}
   * @since 14.0 (since 12.0 as {@code toImmutableList()}).",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,listFiles,com.google.common.io.MoreFiles:listFiles(java.nio.file.Path),263,269,"/**
* Retrieves a list of files in the specified directory.
* @param dir directory path to scan
* @return immutable list of file paths or empty if directory is invalid
*/","* Returns an immutable list of paths to the files contained in the given directory.
   *
   * @throws NoSuchFileException if the file does not exist <i>(optional specific exception)</i>
   * @throws NotDirectoryException if the file could not be opened because it is not a directory
   *     <i>(optional specific exception)</i>
   * @throws IOException if an I/O error occurs",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,<init>,com.google.common.net.InternetDomainName:<init>(java.lang.String),144,162,"/**
* Initializes InternetDomainName with normalized domain name.
* @param name the domain name to initialize from
*/","Constructor used to implement {@link #from(String)}, and from subclasses.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner:<init>(boolean,java.lang.Iterable)",1259,1265,"/**
* Initializes Combiner with given inputs and success criteria.
* @param allMustSucceed whether all inputs must succeed
* @param inputs iterable of ClosingFutures to combine
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,allAsList,com.google.common.util.concurrent.Futures:allAsList(java.lang.Iterable),600,608,"/**
* Collects futures into a single future containing a list of values.
* @param futures iterable of ListenableFutures to collect
* @return ListenableFuture containing the collected list of values
*/","* Creates a new {@code ListenableFuture} whose value is a list containing the values of all its
   * input futures, if all succeed.
   *
   * <p>The list of results is in the same order as the input list.
   *
   * <p>This differs from {@link #successfulAsList(Iterable)} in that it will return a failed future
   * if any of the items fails.
   *
   * <p>Canceling this future will attempt to cancel all the component futures, and if any of the
   * provided futures fails or is canceled, this one is, too.
   *
   * @param futures futures to combine
   * @return a future that provides a list of the results of the component futures
   * @since 10.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,whenAllComplete,com.google.common.util.concurrent.Futures:whenAllComplete(java.lang.Iterable),632,635,"/**
* Combines multiple ListenableFutures into a single FutureCombiner.
* @param futures iterable of futures to combine
*/","* Creates a {@link FutureCombiner} that processes the completed futures whether or not they're
   * successful.
   *
   * <p>Any failures from the input futures will not be propagated to the returned future.
   *
   * @since 20.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,whenAllSucceed,com.google.common.util.concurrent.Futures:whenAllSucceed(java.lang.Iterable),657,660,"/**
* Combines all given ListenableFutures to a single result, succeeding only if all input futures succeed.
* @param futures iterable of futures to combine
*/","* Creates a {@link FutureCombiner} requiring that all passed in futures are successful.
   *
   * <p>If any input fails, the returned future fails immediately.
   *
   * @since 20.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,successfulAsList,com.google.common.util.concurrent.Futures:successfulAsList(java.lang.Iterable),883,886,"/**
* Converts a collection of potentially failed futures to a list of successful values.
*@param futures iterable of ListenableFutures potentially containing values of type V
*@return ListenableFuture containing the successful values as a list, or an empty list if all failed.","* Creates a new {@code ListenableFuture} whose value is a list containing the values of all its
   * successful input futures. The list of results is in the same order as the input list, and if
   * any of the provided futures fails or is canceled, its corresponding position will contain
   * {@code null} (which is indistinguishable from the future having a successful value of {@code
   * null}).
   *
   * <p>The list of results is in the same order as the input list.
   *
   * <p>This differs from {@link #allAsList(Iterable)} in that it's tolerant of failed futures for
   * any of the items, representing them as {@code null} in the result list.
   *
   * <p>Canceling this future will attempt to cancel all the component futures.
   *
   * @param futures futures to combine
   * @return a future that provides a list of the results of the component futures
   * @since 10.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,gwtCompatibleToArray,com.google.common.util.concurrent.Futures:gwtCompatibleToArray(java.lang.Iterable),931,941,"/**
* Converts iterable of ListenableFutures to array.
* @param futures iterable of futures
* @return array of futures or null if not found
*/",Can't use Iterables.toArray because it's not gwt compatible,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,unionOf,com.google.common.collect.ImmutableRangeSet:unionOf(java.lang.Iterable),147,149,"/**
* Creates an immutable range set by taking the union of the given iterable ranges.
* @param ranges iterable collection of ranges to combine
*/","* Returns an {@code ImmutableRangeSet} representing the union of the specified ranges.
   *
   * <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. Duplicate
   * or connected ranges are permitted, and will be coalesced in the result.
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,intersection,com.google.common.collect.ImmutableRangeSet:intersection(com.google.common.collect.RangeSet),421,425,"/**
* Computes the intersection of two range sets.
* @param other the other range set to intersect with
* @return an immutable range set containing overlapping ranges
*/","* Returns a new range set consisting of the intersection of this range set and {@code other}.
   *
   * <p>This is essentially the same as {@code
   * TreeRangeSet.create(this).removeAll(other.complement())} except it returns an {@code
   * ImmutableRangeSet}.
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,difference,com.google.common.collect.ImmutableRangeSet:difference(com.google.common.collect.RangeSet),435,439,"/**
* Computes the set difference between this range set and another.
* @param other the range set to subtract from this one
* @return a new immutable range set containing the differences
*/","* Returns a new range set consisting of the difference of this range set and {@code other}.
   *
   * <p>This is essentially the same as {@code TreeRangeSet.create(this).removeAll(other)} except it
   * returns an {@code ImmutableRangeSet}.
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,toImmutableBiMap,"com.google.common.collect.ImmutableBiMap:toImmutableBiMap(java.util.function.Function,java.util.function.Function)",63,68,"/**
* Converts a stream of elements into an immutable bi-map using the provided key and value functions.
* @param keyFunction function to extract key from each element
* @param valueFunction function to extract value from each element
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableBiMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements.
   * Entries appear in the result {@code ImmutableBiMap} in encounter order.
   *
   * <p>If the mapped keys or values contain duplicates (according to {@link
   * Object#equals(Object)}), an {@code IllegalArgumentException} is thrown when the collection
   * operation is performed. (This differs from the {@code Collector} returned by {@link
   * Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.)
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,copyOf,com.google.common.collect.ImmutableClassToInstanceMap:copyOf(java.util.Map),159,169,"/**
* Creates a copy of the provided map, converting it to an immutable instance map.
* @param map input map with class-S instances
* @return ImmutableClassToInstanceMap or newly created one if not already immutable
*/","* Returns an immutable map containing the same entries as {@code map}. If {@code map} somehow
   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose
   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.
   *
   * <p><b>Note:</b> Despite what the method name suggests, if {@code map} is an {@code
   * ImmutableClassToInstanceMap}, no copy will actually be performed.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws ClassCastException if any value is not an instance of the type specified by its key",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,copyOf,com.google.common.collect.ImmutableListMultimap:copyOf(com.google.common.collect.Multimap),354,370,"/**
* Creates a copy of the given multimap.
* @param multimap input multimap to copy
* @return ImmutableListMultimap instance or original if already immutable and not partial view
*/","* Returns an immutable multimap containing the same mappings as {@code multimap}. The generated
   * multimap's key and value orderings correspond to the iteration ordering of the {@code
   * multimap.asMap()} view.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code multimap} is null",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,build,com.google.common.collect.ImmutableMultimap$Builder:build(),364,373,"/**
* Builds an ImmutableMultimap from the builder state.
* @return ImmutableMultimap instance or empty if no entries
*/",Returns a newly-created immutable multimap.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMap,"com.google.common.collect.CollectCollectors:toImmutableMap(java.util.function.Function,java.util.function.Function)",186,196,"/**
* Converts a stream of objects to an immutable map with specified key and value functions.
* @param keyFunction maps each object to its corresponding key
* @param valueFunction maps each object to its corresponding value
* @return ImmutableMap instance or throws exception if building fails
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,merge,"com.google.common.collect.TreeRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)",283,335,"/**
* Merges a range of entries into the existing map.
* @param range merge range
* @param value new value for unmapped ranges (null to ignore)
* @param remappingFunction function to remap existing values
*/",* @since 28.1,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,readResolve,com.google.common.collect.ImmutableMap$SerializedForm:readResolve(),1262,1281,"/**
* Reconstructs the map from its read-only form, using legacy implementation if necessary.
* @return the rebuilt immutable map
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,build,com.google.common.collect.ImmutableSetMultimap$Builder:build(),394,404,"/**
* Builds an ImmutableSetMultimap from the internal builder state.
* @return ImmutableSetMultimap object or empty if no entries exist
*/",Returns a newly-created immutable set multimap.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,copyOf,"com.google.common.collect.ImmutableSetMultimap:copyOf(com.google.common.collect.Multimap,java.util.Comparator)",424,441,"/**
* Creates an immutable copy of the given multimap.
* @param multimap original multimap to copy
* @param valueComparator optional comparator for values (null if default)
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,uniqueIndex,"com.google.common.collect.Maps:uniqueIndex(java.util.Iterator,com.google.common.base.Function)",1386,1390,"/**
* Creates a unique index map from an iterator of values using the provided key function.
* @param values iterator of values to index
* @param keyFunction function to generate keys from values
* @return immutable map with unique keys and corresponding values
*/","* Returns a map with the given {@code values}, indexed by keys derived from those values. In
   * other words, each input value produces an entry in the map whose key is the result of applying
   * {@code keyFunction} to that value. These entries appear in the same order as the input values.
   * Example usage:
   *
   * {@snippet :
   * Color red = new Color(""red"", 255, 0, 0);
   * ...
   * Iterator<Color> allColors = ImmutableSet.of(red, green, blue).iterator();
   *
   * Map<String, Color> colorForName =
   *     uniqueIndex(allColors, toStringFunction());
   * assertThat(colorForName).containsEntry(""red"", red);
   * }
   *
   * <p>If your index may associate multiple values with each key, use {@link
   * Multimaps#index(Iterator, Function) Multimaps.index}.
   *
   * @param values the values to use when constructing the {@code Map}
   * @param keyFunction the function used to produce the key for each value
   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value
   *     in the input collection to that value
   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one
   *     value in the input collection
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any value
   * @since 10.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,<init>,"com.google.common.collect.ArrayTable:<init>(java.lang.Iterable,java.lang.Iterable)",150,169,"/**
* Initializes ArrayTable with row and column keys, enforcing identical emptyness.
* @param rowKeys iterable of unique row identifiers
* @param columnKeys iterable of unique column identifiers
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,<init>,"com.google.common.collect.DenseImmutableTable:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)",55,87,"/**
* Constructs a DenseImmutableTable from a list of cells and their row/column keys.
* @param cellList immutable list of cells
* @param rowSpace set of unique row keys
* @param columnSpace set of unique column keys
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,<init>,com.google.common.collect.ExplicitOrdering:<init>(java.util.List),31,33,"/**
* Initializes explicit ordering from a sorted list of values.
* @param valuesInOrder sorted list of elements
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,com.google.common.collect.Sets$PowerSet:<init>(java.util.Set),1724,1728,"/**
* Computes the power set of a given input set.
* @param input the input set with at most 30 elements
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,combinations,"com.google.common.collect.Sets:combinations(java.util.Set,int)",1808,1904,"/**
* Generates all combinations of a given set size from the input set.
* @param set input set
* @param size desired combination size
* @return Set of Sets containing all combinations, or empty set if no combinations exist
*/","* Returns the set of all subsets of {@code set} of size {@code size}. For example, {@code
   * combinations(ImmutableSet.of(1, 2, 3), 2)} returns the set {@code {{1, 2}, {1, 3}, {2, 3}}}.
   *
   * <p>Elements appear in these subsets in the same iteration order as they appeared in the input
   * set. The order in which these subsets appear in the outer set is undefined.
   *
   * <p>The returned set and its constituent sets use {@code equals} to decide whether two elements
   * are identical, even if the input set uses a different concept of equivalence.
   *
   * <p><i>Performance notes:</i> the memory usage of the returned set is only {@code O(n)}. When
   * the result set is constructed, the input set is merely copied. Only as the result set is
   * iterated are the individual subsets created. Each of these subsets occupies an additional O(n)
   * memory but only for as long as the user retains a reference to it. That is, the set returned by
   * {@code combinations} does not retain the individual subsets.
   *
   * @param set the set of elements to take combinations of
   * @param size the number of elements per combination
   * @return the set of all combinations of {@code size} elements from {@code set}
   * @throws IllegalArgumentException if {@code size} is not between 0 and {@code set.size()}
   *     inclusive
   * @throws NullPointerException if {@code set} is or contains {@code null}
   * @since 23.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,<init>,"com.google.common.collect.SparseImmutableTable:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)",47,94,"/**
* Initializes a sparse immutable table from a list of cells and their row/column spaces.
* @param cellList list of cells to populate the table
* @param rowSpace set of unique row keys
* @param columnSpace set of unique column keys
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,copyOf,com.google.common.graph.ImmutableGraph:copyOf(com.google.common.graph.Graph),58,64,"/**
* Creates a deep copy of the given graph.
* @param graph original graph to be copied
* @return ImmutableGraph object containing the copied data or null if input is null
*/",Returns an immutable copy of {@code graph}.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,<init>,com.google.common.graph.ImmutableNetwork:<init>(com.google.common.graph.Network),52,55,"/**
* Constructs an immutable network from a given network instance.
* @param network input network to be converted
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,<init>,com.google.common.graph.ImmutableValueGraph:<init>(com.google.common.graph.ValueGraph),50,52,"/**
* Constructs an immutable value graph from a given mutable graph.
* @param graph the input graph to be converted
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,where,com.google.common.reflect.TypeResolver:where(java.util.Map),119,121,"/**
* Creates a new TypeResolver instance with filtered type mappings.
* @param mappings map of type variable keys to their resolved types
*/",Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toMap,"com.google.common.collect.Maps:toMap(java.lang.Iterable,com.google.common.base.Function)",1275,1278,"/**
* Converts an iterable of keys to a map using the provided function to generate values.
* @param keys iterable of unique keys
* @param valueFunction function that generates values for the given key
*/","* Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value
   * for each key was computed by {@code valueFunction}. The map's iteration order is the order of
   * the first appearance of each key in {@code keys}.
   *
   * <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code
   * valueFunction} will be applied to more than one instance of that key and, if it is, which
   * result will be mapped to that key in the returned map.
   *
   * <p>If {@code keys} is a {@link Set}, a live view can be obtained instead of a copy using {@link
   * Maps#asMap(Set, Function)}.
   *
   * <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example:
   *
   * {@snippet :
   * import static com.google.common.collect.ImmutableMap.toImmutableMap;
   * ...
   * ImmutableMap<Color, String> colorNames =
   *     allColors.stream().collect(toImmutableMap(c -> c, c -> c.toString()));
   * }
   *
   * <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys
   * and values in the map are.
   *
   * @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code
   *     valueFunction} produces {@code null} for any key
   * @since 14.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,pollFirst,com.google.common.collect.MinMaxPriorityQueue:pollFirst(),341,344,"/**
* Retrieves and removes the first element from this queue.
* @return The polled element or null if queue is empty.","* Removes and returns the least element of this queue, or returns {@code null} if the queue is
   * empty.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,offer,com.google.common.collect.MinMaxPriorityQueue:offer(java.lang.Object),288,301,"/**
* Offers an element to the heap and returns whether the heap's size is within limits. 
* @param element element to offer
*/","* Adds the given element to this queue. If this queue has a maximum size, after adding {@code
   * element} the queue will automatically evict its greatest element (according to its comparator),
   * which may be {@code element} itself.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getAllClasses,com.google.common.reflect.ClassPath:getAllClasses(),154,156,"/**
* Retrieves all ClassInfo objects from resources.
* @return immutable set of ClassInfo objects
*/","* Returns all classes loadable from the current class path.
   *
   * @since 16.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getTopLevelClasses,com.google.common.reflect.ClassPath:getTopLevelClasses(),162,167,"/**
* Retrieves a set of top-level ClassInfo objects from resources.
* @return Set of ClassInfo objects or empty set if none found
*/","* Returns all top level classes loadable from the current class path. Note that ""top-level-ness""
   * is determined heuristically by class name (see {@link ClassInfo#isTopLevel}).",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,delegate,com.google.common.reflect.TypeToken$ClassSet:delegate(),764,779,"/**
* Retrieves a set of TypeTokens for the given type, either from cache or by collecting and filtering types.
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,delegate,com.google.common.reflect.TypeToken$InterfaceSet:delegate(),723,732,"/**
* Retrieves a set of type tokens for the given interface hierarchy.
* @return Set of TypeToken objects; may be cached or recomputed on demand
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,rawTypes,com.google.common.reflect.TypeToken$InterfaceSet:rawTypes(),739,746,"/**
* Collects raw types that extend the given type T.
* @return Set of Class objects representing interfaces
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,delegate,com.google.common.reflect.TypeToken$TypeSet:delegate(),685,700,"/**
* Collects and filters TypeTokens for the given type T.
* @return Set of TypeTokens or null if not collected
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,breadthFirst,com.google.common.graph.Traverser:breadthFirst(java.lang.Iterable),240,243,"/**
* Performs breadth-first traversal on a set of nodes, starting from the provided initial nodes.
* @param startNodes Iterable of initial nodes to begin traversal
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code
   * startNodes}, in the order of a breadth-first traversal. This is equivalent to a breadth-first
   * traversal of a graph with an additional root node whose successors are the listed {@code
   * startNodes}.
   *
   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph
   * @see #breadthFirst(Object)
   * @since 24.1",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPreOrder,com.google.common.graph.Traverser:depthFirstPreOrder(java.lang.Iterable),290,293,"/**
* Performs a depth-first pre-order traversal on the given nodes.
* @param startNodes iterable of starting nodes
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code
   * startNodes}, in the order of a depth-first pre-order traversal. This is equivalent to a
   * depth-first pre-order traversal of a graph with an additional root node whose successors are
   * the listed {@code startNodes}.
   *
   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph
   * @see #depthFirstPreOrder(Object)
   * @since 24.1",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPostOrder,com.google.common.graph.Traverser:depthFirstPostOrder(java.lang.Iterable),340,343,"/**
* Performs depth-first post-order traversal on the given nodes.
* @param startNodes iterable of starting node(s)
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code
   * startNodes}, in the order of a depth-first post-order traversal. This is equivalent to a
   * depth-first post-order traversal of a graph with an additional root node whose successors are
   * the listed {@code startNodes}.
   *
   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph
   * @see #depthFirstPostOrder(Object)
   * @since 24.1",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanResources,com.google.common.reflect.ClassPath$LocationInfo:scanResources(java.util.Set),440,445,"/**
* Scans resources from a set of files and builds an immutable set.
* @param scannedFiles collection of files to scan
* @return ImmutableSet of ResourceInfo objects
*/","* Scans this location and returns all scanned resources.
     *
     * <p>This file and jar files from ""Class-Path"" entry in the scanned manifest files will be
     * added to {@code scannedFiles}.
     *
     * <p>A file will be scanned at most once even if specified multiple times by one or multiple
     * jar files' ""Class-Path"" manifest entries. Particularly, if a jar file from the ""Class-Path""
     * manifest entry is already in {@code scannedFiles}, either because it was scanned earlier, or
     * it was intentionally added to the set by the caller, it will not be scanned again.
     *
     * <p>Note that when you call {@code location.scanResources(scannedFiles)}, the location will
     * always be scanned even if {@code scannedFiles} already contains it.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,returning,com.google.common.reflect.Invokable:returning(com.google.common.reflect.TypeToken),312,320,"/**
* Returns a specialized invokable with the specified return type.
* @param returnType TypeToken representing the desired return type
*/",Explicitly specifies the return type of this {@code Invokable}.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,tryDrainReferenceQueues,com.google.common.cache.LocalCache$Segment:tryDrainReferenceQueues(),2451,2459,"/**
* Tries to lock and drain reference queues, releasing lock on failure.
*/",Cleanup collected entries when the lock is available.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,runLockedCleanup,com.google.common.cache.LocalCache$Segment:runLockedCleanup(long),3469,3479,"/**
* Performs locked cleanup and expiration of entries.
* @param now current timestamp
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveType,com.google.common.reflect.TypeResolver:resolveType(java.lang.reflect.Type),213,227,"/**
* Resolves a given Type object to its resolved form.
* @param type the Type object to resolve
* @return the resolved Type object or the original Type if not resolvable
*/","* Resolves all type variables in {@code type} and all downstream types and returns a
   * corresponding type with type variables resolved.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,is,"com.google.common.reflect.TypeToken:is(java.lang.reflect.Type,java.lang.reflect.TypeVariable)",976,991,"/**
* Checks if the runtime type is compatible with the formal type.
* @param formalType the expected type
* @param declaration the type variable declaration
* @return true if types are compatible, false otherwise
*/","* {@code A.is(B)} is defined as {@code Foo<A>.isSubtypeOf(Foo<B>)}.
   *
   * <p>Specifically, returns true if any of the following conditions is met:
   *
   * <ol>
   *   <li>'this' and {@code formalType} are equal.
   *   <li>'this' and {@code formalType} have equal canonical form.
   *   <li>{@code formalType} is {@code <? extends Foo>} and 'this' is a subtype of {@code Foo}.
   *   <li>{@code formalType} is {@code <? super Foo>} and 'this' is a supertype of {@code Foo}.
   * </ol>
   *
   * Note that condition 2 isn't technically accurate under the context of a recursively bounded
   * type variables. For example, {@code Enum<? extends Enum<E>>} canonicalizes to {@code Enum<?>}
   * where {@code E} is the type variable declared on the {@code Enum} class declaration. It's
   * technically <em>not</em> true that {@code Foo<Enum<? extends Enum<E>>>} is a subtype of {@code
   * Foo<Enum<?>>} according to JLS. See testRecursiveWildcardSubtypeBug() for a real example.
   *
   * <p>It appears that properly handling recursive type bounds in the presence of implicit type
   * bounds is not easy. For now we punt, hoping that this defect should rarely cause issues in real
   * code.
   *
   * @param formalType is {@code Foo<formalType>} a supertype of {@code Foo<T>}?
   * @param declaration The type variable in the context of a parameterized type. Used to infer type
   *     bound when {@code formalType} is a wildcard with implicit upper bound.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,canonicalizeTypeArg,"com.google.common.reflect.TypeToken:canonicalizeTypeArg(java.lang.reflect.TypeVariable,java.lang.reflect.Type)",1011,1015,"/**
* Canonicalizes a type argument for a type variable.
* @param declaration the type variable to canonicalize against
* @param typeArg the type argument to canonicalize
* @return the canonicalized type argument
*/","* In reflection, {@code Foo<?>.getUpperBounds()[0]} is always {@code Object.class}, even when Foo
   * is defined as {@code Foo<T extends String>}. Thus directly calling {@code <?>.is(String.class)}
   * will return false. To mitigate, we canonicalize wildcards by enforcing the following
   * invariants:
   *
   * <ol>
   *   <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For
   *       example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code
   *       Enum<? extends Enum<E>}.
   *   <li>{@code canonicalize(t)} produces a ""literal"" supertype of t. For example: {@code Enum<?
   *       extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard
   *       the upper bound is implicitly an Enum too).
   *   <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)}
   *       and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.
   *   <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.
   * </ol>",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,equals,com.google.common.net.MediaType:equals(java.lang.Object),1193,1206,"/**
* Compares two MediaType objects for equality.
* @param obj Object to compare with (MediaType expected)
* @return true if types, subtypes and parameters match
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,hashCode,com.google.common.net.MediaType:hashCode(),1208,1217,"/**
* Computes and caches the hash code for this object.
* @return unique integer identifier or default value if not initialized
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,from,com.google.common.cache.CacheBuilder:from(java.lang.String),341,344,"/**
* Creates a CacheBuilder instance from a cache specification string.
* @param spec cache specification string to parse and use as builder configuration.","* Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}.
   * This is especially useful for command-line configuration of a {@code CacheBuilder}.
   *
   * @param spec a String in the format specified by {@link CacheBuilderSpec}
   * @since 12.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,disableCaching,com.google.common.cache.CacheBuilderSpec:disableCaching(),166,169,"/**
* Disables caching by setting maximum size to zero.
*/",Returns a CacheBuilderSpec that will prevent caching.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,inputFutures,com.google.common.util.concurrent.ClosingFuture$Combiner:inputFutures(),1363,1367,"/**
* Converts input futures to an immutable list of future values.
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,fileTreeChildren,com.google.common.io.MoreFiles:fileTreeChildren(java.nio.file.Path),298,308,"/**
* Returns iterable children of the specified directory.
* @param dir directory to fetch children from
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,from,com.google.common.net.InternetDomainName:from(java.lang.String),259,262,"/**
* Creates an InternetDomainName object from a string representation.
* @param domain string representation of the domain name
*/","* Returns an instance of {@link InternetDomainName} after lenient validation. Specifically,
   * validation against <a href=""http://www.ietf.org/rfc/rfc3490.txt"">RFC 3490</a>
   * (""Internationalizing Domain Names in Applications"") is skipped, while validation against <a
   * href=""http://www.ietf.org/rfc/rfc1035.txt"">RFC 1035</a> is relaxed in the following ways:
   *
   * <ul>
   *   <li>Any part containing non-ASCII characters is considered valid.
   *   <li>Underscores ('_') are permitted wherever dashes ('-') are permitted.
   *   <li>Parts other than the final part may start with a digit, as mandated by <a
   *       href=""https://tools.ietf.org/html/rfc1123#section-2"">RFC 1123</a>.
   * </ul>
   *
   * @param domain A domain name (not IP address)
   * @throws IllegalArgumentException if {@code domain} is not syntactically valid according to
   *     {@link #isValid}
   * @since 10.0 (previously named {@code fromLenient})",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,inCompletionOrder,com.google.common.util.concurrent.Futures:inCompletionOrder(java.lang.Iterable),909,928,"/**
* Combines multiple ListenableFutures into an ordered list.
* @param futures Iterable of futures to combine
* @return Ordered list of futures or empty list if none provided
*/","* Returns a list of delegate futures that correspond to the futures received in the order that
   * they complete. Delegate futures return the same value or throw the same exception as the
   * corresponding input future returns/throws.
   *
   * <p>""In the order that they complete"" means, for practical purposes, about what you would
   * expect, but there are some subtleties. First, we do guarantee that, if the output future at
   * index n is done, the output future at index n-1 is also done. (But as usual with futures, some
   * listeners for future n may complete before some for future n-1.) However, it is possible, if
   * one input completes with result X and another later with result Y, for Y to come before X in
   * the output future list. (Such races are impossible to solve without global synchronization of
   * all future completions. And they should have little practical impact.)
   *
   * <p>Cancelling a delegate future propagates to input futures once all the delegates complete,
   * either from cancellation or because an input future has completed. If N futures are passed in,
   * and M delegates are cancelled, the remaining M input futures will be cancelled once N - M of
   * the input futures complete. If all the delegates are cancelled, all the input futures will be
   * too.
   *
   * @since 17.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,union,com.google.common.collect.ImmutableRangeSet:union(com.google.common.collect.RangeSet),408,410,"/**
* Computes the union of this range set and another.
* @param other RangeSet to combine with
* @return Union of ranges in both sets
*/","* Returns a new range set consisting of the union of this range set and {@code other}.
   *
   * <p>This is essentially the same as {@code TreeRangeSet.create(this).addAll(other)} except it
   * returns an {@code ImmutableRangeSet}.
   *
   * @since 21.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,flatteningToImmutableListMultimap,"com.google.common.collect.CollectCollectors:flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function)",372,384,"/**
* Converts flat data to an immutable multimap.
* @param keyFunction function mapping each input to its key
* @param valuesFunction function mapping each input to its values
* @return ImmutableMultimap containing flattened data or null if not found
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,copyOf,com.google.common.collect.ImmutableMultimap:copyOf(com.google.common.collect.Multimap),386,395,"/**
* Creates an immutable copy of the given multimap.
* @param multimap input multimap to copy
* @return ImmutableMultimap object or existing one if it's not a partial view
*/","* Returns an immutable multimap containing the same mappings as {@code multimap}, in the
   * ""key-grouped"" iteration order described in the class documentation.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code multimap} is null",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,build,com.google.common.collect.ImmutableListMultimap$Builder:build(),337,340,"/**
* Builds and returns an ImmutableListMultimap instance.",Returns a newly-created immutable list multimap.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,toImmutableMap,"com.google.common.collect.ImmutableMap:toImmutableMap(java.util.function.Function,java.util.function.Function)",88,93,"/**
* Converts a stream of objects into an immutable map using specified key and value functions.
* @param keyFunction function to extract key from each object
* @param valueFunction function to extract value from each object
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements.
   * Entries appear in the result {@code ImmutableMap} in encounter order.
   *
   * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}, an {@code
   * IllegalArgumentException} is thrown when the collection operation is performed. (This differs
   * from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which
   * throws an {@code IllegalStateException}.)
   *
   * @since 21.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,merge,"com.google.common.collect.TreeRangeMap$SubRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)",573,584,"/**
* Merges a specified range and optional value into the current map.
* @param range Range to be merged
* @param value Optional new value for the merged range
* @param remappingFunction Function to re-map existing values if provided
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSetMultimap,"com.google.common.collect.CollectCollectors:toImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",386,397,"/**
* Converts a collection to an immutable multimap.
* @param keyFunction maps each element to its key
* @param valueFunction maps each element to its value
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object)",160,164,"/**
* Creates a multimap with a single entry for the given key-value pair.
* @param k1 unique key
* @param v1 associated value
*/",Returns an immutable multimap containing a single entry.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",170,175,"/**
* Creates a multimap with two key-value pairs.
* @param k1 first key
* @param v1 value associated with key1
* @param k2 second key
* @param v2 value associated with key2
* @return ImmutableSetMultimap instance containing the specified entries","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",181,187,"/**
* Creates an Immutable Multimap with three key-value pairs.
* @param k1 key1
* @param v1 value1
* @param k2 key2
* @param v2 value2
* @param k3 key3
* @param v3 value3
*/","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",193,201,"/**
* Creates a multimap with four key-value pairs.
* @param k1 first key
* @param v1 value for k1
* @param k2 second key
* @param v2 value for k2
* @param k3 third key
* @param v3 value for k3
* @param k4 fourth key
* @param v4 value for k4
* @return ImmutableSetMultimap instance","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",207,216,"/**
* Creates an ImmutableSetMultimap with the specified key-value pairs.
*@param k1,k2,k3,k4,k5 keys
*@param v1,v2,v3,v4,v5 values
*/","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,copyOf,com.google.common.collect.ImmutableSetMultimap:copyOf(java.lang.Iterable),452,455,"/**
* Creates an immutable multimap from the given iterable of key-value pairs.
* @param entries iterable of key-value entries to copy
*/","* Returns an immutable multimap containing the specified entries. The returned multimap iterates
   * over keys in the order they were first encountered in the input, and the values for each key
   * are iterated in the order they were encountered. If two values for the same key are {@linkplain
   * Object#equals equal}, the first value encountered is used.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,invert,com.google.common.collect.ImmutableSetMultimap:invert(),550,558,"/**
* Inverts the multimap by swapping key-value pairs.
* @return Inverted multimap with original inverse reference
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,servicesByState,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:servicesByState(),626,639,"/**
* Filters multimap entries by excluding NoOpServices and returns a new multimap.
* @return ImmutableSetMultimap of valid services by state
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,copyOf,com.google.common.collect.ImmutableSetMultimap:copyOf(com.google.common.collect.Multimap),419,422,"/**
* Creates an immutable multimap copy from a given multimap.
* @param multimap the multimap to copy
*/","* Returns an immutable set multimap containing the same mappings as {@code multimap}. The
   * generated multimap's key and value orderings correspond to the iteration ordering of the {@code
   * multimap.asMap()} view. Repeated occurrences of an entry in the multimap after the first are
   * ignored.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code multimap} is null",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,uniqueIndex,"com.google.common.collect.Maps:uniqueIndex(java.lang.Iterable,com.google.common.base.Function)",1345,1355,"/**
* Creates an indexed map from a collection of values.
* @param values iterable collection of values
* @param keyFunction function to extract keys from values
* @return ImmutableMap with unique indices or null if not found
*/","* Returns a map with the given {@code values}, indexed by keys derived from those values. In
   * other words, each input value produces an entry in the map whose key is the result of applying
   * {@code keyFunction} to that value. These entries appear in the same order as the input values.
   * Example usage:
   *
   * {@snippet :
   * Color red = new Color(""red"", 255, 0, 0);
   * ...
   * ImmutableSet<Color> allColors = ImmutableSet.of(red, green, blue);
   *
   * ImmutableMap<String, Color> colorForName =
   *     uniqueIndex(allColors, c -> c.toString());
   * assertThat(colorForName).containsEntry(""red"", red);
   * }
   *
   * <p>If your index may associate multiple values with each key, use {@link
   * Multimaps#index(Iterable, Function) Multimaps.index}.
   *
   * <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example:
   *
   * {@snippet :
   * import static com.google.common.collect.ImmutableMap.toImmutableMap;
   * ...
   * ImmutableMap<String, Color> colorForName =
   *     allColors.stream().collect(toImmutableMap(c -> c.toString(), c -> c));
   * }
   *
   * <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys
   * and values in the map are.
   *
   * @param values the values to use when constructing the {@code Map}
   * @param keyFunction the function used to produce the key for each value
   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value
   *     in the input collection to that value
   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one
   *     value in the input collection
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any value",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,create,"com.google.common.collect.ArrayTable:create(java.lang.Iterable,java.lang.Iterable)",106,109,"/**
* Creates an ArrayTable instance with the given row and column keys.
* @param rowKeys iterable of unique row identifiers
* @param columnKeys iterable of unique column identifiers
*/","* Creates an {@code ArrayTable} filled with {@code null}.
   *
   * @param rowKeys row keys that may be stored in the generated table
   * @param columnKeys column keys that may be stored in the generated table
   * @throws NullPointerException if any of the provided keys is null
   * @throws IllegalArgumentException if {@code rowKeys} or {@code columnKeys} contains duplicates
   *     or if exactly one of {@code rowKeys} or {@code columnKeys} is empty.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,<init>,com.google.common.collect.ArrayTable:<init>(com.google.common.collect.Table),171,174,"/**
* Initializes an ArrayTable from an existing Table instance.
* @param table source Table object
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,explicit,com.google.common.collect.Ordering:explicit(java.util.List),231,233,"/**
* Creates an explicit ordering from a sorted list of elements.
* @param valuesInOrder sorted list of elements
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,powerSet,com.google.common.collect.Sets:powerSet(java.util.Set),1673,1675,"/**
* Generates the power set of the given set.
* @param set input set
* @return a set containing all possible subsets of the original set
*/","* Returns the set of all possible subsets of {@code set}. For example, {@code
   * powerSet(ImmutableSet.of(1, 2))} returns the set {@code {{}, {1}, {2}, {1, 2}}}.
   *
   * <p>Elements appear in these subsets in the same iteration order as they appeared in the input
   * set. The order in which these subsets appear in the outer set is undefined. Note that the power
   * set of the empty set is not the empty set, but a one-element set containing the empty set.
   *
   * <p>The returned set and its constituent sets use {@code equals} to decide whether two elements
   * are identical, even if the input set uses a different concept of equivalence.
   *
   * <p><i>Performance notes:</i> while the power set of a set with size {@code n} is of size {@code
   * 2^n}, its memory usage is only {@code O(n)}. When the power set is constructed, the input set
   * is merely copied. Only as the power set is iterated are the individual subsets created, and
   * these subsets themselves occupy only a small constant amount of memory.
   *
   * @param set the set of elements to construct a power set from
   * @return the power set, as an immutable set of immutable sets
   * @throws IllegalArgumentException if {@code set} has more than 30 unique elements (causing the
   *     power set size to exceed the {@code int} range)
   * @throws NullPointerException if {@code set} is or contains {@code null}
   * @see <a href=""http://en.wikipedia.org/wiki/Power_set"">Power set article at Wikipedia</a>
   * @since 4.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forOrderedComponents,"com.google.common.collect.RegularImmutableTable:forOrderedComponents(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)",178,187,"/**
* Creates an immutable table from a list of ordered cells.
* @param cellList list of cells with values
* @param rowSpace set of unique row identifiers
* @param columnSpace set of unique column identifiers
* @return Dense or Sparse ImmutableTable instance based on cell density
*/",A factory that chooses the most space-efficient representation of the table.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,build,com.google.common.graph.ImmutableGraph$Builder:build(),200,202,"/**
* Builds an immutable graph from a mutable one.
* @return ImmutableGraph object representing the graph data
*/",* Returns a newly-created {@code ImmutableGraph} based on the contents of this {@code Builder}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,copyOf,com.google.common.graph.ImmutableNetwork:copyOf(com.google.common.graph.Network),58,62,"/**
* Creates an immutable copy of the given network.
* @param network original network to copy
*/",Returns an immutable copy of {@code network}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,copyOf,com.google.common.graph.ImmutableValueGraph:copyOf(com.google.common.graph.ValueGraph),55,59,"/**
* Creates an immutable copy of the given ValueGraph.
* @param graph original graph to replicate
* @return ImmutableValueGraph instance or existing one if already immutable
*/",Returns an immutable copy of {@code graph}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,covariantly,com.google.common.reflect.TypeResolver:covariantly(java.lang.reflect.Type),73,75,"/**
* Resolves type covariance by creating a TypeResolver with type mappings from the given context type.
* @param contextType the type for which to resolve covariance
*/","* Returns a resolver that resolves types ""covariantly"".
   *
   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code
   * <T>} is covariantly resolved to {@code <?>} such that return type of {@code List::get} is
   * {@code <?>}.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,invariantly,com.google.common.reflect.TypeResolver:invariantly(java.lang.reflect.Type),88,91,"/**
* Resolves type mappings from a given context type.
* @param contextType the type to resolve mappings for
*/","* Returns a resolver that resolves types ""invariantly"".
   *
   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code
   * <T>} cannot be invariantly resolved to {@code <?>} because otherwise the parameter type of
   * {@code List::set} will be {@code <?>} and it'll falsely say any object can be passed into
   * {@code ArrayList<?>::set}.
   *
   * <p>Instead, {@code <?>} will be resolved to a capture in the form of a type variable {@code
   * <capture-of-? extends Object>}, effectively preventing {@code set} from accepting any type.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,where,"com.google.common.reflect.TypeResolver:where(java.lang.reflect.Type,java.lang.reflect.Type)",112,116,"/**
* Resolves type parameters for the given types.
* @param formal expected type
* @param actual actual type
* @return TypeResolver object
*/","* Returns a new {@code TypeResolver} with type variables in {@code formal} mapping to types in
   * {@code actual}.
   *
   * <p>For example, if {@code formal} is a {@code TypeVariable T}, and {@code actual} is {@code
   * String.class}, then {@code new TypeResolver().where(formal, actual)} will {@linkplain
   * #resolveType resolve} {@code ParameterizedType List<T>} to {@code List<String>}, and resolve
   * {@code Map<T, Something>} to {@code Map<String, Something>} etc. Similarly, {@code formal} and
   * {@code actual} can be {@code Map<K, V>} and {@code Map<String, Integer>} respectively, or they
   * can be {@code E[]} and {@code String[]} respectively, or even any arbitrary combination
   * thereof.
   *
   * @param formal The type whose type variables or itself is mapped to other type(s). It's almost
   *     always a bug if {@code formal} isn't a type variable and contains no type variable. Make
   *     sure you are passing the two parameters in the right order.
   * @param actual The type that the formal type variable(s) are mapped to. It can be or contain yet
   *     other type variables, in which case these type variables will be further resolved if
   *     corresponding mappings exist in the current {@code TypeResolver} instance.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toMap,com.google.common.collect.FluentIterable:toMap(com.google.common.base.Function),704,707,"/**
* Converts the delegate iterable to an immutable map using a provided function.
* @param valueFunction function that maps each element to its map value
* @return ImmutableMap or null if not applicable (but see note)
*/","* Returns an immutable map whose keys are the distinct elements of this {@code FluentIterable}
   * and whose value for each key was computed by {@code valueFunction}. The map's iteration order
   * is the order of the first appearance of each key in this iterable.
   *
   * <p>When there are multiple instances of a key in this iterable, it is unspecified whether
   * {@code valueFunction} will be applied to more than one instance of that key and, if it is,
   * which result will be mapped to that key in the returned map.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(ImmutableMap.toImmutableMap(k -> k,
   * valueFunction))}.
   *
   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code
   *     valueFunction} produces {@code null} for any key
   * @since 14.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue$Builder:create(java.lang.Iterable),218,226,"/**
* Creates a Min-Max Priority Queue initialized with the given contents.
* @param initialContents iterable of elements to populate the queue
*/","* Builds a new min-max priority queue using the previously specified options, and having the
     * given initial elements.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,add,com.google.common.collect.MinMaxPriorityQueue:add(java.lang.Object),265,270,"/**
* Adds an element to the collection.
* @param element object to be added
*/","* Adds the given element to this queue. If this queue has a maximum size, after adding {@code
   * element} the queue will automatically evict its greatest element (according to its comparator),
   * which may be {@code element} itself.
   *
   * @return {@code true} always",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,addAll,com.google.common.collect.MinMaxPriorityQueue:addAll(java.util.Collection),272,281,"/**
* Adds all elements from the specified collection to this queue.
* @param newElements collection of elements to enqueue
* @return true if any elements were added, false otherwise
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getTopLevelClasses,com.google.common.reflect.ClassPath:getTopLevelClasses(java.lang.String),170,179,"/**
* Retrieves top-level classes within the specified package.
* @param packageName unique package identifier
* @return ImmutableSet of ClassInfo objects for matching package
*/",Returns all top level classes whose package name is {@code packageName}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getTopLevelClassesRecursive,com.google.common.reflect.ClassPath:getTopLevelClassesRecursive(java.lang.String),185,195,"/**
* Recursively fetches topLevel classes whose names start with the given package name.
* @param packageName package name to filter by
*/","* Returns all top level classes whose package name is {@code packageName} or starts with {@code
   * packageName} followed by a '.'.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,breadthFirst,com.google.common.graph.Traverser:breadthFirst(java.lang.Object),226,228,"/**
* Performs breadth-first search from the given starting node.
* @param startNode initial node to begin traversal
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in
   * the order of a breadth-first traversal. That is, all the nodes of depth 0 are returned, then
   * depth 1, then 2, and so on.
   *
   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in
   * the order {@code abcdef} (assuming successors are returned in alphabetical order).
   *
   * {@snippet :
   * b ---- a ---- d
   * |      |
   * |      |
   * e ---- c ---- f
   * }
   *
   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change
   * while iteration is in progress.
   *
   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will
   * compute its next element on the fly. It is thus possible to limit the traversal to a certain
   * number of nodes as follows:
   *
   * {@snippet :
   * Iterables.limit(Traverser.forGraph(graph).breadthFirst(node), maxNumberOfNodes);
   * }
   *
   * <p>See <a href=""https://en.wikipedia.org/wiki/Breadth-first_search"">Wikipedia</a> for more
   * info.
   *
   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPreOrder,com.google.common.graph.Traverser:depthFirstPreOrder(java.lang.Object),276,278,"/**
* Performs depth-first pre-order traversal of graph starting from given node.
* @param startNode root node of traversal
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in
   * the order of a depth-first pre-order traversal. ""Pre-order"" implies that nodes appear in the
   * {@code Iterable} in the order in which they are first visited.
   *
   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in
   * the order {@code abecfd} (assuming successors are returned in alphabetical order).
   *
   * {@snippet :
   * b ---- a ---- d
   * |      |
   * |      |
   * e ---- c ---- f
   * }
   *
   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change
   * while iteration is in progress.
   *
   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will
   * compute its next element on the fly. It is thus possible to limit the traversal to a certain
   * number of nodes as follows:
   *
   * {@snippet :
   * Iterables.limit(
   *     Traverser.forGraph(graph).depthFirstPreOrder(node), maxNumberOfNodes);
   * }
   *
   * <p>See <a href=""https://en.wikipedia.org/wiki/Depth-first_search"">Wikipedia</a> for more info.
   *
   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPostOrder,com.google.common.graph.Traverser:depthFirstPostOrder(java.lang.Object),326,328,"/**
* Performs a depth-first post-order traversal of a graph starting from the given node.
* @param startNode the node to begin traversal from
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in
   * the order of a depth-first post-order traversal. ""Post-order"" implies that nodes appear in the
   * {@code Iterable} in the order in which they are visited for the last time.
   *
   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in
   * the order {@code fcebda} (assuming successors are returned in alphabetical order).
   *
   * {@snippet :
   * b ---- a ---- d
   * |      |
   * |      |
   * e ---- c ---- f
   * }
   *
   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change
   * while iteration is in progress.
   *
   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will
   * compute its next element on the fly. It is thus possible to limit the traversal to a certain
   * number of nodes as follows:
   *
   * {@snippet :
   * Iterables.limit(
   *     Traverser.forGraph(graph).depthFirstPostOrder(node), maxNumberOfNodes);
   * }
   *
   * <p>See <a href=""https://en.wikipedia.org/wiki/Depth-first_search"">Wikipedia</a> for more info.
   *
   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanResources,com.google.common.reflect.ClassPath$LocationInfo:scanResources(),422,424,"/**
* Scans resources and returns an immutable set of ResourceInfo objects.
* @return Set of ResourceInfo objects
*/",Scans this location and returns all scanned resources.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,from,com.google.common.reflect.ClassPath:from(java.lang.ClassLoader),123,139,"/**
* Constructs a classpath from the given class loader, scanning all resources.
* @param classloader ClassLoader to use when resolving resources
* @return ClassPath object containing resolved resource information
*/","* Returns a {@code ClassPath} representing all classes and resources loadable from {@code
   * classloader} and its ancestor class loaders.
   *
   * <p><b>Warning:</b> {@code ClassPath} can find classes and resources only from:
   *
   * <ul>
   *   <li>{@link URLClassLoader} instances' {@code file:} URLs
   *   <li>the {@linkplain ClassLoader#getSystemClassLoader() system class loader}. To search the
   *       system class loader even when it is not a {@link URLClassLoader} (as in Java 9), {@code
   *       ClassPath} searches the files from the {@code java.class.path} system property.
   * </ul>
   *
   * @throws IOException if the attempt to read class path resources (jar files or directories)
   *     failed.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,returning,com.google.common.reflect.Invokable:returning(java.lang.Class),307,309,"/**
* Returns an invokable instance with specified return type.
* @param returnType class of the expected return value
*/","* Explicitly specifies the return type of this {@code Invokable}. For example:
   *
   * {@snippet :
   * Method factoryMethod = Person.class.getMethod(""create"");
   * Invokable<?, Person> factory = Invokable.of(getNameMethod).returning(Person.class);
   * }",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getEntry,"com.google.common.cache.LocalCache$Segment:getEntry(java.lang.Object,int)",2689,2707,"/**
* Retrieves a ReferenceEntry by key and hash value.
* @param key the key to search for
* @param hash the hash of the entry's key
* @return the matching ReferenceEntry or null if not found
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getLiveValue,"com.google.common.cache.LocalCache$Segment:getLiveValue(com.google.common.cache.ReferenceEntry,long)",2724,2740,"/**
* Retrieves the live value associated with a given entry.
* @param entry ReferenceEntry object
* @param now current time in milliseconds
* @return the live value (V) or null if expired or not found
*/","* Gets the value from an entry. Returns null if the entry is invalid, partially-collected,
     * loading, or expired.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,preWriteCleanup,com.google.common.cache.LocalCache$Segment:preWriteCleanup(long),3453,3456,"/**
* Performs cleanup and locking operations before writing.
* @param now current timestamp
*/","* Performs routine cleanup prior to executing a write. This should be called every time a write
     * thread acquires the segment lock, immediately after acquiring the lock.
     *
     * <p>Post-condition: expireEntries has been run.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,cleanUp,com.google.common.cache.LocalCache$Segment:cleanUp(),3463,3467,"/**
* Cleans up system resources by running locked and unlocked cleanup tasks.
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveInternal,"com.google.common.reflect.TypeResolver$TypeTable:resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)",324,369,"/**
* Resolves internal TypeVariables using a provided TypeTable for dependants.
* @param var TypeVariable to resolve
* @param forDependants TypeTable used for resolving dependent types
* @return resolved Type or original TypeVariable if not resolvable
*/","* Resolves {@code var} using the encapsulated type mapping. If it maps to yet another
     * non-reified type or has bounds, {@code forDependants} is used to do further resolution, which
     * doesn't try to resolve any type variable on generic declarations that are already being
     * resolved.
     *
     * <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveTypesInPlace,com.google.common.reflect.TypeResolver:resolveTypesInPlace(java.lang.reflect.Type[]),229,235,"/**
* Resolves type references in the given array of types.
* @param types array of Type objects to be resolved
* @return modified array with resolved types or null if unresolved
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveParameterizedType,com.google.common.reflect.TypeResolver:resolveParameterizedType(java.lang.reflect.ParameterizedType),257,266,"/**
* Resolves a ParameterizedType by recursively resolving its owner and raw types.
* @param type the ParameterizedType to resolve
* @return the resolved ParameterizedType or null if any resolution fails
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericReturnType,com.google.common.reflect.TypeToken$1:getGenericReturnType(),371,374,"/**
* Retrieves the generic return type of the underlying method. 
* @return The generic return type or null if not applicable 
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericReturnType,com.google.common.reflect.TypeToken$2:getGenericReturnType(),443,452,"/**
* Returns the generic return type of this method, or its raw Class if none specified.
*/","* If the class is parameterized, such as {@link java.util.ArrayList ArrayList}, this returns
     * {@code ArrayList<E>}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,where,"com.google.common.reflect.TypeToken:where(com.google.common.reflect.TypeParameter,com.google.common.reflect.TypeToken)",235,243,"/**
* Resolves a TypeToken of T given a TypeParameter and TypeToken<X>.
* @param typeParam TypeParameter to resolve
* @param typeArg TypeToken for X
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,writeReplace,com.google.common.reflect.TypeToken:writeReplace(),846,850,"/**
* Resolves runtime type and returns a serialized representation.
* @return TypeResolver result or null if failed
*/",Implemented to support serialization of subclasses.,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,futureCombiner,com.google.common.util.concurrent.ClosingFuture$Combiner:futureCombiner(),1357,1361,"/**
* Returns a FutureCombiner instance based on the 'allMustSucceed' flag.
* @return FutureCombiner to combine input futures; null if all must succeed
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,fileTraverser,com.google.common.io.MoreFiles:fileTraverser(),294,296,"/**
* Creates a traverser for navigating directory hierarchies.
*/","* Returns a {@link Traverser} instance for the file and directory tree. The returned traverser
   * starts from a {@link Path} and will return all files and directories it encounters.
   *
   * <p>The returned traverser attempts to avoid following symbolic links to directories. However,
   * the traverser cannot guarantee that it will not follow symbolic links to directories as it is
   * possible for a directory to be replaced with a symbolic link between checking if the file is a
   * directory and actually reading the contents of that directory.
   *
   * <p>If the {@link Path} passed to one of the traversal methods does not exist or is not a
   * directory, no exception will be thrown and the returned {@link Iterable} will contain a single
   * element: that path.
   *
   * <p>{@link DirectoryIteratorException} may be thrown when iterating {@link Iterable} instances
   * created by this traverser if an {@link IOException} is thrown by a call to {@link
   * #listFiles(Path)}.
   *
   * <p>Example: {@code MoreFiles.fileTraverser().depthFirstPreOrder(Paths.get(""/""))} may return the
   * following paths: {@code [""/"", ""/etc"", ""/etc/config.txt"", ""/etc/fonts"", ""/home"", ""/home/alice"",
   * ...]}
   *
   * @since 23.5",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostSpecifier.java,fromValid,com.google.common.net.HostSpecifier:fromValid(java.lang.String),71,104,"/**
* Creates a HostSpecifier from a valid string representation.
* @param specifier string containing the host specifier
*/","* Returns a {@code HostSpecifier} built from the provided {@code specifier}, which is already
   * known to be valid. If the {@code specifier} might be invalid, use {@link #from(String)}
   * instead.
   *
   * <p>The specifier must be in one of these formats:
   *
   * <ul>
   *   <li>A domain name, like {@code google.com}
   *   <li>A IPv4 address string, like {@code 127.0.0.1}
   *   <li>An IPv6 address string with or without brackets, like {@code [2001:db8::1]} or {@code
   *       2001:db8::1}
   * </ul>
   *
   * @throws IllegalArgumentException if the specifier is not valid.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,ancestor,com.google.common.net.InternetDomainName:ancestor(int),594,606,"/**
* Constructs the ancestral domain by clipping leading parts.
* @param levels number of levels to clip
*/","* Returns the ancestor of the current domain at the given number of levels ""higher"" (rightward)
   * in the subdomain list. The number of levels must be non-negative, and less than {@code N-1},
   * where {@code N} is the number of parts in the domain.
   *
   * <p>TODO: Reasonable candidate for addition to public API.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,child,com.google.common.net.InternetDomainName:child(java.lang.String),617,619,"/**
* Constructs a child domain name by appending the given parts to the current domain name.
* @param leftParts parts of the child domain name
*/","* Creates and returns a new {@code InternetDomainName} by prepending the argument and a dot to
   * the current name. For example, {@code InternetDomainName.from(""foo.com"").child(""www.bar"")}
   * returns a new {@code InternetDomainName} with the value {@code www.bar.foo.com}. Only lenient
   * validation is performed, as described {@link #from(String) here}.
   *
   * @throws NullPointerException if leftParts is null
   * @throws IllegalArgumentException if the resulting name is not valid",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isValid,com.google.common.net.InternetDomainName:isValid(java.lang.String),644,651,"/**
* Validates a domain name by attempting to parse it.
* @param name the name to validate
* @return true if valid, false otherwise
*/","* Indicates whether the argument is a syntactically valid domain name using lenient validation.
   * Specifically, validation against <a href=""http://www.ietf.org/rfc/rfc3490.txt"">RFC 3490</a>
   * (""Internationalizing Domain Names in Applications"") is skipped.
   *
   * <p>The following two code snippets are equivalent:
   *
   * {@snippet :
   * domainName = InternetDomainName.isValid(name)
   *     ? InternetDomainName.from(name)
   *     : DEFAULT_DOMAIN;
   * }
   *
   * {@snippet :
   * try {
   *   domainName = InternetDomainName.from(name);
   * } catch (IllegalArgumentException e) {
   *   domainName = DEFAULT_DOMAIN;
   * }
   * }
   *
   * @since 8.0 (previously named {@code isValidLenient})",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,flatteningToImmutableListMultimap,"com.google.common.collect.ImmutableListMultimap:flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function)",122,127,"/**
* Converts a stream of objects to an immutable multimap.
* @param keyFunction maps each object to its key
* @param valuesFunction maps each object to a stream of values
*/","* Returns a {@code Collector} accumulating entries into an {@code ImmutableListMultimap}. Each
   * input element is mapped to a key and a stream of values, each of which are put into the
   * resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the
   * streams of values.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             flatteningToImmutableListMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c));
   *
   * // is equivalent to
   *
   * static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     ImmutableListMultimap.<Character, Character>builder()
   *         .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'))
   *         .putAll('a', Arrays.asList('p', 'p', 'l', 'e'))
   *         .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'))
   *         .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'))
   *         .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'))
   *         .build();
   * }
   *
   * }
   *
   * @since 21.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableListMultimap,"com.google.common.collect.CollectCollectors:toImmutableListMultimap(java.util.function.Function,java.util.function.Function)",359,370,"/**
* Maps elements to an immutable multimap using provided functions.
* @param keyFunction maps each element to a key
* @param valueFunction maps each element to a value
* @return ImmutableListMultimap with mapped keys and values
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object)",141,145,"/**
* Creates a multimap with a single entry.
* @param k1 key
* @param v1 value
*/",Returns an immutable multimap containing a single entry.,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",148,153,"/**
* Creates a multimap with two key-value pairs.
* @param k1 first key
* @param v1 value for k1
* @param k2 second key
* @param v2 value for k2
* @return ImmutableListMultimap instance
*/","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",156,162,"/**
* Creates a Multimap with three key-value pairs.
* @param k1 first key
* @param v1 value for k1
* @param k2 second key
* @param v2 value for k2
* @param k3 third key
* @param v3 value for k3
* @return Multimap with three entries","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",165,173,"/**
* Creates a multimap with four entries.
* @param k1 key of first entry
* @param v1 value of first entry
* @param k2 key of second entry
* @param v2 value of second entry
* @param k3 key of third entry
* @param v3 value of third entry
* @param k4 key of fourth entry
* @param v4 value of fourth entry
*/","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",176,185,"/**
* Creates a multimap with the specified key-value pairs.
* @param k1 first key
* @param v1 first value
* @param k2 second key
* @param v2 second value
* @param k3 third key
* @param v3 third value
* @param k4 fourth key
* @param v4 fourth value
* @param k5 fifth key
* @param v5 fifth value
*/","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,copyOf,com.google.common.collect.ImmutableListMultimap:copyOf(java.lang.Iterable),380,383,"/**
* Creates a copy of the given multimap from its entries.
* @param entries iterable collection of key-value pairs
*/","* Returns an immutable multimap containing the specified entries. The returned multimap iterates
   * over keys in the order they were first encountered in the input, and the values for each key
   * are iterated in the order they were encountered.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,invert,com.google.common.collect.ImmutableListMultimap:invert(),470,478,"/**
* Inverts the multimap to a new instance with keys and values swapped.
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,index,"com.google.common.collect.Multimaps:index(java.util.Iterator,com.google.common.base.Function)",1719,1729,"/**
* Creates a multimap index from an iterator of values using a key function.
* @param values iterator over values to be indexed
* @param keyFunction function to extract keys from values
* @return ImmutableListMultimap with indexed values
*/","* Creates an index {@code ImmutableListMultimap} that contains the results of applying a
   * specified function to each item in an {@code Iterator} of values. Each value will be stored as
   * a value in the resulting multimap, yielding a multimap with the same size as the input
   * iterator. The key used to store that value in the multimap will be the result of calling the
   * function on that value. The resulting multimap is created as an immutable snapshot. In the
   * returned multimap, keys appear in the order they are first encountered, and the values
   * corresponding to each key appear in the same order as they are encountered.
   *
   * <p>For example,
   *
   * {@snippet :
   * List<String> badGuys =
   *     Arrays.asList(""Inky"", ""Blinky"", ""Pinky"", ""Pinky"", ""Clyde"");
   * Function<String, Integer> stringLengthFunction = ...;
   * Multimap<Integer, String> index =
   *     Multimaps.index(badGuys.iterator(), stringLengthFunction);
   * System.out.println(index);
   * }
   *
   * <p>prints
   *
   * {@snippet :
   * {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]}
   * }
   *
   * <p>The returned multimap is serializable if its keys and values are all serializable.
   *
   * @param values the values to use when constructing the {@code ImmutableListMultimap}
   * @param keyFunction the function used to produce the key for each value
   * @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code
   *     keyFunction} on each value in the input collection to that value
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key
   * @since 10.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withParameters,"com.google.common.net.MediaType:withParameters(java.lang.String,java.lang.Iterable)",901,924,"/**
* Adds parameters to the media type, overriding existing values if specified.
* @param attribute parameter name (e.g. ""Accept-Language"")
* @param values values for the specified parameter
*/","* <em>Replaces</em> all parameters with the given attribute with parameters using the given
   * values. If there are no values, any existing parameters with the given attribute are removed.
   *
   * @throws IllegalArgumentException if either {@code attribute} or {@code values} is invalid
   * @since 24.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,create,"com.google.common.net.MediaType:create(java.lang.String,java.lang.String,com.google.common.collect.Multimap)",1007,1027,"/**
* Creates a MediaType instance from type, subtype and parameters.
* @param type the media type's type (e.g. ""text"")
* @param subtype the media type's subtype (e.g. ""plain"")
* @param parameters additional attributes (e.g. charset)
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,toImmutableSetMultimap,"com.google.common.collect.ImmutableSetMultimap:toImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",93,98,"/**
* Converts a stream of objects into an immutable multimap.
* @param keyFunction maps each object to its key
* @param valueFunction maps each object to its values
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSetMultimap}
   * whose keys and values are the result of applying the provided mapping functions to the input
   * elements.
   *
   * <p>For streams with defined encounter order (as defined in the Ordering section of the {@link
   * java.util.stream} Javadoc), that order is preserved, but entries are <a
   * href=""ImmutableMultimap.html#iteration"">grouped by key</a>.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(toImmutableSetMultimap(str -> str.charAt(0), str -> str.substring(1)));
   *
   * // is equivalent to
   *
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     new ImmutableSetMultimap.Builder<Character, String>()
   *         .put('b', ""anana"")
   *         .putAll('a', ""pple"", ""sparagus"")
   *         .putAll('c', ""arrot"", ""herry"")
   *         .build();
   * }
   *
   * @since 21.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,inverse,com.google.common.collect.ImmutableSetMultimap:inverse(),544,548,"/**
* Computes and returns the inverse of this multimap.
* @return Inverse multimap or existing cached result if available
*/","* {@inheritDoc}
   *
   * <p>Because an inverse of a set multimap cannot contain multiple pairs with the same key and
   * value, this method returns an {@code ImmutableSetMultimap} rather than the {@code
   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,markReady,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:markReady(),555,577,"/**
* Marks the service manager as ready, throwing exception if services transitioned prematurely.
*/","* Marks the {@link State} as ready to receive transitions. Returns true if no transitions have
     * been observed yet.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,servicesByState,com.google.common.util.concurrent.ServiceManager:servicesByState(),407,410,"/**
* Returns multimap of services grouped by their corresponding states.
*/","* Provides a snapshot of the current state of all the services under management.
   *
   * <p>N.B. This snapshot is guaranteed to be consistent, i.e. the set of states returned will
   * correspond to a point in time view of the services.
   *
   * @since 29.0 (present with return type {@code ImmutableMultimap} since 14.0)",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,flatteningToImmutableSetMultimap,"com.google.common.collect.CollectCollectors:flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",399,411,"/**
* Flattens input to an immutable set multimap using provided key and value functions.
* @param keyFunction function to extract unique key from each element
* @param valuesFunction function to extract stream of values for each element
* @return ImmutableSetMultimap containing flattened data
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,uniqueIndex,com.google.common.collect.FluentIterable:uniqueIndex(com.google.common.base.Function),762,765,"/**
* Creates an immutable map with unique keys from a delegate iterable.
* @param keyFunction function to extract keys from elements
*/","* Returns a map with the contents of this {@code FluentIterable} as its {@code values}, indexed
   * by keys derived from those values. In other words, each input value produces an entry in the
   * map whose key is the result of applying {@code keyFunction} to that value. These entries appear
   * in the same order as they appeared in this fluent iterable. Example usage:
   *
   * {@snippet :
   * Color red = new Color(""red"", 255, 0, 0);
   * ...
   * FluentIterable<Color> allColors = FluentIterable.from(ImmutableSet.of(red, green, blue));
   *
   * Map<String, Color> colorForName = allColors.uniqueIndex(toStringFunction());
   * assertThat(colorForName).containsEntry(""red"", red);
   * }
   *
   * <p>If your index may associate multiple values with each key, use {@link #index(Function)
   * index}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code
   * stream.collect(ImmutableMap.toImmutableMap(keyFunction, v -> v))}.
   *
   * @param keyFunction the function used to produce the key for each value
   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value
   *     in this fluent iterable to that value
   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one
   *     value in this fluent iterable
   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key
   * @since 14.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,create,com.google.common.collect.ArrayTable:create(com.google.common.collect.Table),135,140,"/**
* Creates an ArrayTable instance from a given Table.
* @param table the input Table to convert
* @return ArrayTable instance or null if not compatible
*/","* Creates an {@code ArrayTable} with the mappings in the provided table.
   *
   * <p>If {@code table} includes a mapping with row key {@code r} and a separate mapping with
   * column key {@code c}, the returned table contains a mapping with row key {@code r} and column
   * key {@code c}. If that row key / column key pair in not in {@code table}, the pair maps to
   * {@code null} in the generated table.
   *
   * <p>The returned table allows subsequent {@code put} calls with the row keys in {@code
   * table.rowKeySet()} and the column keys in {@code table.columnKeySet()}. Calling {@link #put}
   * with other keys leads to an {@code IllegalArgumentException}.
   *
   * <p>The ordering of {@code table.rowKeySet()} and {@code table.columnKeySet()} determines the
   * row and column iteration ordering of the returned table.
   *
   * @throws NullPointerException if {@code table} has a null key",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,readResolve,com.google.common.collect.ImmutableTable$SerializedForm:readResolve(),482,497,"/**
* Reconstructs the table from deserialized state.
* @return ImmutableTable object or empty table if no data
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forCellsInternal,"com.google.common.collect.RegularImmutableTable:forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator)",153,175,"/**
* Builds a RegularImmutableTable from an iterable of cells with optional row and column comparators.
* @param cells iterable of cells to build the table from
* @param rowComparator comparator for sorting rows (null for no sorting)
* @param columnComparator comparator for sorting columns (null for no sorting)
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,build,com.google.common.graph.ImmutableNetwork$Builder:build(),239,241,"/**
* Builds and returns an immutable network from the mutable network.
* @return ImmutableNetwork object representing the built network
*/","* Returns a newly-created {@code ImmutableNetwork} based on the contents of this {@code
     * Builder}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,build,com.google.common.graph.ImmutableValueGraph$Builder:build(),204,206,"/**
* Builds an immutable ValueGraph from the mutable instance.
* @return ImmutableValueGraph object
*/","* Returns a newly-created {@code ImmutableValueGraph} based on the contents of this {@code
     * Builder}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,<init>,com.google.common.reflect.TypeToken:<init>(java.lang.Class),155,162,"/**
* Captures and resolves the type token for a given class.
* @param declaringClass the class that declares the generic type
*/","* Constructs a new type token of {@code T} while resolving free type variables in the context of
   * {@code declaringClass}.
   *
   * <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the
   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.
   *
   * <p>For example:
   *
   * {@snippet :
   * abstract class IKnowMyType<T> {
   *   TypeToken<T> getMyType() {
   *     return new TypeToken<T>(getClass()) {};
   *   }
   * }
   *
   * new IKnowMyType<String>() {}.getMyType() => String
   * }",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getCovariantTypeResolver,com.google.common.reflect.TypeToken:getCovariantTypeResolver(),1186,1192,"/**
* Retrieves a TypeResolver instance for the runtime type, 
* lazily creating and caching it if not already present.
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getInvariantTypeResolver,com.google.common.reflect.TypeToken:getInvariantTypeResolver(),1194,1200,"/**
* Returns a TypeResolver for the runtime type, lazily initializing it if necessary.
* @return TypeResolver object, or null if invariantTypeResolver is not set
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue$Builder:create(),210,212,"/**
* Creates an empty Min-Max Priority Queue of type T.
*/","* Builds a new min-max priority queue using the previously specified options, and having no
     * initial contents.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue:create(java.lang.Iterable),118,121,"/**
* Creates a Min-Max priority queue with the given initial contents.
* @param initialContents iterable collection of elements to initialize the queue
*/","* Creates a new min-max priority queue using natural order, no maximum size, and initially
   * containing the given elements.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,reachableNodes,"com.google.common.graph.Graphs:reachableNodes(com.google.common.graph.Graph,java.lang.Object)",235,238,"/**
* Returns an immutable set of all nodes reachable from the given node in the graph.
* @param graph non-null graph containing the node
* @param node ID of the starting node
*/","* Returns the set of nodes that are reachable from {@code node}. Node B is defined as reachable
   * from node A if there exists a path (a sequence of adjacent outgoing edges) starting at node A
   * and ending at node B. Note that a node is always reachable from itself via a zero-length path.
   *
   * <p>This is a ""snapshot"" based on the current topology of {@code graph}, rather than a live view
   * of the set of nodes reachable from {@code node}. In other words, the returned {@link Set} will
   * not be updated after modifications to {@code graph}.
   *
   * @throws IllegalArgumentException if {@code node} is not present in {@code graph}
   * @since 33.1.0 (present with return type {@code Set} since 20.0)",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getLiveEntry,"com.google.common.cache.LocalCache$Segment:getLiveEntry(java.lang.Object,int,long)",2709,2718,"/**
* Retrieves a live reference entry for the given key and timestamp.
* @param key the key to look up
* @param hash the hash of the key
* @param now the current time in milliseconds
* @return the live reference entry if found, or null otherwise
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getEntry,com.google.common.cache.LocalCache:getEntry(java.lang.Object),4145,4152,"/**
* Retrieves a map entry for the specified key.
* @param key the lookup key or null to return null
* @return Entry object associated with the key, or null if not found
*/","* Returns the internal entry for the specified key. The entry may be loading, expired, or
   * partially collected.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isLive,"com.google.common.cache.LocalCache:isLive(com.google.common.cache.ReferenceEntry,long)",1746,1749,"/**
* Checks if an entry is live based on its hash and current time.
* @param entry the entry to check
* @param now the current timestamp
* @return true if the entry is live, false otherwise
*/","* This method is a convenience for testing. Code should call {@link Segment#getLiveValue}
   * instead.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsValue,com.google.common.cache.LocalCache:containsValue(java.lang.Object),4169,4207,"/**
* Checks if the map contains a specified value.
* @param value value to search for
* @return true if found, false otherwise
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,insertLoadingValueReference,"com.google.common.cache.LocalCache$Segment:insertLoadingValueReference(java.lang.Object,int,boolean)",2398,2446,"/**
* Inserts a loading value reference for the given key.
* @param key unique key identifier
* @param hash hash code of the key
* @param checkTime whether to check if refresh is still needed after acquiring the lock
* @return LoadingValueReference object or null if an existing entry exists and needs no refresh
*/","* Returns a newly inserted {@code LoadingValueReference}, or null if the live value reference
     * is already loading.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,put,"com.google.common.cache.LocalCache$Segment:put(java.lang.Object,int,java.lang.Object,boolean)",2789,2862,"/**
* Inserts or updates a value in the map, optionally only if absent.
* @param key unique key identifier
* @param hash hash code of the key
* @param value value to insert or update
* @param onlyIfAbsent true to only update if key is not present
* @return previously associated value (null for new entry)",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache$Segment:replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",2934,2993,"/**
* Replaces a value in the map if the specified key matches and the old value is equivalent.
* @param key the key to replace
* @param hash the hash code of the key
* @param oldValue the old value to be replaced
* @param newValue the new value to replace with
* @return true if replacement was successful, false otherwise",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache$Segment:replace(java.lang.Object,int,java.lang.Object)",2995,3047,"/**
* Replaces the value associated with a given key in the map.
* @param key key to replace
* @param hash hash code of the key
* @param newValue new value to associate with the key
* @return old value or null if not found or removed
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,"com.google.common.cache.LocalCache$Segment:remove(java.lang.Object,int)",3049,3093,"/**
* Removes the value associated with a given key from the map.
* @param key the key to remove
* @param hash the hash of the key
* @return the removed value, or null if not found
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,"com.google.common.cache.LocalCache$Segment:remove(java.lang.Object,int,java.lang.Object)",3095,3139,"/**
* Removes a key-value pair from the map.
* @param key the key to remove
* @param hash the hash code of the key
* @param value the expected value to remove (null if not specified)
* @return true if removed, false otherwise
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,storeLoadedValue,"com.google.common.cache.LocalCache$Segment:storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object)",3141,3200,"/**
* Stores a loaded value with the given key and hash code.
* @param key unique map key
* @param hash hash code of the key
* @param oldValueReference previous LoadingValueReference, if any
* @param newValue new value to store
* @return true if stored successfully, false otherwise
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$Segment:clear(),3202,3238,"/**
* Clears the map by notifying listeners and resetting internal state.
* @throws Exception if an error occurs during cleanup
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,postReadCleanup,com.google.common.cache.LocalCache$Segment:postReadCleanup(),3441,3445,"/**
* Periodically cleans up resources based on read count threshold.
* @param none
*/","* Performs routine cleanup following a read. Normally cleanup happens during writes. If cleanup
     * is not observed after a sufficient number of reads, try cleaning up from the read thread.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,cleanUp,com.google.common.cache.LocalCache:cleanUp(),3922,3926,"/**
* Cleans up all segments.",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveInternal,"com.google.common.reflect.TypeResolver$TypeTable$1:resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)",324,369,"/**
* Resolves a TypeVariable's bounds to their concrete types.
* @param var TypeVariable to resolve
* @param forDependants TypeTable for dependent types
* @return resolved Type or the original TypeVariable if no resolution is needed
*/","* Resolves {@code var} using the encapsulated type mapping. If it maps to yet another
     * non-reified type or has bounds, {@code forDependants} is used to do further resolution, which
     * doesn't try to resolve any type variable on generic declarations that are already being
     * resolved.
     *
     * <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolve,com.google.common.reflect.TypeResolver$TypeTable:resolve(java.lang.reflect.TypeVariable),301,314,"/**
* Resolves a TypeVariable to its final type by iterating through dependent types.
* @param var the TypeVariable to be resolved
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericParameterTypes,com.google.common.reflect.TypeToken$1:getGenericParameterTypes(),376,379,"/**
* Returns generic parameter types of the underlying method.
* @return array of Type objects representing method parameters
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericExceptionTypes,com.google.common.reflect.TypeToken$1:getGenericExceptionTypes(),391,394,"/**
* Retrieves generic exception types associated with the underlying method.
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericParameterTypes,com.google.common.reflect.TypeToken$2:getGenericParameterTypes(),454,466,"/**
* Returns an array of generic parameter types, excluding the hidden 'this' if applicable.
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericExceptionTypes,com.google.common.reflect.TypeToken$2:getGenericExceptionTypes(),478,481,"/**
* Returns array of generic exception types from underlying constructor. 
* @return Array of Type objects representing exception types.",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,where,"com.google.common.reflect.TypeToken:where(com.google.common.reflect.TypeParameter,java.lang.Class)",267,269,"/**
* Creates a new TypeToken instance using the provided type parameter and argument.
* @param typeParam type parameter to use
* @param typeArg class representing the actual type
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,call,"com.google.common.util.concurrent.ClosingFuture$Combiner:call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,java.util.concurrent.Executor)",1281,1299,"/**
* Combines a callable with provided closeables and executes it on the specified executor.
* @param combiningCallable function to combine with closeables
* @param executor execution context
* @return ClosingFuture object representing combined result
*/","* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a
     * combining function to their values. The function can use a {@link DeferredCloser} to capture
     * objects to be closed when the pipeline is done.
     *
     * <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs
     * fail, so will the returned step.
     *
     * <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be
     * cancelled.
     *
     * <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown
     * {@code ExecutionException} will be extracted and used as the failure of the derived step.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,callAsync,"com.google.common.util.concurrent.ClosingFuture$Combiner:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,java.util.concurrent.Executor)",1337,1355,"/**
* Asynchronously calls an AsyncCombiningCallable with provided Executor.
* @param combiningCallable the callable to execute
* @param executor execution context
* @return ClosingFuture containing result and closeable resources
*/","* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a
     * {@code ClosingFuture}-returning function to their values. The function can use a {@link
     * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those
     * captured by the returned {@link ClosingFuture}).
     *
     * <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs
     * fail, so will the returned step.
     *
     * <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be
     * cancelled.
     *
     * <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown
     * {@code ExecutionException} will be extracted and used as the failure of the derived step.
     *
     * <p>If the combiningCallable throws any other exception, it will be used as the failure of the
     * derived step.
     *
     * <p>If an exception is thrown after the combiningCallable creates a {@code ClosingFuture},
     * then none of the closeable objects in that {@code ClosingFuture} will be closed.
     *
     * <p>Usage guidelines for this method:
     *
     * <ul>
     *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a
     *       {@code ClosingFuture}. If possible, prefer calling {@link #call(CombiningCallable,
     *       Executor)} instead, with a function that returns the next value directly.
     *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}
     *       for every closeable object this step creates in order to capture it for later closing.
     *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code
     *       ClosingFuture} call {@link #from(ListenableFuture)}.
     * </ul>
     *
     * <p>The same warnings about doing heavyweight operations within {@link
     * ClosingFuture#transformAsync(AsyncClosingFunction, Executor)} apply here.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostSpecifier.java,from,com.google.common.net.HostSpecifier:from(java.lang.String),113,126,"/**
* Parses a string into a HostSpecifier object.
* @param specifier input string to be parsed
* @throws ParseException if the input is invalid
*/","* Attempts to return a {@code HostSpecifier} for the given string, throwing an exception if
   * parsing fails. Always use this method in preference to {@link #fromValid(String)} for a
   * specifier that is not already known to be valid.
   *
   * @throws ParseException if the specifier is not valid.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostSpecifier.java,isValid,com.google.common.net.HostSpecifier:isValid(java.lang.String),132,139,"/**
* Validates host specifier string.
* @param specifier host specifier to validate
* @return true if valid, false otherwise
*/","* Determines whether {@code specifier} represents a valid {@link HostSpecifier} as described in
   * the documentation for {@link #fromValid(String)}.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,publicSuffix,com.google.common.net.InternetDomainName:publicSuffix(),408,410,"/**
* Returns the internet domain's public suffix if present.
* @return PublicSuffix object or null if not set
*/","* Returns the {@linkplain #isPublicSuffix() public suffix} portion of the domain name, or {@code
   * null} if no public suffix is present.
   *
   * @since 6.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,topPrivateDomain,com.google.common.net.InternetDomainName:topPrivateDomain(),460,466,"/**
* Returns the top private domain in the hierarchy.
* @return InternetDomainName object representing the top private domain
*/","* Returns the portion of this domain name that is one level beneath the {@linkplain
   * #isPublicSuffix() public suffix}. For example, for {@code x.adwords.google.co.uk} it returns
   * {@code google.co.uk}, since {@code co.uk} is a public suffix. Similarly, for {@code
   * myblog.blogspot.com} it returns the same domain, {@code myblog.blogspot.com}, since {@code
   * blogspot.com} is a public suffix.
   *
   * <p>If {@link #isTopPrivateDomain()} is true, the current domain name instance is returned.
   *
   * <p>This method can be used to determine the probable highest level parent domain for which
   * cookies may be set, though even that depends on individual browsers' implementations of cookie
   * controls.
   *
   * @throws IllegalStateException if this domain does not end with a public suffix
   * @since 6.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,registrySuffix,com.google.common.net.InternetDomainName:registrySuffix(),516,518,"/**
* Returns the registry suffix of the internet domain name.
* @return InternetDomainName object or null if not set
*/","* Returns the {@linkplain #isRegistrySuffix() registry suffix} portion of the domain name, or
   * {@code null} if no registry suffix is present.
   *
   * @since 23.3",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,topDomainUnderRegistrySuffix,com.google.common.net.InternetDomainName:topDomainUnderRegistrySuffix(),562,568,"/**
* Returns the top domain under the current registry suffix.
* @return InternetDomainName object or null if not found
*/","* Returns the portion of this domain name that is one level beneath the {@linkplain
   * #isRegistrySuffix() registry suffix}. For example, for {@code x.adwords.google.co.uk} it
   * returns {@code google.co.uk}, since {@code co.uk} is a registry suffix. Similarly, for {@code
   * myblog.blogspot.com} it returns {@code blogspot.com}, since {@code com} is a registry suffix.
   *
   * <p>If {@link #isTopDomainUnderRegistrySuffix()} is true, the current domain name instance is
   * returned.
   *
   * <p><b>Warning:</b> This method should not be used to determine whether a domain is probably the
   * highest level for which cookies may be set. Use {@link #isTopPrivateDomain()} for that purpose.
   *
   * @throws IllegalStateException if this domain does not end with a registry suffix
   * @since 23.3",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,parent,com.google.common.net.InternetDomainName:parent(),582,585,"/**
* Retrieves the immediate parent domain.
* @return InternetDomainName object representing the parent domain or null if none exists
*/","* Returns an {@code InternetDomainName} that is the immediate ancestor of this one; that is, the
   * current domain with the leftmost part removed. For example, the parent of {@code
   * www.google.com} is {@code google.com}.
   *
   * @throws IllegalStateException if the domain has no parent, as determined by {@link #hasParent}",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,toImmutableListMultimap,"com.google.common.collect.ImmutableListMultimap:toImmutableListMultimap(java.util.function.Function,java.util.function.Function)",83,88,"/**
* Converts a collection of objects to an immutable multimap.
* @param keyFunction function to extract key from each object
* @param valueFunction function to extract value from each object
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableListMultimap}
   * whose keys and values are the result of applying the provided mapping functions to the input
   * elements.
   *
   * <p>For streams with defined encounter order (as defined in the Ordering section of the {@link
   * java.util.stream} Javadoc), that order is preserved, but entries are <a
   * href=""ImmutableMultimap.html#iteration"">grouped by key</a>.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(toImmutableListMultimap(str -> str.charAt(0), str -> str.substring(1)));
   *
   * // is equivalent to
   *
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     new ImmutableListMultimap.Builder<Character, String>()
   *         .put('b', ""anana"")
   *         .putAll('a', ""pple"", ""sparagus"")
   *         .putAll('c', ""arrot"", ""herry"")
   *         .build();
   * }
   *
   * @since 21.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object)",89,91,"/**
* Creates an immutable multimap with a single entry.
* @param k1 key
* @param v1 value
*/",Returns an immutable multimap containing a single entry.,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",94,96,"/**
* Creates an ImmutableMultimap with two key-value pairs.
* @param k1 first key
* @param v1 value associated with k1
* @param k2 second key
* @param v2 value associated with k2
*/","Returns an immutable multimap containing the given entries, in order.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",102,104,"/**
* Creates an ImmutableMultimap with the given key-value pairs.
* @param k1 first key
* @param v1 value for key k1
* @param k2 second key
* @param v2 value for key k2
* @param k3 third key
* @param v3 value for key k3
*/","* Returns an immutable multimap containing the given entries, in the ""key-grouped"" insertion
   * order described in the <a href=""#iteration"">class documentation</a>.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",110,112,"/**
* Creates an ImmutableMultimap from individual key-value pairs.
* @param k1,k2,k3,k4 keys
* @param v1,v2,v3,v4 values
*/","* Returns an immutable multimap containing the given entries, in the ""key-grouped"" insertion
   * order described in the <a href=""#iteration"">class documentation</a>.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",118,121,"/**
* Creates an ImmutableMultimap from a collection of key-value pairs.
* @param k1 first key
* @param v1 value associated with k1
* @param k2 second key
* @param v2 value associated with k2
* @param k3 third key
* @param v3 value associated with k3
* @param k4 fourth key
* @param v4 value associated with k4
* @param k5 fifth key
* @param v5 value associated with k5
*/","* Returns an immutable multimap containing the given entries, in the ""key-grouped"" insertion
   * order described in the <a href=""#iteration"">class documentation</a>.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,copyOf,com.google.common.collect.ImmutableMultimap:copyOf(java.lang.Iterable),405,408,"/**
* Creates an immutable multimap from an iterable of key-value pairs.
* @param entries the input collection of entries
*/","* Returns an immutable multimap containing the specified entries. The returned multimap iterates
   * over keys in the order they were first encountered in the input, and the values for each key
   * are iterated in the order they were encountered.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,inverse,com.google.common.collect.ImmutableListMultimap:inverse(),464,468,"/**
* Returns an inverted multimap copy or computes a new one if not cached.
* @return Inverted Multimap object
*/","* {@inheritDoc}
   *
   * <p>Because an inverse of a list multimap can contain multiple pairs with the same key and
   * value, this method returns an {@code ImmutableListMultimap} rather than the {@code
   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.
   *
   * @since 11.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,index,"com.google.common.collect.Multimaps:index(java.lang.Iterable,com.google.common.base.Function)",1678,1681,"/**
* Creates an indexed multimap from an iterable of values and a function to extract keys.
* @param values iterable of values
* @param keyFunction function to map each value to its corresponding key
*/","* Creates an index {@code ImmutableListMultimap} that contains the results of applying a
   * specified function to each item in an {@code Iterable} of values. Each value will be stored as
   * a value in the resulting multimap, yielding a multimap with the same size as the input
   * iterable. The key used to store that value in the multimap will be the result of calling the
   * function on that value. The resulting multimap is created as an immutable snapshot. In the
   * returned multimap, keys appear in the order they are first encountered, and the values
   * corresponding to each key appear in the same order as they are encountered.
   *
   * <p>For example,
   *
   * {@snippet :
   * List<String> badGuys =
   *     Arrays.asList(""Inky"", ""Blinky"", ""Pinky"", ""Pinky"", ""Clyde"");
   * Function<String, Integer> stringLengthFunction = ...;
   * Multimap<Integer, String> index =
   *     Multimaps.index(badGuys, stringLengthFunction);
   * System.out.println(index);
   * }
   *
   * <p>prints
   *
   * {@snippet :
   * {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]}
   * }
   *
   * <p>The returned multimap is serializable if its keys and values are all serializable.
   *
   * @param values the values to use when constructing the {@code ImmutableListMultimap}
   * @param keyFunction the function used to produce the key for each value
   * @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code
   *     keyFunction} on each value in the input collection to that value
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withParameter,"com.google.common.net.MediaType:withParameter(java.lang.String,java.lang.String)",934,936,"/**
* Adds a single parameter to the media type.
* @param attribute name of the parameter
* @param value value of the parameter
*/","* <em>Replaces</em> all parameters with the given attribute with a single parameter with the
   * given value. If multiple parameters with the same attributes are necessary use {@link
   * #withParameters(String, Iterable)}. Prefer {@link #withCharset} for setting the {@code charset}
   * parameter when using a {@link Charset} object.
   *
   * @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withParameters,com.google.common.net.MediaType:withParameters(com.google.common.collect.Multimap),890,892,"/**
* Creates media type with specified parameters.
* @param parameters multimap of parameter key-value pairs
*/","* <em>Replaces</em> all parameters with the given parameters.
   *
   * @throws IllegalArgumentException if any parameter or value is invalid",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,create,"com.google.common.net.MediaType:create(java.lang.String,java.lang.String)",1001,1005,"/**
* Creates a MediaType instance with the specified type and subtype.
* @param type the top-level media type (e.g., ""text"")
* @param subtype the sub-type of the media type (e.g., ""plain"") 
*/","* Creates a new media type with the given type and subtype.
   *
   * @throws IllegalArgumentException if type or subtype is invalid or if a wildcard is used for the
   *     type, but not the subtype.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,parse,com.google.common.net.MediaType:parse(java.lang.String),1100,1136,"/**
* Parses a MediaType string into its constituent parts.
* @param input the input MediaType string to parse
*/","* Parses a media type from its string representation.
   *
   * @throws IllegalArgumentException if the input is not parsable",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,<init>,com.google.common.util.concurrent.ServiceManager:<init>(java.lang.Iterable),207,233,"/**
* Initializes ServiceManager with a collection of services. If no services are provided,
* substitutes a placeholder service to ensure proper behavior. Adds listeners to each service.
* @param services iterable of services to manage
*/","* Constructs a new instance for managing the given services.
   *
   * @param services The services to manage
   * @throws IllegalArgumentException if not all services are {@linkplain State#NEW new} or if there
   *     are any duplicate services.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,flatteningToImmutableSetMultimap,"com.google.common.collect.ImmutableSetMultimap:flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",141,146,"/**
* Converts a stream of objects to an immutable multimap.
* @param keyFunction maps each object to its key
* @param valuesFunction maps each object to a stream of its values
*/","* Returns a {@code Collector} accumulating entries into an {@code ImmutableSetMultimap}. Each
   * input element is mapped to a key and a stream of values, each of which are put into the
   * resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the
   * streams of values.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             flatteningToImmutableSetMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c));
   *
   * // is equivalent to
   *
   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     ImmutableSetMultimap.<Character, Character>builder()
   *         .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'))
   *         .putAll('a', Arrays.asList('p', 'p', 'l', 'e'))
   *         .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'))
   *         .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'))
   *         .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'))
   *         .build();
   *
   * // after deduplication, the resulting multimap is equivalent to
   *
   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     ImmutableSetMultimap.<Character, Character>builder()
   *         .putAll('b', Arrays.asList('a', 'n'))
   *         .putAll('a', Arrays.asList('p', 'l', 'e', 's', 'a', 'r', 'g', 'u'))
   *         .putAll('c', Arrays.asList('a', 'r', 'o', 't', 'h', 'e', 'y'))
   *         .build();
   * }
   *
   * }
   *
   * @since 21.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forCells,"com.google.common.collect.RegularImmutableTable:forCells(java.util.List,java.util.Comparator,java.util.Comparator)",118,147,"/**
* Creates a RegularImmutableTable from a list of cells with optional row and column comparators.
* @param cells list of cells to construct the table from
* @param rowComparator Comparator for sorting rows (optional)
* @param columnComparator Comparator for sorting columns (optional)
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forCells,com.google.common.collect.RegularImmutableTable:forCells(java.lang.Iterable),149,151,"/**
* Creates an immutable table from an iterable of cells.
* @param cells iterable of table cells
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,resolveSupertype,com.google.common.reflect.TypeToken:resolveSupertype(java.lang.reflect.Type),287,293,"/**
* Resolves the supertype TypeToken for the given Type.
* @param type the input Type
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOfParameterizedType,com.google.common.reflect.TypeToken:isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType),894,917,"/**
* Checks if a parameterized type is subtype of the given supertype.
* @param supertype ParameterizedType to check against
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,resolveType,com.google.common.reflect.TypeToken:resolveType(java.lang.reflect.Type),280,285,"/**
* Resolves the given type into a TypeToken, while ensuring type safety in invariant contexts. 
* @param type type to be resolved
*/","* Resolves the given {@code type} against the type context represented by this type. For example:
   *
   * {@snippet :
   * new TypeToken<List<String>>() {}.resolveType(
   *     List.class.getMethod(""get"", int.class).getGenericReturnType())
   * => String.class
   * }",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue:create(),110,112,"/**
* Creates a min-max priority queue with natural ordering.
* @return MinMaxPriorityQueue instance
*/","* Creates a new min-max priority queue with default settings: natural order, no maximum size, no
   * initial contents, and an initial expected size of 11.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transitiveClosure,com.google.common.graph.Graphs:transitiveClosure(com.google.common.graph.Graph),189,221,"/**
* Computes the transitive closure of a graph.
* @param graph input graph
* @return ImmutableGraph representing the transitive closure
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,contains,com.google.common.cache.LocalCache$Values:contains(java.lang.Object),4616,4619,"/**
* Checks if cache contains specified value.
* @param o object to search for
* @return true if found, false otherwise
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,refresh,"com.google.common.cache.LocalCache$Segment:refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean)",2375,2392,"/**
* Loads user data asynchronously, returning the result or null if not found.
* @param key unique identifier
* @param hash cache hash
* @param loader CacheLoader instance
* @param checkTime whether to check timestamp
* @return loaded value or null
*/","* Refreshes the value associated with {@code key}, unless another thread is already doing so.
     * Returns the newly refreshed value associated with {@code key} if it was refreshed inline, or
     * {@code null} if another thread is performing the refresh or if an error occurs during
     * refresh.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,put,"com.google.common.cache.LocalCache:put(java.lang.Object,java.lang.Object)",4209,4216,"/**
* Puts a key-value pair into the map.
* @param key unique key
* @param value associated value
* @return previous value or null if not present
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,putIfAbsent,"com.google.common.cache.LocalCache:putIfAbsent(java.lang.Object,java.lang.Object)",4218,4224,"/**
* Inserts a new value for the given key if it's not already present.
* @param key unique identifier
* @param value new value to be inserted
* @return previous value or null if newly added
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache:replace(java.lang.Object,java.lang.Object,java.lang.Object)",4287,4297,"/**
* Replaces the value associated with a given key.
* @param key unique key identifier
* @param oldValue current value to be replaced (null to indicate no replacement)
* @return true if replacement was successful, false otherwise
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache:replace(java.lang.Object,java.lang.Object)",4299,4306,"/**
* Replaces a key-value pair in the map with a new value.
* @param key unique identifier
* @param value new value to store
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache:remove(java.lang.Object),4267,4275,"/**
* Removes an entry from the map by its key.
* @param key unique identifier of the entry to remove
* @return value associated with the removed entry or null if not found
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,"com.google.common.cache.LocalCache:remove(java.lang.Object,java.lang.Object)",4277,4285,"/**
* Removes an entry from the map by its key and/or value.
* @param key unique key or null to remove by value
* @param value unique value or null to remove by key
* @return true if removed, false otherwise
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAndRecordStats,"com.google.common.cache.LocalCache$Segment:getAndRecordStats(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.util.concurrent.ListenableFuture)",2327,2349,"/**
* Retrieves and records cache statistics for the given key.
* @param key unique identifier
* @param hash hash code of the key
* @param loadingValueReference reference to the loading value operation
* @param newValue new value loaded from the cache loader
* @return loaded value or null if not found
*/","Waits uninterruptibly for {@code newValue} to be loaded, and then records loading stats.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache:clear(),4308,4313,"/**
* Clears all cached data in this cache.
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,advanceTo,com.google.common.cache.LocalCache$HashIterator:advanceTo(com.google.common.cache.ReferenceEntry),4422,4437,"/**
* Advances to the next external entry based on the provided reference entry.
* @param entry ReferenceEntry object to advance from
* @return true if successful, false otherwise
*/","* Advances to the given entry. Returns true if the entry was valid, false if it should be
     * skipped.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsKey,"com.google.common.cache.LocalCache$Segment:containsKey(java.lang.Object,int)",2742,2757,"/**
* Checks if a key exists in the map.
* @param key object to check
* @param hash hash code of the key
* @return true if key is present, false otherwise
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsValue,com.google.common.cache.LocalCache$Segment:containsValue(java.lang.Object),2763,2787,"/**
* Checks if the map contains a specific value.
* @param value object to search for
* @return true if found, false otherwise
*/","* This method is a convenience for testing. Code should call {@link LocalCache#containsValue}
     * directly.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,cleanUp,com.google.common.cache.LocalCache$LocalManualCache:cleanUp(),4917,4920,"/**
 * Cleans up local cache resources.
 */",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,toString,com.google.common.reflect.TypeToken$2:toString(),840,843,"/**
* Returns a string representation of this object's runtime type. 
* @return Runtime type as a string.",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,index,com.google.common.collect.FluentIterable:index(com.google.common.base.Function),727,730,"/**
* Indexes elements by applying a function to map each element to a unique key.
* @param keyFunction maps element to its corresponding key
*/","* Creates an index {@code ImmutableListMultimap} that contains the results of applying a
   * specified function to each item in this {@code FluentIterable} of values. Each element of this
   * iterable will be stored as a value in the resulting multimap, yielding a multimap with the same
   * size as this iterable. The key used to store that value in the multimap will be the result of
   * calling the function on that value. The resulting multimap is created as an immutable snapshot.
   * In the returned multimap, keys appear in the order they are first encountered, and the values
   * corresponding to each key appear in the same order as they are encountered.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))}
   * behaves similarly, but returns a mutable {@code Map<K, List<E>>} instead, and may not preserve
   * the order of entries.
   *
   * @param keyFunction the function used to produce the key for each value
   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key
   * @since 14.0",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withCharset,com.google.common.net.MediaType:withCharset(java.nio.charset.Charset),947,953,"/**
* Sets the media type's character set and returns a new MediaType instance.
* @param charset the character set (e.g. UTF-8) for this media type
*/","* Returns a new instance with the same type and subtype as this instance, with the {@code
   * charset} parameter set to the {@link Charset#name name} of the given charset. Only one {@code
   * charset} parameter will be present on the new instance regardless of the number set on this
   * one.
   *
   * <p>If a charset must be specified that is not supported on this JVM (and thus is not
   * representable as a {@link Charset} instance), use {@link #withParameter}.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withoutParameters,com.google.common.net.MediaType:withoutParameters(),881,883,"/**
* Returns the media type with no parameters.
* @return MediaType object or new instance if original has parameters
*/","* Returns a new instance with the same type and subtype as this instance, but without any
   * parameters.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createApplicationType,com.google.common.net.MediaType:createApplicationType(java.lang.String),1034,1036,"/**
* Creates application media type with specified subtype.
* @param subtype subtype of the media type
*/","* Creates a media type with the ""application"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createAudioType,com.google.common.net.MediaType:createAudioType(java.lang.String),1043,1045,"/**
 * Creates an audio media type with the specified subtype.
 * @param subtype audio subtype (e.g. ""mp3"", ""wav"")
 */","* Creates a media type with the ""audio"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createFontType,com.google.common.net.MediaType:createFontType(java.lang.String),1052,1054,"/**
* Creates font media type.
* @param subtype sub-type of font (e.g. ""woff"", ""woff2"")
*/","* Creates a media type with the ""font"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createImageType,com.google.common.net.MediaType:createImageType(java.lang.String),1061,1063,"/**
* Creates an image media type with specified subtype.
* @param subtype image subtype (e.g. jpeg, png)
*/","* Creates a media type with the ""image"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createTextType,com.google.common.net.MediaType:createTextType(java.lang.String),1070,1072,"/**
* Creates text media type with given subtype.
* @param subtype specific subtype of text media (e.g., ""plain"", ""html"")
*/","* Creates a media type with the ""text"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createVideoType,com.google.common.net.MediaType:createVideoType(java.lang.String),1079,1081,"/**
* Creates a video media type with specified subtype.
* @param subtype specific video subtype (e.g. mp4, avi)
*/","* Creates a media type with the ""video"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,buildOrThrow,com.google.common.collect.ImmutableTable$Builder:buildOrThrow(),285,295,"/**
* Builds an Immutable Table from a collection of cells.
* @return ImmutableTable instance or throws exception if invalid
*/","* Returns a newly-created immutable table, or throws an exception if duplicate key pairs were
     * added.
     *
     * @throws IllegalArgumentException if duplicate key pairs were added
     * @since 31.0",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getGenericSuperclass,com.google.common.reflect.TypeToken:getGenericSuperclass(),307,323,"/**
* Resolves the generic superclass of this type.
* @return TypeToken for the superclass, or null if none exists","* Returns the generic superclass of this type or {@code null} if the type represents {@link
   * Object} or an interface. This method is similar but different from {@link
   * Class#getGenericSuperclass}. For example, {@code new TypeToken<StringArrayList>()
   * {}.getGenericSuperclass()} will return {@code new TypeToken<ArrayList<String>>() {}}; while
   * {@code StringArrayList.class.getGenericSuperclass()} will return {@code ArrayList<E>}, where
   * {@code E} is the type variable declared by class {@code ArrayList}.
   *
   * <p>If this type is a type variable or wildcard, its first upper bound is examined and returned
   * if the bound is a class or extends from a class. This means that the returned type could be a
   * type variable too.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getGenericInterfaces,com.google.common.reflect.TypeToken:getGenericInterfaces(),347,362,"/**
* Resolves generic interfaces for the type.
* @return list of TypeTokens representing the generic interfaces
*/","* Returns the generic interfaces that this type directly {@code implements}. This method is
   * similar but different from {@link Class#getGenericInterfaces()}. For example, {@code new
   * TypeToken<List<String>>() {}.getGenericInterfaces()} will return a list that contains {@code
   * new TypeToken<Iterable<String>>() {}}; while {@code List.class.getGenericInterfaces()} will
   * return an array that contains {@code Iterable<T>}, where the {@code T} is the type variable
   * declared by interface {@code Iterable}.
   *
   * <p>If this type is a type variable or wildcard, its upper bounds are examined and those that
   * are either an interface or upper-bounded only by interfaces are returned. This means that the
   * returned types could include type variables too.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSupertype,com.google.common.reflect.TypeToken:getSupertype(java.lang.Class),396,415,"/**
* Resolves the most specific superclass of this type.
* @param superclass target superclass class
* @return the resolved TypeToken or null if not found
*/","* Returns the generic form of {@code superclass}. For example, if this is {@code
   * ArrayList<String>}, {@code Iterable<String>} is returned given the input {@code
   * Iterable.class}.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,scheduleRefresh,"com.google.common.cache.LocalCache$Segment:scheduleRefresh(com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,long,com.google.common.cache.CacheLoader)",2351,2367,"/**
* Refreshes cache value for given key if eligible and loaded.
* @param entry cache reference entry
* @param key unique key identifier
* @return refreshed value or old value if refresh failed
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,refresh,com.google.common.cache.LocalCache:refresh(java.lang.Object),4154,4157,"/**
* Refreshes the cache segment associated with the given key.
* @param key unique key to refresh
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,put,"com.google.common.cache.LocalCache$LocalManualCache:put(java.lang.Object,java.lang.Object)",4871,4874,"/**
 * Stores a value in the cache associated with the provided key.
 * @param key unique identifier for the cached item
 * @param value value to be stored in the cache
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,setValue,com.google.common.cache.LocalCache$WriteThroughEntry:setValue(java.lang.Object),4516,4521,"/**
* Sets new value and returns old value.
* @param newValue new value to set
* @return old value or null if update fails
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadAll,"com.google.common.cache.LocalCache:loadAll(java.util.Set,com.google.common.cache.CacheLoader)",4082,4139,"/**
* Loads all cached values for the specified keys using the provided CacheLoader.
* @param keys set of unique keys to load
* @param loader cache loader instance
* @return map of loaded key-value pairs or null if not found
* @throws ExecutionException on loading failure
*/","* Returns the result of calling {@link CacheLoader#loadAll}, or null if {@code loader} doesn't
   * implement {@code loadAll}.",,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,putAll,com.google.common.cache.LocalCache:putAll(java.util.Map),4260,4265,"/**
* Adds all entries from the given map to this map.
* @param m map containing key-value pairs to add
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$HashIterator:remove(),4453,4458,"/**
* Removes and clears the cached UserProfile object.
* @throws AssertionError if no user profile was previously returned
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$KeySet:remove(java.lang.Object),4583,4586,"/**
* Removes an object from local cache and returns true if successful.
* @param o object to be removed
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidate,com.google.common.cache.LocalCache$LocalManualCache:invalidate(java.lang.Object),4881,4885,"/**
 * Invalidates cache entry by key.
 * @param key unique cache identifier
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidateAll,com.google.common.cache.LocalCache:invalidateAll(java.lang.Iterable),4315,4320,"/**
* Invalidates all specified user sessions.
* @param keys iterable of session IDs to invalidate
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$EntrySet:remove(java.lang.Object),4650,4658,"/**
* Removes the specified entry from the cache.
* @param o the entry to remove
* @return true if removed successfully, false otherwise
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,compute,"com.google.common.cache.LocalCache$Segment:compute(java.lang.Object,int,java.util.function.BiFunction)",2211,2293,"/**
* Computes a value for the given key using the provided function.
* @param key unique key identifier
* @param hash computed hash of the key
* @param function BiFunction to compute the value
* @return computed value or null if not found or computation failed
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadSync,"com.google.common.cache.LocalCache$Segment:loadSync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)",2297,2305,"/**
* Loads a value synchronously from the cache or computes it via the provided loader.
* @param key cache key
* @param hash cache hash code
* @param loadingValueReference reference to load future result
* @param loader function to compute value if not cached
* @return loaded value, or null if computation failed
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$AbstractCacheSet:clear(),4548,4551,"/**
 * Clears the local cache instance.
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidateAll,com.google.common.cache.LocalCache$LocalManualCache:invalidateAll(),4892,4895,"/**
 * Invalidates all cached data in local storage.
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$Values:clear(),4600,4603,"/**
 * Clears local cache by delegating to the underlying cache.",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nextInChain,com.google.common.cache.LocalCache$HashIterator:nextInChain(),4395,4404,"/**
* Advances to the next entry in a linked chain, attempting to advance to it.
* @return true if successful, false otherwise
*/",Finds the next entry in the current chain. Returns true if an entry was found.,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsKey,com.google.common.cache.LocalCache:containsKey(java.lang.Object),4159,4167,"/**
* Checks if a key is present in the map.
* @param key object to search for
* @return true if key exists, false otherwise
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,build,com.google.common.collect.ImmutableTable$Builder:build(),274,276,"/**
* Builds an immutable table from internal state.
* @return built ImmutableTable object or throws exception on failure
*/","* Returns a newly-created immutable table.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate key pairs. The {@code build()} method will
     * soon be deprecated.
     *
     * @throws IllegalArgumentException if duplicate key pairs were added",,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSupertypeFromUpperBounds,"com.google.common.reflect.TypeToken:getSupertypeFromUpperBounds(java.lang.Class,java.lang.reflect.Type[])",1202,1214,"/**
* Finds the upper bound of the given class among the provided bounds.
* @param supertype Class to search for
* @param upperBounds array of potential bounds
* @return TypeToken representing the matching upper bound or throws exception if not found
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,resolveTypeArgsForSubclass,com.google.common.reflect.TypeToken:resolveTypeArgsForSubclass(java.lang.Class),1268,1293,"/**
* Resolves type arguments for a subclass.
* @param subclass the subclass to resolve
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache$Segment:get(java.lang.Object,int)",2083,2103,"/**
* Retrieves cached or loaded value associated with a given key.
* @param key object to look up
* @param hash key's hash code for concurrent access
* @return Value object if found, otherwise null
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,refresh,com.google.common.cache.LocalCache$LocalLoadingCache:refresh(java.lang.Object),4965,4968,"/**
* Refreshes cache entry by re-issuing the request for the specified key.
* @param key unique identifier of the cached resource to refresh
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,putAll,com.google.common.cache.LocalCache$LocalManualCache:putAll(java.util.Map),4876,4879,"/**
* Copies all entries from the provided map to this cache.
* @param m the map containing key-value pairs to be cached
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidateAll,com.google.common.cache.LocalCache$LocalManualCache:invalidateAll(java.lang.Iterable),4887,4890,"/**
 * Invalidates all cache entries associated with given keys.
 * @param keys iterable of cache key identifiers
 */",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,compute,"com.google.common.cache.LocalCache:compute(java.lang.Object,java.util.function.BiFunction)",4226,4233,"/**
* Computes a value for the given key using the specified function.
* @param key unique key identifier
* @param function BiFunction to calculate the value
* @return computed V object or null if not found
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,lockedGetOrLoad,"com.google.common.cache.LocalCache$Segment:lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader)",2105,2187,"/**
* Fetches or loads a value associated with the given key, using the provided loader if not found in cache.
* @param key unique identifier of the key to fetch
* @param hash hash code of the key
* @param loader CacheLoader instance used for loading values
* @return loaded value or null if failed to load
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nextInTable,com.google.common.cache.LocalCache$HashIterator:nextInTable(),4407,4416,"/**
* Attempts to advance to the next entry in a table.
* @return true if successful, false otherwise
*/",Finds the next entry in the current table. Returns true if an entry was found.,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,contains,com.google.common.cache.LocalCache$KeySet:contains(java.lang.Object),4578,4581,"/**
* Checks whether cache contains specified key.
* @param o object to search for in cache
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,copyOf,com.google.common.collect.ImmutableTable:copyOf(java.lang.Iterable),136,143,"/**
* Creates an immutable table from a collection of cells.
* @param cells iterable of cells to copy
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toImmutableTable,"com.google.common.collect.TableCollectors:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function)",35,49,"/**
* Converts a stream of data to an immutable table.
* @param rowFunction maps each element to its row key
* @param columnFunction maps each element to its column key
* @param valueFunction maps each element to its table value
* @return ImmutableTable object containing the aggregated data
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSubtype,com.google.common.reflect.TypeToken:getSubtype(java.lang.Class),422,441,"/**
* Resolves the type token for a given subclass.
* @param subclass Class<?> of the desired subtype
*/","* Returns subtype of {@code this} with {@code subclass} as the raw class. For example, if this is
   * {@code Iterable<String>} and {@code subclass} is {@code List}, {@code List<String>} is
   * returned.",,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,com.google.common.cache.LocalCache:get(java.lang.Object),3974,3982,"/**
* Retrieves value associated with the given key.
* @param key object to look up
* @return V object or null if not found
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getIfPresent,com.google.common.cache.LocalCache:getIfPresent(java.lang.Object),3990,3999,"/**
* Retrieves a value from the map if present.
* @param key object to look up
* @return associated value or null if not found
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,computeIfAbsent,"com.google.common.cache.LocalCache:computeIfAbsent(java.lang.Object,java.util.function.Function)",4235,4240,"/**
* Computes and returns the value associated with the given key if not already cached.
* @param key unique cache key
* @param function function to compute new value if absent
* @return computed value or cached result if present
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,computeIfPresent,"com.google.common.cache.LocalCache:computeIfPresent(java.lang.Object,java.util.function.BiFunction)",4242,4248,"/**
* Computes a new value if the specified key is present.
* @param key unique identifier for the computation
* @param function BiFunction to apply to the existing and new values
* @return computed V object or null if not found
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,merge,"com.google.common.cache.LocalCache:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)",4250,4258,"/**
* Merges new value into existing one using provided function.
* @param key unique identifier
* @param newValue new value to merge
* @param function function to apply during merge
* @return merged value or null if old value is null
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache$Segment:get(java.lang.Object,int,com.google.common.cache.CacheLoader)",2045,2081,"/**
* Retrieves cached value for the given key, or loads a new one using the provided CacheLoader.
* @param key unique cache key
* @param hash hash code of the key
* @param loader CacheLoader instance to use when loading values
* @return cached value or loaded value if not found
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,advance,com.google.common.cache.LocalCache$HashIterator:advance(),4371,4392,"/**
* Advances to the next segment in the chain, updating table and index state.
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,copyOf,com.google.common.collect.ImmutableTable:copyOf(com.google.common.collect.Table),125,134,"/**
* Creates a new immutable table from an existing Table instance.
* @param table the original table to copy
*/","* Returns an immutable copy of the provided table.
   *
   * <p>The {@link Table#cellSet()} iteration order of the provided table determines the iteration
   * ordering of all views in the returned table. Note that some views of the original table and the
   * copied table may have different iteration orders. For more control over the ordering, create a
   * {@link Builder} and call {@link Builder#orderRowsBy}, {@link Builder#orderColumnsBy}, and
   * {@link Builder#putAll}
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.",,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toTable,com.google.common.collect.TableCollectors$ImmutableTableCollectorState:toTable(),166,168,"/**
 * Converts the immutable table to a standard table representation.
 * @return an ImmutableTable instance
 */",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,toImmutableTable,"com.google.common.collect.ImmutableTable:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function)",68,74,"/**
* Converts a collection of objects to an immutable table.
* @param rowFunction function to extract row key
* @param columnFunction function to extract column key
* @param valueFunction function to extract table value
* @return ImmutableTable instance or null if empty input
*/","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each
   * input element is mapped to one cell in the returned table, with the rows, columns, and values
   * generated by applying the specified functions.
   *
   * <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time
   * if the row, column, or value functions return null on any input.
   *
   * @since 21.0",,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getArraySubtype,com.google.common.reflect.TypeToken:getArraySubtype(java.lang.Class),1251,1266,"/**
* Retrieves the subtype of a given array class.
* @param subclass Class of an array type
* @return TypeToken representing the subtype of the input array class
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,contains,com.google.common.cache.LocalCache$EntrySet:contains(java.lang.Object),4635,4648,"/**
* Checks if the map contains a specific entry.
* @param o the Entry object to search for
* @return true if the entry exists, false otherwise
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getOrDefault,"com.google.common.cache.LocalCache:getOrDefault(java.lang.Object,java.lang.Object)",4001,4005,"/**
* Returns value associated with the given key or a default value if not found.
* @param key object to retrieve value for
* @param defaultValue value to return if key is null or not present
* @return V object or defaultValue if key is null or not found
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAllPresent,com.google.common.cache.LocalCache:getAllPresent(java.lang.Iterable),4011,4031,"/**
* Fetches and caches values for the given keys, returning a map of present key-value pairs.
* @param keys iterable of unique query keys
* @return ImmutableMap of cached key-value pairs or empty map if none found
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeIf,com.google.common.cache.LocalCache:removeIf(java.util.function.BiPredicate),4554,4569,"/**
* Removes entries from the map that match a given filter predicate.
* @param filter BiPredicate to test each key-value pair
* @return true if any entries were removed, false otherwise
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getIfPresent,com.google.common.cache.LocalCache$LocalManualCache:getIfPresent(java.lang.Object),4848,4851,"/**
* Retrieves value from cache if present.
* @param key Object to look up in cache
* @return Value associated with key or null if not found
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache:get(java.lang.Object,com.google.common.cache.CacheLoader)",3984,3988,"/**
* Retrieves cached value associated with the given key.
* @param key unique cache identifier
* @param loader CacheLoader to use if value is not found
* @return V cached object or throws ExecutionException if loading fails
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nextEntry,com.google.common.cache.LocalCache$HashIterator:nextEntry(),4444,4451,"/**
* Returns the next external entry, advancing the iterator and updating the last returned value.
* @throws NoSuchElementException if no more entries are available
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAllPresent,com.google.common.cache.LocalCache$LocalManualCache:getAllPresent(java.lang.Iterable),4866,4869,"/**
* Retrieves values from cache using given keys.
* @param keys Iterable of unique keys to fetch
* @return Immutable map of key-value pairs or empty map if none found
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeIf,com.google.common.cache.LocalCache$EntrySet:removeIf(java.util.function.Predicate),4629,4633,"/**
* Removes entries from the cache that match the specified predicate.
* @param filter a function to test each entry
* @return true if any entries were removed, false otherwise
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeIf,com.google.common.cache.LocalCache$Values:removeIf(java.util.function.Predicate),4610,4614,"/**
* Removes entries from this cache if they match a given predicate.
* @param filter predicate to test cache values against
* @return true if any entries were removed, false otherwise
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache$LocalManualCache:get(java.lang.Object,java.util.concurrent.Callable)",4853,4864,"/**
* Retrieves a cached or loaded value for the specified key using the provided callable.
* @param key unique identifier for the value to retrieve
* @param valueLoader callback to load the value if it's not cached
* @return V object, or throws ExecutionException if loading fails.",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getOrLoad,com.google.common.cache.LocalCache:getOrLoad(java.lang.Object),4007,4009,"/**
* Retrieves value associated with given key; if not present, loads it using default loader.
* @param key unique identifier
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAll,com.google.common.cache.LocalCache:getAll(java.lang.Iterable),4033,4076,"/**
* Retrieves multiple values from cache by keys.
* @param keys iterable of unique keys
* @return ImmutableMap with fetched values or null for missing keys
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,com.google.common.cache.LocalCache$LocalLoadingCache:get(java.lang.Object),4945,4948,"/**
* Retrieves cached value by key; loads from external source if not found in cache.
* @param key unique identifier of value to retrieve
* @return cached or loaded value, or throws ExecutionException if loading fails.",,,,True,21
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAll,com.google.common.cache.LocalCache$LocalLoadingCache:getAll(java.lang.Iterable),4960,4963,"/**
* Retrieves all cached values associated with the given keys.
* @param keys iterable of unique cache key identifiers
*/",,,,True,21
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getUnchecked,com.google.common.cache.LocalCache$LocalLoadingCache:getUnchecked(java.lang.Object),4950,4958,"/**
* Retrieves the value associated with the given key, suppressing any exceptions.
* @param key unique map key
* @return Value object or null if not found
*/",,,,True,22
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,apply,com.google.common.cache.LocalCache$LocalLoadingCache:apply(java.lang.Object),4970,4973,"/**
* Applies a transformation to a value based on a key.
* @param key unique identifier
* @return transformed value or null if not found
*/",,,,True,23
