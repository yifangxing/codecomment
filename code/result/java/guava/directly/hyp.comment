1 Specifies a custom comparator for ordering rows. @param rowComparator Comparator to sort rows by
2 Orders table columns using a custom comparator. @param columnComparator comparison function for columns
3 Merges sorted iterables into a single iterable. @param iterables list of iterables to merge @param comparator comparison function for elements @return merged iterable or empty if input is empty
4 Finds the index of the first element matching a predicate in an iterator. @param iterator iterator to search @param predicate condition to match @return index of the first matching element or -1 if not found
5 Creates a multimap builder with tree set values. @param comparator value comparator for sorting
6 Configures enum values for the multimap. @param valueClass Class of the enums to use
7 Computes the union of two sets, returning a new SetView containing all unique elements. @param set1 first set @param set2 second set @return SetView representing the union of both sets
8 Computes the intersection of two sets, returning a new SetView containing only elements present in both. @param set1 first set to intersect @param set2 second set to intersect
9 Computes the difference between two sets, returning a new set view containing only elements in 'set1' but not in 'set2'. @param set1 primary set @param set2 secondary set
10 Computes the symmetric difference of two sets. @param set1 first set @param set2 second set @return SetView containing elements in either set but not both
11 Searches for a boolean array within another. @param array the search space @param target the target array to find @return index of first match, or -1 if not found
12 Searches the specified array for the first occurrence of the target byte sequence. @param array the byte array to search @param target the target byte sequence to find @return index of the first matching sequence, or -1 if not found
13 Searches array for first occurrence of target substring. @param array input character array @param target substring to search for @return index of target in array, or -1 if not found
14 Finds the index of the first occurrence of a double array within another. @param array The array to search in @param target The array to search for @return Index of first match or -1 if not found
15 Searches for the first occurrence of a float array within another. @param array search space @param target array to find @return index of found array or -1 if not found
16 Searches for the first occurrence of a target array within an array. @param array the search array @param target the array to find (must be non-empty) @return index of target if found, -1 otherwise
17 Searches for a sub-array within the given array. @param array the main array to search @param target the sub-array to find @return index of the first occurrence, or -1 if not found
18 Searches array for the first occurrence of target. @param array the array to search @param target the short[] to find @return index of first match or -1 if not found
19 Creates a Guard object that satisfies the given BooleanSupplier. @param isSatisfied supplier of boolean value to be guarded
20 Returns a default value for the specified primitive type. @param type Class of the desired primitive type
21 Returns a Joiner that uses the provided text for null values. @param nullText text to display for null parts
22 Initializes the class name with a non-null value.
23 Extracts non-empty instances from iterable of optionals. @param optionals iterable of potentially empty Optional objects @return Iterable of non-null, non-empty values or empty if none found
24 Splits the given character sequence into an iterable of substrings. @param sequence input string to split
25 Pads the start of a given string to a specified minimum length using a character. @param string input string @param minLength target length @param padChar padding character @return padded string or original if already long enough
26 Pads the input string to a minimum length by appending a specified character. @param string input string @param minLength target length @param padChar character to append for padding
27 Throws the given exception if it's an instance of the specified type. @param throwable the exception to check @param declaredType the expected type of the exception @throws X the checked exception if it matches the declared type
28 Throws unchecked exceptions as runtime or error. @param throwable the checked exception to re-throw
29 Retrieves the causal chain of a Throwable, detecting loops if present. @param throwable input exception to traverse @return unmodifiable list of Throwables in the causal chain or an empty list if null
30 Returns a CacheLoader that asynchronously reloads cache entries using the provided executor. @param loader original cache loader to use for reloading @param executor executor service to run reload tasks on
31 Wraps a removal listener in an asynchronous execution context. @param listener original removal listener @param executor executor to execute the listener asynchronously @return Asynchronous RemovalListener instance
32 Retrieves the column data for a given key. @param columnKey unique column identifier @return Map of row keys to values or an empty map if not found
33 Fetches row data by key. @param rowKey unique row identifier @return Map of column values or empty map if not found
34 Maps each element of the input spliterator to a new type using the provided function. @param fromSpliterator source spliterator @param function mapping function
35 Filters a spliterator using the provided predicate. @param fromSpliterator input spliterator to filter @param predicate condition to apply to elements @return filtered spliterator or null if empty
36 Checks if a collection safely contains an object without throwing exceptions. @param collection the collection to search @param object the object to search for @return true if found, false otherwise or on exception
37 Attempts to safely remove an object from a collection. @param collection the collection to remove from @param object the object to remove, or null if not present @return true if removal was successful, false otherwise
38 Checks if the elements in an iterable are in ascending order according to a comparator. @param iterable Iterable container of elements @param comparator Comparator function to determine order @return True if elements are in order, false otherwise
39 Checks if elements in an iterable are strictly ordered by a comparator. @param iterable input iterable @param comparator comparison function @return true if iterable is strictly ordered, false otherwise
40 Compares Optional values with a custom comparator, prioritizing empties first. @param valueComparator compares the wrapped value inside each Optional @return Comparator for Optional objects, favoring empty over non-empty
41 Compares Optional values by their contained elements, with empty Options last. @param valueComparator comparator for the contained value
42 Returns a contiguous set of elements in this set strictly less than the given element. @param toElement element not included in returned set @param inclusive whether to include the toElement in the result
43 Returns a contiguous set containing all elements greater than or equal to the given fromElement. @param fromElement element that defines the lower bound @param inclusive whether to include the fromElement in the result
44 Adds an element to the collection, potentially removing the oldest one if at max size. @param e element to add
45 Wraps an existing Iterable in a FluentIterable, with input validation. @param iterable the Iterable to wrap, must not be null
46 Adds an element to the collection. @param element object to be added @return updated builder instance
47 Orders keys by using the provided comparator. @param keyComparator a comparator for ordering keys
48 Configures builder to order values by specified comparator. @param valueComparator comparator for ordering values
49 Adds an element to the collection and returns this builder instance. @param element the element to be added (must not be null)
50 Adds specified copies of an element to the builder's contents. @param element element to be copied @param occurrences number of times to copy the element
51 Sets the count of an element in the builder's collection. @param element the element to update count for @param count new count value
52 Converts a collection to an immutable sorted multiset. @param comparator comparator for sorting elements @param elementFunction maps input elements to multiset keys @param countFunction extracts counts from input elements @return ImmutableSortedMultiset object or null if empty
53 Returns a sorted set of elements that are strictly less than (or equal to, if inclusive) the given element. @param toElement element up to which the set is returned @param inclusive true if the element itself should be included in the result @return ImmutableSortedSet containing elements less than or equal to the given element
54 Returns a view of the sorted set containing all elements starting from {@code fromElement}. If {@code inclusive} is true, includes {@code fromElement}; otherwise excludes it.
55 Returns an unmodifiable view of the given iterable. @param iterable input iterable to protect from modification
56 Returns an unmodifiable view of the given immutable collection. @param iterable immutable collection to wrap
57 Removes and returns the first item from a collection that matches a predicate. @param removeFrom collection to search @param predicate condition for matching items @return matched item or null if not found
58 Creates an Iterable that cycles through the elements of the input iterable indefinitely. @param iterable input iterable to cycle through
59 Filters an iterable of elements based on a predicate. @param unfiltered input iterable to filter @param retainIfTrue predicate to apply for filtering @return filtered iterable or null if empty
60 Transforms an iterable of objects by applying a given function. @param fromIterable input iterable to transform @param function mapping function to apply to each element @return new iterable with transformed elements
61 Converts an Iterable to a consuming Iterable, where elements are processed as soon as retrieved. @param iterable input Iterable (not null)
62 Returns an unmodifiable iterator over the given iterable. @param iterator input iterator to wrap
63 Wraps an existing iterator in an unmodifiable interface. @param iterator underlying iterator (must not be null)
64 Removes all specified elements from the iterator. @param removeFrom iterator to remove elements from @param elementsToRemove collection of elements to remove @return true if any elements were removed, false otherwise
65 Removes elements from the iterator that match the given predicate. @param removeFrom iterator to remove elements from @param predicate condition for removal @return true if any elements were removed, false otherwise
66 Removes elements from the iterator that are not present in the given collection. @param removeFrom iterator to modify @param elementsToRetain collection of elements to keep @return true if any elements were removed, false otherwise
67 Adds all elements from the given iterator to the specified collection. @param addTo Collection to add elements to @param iterator Iterator of elements to add @return true if the collection was modified, false otherwise
68 Creates an Iterator that cycles through the given Iterable, reusing iterators to avoid ConcurrentModificationExceptions. @param iterable input collection to cycle through @return Iterator over cycled collection
69 Filters an iterator, retaining elements that match a predicate. @param unfiltered input iterator to filter @param retainIfTrue predicate to apply to each element @return filtered iterator or null if no matches found
70 Checks if all elements in the iterator satisfy a given predicate. @param iterator iterable collection of objects @param predicate condition to evaluate each object against @return true if all elements match, false otherwise
71 Finds the first object in an iterator that satisfies a given predicate. @param iterator non-null iterator of type T @param predicate non-null function to evaluate each element @return first matching object or throws NoSuchElementException if none found
72 Creates an iterator that applies a given transformation function to each element. @param fromIterator source iterator @param function transformation function @return transformed iterator or null if input is null
73 Returns an unmodifiable iterator that consumes and removes elements from the input iterator. @param iterator the input iterator to consume from
74 Removes all elements from the specified iterator. @param iterator iterator to clear
75 Converts an Enumeration to an unmodifiable iterator. @param enumeration Enumeration object to convert
76 Wraps a given iterator, returning it as-is. @param iterator the iterator to wrap (must not be null)
77 Creates an empty EnumMap with the specified enum type. @param type the enum class for this map
78 Creates an unmodifiable Entry instance from a given Entry. @param entry the original Entry to wrap
79 Transforms an existing map entry by applying a custom transformation. @param transformer function to transform key-value pair @param entry original Entry object @return transformed Entry with new key and value type
80 Converts an Entry to another using a provided transformer. @param transformer transformation function @return Function that transforms entries
81 Safely retrieves a value from a map by key. @param map the map to search @param key the key to look up @return the associated value or null if not found or invalid
82 Checks if a map contains a given key without throwing exceptions. @param map the input map @param key the key to search for @return true if key is present, false otherwise or on error
83 Safely removes a value from the map by key. @param map the map to remove from @param key the key to remove @return the removed value or null if not found or an error occurred
84 Performs a side-effecting operation on each map entry. @param action BiConsumer to process each key-value pair
85 Creates a tree-based multimap builder with keys of type K0. @param comparator key comparison function
86 Creates a MultimapBuilderWithKeys instance for the given enum class. @param keyClass enum class to use as keys @return MultimapBuilderWithKeys instance
87 Wraps an immutable multimap as an unmodifiable view. @param delegate ImmutableMultimap instance to wrap
88 Returns an unmodifiable view of the given set multimap. @param delegate underlying immutable set multimap
89 Returns an unmodifiable view of the given list multimap. @param delegate the list multimap to be wrapped
90 Iterates over each entry in the collection, applying the given consumer to each element and count. @param action consumer function to be applied to each entry
91 Applies a consumer to each element in the collection, repeating it the specified count. @param action Consumer to apply to each element
92 Returns an unmodifiable view of the given immutable multiset. @param multiset immutable multiset to wrap
93 Merges two multisets into a new multiset containing all elements from both. @param multiset1 first multiset @param multiset2 second multiset
94 Computes the intersection of two Multisets. @param multiset1 first Multiset @param multiset2 second Multiset @return new Multiset containing elements present in both input sets
95 Sums two multiset instances. @param multiset1 first multiset to sum @param multiset2 second multiset to sum @return new Multiset containing the combined elements and counts
96 Computes the difference between two multisets. @param multiset1 first multiset @param multiset2 second multiset (elements in this set are subtracted from multiset1) @return new Multiset representing elements present in multiset1 but not in multiset2
97 Checks if a multiset contains all occurrences of another multiset. @param superMultiset the superset to search in @param subMultiset the subset to find occurrences of @return true if the subset is contained, false otherwise
98 Retains occurrences of elements in one multiset based on their counts in another. @param multisetToModify the multiset to modify @param occurrencesToRetain the multiset specifying desired occurrence counts @return true if modifications were made, false otherwise
99 Removes specified occurrences from a Multiset. @param multisetToModify the Multiset to modify @param occurrencesToRemove the occurrences to remove @return true if any elements were removed, false otherwise
100 Removes excess elements from the multiset, keeping only those present in the specified collection. @param elementsToRetain Collection of elements to retain
101 Wraps an existing Ordering instance, ensuring it's not null. @param ordering the Ordering instance to wrap
102 Drains a specified number of elements from the blocking queue into the provided collection. @param q the blocking queue to drain from @param buffer the collection to add drained elements to @param numElements the maximum number of elements to drain @param timeout the time to wait for elements, in the given unit @return the number of elements successfully added to the buffer
103 Drains a specified number of elements from the blocking queue into the provided buffer. @param q BlockingQueue to drain from @param buffer Collection to store drained elements @param numElements Number of elements to drain @param timeout Timeout duration in specified unit @param unit Time unit for timeout @return Number of elements successfully added to the buffer
104 Checks if a given value falls within the bounds. @param value value to search for
105 Creates a new TreeSet instance with the specified comparator. @param comparator comparison function for ordering elements
106 Combines two streams into one, applying a function to each pair of elements. @param streamA first input stream @param streamB second input stream @param function BiFunction to apply to each pair of elements @return Stream of combined results or null if either input stream is empty
107 Maps a stream of elements to a new stream with index-based transformation. @param stream input stream of elements @param function mapping function that takes element and index as parameters @return mapped stream of transformed elements
108 Maps IntStream to a stream of objects using the provided function with index. @param stream IntStream to process @param function IntFunctionWithIndex to apply to each element @return Stream of mapped objects or null if not found
109 Maps a LongStream to a Stream of arbitrary objects using a function that takes an index. @param stream input LongStream @param function mapping function with index as second parameter @return Stream of mapped values or null if not found
110 Maps DoubleStream to a stream of arbitrary objects with an index. @param stream input double stream @param function mapping function that takes a double and index @return Stream of mapped objects
111 Merges a range of entries into the existing map. @param range the merge range @param value the unmapped value to fill gaps in the merge range @param remappingFunction function to remap existing values in the merge range
112 Creates a TreeTraverser using the provided function to fetch children from each node. @param nodeToChildrenFunction function that returns children of a given node
113 Performs a pre-order traversal of the tree rooted at the given node. @param root the root node of the tree @return an iterable containing the nodes in pre-order
114 Performs a post-order traversal of the tree rooted at the given node. @param root The root node of the tree to traverse
115 Performs a breadth-first traversal of the tree rooted at the specified node. @param root the root node of the tree to traverse
116 Adds custom escape character and replacement string. @param c the character to be escaped @param r the replacement string
117 Adds a character to be escaped with its replacement string. @param c character to escape @param replacement string to use as replacement for the character
118 Fetches Unicode code point at specified index within the given CharSequence. @param seq input sequence to process @param index current position to evaluate @param end end of valid sequence indices @return Unicode code point value or throws exception if invalid
119 Initializes a DeadEvent object with source and event. @param source the source of the event @param event the event occurrence
120 Handles subscriber exceptions by invoking the configured handler and logging any subsequent errors. @param e the original exception @param context SubscriberExceptionContext containing relevant information
121 Invokes subscriber method with given event. @param event event object to pass to the method
122 Creates a SubscriberExceptionContext instance with the given event bus, event, subscriber, and subscriber method. @param eventBus EventBus instance @param event event object @param subscriber subscriber object @param subscriberMethod subscriber's method that threw an exception
123 Creates an immutable graph copy from the provided graph. @param graph input graph to copy, must not be null
124 Copies an immutable network object. @param network the original network to copy (must not be null)
125 Creates a deep copy of the given immutable value graph. @param graph the graph to copy (must not be null)
126 Visits and returns next node in the traversal, advancing all iterators in the horizon.
127 Initializes a new instance of HashingInputStream with the specified hash function and input stream. @param hashFunction hashing algorithm to be applied @param in underlying input stream
128 Initializes an AppendableWriter instance with a specified target. @param target the Appendable to write to; must not be null
129 Creates a byte sink that wraps the provided character sink for encoding. @param encodedSink character sink to be encoded into bytes
130 Creates a ByteSource instance from a CharSource, applying decoding. @param encodedSource source with encoded data
131 Constructs a Reader instance from a CharSequence. @param seq input sequence to read from (must not be null)
132 Copies character data from a Reader to a StringBuilder. @param from Reader source @param to StringBuilder destination @return number of characters copied
133 Copies readable content from one reader to another writer. @param from input Reader object @param to output Writer object @return total characters copied or -1 if an error occurs
134 Skips fully over the specified number of characters in the given reader. @param reader input stream @param n number of characters to skip @throws IOException if an I/O error occurs or end of file is reached
135 Initializes a new instance of CountingInputStream with the specified input stream. @param in the input stream to be wrapped
136 Initializes CountingOutputStream with specified OutputStream. @param out target OutputStream to wrap
137 Creates a buffered reader from a file with specified character set. @param file the input file @param charset the character encoding to use @return BufferedReader instance or throws FileNotFoundException if invalid
138 Creates a buffered writer to write to a specified file with a given character set. @param file the target file @param charset the encoding scheme for writing
139 Updates the creation and last modified times of a given file. @param file target file
140 Creates parent directories for the given file, if necessary. @param file file whose parents are potentially created
141 Extracts file extension from full name. @param fullName complete file path @return file extension or empty string if none found
142 Extracts the filename without extension. @param file full path to a file
143 Initializes a new LittleEndianDataInputStream from an input stream. @param in input stream to wrap
144 Constructs a LittleEndianDataOutputStream instance wrapping the given OutputStream. @param out the output stream to write data to
145 Updates file timestamp and creates a new file if it does not exist. @param path file path to update or create
146 Initializes PatternFilenameFilter with a specified file name pattern. @param pattern regular expression to match against file names
147 Checks if BigInteger is a power of two (2^n). @param x input number to verify
148 Iterates over an array and applies a DoubleConsumer to each element. @param consumer callback function to process each double value
149 Iterates over an array range and applies a consumer function to each element. @param consumer IntConsumer function to be executed on each array element
150 Iterates over an array and applies the given LongConsumer to each element. @param consumer callback function to process each array element
151 Checks if given class type is a primitive wrapper (e.g. Integer, Double). @param type Class to check
152 Wraps a primitive class with its corresponding wrapper class. @param type the primitive class to wrap @return the wrapped class or the original if not found
153 Unwraps a wrapper class to its primitive equivalent. @param type the wrapper class to unwrap @return the unwrapped primitive class or the original if not found
154 Parses unsigned byte value from string using specified radix. @param string input string @param radix base to interpret the string in @return parsed unsigned byte value or throws NumberFormatException if out of range
155 Parses a string representation of an unsigned int into a value. @param string input string @param radix input radix @return parsed unsigned int value or throws NFE if invalid
156 Constructs a new schedule with specified delay and time unit. @param delay duration of the delay @param unit time unit for the delay (e.g. second, minute, hour)
157 Updates and returns the new value of a mapped key using the provided function. @param key unique key identifier @param updaterFunction LongUnaryOperator to apply on existing or new value @return updated long value or null if computation fails
158 Updates and returns the mapped value using the provided function. @param key unique map key @param updaterFunction function to apply to the current value @return new mapped value or 0L if not present
159 Converts a synchronous Callable to an asynchronous AsyncCallable. @param callable synchronous task to execute asynchronously @param executorService service for executing tasks in parallel @return AsyncCallable representing the asynchronous task
160 Renames the current thread and executes a Callable. @param callable function to execute @param nameSupplier supplier of new thread name @return result of callable or null if not found
161 Renames the current thread and executes a Runnable task. @param task Runnable to be executed @param nameSupplier Supplier of new thread name
162 Wraps an asynchronous function with a default closing behavior. @param function asynchronous operation to be executed @return AsyncClosingFunction instance with default closer
163 Wraps a given FluentFuture in a checked null reference. @param future the input FluentFuture
164 Returns a Future representing the result of applying a transformation to a given input. @param input Future containing input data @param function Function to apply to the input data @return Future containing transformed output data
165 Creates a decorator that renames threads executed by the given executor. @param executor Executor instance to decorate @param nameSupplier Function providing thread names @return RenamedExecutor instance
166 Creates a decorator for the given ExecutorService that renames threads. @param service target executor service @param nameSupplier function to generate thread names
167 Wraps a ScheduledExecutorService with thread renaming functionality. @param service executor service to decorate @param nameSupplier supplier of thread names
168 Initializes the executor with a given instance. @param executor Executor to be used for execution
169 Executes the given task, potentially queuing it if the worker is already running. @param task the Runnable to execute
170 Sets an uncaught exception handler for the thread factory. @param uncaughtExceptionHandler handler to catch and handle exceptions
171 Sets the thread factory to use. @param backingThreadFactory thread factory instance, must not be null @return this builder for fluent API usage
172 Waits for the specified thread to join, with a timeout. @param toJoin target thread @param timeout maximum time to wait @param unit time unit for timeout
173 Sets the Ticker to be used for cache expiration. @param ticker Ticker instance to use
174 Sets removal listener for cache events. @param listener event handler
175 Calculates the arithmetic mean of this collection. @return the calculated mean or Double.NaN if count is zero
176 Returns the minimum value from the collection. @return Minimum value or NaN if collection is empty
177 Returns the maximum value from the collection. @return The maximum value or throws an exception if count is zero
178 Calculates and returns the arithmetic mean of the dataset. @return The calculated mean value or Double.NaN if count is zero
179 Returns the minimum value from the collection. @return The smallest value or NaN if empty
180 Returns the maximum value in the collection. @return The maximum value or throws an exception if count is zero.
181 Initializes a latch to decrement when this object is closed.
182 Converts the first encountered uppercase character in a string to lowercase. @param string input string @return modified string with first uppercase char converted or original if no uppercase found
183 Converts a character to lowercase using XOR operation. @param c input character
184 Converts the first occurrence of a lowercase letter to uppercase in each word. @param string input string @return modified string or original if no lowercase letters found
185 Converts a character to uppercase. @param c input character
186 Truncates a CharSequence to the specified maxLength and appends a truncation indicator. @param seq sequence to truncate @param maxLength maximum length of the resulting string @param truncationIndicator string appended after truncating
187 Writes statistics data to a ByteBuffer. @param buffer output buffer with at least BYTES remaining space
188 Constricts a short value to the specified range [min, max]. @param value value to constrain @param min minimum allowed value (inclusive) @param max maximum allowed value (inclusive) @return constrained short value within the specified range
189 Sets the thread creation priority. @param priority thread priority value (MIN_PRIORITY to MAX_PRIORITY)
190 Compares two CharSequence objects for equality, ignoring case and null values. @param s1 first CharSequence to compare @param s2 second CharSequence to compare @return true if equal, false otherwise
191 Constructs CacheStats object from hit/miss/load counts and time. @param hitCount number of cache hits @param missCount number of cache misses @param loadSuccessCount number of successful loads @param loadExceptionCount number of failed loads @param totalLoadTime cumulative load time in milliseconds @param evictionCount number of evictions
192 Constructs an empty multimap from a given map. @param map map with empty collections as values
193 Sets the map of key-value pairs and initializes total size. @param map collection of key-value pairs
194 Initializes an empty multiset from a backing map. @param backingMap empty map representing the multiset's data structure
195 Returns a contiguous subset of this set, bounded by the given elements. @param fromElement lower bound (inclusive or exclusive) @param fromInclusive whether lower bound is inclusive @param toElement upper bound (inclusive or exclusive) @param toInclusive whether upper bound is inclusive
196 Initializes a multiset for the given enum class. @param type Enum class to manage
197 Returns a subset of this sorted set from {@code fromElement} (inclusive) to {@code toElement} (inclusive). @param fromElement the lower bound element @param fromInclusive whether the lower bound is inclusive @param toElement the upper bound element @param toInclusive whether the upper bound is inclusive @return a ImmutableSortedSet containing elements in the specified range or an empty set if no elements are found
198 Partitions an iterable into sub-lists of a specified size. @param iterable input iterable to partition @param size maximum number of elements in each sub-list @return Iterable of List<T> containing sub-partitioned lists or null if iterable is empty
199 Partitions the input iterable into lists of specified size, padding with nulls if necessary. @param iterable input sequence to partition @param size desired list size @return Iterable of partitioned lists or empty list if input is empty
200 Sets the expected size of the builder's output. @param expectedSize non-negative integer representing the expected size
201 Sets the maximum size of the buffer. @param maximumSize non-negative integer value
202 Initializes AbstractStreamingHasher with specified chunk size and buffer size. @param chunkSize size of each hash chunk @param bufferSize total buffer size (must be multiple of chunkSize)
203 Ensures a given double value is non-negative. @param value input value to validate and potentially adjust
204 Returns a CharMatcher that matches the specified character. @param match the target character to be matched
205 Creates a CharMatcher that matches any character except the specified one. @param match the single character to exclude
206 Collapses a CharSequence by replacing matching characters with a specified replacement character. @param sequence input CharSequence to collapse @param replacement target character to replace matches with @return collapsed string or original if no replacements were made
207 Initializes the Converter instance with default configuration.
208 Compares current object with another for equality. @param obj Object to compare with @return true if objects are equal, false otherwise
209 Delegates to equivalent() for comparing two objects. @param t first object to compare @param u second object to compare
210 Removes a weak value reference from the map's internal chain. @param key key to search for @param hash hash code of the key @param valueReference value reference to remove @return true if removed, false otherwise
211 Removes a WeakValueReference for testing purposes. @param key the key to match @param hash the hash value of the reference @param valueReference the reference to remove, or null if not found @return true if removed, false otherwise
212 Checks if two iterators have equal elements. @param iterator1 first iterator @param iterator2 second iterator @return true if both iterators are exhausted or contain equal elements, false otherwise
213 Compares two objects for equality. @param object the object to compare with @return true if both objects are Multiset.Entry instances with matching counts and elements, false otherwise
214 Determines if traversing from one node to another without reusing an edge is possible. @param graph the graph to check @param nextNode the next node in the traversal @param previousNode the previous node in the traversal (may be null) @return true if traversal can occur without edge reuse, false otherwise
215 Computes hash code based on reference object's hash. @return Hash code value
216 Constructs a finalizable phantom reference with the given referent and queue. @param referent object being referenced (may be null) @param queue FinalizableReferenceQueue instance for cleanup
217 Creates a soft reference to the provided object, registering it with the given reference queue. @param referent object being referenced @param queue reference queue for cleanup and finalization
218 Creates a weak reference to the given object with cleanup. @param referent nullable object being referenced @param queue reference queue for cleanup and garbage collection
219 Returns a function that always returns the given constant value. @param value the constant value to be returned by the function
220 Extracts host and port from a bracketed host-port string. @param hostPortString input string in the format [host]:port @return array of host and port strings or null if invalid
221 Requires brackets around IPv6 literals if not already present. @return This object (for method chaining)
222 Decrement an InetAddress by one byte. @param address the InetAddress to decrement @return new InetAddress with decremented value or null if wraps
223 Increments the IP address by one. @param address InetAddress object to increment @return incremented InetAddress or null if would wrap
224 Creates a proxy instance for the given interface type, wrapping the provided InvocationHandler. @param interfaceType the interface to be proxied @param handler the invocation handler for the proxy @return a proxy object implementing the specified interface
225 Retrieves the captured type from a parameterized superclass. @return The first actual type argument of the superclass
226 Appends formatted parts to the specified Appendable. @param appendable target for appending @param parts iterator of individual parts @return the appended Appendable instance
227 Appends all entries from an iterable to a StringBuilder. @param builder StringBuilder instance to append to @param entries Iterable of entries to process
228 Concatenates iterator of entries into a comma-separated string. @param entries iterator of entries to concatenate
229 Specifies the character used to separate key-value pairs in the joined map. @param keyValueSeparator single character separator (e.g., ',')
230 Generates a string representation of the ValueHolder list.
231 Retrieves a value from the underlying map by key, returning an empty set if not found. @param key unique identifier @return ImmutableSet of values or empty set if key is missing
232 Retrieves the resource by name and checks for existence. @param resourceName unique resource identifier @return URL of the resource or throws exception if not found
233 Returns an empty Optional of type T. @return Empty Optional instance
234 Converts Google Optional to Java Util Optional. @param googleOptional Google Optional object or null @return Java Util Optional object or null if input is null
235 Converts null or empty strings to null.
236 Checks if the input string is empty or null. @param string input string to check
237 Skips a specified number of elements from the given iterable. @param iterable input iterable @param numberToSkip number of elements to skip @return an iterable with skipped elements removed
238 Limits the number of elements in an iterable to a specified size. @param iterable input collection @param limitSize maximum number of elements to include @return Iterable containing up to limitSize elements or empty if none exist
239 Advances the given iterator by a specified number of elements. @param iterator Iterator to advance @param numberToAdvance Nonnegative number of elements to skip @return Number of elements actually advanced (0 if not possible)
240 Limits an iterator to a specified size. @param iterator the original iterator @param limitSize maximum number of elements to yield @return Iterator yielding at most limitSize elements or null if iterator is empty
241 Creates a tree traverser for the given graph or network. @param tree SuccessorsFunction representing the tree structure @return Traverser object to traverse the tree
242 Calculates the next multiple of 32 from a given number of positive bits. @param bits positive number of bits
243 Converts a BigInteger to an InetAddress. @param address BigInteger representation of IP address @param isIpv6 true for IPv6, false for IPv4 @return InetAddress object or fails with UnknownHostException
244 Repeats a string by the specified count. @param string string to repeat @param count number of repetitions
245 Initializes BloomFilter with specified parameters. @param bits underlying LockFreeBitArray @param numHashFunctions number of hash functions to use @param funnel funnel function for data transformation @param strategy strategy for bit array updates
246 Combines multiple hash functions into a single concatenated function. @param hashFunctions iterable collection of HashFunction instances
247 Initializes the SipHash function with given parameters. @param c number of iterations for compression rounds @param d number of iterations for finalization rounds @param k0 first key value @param k1 second key value
248 Initializes a FileBackedOutputStream with specified file threshold and reset behavior. @param fileThreshold minimum size (in bytes) to switch from memory to disk storage @param resetOnFinalize whether to reset the output stream on finalize() call
249 Converts a 4-byte byte array to an Inet4Address object. @param bytes IPv4 address as a 4-element byte array @return Inet4Address object or null if invalid input
250 Ensures the capacity of a boolean array is at least minLength with added padding. @param array boolean array to ensure capacity for @param minLength minimum required length @param padding additional elements to append @return modified boolean array or original if already sufficient
251 Ensures the capacity of a byte array to be at least minLength with additional padding. @param array input byte array @param minLength minimum length required @param padding extra bytes to append @return expanded byte array or original if already sufficient
252 Ensures the given character array has a minimum length and optional padding. @param array input character array @param minLength minimum required length @param padding additional characters to append if necessary
253 Ensures the capacity of a double array meets or exceeds minimum length with added padding. @param array input array @param minLength minimum required length @param padding additional elements to add beyond minLength @return modified array if necessary, otherwise original array
254 Ensures the capacity of an array is at least minLength with added padding. @param array input float array @param minLength minimum length required @param padding additional elements to add @return expanded array or original if sufficient capacity already exists
255 Ensures the given array has a minimum length and returns it with added padding. @param array original array @param minLength minimum required length @param padding additional elements to append @return updated array or original if already sufficient length
256 Ensures the capacity of a long array meets specified minimum length and adds padding. @param array input array to resize @param minLength minimum required length @param padding additional space to add @return resized array with sufficient capacity or original array if already large enough
257 Ensures the given short array has sufficient capacity by copying to a new array with increased length. @param array original short array @param minLength minimum required length @param padding additional length to ensure capacity @return updated short array with ensured capacity or original array if sufficient
258 Safely casts long to char, enforcing in-range values. @param value the long value to cast
259 Safely casts long to int while checking for overflow. @param value input value to cast @return int representation or throws exception on overflow
260 Safely casts long to short, enforcing range validity. @param value input value to be cast
261 Safely casts long to byte while enforcing in-range values. @param value the value to cast
262 Safely casts a long to a byte, checking for out-of-range values. @param value the long value to cast
263 Safely casts a long to an integer, checking for out-of-range values. @param value the value to cast @return the casted int value or throws IllegalArgumentException for invalid input
264 Creates a scheduler that executes tasks with fixed delays. @param initialDelay initial time to wait before first execution @param delay subsequent execution interval @param unit time unit for delay (e.g. TimeUnit.SECONDS)
265 Creates a fixed-rate scheduling strategy with specified delay and interval. @param initialDelay initial delay before first execution @param period time between successive executions @param unit time unit for period (e.g. TimeUnit.SECONDS)
266 Constricts a character within the specified range [min, max]. @param value input character @param min minimum allowed value @param max maximum allowed value @return constrained character or original if already within range
267 Clamps a value within a specified range (inclusive). @param value the value to constrain @param min minimum allowed value @param max maximum allowed value @return constrained value or original if outside range
268 Fetches a resource by name relative to the given class. @param contextClass Class providing the resource context @param resourceName Resource identifier (e.g. "file.txt") @return URL of the resource or null if not found
269 Starts or resumes the stopwatch. @return This Stopwatch object for method chaining.
270 Stops the stopwatch and updates elapsed time. @return this Stopwatch object
271 Validates removal capability and throws IllegalStateException if not allowed. @param canRemove true if user is allowed to remove elements
272 Sets the comparator for ordering entries by value. @param valueComparator comparator to order entries by value
273 Sets the initial cache size. @param initialCapacity positive non-negative integer capacity
274 Sets the concurrency level for the cache. @param concurrencyLevel positive integer value
275 Sets the initial capacity for a MapMaker instance. @param initialCapacity non-negative integer value
276 Sets the concurrency level for the MapMaker instance. @param concurrencyLevel positive integer value controlling concurrent access
277 Sets the maximum cache size. @param maximumSize non-negative cache size limit
278 Sets the maximum weight for the cache. @param maximumWeight non-negative maximum weight
279 Sets a custom weighing strategy for the cache. @param weigher Weigher instance to use
280 Sets the time after which cache entries expire. @param duration positive duration value @param unit time unit (e.g. TimeUnit.SECONDS)
281 Sets cache expiration after access based on time duration. @param duration positive time span @param unit time unit (e.g. TimeUnit.SECONDS)
282 Configures cache to refresh after a write operation. @param duration time to wait before refreshing in specified unit @return CacheBuilder instance for chaining calls
283 Sets the equivalence function for cache key comparison. @param equivalence equivalence function
284 Sets the equivalence function for cache values. @param equivalence function to determine value equality
285 Sets custom key equivalence for the map. @param equivalence Equivalence strategy for keys
286 Initializes this TypeToken with its captured type. @throws IllegalStateException if capturing a type variable
287 Returns the failure cause of the service if it has failed; otherwise, throws an exception. @return The Throwable failure cause or null if not failed
288 Validates element index within specified bounds. @param index target index to check @param size collection size @return validated index if within bounds
289 Validates a position index within a given range. @param index the position to validate @param size the maximum valid position @return the validated index if within bounds
290 Returns a predicate that always evaluates to true.
291 Returns a predicate that always evaluates to false.
292 Returns a predicate that checks if an object is null.
293 Creates a predicate that checks for non-null values.
294 Combines two predicates into a single AND predicate. @param first the first predicate to evaluate @param second the second predicate to evaluate @return a new predicate that returns true only if both input predicates return true
295 Combines two predicates using logical OR operation. @param first first predicate @param second second predicate @return A new predicate that returns true if either of the input predicates return true
296 Creates a Splitter instance that omits empty strings from the split result.
297 Creates a new Splitter instance with the specified maximum item limit. @param maxItems maximum number of items to split
298 Converts a CharSequence into an unmodifiable list of strings. @param sequence input string to split
299 Returns a string representation of this configuration entry. @return formatted string in "key=value" format.
300 Converts time elapsed in nanoseconds to desired unit. @param desiredUnit target time unit (e.g. TimeUnit.SECONDS) @return time elapsed in the specified unit
301 Calculates elapsed duration in nanoseconds and converts to standard duration format.
302 Formats elapsed time in compact form with unit abbreviation. @return Elapsed time string (e.g., "1.23s") or null if invalid
303 Wraps platform-specific empty-string handling for nullable strings. @param string input string that may be null
304 Finds the common prefix between two character sequences. @param a first character sequence @param b second character sequence @return the common prefix as a String or an empty string if none found
305 Returns the common suffix of two CharSequences. @param a first CharSequence @return common suffix as String or empty string if no commonality
306 Creates a supplier that returns the provided instance. @param instance the object to be supplied
307 Default constructor for Ticker class.
308 Throws an exception if the given boolean expression is false. @param expression boolean condition to be verified
309 Verifies an expression and throws VerifyException with a formatted error message on failure. @param expression boolean condition to verify @param errorMessageTemplate template for the error message with single placeholder character p1 @param p1 placeholder character in the error message template
310 Verifies an expression and throws a VerifyException with formatted error message. @param expression boolean condition to verify @param errorMessageTemplate template for error message (with placeholder for p1) @param p1 first parameter for formatting the error message
311 Verifies an expression and throws VerifyException with formatted error message. @param expression boolean condition to evaluate @param errorMessageTemplate template for error message with placeholder (p1) @param p1 placeholder value in the error message template
312 Verifies a given boolean condition and throws VerifyException with formatted error message if false. @param expression condition to verify @param errorMessageTemplate template for error message @param errorMessageArgs arguments for error message formatting
313 Verifies a boolean expression and throws an exception with formatted error message if false. @param expression condition to verify @param errorMessageTemplate template for error message with placeholders p1 and p2
314 Throws a VerifyException if the given boolean expression is false. @param expression condition to verify @param errorMessageTemplate template for error message with parameters p1 and p2
315 Verifies a boolean expression and throws an exception with formatted error message if it's false. @param expression condition to verify @param errorMessageTemplate template for the error message @param p1 first parameter for formatting the error message @param p2 second parameter for formatting the error message
316 Verifies the given expression and throws a VerifyException with formatted error message otherwise. @param expression boolean condition to verify @param errorMessageTemplate template for error message with placeholders for p1 and p2 @param p1 first placeholder value (can be null) @param p2 second placeholder value
317 Throws VerifyException with formatted error message if given condition is false. @param expression boolean condition to verify @param errorMessageTemplate template for error message with placeholders (p1, p2) @param p1 char placeholder in error message template @param p2 int placeholder in error message template
318 Verifies a boolean expression; throws VerifyException with formatted message on failure. @param expression condition to verify @param errorMessageTemplate template for error message (with placeholders %p1 and %p2)
319 Verifies a boolean expression; throws VerifyException with formatted error message if false. @param expression condition to verify @param errorMessageTemplate template for error message (with placeholders for p1 and p2) @param p1 first parameter for error message template @param p2 second parameter for error message template
320 Verifies a condition and throws an exception with formatted error message if not met. @param expression boolean condition to verify @param errorMessageTemplate template for error message with placeholders for p1 and p2 @param p1 first parameter for error message formatting (may be null) @param p2 second parameter for error message formatting
321 Verifies a boolean expression; throws VerifyException if false. @param expression condition to verify @param errorMessageTemplate template for error message with params p1 and p2 @param p1 first parameter for error message template @param p2 second parameter for error message template
322 Verifies a boolean condition and throws an exception with formatted error message on failure. @param expression condition to verify @param errorMessageTemplate template for error message with placeholders %s and %d @param p1 first parameter for error message placeholder @param p2 second parameter for error message placeholder
323 Verifies a boolean condition; throws VerifyException with formatted error message if false. @param expression the condition to verify @param errorMessageTemplate template for error message; placeholders %p1 and %p2 will be replaced @param p1 first placeholder value (long) @param p2 second placeholder value (long)
324 Verifies a condition and throws an exception with formatted error message if not met. @param expression boolean condition to verify @param errorMessageTemplate template for the error message @param p1 first parameter for error message formatting @param p2 second parameter for error message formatting
325 Verifies an expression and throws a VerifyException with formatted error message if false. @param expression boolean condition to verify @param errorMessageTemplate template for error message with placeholders (p1, p2) @param p1 placeholder value in error message template @param p2 optional placeholder value in error message template
326 Verifies a condition and throws an exception with formatted error message. @param expression condition to verify @param errorMessageTemplate template for error message (with placeholders) @param p1 first placeholder value in error message template @param p2 second placeholder value in error message template (may be null)
327 Verifies a given expression and throws an exception with formatted error message if false. @param expression boolean condition to verify @param errorMessageTemplate template for error message with placeholders for p1 and p2 @param p1 first parameter for error message template @param p2 second parameter for error message template (may be null)
328 Verifies a given condition and throws an exception with formatted error message if false. @param expression boolean condition to verify @param errorMessageTemplate template string for error message with placeholders @param p1 first optional parameter for placeholder replacement in error message @param p2 second optional parameter for placeholder replacement in error message
329 Verifies a given expression; throws VerifyException with formatted error message if false. @param expression boolean condition to verify @param errorMessageTemplate template for error message (with placeholders) @param p1 p2 and p3 optional parameters for error message formatting
330 Verifies the given expression; throws VerifyException with formatted message if false. @param expression boolean condition to verify @param errorMessageTemplate error message template with placeholders for params @param p1 p2 p3 p4 optional parameters to be used in error message formatting
331 Cleans up references recursively using the provided finalize method. @param firstReference initial reference to process @return true if cleanup successful, false otherwise
332 Initializes a new instance of the SimpleStatsCounter.
333 Merges statistics from another StatsCounter instance. @param other the StatsCounter to merge with this one
334 Initializes an instance of AbstractLoadingCache with default settings. This constructor is intended to be used by subclasses only.
335 Creates a map that preserves insertion order on put operations.
336 Adds all key-value pairs from the given map to this map. @param m map containing entries to add
337 Invalidates all user profiles specified by the given iterable of unique identifiers. @param keys iterable of unique user profile IDs to be invalidated
338 Creates a new instance of CacheBuilder for cache configuration.
339 Throws exception for bulk loading, forcing fallback to individual retrievals. @throws UnsupportedLoadingOperation if all keys are loaded at once is unsupported
340 Calculates total hit count by adding hit and miss counts. @return Total hit count as a long value
341 Calculates total load count by adding success and exception counts. @return Total load count
342 Calculates the exception rate as a ratio of exceptions to total loads. @return Exception rate value between 0 and 1, or 0 if no loads occurred
343 Calculates the average load penalty in seconds. @return Average load penalty or 0.0 if no loads were processed
344 Initializes an empty forwarding cache instance.
345 Initializes an empty collection that forwards operations to another collection. @note This constructor is intended for use by subclasses only.
346 Initializes an empty iterator that forwards calls to another iterator.
347 Initializes an empty ForwardingMap instance. @see java.util.ForwardingMap
348 Creates an empty ForwardingMapEntry instance.
349 Creates an empty ForwardingMultimap instance. This constructor is intended to be used by subclasses. The map will be created with default settings.
350 Initializes an empty forwarding table.
351 Creates an empty executor service that forwards all calls to another executor service.
352 Initializes an empty ForwardingFuture instance. This constructor is intended to be used internally by other classes that need to create a ForwardingFuture object.
353 Removes and processes recency queue entries, re-adding them to access queue as needed. @GuardedBy("this") ensures thread safety.
354 Creates a copy of the given entry with updated next reference. @param original the entry to copy @param newNext the new next reference for the copied entry @return the copied entry or null if key or value is collected.
355 Removes entries from the column if they match the given predicate. @param predicate condition to filter entries @return true if any entries were removed, false otherwise
356 Initializes the futures list by registering listeners on each future. @param allMustSucceed whether to fail fast or wait for all inputs to complete
357 Wraps an executor to propagate rejection exceptions. @param delegate the underlying executor @param future the future associated with this execution
358 Retrieves a Future's result if it has completed. @param future non-null Future object @return the Future's value or throws IllegalStateException
359 Retrieves a Future's result without interrupting or throwing checked exceptions. @param future the Future object to retrieve from @return the Future's value or throws an exception if retrieval fails
360 Clears reference queues for key and value references. @implNote Called when map entries are removed or updated
361 Returns the default equivalence strategy. @return Equivalence instance defining equality rules.
362 Returns the default equivalence function to determine equality between objects. The returned function is used by the framework to compare objects of type Object.
363 Returns the default equivalence strategy used to compare objects. This strategy is used when no explicit equivalence strategy is specified.
364 Returns the default equivalence strategy for Equivalence objects. This implementation is used when no specific equivalence strategy is provided. @return Default equivalence strategy instance
365 Returns the default equivalence strategy for objects. @return The default equivalence instance.
366 Checks if a cache entry has expired based on access or write time. @param entry the cache entry to check @param now the current timestamp @return true if the entry is expired, false otherwise
367 Calculates the total size of all elements in the map. @return The total size or 0 if map is empty
368 Returns the total number of elements in the given iterator. @param iterator input iterator containing elements to count
369 Calculates the total size of a Multiset in linear time. @param multiset input collection @return non-negative integer size or -1 if overflow occurs
370 Performs saturated addition of two integers. @param a first integer @param b second integer @return result of the addition, or maximum/minumum integer value if overflow occurs
371 Performs saturated subtraction of two integers. @param a value to subtract from @param b value to subtract @return result of subtraction or maximum/minum integer value if overflow occurs
372 Performs safe multiplication of two integers. @param a first integer @param b second integer @return product as an int, potentially truncated to fit the result in a 32-bit signed int.
373 Creates a compact set preserving insertion order on additions.
374 Constructs an iterator instance with no initial state. Subclasses should override this constructor to initialize their internal state.
375 Initializes an iterator with an optional initial value. @param firstOrNull the initial value or null if empty
376 Constructs an empty, unmodifiable iterator.
377 Returns an unmodifiable collection containing no elements. @return Unmodifiable empty collection of type V.
378 Retrieves and removes the first entry from the map. @return Map.Entry object or null if map is empty
379 Retrieves and removes the first element from the iterator. @return the polled element or null if empty
380 Recursively refreshes the collection if empty, updating the delegate as needed. @throws ConcurrentModificationException if ancestor's delegate differs from this collection's
381 Retrieves a collection of values associated with the given key. @param key unique identifier for the collection
382 Delegates to superclass to retrieve collection of values.
383 Returns a list of values from the superclass.
384 Returns a collection of key-value pairs in this map. @return unmodifiable collection of entry objects or empty if none
385 Retrieves all key-value pairs in this map. @return list of entry objects or null if not found
386 Creates a StringBuilder with an initial capacity to hold up to the specified size of elements. @param size maximum number of collection elements
387 Creates a new ArrayList with the specified initial capacity. @param initialArraySize initial size of the ArrayList
388 Calculates the capacity based on expected size, using a heuristic for small sizes and ceiling of expected size divided by load factor otherwise. @param expectedSize anticipated collection size
389 Creates a list multimap builder with pre-allocated array lists for each key. @param expectedValuesPerKey the number of values to pre-allocate per key
390 Creates a multimap builder with hash set values. @param expectedValuesPerKey maximum number of values per key
391 Creates a SetMultimapBuilder with linked hash sets for values. @param expectedValuesPerKey minimum number of values per key
392 Creates a MultimapBuilder with an expected number of keys. @param expectedKeys the anticipated number of unique keys
393 Creates a multimap builder with linked hash keys and expected size. @param expectedKeys expected number of key-value pairs @return MultimapBuilderWithKeys instance
394 Updates the count of a specified element in a multiset. @param self Multiset instance @param element Element to update count for @param count New count value @return Previous count value
395 Updates user count in multiset. @param element user data @param oldCount current count @param newCount updated count @return true if update successful, false otherwise
396 Computes the hash code of this set using the provided implementation. @return The calculated hash code value.
397 Checks equality with another object using a set-based implementation. @param object the object to compare with
398 Returns hash code based on underlying map's hash code. @return hash code value
399 Returns a string representation of this object's properties.
400 Removes all specified elements from this multiset. @param elementsToRemove collection of elements to remove @return true if removal was successful, false otherwise
401 Checks equality with another object using MultiSets implementation. @param object object to compare with this instance
402 Compares this set to another object for equality. @param object object to compare with
403 Retrieves the first element from an iterable; returns default value if empty. @param iterable collection of elements @param defaultValue value to return when iterable is empty
404 Returns the underlying map representation of this collection. @return A read-only map view of this collection's elements.
405 Returns a navigable set view of keys. @return Set of unique keys in this map
406 Returns a natural-order comparator or the provided one. @param comparator optional custom comparator, uses natural order if null @return Comparator for ordering elements of type E
407 Returns a string representation of this object's data.
408 Returns a string representation of this object. @return A formatted string containing key-value pairs from the underlying map.
409 Serializes object to output stream using default serialization and multimap. @throws IOException if serialization fails
410 Writes object contents to output stream. @throws IOException if serialization fails
411 Writes object state to output stream using default serialization. @throws IOException if serialization fails
412 Populates a multimap from an ObjectInputStream. @param multimap the multimap to populate @param stream input stream containing key-value pairs
413 Returns a set of unique column keys. @return ImmutableSet of column keys or empty if none exist
414 Returns an immutable set of row keys. @return Set of row keys corresponding to all rows in this data structure.
415 Returns an immutable set of keys from this map.
416 Checks if the data model contains a specific column. @param columnKey unique key of the column to check (or null for no change)
417 Checks if a row exists by its key. @param rowKey unique identifier of the row to check for existence @return true if the row exists, false otherwise
418 Retrieves a list of values associated with the given key from the underlying map. @param key unique identifier @return ImmutableList of V objects or an empty list if not found
419 Retrieves a column map by key. @param columnKey unique column identifier @return ImmutableMap of column data or an empty map if not found
420 Adds a key-value pair to the builder's map. @param key unique key @param value associated value
421 Calculates the offset C from a given origin by traversing 'distance' steps. @param origin starting point @param distance number of steps to traverse @return next C object or null if overflow occurs
422 Maps elements to double Spliterators and combines them into a single Spliterator. @param fromSpliterator input element Spliterator @param function mapping function for each element @return combined double Spliterator or null if invalid characteristics
423 Flattens a stream into an Int stream using the provided mapping function. @param fromSpliterator input Spliterator @param function mapping function to apply to each element @return FlatMapSpliterator object
424 Flattens elements to longs using the provided mapper. @param fromSpliterator input spliterator @param function mapping function @return Spliterator of Long values or null if not supported
425 Maps each input element to a spliterator of output elements. @param fromSpliterator input elements @param function mapping function @param topCharacteristics characteristics of the resulting spliterator @param topSize estimated size of the resulting spliterator @return Spliterator of mapped output elements
426 Checks if this collection contains all elements of another collection. @param collection Collection to check against
427 Sets the hash table mask. @param mask integer value representing the hash table size
428 Sets the hash table mask for compact hashing. @param mask integer mask value
429 Resizes internal arrays to accommodate a specified capacity. @param newCapacity the desired size of entry, key, and value arrays
430 Resizes internal arrays to accommodate a specified capacity. @param newCapacity desired size of the arrays
431 Calculates the optimal hash table size based on expected usage. @param expectedSize estimated number of entries @return minimum required capacity to prevent resizing
432 Compares two integers using a chainable comparison mechanism. @param left left-hand value to compare @param right right-hand value to compare
433 Compares two long values in a chain. @param left the first value to compare @param right the second value to compare
434 Compares two boolean values, returning true if the first is true. @param left first boolean value to compare @param right second boolean value to compare
435 Compares two booleans with false first. @param left left operand (must be false) @param right right operand
436 Checks if this range has a lower bound other than "below all". @return true if lower bound is set, false otherwise
437 Checks if an upper bound is set. @return true if upperBound is not above all, false otherwise
438 Initializes DiscreteDomain with default value.
439 Serializes the object using ObjectOutputStream. @throws IOException if serialization fails
440 Serializes UserProfile object to the given ObjectOutputStream. @throws IOException if serialization fails
441 Serializes this instance into the given ObjectOutputStream.
442 Verifies that the given object is of expected type E. @param element object to be checked
443 Serializes this object to the given ObjectOutputStream.
444 Writes object to ObjectOutputStream, including multiset data.
445 Serializes the multiset to an ObjectOutputStream. Writes the default object data and the comparator used in this multiset.
446 Initializes an empty Builder instance.
447 Creates a fluent iterable from an array of elements. @param elements array of objects to be iterated
448 Creates an empty FluentIterable instance. @param none @return Empty FluentIterable object
449 Checks if this collection is empty. @return true if no elements are present, false otherwise
450 Concatenates this iterable with another iterable. @param other iterable to be appended
451 Concatenates two iterables into one. @param a first iterable @param b second iterable
452 Concatenates three iterables into one. @param a first iterable to concatenate @param b second iterable to concatenate @param c third iterable to concatenate
453 Concatenates four iterables into one. @param a first iterable @param b second iterable @param c third iterable @param d fourth iterable
454 Returns a stream of elements from the underlying collection. @return a Stream object representing the collection's elements
455 Counts occurrences of a specified element in an iterator. @param iterator iterable object @param element target element to search for @return frequency of the element or -1 if not found (though this is currently always >=0)
456 Checks if a given Map contains a specified key. @param map the Map to search @param key the key to look for @return true if the key is present, false otherwise
457 Checks if the given map contains a specific value. @param map the input map to search @param value the target value to look for @return true if the map contains the value, false otherwise
458 Adds all elements from the specified iterable to this list at the given index. @param index insertion position @param elements iterable of elements to add
459 Returns a sublist of this collection from the given index range. @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
460 Returns a hash code implementation using Guava's Lists library. @return A hash code value for this object.
461 Copies all key-value pairs from the given map into this map. @param map map to copy from
462 Performs standard equality check using Guava's Maps.equalsImpl. @param object object to compare with this instance
463 Creates a custom table from an empty backing map and a supplier of row data. @param backingMap empty map containing column data @param factory supplier of row data to validate against the backing map @return Table object representing the custom table
464 Initializes or returns existing set of column keys.
465 Creates a Column object with the specified key. @param columnKey unique column identifier
466 Populates a map with data from an ObjectInputStream. @param map the map to populate @param stream input stream containing map data
467 Populates a multiset with elements from an ObjectInputStream. @param multiset target multiset to fill @param stream input stream containing element data
468 Rebuilds a hash table with the specified size and elements. @param newTableSize target size of the hash table @param elements array of objects to populate the hash table @return populated hash table or null if not rebuilt
469 Initializes builder with default initial capacity.
470 Creates a new builder instance with specified initial capacity. @param size initial capacity of the builder
471 Creates a Builder with an expected size. @param expectedSize the anticipated size of the map
472 Ensures the internal array capacity meets or exceeds the specified minimum. @param minCapacity minimum required capacity
473 Adds all elements from the given iterable to the builder. @param elements collection of elements to be added @return this builder instance for method chaining
474 Adds all elements from an iterator to the builder. @param elements iterator containing elements to be added
475 Adds all elements from an iterator to the builder. @param elements iterator of elements to be added @return this builder instance
476 Adds all elements from the given iterable to this builder. @param elements iterable of elements to add
477 Converts a stream into an immutable list.
478 Creates an empty ImmutableMultimap instance.
479 Converts a Range collection into an unordered, immutable set of ranges. @return ImmutableRangeSet instance containing the input ranges
480 Converts an input stream into an immutable set. @return ImmutableSet collector
481 Returns a comparator for this map's keys based on their natural ordering. @return A Comparator instance or null if not found
482 Adds an element to the collection, potentially expanding capacity and sorting. @param element the element to add @return this Builder instance for method chaining
483 Converts an interned function to a standard Java Function. @param interner interned function instance
484 Converts an Iterable to its string representation. @param iterable iterable object to be converted
485 Returns only element from given iterable, or null if empty. @param iterable collection of elements to extract from @return single element from iterable, or null if empty
486 Recursively fetches the only element from an iterator or returns a default value. @param iterator iterator containing a single element @param defaultValue value to return if iterator is empty @return T element from iterator, or defaultValue if empty
487 Concatenates two arrays of a specific type. @param first the first array to concatenate @param second the second array to concatenate @param type the type of elements in the resulting array @return the concatenated array or null if not possible
488 Retrieves the last element from an iterable, throwing a NoSuchElementException if empty. @param iterable collection of elements to retrieve from @return last element in the iterable or null if not found (if Iterable is unbounded)
489 Recursively retrieves the last element from an iterator. If iteration completes without finding an element, returns a default value. @param iterator Iterator to traverse @param defaultValue Value to return if iterator is exhausted @return Last element from iterator or default value
490 Returns an unmodifiable iterator over an empty list. @return Empty iterator instance
491 Serializes the map's state to the output stream. @throws IOException if serialization fails
492 Adds a new Node to the multimap, updating key lists and counts. @param key unique key identifier @param value associated value @param nextSibling existing sibling node (null for append) @return newly added Node
493 Converts CharSequence into a list of individual characters. @param sequence input character sequence
494 Searches for an element in a list using optimal algorithm based on implementation. @param list the list to search @param element the object to find (may be null) @return index of the element if found, or -1 otherwise
495 Searches for the last occurrence of an element in a list. @param list the list to search @param element the object to find @return index of last occurrence or -1 if not found
496 Iterates through the table, advancing to the next entry if available. @return true if a valid entry was found and advanced to, false otherwise
497 Expands the hash table to twice its current capacity. @GuardedBy("this")
498 Tries to drain reference queues while holding lock.
499 Checks if an internal entry is live for testing purposes. @param entry InternalEntry object to check
500 Creates an empty set with unique elements, using identity comparison.
501 Wraps a BiMap instance with synchronization. @param bimap the input BiMap to synchronize
502 Swaps the element at the given index with its parent if necessary to maintain heap order. @param index position of the element to potentially swap @param x new value for the element at index @return updated index of the swapped element
503 Swaps the given element with the conceptually last element in the queue. @param actualLastElement the element to swap @return the index of the swapped element or queue size if no swap occurred
504 Advances the cursor to the first element not skipped. @param c minimum index to check
505 Creates an iterator over the elements of a multiset. @param multiset The multiset to iterate over
506 Creates a new array of specified size with optional type parameter. @param reference existing array to copy from (optional) @param length desired size of the new array @return new array or null if not created (rare edge case)
507 Converts collection to an array. @param c the input collection @return object array containing all elements or null if collection is empty
508 Finds the minimum element in an iterable sequence. @param iterator input iterator of elements to compare @return smallest element or null if iterator is empty
509 Finds the maximum element from an iterable. @param iterator iterator over elements of type E @return maximum element or null if empty
510 Encloses all values in the specified iterable within a Range. @param values Iterable of Comparable elements
511 Creates an empty concurrent hash set.
512 Returns a string representation of this range. @return A string in the format "lowerBound - upperBound"
513 Returns the endpoint of the lower bound. @return Endpoint object representing the lower bound
514 Returns the endpoint of the upper bound. @return Endpoint object of the upper bound
515 Checks for conflicts in the value bucket without exceeding maximum length. @param value unique value to check @param entry associated Entry object @param valueBucketHead head of the value bucket (may be null)
516 Removes duplicate entries from the given array. @param entries input array of entries to process @param n size of the input array @param newN desired size of the output array @param duplicates map of encountered entries and their status (null=not dup'd, true=first dup'd, false=non-first dup'd) @return new array with duplicate entries removed
517 Checks for conflicts in the key bucket. @param key Object to check @param newValue New value associated with the key @param keyBucketHead Head of the key bucket entry list @param throwIfDuplicateKeys Whether to throw exception on duplicate keys @return Matching ImmutableMapEntry or null if not found
518 Converts enum values to an immutable set.
519 Creates EnumSet complement from a given Collection. @param collection input enumeration set
520 Creates a complement EnumSet from a given Collection. @param collection input collection @param type enum class of the elements in the collection
521 Wraps a boxed IntStream into an OptionalInt using findLast(Stream). @param stream IntStream to search for the last element
522 Wraps the last element of a LongStream into an OptionalLong. @param stream input stream to search for the last element
523 Wraps the last double value in an OptionalDouble. @param stream DoubleStream to search for the last element @return OptionalDouble containing the last double, or empty if none found
524 Reorders the array by partitioning around a pivot element. @param left left index of subarray to reorder @param right right index of subarray to reorder @param pivotIndex index of pivot element to use for partitioning @return new index of pivot element in reordered array
525 Serializes Multimap object to the given ObjectOutputStream. Writes key and value comparators, as well as internal data structures.
526 Initializes a new instance of the CharEscaper class.
527 Initializes a new instance of the UnicodeEscaper class.
528 Escapes special characters in a string up to the specified index. @param s input string @param index maximum index to escape @return escaped string or null if error occurs
529 Escapes a single character using the provided CharEscaper. @param escaper CharEscaper instance to use for escaping @param c character to escape @return escaped character as a String, or null if not possible
530 Escapes Unicode code point to a replacement string. @param escaper UnicodeEscaper instance @param cp Unicode code point value @return escaped string or null if invalid input
531 Validates endpoint pairs based on ordering compatibility. @param endpoints pair of Endpoints to be validated
532 Advances to the next node in the traversal. @return true if a new node was successfully reached, false otherwise
533 Creates an endpoint pair from a graph and two nodes. @param graph the graph containing the nodes @param nodeU first node of the pair @param nodeV second node of the pair
534 Creates an endpoint pair from a network and two nodes. @param network the graph to operate on @param nodeU one endpoint of the pair @param nodeV the other endpoint of the pair
535 Returns a set of edges in the graph, represented as EndpointPairs. @return Set of EndpointPairs
536 Returns a set of {@link EndpointPair}s representing graph edges.
537 Validates provided EndpointPairs by ensuring ordering compatibility. @param endpoints EndpointPair to validate
538 Returns an iterator over the elements in this graph's nodes. @return Iterator containing GraphNode objects
539 Sets the order of nodes in the graph. @param nodeOrder ElementOrder specifying node ordering
540 Sets the order of incident edges to unordered or stable. @param incidentEdgeOrder ElementOrder type (unordered/stable)
541 Returns the transposed graph, or the original graph if undirected. @param graph input graph @return TransposedGraph object or original graph if undirected
542 Returns the transposed graph of a directed network. @param network input graph to transpose @return the transposed graph or original if undirected
543 Returns the transposed graph of a directed ValueGraph. @param graph directed ValueGraph to transpose @return transposed graph or original graph if undirected
544 Sets the node order for this network builder. @param nodeOrder Element order to use; must not be null
545 Sets the order of edges in the network graph. @param edgeOrder ordering strategy for the edges @return updated NetworkBuilder instance
546 Sets the element order for nodes in graph builder. @param nodeOrder ElementOrder instance to use
547 Sets the order of incident edges in the graph. @param incidentEdgeOrder ElementOrder instance (UNORDERED or STABLE)
548 Updates internal state with given byte array. @param b input byte array
549 Updates internal state from provided ByteBuffer. @param b input buffer containing data to update with
550 Updates hasher with specified number of bytes. @param bytes the number of bytes to process @return this Hasher instance for chaining
551 Pads and processes the remaining ByteBuffer content. @param bb ByteBuffer containing data to be processed
552 Delegates to {@link #mightContain(T)} with the provided input. @param input object to be checked for containment
553 Converts a collection to a concurrent bloom filter. @param funnel Funnel function for the elements @param expectedInsertions Estimated number of unique elements @param fpp False positive probability threshold @return A collector that produces a BloomFilter object
554 Calculates the total bit size of the bits configuration.
555 Performs a saturated cast from long to byte, clamping the result. @param value input value to be casted
556 Compares two bytes as unsigned integers. @param a first byte @param b second byte @return negative if a < b, zero if a == b, positive if a > b
557 Converts a byte to a string representation in the specified radix. @param x the byte value @param radix the base of the number system (e.g. 10 for decimal, 16 for hexadecimal)
558 Copies all bits from another LockFreeBitArray into this one. @param other the bit array to copy from
559 Sets a single bit at specified index to 1. @param bitIndex the index of the bit to set
560 Calculates a hash code based on the internal byte representation. @return The calculated hash code
561 Returns a hexadecimal string representation of the internal byte array.
562 Extracts a long integer value from the given byte array. @param bytes input byte array
563 Computes weak hash with seeds using 32-bit length. @param bytes input byte array @param offset starting position in the array @param seedA initial seed A value @param seedB initial seed B value @param output array to store resulting hash values
564 Computes weak hash of input bytes using seeds. @param bytes input data @param offset starting index in bytes array @param seedA initial value for first hash part @param seedB initial value for second hash part @param output array to store the two resulting hash parts
565 Converts value to a long integer. @return long representation of the value
566 Divides two integers with potential overflow handling. @param dividend number being divided @param divisor divider value
567 Calculates the remainder of two integers. @param dividend number being divided @param divisor number by which we are dividing @return remainder of the division operation
568 Creates a 32-bit Murmur3 hash function instance with the specified seed. @param seed initial hash value
569 Generates a fixed-size Murmur3 hash function with specified seed. @param seed initial hash value
570 Initializes MURMUR3-128 hash function with specified seed value. @param seed initial hash seed value @return initialized Murmur3_128HashFunction object
571 Calculates consistent hash value within specified number of buckets. @param input seed for randomization @param buckets maximum number of possible results @return hashed bucket index (0 <= result < buckets)
572 Converts a byte array to an integer value. @param bytes input byte array (must be at least BYTES long)
573 Copies data from input stream to output stream. @param from InputStream source @param to OutputStream destination @return total bytes copied or -1 on error
574 Calculates the total number of bytes read from an InputStream. @param in input stream to read from @return total number of bytes read, or 0 if empty
575 Reads bytes from an InputStream using a ByteProcessor to process the data. @param input InputStream containing the data @param processor ByteProcessor instance to process the data @return processed result or null if not processed
576 Creates a new ByteArrayDataInput instance from the given ByteArrayInputStream. @param byteArrayInputStream input stream containing binary data
577 Creates a new ByteArrayDataOutput instance from the given ByteArrayOutputStream. @param byteArrayOutputStream underlying output stream
578 Initializes a ReaderInputStream with the given reader and encoder. @param reader input source @param encoder charset encoder for conversion @param bufferSize size of buffers used in this stream
579 Initializes draining process based on buffer overflow status. @param overflow whether buffer is overflowing
580 Copies data from one channel to another. @param from source ReadableByteChannel @param to destination WritableByteChannel @return number of bytes copied
581 Reads the next line from the input stream. @return the next line as a string or null if end of input is reached
582 Skips up to 'n' bytes from the input stream. @param in InputStream to read from @param n number of bytes to skip @return actual number of bytes skipped
583 Returns a stream of lines from the underlying input source. @throws IOException if an I/O error occurs while reading
584 Calculates the total number of bytes read from a Readable source. @param readable input stream to exhaust @return total bytes read or -1 if exhausted immediately
585 Initializes a new LineReader instance from a given Readable object. @param readable the source of the data to be read
586 Closes an input stream quietly, propagating any I/O exceptions. @param inputStream the stream to close
587 Closes the given Reader instance quietly. @param reader Reader to be closed
588 Updates internal state by transferring buffered data to a temporary file. @param len amount of new data to be added
589 Resets internal state and deletes temporary files. @throws IOException if unable to delete temporary file
590 Converts a File to a CharSource. @param file file to be converted @param charset character encoding used for conversion
591 Flushed Flushable object quietly, suppressing IOExceptions. @param flushable object to be flushed
592 Throws exception if insecure recursive delete is not explicitly allowed. @param path directory to recursively delete @throws InsecureRecursiveDeleteException if ALLOW_INSECURE option is missing
593 Doubles the capacity of a CharBuffer and returns the new buffer. @param buf original CharBuffer to grow
594 Appends a substring to the buffer while handling newline and return characters. @param cbuf input character array @param off starting offset in cbuf @param len length of substring to append
595 Completes processing of current input line.
596 Reads and combines two bytes into an unsigned short integer.
597 Reads and returns a 32-bit integer from the input stream.
598 Reads and combines 8 bytes into a long integer.
599 Writes a single character to the output stream. @param v character value to be written
600 Writes a float value as an integer. @param v the float value to be written
601 Writes a long integer value to the output stream in big-endian byte order. @param v the long integer value to be written
602 Deletes a directory and its contents recursively using an insecure method. @param path directory to delete @return collection of IOExceptions if deletion fails, null otherwise
603 Recursively deletes directory contents and returns accumulated IOExceptions. @param dir SecureDirectoryStream to delete from @return Collection of IOExceptions or null if successful
604 Advances to the next item and opens its input stream. @throws IOException on I/O error
605 Advances to the next item in the iterator and opens its stream. @throws IOException on I/O error
606 Wraps a URL as a character source with specified charset. @param url resource to wrap @param charset encoding for the character source
607 Performs division and rounding according to specified RoundingMode. @param p dividend @param q divisor (must be non-zero) @param mode rounding mode @return quotient with applied rounding
608 Computes the factorial of a non-negative integer. @param n input value @return factorial result or infinity if too large
609 Computes power of a base number 'b' raised to an exponent 'k'. @param b the base number @param k the exponent @return result of b^k or 0 if Integer.SIZE is exceeded
610 Calculates the greatest common divisor (GCD) of two integers using the binary GCD algorithm. @param a first integer @param b second integer @return nonnegative GCD value
611 Calculates the factorial of a given non-negative integer. @param n input value, must be >= 0
612 Calculates the binomial coefficient using dynamic programming. @param n total number of items @param k number of selected items @return binomial coefficient or Integer.MAX_VALUE if too large
613 Computes the power of base 'b' raised to exponent 'k'. @param b base value @param k exponent (non-negative integer) @return result of pow(b, k) or throws AssertionError for invalid inputs.
614 Calculates the factorial of a given integer. @param n non-negative integer value
615 Initializes linear transformation builder with a point (x1, y1). @param x1 x-coordinate of the point @param y1 y-coordinate of the point
616 Checks if two doubles are within a specified tolerance. @param a first double value @param b second double value @param tolerance maximum allowed difference @return true if values are equal withing tolerance, false otherwise
617 Rounds a double value to the nearest integer according to the specified rounding mode. @param x the double value to be rounded @param mode the rounding mode, one of: DOWN, FLOOR, CEILING, UP, HALF_DOWN, HALF_UP, HALF_EVEN, UNNECESSARY
618 Calculates the smallest power of two greater than or equal to x. @param x input value
619 Returns the largest power of two less than or equal to x. @param x input value (must be positive)
620 Calculates the base-2 logarithm of a positive integer. @param mode rounding mode for half-way cases @return integer logarithm value or throws AssertionError if invalid mode
621 Computes square root of a number with specified rounding mode. @param x non-negative integer to find square root of @param mode RoundingMode to apply (e.g. UNNECESSARY, FLOOR) @return square root value or throws AssertionError if invalid input
622 Safely adds two integers using Math.addExact. @param a first integer @param b second integer @return their sum or throws ArithmeticException if overflow occurs.
623 Performs safe integer subtraction. @param a first operand @param b second operand @return result of subtraction or throws ArithmeticException if overflow occurs
624 Safely multiplies two integers. @param a first integer @param b second integer
625 Verifies whether base is a witness to the compositeness of n. @param base potential witness @param n number to test for compositeness @return true if base is a valid witness, false otherwise
626 Calculates the smallest power of two greater than or equal to x. @param x input value
627 Calculates the largest power of two less than or equal to x. @param x input value, must be positive
628 Calculates the base-2 logarithm of a given positive value. @param x input value @param mode rounding mode to apply when result is not an integer @return log2(x) as an integer; null if x is not positive
629 Calculates the greatest common divisor (GCD) of two integers using the binary GCD algorithm. @param a non-negative integer @param b non-negative integer @return GCD value or one of the input values if it is zero
630 Calculates remainder of a long number divided by an integer modulus. @param x dividend value @param m modulus value @return remainder value in range [0, m)
631 Safely adds two long integers with overflow checking. @param a first integer to add @param b second integer to add @return sum of the two integers
632 Performs checked subtraction of two long values. @param a first number @param b second number @return result of subtraction or throws ArithmeticException if overflow occurs
633 Safely multiplies two integers using exact arithmetic. @param a first integer value @param b second integer value
634 Returns the total count of items from underlying statistics. @return Total item count as a long value
635 Compares this PairedStats object with another for equality. @param obj Object to compare, must be of same type @return true if objects are equal, false otherwise
636 Initializes an empty PairedStatsAccumulator instance.
637 Calculates new mean by applying naive mean formula with non-finite value handling. @param previousMean the current mean @param value the new value to add @return the updated mean (NaN if non-finite values mismatch)
638 Returns the total count of elements. @return Total element count
639 Calculates and returns the median value of the current data set.
640 Calculates quartile scale. @return Scale value of 4
641 Returns a Scale instance with values scaled to 0-100 percentiles. @return Scale object representing 100th percentile scale
642 Reorders elements in the given slice so that the pivot element (at index 'from') is at the start of the slice. @param array input array @param from index of the pivot element @param to end index of the slice
643 Reads Stats object from ByteBuffer. @param buffer ByteBuffer containing stats data
644 Creates a snapshot of current statistics. @return Stats object encapsulating current count, mean, and other metrics
645 Returns the port number when hasPort() is true. @return Port number if valid, otherwise throws exception
646 Returns current port value if available; otherwise returns specified default port. @param defaultPort default port to use when current port is unavailable
647 Formats host and port into a string representation. @return Formatted string in the format [host]:port or just host if no port
648 Sets the default port for this host and port. @param defaultPort the new default port value
649 Converts InetAddress to a human-readable string representation. @param ip IP address object @return formatted IPv4 or IPv6 address string
650 Checks if the given IPv6 address is an ISATAP address. @param ip the IP address to check @return true if the address is an ISATAP address, false otherwise
651 Checks if the given IPv6 address contains an embedded IPv4 client address. @param ip IPv6 address to check @return true if the address has an embedded IPv4 client, false otherwise
652 Converts a collection of Booleans to a primitive boolean array. @param collection Collection of Boolean values @return Primitive boolean array or null if collection is null
653 Searches for the index of a specified boolean value in an array. @param array the boolean array to search @param target the boolean value to find
654 Searches for the last occurrence of a target value in an array. @param array input boolean array @param target target boolean value to search for
655 Converts a collection of numbers to a byte array. @param collection Collection of Number objects @return Byte array representation or null if input is ByteArrayAsList
656 Returns index of specified byte in given array. @param array the input byte array @param target the target byte to search for
657 Finds the last index of a specified byte in an array. @param array input byte array @param target target byte to search for
658 Converts a collection of characters to a character array. @param collection collection of characters @return char[] representation of the input collection
659 Finds index of specified character in given character array. @param array The character array to search @param target The character to find
660 Finds the last index of a specified character in an array. @param array input character array @param target character to search for
661 Extracts a single character from the specified byte array. @param bytes input byte array containing two bytes
662 Calculates the hash code of a user profile array based on its elements. @return a unique integer value representing the array's state
663 Converts a collection of numbers to a double array. @param collection Collection of Number objects @return Double array representation or null if collection is not supported
664 Finds index of specified value in an array. @param array input array @param target value to search for
665 Searches for the last occurrence of a target value in an array. @param array input array to search @param target value to find
666 Converts a Collection of Numbers to a float array. @param collection input collection @return float array representation or null if not found
667 Searches for the index of a specified value in an array. @param array the float array to search @param target the value to find (in this case, a float)
668 Finds the index of the last occurrence of the specified target value in the given array. @param array the input array to search @param target the value to find
669 Creates a Builder instance with the specified initial capacity. @param initialCapacity minimum size of the underlying collection
670 Creates a new instance of Builder with default capacity (10).
671 Searches array for target value and returns its index. @param target double value to search for
672 Searches the array from end to start for the last occurrence of the target value. @param target double value to search for @return index of the last occurrence or -1 if not found
673 Returns a human-readable string representation of the array. @return String containing array elements, or "[]" if empty
674 Checks if an integer is present in the underlying collection. @param target the integer to search for
675 Constructs a Builder instance with the specified initial capacity. @param initialCapacity minimum size of the underlying collection
676 Returns a new instance of the Builder with default capacity. @return Builder object initialized with default parameters
677 Calculates a unique hash code based on the array elements between start and end indices.
678 Returns a string representation of the array, with elements comma-separated and enclosed in square brackets. @return String representation of the array or "[]" if empty
679 Checks if collection contains specified element. @param target long value to search for @return true if found, false otherwise
680 Creates a new Builder instance with specified initial capacity. @param initialCapacity the initial capacity of the builder
681 Creates a new instance of Builder with default capacity (10).
682 Calculates the hash code of a subarray within a larger array. @return hash code value
683 Returns a human-readable string representation of the array. @return Stringified array contents, or "[]" if empty
684 Converts a Collection of Numbers to an integer array. @param collection input collection
685 Finds the index of a specified integer in an array. @param array the array to search @param target the integer to find
686 Finds the index of the rightmost occurrence of a target value in an array. @param array input array to search @param target value to search for
687 Converts a collection of Numbers to a long array. @param collection Collection containing Number elements
688 Searches for the index of a target value in an array. @param array the array to search @param target the value to find
689 Searches for the last occurrence of the specified target value in an array. @param array the array to search @param target the value to find
690 Parses a string representation of a long value in the given radix. @param string string to parse @param radix base of the number (MIN_RADIX <= radix <= MAX_RADIX) @return parsed Long value or null if invalid or out-of-range.
691 Converts a collection of Numbers to an array of shorts. @param collection Collection of Numbers to convert @return short[] containing the converted values or null if collection is null
692 Returns index of specified short value in given array. @param array input short array @param target short value to search for
693 Finds index of last occurrence of specified short value in array. @param array input array to search @param target target short value to find
694 Converts byte array to a short value. @param bytes input array containing two bytes
695 Returns the best available comparator for byte arrays. @return Comparator instance or a fallback implementation if unavailable
696 Creates an UnsignedInteger instance from given int value. @param bits the int value to represent as UnsignedInteger
697 Converts this integer to a string representation in a specified base. @param radix target number base (e.g., 2 for binary, 16 for hexadecimal)
698 Converts integer to string representation using base 10.
699 Compares two integers using Ints.compare on their bitwise flipped values. @param a first integer to compare @param b second integer to compare @return negative if a < b, zero if a == b, positive if a > b
700 Creates an UnsignedLong object from the given long bits. @param bits long integer value to initialize UnsignedLong with.
701 Compares two long integers using native comparison. @param a first long value to compare @param b second long value to compare @return negative if a < b, zero if a == b, positive if a > b
702 Parses a string representation of an unsigned long integer in the given radix. @param string string to parse @param radix base of the number (2-36) @return parsed unsigned long integer or throws NumberFormatException if invalid
703 Handles dynamic invocation of methods on a proxy object. @param proxy the proxy instance @param method the invoked method @param args array of arguments passed to the method @return result of the method invocation or null if not handled
704 Retrieves package name from class name using reflection. @return package name as string or empty string if not found
705 Retrieves package name from fully qualified class name. @param clazz Class object to extract package name from
706 Returns a ByteSource representation of this resource. @return ByteSource object containing the resource data
707 Checks if the element is publicly accessible. @return true if public, false otherwise
708 Checks if this class member is protected.
709 Checks if this class member is private.
710 Checks if this class is static.
711 Checks if this class is declared as final.
712 Checks whether this class is abstract. @return true if class is abstract, false otherwise
713 Checks whether this class is native. @return true if native, false otherwise
714 Checks if this class is synchronized. @return true if synchronized, false otherwise
715 Checks whether the field is volatile. @return true if the field is volatile, false otherwise
716 Checks if this field is transient. @return true if the field is transient, false otherwise
717 Compares this type with the given type. @param type Type to compare with @return true if types are equal, false otherwise
718 Creates a TypeToken instance from a given Class. @param type class to wrap in the TypeToken
719 Creates a TypeToken instance from a given Class. @param type Class to create TypeToken instance for
720 Retrieves done value from object, throwing exceptions or returning null as needed. @param obj Object containing done status and/or exception information
721 Adds a new listener to be executed when the future completes or is cancelled. @param listener Runnable to be executed on completion @param executor Executor to run the listener in
722 Cancels a potentially related future if this task was cancelled. @param related the future to cancel, or null if no relationship
723 Submits a Callable task for asynchronous execution and returns a ListenableFuture result. @param task The task to be executed, returning a value of type T. @return A ListenableFuture representing the result of the task, or null if cancelled.
724 Schedules a cancellable task to run on the provided executor. @param service Abstract service object @param executor Executor service to run the task on @param runnable Task to be executed @return Cancellable task instance
725 Schedules a cancellable task to run on the provided executor. @param service AbstractService instance @param executor Executor service to use @param runnable Task to be executed @return Cancellable object representing the scheduled task
726 Invokes all asynchronous tasks with specified timeout. @param tasks collection of callable tasks @param timeout duration for task execution @return list of futures or throws InterruptedException if timed out
727 Invokes any of the provided callable tasks with a specified timeout. @param tasks collection of tasks to execute @param timeout maximum time to wait for task completion @throws InterruptedException if thread is interrupted @throws ExecutionException if task execution fails @throws TimeoutException if timeout is reached before task completion
728 Awaits thread termination within specified time duration. @param timeout maximum wait time in Duration units @return true if terminated, false on timeout or exception
729 Schedules a task with a specified duration using the provided callable. @param callable the task to be executed @param delay duration until execution
730 Schedules a task for repeated execution at fixed intervals. @param command the task to run @param initialDelay delay before first execution @param period interval between subsequent executions
731 Schedules a fixed-delay task with the given initial delay and interval. @param command Runnable task to execute @param initialDelay initial wait time before first execution @param delay subsequent wait time between executions
732 Waits until the service is running or times out. @param timeout maximum time to wait before throwing TimeoutException
733 Waits for this process to terminate within the specified timeout. @param timeout maximum wait duration
734 Creates a proxied instance of the specified interface type. @param target underlying object to proxy @param interfaceType interface to implement @param timeout duration for which the proxy is valid
735 Executes a callable with a specified timeout. @param callable the operation to perform @param timeout duration before throwing a TimeoutException
736 Executes a task with interruptibility and timing constraints. @param callable target function to execute @param timeout maximum execution time in nanoseconds @return result of the executed function or throws exception if timed out
737 Executes a Runnable with a specified timeout duration. @param runnable task to be executed @param timeout time limit for the execution in nanoseconds
738 Runs a Runnable with no interruptions and a specified time limit. @param runnable Task to execute @param timeout Time duration for the task (in nanoseconds)
739 Creates a scheduled executor service with a single thread and adds a shutdown listener. @return ScheduledExecutorService instance
740 Handles an exception by logging or propagating it based on allMustSucceed flag. @param throwable the caught Throwable
741 Returns a string representation of this value. @return A string representation of the underlying double value.
742 Returns the integer value of this object. @return the integer representation as an int
743 Converts numeric value to a 64-bit integer. @return The numeric value as a long integer.
744 Converts current value to a primitive float. @return float representation of the object's value
745 Returns the double value of this primitive type.
746 Writes this object's state to an ObjectOutputStream. @param s ObjectOutputStream instance
747 Reads serialized state from ObjectInputStream and sets user's location. @throws IOException on serialization error @throws ClassNotFoundException if class not found during deserialization
748 Accumulates a value using the provided function and returns the accumulated result. @param x value to accumulate @param accumulatorFunction mathematical operation on oldValue and x @return accumulated double value
749 Accumulates and updates a value using the provided function. @param x new value to apply @param accumulatorFunction binary operator to accumulate with @return accumulated result as double or NaN if accumulatorFunction returns null
750 Returns a string representation of the array, with each element as a double value. @return String containing double values and commas, or "[]" if empty.
751 Serializes object data to output stream, including array size and elements. @throws IOException if serialization fails
752 Accumulates value with the given function and returns current value. @param i index @param x value to accumulate @return current double value
753 Accumulates value using a binary operator and returns the result. @param i index @param x value to accumulate @return accumulated result
754 Removes an entry with a value of zero. @param key unique identifier for the entry to be removed
755 Initializes or returns cached map of key values.
756 Replaces a value in the map with a new one, preserving old value if present. @param key unique identifier for replacement @param expectedOldValue current value to replace (0L if not present) @param newValue new value to store @return true if replacement was successful, false otherwise
757 Converts this operation to a Future, closing it when complete. @return Future representing this operation's result
758 Completes the ValueAndCloser creation process. @param consumer callback for ValueAndCloser @param executor thread pool to use
759 Adds a Runnable to be executed immediately or after all previous ones if not already started. @param runnable task to execute @param executor execution context
760 Executes all registered runnables and their associated executors in reverse order.
761 Catches asynchronous exceptions of a specified type and returns a FluentFuture. @param exceptionType class of exceptions to catch @param fallback function to invoke on exception @param executor executor for asynchronous operations
762 Asynchronously transforms the future's value using a provided async function. @param function async function to apply to the future's value @param executor executor to run the transformation on @return FluentFuture containing transformed result or null if not found
763 Returns an immediate future with the given value, or null if the input is null. @param value the initial value of the future, or null @return ListenableFuture containing the specified value, or a typed null future if input was null
764 Returns an immediately failed future containing the specified exception. @param throwable the cause of failure
765 Returns an immediately cancelled future of type V. @return ListenableFuture object that is cancelled upon creation
766 Retrieves the best validator by instantiating and casting the first enum constant. @return GetCheckedTypeValidator instance or a fallback if instantiation fails.
767 Dispatches events to all registered listeners.
768 Initializes a new instance of the Monitor class with default settings.
769 Enters interruptible mode for specified duration. @param time duration to wait, in nanoseconds
770 Enters a guarded section with interruptible timing. @param guard the Guard instance @param time the duration to wait or -1 for indefinite waiting
771 Checks if there are waiters associated with the given Guard. @param guard the Guard to check @return true if there are waiters, false otherwise
772 Checks if the given Guard satisfies its condition, potentially signaling all waiters and re-throwing any exceptions. @param guard Guard object to check for satisfaction
773 Shuts down an ExecutorService and waits for termination within a specified time. @param service executor service to shut down @param timeout maximum duration to wait for termination in nanoseconds
774 Blocks execution for the specified duration, ignoring interrupts. @param sleepFor duration to block for
775 Sets the rate of permits per second. @param permitsPerSecond positive rate value
776 Returns the rate value, synchronizing access to ensure thread safety. @return current rate value
777 Creates an empty Future with no initial value. @return SettableFuture object
778 Retrieves a value from the given Future with a specified timeout. @param future Future object containing the value @param timeout maximum wait time in nanoseconds
779 Creates a striped read-write lock with weak safety. @param stripes number of stripes in the lock
780 Creates a striped Lock instance with specified number of stripes. @param stripes number of stripes to create
781 Creates a striped semaphore with specified number of stripes and permits per stripe. @param stripes number of stripes in the semaphore @param permits number of permits for each stripe
782 Creates a striped instance of ReadWriteLock with specified stripes. @param stripes number of stripes in the striped lock
783 Creates a custom thread factory instance.
784 Creates a TrustedListenableFutureTask for the given Runnable and result value. @param runnable the Runnable to execute @param result the expected result of the execution (may be null)
785 Waits for the CountDownLatch to count down uninterruptibly with a specified timeout. @param latch CountDownLatch to wait on @param timeout maximum time to wait in nanoseconds
786 Awaits the specified Condition to be met without interruption. @param condition Condition object to wait for @param timeout maximum time to wait (in nanoseconds)
787 Attempts to acquire the semaphore uninterruptibly within a specified time limit. @param semaphore target semaphore @param timeout maximum allowed duration @param unit time unit for timeout (e.g. seconds, milliseconds)
788 Attempts to acquire the specified number of permits from a semaphore without interruption. @param semaphore semaphore instance @param permits desired number of permits @param timeout maximum time to wait @return true if acquired, false otherwise
789 Attempts to acquire a lock uninterruptibly with a specified time limit. @param lock the Lock instance @param timeout maximum duration to wait for the lock @return true if the lock was acquired, false otherwise
790 Waits for the executor service to terminate without interruption. @param executor ExecutorService instance @param timeout duration to wait
791 Retrieves PublicSuffixType based on the provided character code. @param code character code to match @return matching PublicSuffixType or throws exception if not found
792 Creates an Optional instance with the given non-null reference value. @param reference non-null object to be wrapped @return Optional containing the reference or empty if null
793 Creates an unstarted stopwatch instance tied to the specified Ticker. @param ticker Ticker instance associated with the stopwatch
794 Finds index of first element in iterable that satisfies given predicate. @param iterable collection of elements to search @param predicate condition for element to match @return index of matching element or -1 if not found
795 Finds if at least one element in an iterator matches a given predicate. @param iterator iterable source of elements @param predicate condition to test each element against @return true if any element satisfies the predicate, false otherwise
796 Creates a multimap builder with natural ordering for values. @return SortedSetMultimapBuilder instance
797 Converts a collection to an immutable table with specified functions. @param rowFunction function to map each element to its row key @param columnFunction function to map each element to its column key @param valueFunction function to map each element to its table value @param mergeFunction function to merge table values in case of duplicate keys
798 Creates a predicate that checks equivalence to the given target object. @param target object to compare against
799 Creates a function from a map with default values. @param map input map @param defaultValue value to return for missing keys
800 Composes two functions, applying the first (f) to input A and then passing result to second function (g). @param g second function in composition @param f first function in composition @return composed function with signature Function<A, C>
801 Converts a map to a function. @param map input map @return Function that applies the map's key-value pairs
802 Configures splitter with custom pattern. @param separatorPattern regular expression pattern for splitting.
803 Creates a new Joiner instance with specified string separator. @param separator string to separate joined elements
804 Creates a Joiner instance with the specified character as separator. @param separator single character to separate joined strings
805 Creates a MapJoiner instance with custom null text. @param nullText text to display when a map value is null
806 Creates a splitter with a regular expression pattern. @param separatorPattern regular expression to split by
807 Creates predicate that matches CharSequence based on provided regular expression. @param pattern regular expression to match
808 Inverts the given predicate to its logical opposite. @param predicate input predicate to invert @return inverted predicate or null if null input
809 Creates a composed predicate that evaluates to true if all provided predicates are true. @param components iterable of predicates to be combined @return a new predicate instance combining the input predicates
810 Combines multiple predicates into a single "or" predicate. @param components iterable of component predicates
811 Splits input sequence into key-value pairs and returns as a read-only Map. @param sequence input string to split
812 Converts CharSequence to a stream of individual strings. @param sequence input string sequence
813 Wraps a supplier to memoize its results. @param delegate original supplier to wrap
814 Composes a function with a supplier to create a new supplier. @param function the function to apply @param supplier supplier of input for the function @return a supplier that applies the function to the supplied output
815 Wraps a supplier with thread-safe functionality, ensuring consistent results. @param delegate the original supplier to be wrapped
816 Throws a specific exception type if the given Throwable instance is an instance of it. @param throwable the Throwable to check @param declaredType the expected exception type
817 Propagates unchecked exceptions to the caller, if possible. @param throwable exception to be propagated or null for no action
818 Throws a runtime exception wrapping the given Throwable. @param throwable the underlying exception to be thrown
819 Creates a lazily initialized stack trace from the given Throwable. @param throwable the source Throwable
820 Creates a new entry in the specified segment with the given key and hash. @param key unique key for the entry @param hash hash value of the key @param next reference to the next entry, or null if none
821 Creates a removal notification with specified key, value and cause. @param key object being removed (or null for no key) @param value associated value (or null if not applicable) @param cause reason for removal
822 Converts a stream of elements to a multiset. @param elementFunction maps each element to its type @param countFunction maps each element to its frequency @param multisetSupplier creates the multiset instance
823 Converts stream to multimap using provided key and value functions. @param keyFunction maps each element to its key @param valueFunction maps each element to its value @param multimapSupplier provides a new multimap instance @return Multimap with elements grouped by key and values
824 Converts a stream of objects to a multimap using provided functions. @param keyFunction maps each object to its key @param valueFunction maps each object to its values as a stream @param multimapSupplier creates the target multimap
825 Transforms a collection of objects by applying a given function to each element. @param fromCollection input collection to transform @param function mapping function to apply to each element @return transformed collection with mapped elements
826 Checks if an iterable contains a specified element. @param iterable the collection to search @param element the object to look for @return true if found, false otherwise
827 Returns a contiguous subset of this set containing all elements less than the given element. @param toElement upper bound (inclusive if true, exclusive otherwise) @param inclusive whether to include the toElement in the result
828 Returns a contiguous set containing elements greater than or equal to 'fromElement'. @param fromElement element to start the set from @param inclusive true if the set should include the 'fromElement'
829 Offers an element to this collection by adding it. @param e element to be added @return true if addition was successful, false otherwise
830 Orders keys by specified comparator. @param keyComparator Comparator for ordering keys @return Builder instance for method chaining
831 Orders keys by specified comparator. @param keyComparator comparator to sort keys with @return updated builder instance
832 Orders map values by specified comparator. @param valueComparator comparator to use for ordering @return Builder instance for method chaining
833 Adds an element to the collection and returns this builder.
834 Adds copies of an element to this builder. @param element element to copy @param occurrences number of copies to add @return this Builder instance for method chaining
835 Sets count for the given element. @param element object to update count for @param count new count value
836 Converts a stream into an immutable sorted multiset. @param comparator comparator for sorting elements @return Collector that returns an ImmutableSortedMultiset
837 Retrieves all elements less than the given element. @param toElement the upper bound (exclusive)
838 Returns the sorted set of elements greater than or equal to the specified element. @param fromElement the lower bound (inclusive)
839 Wraps the underlying iterable in an infinite cycle. @return a new FluentIterable with cyclic behavior
840 Filters this iterable based on the given predicate. @param predicate condition to apply to each element
841 Filters an iterable to only include elements of a specified type. @param unfiltered iterable to be filtered @param desiredType class of the desired element type @return filtered iterable or null if input is invalid
842 Transforms elements in this iterable to a new type using the provided function. @param function mapping function from original type E to new type T
843 Creates a PeekingIterator instance from the given Iterator. @param iterator input Iterator to wrap
844 Removes all specified elements from the given iterable. @param removeFrom iterable to remove elements from @param elementsToRemove collection of elements to remove @return true if any elements were removed, false otherwise
845 Removes elements from an iterable that match a given predicate. @param removeFrom collection to modify @param predicate condition for removal @return true if any elements were removed, false otherwise
846 Removes all elements not present in the 'elementsToRetain' collection from the given iterable. @param removeFrom target iterable to modify @param elementsToRetain collection of elements to retain @return true if any elements were removed, false otherwise
847 Adds all elements from the given collection to this collection. @param collection Collection of elements to add
848 Adds all elements from the given iterable to the specified collection. @param addTo target collection @param elementsToAdd iterable of elements to add @return true if elements were added, false otherwise
849 Creates an ArrayList from the given iterator of elements. @param elements iterator containing elements to add
850 Creates a new hash set from an iterator of elements. @param elements iterable collection of objects to add
851 Filters an iterator to only include elements of a specific type. @param unfiltered original iterator @param desiredType class of elements to keep @return filtered iterator or null if no matches
852 Checks if all elements in an iterable satisfy a given condition. @param iterable collection of objects to check @param predicate condition to evaluate each object against
853 Finds first element in an iterable that matches a given predicate. @param iterable collection of elements to search @param predicate condition to match @return first matching element or null if not found
854 Removes all nodes with the given key. @param key unique identifier to remove
855 Creates a list iterator at the specified index. @param list the backing list @param index the starting index
856 Creates a list with given elements. @param first first element in the list @param rest remaining elements (may be empty)
857 Transforms a list of objects by applying a function to each element. @param fromList input list of objects @param function transformation function @return transformed list of objects
858 Creates a list with the specified elements. @param first first element @param second second element @param rest remaining elements in an array
859 Converts a set of keys to a map with values computed by the provided function. @param set Set of keys @param function Function to compute values for each key
860 Converts a navigable set to a map using the provided function. @param set navigable key set @param function function to apply to each key
861 Transforms entries in a map using the provided transformer. @param fromMap original map @param transformer entry transformation function @return transformed map with new values
862 Checks if the given object is an entry in the specified collection. @param c Collection of entries to search @param o Object to check for membership (must be an Entry instance) @return true if the object is found, false otherwise
863 Removes a specific entry from the collection. @param c collection of entries @param o entry to be removed (null returns false)
864 Retrieves and returns the current count of a given object. @param element Object to fetch count for @return Count as an integer or 0 if not found
865 Removes exactly the specified occurrences of an element from the collection. @param element object to remove @param occurrences number of occurrences to remove @return true if removal was successful, false otherwise
866 Updates or inserts the count for an element in the map, using atomic operations to maintain consistency. @param element unique element identifier @param count new count value (0 to remove) @return old count value if updated, 0 if removed
867 Updates element's count in the map to newCount if expected old count matches. @param element unique identifier for the element @param expectedOldCount previous count value @param newCount new count value @return true if update was successful, false otherwise
868 Removes values associated with the given key from the map and updates the total size. @param key unique identifier to remove
869 Creates a new MultimapBuilder instance with natural ordering keys.
870 Converts a Map to a Multimap. @param map input map @return SetMultimap instance wrapping the map
871 Transforms entries in a multimap using an entry transformer. @param fromMap source multimap @param transformer transformation function @return new multimap with transformed entries
872 Adds all elements from the given iterable to the set. @param elements iterable of elements to add @return this builder instance for method chaining
873 Adds all elements from the given multiset to this one. @param elements multiset containing elements to be added
874 Modifies the first multiset to retain elements from the second. @param multisetToModify multiset to be modified @param multisetToRetain multiset whose occurrences are retained
875 Removes specified elements from a multiset. @param multisetToModify the multiset to modify @param occurrencesToRemove elements to remove, may be a Multiset or Iterable of elements @return true if any elements were removed, false otherwise
876 Retains all specified elements in the collection. @param elementsToRetain Collection of elements to retain
877 Removes and returns at most <code>numElements</code> elements from the queue within the specified <code>timeout</code>. @param q the BlockingQueue to drain @param buffer collection to store drained elements @param numElements maximum number of elements to remove @param timeout duration to wait for draining @return actual number of elements removed, or -1 if timed out
878 Drains a specified number of elements from the blocking queue into the provided collection. @param q BlockingQueue to drain from @param buffer Collection to store drained elements @param numElements Number of elements to retrieve @param timeout Timeout duration in nanoseconds
879 Checks if the container contains the specified element. @param input element to search for
880 Checks if all elements in the provided iterable are contained within this collection. @param values Iterable of elements to check
881 Processes pairs of elements from two streams in parallel or sequentially. @param streamA first input stream @param streamB second input stream @param consumer callback to process each pair
882 Converts a stream of objects to a table with custom row, column, and value functions. @param rowFunction function to map each object to its row identifier @param columnFunction function to map each object to its column identifier @param valueFunction function to map each object to its table cell value @param mergeFunction function to combine values for duplicate cells @param tableSupplier factory method to create a new table instance
883 Maps values in a table to new values using a provided function. @param fromTable original table with values of type V1 @param function transformation function returning values of type V2 @return a new table with transformed values of type V2
884 Transposes a Table instance by swapping row and column types. @param table input Table to transpose @return the transposed Table or original if already transposed
885 Creates an escaper map from a replacement character array. @param replacements Map of characters to escape and their corresponding values
886 Adds escapes for the specified characters. @param cs array of characters to escape @param r replacement string @return this builder instance for chaining
887 Finds the next character index that requires escaping. @param csq input character sequence @param start starting index to search from @param end ending index to search up to @return next escape index or start if no escapes found
888 Creates a SubscriberExceptionContext instance. @param event event object
889 Creates a sequential funnel that aggregates elements processed by the given element funnel. @param elementFunnel funnel to process individual elements @return a new sequential funnel instance
890 Converts PrimitiveSink to an OutputStream. @param sink primitive sink instance @return OutputStream wrapping the sink
891 Creates a funnel that parses strings from any source into CharSequence objects. @param charset character set to use when parsing strings
892 Wraps an Appendable object as a Writer, or returns it directly if already a Writer. @param target the Appendable object to wrap
893 Decodes a CharSequence into a byte array. @throws DecodingException if decoding fails
894 Creates a new instance of Closer with suppressing suppressor. @return Closer object
895 Compiles a string into a regular expression pattern used for filtering file names. @param patternStr input string to compile
896 Calculates the base-2 logarithm of a BigInteger, with optional rounding. @param x input number @param mode rounding mode (e.g. UNNECESSARY, DOWN, etc.) @return integer log value or throws AssertionError if invalid input
897 Parses an unsigned byte value from the given string representation. @param string string representation of the unsigned byte (base 10 assumed)
898 Parses an unsigned integer from the given string. @param s input string to parse
899 Retrieves a TypeVariableKey for the given type, or null if not applicable. @param t the input type to process
900 Retrieves the value from a ListenableFuture instance. @param future the ListenableFuture to get the value from
901 Converts duration to nanoseconds and creates new schedule with specified delay. @param delay duration to convert and use in scheduling
902 Creates an empty AtomicLongMap instance. @return A new AtomicLongMap with a backing ConcurrentHashMap.
903 Accumulates a value using the provided function and returns the result. @param key unique key identifier @param x value to accumulate @return accumulated long value
904 Accumulates a value using the provided function and returns the new value. @param key unique identifier @param x value to accumulate @param accumulatorFunction LongBinaryOperator to apply to old/new values @return accumulated long value
905 Updates value associated with given key to new value. @param key unique key identifier @param newValue new value to be stored @return previous value before update (or 0L if not initialized)
906 Adds a closable object to the list for eventual closure. @param closeable object that may be closed @param closingExecutor executor to use when closing @return original closable object (or null if input was null)
907 Creates a new instance of CycleDetectingLockFactory with specified Policy. @param policy locking policy to be used
908 Creates a sequential executor that wraps the provided delegate executor. @param delegate executor instance to be wrapped
909 Creates a SimpleTimeLimiter instance with the given ExecutorService. @param executor Executor service to use for timeouts
910 Waits for the specified thread to finish without interruption. @param toJoin target thread @param timeout maximum wait duration in nanoseconds
911 Creates an unordered element order instance. @return ElementOrder instance with type UNORDERED
912 Creates an instance of ElementOrder with STABLE sorting type.
913 Creates an instance of ElementOrder with INSERTION type and no secondary order.
914 Creates a natural ordering for elements of type S. @return ElementOrder object for natural ordering
915 Creates an ElementOrder instance with data sorted by the specified comparator. @param comparator comparison function for sorting elements
916 Returns a count down latch to wait on when all closeable resources are closed.
917 Converts CharSequence to lowercase. @param chars input string or character sequence
918 Converts input CharSequence to uppercase. @param chars input string or char sequence @return uppercase version of input as a string
919 Converts object data to byte array representation. @return Byte array containing object's stats and sum of products
920 Converts object data into a byte array. @return Byte array representation of the object
921 Initializes internal metadata with the specified expected array size. @param expectedSize minimum number of elements to be stored
922 Initializes internal metadata with given expected array size. @param expectedSize the anticipated size of the arrays
923 Combines this matcher with another to create an AND operation. @param other the other matcher to combine with
924 Creates a CharMatcher from a predicate function. @param predicate function to apply to each character
925 Combines this matcher with another into an OR operation. @param other the other matcher to combine
926 Creates a character matcher that matches characters within a specified inclusive range. @param startInclusive starting character (inclusive) @param endInclusive ending character (inclusive)
927 Subtracts the stats of another cache from this one. @param other CacheStats object to subtract @return new CacheStats with result of subtraction
928 Merges two cache statistics objects into a new one. @param other CacheStats object to add to this instance
929 Constructs an instance of AbstractListMultimap from a given map. @param map multimap data in key-value pairs format
930 Constructs an instance of AbstractSetMultimap from a multimap represented as a Map. @param map a map where keys are collection of values
931 Returns a contiguous subset of this set within the specified bounds. @param fromElement start element (inclusive if trueInclusive) @param fromInclusive whether start is inclusive @param toElement end element (inclusive if trueInclusive) @param toInclusive whether end is inclusive @return ContiguousSet object or null if not found
932 Creates an EnumMultiset instance for the specified enum type. @param type Class of the enum to be used in the multiset @return Newly created EnumMultiset instance
933 Returns an immutable sorted set of elements within the specified range. @param fromElement start element (inclusive) @param toElement end element (exclusive)
934 Partitions the given iterator into chunks of a specified size. @param iterator input iterator to be partitioned @param size chunk size @return UnmodifiableIterator over List partitions or null if empty
935 Partitions an iterator into lists of a specified size. @param iterator input data stream @param size number of elements per list
936 Creates a builder for ordering objects by natural order, with pre-allocated size. @param expectedSize the expected number of elements in the ordering @return Builder object to construct Ordering instance
937 Creates a builder for the maximum size comparator. @param maximumSize the maximum allowed size
938 Initializes hasher with specified chunk size. @param chunkSize size of each streaming hash chunk
939 Calculates population variance, ensuring non-negativity and handling edge cases. @return Variance value or NaN if sum of squares of deltas is NaN
940 Calculates sample variance. @return Variance value or NaN if sum of squares is NaN
941 Calculates the population variance of the dataset. @return Population variance or NaN if sum of squares is invalid
942 Calculates the sample variance. @return Sample variance or NaN if sum of squares is NaN
943 Creates a CharMatcher for any of the specified characters. @param sequence sequence of characters to match
944 Trims leading and trailing sequences of a specific character from the input CharSequence, collapsing any remaining sequences in between. @param sequence input string to process @param replacement character to remove and collapse
945 Creates an equivalence relation based on the result of a given function. @param function function to compute the equivalence value
946 Returns an equivalence relation for pairwise iterables of type S (where S is a subtype of T). @return Equivalence object for comparing iterable pairs
947 Compares two iterables for element equality. @param iterable1 first iterable to compare @param iterable2 second iterable to compare @return true if all elements are equal, false otherwise
948 Compares two lists for equality. @param thisList the list to compare @param other the object to compare against (may be a list or null) @return true if the lists are equal, false otherwise
949 Creates a new instance of ConcurrentHashMultiset with a ConcurrentHashMap backing map.
950 Creates a concurrent multiset from a map of element counts. @param countMap map associating elements with their respective counts
951 Converts iterable of objects to string and appends it to the specified Appendable. @param appendable target Appendable for appending the result @param parts iterable of objects to convert and append @return the same Appendable instance as input (since @CanIgnoreReturnValue)
952 Appends iterator of objects to a StringBuilder. @param builder StringBuilder instance @param parts Iterator containing elements to append @return the modified StringBuilder instance
953 Appends key-value pairs from the given map to the provided StringBuilder. @param builder StringBuilder to append to @param map Map containing key-value pairs to be appended
954 Joins an iterable of entries into a string. @param entries iterable of entries to be joined
955 Adds a value to the current holder and returns this helper. @param value object to be added (may be null)
956 Adds a named value to the builder. @param name property name @param value property value or null for omission
957 Adds boolean value to the toString representation. @param value true or false value to be added
958 Adds a character value to the toString helper. @return this instance of ToStringHelper for chaining.
959 Adds a double value to the builder. @param value the numerical value to be added
960 Adds float value to the current object representation. @param value float value to be included
961 Adds an integer value to the builder.
962 Adds a long value to the string representation. @param value the value to be added
963 Adds a boolean property to the helper with the specified name and value. @param name property name @param value true or false value
964 Adds a single character to the builder. @param name property name @param value character value
965 Adds a numeric field with the specified name and value. @param name field name @param value numeric field value
966 Adds a float value to the builder with the specified name. @param name unique identifier @param value numerical value
967 Adds an integer property with the given name and value. @param name property name @param value integer value to be added
968 Adds a long value to the builder with the specified name. @param name name of the property @param value long value to be added
969 Wraps a nullable reference into an Optional, returning absent if null. @param nullableReference the object to wrap or null @return Optional containing the object or empty if null
970 Initializes a new FluentIterable instance with no underlying iterable.
971 Returns the total size in bytes if known, otherwise absent. @return Optional<Long> containing size or null if unknown
972 Returns the length of this object (if known), as an optional Long value. @return Optional Long value containing the length if it can be determined, otherwise empty.
973 Returns the input string as is, unless it's null or empty, in which case returns null.
974 Parses a string into a HostAndPort object. @param hostPortString input string in various formats (e.g., "host:port", "[host]:port")
975 Skips specified number of elements in iterable and returns remaining elements. @param numberToSkip number of elements to skip
976 Returns an iterable that limits the number of elements to the specified maximum size. @param maxSize maximum number of elements to include
977 Retrieves an element from a collection at a specified index. @param iterable input collection (Iterable) @param position index of the desired element @param defaultValue value to return if element not found or null in collection @return T element at position, or defaultValue if not found
978 Retrieves an element from an Iterator at a specified position. @param iterator input Iterator containing elements to retrieve @param position index of desired element, must be non-negative
979 Retrieves an object from the iterator at a specified position. @param iterator iterator to navigate @param position index of desired object (0-based) @param defaultValue default value if iteration ends prematurely @return object at specified position or default value
980 Returns a traverser instance for navigating FILE_TREE. @return Traverser instance for FILE_TREE
981 Creates an input stream with a size limit. @param in original input stream @param limit maximum byte count to read from the stream
982 Converts BigInteger to IPv4 Inet4Address. @param address BigInteger representation of IP address
983 Converts IPv6 BigInteger to InetAddress object. @param address IPv6 address as BigInteger
984 Creates a SIP-24 hash function instance with specified key values. @param k0 first key value @param k1 second key value @return HashFunction object for cryptographic hashing
985 Initializes a new FileBackedOutputStream instance with the given file threshold. @param fileThreshold minimum file size to begin storing data in a file
986 Converts an integer IPv4 address to an Inet4Address object. @param address integer representation of IPv4 address
987 Reserves a specified number of permits and returns wait time. @param permits the number of permits to reserve
988 Tries to acquire specified permits with a timeout. @param permits number of permits to acquire @param timeout maximum time to wait in the specified unit @param unit TimeUnit for the timeout (e.g. seconds, milliseconds) @return true if acquired within the timeout, false otherwise
989 Writes strategy and hash data to OutputStream. @param out output stream where the data will be written
990 Creates a fixed-delay schedule with specified initial and subsequent delays. @param initialDelay initial wait time @param delay subsequent wait time
991 Creates a fixed-rate schedule with specified initial delay and execution period. @param initialDelay time before first execution @param period time between subsequent executions in nanoseconds
992 Converts a duration from a specified unit to safe nanoseconds. @param time duration value @param unit TimeUnit enumeration (e.g., SECONDS, MILLISECONDS) @return converted duration in nanoseconds, constrained within valid range
993 Creates and starts a stopwatch instance. @param ticker Ticker object used to initialize the stopwatch
994 Orders entries by their values using a custom comparator. @param valueComparator comparator to compare entry values @return Builder instance for method chaining
995 Sets the concurrency level for the map. @param concurrencyLevel desired concurrency level
996 Configures cache to evict entries after specified write time. @param duration time to wait before expiring entries in seconds
997 Configures the cache to expire entries after a specified access time. @param duration duration of inactivity before expiration
998 Configures cache to be refreshed after write operations. @param duration time interval before refreshing the cache
999 Sets key strength to Weak, allowing cache to hold keys without preventing GC. @return updated CacheBuilder instance
1000 Sets cache value strength to Weak. @return updated CacheBuilder instance
1001 Sets the value strength to SOFT.
1002 Configures the map to use weak keys.
1003 Sets map values to be held in WeakReferences. @return this MapMaker instance for chaining
1004 Returns the cause of the last failure. @return The root cause of the failure or null if not applicable
1005 Validates an element index within a given array size. @param index the index to validate @param size the array size @return the validated index or -1 if invalid
1006 Validates position index within given collection size. @param index position to be validated @param size collection size
1007 Validates array indices within specified bounds. @param start starting index @param end ending index @param size array size
1008 Creates a predicate that checks for equality to the specified target value. @param target object to compare against, can be null
1009 Filters a multimap based on the provided entry filter. @param multimap unfiltered multimap to filter @param entryPredicate predicate for each entry in the multimap @return filtered multimap containing entries that pass both filters
1010 Filters a Multiset using the given predicate. @param unfiltered Multiset to filter @param predicate condition for inclusion in filtered result @return filtered Multiset or null if input is FilteredMultiset
1011 Creates a Splitter instance with the specified character matcher as separator. @param separatorMatcher CharMatcher to match the separator character
1012 Creates a Splitter for fixed-length splits. @param length minimum split chunk size (must be > 0)
1013 Trims whitespace from results. @return Splitter instance with trimmed results
1014 Creates an unstarted stopwatch instance.
1015 Creates and starts a new stopwatch instance. @return started Stopwatch object
1016 Calculates the encoded length of a CharSequence in UTF-8. @param sequence input string @return encoded length as an integer, or throws exception if too large
1017 Waits indefinitely for the ExecutorService to terminate.
1018 Continuously cleans up and removes elements from the queue until cleanup fails.
1019 Initializes a new Builder instance.
1020 Creates a CacheLoader instance wrapping the given function. @param function a transformation function to load cache values
1021 Creates a cache loader from a supplier. @param supplier provides values to be cached
1022 Throws exception when loading all key-value pairs, forcing fallback to individual gets. @throws Exception if unsupported operation is encountered
1023 Calculates the hit rate as hits per request. @return Hit rate value or 1.0 if no requests have been made
1024 Calculates the miss rate by dividing missed requests by total requests. @return Miss rate as a double value, or 0.0 if no requests were made
1025 Creates an empty forwarding cache instance. @see com.google.common.cache.CacheLoader for loading values into the cache.
1026 Initializes an empty forwarding list. This constructor is used to create an instance of ForwardingList without any initial elements.
1027 Creates an empty forwarding multiset instance. @see ForwardingMultiset#delegate
1028 Initializes an empty forwarding queue.
1029 Creates an empty forwarding set. @see ForwardingSet#forwardingSet()
1030 Initializes an empty ForwardingListIterator instance.
1031 Initializes a new bi-map instance with provided maps. @param backward map of values to keys @param forward map of keys to values
1032 Initializes an empty forwarding concurrent map. @see ForwardingConcurrentMap#forwardingConcurrentMap()
1033 Initializes an empty forwarding sorted map.
1034 Initializes an empty map to store type instances.
1035 Initializes an empty ForwardingListMultimap instance.
1036 Initializes an empty multimap with default forwarding behavior.
1037 Creates an instance of this class.
1038 Constructs an empty ForwardingListenableFuture instance. This constructor is intended to be used by subclasses that need to wrap other types of futures.
1039 Creates a new reference entry. @param segment backing segment @param key unique key value @param hash computed hash code for the key @param next optional previous entry in the chain
1040 Creates a new reference entry with the given key and hash. @param segment the segment to store this entry in @param key the unique key for this entry @param hash the hash code of the key @param next the next entry in the chain, or null if this is the first entry
1041 Retrieves the result of an asynchronous computation. @return computed value or null if not available
1042 Performs cleanup tasks after write operation.
1043 Creates a weighted reference to a map value. @param segment the map segment @param entry the reference entry @param value the referenced value @param weight the value's weight in this reference
1044 Creates a weighted value reference. @param segment segment to add reference to @param entry entry containing the referenced value @param value referenced value @param weight weight of this reference
1045 Creates a weighted reference to a mapped value. @param segment segment containing the reference @param entry reference entry for the key-value pair @param value associated value with the reference @param weight weight of the reference in the segment
1046 Records access time and adds reference entry to recency queue. @param entry ReferenceEntry object with updated access time @param now current timestamp in milliseconds
1047 Records a locked read operation on the specified map entry. @param entry the affected ReferenceEntry @param now the current timestamp
1048 Records a write operation for the given map entry. @param entry ReferenceEntry object @param weight write operation weight @param now current timestamp
1049 Retrieves the live value associated with a given reference entry. @param entry ReferenceEntry object @param now current timestamp @return non-null V object or null if expired or invalid entry
1050 Calculates the size of an iterable. @param iterable collection or iterator to measure @return number of elements in the iterable
1051 Calculates the size of the multisets in this collection. @return The number of elements in the multisets
1052 Reads input into a sequence of buffers and returns as a byte array. @param in input stream @param bufs queue of buffers @param totalLen current total length of data read @return combined byte array or throws exception if too large
1053 Initializes this object with a bijective mapping from keys to values and back. @param forward key-value mapping @param backward value-key mapping, must be the inverse of forward
1054 Creates an empty range with a given comparator. @param comparator comparison function for the range
1055 Creates a GeneralRange object with the specified endpoint and direction. @param comparator comparison function for elements @param endpoint the end point of the range (inclusive) @param boundType specifies whether the range is inclusive or exclusive at the endpoint
1056 Creates a GeneralRange instance for values up to the specified endpoint. @param comparator comparison function @param endpoint target value @param boundType type of boundary (e.g. inclusive, exclusive)
1057 Creates a GeneralRange instance with specified bounds and comparator. @param comparator comparison function for range values @param lower lower bound value @param lowerType type of the lower bound (inclusive or exclusive) @param upper upper bound value @param upperType type of the upper bound (inclusive or exclusive)
1058 Computes the intersection of two ranges. @param other The range to intersect with @return A new range representing their intersection or null if empty
1059 Retrieves the next element without removing it from the iteration. @return The next element, or null if no elements are present
1060 Removes all values associated with a given key from the map. @param key unique identifier to remove @return Collection of removed values or empty unmodifiable collection if not found
1061 Validates iterator state and throws exception on concurrent modification. @throws ConcurrentModificationException if iterator has been modified concurrently
1062 Calls superclass put operation to store a new entry. @param key unique identifier for the stored object @param value associated data for the entry
1063 Inserts or updates a mapping from the specified key to the specified value. @param key unique identifier for the entry @param value associated data for the entry
1064 Retrieves a list of objects by key. @param key unique identifier @return List of V objects or null if not found
1065 Retrieves a set of values associated with the given key. @param key unique identifier or key
1066 Returns a set of map entries. @return Set of key-value pairs or null if not supported by map implementation
1067 Serializes the map's state to the given ObjectOutputStream. @throws IOException if serialization fails
1068 Converts a collection to a human-readable string representation. @param collection the collection to convert
1069 Converts a Map to a formatted string representation. @param map input map @return string in the format "{key=value, ...}"
1070 Creates an ArrayList with the specified estimated size. @param estimatedSize expected number of elements
1071 Creates a new HashMap with an initial capacity based on the expected size. @param expectedSize estimated number of key-value pairs
1072 Creates a linked hash map with an expected size. @param expectedSize the anticipated number of key-value pairs
1073 Creates a new HashSet with the specified expected size. @param expectedSize initial capacity and load factor for the set
1074 Creates a LinkedHashSet with the specified expected size. @param expectedSize estimated number of elements
1075 Returns an ArrayListMultimapBuilder with default expected values per key.
1076 Returns a multimap builder with hash set values. @return MultimapBuilder instance
1077 Returns a multimap builder with linked hash sets as values.
1078 Returns a new MultimapBuilder instance with hashed keys.
1079 Creates a MultimapBuilder with linked hash keys. @return MultimapBuilder instance with linked hash keys
1080 Creates an immutable multiset entry with a specified count. @param e element to be included in the entry @param n number of occurrences of the element
1081 Calculates set count based on the given element and count. @param element the element to consider @param count the initial count value @return updated set count value
1082 Updates set count by adding or removing an element. @param element the element to add or remove @param oldCount current set size @param newCount updated set size after modification
1083 Calculates hash code based on internal map state. @return unique integer representing this object's state
1084 Returns a string representation of this object's properties.
1085 Returns a set of multiset entries. @return Set of Multiset.Entry objects.
1086 Computes hash code based on the set of key-value pairs in this map. @return The hash code as an integer
1087 Returns a string representation of this map. @return A string containing key-value pairs in the format {key=value, ...} or an empty string if empty.
1088 Retrieves the first entry from this map's entry set. @return First Entry object or null if empty
1089 Returns the smallest element in the tail set of the given value. @param e the input value @return the ceiling value or null if not found
1090 Retrieves the next (higher) element in this set relative to the given element. @param e the reference element @return the next higher element or null if not found
1091 Creates an empty {@link TreeRangeSet} instance with a custom comparator.
1092 Checks if a given value is within the bounds of the interval. @param value the value to check
1093 Checks if the provided comparator is the same as the one used to sort the given iterable. @param comparator the comparator to compare @param elements the iterable to check @return true if comparators are equal, false otherwise
1094 Inserts all data from another table into this one. @param table Table to copy data from
1095 Returns an unmodifiable set of cells in this data structure. @return Unmodifiable set of Cell objects or empty set if none exist.
1096 Returns the set of cells in this data structure. @return Unmodifiable set of Cell objects.
1097 Returns an unmodifiable Collection of all values in this map.
1098 Returns a collection of values associated with this map. @return Unmodifiable collection of values or null if not found
1099 Creates an ordering based on the result of applying a given function. @param function Function to apply to elements for ordering
1100 Creates an ordering instance from a comparator. @param comparator the input comparator to use for ordering
1101 Combines this ordering with the given secondary comparator. @param secondaryComparator additional ordering criteria @return a new CompoundOrdering instance
1102 Creates an immutable cell with the specified key-value pair. @param rowKey row identifier @param columnKey column identifier @param value cell value
1103 Checks if a table cell exists by combining row and column key existence checks. @param rowKey unique row identifier (can be null) @param columnKey unique column identifier (can be null) @return true if the cell exists, false otherwise
1104 Creates an immutable map entry with the given key and value. @param key unique key of type K @param value associated value of type V
1105 Creates an immutable map entry from a given entry or builds a new one. @param entry existing entry to reuse (if possible) @param key unique key for the new entry @param value associated value for the new entry @return ImmutableMapEntry instance
1106 Inserts key-value pair into the map as a single operation. @param entry non-null Entry object containing key and value
1107 Sets a value associated with a given key and returns this builder. @param key unique key identifier @param value associated value
1108 Dynamically resizes array of entries based on provided size. @param newSize desired size
1109 Inserts a new entry at the specified index with given key and value. @param entryIndex position to insert the entry @param key unique key for the entry @param value associated value for the entry @param hash combined hash value @param mask combined mask value
1110 Resizes the internal entry array if necessary to accommodate a new size. @param newSize desired capacity
1111 Inserts a new entry at the specified index with given hash and mask. @param entryIndex position where entry will be inserted @param object data to store in the entry @param hash unique identifier for the entry @param mask bit mask to apply during insertion
1112 Allocates and initializes arrays for storing key-value entries. @return the expected size of the allocated arrays
1113 Allocates arrays for storing entries and elements. @return Expected size of the allocated arrays
1114 Checks if this range encloses another. @param other Range to check, must not be null
1115 Checks if two ranges overlap. @param other Range object to check for overlap @return true if ranges intersect, false otherwise
1116 Writes object graph to ObjectOutputStream. This method serializes the object's internal state and associated data structures. @throws IOException if write operation fails
1117 Creates a new instance of the Builder class. @return A new Builder object with default settings.
1118 Creates a new instance of Builder with specified type constraint C. @param none @return Builder instance with type parameter C
1119 Creates a new instance of the Builder class. @return Builder object
1120 Returns an unmodifiable iterator over elements of this collection.
1121 Calculates the frequency of a given element in an iterable. @param iterable input collection (set, multiset, or other iterable) @param element target object to count occurrences @return frequency of element in iterable
1122 Checks if this map contains a specific key. @param key the key to search for (may be null)
1123 Checks if this map contains a specific value. @param value object to search in the map
1124 Returns lower entry key after applying standard lower case conversion. @param key input key to convert and find lower entry for @return converted key or null if not found
1125 Returns the standard floor key from the given key. @param key the input key @return Standard floor key or null if not found
1126 Returns the smallest ceiling key in the map. @param key the input key @return the smallest ceiling key or null if not found
1127 Returns the higher key in the map or null if no such entry exists. @param key the key to find a higher entry for @return higher key or null
1128 Returns the key of the first entry in this map.
1129 Retrieves and returns the key of the last entry in this map. @return the key of the last entry or throws NoSuchElementException if empty
1130 Returns the last entry in this map. @return the last entry or null if empty
1131 Retrieves and removes the last entry from the map. @return Entry object or null if empty
1132 Returns a set of keys in descending order. @return Set of keys in descending order
1133 Returns a sorted sub-map of key range [fromKey, toKey]. @param fromKey start of key range (inclusive) @param toKey end of key range (exclusive)
1134 Retrieves the lowest-mapped entry with a key less than or equal to the specified value. @param key the upper bound of the search range @return the lowest-mapped entry or null if not found
1135 Retrieves the last entry in the submap of keys less than or equal to the specified key. @param key key to determine the submap @return Entry object or null if map is empty
1136 Returns a view of the map's portion that maps only keys greater than {@code toKey}. @param toKey key value up to which the map is truncated @return a new SortedMap instance or null if map is empty
1137 Retrieves the entry with the smallest value greater than or equal to the specified key. @param key the reference key @return Entry object or null if not found
1138 Retrieves the entry with a higher key than the given key. @param key key to start searching from @return Entry object or null if no entries found
1139 Returns a view of this map's portion of the range [fromKey, ) to the end. @param fromKey key from which to start the view
1140 Creates a sub-multiset with elements within the specified bounds. @param lowerBound lower bound of the range (inclusive) @param lowerBoundType type of the lower bound @param upperBound upper bound of the range (inclusive) @param upperBoundType type of the upper bound
1141 Creates a new instance of HashBasedTable with default settings. @return empty HashBasedTable object
1142 Deserializes an EnumMultiset object from the given ObjectInputStream. @throws IOException on serialization errors @throws ClassNotFoundException if unknown class is read
1143 Moves the last entry to a specified index in the table. @param dstIndex target index @param mask hash mask used for pointer updates
1144 Moves the last entry to a specified location in the table and updates associated pointers. @param dstIndex index where the last entry will be moved @param mask used for hash calculations
1145 Checks if a specified object value is present in the map. @param value target object to search for @return true if found, false otherwise
1146 Creates a builder with an expected size. @param expectedSize the anticipated number of elements
1147 Initializes a new instance of Builder.
1148 Creates a new instance of the Builder class. @return A Builder object with default configuration
1149 Initializes the builder with a custom key comparator. @param comparator key comparison function
1150 Creates an immutable bi-map with a single entry. @param k1 key @param v1 value
1151 Adds a unique element to the collection. @param e unique element to be added
1152 Initializes builder with default capacity. @param initialCapacity initial size of the collection
1153 Creates an Immutable List Builder with specified initial capacity. @param expectedSize the anticipated size of the list
1154 Adds all elements from an iterable to the builder. @param elements iterable of elements to be added
1155 Adds all elements from an iterator to the builder. @param elements iterable of elements to be added
1156 Adds all elements from an iterator to the builder. @param elements iterator containing elements to add
1157 Creates a serialized form of this object. @return Serialized representation or null if not applicable
1158 Creates an immutable table with a single entry. @param rowKey unique row identifier @param columnKey unique column identifier @param value the table's value
1159 Returns a string representation of this instance, delegated to its underlying object.
1160 Adds a collection of values to the map under a given key. @param key unique key identifier @param values iterable of values to store
1161 Retrieves the single element from an iterable. If empty or null, returns default value. @param iterable collection of elements @param defaultValue to return if iterable is empty or null @return single element from iterable or default value
1162 Retrieves the last element from an iterable, or a default value if empty. @param iterable input collection (may be null) @param defaultValue returned when iterable is empty @return T last element of iterable, or defaultValue
1163 Inserts or updates a key-value pair into the map. @param key unique key for the entry @param value associated value for the entry
1164 Partitions a list into chunks of specified size. @param list input list to partition @param size chunk size @return List of sub-lists or null if invalid parameters
1165 Finds index of specified element in list. @param element object to search for @return non-negative index if found, -1 otherwise
1166 Returns the standard last index of the given element in this list. @param element object to search for
1167 Performs locked cleanup before writing.
1168 Creates an empty TreeRangeMap instance. @return A new, uninitialized instance of TreeRangeMap.
1169 Finds the minimum element in a sorted subarray within a larger array. @param index starting index of the subarray @param len length of the subarray @return index of the minimum element or -1 if out of bounds
1170 Returns index of maximum element in queue or max heap.
1171 Returns the first element without removing it from the collection. @return First element of the collection or null if empty
1172 Moves an element up the heap by alternating between parent and grandparent indices. @param index current index in the heap @param x element to be moved up @return new index of the moved element
1173 Returns an iterator over the elements in this multiset.
1174 Concatenates a single element with an array. @param element the element to insert @param array the original array @return new array containing all elements from the original array and the inserted element
1175 Converts a Collection to an array of specified type. @param c the collection to convert @param array the target array (will be resized if necessary) @return the converted array or null if array was unsoundly covariant
1176 Finds the smallest element in an iterable collection. @param iterable collection of elements to search
1177 Returns maximum element from an iterable. @param iterable collection of elements to search
1178 Returns string representation of this object based on its contained range. @return formatted string representing the range
1179 Creates a GeneralRange from an existing Range, preserving bounds and types. @param range the input Range to transform
1180 Extracts a sub-map from the given NavigableMap, based on the provided Range. @param map input map @param range bounds to extract @return sub-map or original map if no bounds are specified
1181 Extracts a subset from the given navigable set within the specified range. @param set NavigableSet to extract from @param range Range defining the subset boundaries @return Subset of K values or null if input set is null and empty
1182 Returns a sorted map of rows with column maps. @return a SortedMap containing Row keys and Column-based Map values
1183 Wraps a Queue in a synchronized implementation. @param queue the original Queue to synchronize. @return synchronized Queue instance
1184 Initializes escaper with replacement array and safe character range. @param escaperMap ArrayBasedEscaperMap instance @param safeMin minimum safe character value @param safeMax maximum safe character value
1185 Initializes an ArrayBasedUnicodeEscaper with a given escaper map and range limits. @param escaperMap the array-based escape map @param safeMin minimum safe code point value @param safeMax maximum safe code point value @param unsafeReplacement replacement string for unsafe characters (may be null)
1186 Creates a PercentEscaper with specified safe characters and plus-for-space behavior. @param safeChars string of allowed characters @param plusForSpace true to escape '+' as '%2B', false otherwise
1187 Escapes special characters in the input string. @param string the input string to be escaped
1188 Creates a subscriber to the event bus with the given listener and method. @param bus EventBus instance @param listener Object listening for events @param method Method to invoke on event reception @return Subscriber or synchronized subscriber based on thread safety
1189 Returns a string representation of the graph, including its directed status, self-loop allowance, number of nodes and edges.
1190 Returns a set of graph edges as EndpointPairs. @return Set of EndpointPairs representing graph connections
1191 Returns a set of all edges in the graph. @return Set of EndpointPair objects representing graph edges
1192 Adds a double value to the hash. @param d the value to be added @return this hasher instance
1193 Configures a collector for generating a Bloom filter with default error rate. @param funnel funnel function to process elements @param expectedInsertions estimated number of unique elements
1194 Calculates the expected False Positive Probability (FPP). @return FPP value as a decimal
1195 Checks if two Bloom filters are identical in structure and strategy. @param that the other Bloom filter to compare with
1196 Converts an unsigned byte value to its decimal string representation. @param x unsigned byte value @return decimal string representation or null if invalid input
1197 Combines the underlying bit arrays of two BloomFilters. @param that the BloomFilter to combine with
1198 Creates an immutable hash code from the provided byte array. @param bytes input byte array
1199 Creates a hash code instance from an integer value. @param hash int value to be wrapped
1200 Creates a HashCode instance from a given long hash value. @param hash unique identifier represented as a long integer
1201 Converts the underlying long value to a floating-point number. @return The numeric value as a float.
1202 Returns the double value representation of this number. @return the numeric value as a double
1203 Converts long value to BigInteger representation. @return BigInteger equivalent of the long value
1204 Generates a concatenated hash function with the specified minimum bits. @param minimumBits minimum number of bits in the resulting hash function
1205 Calculates consistent hash bucket index. @param hashCode HashCode object @param buckets number of buckets in the ring @return index of the bucket where the key should reside
1206 Creates an HMAC-MD5 hash function instance. @param key secret key for the HMAC operation
1207 Creates an HMAC-SHA1 hash function with the given secret key. @param key secret key for HMAC calculation
1208 Creates an HMAC-SHA-256 hash function instance. @param key secret key for the hash function
1209 Creates an HMAC-SHA-512 hash function instance. @param key secret key for the HMAC algorithm
1210 Concatenates multiple byte sources into a single source. @param sources iterable of byte sources to concatenate
1211 Concatenates an iterable of CharSources into a single source. @param sources iterable of CharSources to concatenate
1212 Creates a new ByteArrayDataInput instance from the given byte array. @param bytes input byte array
1213 Creates a new byte output stream with default settings. @return ByteArrayDataOutput instance
1214 Creates a new byte output stream with the specified initial buffer size. @param size the initial buffer size
1215 Initializes a new ReaderInputStream with the specified reader, character set, and buffer size. Malformed input is replaced.
1216 Counts the number of bytes in the input stream by skipping up to max value. @param in InputStream to read from @return total byte count or -1 on IOException
1217 Skips fully up to the specified number of bytes in the input stream. @param in InputStream to skip from @param n number of bytes to skip @throws IOException if an I/O error occurs or EOF is reached early
1218 Writes an iterable of lines to the output stream using the specified line separator.
1219 Writes an iterable of character sequences to the underlying output stream using the specified line separator. @param lines iterable of text lines @param lineSeparator string used to separate lines in output
1220 Iterates over each line of a file, executing the provided action. @param action Consumer function to process each line
1221 Reads all lines from a readable source into a list. @param r the source to read from @return list of strings, one per line
1222 Reads lines from a readable source and processes them using the given processor. @param readable source of text to read @param processor LineProcessor instance to process each line @return result object returned by the processor, or null if not applicable
1223 Expands or shifts the character buffer to read more input characters.
1224 Reads an unsigned short integer value from the input stream. @return unsigned short integer value as a short
1225 Reads and returns a single character from the input stream.
1226 Reads and converts an integer value to a floating-point number. @return the read float value or NaN if conversion fails
1227 Reads and converts a long value from input into a double. @throws IOException if an I/O error occurs during reading
1228 Writes a string of characters to output stream. @param s input string to be written
1229 Writes double value to output stream. @param v double value to be written
1230 Recursively deletes directory contents and returns any encountered IOExceptions. @param dir DirectoryStream of entries to delete @return Collection of IOExceptions or null if no errors occurred
1231 Recursively deletes a directory and its contents in a secure manner. @param dir SecureDirectoryStream to the top-level directory @param path Path to the directory/file to delete @return Collection of IOExceptions that occurred during deletion, or null if successful
1232 Constructs a new MultiInputStream from an iterator of byte sources. @param it iterator of byte sources to combine
1233 Converts to a CharSource representation with specified charset. @param charset character encoding to use
1234 Calculates permutations of input list using given comparator. @param sortedInputList input list to calculate permutations for @param comparator comparator to determine order relationships @return number of permutations or Integer.MAX_VALUE if overflow occurs
1235 Calculates the arithmetic mean of a sequence of numbers. @param values iterator over numbers to average
1236 Checks if a given double value is a power of two. @param x the input value to check
1237 Checks if a double value represents a mathematical integer. @param x the input double value to check @return true if x is an integer, false otherwise
1238 Rounds a long value to a double using the specified rounding mode. @param x value to be rounded @param mode rounding mode (e.g. HALF_UP, FLOOR, CEILING)
1239 Compares two doubles with a given tolerance, returning an integer indicating their relative order. @param a first double value @param b second double value @param tolerance allowed difference between values @return -1 if a < b, 0 if a == b within tolerance, 1 if a > b
1240 Calculates optimal number of runs before fallback based on table size. @param tableSize total rows in the table
1241 Trims the sorted array to contain only the k smallest elements. @param k number of desired elements
1242 Computes base-10 logarithm of an integer with specified rounding mode. @param x input value (must be positive) @param mode rounding mode (e.g. FLOOR, CEILING, etc.) @return log10(x) as an integer
1243 Computes square root of a number with specified rounding mode. @param x the input value @param mode the rounding mode (e.g. UNNECESSARY, FLOOR)
1244 Calculates a new capacity for the queue based on its current size. @return New capacity with growth strategy (doubling for small sizes, halving and tripling for large sizes) capped at the maximum allowed size.
1245 Creates a horizontal linear transformation with specified y-value. @param y vertical position of the line
1246 Creates a LinearTransformation with the specified slope. @param slope the desired slope (must be finite) @return a new LinearTransformation instance
1247 Creates a vertical linear transformation with given scale factor. @param x scale factor
1248 Calculates the factorial of a given integer using efficient multiplication techniques. @param n non-negative integer input value @return BigInteger representation of the factorial result or null if not found
1249 Computes base-10 logarithm of a long value with specified rounding mode. @param x the input value (must be positive) @param mode RoundingMode to apply @return integer part of log10(x) or throws AssertionError if invalid mode
1250 Simplifies fraction multiplication by reducing the input values using GCD. @param x number to multiply @param numerator and @param denominator input fraction
1251 Computes the power of a long value using exponentiation by squaring. @param b base value @param k exponent (non-negative integer) @return result as a long (may overflow for very large bases and exponents)
1252 Calculates population covariance by dividing sum of products of deltas by count of data points. @return Population covariance value or NaN if count is zero.
1253 Calculates sample covariance as the sum of products of deltas divided by count minus one. @return Sample covariance value
1254 Calculates Pearson's correlation coefficient. @return double value in range [-1, 1] or NaN if invalid input
1255 Calculates the mean of a sequence of numbers. @param values iterator over values @return calculated mean or NaN if non-finite values present
1256 Updates running statistics with a new data point. @param value the new data point
1257 Calculates sample covariance between data points and their mean. @return Covariance value or NaN if count is zero
1258 Calculates sample covariance. @return Sample covariance value or NaN if count < 2
1259 Calculates Pearson's correlation coefficient. @return Correlation value or NaN if invalid data
1260 Partitions the array around a pivot element using QuickSelect algorithm. @param array input array to be partitioned @param from starting index of the slice @param to ending index of the slice @return partition point around which the array is sorted
1261 Creates PairedStats object from a byte array. @param byteArray input data in little-endian format
1262 Creates a Stats object from the given byte array. @param byteArray byte representation of Stats data
1263 Creates a PairedStats object by snapshotting x and y stats.
1264 Returns current statistics snapshot. @return Stats object containing current data
1265 Retrieves current statistics snapshot.
1266 Creates a collector that accumulates numbers into a stats object. @return Collector instance
1267 Converts InetAddress object to URI string. @param ip the address to convert @return URI string representation of the address, or null if invalid
1268 Extracts the IPv4 address from an IPv6 address that is IPv4-compatible. @param ip IPv6 address @return Inet4Address object representing the embedded IPv4 address
1269 Extracts IPv4 address from a given 6to4 IPv6 address. @param ip 6to4 IPv6 address
1270 Extracts the embedded IPv4 address from an ISATAP address. @param ip Inet6Address containing the ISATAP address @return Inet4Address representing the embedded IPv4 address
1271 Computes average value of numbers in the provided collection. @param dataset collection of numeric values @return computed average value
1272 Computes statistics and returns a map of key-value pairs. @return Map with keys as integers and values as doubles
1273 Adds a double value to the builder's capacity. @param value the value to be added
1274 Adds all elements from the specified array to the builder's collection. @param values array of double values to add
1275 Adds all specified double values to the builder's array. @param values collection of double values
1276 Adds all elements from the given double array to this builder. @param values double array to add elements from
1277 Creates an immutable array containing a single double value. @param e0 the value to be contained in the array
1278 Creates an immutable array containing two specified double values. @param e0 first double value @param e1 second double value
1279 Creates an ImmutableDoubleArray with three elements. @param e0 first element value @param e1 second element value @param e2 third element value
1280 Creates an ImmutableDoubleArray instance with four elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element
1281 Creates an immutable array of doubles with the specified elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @param e4 fifth element
1282 Creates an immutable array of doubles with the specified values. @param e0 first value @param e1 second value @param e2 third value @param e3 fourth value @param e4 fifth value @param e5 sixth value
1283 Creates an immutable double array from a given array. @param values the input array to copy (may be empty)
1284 Creates an immutable double array from a collection of doubles. @param values collection of doubles to copy
1285 Copies a DoubleStream into an ImmutableDoubleArray. @param stream input stream of doubles @return ImmutableDoubleArray representation or EMPTY if empty
1286 Returns a trimmed version of this array, or itself if not partial view.
1287 Checks if a specified value exists in this collection. @param target the value to search for
1288 Adds an integer value to the builder's collection. @param value integer value to be added
1289 Adds all elements from the provided array to this builder's collection. @param values array of integers to add
1290 Adds all integers from a collection to the builder's array. @param values collection of integers to add
1291 Adds all elements from the specified ImmutableIntArray to this builder. @param values ImmutableIntArray containing elements to add
1292 Creates an immutable array containing a single element. @param e0 the initial element value
1293 Creates an ImmutableIntArray with two elements. @param e0 first element value @param e1 second element value
1294 Creates an immutable array with three elements. @param e0 first element @param e1 second element @param e2 third element
1295 Creates an immutable array with four integer elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element
1296 Creates an ImmutableIntArray with the specified elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @param e4 fifth element
1297 Creates an immutable array with the specified elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @param e4 fifth element @param e5 sixth element
1298 Creates an immutable integer array from a given array. @param values input array to be copied
1299 Creates a copy of the given IntStream as an immutable int array. @param stream input IntStream to be copied
1300 Returns a trimmed view of this array, or a copy if it's a partial view. @return ImmutableIntArray instance with updated size
1301 Adds an integer value to the builder's underlying data structure. @param value long integer value to be added
1302 Adds all specified values to the builder's array. @param values array of long values to add
1303 Adds all specified IDs to the builder's collection. @param values Collection of unique long identifiers
1304 Adds all elements from the given immutable long array to this builder. @param values long array to append
1305 Creates an ImmutableLongArray with a single element. @param e0 the value to be stored in the array
1306 Creates an immutable array with two elements. @param e0 first element value @param e1 second element value
1307 Creates an immutable array with three elements. @param e0 first element @param e1 second element @param e2 third element
1308 Creates an array with four elements from the given values. @param e0 first element value @param e1 second element value @param e2 third element value @param e3 fourth element value
1309 Creates an ImmutableLongArray from five individual elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @param e4 fifth element
1310 Creates an ImmutableLongArray instance with the specified elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @param e4 fifth element @param e5 sixth element
1311 Creates an immutable long array from the given long array. @param values original long array
1312 Creates an immutable long array by copying a LongStream into it. @param stream the input LongStream to copy from
1313 Returns a trimmed version of the array, or the original if not partial view.
1314 Creates a ScaleAndIndexes object from a collection of integer indexes. @param indexes collection of integer indexes to scale
1315 Creates an immutable integer array from the given collection of integers. @param values Collection of integers to be copied @return ImmutableIntArray object or EMPTY if input is empty
1316 Creates an immutable long array from a collection of long values. @param values collection of long values
1317 Tries to parse a string into an integer with specified radix. @param string input string to parse @param radix base of the number in the input string @return parsed int value or null if parsing fails or is invalid
1318 Tries to parse a string into a long value using base 10. @param string input string to be parsed
1319 Decodes a string representation of an unsigned integer. @param stringValue string to parse, must conform to ParseRequest format
1320 Creates an UnsignedInteger from a long value. @param value long value to convert, must be within unsigned int range
1321 Converts BigInteger to UnsignedInteger. @param value arbitrary-precision integer @return UnsignedInteger object or throws if invalid
1322 Parses unsigned integer from string representation in specified radix. @param string string representation of unsigned integer @param radix base of the number in the string (e.g. 10 for decimal) @return UnsignedInteger value or throws exception on parsing error
1323 Adds two unsigned integers together. @param val integer to be added @return result of addition as UnsignedInteger
1324 Subtracts another unsigned integer value. @param val value to subtract @return result of subtraction (or null if input is invalid)
1325 Computes the product of two unsigned integers. @param val value to multiply with @return product as an UnsignedInteger object
1326 Divides this UnsignedInteger by another. @param val divisor value @return quotient as UnsignedInteger or throws if division is zero
1327 Computes remainder of this unsigned integer value divided by another. @param val the divisor
1328 Returns a string representation of the object using the default formatting. @return A formatted string with a maximum length of 10 characters.
1329 Compares this UnsignedInteger with another. @param other UnsignedInteger to compare with @return negative/positive/zero if this < / > / == other
1330 Converts a non-negative long to an UnsignedLong. @param value non-negative long value
1331 Converts a BigInteger to an UnsignedLong, checking for valid range. @param value BigInteger value to convert
1332 Adds an unsigned long value to this instance. @param val value to add @return new UnsignedLong result
1333 Subtracts another unsigned long value and returns the result. @param val value to subtract @return resulting unsigned long value
1334 Multiplies two unsigned long values. @param val value to be multiplied @return product as an UnsignedLong object
1335 Computes the division of two 64-bit integers. @param dividend number to be divided @param divisor non-zero integer divisor @return quotient as a long value
1336 Calculates the remainder of two integers. @param dividend number to get remainder from @param divisor non-zero divisor value @return remainder as a long integer
1337 Parses unsigned long integer from string representation. @param string input string to parse @param radix base of the input number (e.g., 10 for decimal)
1338 Converts a string to an unsigned long integer using base 10. @param string input string to parse
1339 Decodes a string representation of an unsigned long integer. @param stringValue string to parse
1340 Checks if the access level of this member is package-private.
1341 Wraps the TypeToken in a non-primitive type, if applicable. @return the wrapped TypeToken or itself, if already non-primitive
1342 Unwraps the TypeToken, returning its underlying primitive type if it's a wrapper. @return the unwrapped TypeToken or the original token if not a wrapper
1343 Retrieves the component type of this type token, or null if none.
1344 Retrieves the computed value, blocking until completion. @throws InterruptedException if interrupted while waiting @throws ExecutionException if computation failed
1345 Submits a task to the executor service and adds its result to a blocking queue. @param executorService ListeningExecutorService instance @param task Callable task to be executed @param queue BlockingQueue of Future objects @return ListenableFuture representing the submitted task's result
1346 Awaits the service to be running with optional timeout. @param timeout maximum time to wait, may throw TimeoutException if exceeded
1347 Waits until service is running within specified duration. @param timeout maximum waiting time
1348 Waits until service is running within specified time limit. @param timeout maximum duration to wait
1349 Awaits service running with specified timeout. @param timeout maximum duration to wait
1350 Waits until the service has terminated or times out. @param timeout maximum time to wait before throwing a TimeoutException
1351 Awaits termination of this service instance within a specified time duration. @param timeout maximum wait time before throwing TimeoutException
1352 Waits for service termination within specified duration. @param timeout maximum time to wait in Duration format
1353 Awaits termination of service instance within specified time duration. @param timeout maximum waiting period @throws TimeoutException if termination not achieved within given time
1354 Collects and processes a non-cancelled future's value. @param index position of the future in the collection @param future completed input to process
1355 Accumulates and adds the given delta to the current value. @param delta value to add to the current value
1356 Adds a value to an accumulated sum and returns the new sum. @param delta value to be added @return updated sum or NaN if previous sum was NaN
1357 Adds delta to value at index i and returns new sum. @param i unique index identifier @param delta value to add
1358 Accumulates and adds a delta to an integer value, returning the result. @param i initial value @param delta value to be added @return accumulated value as a double
1359 Cancels the asynchronous operation and closes associated resources. @param mayInterruptIfRunning whether to interrupt running tasks @return true if cancellation was successful, false otherwise
1360 Recursively finds a path of allowed prior locks from the given node. @param node current lock graph node @param seen set of nodes already traversed @return ExampleStackTrace object or null if no valid path found
1361 Creates a ListenableFutureTask from a Callable. @param callable user-provided task to execute
1362 Creates an asynchronous task with a specified result. @param runnable the task to be executed @param result the expected result of the task
1363 Executes a list of tasks upon completion.
1364 Creates a new instance of ExecutionSequencer.
1365 Converts a ListenableFuture into a FluentFuture. @param future the future to convert, may be null
1366 Propagates non-cancellation status from input future to output. @param future input future to propagate non-cancellation from @return a new future with non-cancellation propagated or the original if already done
1367 Reloads the value associated with the given key. @param key unique key identifier @param oldValue previously loaded value (for comparison) @return ListenableFuture containing new value or null if not updated
1368 Adds an event to the queue, where L is the type of data associated with the event. @param event Event object to be queued
1369 Enqueues an event with the specified label. @param event Event object to be enqueued @param label Unique identifier or label for the event
1370 Dispatches events to registered listeners if currently not occupied by this thread.
1371 Dispatches listener events while ensuring exclusive access is not held.
1372 Signals the next waiting thread that its condition is satisfied. @param lock object that guards this method
1373 Submits an asynchronous task to the specified executor. @param callable asynchronous operation to execute @param executor execution context for the task @return ListenableFuture representing the outcome of the task
1374 Schedules an asynchronous operation with a specified delay and executor service. @param callable asynchronous operation to execute @param delay time to wait before execution, in specified time unit @param timeUnit time unit for delay (e.g. milliseconds) @return ListenableFuture representing the scheduled task
1375 Creates a future task for the given callable, wrapping it in a trust-enabled future. @param callable user-provided computation to be executed
1376 Submits a blocking task for execution on the specified executor. @param callable the task to execute @param executor the executor to use @return ListenableFuture representing the result of the task, or null if cancelled.
1377 Creates a new task for the given Runnable and result. @param runnable the task to be executed @param value the result of the task @return RunnableFuture containing the task and result
1378 Executes a Runnable asynchronously using the provided Executor. @param runnable task to be executed @param executor thread pool for execution @return ListenableFuture representing the asynchronous task
1379 Tries to acquire the semaphore uninterruptibly within the specified time-out. @param semaphore the semaphore to acquire @param timeout duration to wait for acquisition
1380 Returns the first element of this iterable, or an empty Optional if empty. @return First element as Optional, or absent if not found
1381 Returns the last element in this collection, or an empty Optional if it's empty. @return The last element, or null if not found (wrapped in an Optional)
1382 Finds the first element matching a predicate in an iterable. @param iterator non-null iterable to search @param predicate non-null predicate to apply to elements @return Optional containing matching element or empty if not found
1383 Sets the expected node count for graph construction. @param expectedNodeCount non-negative integer value @return GraphBuilder instance for method chaining
1384 Sets the expected node count for the graph. @param expectedNodeCount non-negative number of nodes
1385 Sets the expected edge count and returns this builder instance. @param expectedEdgeCount non-negative integer value
1386 Sets the expected number of nodes in the graph. @param expectedNodeCount non-negative integer node count
1387 Checks if any element in the given iterable matches the provided predicate. @param iterable the input iterable to search @param predicate the condition to match elements against @return true if at least one element satisfies the predicate, false otherwise
1388 Creates predicate to check if CharSequence matches a given pattern. @param pattern the regular expression pattern as string
1389 Propagates a throwable if possible, using the specified type. @param throwable the throwable to propagate @param declaredType the type of exception to throw
1390 Retrieves cached hierarchical class set for given concrete class. @param concreteClass Class instance to fetch hierarchy for
1391 Returns a thread factory for the current platform, falling back to default if not App Engine.
1392 Checks if the collection contains the specified element. @param target element to search for @return true if found, false otherwise
1393 Combines a filtered multimap with an additional filter. @param multimap original filtered multimap @param entryPredicate additional entries to filter by @return new filtered multimap with combined predicate
1394 Filters keys in a ListMultimap using the provided predicate. @param unfiltered input multimap @param keyPredicate condition to filter keys by @return filtered ListMultimap or new instance with updated filtering if necessary
1395 Filters elements based on the given class type. @param type class to match (e.g. Integer.class, String.class)
1396 Removes all elements from this set and adds them to the given collection. @param collection collection to add elements to @return true if successful, false if not (e.g. null collection)
1397 Creates an EnumMultiset from the provided iterable of enum elements. @param elements iterable of enum values
1398 Creates a new linked list from the given iterable elements. @param elements iterable collection of elements to add @return newly created LinkedList instance
1399 Creates a new ArrayDeque instance from an iterable of elements. @param elements Iterable containing elements to initialize the deque @return ArrayDeque populated with elements or empty if none provided
1400 Creates a concurrent linked queue from an iterable collection. @param elements input iterable to initialize the queue
1401 Creates a LinkedBlockingDeque from an iterable collection. @param elements input iterable (e.g. Collection or array) @return a populated LinkedBlockingDeque
1402 Creates a LinkedBlockingQueue from an iterable of elements. @param elements input iterable (e.g. Collection or array) @return populated LinkedBlockingQueue or empty if null input
1403 Creates a priority blocking queue from an iterable of comparable elements. @param elements iterable containing elements to add to the queue
1404 Creates a priority queue from the given iterable of comparable elements. @param elements iterable containing elements to be added to the queue
1405 Creates an EnumSet from the given iterable of enum elements. @param iterable collection of enum values @param elementType type of enum being populated @return EnumSet containing all enum values in the iterable
1406 Creates a concurrent hash set from an iterable collection. @param elements the input iterable @return a concurrent hash set containing all elements
1407 Creates a linked hash set from an iterable collection. @param elements input iterable containing unique elements
1408 Creates a sorted TreeSet from an iterable of comparable elements. @param elements input iterable @return TreeSet object containing the input elements
1409 Converts an iterable to a collection, preserving type E if possible. @param iterable input iterable to be converted @return Collection of type E or null if not found
1410 Creates a new ArrayList instance from an iterable collection. @param elements input iterable of objects to populate the list
1411 Creates a new HashSet from an iterable collection. @param elements input iterable containing elements to be added @return HashSet instance or null if iterable is empty
1412 Checks if all elements match the given predicate. @param predicate functional interface to apply to each element
1413 Creates a list iterator starting at the specified index. @param start the index to begin iterating from
1414 Converts a sorted set to a map with values computed by the given function. @param set input sorted set @param function function to compute map values from keys
1415 Transforms entries in a sorted map using the provided entry transformer. @param fromMap original sorted map @param transformer entry transformation function @return transformed sorted map with new values
1416 Transforms map values using a given function. @param fromMap input map to transform @param function mapping function for each value @return new map with transformed values
1417 Adds specified element occurrences and returns its previous count. @param element element to add @param occurrences number of times to add the element @return previous count of the element or 0 if not present
1418 Atomically adds occurrences of an element to the map and returns the old count or 0 if removed. @param element unique identifier @param occurrences number of times to add
1419 Transforms entries in a multimap using the provided transformer. @param fromMap original multimap @param transformer entry transformation function @return transformed ListMultimap with new key-value pairs
1420 Transforms values in a multimap using the provided function. @param fromMultimap source multimap @param function transformation function @return new multimap with transformed values
1421 Adds all elements from the given iterable to the builder. @param elements collection of elements to add @return this builder instance for method chaining
1422 Adds all elements from the provided collection to this multiset. @param self the multiset to modify @param elements elements to add @return true if any elements were added
1423 Alias for checking if this collection contains a given element. @param input the element to search for @return true if contained, false otherwise
1424 Converts stream elements to a Table using provided functions. @param rowFunction maps element to row key @param columnFunction maps element to column key @param valueFunction maps element to table value @param tableSupplier returns the initial Table instance
1425 Escapes special characters in a string starting from a given index. @param s input string @param index starting index for escaping @return escaped string or null if not found
1426 Constructs a StandardNetwork instance from builder and node/edge data. @param builder network configuration @param nodeConnections map of node connections @param edgeToReferenceNode map of edges to reference nodes
1427 Initializes a StandardValueGraph with the given builder and node connections. @param builder graph builder configuration @param nodeConnections map of nodes to their connections @param edgeCount total number of edges in the graph
1428 Copies content from a Readable source to an Appendable destination. @param from readable content source @param to appendable destination @return total number of characters copied
1429 Decodes input CharSequence into a byte array, wrapping checked exceptions. @param chars input characters to decode @return decoded byte array or throws if decoding fails
1430 Calculates the smallest power of two greater than or equal to the given value. @param x input value
1431 Calculates the largest power of two less than or equal to the given number. @param x input number @return largest power of two <= x
1432 Creates an invokable instance from a given constructor. @param constructor constructor to be used
1433 Creates an invokable instance wrapping a given method. @param method target method to invoke
1434 Completes an AbstractFuture by running its listeners and handling any DelegatingToFutures. @param param the AbstractFuture to complete @param callInterruptTask whether to interrupt the task before completing
1435 Adds and returns the updated value for the given key. @param key unique key identifier @param delta value to be added
1436 Adds a value to the map and returns the previous value. @param key unique map identifier @param delta value to add (non-negative) @return previous value or 0L if not found
1437 Adds all entries from the provided map to this instance. @param m Map containing key-value pairs to be added
1438 Initializes graph builder with directionality. @param directed true to create a directed graph, false otherwise
1439 Adds a listener to the list of listeners. @param listener the listener to be added @param executor the executor to use for this listener
1440 Converts input of type A to output of type B using correction. @param a input object of type A @return converted object of type B or null if invalid input
1441 Initializes a compact hash map with default size.
1442 Initializes compact HashMap with specified expected size. @param expectedSize anticipated number of key-value pairs
1443 Initializes a compact hash set with default size.
1444 Initializes a compact hash set with specified expected size. @param expectedSize anticipated number of unique elements to store.
1445 Extracts simple class name from fully qualified class name. @return Class name without package prefix or trailing dollar sign if present
1446 Constructs an AbstractSortedSetMultimap from a map of key-value pairs. @param map map of keys to sorted collections of values
1447 Creates a custom multimap instance from a map and a collection factory. @param map initial map data @param factory supplier of collection instances for each key
1448 Creates an empty HashMultiset instance. @return newly created multiset
1449 Creates an empty LinkedHashMultiset instance. @return Multiset object with default configuration
1450 Creates a multiset of enum values from the given iterable and class. @param elements iterable of enum values to add @param type enum class for the multiset @return EnumMultiset instance containing the added elements
1451 Calculates the standard deviation of the population. @return Standard deviation value or NaN if variance is undefined
1452 Calculates the sample standard deviation as the square root of the sample variance. @return Sample standard deviation value
1453 Calculates the standard deviation of the population. @return Standard deviation value or NaN if variance is infinite
1454 Calculates the standard deviation of the sampled population. @return Standard deviation value or NaN if variance is undefined
1455 Returns a CharMatcher that matches no characters from the specified sequence. @param sequence CharSequence containing characters to exclude
1456 Converts string to specified case format. @param targetFormat desired case format
1457 Composes this converter with another to perform both conversions in sequence. @param secondConverter the next conversion step
1458 Returns the reversed converter instance. @return Converter instance or creates a new one if not initialized
1459 Creates a converter from strings to enums of specified type. @param enumClass class of enum values
1460 Converts a BiMap into an instance of Converter. @param bimap Bidirectional Map containing the conversion logic
1461 Checks equality with another object using ListUtils implementation. @param object object to compare against
1462 Creates a concurrent hash multiset from the given iterable of elements. @param elements collection of elements to add to the multiset
1463 Appends a variable number of objects to the given Appendable. @param appendable target Appendable for output @param parts array of objects to be appended @return the input Appendable (same type as the input)
1464 Appends iterable elements to a StringBuilder. @param builder StringBuilder instance to append to @param parts iterable collection of elements to append
1465 Concatenates iterator of objects into a single string. @param parts iterator containing objects to concatenate
1466 Joins Map entries into a string representation. @param map input Map to process
1467 Returns a string representation of this object. Uses helper to convert to parsable string format.
1468 Returns a string representation of the object, including key and value strength. @return String representation or an empty string if uninitialized
1469 Returns a string representation of this cache, including its properties.
1470 Initializes internal map with given parameters. @param builder MapMaker configuration object @param entryHelper InternalEntryHelper instance
1471 Converts Java Util Optional to Java Optional. @param javaUtilOptional Java Util Optional object @return Converted Java Optional or null if input is null
1472 Creates a HostAndPort object from a host string and port number. @param host string representation of the host @param port integer value of the port (checked for validity) @return HostAndPort object with valid host and port, or null on error
1473 Parses a string into a HostAndPort object, rejecting hosts with embedded ports. @param host input hostname or IP address
1474 Retrieves an element from a collection at the specified index. @param iterable Iterable collection containing elements of type T @param position index of the desired element (0-based) @return Element at the specified position or null if not found
1475 Creates a deep copy of this Bloom filter.
1476 Acquires a permit for the specified duration, sleeping until available. @param permits number of permits to acquire
1477 Attempts to acquire a resource within the specified time limit. @param timeout maximum duration to wait for acquisition
1478 Attempts to acquire a resource within a specified time limit. @param timeout the duration to wait for acquisition in the given unit @param unit the time unit of the timeout (e.g. TimeUnit.SECONDS)
1479 Attempts to acquire specified number of permits. @param permits desired permit count
1480 Tries to acquire the resource within a specified time frame. @return true if acquired successfully, false otherwise
1481 Attempts to acquire specified number of permits within given time limit. @param permits number of permits to acquire @param timeout duration to wait for acquisition (in nanoseconds)
1482 Waits to acquire the lock with a specified time limit. @param time maximum wait duration @param unit TimeUnit for the time parameter @return true if acquired, false otherwise
1483 Initializes an instance of AbstractService. This is a protected constructor intended to be used by subclasses. It should not be invoked directly from outside the class hierarchy.
1484 Verifies that the heap data structure is intact by checking each index. @return true if all indices are valid, false otherwise
1485 Configures a CacheBuilder with specified parameters. @return pre-configured CacheBuilder instance
1486 Creates a new MapMaker with weak keys from an existing one. @param mapMaker source MapMaker instance
1487 Verifies current service state matches the specified expected state. @param expected desired State value
1488 Retrieves a value from the 2D array at the specified row and column indices. @param rowIndex index of the desired row @param columnIndex index of the desired column @return value at the specified position or null if out of bounds
1489 Sets a value at the specified row and column indices. @param rowIndex row index @param columnIndex column index @param value new value to set (may be null) @return old value or null if it was already null
1490 Retrieves an element from the underlying array at the specified index. @param index zero-based index of the desired element
1491 Retrieves element at specified index from underlying array. @param index position to retrieve (must be within bounds)
1492 Retrieves an element from the underlying array at the specified index. @param index position of the desired element
1493 Finds the index of the first occurrence of a matched character in the sequence. @param sequence CharSequence to search @param start starting position to begin searching from @return index of first match or -1 if not found
1494 Initializes an index list iterator with specified size and position. @param size total number of elements in the list @param position initial iteration position (0-based)
1495 Creates a new data input from the given byte array slice. @param bytes The byte array containing the data @param start The starting index of the slice within the byte array
1496 Checks if the specified byte subarray is well-formed. @param bytes input byte array @param off starting offset @param len length of the subarray @return true if well-formed; false otherwise
1497 Converts a portion of an array to a new array of specified type. @param src source array @param offset starting index in src @param len number of elements to copy @param dst destination array (may be resized) @return the destination array with copied elements
1498 Copies a subset of elements from the given array into a new object array. @param elements original array to copy from @param offset starting index in the original array @param length number of elements to copy @return copied element array or null if invalid parameters
1499 Writes at most maxLength bytes from this stream to the given array. @param dest byte array to store written data @return number of bytes actually written (0-maxLength)
1500 Encodes a byte array into a string, throwing an AssertionError if I/O error occurs. @param bytes input byte array @param off starting offset in the byte array @param len length of the data to encode @return encoded string representation or null on encoding failure
1501 Reads up to specified bytes from InputStream into byte array. @param in InputStream source @param b byte array destination @param off starting offset in byte array @param len maximum number of bytes to read @return actual number of bytes read, or 0 on EOF
1502 Reverses a boolean subarray in-place. @param array the input boolean array @param fromIndex starting index of the subarray (inclusive) @param toIndex ending index of the subarray (exclusive)
1503 Reverses a specified range of bytes in the provided array. @param array input byte array @param fromIndex starting index of the range to reverse (inclusive) @param toIndex ending index of the range to reverse (exclusive)
1504 Reverses a substring within the given character array. @param array character array containing the substring @param fromIndex start index of the substring to reverse (inclusive) @param toIndex end index of the substring to reverse (exclusive)
1505 Reverses a specified subarray within the given array. @param array input array @param fromIndex starting index of subarray to reverse (inclusive) @param toIndex ending index of subarray to reverse (exclusive)
1506 Reverses a specified sub-array of floats in-place. @param array the input array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1507 Extracts a sub-array of immutable doubles from the current array. @param startIndex starting index (inclusive) @param endIndex ending index (exclusive)
1508 Returns a sub-array from this immutable array within the specified range. @param startIndex starting index (inclusive) @param endIndex ending index (exclusive)
1509 Returns a sub-array of this long array from the specified start index to end index (inclusive). @param startIndex starting index of sub-array (inclusive) @param endIndex ending index of sub-array (inclusive)
1510 Reverses a portion of the given array. @param array the array to modify @param fromIndex starting index (inclusive) of the portion to reverse @param toIndex ending index (exclusive) of the portion to reverse
1511 Reverses a portion of the given array. @param array input array @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1512 Reverses the specified range of an array in-place. @param array the array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1513 Reverses and sorts a portion of the byte array in-place. @param array the byte array to modify @param fromIndex starting index (inclusive) for sorting range @param toIndex ending index (exclusive) for sorting range
1514 Sorts the specified byte subarray in descending order. @param array the byte array to sort @param fromIndex the starting index of the subarray (inclusive) @param toIndex the ending index of the subarray (exclusive)
1515 Reverses and sorts a subarray of integers in-place. @param array the array to modify @param fromIndex start index of the subarray (inclusive) @param toIndex end index of the subarray (exclusive)
1516 Sorts a subarray in descending order. @param array the input array @param fromIndex start index of the subarray @param toIndex end index of the subarray
1517 Sorts a subset of the long array in ascending order. @param array input array @param fromIndex starting index of the subset @param toIndex ending index of the subset
1518 Sorts the specified range of an array in descending order. @param array input array @param fromIndex start index of the sort range (inclusive) @param toIndex end index of the sort range (exclusive)
1519 Filters elements from the specified collection based on the provided predicate. @param unfiltered input collection to filter @param predicate condition to apply for filtering @return filtered Collection or an existing FilteredCollection if applicable
1520 Returns a Splitter that splits by a single specified character. @param separator character to split by
1521 Initializes a sleeping stopwatch with default values.
1522 Initializes a Finalizer instance with given classes and reference queue. @param finalizableReferenceClass class being finalized @param queue reference queue for garbage collection @param frqReference phantom reference that triggered finalization
1523 Initializes a new instance of the Builder class.
1524 Creates a new instance of the Builder. @return A new Builder object
1525 Initializes a new instance of the Builder class.
1526 Constructs an empty sorted multiset with forwarding behavior.
1527 Initializes an empty forwarding deque. No additional parameters are required. This constructor is typically used when creating an instance of this class.
1528 Constructs an empty forwarding blocking queue. @see java.util.concurrent.BlockingQueue#blockingQueue()
1529 Creates an empty forwarding sorted set.
1530 Initializes an empty forwarding navigable map. @see ForwardingNavigableMap
1531 Returns an unmodifiable view of the given Bimap. @param bimap the original Bimap instance
1532 Creates an empty MutableClassToInstanceMap.
1533 Creates a MutableClassToInstanceMap from a given backing map. @param backingMap A map of class to instance, used as the underlying data structure
1534 Creates an empty ImmutableTypeToInstanceMap.
1535 Initializes an empty multimap that forwards to a sorted set. @throws IllegalStateException if this constructor is invoked on a non-static context.
1536 Returns an unmodifiable view of the given multimap. @param delegate original multimap, validated as modifiable
1537 Returns an unmodifiable view of the specified table. @param table original table to wrap
1538 Adapts a non-listenable future to be executed in the specified thread pool. @param future non-listenable future @param executor target executor @return listenable future that will execute in the executor's thread pool
1539 Retrieves value associated with given key if present. @param key object to look up in backing map @return nullable value or null if not found
1540 Retrieves cached value or loads it using provided callable if not found. @param key unique cache key @param valueLoader callback to load value if not present in cache @return cached or loaded value of type V or throws ExecutionException
1541 Retrieves all present values from the backing map using the provided iterable of keys. @param keys collection of keys to fetch values for @return ImmutableMap containing fetched key-value pairs or empty if none found
1542 Delegates putting of key-value pair to underlying map implementation. @param key unique identifier (key) @param value associated data (value)
1543 Copies all entries from given map to this map. @param m the map containing key-value pairs to copy
1544 Invalidates all cache entries associated with given object IDs. @param keys iterable of unique object identifiers
1545 Creates a new reference entry with the given key and hash. @param segment the segment to which this entry belongs @param key the key of the entry @param hash the hash value of the key @param next the next entry in the chain, or null if none
1546 Creates a new reference entry with the given key and hash. @param segment the segment to associate this entry with @param key the unique key for this entry @param hash the hash code for the key @param next the previous entry in the linked list, or null if none
1547 Creates a new reference entry with the given key and hash. @param segment associated segment @param key unique identifier for the entry @param hash hash value of the key @param next reference to the next entry in the chain (null if first)
1548 Creates a new reference entry with specified key and hash. @param segment the associated segment @param key unique key for this entry @param hash key's hash value @param next null or the previous entry in the list
1549 Creates a new entry in the specified segment. @param segment the segment to add the entry to @param key the unique key for this entry @param hash the hash code of the key @param next the next entry in the linked list (or null)
1550 Creates a new reference entry with the specified key and hash. @param segment the associated segment @param key the unique identifier for this entry @param hash the hash code of the key @param next the next entry in the chain (may be null)
1551 Updates the value for a given key in the map. @param entry reference to the map entry @param key unique identifier of the key being updated @param value new value associated with the key @param now timestamp of the update operation
1552 Returns the size of the collection. @return Number of elements in the collection
1553 Calculates the total edge count by summing node degrees and dividing by 2. @return Total edge count
1554 Converts InputStream to byte array. @param in input stream to convert
1555 Converts InputStream to a byte array of the specified expected size. @param in InputStream to read from @param expectedSize expected number of bytes @return byte array or null if not enough data available
1556 Initializes an abstract bi-directional map with provided forward and backward mappings.
1557 Removes all occurrences of specified object from list. @param key object to remove (may be null)
1558 Replaces values for a given key with new ones. @param key unique identifier @param values new values to replace existing ones
1559 Removes all elements equal to the specified key from this set. @param key the element to be removed, or null for no operation
1560 Returns the set of values associated with the given key. @param key unique identifier or null for default value
1561 Converts this object to a string representation.
1562 Converts this object to a string representation. @return A string in the format defined by Map.toStringImpl()
1563 Creates a HashMap with an expected size. @param expectedSize anticipated number of key-value pairs
1564 Checks if a directed or undirected graph contains a cycle. @param graph the input graph
1565 Creates a hash-based table with expected rows and cells per row. @param expectedRows total number of rows @param expectedCellsPerRow number of cells in each row @return initialized HashBasedTable instance
1566 Creates a linked map with an expected size. @param expectedSize the anticipated number of entries
1567 Creates a Map with the specified expected size, using an appropriate implementation based on the type. @param expectedSize the anticipated number of key-value pairs
1568 Creates an empty HashSet with an initial capacity based on the expected size. @param expectedSize approximate number of elements to store
1569 Creates a linked hash set with the specified expected size. @param expectedSize initial capacity and load factor for performance
1570 Initializes service manager state with a collection of services. @param services collection of services to initialize with
1571 Returns the first (lowest) entry in this multiset. @return the first entry or null if empty
1572 Returns the last multiset entry, or null if the set is empty. @return Entry object with the last element and its count, or null
1573 Retrieves the first entry from the map's iterator, converts it to an immutable entry, and removes it from the iterator. @return Entry object or null if map is empty
1574 Retrieves the last entry from the multiset, or null if empty. @return Last Entry object, or null if none exist
1575 Returns a set of multiset entries. @return Set of Multiset.Entry objects or empty if none exist
1576 Returns a set view of this multiset's entries. @return A Set of Multiset.Entry objects representing the key-value pairs in this multiset.
1577 Creates a TreeRangeSet from an existing RangeSet. @param rangeSet existing set of ranges to copy
1578 Creates a TreeRangeSet from an iterable of ranges. @param ranges iterable of Range objects to include in the set @return TreeRangeSet instance containing all specified ranges
1579 Returns this map's contents as a navigable map.
1580 Returns a set of cells in this table. @return Set of Cell objects or empty set if none exist
1581 Returns a collection view of the map's values. @return Collection of values or empty collection if none exist
1582 Reverses the range, returning a new reversed GeneralRange object. @return The reversed GeneralRange object or null if original is null
1583 Creates an immutable cell with the given key-value pair. @param rowKey unique row identifier @param columnKey unique column identifier @param value cell value to store
1584 Returns an immutable set of elements contained in this collection. @return Set of elements (type E) or empty set if no elements present
1585 Adds a new mapping from the given key to the specified value. @param key unique identifier for the entry @param value associated value for the entry
1586 Creates an immutable map with two key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2
1587 Creates an ImmutableMap with three key-value pairs. @param k1 first key @param v1 value for k1 @param k2 second key @param v2 value for k2 @param k3 third key @param v3 value for k3
1588 Creates an ImmutableMap with four entries. @param k1 key for first entry @param v1 value for first entry @param k2 key for second entry @param v2 value for second entry @param k3 key for third entry @param v3 value for third entry @param k4 key for fourth entry @param v4 value for fourth entry
1589 Creates an ImmutableMap with five key-value pairs. @param k1 first key @param v1 value for k1 @param k2 second key @param v2 value for k2 @param k3 third key @param v3 value for k3 @param k4 fourth key @param v4 value for k4 @param k5 fifth key @param v5 value for k5
1590 Creates an ImmutableMap with up to six entries. @param k1 key of first entry @param v1 value of first entry @param k2 key of second entry (null if only one entry) @param v2 value of second entry (null if only one entry) @param k3 key of third entry (null if only two entries) @param v3 value of third entry (null if only two entries) @param k4 key of fourth entry (null if only three entries) @param v4 value of fourth entry (null if only three entries) @param k5 key of fifth entry (null if only four entries) @param v5 value of fifth entry (null if only four entries) @param k6 key of sixth entry (null if only five entries) @return ImmutableMap with specified entries
1591 Creates an ImmutableMap with up to 7 key-value pairs. @param k1,k2,k3,k4,k5,k6,k7 keys @param v1,v2,v3,v4,v5,v6,v7 values
1592 Creates an ImmutableMap from key-value pairs. @param k1,k2,k3,k4,k5,k6,k7,k8 keys @param v1,v2,v3,v4,v5,v6,v7,v8 values @return ImmutableMap with specified entries
1593 Creates an ImmutableMap with up to 9 key-value pairs. @param k1 key for value v1 @param v1 value associated with key k1 @param k2 key for value v2 @param v2 value associated with key k2 ... @param k9 key for value v9 @param v9 value associated with key k9
1594 Creates an ImmutableMap with up to 10 key-value pairs. @param k1-k10 keys for the map @param v1-v10 values corresponding to each key
1595 Wraps an Entry into an ImmutableMapEntry. @param entry the underlying map entry
1596 Adds an entry to the map and returns the builder instance. @param entry Entry object containing key-value pair
1597 Adds all entries from the specified iterable to the map. @param entries collection of key-value pairs to add @return Builder instance for method chaining
1598 Adds an entry to the map and returns the builder instance. @param entry key-value pair to be added
1599 Filters a sorted set of objects based on the given predicate. @param unfiltered input sorted set @param predicate condition to apply for filtering @return filtered sorted set or null if unfiltered is not a FilteredSet
1600 Trims the internal data structure to optimal size based on current entries. @param none
1601 Trims internal data structures to optimal size based on the number of entries.
1602 Checks if the interval is empty. @return true if lower and upper bounds are equal, false otherwise
1603 Compares this range with another for equality. @param object the object to compare with, must be a Range
1604 Adds an element to the collection. @param element the element to be added
1605 Returns an iterator over the elements in this collection. @return iterator over the collection's elements
1606 Returns a list iterator starting at index 0. @return ListIterator object to iterate over the collection
1607 Retrieves the first node within the specified range, or null if no such node exists. @return AvlNode object or null
1608 Creates a copy of the given table with its contents. @param table original table to be copied @return new HashBasedTable instance or null if input is null
1609 Creates an empty TreeBasedTable instance with default comparators. @return TreeBasedTable object
1610 Creates a TreeBasedTable instance with customized row and column comparators. @param rowComparator comparator for tree-based row ordering @param columnComparator comparator for tree-based column ordering
1611 Creates a HashBiMap instance with specified capacity. @param expectedSize estimated number of key-value pairs
1612 Creates a new instance of the Builder class. @return A configured Builder object ready to construct instances of type K and V.
1613 Initializes a new instance of the Builder class.
1614 Creates a builder with a natural ordering comparator. @return Builder instance with specified ordering
1615 Creates an ordered builder instance with the specified key comparator. @param comparator key comparator to order the map entries
1616 Creates a builder with data in reverse order. @return Builder instance with reversed ordering
1617 Creates an immutable map with one entry. @param k1 key @param v1 value
1618 Returns an inverted view of this map.
1619 Creates a new instance of the Builder class. @return Builder instance for constructing objects of type E
1620 Creates a Builder instance with a custom ordering based on the provided Comparator. @param comparator Comparator to order elements by
1621 Creates a builder with elements in reverse order. @return A new Builder instance with reversed ordering.
1622 Creates a builder with a natural ordering comparator. @return A Builder instance with the specified ordering
1623 Reverses the order of elements in the list. @return a new reversed list or the original if empty or single-element
1624 Extracts immutable list of characters from input string. @param string input string to process
1625 Creates an immutable list containing a single element. @param e1 the element to include in the list
1626 Returns an immutable set of key-value mapping entries. @return Set of entries or null if not initialized
1627 Creates an immutable set containing a single element. @param e1 the single element in the set
1628 Retrieves the charset for this object, resolving any ambiguity by throwing an exception. @return Charset instance or null if not found
1629 Stops all registered services asynchronously. @return This instance to enable chaining calls.
1630 Checks if all services are running. @return true if all services are operational, false otherwise
1631 Creates a builder with an initial capacity based on the expected size. @param expectedSize initial list capacity
1632 Adds all entries from the given Multimap to this builder. @param multimap Multimap containing key-value pairs to add
1633 Throws a custom exception when deleting fails on the specified path. @param path Path of the deletion operation @param exceptions Collection of IOExceptions that occurred during deletion
1634 Concatenates multiple iterators into a single iterator. @param inputs variable-length array of input iterators @return concatenated iterator or null if all inputs are empty
1635 Retrieves a map entry by its associated key. @param key the object to look up @return the corresponding entry or null if not found
1636 Performs cleanup after reading data, running cleanup task when read count reaches threshold.
1637 Checks if a sorted map contains the specified key. @param key object to search for @return true if found, false otherwise
1638 Returns a submap of this map, containing all mappings in the range [fromKey, toKey]. @param fromKey inclusive lower bound @param toKey exclusive upper bound
1639 Calculates the difference between two maps. @param left first map @param right second map @param valueEquivalence equivalence function for values @return MapDifference object containing the differences
1640 Computes the difference between two sorted maps. @param left first map (must not be null) @param right second map (must not be null) @return a SortedMapDifference object describing the differences
1641 Initializes an asynchronous event bus instance. @param identifier unique identifier @param executor Executor instance for asynchronous processing
1642 Initializes an instance of AsyncEventBus with custom executor and exception handler. @param executor thread pool executor for asynchronous event processing @param subscriberExceptionHandler custom exception handler for subscribers
1643 Initializes an instance of AsyncEventBus with the specified executor. @param executor Executor to be used by the bus
1644 Constructs an EventBus instance with the specified identifier. @param identifier unique event bus identifier
1645 Initializes an instance of EventBus with custom exception handling. @param exceptionHandler handler to manage subscriber exceptions
1646 Recursively finds the minimum child node at a given index. @param index current node index
1647 Recursively finds the minimum grandchild value at a given index. @param index current node index @return minimum grandchild value or -1 if not found
1648 Returns the last element in the collection without removing it. @return Last element or null if empty
1649 Bubbles up a value to the correct position in a heap. @param index current index of the value @param x new value to insert
1650 Checks if the collection contains a given object. @param object the object to search for (may be null) @return true if found, false otherwise
1651 Adds an element to the collection with default priority (1). @param element element to be added
1652 Removes specified element from collection and returns true if successful. @param element object to be removed (may be null)
1653 Clears all entries in this map.
1654 Retrieves a standard count associated with the given object. @param object the object to search for, or null @return the corresponding count, or 0 if not found
1655 Computes hash code of this map based on its entries. @return hash code value as an integer
1656 Returns a string representation of this collection. @return A string containing the key-value pairs in the collection.
1657 Converts an array to a standard array. @param array input array @return new standard array instance
1658 Retrieves the last element from the sorted collection. @return The polled element or null if not available
1659 Returns a subset of elements in the set starting from and up to the specified elements. @param fromElement start element (inclusive) @param toElement end element (exclusive)
1660 Retrieves the smallest element in the set that is greater than or equal to the input. @param e input value @return the smallest element or null if not found
1661 Retrieves the smallest element in the set that is greater than or equal to the input value. @param e the input value @return the smallest element in the set or null if not found
1662 Returns a view of the range of elements strictly less than the given element. @param toElement element that defines the end of the view
1663 Returns the smallest value in the set that is greater than or equal to the given element. @param e the target element @return the ceiling value or null if not found
1664 Returns next higher element in set. @param e current element @return next higher element or null if not found
1665 Returns a NavigableSet containing elements in the range [fromElement, toElement]. @param fromElement lower bound (inclusive if fromInclusive) @param fromInclusive whether lower bound is inclusive @param toElement upper bound (exclusive if !toInclusive) @param toInclusive whether upper bound is inclusive
1666 Returns a view of all elements in this set strictly greater than the given element. @param fromElement lower bound for tail set
1667 Returns a sorted set of unique row keys.
1668 Returns a sorted map of rows where each key is a unique row identifier and the value is a map of column names to values.
1669 Wraps a Deque in a synchronized implementation. @param deque the original Deque to synchronize @return a synchronized Deque instance
1670 Creates an array-based character escaper with specified replacements and safety range. @param replacementMap map of chars to replace @param safeMin minimum safe ASCII value @param safeMax maximum safe ASCII value
1671 Converts this Escaper instance to a CharArrayDecorator. @return Decorated escaper with character array data
1672 Creates an ArrayBasedUnicodeEscaper instance from a replacement map. @param replacementMap mapping of characters to escaped strings @param safeMin minimum Unicode code point for safe range @param safeMax maximum Unicode code point for safe range @param unsafeReplacement replacement string for unsafe characters
1673 Creates a HashCode instance from a byte array. @param bytes input byte array (must be at least 1 byte)
1674 Converts a string of hexadecimal digits into a HashCode object. @param string input string containing hexadecimal characters
1675 Combines multiple hash codes into a single hash code. @param hashCodes iterable of hash codes to combine @return combined HashCode object or null if invalid input
1676 Combines multiple unordered hash codes into a single hash code. @param hashCodes iterable collection of hash codes to combine @return combined HashCode object or null if invalid input
1677 Creates an HMAC-MD5 hash function using the provided secret key. @param key secret key to use for hashing
1678 Creates an HMAC SHA-1 hash function instance with the given secret key. @param key secret key bytes, must not be null
1679 Creates an HMAC SHA-256 hash function with the given secret key. @param key secret key to use for hashing
1680 Initializes HMAC-SHA-512 hash function with provided secret key. @param key secret key for HMAC calculation
1681 Wraps a byte array as a ByteSource. @param b input byte array
1682 Wraps a CharSequence into either a String or CharSequence CharSource. @param charSequence input character sequence to be wrapped @return CharSource instance wrapping the input sequence
1683 Writes an iterable of lines to output using system-defined newline character. @param lines iterable of line strings
1684 Writes a stream of character sequences to the output, separated by line separators. @param lines input sequence of characters
1685 Reads a BloomFilter from an InputStream and deserializes its components. @param in the input stream containing the filter's state @param funnel a functor to serialize/deserialize the filter's elements @return the reconstructed BloomFilter object or throws IOException if failed
1686 Calculates the arithmetic mean of an iterable collection of numbers. @param values Collection of numbers for which to calculate the mean
1687 Computes the base-2 logarithm of a double value with specified rounding mode. @param x input value, must be positive and finite @param mode RoundingMode to apply @return integer log2(x) or rounded result if necessary
1688 Detects hash flooding in a given table by finding consecutive null elements. @param hashTable the input array to check @return true if hash flooding is detected, false otherwise
1689 Offers an element to the buffer, maintaining a threshold value and resizing as necessary. @param elem element to add
1690 Converts to case-insensitive alphabet by copying and modifying the decoding table. @return A new Alphabet instance with modified decodabet
1691 Creates a selector to find the top K elements based on the given comparator. @param k number of top elements to select @param comparator comparison function for sorting
1692 Creates a TopKSelector that returns the greatest k elements. @param k number of top elements to select @param comparator comparison function for sorting elements @return TopKSelector instance with reversed ordering
1693 Creates a LinearTransformation object based on two points. @param x2 the x-coordinate of the second point @param y2 the y-coordinate of the second point
1694 Computes the least squares linear fit of data points. @return Linear transformation mapping x to y with optimal slope and intercept
1695 Computes the least-squares linear transformation fitting this dataset. @return a LinearTransformation object representing the best-fit line
1696 Determines whether a given number is prime. @param n the number to check @return true if prime, false otherwise
1697 Computes the base-10 logarithm of a BigInteger with specified rounding mode. @param x input number @param mode rounding mode (FLOOR, CEILING, etc.) @return log10(x) as an int or int + 1 if rounding to nearest
1698 Calculates the binomial coefficient (n choose k) using various optimizations. @param n input value @param k input value @return binomial coefficient or Long.MAX_VALUE if too large
1699 Calculates the arithmetic mean of an iterable collection of numbers. @param values collection of numeric values @return mean value or NaN if empty or null input
1700 Updates running statistics of series with new values, adding to mean and count. @param x value in the first series @param y value in the second series
1701 Adds all numbers from an iterable to this collection. @param values iterable of numbers to add
1702 Adds all numeric values from an iterator to this collection. @param values iterator of numbers to be added
1703 Adds all stats from the provided Stats object. @param values collection of statistics to add
1704 Accumulates statistics from the provided StatsAccumulator. @param values input statistics to add
1705 Partitions the array [from, to] around the required element and updates the range. @param required the target index @param array the input array @param from start of current range @param to end of current range
1706 Adds all elements from the given DoubleStream to the builder. @param stream DoubleStream containing numbers to add
1707 Adds all specified double values to the builder. @param values iterable of double values
1708 Adds all integers from the given stream to a builder. @param stream IntStream containing integers to add
1709 Adds all integers from the given iterable to the builder. @param values iterable of integers to be added
1710 Adds all elements from the given LongStream to the builder. @param stream input stream of long values
1711 Deserializes an ImmutableLongArray object from the given stream. @param s ObjectInputStream to read from
1712 Adds all IDs from the given iterable to this builder. @param values iterable of IDs to be added
1713 Attempts to parse an integer from the given string. @param string input string to parse
1714 Parses a decimal String representation into an Unsigned Integer. @param string the decimal String to parse
1715 Divides this unsigned long value by another. @param val divisor (must be non-zero)
1716 Converts a long value to a string representation in the specified radix. @param x long value to convert @param radix base of the numeral system (2-36) @return string representation or "0" if x is zero
1717 Computes (a * b) mod m using modular multiplication. @param a base value @param b multiplier value @param m modulus value
1718 Computes (a^2) % m using modular arithmetic. @param a input value to be squared @param m modulus for modular operation
1719 Computes the remainder of this unsigned long value modulo another. @param val value to take the modulus with
1720 Parses a string into an UnsignedLong representation with base 10. @param string input string to parse
1721 Compares this entry with another object for standard equality. @param object the other object to compare @return true if both entries have same key and value, false otherwise
1722 Calculates a standard hash code for the map entry. @return combined hash code of key and value
1723 Returns string representation of this key-value pair.
1724 Determines whether this is an array type. @return true if it's an array, false otherwise
1725 Decorates an ExecutorService with listening capabilities. @param delegate underlying executor service instance
1726 Decorates a scheduled executor service to add listening capabilities. @param delegate the underlying executor service
1727 Invokes any of the given tasks, returning at most one result. @param executorService Executor service to use @param tasks Collection of callable tasks @param timed Whether invocation is timed @param timeout Timeout value in specified unit @param unit Unit for timeout value @return Result from first task that completes @throws InterruptedException if interrupted while waiting @throws ExecutionException if any task throws an exception @throws TimeoutException if timed invocation times out
1728 Asynchronously calls an async callable with a specified executor. @param combiner the async callable to be called @param executor the executor to run the call on @return a ListenableFuture containing the result of the call or null if not found
1729 Combines a callable with an existing future set, returning a combined future. @param combiner function to combine with the existing futures @param executor thread pool for execution @return ListenableFuture representing the combined result
1730 Verifies that acquiring the current lock does not lead to a deadlock. @param policy Locking policy @param acquiredLock The lock already acquired by another thread
1731 Reloads a cached object and returns its future value. @param key unique cache identifier @param oldValue previous cached value (for caching purposes) @return ListenableFuture containing the reloaded object or null if not found
1732 Returns a future containing the result of transforming the original future. @return ListenableFuture with transformed result or null
1733 Submits an asynchronous computation for execution on a given executor. @param callable the computation to be executed @param executor the executor to run the computation on @return a ListenableFuture representing the result of the computation
1734 Retrieves a value from a future while validating and handling exceptions. @param validator GetCheckedTypeValidator instance @param future Future containing the result @param exceptionClass Class of expected exception @return Value from the future or throws an exception
1735 Retrieves a future value while handling potential exceptions. @param future the future to be retrieved @param exceptionClass class that will be thrown for any errors @param timeout maximum time to wait for the result @param unit time unit for the timeout @throws X any exception specified by exceptionClass
1736 Signals next waiter to run and releases lock.
1737 Awaits the specified time in nanoseconds, returning false when exhausted. @param guard lock guarding the condition @param nanos maximum wait duration in nanoseconds @param signalBeforeWaiting whether to signal next waiter before waiting
1738 Creates a timed-out future from a listenable future. @param delegate original listenable future @param time timeout duration in specified unit @param unit time unit (e.g. TimeUnit.SECONDS) @param scheduledExecutor executor service for timing out the future @return ListenableFuture with added timeout, or original if already done
1739 Schedules a task for asynchronous execution with a specified delay. @param callable the task to be executed @param delay time to wait before executing the task @param executorService service used to schedule the task @return ListenableFuture representing the scheduled task's result
1740 Retrieves an enum constant by name if present. @param enumClass Enum class to search @param value Name of the enum constant to find @return Optional enum constant or empty if not found
1741 Attempts to find an element in an iterable that matches a given predicate. @param iterable collection of elements to search @param predicate condition to match @return Optional containing the matching element, or empty if not found
1742 Checks if any element matches the given predicate. @param predicate condition to match @return true if at least one element satisfies the predicate, false otherwise
1743 Creates a precomputed CharMatcher for a given number of characters. @param totalCharacters total count of characters @param table precomputed bitset data @param description human-readable description
1744 Propagates a throwable to its declared type if possible. @param throwable the throwable to propagate @param declaredType1 first potential type @param declaredType2 second potential type
1745 Rethrows a checked exception as an unchecked RuntimeException. @param e the Throwable to rethrow
1746 Rethrows a Throwable as an unchecked RuntimeException, potentially with a more specific exception type. @param e the original Throwable to rethrow @param declaredType the class of the expected exception
1747 Closes resources and handles exceptions in LIFO order. @throws IOException if an exception is thrown during closing
1748 Creates a new thread with the specified name and runnable task. @param name unique identifier for the thread @param runnable executable task to run on the new thread @return newly created Thread object
1749 Filters a multimap to include only entries where the key matches a predicate. @param unfiltered original multimap @param keyPredicate function to test keys @return filtered multimap or new instance if none of the above
1750 Filters entries in the multimap based on a predicate. @param unfiltered input multimap @param entryPredicate predicate to filter entries by @return filtered multimap with matching entries
1751 Retrieves a declared annotation of the specified type, or null if not found. @param annotationType Class object representing the annotation to search for @return Annotation object of type A, or null if not found.
1752 Merges multiple sorted Iterables into a single sorted UnmodifiableIterator. @param iterators Iterable of Iterators to merge @param comparator Comparator for sorting and merging elements @return UnmodifiableIterator containing merged and sorted data
1753 Converts an iterable to a regular array. @param iterable input collection
1754 Replaces existing values for a given key with new ones and returns the old values. @param key unique identifier @param values new values to replace or add @return List of replaced old values
1755 Removes all values associated with a given key. @param key the key to remove @return list of removed values or null if not found
1756 Creates a CopyOnWriteArrayList from an iterable collection of elements. @param elements Iterable collection of elements to copy into the list
1757 Creates a CopyOnWriteArraySet from an iterable of elements. @param elements iterable of elements to include in the set
1758 Performs binary search on a sorted list using the provided comparator. @param list sorted list to search @param key value to search for @param comparator comparison function for values in the list @param presentBehavior behavior when the key is found (e.g. index, offset) @param absentBehavior behavior when the key is not found (e.g. index, offset)
1759 Retrieves multiple instances of type L by batched IDs. @param keys Iterable of object keys to fetch @return Iterable of corresponding L objects or empty iterable if none found
1760 Returns a string representation of the graph, including its properties and node/edge counts.
1761 Returns a human-readable string representation of the graph. @return formatted string containing graph properties and node count
1762 Transforms entries in a navigable map using the provided entry transformer. @param fromMap original navigable map @param transformer function to transform key-value pairs @return new navigable map with transformed entries
1763 Transforms the values of a sorted map using a provided function. @param fromMap input sorted map @param function function to apply to each value @return new sorted map with transformed values
1764 Adds specified occurrences of an element to the collection. @param element element to add @param occurrences number of times to add the element @return previous count of the element in the collection
1765 Adds occurrences of an element to the collection. @param element element to add @param occurrences number of times to add the element @return previous count of the element or 0 if not found
1766 Transforms values in a multimap using the provided function. @param fromMultimap input multimap @param function transformation function for each value @return new ListMultimap with transformed values
1767 Adds all specified elements to this multiset. @param elementsToAdd collection of elements to add @return true if the operation was successful; false otherwise
1768 Adds all elements from the given collection to this multiset. @param elementsToAdd collection of elements to add @return true if successful, false otherwise
1769 Returns a thread-safe version of the given multimap. @param multimap original multimap to synchronize
1770 Returns a synchronized version of the input table. @param table input table to synchronize
1771 Escapes special characters in a given string. @param string input string to be escaped
1772 Converts a Readable object to a StringBuilder. @param r the readable object to convert
1773 Creates a future that catches exceptions of the specified type and returns a fallback value. @param input original future to be wrapped @param exceptionType throwable class to catch @param fallback function to return in case of an exception @param executor executor service for asynchronous processing
1774 Cancels this Future if it is not already done. @param mayInterruptIfRunning whether to interrupt running tasks or not @return true if cancelled, false otherwise
1775 Sets the given value while ensuring atomicity using CAS. @param value new value to be set
1776 Sets an exception and updates the associated value. @param throwable the exception to set @return true if updated successfully, false otherwise
1777 Sets a future value, possibly propagating an interrupt from the caller. @param future ListenableFuture to set @return true if successful, false otherwise
1778 Transforms a ListenableFuture of one type into another using a provided Function. @param input original future to transform @param function maps input values to output values @param executor executes the transformation; may be null for default executor
1779 Increments and returns the value associated with the given key. @param key unique identifier for the key to be incremented
1780 Decrements and returns the value associated with the given key. @param key unique identifier for the value to be decremented
1781 Atomically increments and returns value associated with given key. @param key unique identifier for data to be incremented
1782 Decrements and returns value associated with given key. @param key unique identifier of the key to decrement
1783 Creates an AtomicLongMap instance and populates it from the given map. @param m input map containing key-value pairs to initialize the map
1784 Initializes a new graph builder with specified directionality. @param directed true to create an undirected graph, false otherwise
1785 Initializes a new NetworkBuilder instance with the specified graph directionality. @param directed true to create a directed network, false otherwise
1786 Initializes ValueGraphBuilder with graph directionality. @param directed true for directed graph, false otherwise
1787 Registers an event listener with the specified executor. @param listener event listener to register @param executor executor service for listener execution
1788 Applies conversion from A to B using the underlying converter. @param a input value of type A
1789 Creates an empty CompactHashMap instance. @return newly created map with no entries
1790 Creates a CompactHashMap with an expected size. @param expectedSize estimated map size
1791 Creates an empty compact hash set.
1792 Creates a compact hash set with an estimated size. @param expectedSize initial capacity estimate
1793 Creates a new list multimap from a map and a collection factory. @param map input map with keys to values collections @param factory supplier of list for storing values
1794 Creates a new set multimap from an existing map and a set factory. @param map initial map of key to value collections @param factory supplier for creating sets used in the multimap
1795 Initializes the builder with an empty multiset.
1796 Composes two converters into one by chaining their transformations. @param secondConverter second converter to be applied after the first
1797 Appends a collection of objects to the StringBuilder. @param builder target StringBuilder instance @param parts array of objects to be appended @return the modified StringBuilder instance
1798 Concatenates an iterable of parts into a single string using the provided separator. @param parts Iterable of objects to concatenate
1799 Creates a custom internal map based on the provided MapMaker configuration. @param builder MapMaker instance with strength settings
1800 Creates a MapMakerInternalMap with dummy value entries based on the given MapMaker configuration. @param builder MapMaker instance defining map properties
1801 Concatenates multiple iterables into a single fluent iterable. @param inputs variable-length array of input iterables
1802 Retrieves an element at the specified index from the underlying collection. @param position the index of the desired element (0-based)
1803 Acquires one unit of resource with default quantity. @return Resource value or zero if failed
1804 Converts duration to nanoseconds and enters it. @param time duration to convert and enter
1805 Enters the guarded block and checks the condition. @param guard Guard object to monitor @param time timeout value in specified unit @param unit TimeUnit for the timeout value @return true if condition satisfied, false otherwise
1806 Creates a CacheBuilder instance from a specification. @param spec CacheBuilder specification object @return CacheBuilder instance for building caches
1807 Creates a strong interned instance of the Map. @return Interner object
1808 Creates an interned object cache with weak references.
1809 Sets a cell value by row and column keys. @param rowKey unique row identifier @param columnKey unique column identifier @param value new cell value (may be null) @return previous value in the cell or null if not set
1810 Removes a data point from the table by row and column keys. @param rowKey unique row identifier or null for none @param columnKey unique column identifier or null for none @return V object or null if not found
1811 Compares this ImmutableDoubleArray to another object for equality. @param object object to compare with @return true if equal, false otherwise
1812 Compares this ImmutableIntArray with another object for equality. @param object the object to compare with @return true if both arrays have the same length and elements, false otherwise
1813 Compares this ImmutableLongArray with another object. @param object the object to compare @return true if equal, false otherwise
1814 Converts string to specified case format. @param format CaseFormat enum value @param s input string
1815 Returns the starting index of this char sequence within a given CharSequence. @param sequence the CharSequence to search in
1816 Constructs an iterator over an empty list of specified size. @param size initial size of the underlying list
1817 Retrieves Teredo information from a given IPv6 address. @param ip the IPv6 address to extract info from @return TeredoInfo object containing server IP, client IP, port, and flags or null if invalid
1818 Verifies whether the given byte array represents a well-formed binary data structure.
1819 Encodes byte array into a string. @param bytes input byte array to be encoded
1820 Reads fully from the specified InputStream into a byte array. @param in InputStream to read from @param b Byte array to store the data @param off Offset within the byte array to start writing @param len Number of bytes to read and write
1821 Reverses the order of elements in the specified boolean array. @param array input boolean array to be reversed
1822 Rotates a boolean array within the specified range by the given distance. @param array boolean array to rotate @param distance number of positions to shift @param fromIndex start index of rotation section (inclusive) @param toIndex end index of rotation section (exclusive)
1823 Reverses the order of bytes in the specified array. @param array byte array to be reversed
1824 Rotates a byte array by specified distance within the given range. @param array the byte array to rotate @param distance the number of positions to rotate @param fromIndex the start index of the section to rotate @param toIndex the end index of the section to rotate
1825 Sorts the specified range of the byte array in descending order. @param array the byte array to sort @param fromIndex start index of the range (inclusive) @param toIndex end index of the range (exclusive)
1826 Sorts the specified range of a character array in descending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1827 Reverses the characters in the given array in-place. @param array the character array to be reversed
1828 Rotates a substring within the given array by the specified distance. @param array input character array @param distance rotation distance @param fromIndex start index of the substring @param toIndex end index of the substring
1829 Sorts the specified range of double array in descending order. @param array the array to sort @param fromIndex the starting index of the range (inclusive) @param toIndex the ending index of the range (exclusive)
1830 Reverses the order of elements in a double array.
1831 Rotates a subarray within the given array by the specified distance. @param array input double array @param distance number of positions to rotate @param fromIndex starting index of subarray to rotate @param toIndex ending index of subarray to rotate
1832 Sorts the specified subarray of floats in descending order. @param array the array containing the elements to sort @param fromIndex start index of the subarray (inclusive) @param toIndex end index of the subarray (exclusive)
1833 Reverses the order of elements in the given float array. @param array input array to be reversed
1834 Rotates elements in a float array within specified range by given distance. @param array the input array @param distance the number of positions to rotate @param fromIndex start index of rotation range (inclusive) @param toIndex end index of rotation range (inclusive)
1835 Sorts the specified range of an array in descending order. @param array the array to sort @param fromIndex start index (inclusive) of the range to sort @param toIndex end index (exclusive) of the range to sort
1836 Reverses the order of elements in the given integer array. @param array input array to be reversed
1837 Rotates a portion of an array by the specified distance. @param array input array @param distance number of positions to rotate @param fromIndex start index of rotation section (inclusive) @param toIndex end index of rotation section (exclusive)
1838 Sorts the specified range of elements in the array in descending order. @param array input array @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1839 Reverses the order of elements in a long array. @param array input array to be reversed
1840 Rotates a portion of the array by specified distance. @param array input array @param distance number of positions to rotate @param fromIndex start index of rotation section (inclusive) @param toIndex end index of rotation section (exclusive)
1841 Sorts the specified portion of the short array in descending order. @param array input array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1842 Reverses the order of elements in the specified short array. @param array input array to be reversed
1843 Rotates a portion of the given array by the specified distance. @param array the input array @param distance rotation distance (positive for forward rotation) @param fromIndex start index of rotation section @param toIndex end index of rotation section
1844 Sorts an array of bytes in-place. @param array byte array to be sorted
1845 Sorts an array of bytes in descending order.
1846 Sorts an integer array in ascending order using quicksort algorithm. @param array input array to be sorted
1847 Sorts an integer array in descending order. @param array input array to be sorted
1848 Sorts an array of long integers in ascending order. @param array input array to be sorted
1849 Sorts an array of long integers in descending order.
1850 Creates a Splitter with the specified non-empty separator. @param separator single character or multi-character separator string
1851 Returns a MapSplitter instance using a custom key-value separator. @param separator character used to separate keys and values
1852 Starts a Finalizer thread for the given class and queue. @param finalizableReferenceClass class of the FinalizableReference @param queue ReferenceQueue to use for cleanup @throws IllegalArgumentException if invalid class is provided
1853 Creates an empty Builder instance. @return A new Builder object with default configuration
1854 Creates an empty Builder instance. @return A new Builder with default configuration
1855 Wraps a modifiable multiset in an unmodifiable view. @param multiset the original multiset to wrap @return an unmodifiable Multiset instance or an existing one if it's already unmodifiable
1856 Creates an EvictingQueue instance with specified maximum size. @param maxSize maximum number of elements in queue
1857 Creates an empty forwarding blocking deque. This constructor is intended to be used by subclasses.
1858 Creates an empty unmodifiable BlockingDeque instance. This constructor is used to create a view of another collection. The returned deque is serializable if the backing collection is serializable.
1859 Creates an empty forwarding navigable set.
1860 Returns an unmodifiable view of the given entry set. @param entrySet original entry set
1861 Returns an unmodifiable view of the specified navigable map. @param map navigable map to wrap
1862 Wraps a ListMultimap in an unmodifiable view. @param delegate original multimap instance
1863 Returns an unmodifiable view of the given set multimap. @param delegate original set multimap
1864 Returns an unmodifiable view of the input row-sorted table. @param table input table to wrap
1865 Adapts the given Future to be Listenable in a thread-safe pool. @param future original non-Listenable Future @return ListenableFuture that wraps the original or its adapter
1866 Adds a callback to the given ListenableFuture. @param future future to add callback to @param callback callback to invoke on completion @param executor executor to run callback in
1867 Initializes a LocalCache instance with given parameters. @param builder CacheBuilder instance @param loader optional CacheLoader instance
1868 Creates a new instance of TreeMultiset with natural ordering.
1869 Creates a TreeMultiset instance with optional custom comparator. @param comparator nullable comparator for tree ordering @return TreeMultiset object or default natural ordering if null
1870 Replaces values in a map with the specified keys and values. @param key unique identifier for replacement @param values iterable of new values to replace with
1871 Replaces values in a map with the given iterable. @param key unique map identifier @param values new values to replace with @return Set of replaced values or null if not found
1872 Removes all elements equal to the given key from this set. @param key element to be removed, or null for no operation @return this set itself, for method chaining
1873 Creates a new HashMultiset with specified number of distinct elements. @param distinctElements initial count of unique elements
1874 Checks for cycles in a given network, handling both directed and undirected cases. @param network the graph to check @return true if a cycle exists, false otherwise
1875 Creates a new LinkedHashMultiset with specified number of distinct elements. @param distinctElements the initial size of the multiset
1876 Initializes a StandardNetwork instance from a NetworkBuilder. @param builder NetworkBuilder providing configuration parameters
1877 Constructs a StandardValueGraph with the provided builder and initial node connections. @param builder graph builder instance
1878 Creates a new hash set with expected size based on configuration.
1879 Creates a new linked set with expected size based on value capacity. @return Linked set of type V or null if not initialized.
1880 Adds a new cell with specified key-value pair to the data set. @param rowKey unique row identifier @param columnKey unique column identifier @param value cell value
1881 Adds a new entry to the map with the specified key and value. @param key unique identifier for the entry @param value associated data for the entry @return mutable Builder instance for chaining further operations
1882 Adds a value to the builder's underlying map. @param key class of the value being added @param value instance of type T to be stored in the map @return this Builder object for method chaining
1883 Puts all entries from a Map into the builder. @param map map containing key-value pairs to add
1884 Inserts a key-value pair into the map using an existing Entry object. @param entry pre-existing Entry containing key and value to be added
1885 Adds a new entry to the map with the specified key and value. @param key unique key identifier @param value associated value for the key @return Builder instance for method chaining
1886 Adds a value to the builder's map. @param key class type of the value being added @param value object to be associated with the given key @return this Builder instance for method chaining
1887 Puts a value into the builder's map with the given TypeToken as key. @param key unique identifier for the value @param value object to be stored in the map
1888 Adds all entries to the builder. @param entries iterable of key-value pairs to add @return this Builder instance for method chaining
1889 Adds multiple key-value pairs from the given iterable to this builder. @param entries collection of entries to add @return this builder instance for method chaining
1890 Filters a navigable set based on the provided predicate. @param unfiltered original navigable set @param predicate filtering condition @return filtered navigable set or null if unfiltered is null
1891 Builds an ImmutableSortedMap instance based on the provided entries. @return ImmutableSortedMap object or throws exception if invalid
1892 Adds a key-value entry with the specified range and value to the builder. @param range non-empty Range object @param value associated value
1893 Adds a non-empty Range to the collection of ranges. @param range non-empty Range object
1894 Computes the intersection of two ranges. @param connectedRange other range to intersect with @return intersected Range object or original range if no overlap
1895 Calculates the gap between two ranges. @param otherRange the range to compare with @return a new range representing the gap between the input ranges
1896 Merges two ranges into one. @param other Range to merge with @return merged Range object or original if identical
1897 Returns a canonical Range instance for the given domain. @param domain DiscreteDomain object defining the range's bounds
1898 Creates a new instance of HashBiMap with default capacity (16). @return an empty HashBiMap instance
1899 Creates a HashBiMap instance from a given Map. @param map input Map to populate the BiMap
1900 Creates a new instance of the Builder. @return A Builder object ready to build an instance of type B
1901 Creates an instance of ImmutableClassToInstanceMap containing a single entry. @param type class type (extends B) @param value instance to map to the provided class @return ImmutableClassToInstanceMap<B> with the specified key-value pair
1902 Returns an immutable set of values from the inverse mapping. @return Set of V values or empty set if no mappings exist
1903 Reverses a list, handling various types and access patterns. @param list input list to reverse @return reversed list of the same type as input
1904 Creates an immutable list from a given array. @param elements input array to copy
1905 Converts an array to a immutable list. @param elements array of elements @param length number of elements to include @return ImmutableList object or empty list if length is 0
1906 Returns a sublist containing elements from the specified range. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1907 Creates an immutable range map with a single entry for the given key-value pair. @param range unique key range @param value associated value
1908 Creates an ImmutableRangeSet from a single Range. @param range the input Range
1909 Creates an immutable sorted map with a single key-value pair. @param comparator the comparator to use for sorting @param k1 the key @param v1 the value
1910 Creates an empty immutable set with specified initial capacity. @param elements array of elements to be copied into the set
1911 Creates a new instance of Builder.
1912 Concatenates two iterators into one. @param a first iterator @param b second iterator @return concatenated iterator or null if either input is null
1913 Concatenates three iterators into one iterator. @param a first iterator @param b second iterator @param c third iterator @return concatenated iterator of type T
1914 Concatenates four iterators into one iterator. @param a first iterator @param b second iterator @param c third iterator @param d fourth iterator @return concatenated iterator of type T or null if any input is null
1915 Retrieves iterators for all subscribers of the given event. @param event Object representing an event @return Iterator over a flat collection of all subscribers
1916 Retrieves the result of a completed future, or null if not. @param closingFuture the future to retrieve from @return D object or null if not found
1917 Checks if the map contains a specified value. @param value Object to search for
1918 Removes and returns the associated value for a given key. @param key object to be removed @return associated value or null if not found
1919 Clears all entries in this map.
1920 Checks if this standard has any entries. @return true if empty, false otherwise
1921 Computes the standard hash code based on entry set. @return unique hash code value
1922 Compares two maps for differences. @param left first map to compare @param right second map to compare @return MapDifference object describing the differences between the two maps
1923 Constructs an EventBus instance with default configuration. @param name optional bus name (defaults to "default")
1924 Swaps a node in the queue with its child if it's smaller than the given value. @param index index of the node to swap @param x value to compare with children @return new index of the swapped node or result of crossOverUp
1925 Fills the hole at a given index by recursively finding and replacing with the smallest grandchild. @param index index of the hole to fill @return new index after filling the hole
1926 Checks if the specified object is in this sorted set. @param object the object to search for @return true if found, false otherwise
1927 Removes the first occurrence of the specified object from this sorted set. @param object the object to remove @return true if removed, false otherwise or on removal failure
1928 Returns a subset of this set containing elements between (inclusive) 'fromElement' and 'toElement'. @param fromElement lower bound element @param toElement upper bound element
1929 Returns a sorted set of row keys.
1930 Removes all occurrences of specified element from this set. @param key element to remove (may be null)
1931 Creates a new Bloom filter with the specified parameters. @param funnel function to transform input elements @param expectedInsertions estimated number of insertions @param fpp target false positive probability
1932 Rounds a double to an integer using the specified rounding mode. @param x value to be rounded @param mode RoundingMode to apply @return rounded int value or throws if out of range
1933 Rounds a double value to a long using the specified RoundingMode. @param x double value to round @param mode rounding strategy @return rounded long value or throws if invalid inputs
1934 Offers all remaining elements from the iterator to this data structure. @param elements iterator yielding elements to be offered
1935 Returns a TopKSelector instance to select top K elements based on natural ordering. @param k number of top elements to select
1936 Constructs a TopKSelector to select the greatest K elements. @param k number of top elements to select
1937 Checks if an integer is prime. @param n input number to check for primality
1938 Calculates the binomial coefficient (n choose k) using dynamic long arithmetic. @param n input value @param k input value @return BigInteger representing the result or null if invalid input
1939 Calculates statistics (mean, median, etc.) from an iterable of numbers. @param values collection of numeric values to process @return Stats object containing calculated statistics or null if empty
1940 Calculates statistics from an iterator of numbers. @param values iterator of numeric values
1941 Adds all paired statistics from the provided PairedStats object. @param values paired statistics to add
1942 Computes statistics from a stream of numeric values. @param values DoubleStream containing numeric data @return calculated Stats object
1943 Computes aggregate statistics from a stream of integer values. @param values IntStream containing integers to accumulate @return Stats object encapsulating calculated statistics
1944 Accumulates statistics from a LongStream. @param values input stream of long values @return Stats object with aggregated metrics or null if empty
1945 Accumulates statistics from provided DoubleStream. @param values stream of numerical values to process
1946 Accumulates statistics from an IntStream into a StatsAccumulator.
1947 Accumulates stream of Long values into internal statistics. @param values LongStream to process
1948 Recursively selects all occurrences of a value in an array within specified ranges. @param allRequired array of values to search for @param requiredFrom start index of first range (inclusive) @param requiredTo end index of last range (exclusive) @param array target array to select from @param from start index of current selection range (inclusive) @param to end index of current selection range (inclusive)
1949 Creates an immutable double array from a collection of doubles. @param values iterable of double values
1950 Creates an immutable integer array from the given iterable. @param values input iterable of integers
1951 Creates an immutable long array from a collection of longs. @param values iterable of long values
1952 Converts to string representation in specified base. @param radix target number base (e.g. 2 for binary)
1953 Converts a long integer to its string representation in base 10.
1954 Executes any of the provided tasks with a specified timeout. @param executorService thread pool for task execution @param tasks collection of callable tasks @param timed whether to use a timeout @param timeout maximum time to wait in nanoseconds @return result of the first completed task or null if all failed
1955 Executes a Runnable in the given Executor. @param combiner The Runnable to be executed @param executor The thread pool to execute the Runnable in @return A ListenableFuture representing the execution result
1956 Wraps a ListenableFuture into a ClosingFuture. @param future underlying ListenableFuture to wrap
1957 Attempts to poll an element from this queue; returns null if empty. @return polled element or null if queue is empty
1958 Returns the current element without removing it from the queue. If the queue is empty, returns null.
1959 Submits a Callable task to the specified Executor, returning a ListenableFuture result. @param callable task to execute @param executor execution context @return ListenableFuture containing the task's result or null if failed
1960 Retrieves a result from a Future with checked exceptions. @param future the Future to retrieve the result from @param exceptionClass the Class of the expected exception @param timeout and unit for the maximum wait time @throws X the expected exception if thrown by the Future
1961 Notifies the service as stopped, updating its state and dispatching events. @throws IllegalStateException if service is not in a stoppable state
1962 Notifies that the task has failed. @param cause the underlying exception
1963 Starts timing for the given service using a synchronized stopwatch. @param service service to start timing for
1964 Transitions a service from one state to another. @param service Service object being transitioned @param from Current state of the service @param to Target state of the service
1965 Waits on the specified guard until it's satisfied. @param guard monitor to wait on
1966 Waits for the specified Guard to be satisfied or interrupted. @param guard Guard object being monitored
1967 Waits uninterruptibly for the given guard to be satisfied. @param guard monitor and condition to wait on
1968 Waits uninterruptibly for the guard to be satisfied. @param guard Guard object to monitor
1969 Waits on a Guard until it's satisfied or the specified time elapses. @param guard condition to wait for @param time duration to wait @param unit TimeUnit for the specified duration @return true if the condition is met, false otherwise
1970 Waits for the specified guard condition to be satisfied or times out. @param guard Guard object to monitor @param time Time duration to wait @param unit TimeUnit of the timeout duration @return true if the condition is met, false otherwise
1971 Waits for a Guard to be satisfied within a specified time limit. @param guard the condition being monitored @param time maximum waiting duration in given TimeUnit @param unit TimeUnit of the waiting duration @return true if the Guard is satisfied, false otherwise
1972 Waits uninterruptibly for the specified guard to be satisfied or times out. @param guard monitor object to wait on @param time maximum duration to wait in given unit @param unit TimeUnit for time parameter @return true if guard is satisfied, false otherwise
1973 Executes the operation with a specified time-out. @param timeout duration to wait for completion @param unit time unit of the time-out @return FluentFuture containing result or exception
1974 Wraps a listenable future with a timeout. @param delegate original listenable future @param time timeout duration @param scheduledExecutor executor service for timed out operations
1975 Finds the first element matching a given predicate in an iterable sequence. @param predicate condition to match @return Optional containing the first matching element, or empty if none found
1976 Creates a fast CharMatcher instance with precomputed matches. @return Fast matcher or NegatedFastMatcher if total characters exceed DISTINCT_CHARS limit
1977 Re-throws a Throwable as a RuntimeException or its declared type. @param e the Throwable to rethrow @param declaredType1 first potential exception type @param declaredType2 second potential exception type
1978 Writes byte array to output stream. @param bytes data to be written
1979 Writes data from an InputStream to a newly opened OutputStream. @param input InputStream containing the data to be written @return the total number of bytes written or -1 on error
1980 Checks if the underlying stream is empty. @return true if the stream has no content, false otherwise
1981 Calculates the size of this resource. @return size in bytes, or -1 if unknown
1982 Copies user data to the specified OutputStream. @param output target stream for copying
1983 Copies data to the specified sink. @param sink target stream for copying
1984 Reads data from an underlying stream into a byte array. @return byte[] containing the read data or null if not known
1985 Reads data from the input stream using a specified byte processor. @param processor ByteProcessor to process the read bytes @return T object processed by the processor, or null if not found
1986 Compares byte content of this source to another. @param other ByteSource to compare with
1987 Writes CharSequence to underlying stream. @param charSequence sequence of characters to be written
1988 Writes data from a Readable source to the underlying output stream. @param readable input data source
1989 Calculates the length of a streamable entity. @return Length in bytes, or -1 if unknown
1990 Copies user profile data to the specified writable destination. @param appendable writable output target @return number of bytes written or -1 on error
1991 Copies user data to a specified sink. @param sink destination for the copy operation
1992 Reads the first line from a stream, handling exceptions and resource closure.
1993 Reads lines from the stream and processes them with the given processor. @param processor LineProcessor to apply to each line @return processed result or null if not applicable
1994 Checks if the underlying stream is empty. @return true if the stream has no content, false otherwise
1995 Expands the hash table to twice its current capacity. @GuardedBy("this")
1996 Filters keys in a multimap using the given predicate. @param unfiltered Multimap to filter @param keyPredicate Predicate to apply to each key @return New filtered multimap or existing one if already filtered
1997 Filters values in a multimap based on a predicate. @param unfiltered the original multimap @param valuePredicate predicate to apply to each value @return filtered SetMultimap with values matching the predicate
1998 Filters entries in a multimap based on the provided predicate. @param unfiltered original multimap @param entryPredicate filter criteria for entries @return filtered Multimap object or new instance if not filtered
1999 Creates an iterator for unique column keys, eliminating duplicates based on the configured comparator. @return Iterator over unique column keys or empty iterator if none found.
2000 Creates an Immutable Bi-Map from an iterable of key-value entries. @param entries iterable of entries to copy
2001 Creates an ImmutableMap from a collection of entries. @param entries Iterable of key-value pairs to copy into map
2002 Converts an iterable to a typed array. @param iterable input collection @param type expected element class @return array containing all elements or null if empty
2003 Creates a copy of the given sorted iterable with the specified comparator. If the original is an ImmutableSortedSet with the same comparator, returns it directly. Otherwise, constructs a new ImmutableSortedSet from the iterable's elements. @param comparator comparison function for the set @param elements iterable containing the set's elements
2004 Performs binary search on a list using a custom key function and comparator. @param list input list to search @param keyFunction function to extract the search key from each element @param key target search key @param keyComparator comparator for searching key @param presentBehavior behavior when search key is present in list @param absentBehavior behavior when search key is not present in list
2005 Removes all elements from this list that are contained in the given collection. @param key the collection of elements to remove
2006 Transforms the values in a navigable map using a given function. @param fromMap source map with keys and original values @param function transformation function applied to each value @return new map with transformed values, same keys as input map
2007 Removes mapping by key-value pair if present. @param rowKey unique row identifier @param columnKey unique column identifier @param value associated value to remove @return true if removed, false otherwise
2008 Returns a thread-safe wrapper for the provided list multimap. @param multimap list multimap to synchronize @return synchronized list multimap or null if input is null
2009 Returns a thread-safe version of the provided set multimap. @param multimap input multimap to synchronize
2010 Converts a Readable object to its string representation. @param r Readable object to convert
2011 Catches specific exceptions and returns a fallback value. @param exceptionType type of exception to catch @param fallback function to execute on caught exception @param executor executor service for fallback execution @return FluentFuture containing result or fallback value
2012 Transforms a Future into a new Future of type T using the provided function. @param function transformation function @param executor execution context for the transformation
2013 Creates a directed graph builder. @return GraphBuilder instance with directed graph capability
2014 Creates an undirected graph builder. @return GraphBuilder instance with directed=false
2015 Creates a new GraphBuilder instance from an existing graph. @param graph the original graph to copy settings from
2016 Creates a network builder with a directed topology. @return NetworkBuilder instance with directed topology
2017 Creates an undirected network builder. @return NetworkBuilder instance with directed=false property set
2018 Creates a NetworkBuilder instance from an existing network. @param network the original network to copy properties from
2019 Creates a directed ValueGraphBuilder instance.
2020 Creates an undirected graph builder.
2021 Creates a ValueGraphBuilder instance from an existing graph. @param graph the input graph
2022 Adds a listener to the internal state. @param listener Listener object to be added @param executor Executor instance for concurrent execution
2023 Creates an empty CompactLinkedHashSet instance. @return A new, empty CompactLinkedHashSet object.
2024 Creates a compact hash set from the given collection. @param collection input collection to convert
2025 Creates a compact linked hash set with expected size. @param expectedSize anticipated number of elements
2026 Creates a sorted set multimap from a backing map and a sorted set factory. @param map backing map of key-value collections @param factory supplier for creating sorted sets of values
2027 Converts a collection of elements into an immutable multiset.
2028 Converts a collection of elements with optional counts into an immutable multiset. @param elementFunction maps each element to its type @param countFunction extracts the count from each element @return ImmutableMultiset containing all elements with their respective counts
2029 Creates a new instance of the Builder class. @return A Builder object with default configuration.
2030 Joins an array of objects into a string using the join method. @param parts Array of objects to be joined, may be null
2031 Joins elements of this collection using the specified Joiner. @param joiner join strategy to apply
2032 Simplifies a Unix-style file path by resolving ., .., and //. @param pathname the path to simplify @return simplified path as a string or "." for an empty input
2033 Parses trie to builder, recursively processing encoded string and populating suffix map. @param stack Deque for building domain strings @param encoded encoded trie string @param start starting index in the encoded string @param builder map builder for public suffix entries @return number of characters processed
2034 Creates a concurrent map instance using either the default ConcurrentHashMap or a custom implementation. @return ConcurrentMap instance
2035 Concatenates iterables resulting from transforming input iterable using the given function. @param function transformation function for each element in the input iterable
2036 Concatenates multiple iterables into a single iterable. @param inputs variable-length parameter list of iterables to concatenate
2037 Retrieves a value with specified timeout and time unit. @param timeout maximum wait duration in specified time unit @param unit time unit for the timeout (e.g. TimeUnit.SECONDS) @throws InterruptedException if interrupted while waiting @throws TimeoutException if operation timed out @throws ExecutionException if underlying execution failed
2038 Adds a new node to the graph and returns its associated connections. @param node unique node identifier
2039 Enters a guarded region with specified duration. @param guard Guard object @param time duration in nanoseconds
2040 Converts the given string to the specified case format. @param format CaseFormat enum value @param s input string to convert
2041 Converts a string to the specified case format. @param format CaseFormat enum value @param s input string to convert
2042 Converts a string to the specified case format. @param format CaseFormat enum value @param s input string
2043 Converts string to specified case format. @param format target case format @param str input string @return converted string or original if format is default
2044 Checks if given CharSequence does not match any pattern. @return true if no match found, false otherwise
2045 Removes all occurrences of a specified character from the given sequence. @param sequence input CharSequence @return modified string with characters removed or original string if none found
2046 Replaces occurrences of a character in a string with a specified replacement. @param sequence input string-like object @param replacement the character to replace @return modified string or original if not found
2047 Resolves the embedded IPv4 client address for a given IPv6 address. @param ip IPv6 address to resolve @return Inet4Address object or throws exception if not found
2048 Reads bytes from input and updates hash with the read data. @param bytes buffer to store read data @param off offset in the buffer where data should be written @param len number of bytes to read @return number of bytes read, or -1 if end-of-input reached
2049 Copies data from InputStream to specified byte array. @param in input stream @param b target byte array
2050 Rotates elements in the given boolean array by specified distance. @param array boolean array to be rotated @param distance number of positions to shift elements
2051 Rotates elements in a byte array by specified distance. @param array byte array to be rotated @param distance number of positions to shift elements
2052 Sorts an array of bytes in descending order.
2053 Sorts an array of characters in descending order. @param array the input character array
2054 Rotates characters in the given array by the specified distance. @param array input character array to be rotated @param distance number of positions to shift elements
2055 Sorts an array of doubles in descending order. @param array input array to be sorted
2056 Rotates elements in the given array by the specified distance. @param array input array to be rotated @param distance number of positions to shift elements
2057 Sorts an array of floats in descending order. @param array input float array to be sorted
2058 Rotates elements in the given array by the specified distance. @param array input array to be rotated @param distance number of positions to shift each element
2059 Sorts an integer array in descending order. @param array input array to be sorted
2060 Rotates elements in an integer array by given distance. @param array input array to be rotated @param distance number of positions to shift elements
2061 Sorts an array of long integers in descending order.
2062 Rotates elements in the given array by specified distance. @param array input array @param distance rotation distance
2063 Sorts an array of shorts in descending order. @param array input array to be sorted
2064 Rotates the given short array by the specified distance. @param array the input array to be rotated @param distance the number of positions to shift elements
2065 Configures key-value splitter with a custom separator. @param separator string to use as separator in split operation
2066 Creates a RateLimiter with specified permits per second and warm-up period. @param permitsPerSecond rate limit in units of {@code unit} @param warmupPeriod initial warm-up duration @param unit time unit for permit rate (e.g. SECONDS, MILLISECONDS)
2067 Returns an unmodifiable view of the given sorted multiset. @param sortedMultiset original sorted multiset to wrap
2068 Wraps a navigable set in an unmodifiable interface. @param set original navigable set
2069 Returns an unmodifiable collection of map entries. @param entries input collection of entries
2070 Returns an unmodifiable view of the specified sorted set multimap. @param delegate original mutable sorted set multimap
2071 Wraps a ListenableFuture with eventual auto-closing functionality. @param future the original future to be wrapped @param closingExecutor executor for closing resources @return ClosingFuture object or null if not found
2072 Adds a callback to be executed when this future completes. @param callback callback to execute @param executor executor to use for running the callback
2073 Creates a bi-directional enum map between two types. @param keyType the type of enums to use as keys @param valueType the type of enums to use as values
2074 Creates an EnumHashBiMap instance with the specified enum type as keys. @param keyType the enum class to use as keys
2075 Creates a TreeMultiset from an iterable of comparable elements. @param elements Iterable of elements to populate the multiset with
2076 Initializes a new Builder with a custom comparator. @param comparator comparator to order elements in the multiset
2077 Replaces values associated with a given key in the map. @param key unique identifier for replacement @param values new values to associate with the key
2078 Replaces values in the set associated with the given key. @param key unique identifier of the set to modify @param values new values to store in the set
2079 Creates a HashMultiset from an iterable of elements. @param elements collection of elements to include in the multiset @return populated HashMultiset instance
2080 Creates a new ArrayListMultimap with specified key and value counts. @param expectedKeys total number of keys @param expectedValuesPerKey average values per key
2081 Creates a new HashMultimap with specified capacity. @param expectedKeys estimated number of unique keys @param expectedValuesPerKey estimated average values per key
2082 Creates a HashMultimap from an existing Multimap instance. @param multimap the original Multimap to clone @return a new HashMultimap with same key-value pairs as input
2083 Creates a LinkedListMultimap with the specified expected key count. @param expectedKeys desired number of keys in the multimap
2084 Creates a linked hash multiset from an iterable of elements. @param elements input collection of elements @return LinkedHashMultiset instance populated with unique elements and added duplicates
2085 Creates a new LinkedHashMultimap instance with default key and value set capacities.
2086 Creates a LinkedHashMultimap with estimated key and value capacities. @param expectedKeys number of unique keys @param expectedValuesPerKey average values per key
2087 Constructs a standard mutable network using the provided builder. @param builder NetworkBuilder instance to configure the network
2088 Initializes a new graph with the specified builder settings. @param builder Graph builder instance
2089 Adds a cell to the table, either as an immutable object or by individual key-value pairs. @param cell Cell object (may be immutable)
2090 Adds an entry to the map and returns this builder instance. @param entry Map entry to add
2091 Adds all entries from the given iterable to the map. @param entries collection of key-value pairs to add @return this Builder instance for method chaining
2092 Adds an entry to the map and returns the builder instance.
2093 Converts to a Set-based Multimap. @return ImmutableSetMultimap instance or creates one if not already built
2094 Builds and returns an immutable sorted map.
2095 Copies all entries from a RangeMap to this builder. @param rangeMap map of ranges and values to copy @return this Builder instance, allowing method chaining
2096 Adds multiple ranges to the builder. @param ranges iterable of Range objects to be added @return this Builder instance for method chaining
2097 Intersects the given range with a collection of ranges, returning an immutable list of intersecting sub-ranges. @param range Range to intersect with
2098 Creates a contiguous set of comparable elements within the specified range and domain. @param range the desired range of values @param domain the discrete domain that defines the set's bounds @return ContiguousSet containing the requested elements or an empty set if none exist
2099 Coalesces a range with a matching value from the given entry. @param range the initial range @param value the value to match @param entry optional RangeMapEntry containing the key and value @return updated range or original range if no match found
2100 Converts to an immutable sorted set of discrete values within a given domain. @param domain DiscreteDomain to constrain the set
2101 Converts a map to an immutable enum map. @param map input map @return ImmutableEnumMap object or empty map if input is empty
2102 Returns an immutable map of rows to their corresponding column maps. @return map where keys are row identifiers and values are column maps
2103 Returns an iterator over the elements in this set in reverse order. @return Descending iterator or null if empty
2104 Builds an immutable list from the current contents. @return ImmutableList of type E or null if contents are empty
2105 Converts an array of objects to an immutable list. @param elements the input array
2106 Builds an ImmutableSortedSet instance from internal elements. @return ImmutableSortedSet containing deduplicated and sorted elements
2107 Creates an immutable map from a sorted array of entries. @param n size of the input array @param entryArray array of key-value pairs to populate the map @param throwIfDuplicateKeys whether to throw an exception on duplicate keys @return ImmutableMap instance or null if duplicates are allowed and all values are deleted.
2108 Finds the index of the first matching suffix type. @param desiredType Optional PublicSuffixType to match
2109 Creates an immutable set of enums from the given iterable. @param elements iterable containing enum values
2110 Returns an unmodifiable iterator over elements in this collection. @return Iterator instance allowing iteration over elements
2111 Dispatches an event to subscribed listeners or posts a DeadEvent. @param event Event object to dispatch or post as DeadEvent if no listeners found
2112 Tries crossing over and bubbling up in the heap, returning a MoveDesc if successful. @param removeIndex index to remove @param vacated index that will be vacated @param toTrickle element to trickle up @return MoveDesc with new parent or null on failure
2113 Returns the comparator used for sorting rows in this collection. @return Comparator object or null if not set (not applicable)
2114 Returns a synchronized version of the provided NavigableSet. @param navigableSet original set to synchronize
2115 Creates a Bloom Filter with specified expected insertions and false positive probability. @param funnel serialization function for filter elements @param expectedInsertions estimated number of elements to be inserted @param fpp desired false positive probability
2116 Creates a Bloom Filter with the given funnel and expected insertions. @param funnel Funnel to use for hashing elements @param expectedInsertions Estimated number of elements to add
2117 Estimates the approximate number of elements stored. @return Element count based on hash function and bit statistics
2118 Returns a collector that selects the top K elements based on a given comparator. @param k number of top elements to select @param comparator for sorting and selecting top elements
2119 Retrieves the k smallest elements from an iterator. @param iterator input iterator @param k number of smallest elements to retrieve @return List of k smallest elements or empty list if not found
2120 Offers all elements from the given iterable to the underlying queue. @param elements iterable containing elements to be offered
2121 Returns a string representation of this unsigned long value. @return human-readable string representation of the value.
2122 Validates and records the lock acquisition for a CycleDetectingLock. @param lock the lock being acquired
2123 Transforms a ClosingFuture using the provided asynchronous function. @param function async transformation function @param executor Executor for executing the transformation @return transformed ClosingFuture or null if not found
2124 Transforms a future using an asynchronous closing function. @param function asynchronous closing function to apply @param executor Executor instance for async computation @return ClosingFuture object representing transformed result
2125 Retrieves a value from a future with checked exceptions. @param future the future containing the value @param exceptionClass class of expected exception @return the retrieved value or null if not available
2126 Retrieves a checked result from a future, throwing the specified exception type if timed out or failed. @param future Future containing the result @param exceptionClass Exception class to throw on timeout/failure @param timeout Maximum wait time in nanoseconds
2127 Reschedules this task with a new schedule, handling failures and locking. @return a Cancellable object or immediateCancelledFuture() on failure
2128 Notifies the service as started, potentially transitioning to STOPPING or RUNNING state. @throws IllegalStateException if service is not in STARTING state
2129 Starts all services asynchronously. Ensures all services are in NEW state before proceeding. @return This ServiceManager instance
2130 Enters the specified Guard when its timeout is reached. @param guard Guard object @param time duration in nanoseconds
2131 Enters the given Guard uninterruptibly for a specified duration. @param guard Guard object to enter @param time duration in nanoseconds
2132 Waits for a specified duration while monitoring a Guard. @param guard the Guard to monitor @param time the duration to wait in nanoseconds @return true if the Guard was satisfied within the given time, false otherwise
2133 Waits uninterruptibly for the Guard to be released within a specified duration. @param guard the Guard to wait on @param time the maximum waiting duration @return true if the Guard was released, false otherwise
2134 Executes the operation with a specified time limit. @param timeout time duration for execution @param scheduledExecutor executor service to use
2135 Writes byte array content to a specified file. @param from byte array data to be written @param to target file for writing
2136 Computes the hash of the object using a specified hash function. @param hashFunction instance of HashFunction to use for hashing @return HashCode object or throws IOException on failure
2137 Copies file contents from source to destination stream. @param from source file @param to destination output stream
2138 Copies content from a URL to an output stream. @param from URL to read from @param to Output stream to write to
2139 Copies the contents of one file to another. @param from source file @param to destination file @throws IOException if an I/O error occurs
2140 Converts a File object to its byte array representation. @param file input file @return byte array containing file data or null on error
2141 Converts a URL to its byte representation. @param url URL object
2142 Reads the contents of a file into bytes and processes them. @param file file to be processed @param processor callback function for processing each byte @return result of processing or null if process returns null
2143 Compares two files for equality by comparing their lengths and contents. @param file1 first File object to compare @param file2 second File object to compare @return true if files are equal, false otherwise
2144 Compares two file paths for equality. @param path1 first file path @param path2 second file path @return true if paths are the same, false otherwise
2145 Writes a CharSequence to a file using the specified charset. @param from CharSequence to write @param to target file location @param charset character encoding scheme
2146 Appends a CharSequence to a file using the specified charset and mode. @param from CharSequence to write @param to target file path @param charset character encoding for writing
2147 Copies character data from a file to an appendable target. @param from source file @param charset encoding to use @param to destination for copied content
2148 Reads the first line from a file using the specified character set. @param file the file to read from @param charset the character encoding for reading @return the first line of text or null if empty
2149 Reads lines from a file into a list. @param file the file to read @param charset the character set of the file content @return list of strings representing the file's lines
2150 Reads lines from a file into the provided callback. @param file file to read @param charset character encoding for reading @param callback callback to process each line @return result of processing (may be null)
2151 Reads lines from a URL into a target object. @param url source URL @param charset character set to use for decoding @param callback processor to convert each line into the target object @return the resulting target object or null if not processed
2152 Maps a file to a memory-mapped buffer. @param file file to be mapped @param mode mapping mode (e.g. read-only, read-write)
2153 Maps a file to memory with specified parameters. @param file file to map @param mode access mode for mapped buffer @param size requested size of mapped buffer
2154 Adds a shutdown hook with delayed execution. @param service ExecutorService instance @param terminationTimeout timeout duration in specified unit @param timeUnit time unit for timeout (e.g., SECONDS)
2155 Filters values in a multimap based on the provided predicate. @param unfiltered input multimap @param valuePredicate predicate to evaluate each value @return filtered multimap with matching values removed
2156 Creates an ordering based on multiple comparators. @param comparators iterable of comparators to combine @return Ordering instance for the given comparators
2157 Creates an immutable bi-map by copying the provided map. @param map source map to copy, can be a partial view of a BiMap
2158 Converts internal delegate to an array of specified type. @param type Class of elements in the returned array @return Array of type E or null if not found (but never empty)
2159 Converts an iterator to a typed array. @param iterator iterator over elements of type T @param type class of the array elements @return array of type T or null if iteration failed
2160 Converts this collection to an immutable sorted set using the specified comparator. @param comparator comparator for sorting elements @return ImmutableSortedSet instance or null if delegate is null
2161 Creates an immutable sorted set from the given iterable of elements. @param elements input iterable
2162 Creates an immutable sorted set from a collection of elements. @param comparator comparison function for sorting @param elements collection of elements to include in the set
2163 Returns a sorted map of rows to columns with values.
2164 Generates a string representation of this object. @return A human-readable string or null if not computed yet
2165 Returns a synchronized version of the given sorted set multimap. @param multimap input multimap to synchronize
2166 Reads input from a stream and returns as a string. @throws IOException if an I/O error occurs
2167 Creates a compact linked hash map with an expected size. @param expectedSize anticipated number of entries
2168 Creates a compact linked hash set from the given collection. @param collection input collection of elements
2169 Creates a new empty TreeMultimap with natural ordering for keys and values.
2170 Creates a TreeMultimap instance with custom comparators for keys and values. @param keyComparator comparator for ordering keys @param valueComparator comparator for ordering values
2171 Checks if input sequence matches any of predefined patterns. @return true if sequence matches any pattern, false otherwise
2172 Removes characters from a given sequence based on negation operation. @param sequence input character sequence
2173 Replaces a sequence of characters with a replacement string. @param sequence CharSequence to modify @param replacement replacement string @return modified CharSequence or original if not found
2174 Converts an InetAddress to a coerced IPv4 address, handling special cases and embedded IPv6 addresses. @param ip the input InetAddress @return Inet4Address object or null if not found
2175 Creates a rate limiter with specified permits per second and warm-up period. @param permitsPerSecond maximum permits allowed per second @param warmupPeriod duration for initial warm-up before limiting kicks in
2176 Returns an unmodifiable set of key-value entry pairs. @return Set of Entry objects containing keys and values.
2177 Schedules a one-time execution of a Runnable command after a specified delay. @param command the task to be executed @param delay time to wait before executing the command @param unit time unit for the delay (e.g., seconds, milliseconds)
2178 Builds a weighted cache with the given cache loader. @param loader CacheLoader instance for loading values
2179 Builds a local cache instance with the current configuration.
2180 Creates an ordered builder using the provided comparator. @param comparator function to determine order of elements
2181 Creates a builder with elements in descending order. @return Builder instance with reversed ordering
2182 Creates a builder with a natural ordering comparator. @return Builder instance with natural ordering
2183 Creates a bidirectional enum map from the given key-value map. @param map input map of enums to enums
2184 Creates an EnumHashBiMap from a given Map. @param map input map with enum keys and values
2185 Replaces existing values associated with the specified key in this map. @param key the key to replace values for @param values new values to associate with the key @return this map, or null if the key is not present
2186 Checks if two lists are permutations of each other. @param first first list @param second second list @return true if lists are permutations, false otherwise
2187 Creates an empty multimap with object keys and values.
2188 Creates a new ArrayListMultimap instance from the given Multimap. @param multimap existing Multimap to copy elements from
2189 Creates an empty multimap with type parameters K and V. @return a newly created HashMultimap instance
2190 Creates an empty LinkedList-based multimap.
2191 Creates a LinkedListMultimap from an existing Multimap. @param multimap input multimap to copy
2192 Creates a new linked hash multimap from an existing one. @param multimap source multimap
2193 Builds and returns a mutable network instance.
2194 Initializes a graph using an AbstractGraphBuilder. @param builder Graph configuration builder
2195 Builds and returns an instance of StandardMutableValueGraph. @return a new instance of StandardMutableValueGraph
2196 Puts all cells from the given table into this builder. @param table Table containing data to be added
2197 Adds all key-value pairs from an iterable of entries. @param entries collection of entries to add @return this Builder instance for method chaining
2198 Adds all entries from the given map to this builder. @param map input map containing key-value pairs
2199 Adds multiple key-value pairs from the given iterable. @param entries iterable of entries to add @return this builder instance for method chaining
2200 Creates a filtered view of the specified map with an additional filter. @param map original AbstractFilteredMap instance @param entryPredicate predicate to apply on each entry
2201 Adds all ranges from the given RangeSet to this builder.
2202 Returns a subset of ranges that intersect with the given range. @param range range to intersect with @return sub-range set or original range if fully contained, empty if not found
2203 Creates a contiguous set of integers from the given range. @param lower inclusive lower bound @param upper exclusive upper bound
2204 Creates a contiguous set of numbers in the range [lower, upper]. @param lower lowest value (inclusive) @param upper highest value (inclusive)
2205 Creates a contiguous set of integers from an open range. @param lower lower bound (inclusive) @param upper upper bound (exclusive)
2206 Creates a contiguous set of discrete values from the closed-open range [lower, upper). @param lower lower bound (inclusive) @param upper upper bound (exclusive)
2207 Coalesces a range with a single point or another range. @param range original range @param value point to merge with
2208 Adds a new node and returns its associated network connections. @param node the newly added node
2209 Creates an immutable map by copying a given map's contents. @param map the original map to be copied
2210 Retrieves a row from the map by its key. @param rowKey unique identifier for the row @return an empty map if not found or null
2211 Returns the smallest element in this set that is greater than or equal to the specified element. @param e element to find a lower bound for @return Smallest element >= e or null if not found
2212 Returns the largest element in the set that is less than or equal to the given value. @param e input value @return closest element in the set or null if not found
2213 Creates an immutable list from an iterator. @param elements the source iterator
2214 Builds an ImmutableRangeMap from sorted entries. @return RangeMap object or throws exception on overlapping ranges
2215 Merges and sorts input ranges into a single immutable set. @return ImmutableRangeSet object or empty set if no ranges
2216 Parses Java class path into a list of URLs. @return List of URLs representing the class path entries
2217 Creates a list of method parameters.
2218 Retrieves the set of throwable types for this token. @return Immutable list of TypeTokens representing exception types
2219 Wraps a collection of tasks into an immutable list. @param tasks Collection of Callable tasks to wrap
2220 Creates a sorted copy of the specified iterable. @param elements the input collection to sort @return a sorted ImmutableList or null if input is empty
2221 Creates a sorted copy of the given iterable. @param comparator sorting order comparator @param elements input collection to be sorted @return sorted ImmutableList object
2222 Creates an immutable sorted set from a given iterator of elements. @param comparator comparison function for sorting @param elements iterator over elements to include in the set @return ImmutableSortedSet object containing all elements
2223 Creates an ImmutableMap from a sorted array of key-value pairs. @param n expected number of entries @param entryArray sorted array of Entry objects @param throwIfDuplicateKeys whether to throw on duplicate keys @return ImmutableMap or fallback implementation if overflow occurs
2224 Retrieves the public suffix index from cache or recalculates it if not initialized. @return The public suffix index (0-based)
2225 Retrieves the registry suffix index from cache or initializes it if not set. @return registry suffix index
2226 Creates an ImmutableSortedMap from a collection of entries. @param comparator key comparison function @param sameComparator whether to use the provided comparator for sorting @param entries iterable of key-value pairs
2227 Creates a copy of the given TreeBasedTable with same type parameters. @param table original table to be copied
2228 Creates a Bloom filter with specified expected insertions. @param funnel funnel to serialize objects @param expectedInsertions estimated number of inserts
2229 Returns a collector that finds the top K elements based on the given comparator. @param k number of top elements to find @param comparator comparison function for elements @return Collector that produces a list of top K elements
2230 Retrieves the top K elements from an iterable. @param iterable input collection @param k number of elements to retrieve @return list of top K elements or null if not found
2231 Returns the greatest K elements from an iterable. @param iterator iterable of elements @param k number of elements to find @return List of greatest K elements or empty list if not enough elements
2232 Catches a specific exception type and returns a fallback value. @param exceptionType class of the exception to catch @param fallback function to execute if caught, returning result @param executor thread pool executor for asynchronous execution
2233 Waits until the current operation has been stopped.
2234 Waits until the stopped state is achieved. @param timeout maximum time to wait in specified units @param unit time unit (e.g. TimeUnit.SECONDS)
2235 Returns a precomputed CharMatcher instance. @return precomputed CharMatcher object
2236 Replaced by Files.asByteSource().hash() for efficient hashing. @param file input file to hash @param hashFunction hash function to apply
2237 Moves a file from one location to another. @param from source file @param to destination file @throws IOException if move operation fails
2238 Reads lines from a URL into a list. @param url the URL to read from @param charset the character set to use for reading
2239 Maps a File to a mapped byte buffer in read-only mode. @param file input file to be mapped
2240 Returns an exiting executor service with specified termination timeout. @param executor existing thread pool executor @param terminationTimeout duration to wait for tasks to complete @param timeUnit unit of time for termination timeout
2241 Returns an exiting scheduled executor service with a specified termination timeout. @param executor Scheduled thread pool executor @param terminationTimeout time to wait before shutting down the executor @param timeUnit unit of time for the termination timeout
2242 Adds a shutdown hook with a delay based on the specified timeout. @param service ExecutorService instance @param terminationTimeout duration of shutdown delay in nanoseconds
2243 Reclaims a key-value entry from the hash table. @param entry Entry to reclaim @param hash Hash of the reclaimed key @return true if entry was successfully reclaimed, false otherwise
2244 Removes a value reference from the map by key or hash. @param key unique key identifier @param hash hash code for key lookup @param valueReference ValueReference object to be removed @return true if removal was successful, false otherwise
2245 Waits for the system to reach a healthy state.
2246 Waits until the system is healthy or times out. @param timeout maximum duration to wait @param unit time unit for timeout
2247 Returns a read-only map of service startup times.
2248 Retrieves annotations of specified type from the current class. @param annotationType Class of desired annotations @return Array of annotations or empty array if none found
2249 Creates an immutable sorted set from the given collection. @param elements input collection of elements
2250 Returns a synchronized version of the input NavigableMap. @param navigableMap input map to synchronize
2251 Wraps a File into a char source for reading. @param file the file to read from @param charset encoding of the file content @return string representation of the file content or null on error
2252 Converts URL to string representation. @param url input URL @param charset character encoding (e.g. UTF-8)
2253 Creates an empty CompactLinkedHashMap instance.
2254 Creates a TreeMultimap from an existing Multimap instance. @param multimap the input Multimap to transform @return a new TreeMultimap with comparable keys and values
2255 Creates a reentrant lock with the specified name and fairness policy. @param lockName unique lock identifier @param fair whether to use fair locking or not
2256 Creates a ReentrantReadWriteLock instance with specified name and fairness. @param lockName unique lock identifier @param fair whether to use fair locking policy
2257 Creates a map of LockGraphNode objects for each enum value in the given class. @param clazz Enum class to create nodes for @return Map of enum values to corresponding LockGraphNode objects
2258 Validates a domain part by checking length, ASCII content, and character rules. @param part the domain part to validate @param isFinalPart whether this is the final part of the domain @return true if valid, false otherwise
2259 Converts InetAddress to integer using IPv4 address. @param ip InetAddress object @return integer representation of the IP address or -1 if not found
2260 Checks if the iterator contains the specified object. @param object the object to search for
2261 Removes the specified object from the collection. @param object the object to remove, or null for no-op @return true if removed, false otherwise
2262 Removes all elements from the current collection that are present in the given collection. @param collection collection of elements to remove @return true if any elements were removed, false otherwise
2263 Retains all elements from the given Collection. @param collection Collection to filter from
2264 Clears iterator and associated data.
2265 Checks if the iterator contains no elements.
2266 Returns an array representation of the collection.
2267 Schedules a Runnable with a specified delay in the given unit. @param command the task to be executed @param delay duration of delay
2268 Retrieves all subscribers for a given listener instance. @param listener target listener object @return multimap of event types to subscriber instances
2269 Creates an induced subgraph from a given Network. @param network original network @param nodes subset of nodes to include in the subgraph @return MutableNetwork representing the induced subgraph
2270 Creates a mutable copy of the given network. @param network original network to duplicate @return MutableNetwork object with same topology as input network
2271 Creates a new mutable graph instance from this builder. @return A new StandardMutableGraph instance
2272 Creates an induced subgraph containing specified nodes and their successors. @param graph original ValueGraph @param nodes subset of nodes to include in the subgraph @return MutableValueGraph representing the induced subgraph
2273 Creates a deep copy of the given ValueGraph. @param graph original graph to be copied @return a new MutableValueGraph instance containing all nodes and edges from the original graph.
2274 Adds all entries from the given map to the builder. @param map map containing key-value pairs to add @return updated Builder instance for method chaining
2275 Adds all key-value pairs from a given map to the builder. @param map map containing entries to add @return this Builder instance for method chaining
2276 Combines a filtered map with an additional filter. @param map the original filtered map @param entryPredicate the additional filter criterion @return a new filtered navigable map
2277 Combines the filter from a SortedMap with an additional entry predicate. @param map original filtered sorted map @param entryPredicate predicate to apply to each entry @return new filtered sorted map
2278 Filters a map by applying the given predicate to its keys. @param unfiltered original map @param keyPredicate key filter condition @return filtered map with matching keys or null if empty
2279 Filters a map based on the provided predicate. @param unfiltered input map to be filtered @param entryPredicate predicate to determine filter criteria @return filtered Map or existing AbstractFilteredMap if applicable
2280 Converts a stream to an immutable sorted map. @param comparator map key comparator @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements
2281 Converts a collection to an immutable enum map. @param keyFunction function to extract key enum from input @param valueFunction function to extract map values from input
2282 Converts a stream of objects to an immutable enum map. @param keyFunction maps each object to its corresponding enum key @param valueFunction maps each object to its associated value @param mergeFunction merges values for duplicate enum keys
2283 Returns a map of type mappings for the given context type. @param contextType the type to generate mappings for @return immutable map of key-value pairs or empty if no mappings found
2284 Concatenates multiple ByteSources into one. @param sources iterable of ByteSources to concatenate
2285 Concatenates an iterator of char sources into a single char source. @param sources iterable collection of CharSource objects
2286 Creates an immutable range set from the given iterable of ranges. @param ranges collection of ranges to include in the range set
2287 Creates a new ImmutableSortedMultiset from an iterable of elements and a comparator. @param comparator comparison function for the multiset @param elements iterable of elements to include in the multiset @return ImmutableSortedMultiset instance or a copy if input is already sorted
2288 Creates a deep copy of the given SortedMultiset. @param sortedMultiset multiset to be copied
2289 Converts this collection to an immutable list. @return ImmutableList object containing all elements
2290 Converts a stream into an immutable sorted set. @param comparator Comparator for sorting elements @return Collector that produces ImmutableSortedSet
2291 Creates an immutable sorted set from the given iterator of elements. @param elements iterator yielding unique elements to include in the set
2292 Builds a BiMap from the Builder's state or throws an exception if invalid. @return ImmutableBiMap object
2293 Returns an immutable sorted map containing all entries up to but not including (or including) the specified key. @param toKey the boundary key @param inclusive whether to include the boundary key in the result @return ImmutableSortedMap object or null if input is invalid
2294 Returns an immutable sorted map containing all entries greater than or equal to the specified key. @param fromKey key value to start inclusion at @param inclusive whether to include keys equal to the from key as well @return ImmutableSortedMap object or empty map if no entries match
2295 Checks whether URL has public suffix. @return true if URL matches public suffix, false otherwise
2296 Checks if a domain has a publicly recognized suffix. @return true if suffix is recognized, false otherwise
2297 Checks if domain name is under a publicly registered suffix. @return true if under public suffix, false otherwise
2298 Checks if the current domain is a top-level private domain (e.g. example.com).
2299 Checks if registry suffix is enabled. @return true if registry suffix is enabled, false otherwise
2300 Checks if a registry suffix is present. @return true if suffix found, false otherwise
2301 Checks if the current domain name is under a registry suffix. @return true if registered under a suffix, false otherwise
2302 Checks if top domain is under registry suffix. @return true if index is 1, false otherwise
2303 Creates an immutable sorted map from the given entries and comparator. @param entries iterable of key-value pairs @param comparator for sorting keys @return ImmutableSortedMap instance or null if entries are null
2304 Creates an immutable sorted map copy of the given sorted map. @param map the original sorted map
2305 Creates an immutable copy of the set. @return non-null ImmutableSet containing all elements or empty set if size is 0
2306 Collects and returns a set of raw types that can be assigned to the generic type T. @return Set of Class<? super T> representing raw types.
2307 Removes the element at specified index and adjusts heap accordingly. @param index position of element to remove @return MoveDesc object describing changes or null if removed element is last
2308 Computes the square root of a BigInteger using the specified rounding mode. @param x non-negative BigInteger value @param mode RoundingMode to apply in case of exactness ambiguity @return approximate or exact square root as BigInteger
2309 Creates an immutable set from an iterator of elements. @param elements iterator containing the elements to be copied
2310 Recursively scans a directory and its subdirectories for resources. @param directory the directory to scan @param packagePrefix prefix for resource names @param currentPath set of currently visited directories @param builder builder for ResourceInfo objects
2311 Retrieves classpath entries from the given JAR file's manifest. @param jarFile the JAR file to extract classpath from @param manifest optional manifest to use; if null, returns empty set @return ImmutableSet of File objects representing classpath entries or an empty set if no entries found
2312 Returns the raw type of the generic type, which is its first bound.
2313 Finds the greatest of up to K elements in a collection. @param iterable input collection @param k maximum number of elements to consider @return List of greatest elements or an empty list if less than K elements are found
2314 Converts specified duration to nanoseconds and awaits stopped state. @param timeout duration to wait before timing out
2315 Retrieves an exiting executor service instance. @param executor ThreadPoolExecutor instance to wrap
2316 Returns an exiting executor service with a specified termination timeout. @param executor existing thread pool executor @param terminationTimeout duration before shutting down the executor
2317 Retrieves a scheduled executor service with exit handling. @param executor existing thread pool executor
2318 Retrieves an existing scheduled executor service with a specified termination timeout. @param executor Scheduled thread pool executor @param terminationTimeout duration in nanoseconds before shutdown
2319 Evicts entries from the segment to maintain size within bounds. @param newest the newest entry by weight
2320 Awaits until the health check is successful or times out. @param timeout maximum duration to wait before throwing an exception
2321 Returns a map of service to startup duration in milliseconds.
2322 Fetches annotations of specified type from this element. @param annotationType Class of the annotations to search for @return Array of annotations found or null if none exist
2323 Creates a new ReentrantLock with the specified name. @param lockName unique identifier for the lock
2324 Creates a new Reentrant Read-Write Lock with the specified name. @param lockName unique identifier for the lock
2325 Validates the syntax of a command by checking each part. @param parts list of command parts @return true if syntax is valid, false otherwise
2326 Registers a listener by adding its subscriber methods to the corresponding event type. @param listener object with subscriber methods
2327 Removes event subscriber registrations for the given listener. @param listener object to unregister from events
2328 Creates an immutable network builder.
2329 Creates an induced subgraph from the given nodes. @param graph parent graph @param nodes iterable of node identifiers to include @return MutableGraph representing the subgraph or null if invalid input
2330 Creates a deep copy of the given graph. @param graph original graph to copy @return MutableGraph object representing the copied graph
2331 Returns an immutable builder for the value graph. @return Builder for immutable ValueGraph
2332 Combines filtered map and entry predicate to create a new filtered map. @param map original filtered map @param entryPredicate additional filter for entries @return new filtered BiMap instance
2333 Filters a navigable map's entries using the provided predicate. @param unfiltered original map to filter @param entryPredicate predicate to apply to each entry @return filtered NavigableMap or null if input is invalid
2334 Filters a sorted map based on the provided predicate. @param unfiltered input map to be filtered @param entryPredicate filter criteria for each entry @return filtered sorted map or null if input is not FilteredEntrySortedMap
2335 Filters a map by applying the given predicate to its values. @param unfiltered original map @param valuePredicate predicate for filtering values @return new map with filtered values or null if all entries removed
2336 Converts a stream of objects to an immutable map, applying the specified key and value functions. @param keyFunction maps each object to its unique key @param valueFunction maps each object to its associated value @param mergeFunction merges values for duplicate keys
2337 Converts a collection of elements to an immutable range map. @param keyFunction function to extract the range key @param valueFunction function to extract the associated value
2338 Creates a sorted multiset from the given iterable of elements. @param elements input iterable to be copied
2339 Builds and returns an ImmutableSortedMultiset instance from existing sorted multiset data. @return ImmutableSortedMultiset object representing the built collection.
2340 Creates a wildcard type that extends the given upper bound. @param upperBound the supertype of the wildcard type
2341 Creates a WildcardType that is a supertype of the given Type, allowing any Object. @param lowerBound minimum type bound
2342 Generates all ordered permutations of input elements. @param elements iterable collection of elements to permute @param comparator ordering comparator for the permutation order
2343 Converts delegate iterable to a sorted, immutable list. @param comparator comparison function for sorting @return ImmutableList of elements in sorted order or null if not found
2344 Creates an immutable copy of the specified collection. @param elements Collection to be copied
2345 Builds and returns an immutable bi-map. This is a convenience method that simply calls {@link #buildOrThrow()}.
2346 Builds an immutable map and throws any exception that occurs. @return ImmutableMap of K to V or null if build fails
2347 Builds an immutable map keeping only the last entry. @return An empty map if no entries were kept
2348 Returns an immutable sorted map containing all entries with keys less than the specified key. @param toKey upper bound of the returned map's key range
2349 Returns a sub-map of this map, containing keys within the specified range. @param fromKey starting key @param fromInclusive whether starting key is inclusive @param toKey ending key @param toInclusive whether ending key is inclusive
2350 Returns an immutable map containing all entries with keys greater than or equal to the specified key. @param fromKey key to start including in the returned map
2351 Creates an immutable sorted map from the given entries. @param entries Iterable of key-value pairs
2352 Creates an immutable sorted map from the given map, using natural order for keys. @param map input map to copy from
2353 Creates an immutable sorted map from the given map and comparator. @param map map to copy @param comparator key comparator for sorting @return ImmutableSortedMap instance
2354 Generates Cartesian product of input sets. @param sets collection of sets to combine @return set of lists representing all possible combinations
2355 Removes the exact object from the queue. @param target Object to be removed @return true if removed, false otherwise
2356 Removes and returns an element at specified index. @param index position of the element to remove
2357 Creates an immutable set from the given iterable. @param elements collection of elements to be copied
2358 Creates an Invokable for a constructor. @param constructor the Constructor to create an Invokable for
2359 Checks if this type is a subtype of the given supertype. @param supertype the supertype to check against @return true if this type is a subtype, false otherwise
2360 Creates an Invokable instance for the given Method. @param method the target method to invoke
2361 Tries to expire entries based on the current timestamp. @param now current system time in milliseconds
2362 Creates a new instance with explicit ordering for the given enum class and policy. @param enumClass Class of the enumeration to process @param policy Policy object used in processing
2363 Registers an object with the subscribers list. @param object Object to be registered
2364 Unregisters an object from subscription service. @param object Object to be unregistered
2365 Returns an ImmutableGraph Builder instance.
2366 Filters BiMap entries based on the provided predicate. @param unfiltered original BiMap @param entryPredicate predicate to filter entries by @return filtered BiMap or null if unfiltered is not a FilteredEntryBiMap
2367 Filters keys from the input map based on the provided predicate. @param unfiltered original map to filter @param keyPredicate condition to apply to each key @return filtered NavigableMap or null if all entries removed
2368 Filters a navigable map by retaining entries with values matching the given predicate. @param unfiltered original map to be filtered @param valuePredicate predicate to determine which values to keep @return filtered NavigableMap or null if input is null
2369 Filters the keys of a sorted map based on a predicate. @param unfiltered input map to filter @param keyPredicate key filtering condition @return filtered SortedMap with matching keys
2370 Filters a sorted map by a predicate on its values. @param unfiltered the original map to filter @param valuePredicate the condition for inclusion in the result @return a new sorted map with filtered entries or an empty map if all entries are removed
2371 Creates an immutable sorted multiset from a collection of elements. @param comparator comparison function for sorting elements @param elements iterator over elements to include in the set
2372 Creates an immutable set of location information from the given class loader. @param classloader Class loader to fetch location info for
2373 Finds the first component type in a given bounds array. @param bounds array of potential bounds @return first class or array component type, or null if not found
2374 Creates a new array type from the given component type. @param componentType the type of elements in the array
2375 Generates all permutations of input elements in sorted order. @param elements iterable collection of comparable elements
2376 Creates a new ImmutableMultiset from the given iterable of elements. @param elements iterable containing the elements to be copied into the multiset
2377 Creates a read-only multiset from an iterator of elements. @param elements iterable collection of elements @return ImmutableMultiset object representing the copied data
2378 Copies the multiset with elements ordered by highest count first. @param multiset input multiset to copy @return a new ImmutableMultiset instance
2379 Generates all possible permutations of given collection's elements. @param elements input iterable to permute
2380 Creates an immutable list from the given iterable. @param elements input collection
2381 Creates an immutable copy of the given RangeSet. @param rangeSet input RangeSet to be copied
2382 Creates an immutable sorted set from a given sorted set. @param sortedSet input sorted set @return ImmutableSortedSet instance or empty set if input is empty
2383 Reads and returns a list of lines from the underlying stream. @return List<String> containing read lines or an empty list if none
2384 Constructs an immutable map from the builder's results. @return non-empty map or empty map if build() method returned no mappings
2385 Creates a multimap from map entries, with optional value sorting. @param mapEntries collection of key-value pairs where values are collections @param valueComparator (optional) comparator to sort values before adding to multimap @return ImmutableListMultimap or empty instance if input is empty
2386 Builds an immutable map instance. Calls buildOrThrow() internally to perform actual construction.
2387 Creates a multimap from map entries, filtering out empty value collections. @param mapEntries collection of key-value pairs with collection values @param valueComparator comparator for ordering values (optional) @return ImmutableSetMultimap or an empty one if input is empty
2388 Converts a Properties object into an ImmutableMap of key-value pairs. @param properties input Properties object
2389 Creates an index map from a collection of elements. @param list input collection @return ImmutableMap with element as key and index as value
2390 Builds an immutable map of type instances from the builder's result. @return An ImmutableTypeToInstanceMap containing the built data.
2391 Builds a TypeTable from the given mappings and user-supplied type variables. @param mappings map of type variable keys to their corresponding types
2392 Converts an iterator of keys and a function to values into an immutable map. @param keys iterator of unique keys @param valueFunction function to compute corresponding values
2393 Returns a subset of this map containing keys within the specified range. @param fromKey starting key (inclusive) @param toKey ending key (exclusive)
2394 Converts a stream of objects to an immutable sorted map. @param comparator key comparison function @param keyFunction maps each object to its key @param valueFunction maps each object to its value @param mergeFunction merges values for duplicate keys @return ImmutableSortedMap<K, V>
2395 Retrieves and removes the last element from the collection. @return the removed element, or null if empty.
2396 Removes and returns the last element. @return Element removed or null if empty
2397 Converts this object to an immutable set of elements. @return Set of elements or null if delegate is null
2398 Checks if this TypeToken is a supertype of another. @param type the TypeToken to check against @return true if this token is a superclass, false otherwise
2399 Checks if the given Type is a supertype of this Type. @param type Type to check @return true if given Type is a supertype, false otherwise
2400 Checks if this token is a subtype of another TypeToken. @param type TypeToken to check against
2401 Drains reference queues for map, handling key and value references separately.
2402 Filters the keys of a BiMap based on a predicate. @param unfiltered input BiMap to filter @param keyPredicate function to test each key @return filtered BiMap with only matching keys
2403 Filters entries in a bidirectional map based on the provided predicate for values. @param unfiltered input BiMap to filter @param valuePredicate predicate to evaluate each value @return filtered BiMap with updated key-value pairs
2404 Creates a new sorted multiset from an iterator of elements. @param elements iterator containing elements to be copied
2405 Transforms a Class to its corresponding TypeToken. @param cls the input Class
2406 Converts this multimap to an immutable multiset. @return Multiset containing all elements from the original map
2407 Builds an ImmutableMultiset from the underlying contents. @return ImmutableMultiset instance containing all elements.
2408 Computes the Cartesian product of multiple lists. @param lists list of lists to combine @return a list containing all possible combinations as sublists
2409 Parses a string into CacheBuilderSpec object. @param cacheBuilderSpecification string representation of cache builder specs
2410 Converts this immutable collection to a list. @return List of elements or null if delegate is null
2411 Retrieves a list of files in the specified directory. @param dir directory path to scan @return immutable list of file paths or empty if directory is invalid
2412 Initializes InternetDomainName with normalized domain name. @param name the domain name to initialize from
2413 Collects futures into a single future containing a list of values. @param futures iterable of ListenableFutures to collect @return ListenableFuture containing the collected list of values
2414 Combines multiple ListenableFutures into a single FutureCombiner. @param futures iterable of futures to combine
2415 Combines all given ListenableFutures to a single result, succeeding only if all input futures succeed. @param futures iterable of futures to combine
2416 Converts a collection of potentially failed futures to a list of successful values. @param futures iterable of ListenableFutures potentially containing values of type V @return ListenableFuture containing the successful values as a list, or an empty list if all failed.
2417 Converts iterable of ListenableFutures to array. @param futures iterable of futures @return array of futures or null if not found
2418 Creates an immutable range set by taking the union of the given iterable ranges. @param ranges iterable collection of ranges to combine
2419 Computes the intersection of two range sets. @param other the other range set to intersect with @return an immutable range set containing overlapping ranges
2420 Computes the set difference between this range set and another. @param other the range set to subtract from this one @return a new immutable range set containing the differences
2421 Converts a stream of elements into an immutable bi-map using the provided key and value functions. @param keyFunction function to extract key from each element @param valueFunction function to extract value from each element
2422 Creates a copy of the provided map, converting it to an immutable instance map. @param map input map with class-S instances @return ImmutableClassToInstanceMap or newly created one if not already immutable
2423 Creates a copy of the given multimap. @param multimap input multimap to copy @return ImmutableListMultimap instance or original if already immutable and not partial view
2424 Builds an ImmutableMultimap from the builder state. @return ImmutableMultimap instance or empty if no entries
2425 Merges a range of entries into the existing map. @param range merge range @param value new value for unmapped ranges (null to ignore) @param remappingFunction function to remap existing values
2426 Builds an ImmutableSetMultimap from the internal builder state. @return ImmutableSetMultimap object or empty if no entries exist
2427 Creates a unique index map from an iterator of values using the provided key function. @param values iterator of values to index @param keyFunction function to generate keys from values @return immutable map with unique keys and corresponding values
2428 Generates all combinations of a given set size from the input set. @param set input set @param size desired combination size @return Set of Sets containing all combinations, or empty set if no combinations exist
2429 Creates a deep copy of the given graph. @param graph original graph to be copied @return ImmutableGraph object containing the copied data or null if input is null
2430 Creates a new TypeResolver instance with filtered type mappings. @param mappings map of type variable keys to their resolved types
2431 Converts an iterable of keys to a map using the provided function to generate values. @param keys iterable of unique keys @param valueFunction function that generates values for the given key
2432 Retrieves and removes the first element from this queue. @return The polled element or null if queue is empty.
2433 Offers an element to the heap and returns whether the heap's size is within limits. @param element element to offer
2434 Retrieves all ClassInfo objects from resources. @return immutable set of ClassInfo objects
2435 Retrieves a set of top-level ClassInfo objects from resources. @return Set of ClassInfo objects or empty set if none found
2436 Performs breadth-first traversal on a set of nodes, starting from the provided initial nodes. @param startNodes Iterable of initial nodes to begin traversal
2437 Performs a depth-first pre-order traversal on the given nodes. @param startNodes iterable of starting nodes
2438 Performs depth-first post-order traversal on the given nodes. @param startNodes iterable of starting node(s)
2439 Scans resources from a set of files and builds an immutable set. @param scannedFiles collection of files to scan @return ImmutableSet of ResourceInfo objects
2440 Returns a specialized invokable with the specified return type. @param returnType TypeToken representing the desired return type
2441 Tries to lock and drain reference queues, releasing lock on failure.
2442 Resolves a given Type object to its resolved form. @param type the Type object to resolve @return the resolved Type object or the original Type if not resolvable
2443 Checks if the runtime type is compatible with the formal type. @param formalType the expected type @param declaration the type variable declaration @return true if types are compatible, false otherwise
2444 Canonicalizes a type argument for a type variable. @param declaration the type variable to canonicalize against @param typeArg the type argument to canonicalize @return the canonicalized type argument
2445 Creates a CacheBuilder instance from a cache specification string. @param spec cache specification string to parse and use as builder configuration.
2446 Disables caching by setting maximum size to zero.
2447 Creates an InternetDomainName object from a string representation. @param domain string representation of the domain name
2448 Combines multiple ListenableFutures into an ordered list. @param futures Iterable of futures to combine @return Ordered list of futures or empty list if none provided
2449 Computes the union of this range set and another. @param other RangeSet to combine with @return Union of ranges in both sets
2450 Creates an immutable copy of the given multimap. @param multimap input multimap to copy @return ImmutableMultimap object or existing one if it's not a partial view
2451 Builds and returns an ImmutableListMultimap instance.
2452 Converts a stream of objects into an immutable map using specified key and value functions. @param keyFunction function to extract key from each object @param valueFunction function to extract value from each object
2453 Creates a multimap with a single entry for the given key-value pair. @param k1 unique key @param v1 associated value
2454 Creates a multimap with two key-value pairs. @param k1 first key @param v1 value associated with key1 @param k2 second key @param v2 value associated with key2 @return ImmutableSetMultimap instance containing the specified entries
2455 Creates an Immutable Multimap with three key-value pairs. @param k1 key1 @param v1 value1 @param k2 key2 @param v2 value2 @param k3 key3 @param v3 value3
2456 Creates a multimap with four key-value pairs. @param k1 first key @param v1 value for k1 @param k2 second key @param v2 value for k2 @param k3 third key @param v3 value for k3 @param k4 fourth key @param v4 value for k4 @return ImmutableSetMultimap instance
2457 Creates an ImmutableSetMultimap with the specified key-value pairs. @param k1,k2,k3,k4,k5 keys @param v1,v2,v3,v4,v5 values
2458 Creates an immutable multimap from the given iterable of key-value pairs. @param entries iterable of key-value entries to copy
2459 Creates an immutable multimap copy from a given multimap. @param multimap the multimap to copy
2460 Creates an indexed map from a collection of values. @param values iterable collection of values @param keyFunction function to extract keys from values @return ImmutableMap with unique indices or null if not found
2461 Creates an ArrayTable instance with the given row and column keys. @param rowKeys iterable of unique row identifiers @param columnKeys iterable of unique column identifiers
2462 Generates the power set of the given set. @param set input set @return a set containing all possible subsets of the original set
2463 Creates an immutable table from a list of ordered cells. @param cellList list of cells with values @param rowSpace set of unique row identifiers @param columnSpace set of unique column identifiers @return Dense or Sparse ImmutableTable instance based on cell density
2464 Builds an immutable graph from a mutable one. @return ImmutableGraph object representing the graph data
2465 Creates an immutable copy of the given network. @param network original network to copy
2466 Creates an immutable copy of the given ValueGraph. @param graph original graph to replicate @return ImmutableValueGraph instance or existing one if already immutable
2467 Resolves type covariance by creating a TypeResolver with type mappings from the given context type. @param contextType the type for which to resolve covariance
2468 Resolves type mappings from a given context type. @param contextType the type to resolve mappings for
2469 Resolves type parameters for the given types. @param formal expected type @param actual actual type @return TypeResolver object
2470 Converts the delegate iterable to an immutable map using a provided function. @param valueFunction function that maps each element to its map value @return ImmutableMap or null if not applicable (but see note)
2471 Creates a Min-Max Priority Queue initialized with the given contents. @param initialContents iterable of elements to populate the queue
2472 Adds an element to the collection. @param element object to be added
2473 Retrieves top-level classes within the specified package. @param packageName unique package identifier @return ImmutableSet of ClassInfo objects for matching package
2474 Recursively fetches topLevel classes whose names start with the given package name. @param packageName package name to filter by
2475 Performs breadth-first search from the given starting node. @param startNode initial node to begin traversal
2476 Performs depth-first pre-order traversal of graph starting from given node. @param startNode root node of traversal
2477 Performs a depth-first post-order traversal of a graph starting from the given node. @param startNode the node to begin traversal from
2478 Scans resources and returns an immutable set of ResourceInfo objects. @return Set of ResourceInfo objects
2479 Constructs a classpath from the given class loader, scanning all resources. @param classloader ClassLoader to use when resolving resources @return ClassPath object containing resolved resource information
2480 Returns an invokable instance with specified return type. @param returnType class of the expected return value
2481 Retrieves the live value associated with a given entry. @param entry ReferenceEntry object @param now current time in milliseconds @return the live value (V) or null if expired or not found
2482 Performs cleanup and locking operations before writing. @param now current timestamp
2483 Resolves internal TypeVariables using a provided TypeTable for dependants. @param var TypeVariable to resolve @param forDependants TypeTable used for resolving dependent types @return resolved Type or original TypeVariable if not resolvable
2484 Returns the generic return type of this method, or its raw Class if none specified.
2485 Resolves runtime type and returns a serialized representation. @return TypeResolver result or null if failed
2486 Creates a traverser for navigating directory hierarchies.
2487 Creates a HostSpecifier from a valid string representation. @param specifier string containing the host specifier
2488 Constructs the ancestral domain by clipping leading parts. @param levels number of levels to clip
2489 Constructs a child domain name by appending the given parts to the current domain name. @param leftParts parts of the child domain name
2490 Validates a domain name by attempting to parse it. @param name the name to validate @return true if valid, false otherwise
2491 Converts a stream of objects to an immutable multimap. @param keyFunction maps each object to its key @param valuesFunction maps each object to a stream of values
2492 Creates a multimap with a single entry. @param k1 key @param v1 value
2493 Creates a multimap with two key-value pairs. @param k1 first key @param v1 value for k1 @param k2 second key @param v2 value for k2 @return ImmutableListMultimap instance
2494 Creates a Multimap with three key-value pairs. @param k1 first key @param v1 value for k1 @param k2 second key @param v2 value for k2 @param k3 third key @param v3 value for k3 @return Multimap with three entries
2495 Creates a multimap with four entries. @param k1 key of first entry @param v1 value of first entry @param k2 key of second entry @param v2 value of second entry @param k3 key of third entry @param v3 value of third entry @param k4 key of fourth entry @param v4 value of fourth entry
2496 Creates a multimap with the specified key-value pairs. @param k1 first key @param v1 first value @param k2 second key @param v2 second value @param k3 third key @param v3 third value @param k4 fourth key @param v4 fourth value @param k5 fifth key @param v5 fifth value
2497 Creates a copy of the given multimap from its entries. @param entries iterable collection of key-value pairs
2498 Creates a multimap index from an iterator of values using a key function. @param values iterator over values to be indexed @param keyFunction function to extract keys from values @return ImmutableListMultimap with indexed values
2499 Adds parameters to the media type, overriding existing values if specified. @param attribute parameter name (e.g. "Accept-Language") @param values values for the specified parameter
2500 Converts a stream of objects into an immutable multimap. @param keyFunction maps each object to its key @param valueFunction maps each object to its values
2501 Computes and returns the inverse of this multimap. @return Inverse multimap or existing cached result if available
2502 Marks the service manager as ready, throwing exception if services transitioned prematurely.
2503 Returns multimap of services grouped by their corresponding states.
2504 Creates an immutable map with unique keys from a delegate iterable. @param keyFunction function to extract keys from elements
2505 Creates an ArrayTable instance from a given Table. @param table the input Table to convert @return ArrayTable instance or null if not compatible
2506 Builds and returns an immutable network from the mutable network. @return ImmutableNetwork object representing the built network
2507 Builds an immutable ValueGraph from the mutable instance. @return ImmutableValueGraph object
2508 Captures and resolves the type token for a given class. @param declaringClass the class that declares the generic type
2509 Creates an empty Min-Max Priority Queue of type T.
2510 Creates a Min-Max priority queue with the given initial contents. @param initialContents iterable collection of elements to initialize the queue
2511 Returns an immutable set of all nodes reachable from the given node in the graph. @param graph non-null graph containing the node @param node ID of the starting node
2512 Retrieves a map entry for the specified key. @param key the lookup key or null to return null @return Entry object associated with the key, or null if not found
2513 Checks if an entry is live based on its hash and current time. @param entry the entry to check @param now the current timestamp @return true if the entry is live, false otherwise
2514 Inserts a loading value reference for the given key. @param key unique key identifier @param hash hash code of the key @param checkTime whether to check if refresh is still needed after acquiring the lock @return LoadingValueReference object or null if an existing entry exists and needs no refresh
2515 Periodically cleans up resources based on read count threshold. @param none
2516 Resolves a TypeVariable's bounds to their concrete types. @param var TypeVariable to resolve @param forDependants TypeTable for dependent types @return resolved Type or the original TypeVariable if no resolution is needed
2517 Combines a callable with provided closeables and executes it on the specified executor. @param combiningCallable function to combine with closeables @param executor execution context @return ClosingFuture object representing combined result
2518 Asynchronously calls an AsyncCombiningCallable with provided Executor. @param combiningCallable the callable to execute @param executor execution context @return ClosingFuture containing result and closeable resources
2519 Parses a string into a HostSpecifier object. @param specifier input string to be parsed @throws ParseException if the input is invalid
2520 Validates host specifier string. @param specifier host specifier to validate @return true if valid, false otherwise
2521 Returns the internet domain's public suffix if present. @return PublicSuffix object or null if not set
2522 Returns the top private domain in the hierarchy. @return InternetDomainName object representing the top private domain
2523 Returns the registry suffix of the internet domain name. @return InternetDomainName object or null if not set
2524 Returns the top domain under the current registry suffix. @return InternetDomainName object or null if not found
2525 Retrieves the immediate parent domain. @return InternetDomainName object representing the parent domain or null if none exists
2526 Converts a collection of objects to an immutable multimap. @param keyFunction function to extract key from each object @param valueFunction function to extract value from each object
2527 Creates an immutable multimap with a single entry. @param k1 key @param v1 value
2528 Creates an ImmutableMultimap with two key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2
2529 Creates an ImmutableMultimap with the given key-value pairs. @param k1 first key @param v1 value for key k1 @param k2 second key @param v2 value for key k2 @param k3 third key @param v3 value for key k3
2530 Creates an ImmutableMultimap from individual key-value pairs. @param k1,k2,k3,k4 keys @param v1,v2,v3,v4 values
2531 Creates an ImmutableMultimap from a collection of key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2 @param k3 third key @param v3 value associated with k3 @param k4 fourth key @param v4 value associated with k4 @param k5 fifth key @param v5 value associated with k5
2532 Creates an immutable multimap from an iterable of key-value pairs. @param entries the input collection of entries
2533 Returns an inverted multimap copy or computes a new one if not cached. @return Inverted Multimap object
2534 Creates an indexed multimap from an iterable of values and a function to extract keys. @param values iterable of values @param keyFunction function to map each value to its corresponding key
2535 Adds a single parameter to the media type. @param attribute name of the parameter @param value value of the parameter
2536 Creates media type with specified parameters. @param parameters multimap of parameter key-value pairs
2537 Creates a MediaType instance with the specified type and subtype. @param type the top-level media type (e.g., "text") @param subtype the sub-type of the media type (e.g., "plain")
2538 Parses a MediaType string into its constituent parts. @param input the input MediaType string to parse
2539 Initializes ServiceManager with a collection of services. If no services are provided, substitutes a placeholder service to ensure proper behavior. Adds listeners to each service. @param services iterable of services to manage
2540 Converts a stream of objects to an immutable multimap. @param keyFunction maps each object to its key @param valuesFunction maps each object to a stream of its values
2541 Resolves the given type into a TypeToken, while ensuring type safety in invariant contexts. @param type type to be resolved
2542 Creates a min-max priority queue with natural ordering. @return MinMaxPriorityQueue instance
2543 Loads user data asynchronously, returning the result or null if not found. @param key unique identifier @param hash cache hash @param loader CacheLoader instance @param checkTime whether to check timestamp @return loaded value or null
2544 Retrieves and records cache statistics for the given key. @param key unique identifier @param hash hash code of the key @param loadingValueReference reference to the loading value operation @param newValue new value loaded from the cache loader @return loaded value or null if not found
2545 Advances to the next external entry based on the provided reference entry. @param entry ReferenceEntry object to advance from @return true if successful, false otherwise
2546 Checks if the map contains a specific value. @param value object to search for @return true if found, false otherwise
2547 Indexes elements by applying a function to map each element to a unique key. @param keyFunction maps element to its corresponding key
2548 Sets the media type's character set and returns a new MediaType instance. @param charset the character set (e.g. UTF-8) for this media type
2549 Returns the media type with no parameters. @return MediaType object or new instance if original has parameters
2550 Creates application media type with specified subtype. @param subtype subtype of the media type
2551 Creates an audio media type with the specified subtype. @param subtype audio subtype (e.g. "mp3", "wav")
2552 Creates font media type. @param subtype sub-type of font (e.g. "woff", "woff2")
2553 Creates an image media type with specified subtype. @param subtype image subtype (e.g. jpeg, png)
2554 Creates text media type with given subtype. @param subtype specific subtype of text media (e.g., "plain", "html")
2555 Creates a video media type with specified subtype. @param subtype specific video subtype (e.g. mp4, avi)
2556 Builds an Immutable Table from a collection of cells. @return ImmutableTable instance or throws exception if invalid
2557 Resolves the generic superclass of this type. @return TypeToken for the superclass, or null if none exists
2558 Resolves generic interfaces for the type. @return list of TypeTokens representing the generic interfaces
2559 Resolves the most specific superclass of this type. @param superclass target superclass class @return the resolved TypeToken or null if not found
2560 Loads all cached values for the specified keys using the provided CacheLoader. @param keys set of unique keys to load @param loader cache loader instance @return map of loaded key-value pairs or null if not found @throws ExecutionException on loading failure
2561 Advances to the next entry in a linked chain, attempting to advance to it. @return true if successful, false otherwise
2562 Builds an immutable table from internal state. @return built ImmutableTable object or throws exception on failure
2563 Attempts to advance to the next entry in a table. @return true if successful, false otherwise
2564 Resolves the type token for a given subclass. @param subclass Class<?> of the desired subtype
2565 Creates a new immutable table from an existing Table instance. @param table the original table to copy
2566 Converts a collection of objects to an immutable table. @param rowFunction function to extract row key @param columnFunction function to extract column key @param valueFunction function to extract table value @return ImmutableTable instance or null if empty input
