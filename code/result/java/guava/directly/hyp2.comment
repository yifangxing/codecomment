1 Orders rows using the provided comparator. @param rowComparator Comparator for row ordering. @return This builder, for chaining.
2 Orders columns using the provided comparator. @param columnComparator Comparator for column ordering. @return This builder, for chaining.
3 Merges multiple sorted iterables into a single sorted iterable. @param iterables Iterable of iterables to merge. @param comparator Comparator for sorting the elements. @return A new sorted iterable.
4 Finds the index of the first element matching the predicate. @param iterator Iterator of elements to search. @param predicate Predicate to test each element. @return Index of the first match, or -1 if none found.
5 Creates a SortedSetMultimapBuilder with a custom comparator for values. @param comparator Comparator to sort the values in the sorted sets. @return SortedSetMultimapBuilder for building multimaps.
6 Creates a SetMultimapBuilder for enum values of a given class. @param valueClass Class of the enum values to use. @return A SetMultimapBuilder configured for enum values.
7 Returns a view of the union of two sets. @param set1 first set @param set2 second set @return SetView containing the union of set1 and set2
8 Returns a view of the intersection of two sets. @param set1 first set @param set2 second set @return SetView containing elements present in both sets
9 Returns a view of elements in set1 that are not in set2. @param set1 the first set @param set2 the second set @return A SetView containing elements in set1 but not set2
10 Returns a symmetric difference view of two sets. @param set1 The first set. @param set2 The second set.
11 Finds the index of the target array within the given array. @param array array to search within @param target array to search for @return Index of target array, or -1 if not found.
12 Finds the first index of target array within the given array. @param array byte array to search within @param target byte array to search for @return First index of target or -1 if not found.
13 Finds the index of the first occurrence of target in array. @param array char array to search within @param target char array to search for @return Index of target or -1 if not found.
14 Finds the index of the target array within the given array. @param array The array to search within. @param target The array to search for. Returns -1 if not found.
15 Finds the first index of target array within array. @param array array to search in @param target array to search for @return First index or -1 if not found.
16 Finds the first index of target array within array. @param array array to search within @param target array to search for @return First index or -1 if not found.
17 Finds the index of the target array within the given array. @param array array to search within @param target array to search for @return Index of target, or -1 if not found.
18 Finds the index of the target array within the given array. @param array array to search @param target array to find @return Index of target or -1 if not found.
19 Creates a new Guard with the provided BooleanSupplier for satisfaction. @param isSatisfied Supplier that provides boolean satisfaction.
20 Returns the default value for a given class type. @param type The class type to get the default value for. @return The default value or null if not a primitive.
21 Creates a Joiner that replaces nulls with the specified text. @param nullText The text to use for null values. @return A Joiner that handles null values.
22 Constructs a ToStringHelper with the given class name. @param className The name of the class to build the toString for.
23 Returns an Iterable containing present instances from Optionals. @param optionals Iterable of Optionals to filter. @return Iterable of present values.
24 Splits a CharSequence into an Iterable of strings. Returns an Iterable that yields substrings of the sequence.
25 Pads a string with a character to reach a minimum length. @param string String to pad. @param minLength Minimum length. @param padChar Padding character.
26 Pads a string to a minimum length with a specified padding character. @param string The string to pad. @param minLength The minimum length. @param padChar The padding character.
27 Throws the throwable if it's an instance of declaredType. @param throwable The throwable to check. @param declaredType The class to check against.
28 Re-throws the throwable if it's a RuntimeException or Error.
29 Returns a list of the causal chain of the given throwable.
30 Creates an async CacheLoader that uses the given executor. @param loader The CacheLoader to wrap. @param executor Executor for asynchronous reloading. @return A new CacheLoader.
31 Wraps a listener to execute removal notifications asynchronously. @param listener Listener to wrap; @param executor Executor to use.
32 Returns a map containing a single column based on the key. @param columnKey The column key. @return A map with the column or an empty map if not found.
33 Returns a map for the given row key. @param rowKey The key representing the row. @return A map for the row, or empty if not found.
34 Creates a Spliterator that maps elements from another Spliterator. @param fromSpliterator Source Spliterator @param function Mapping function from InElementT to OutElementT @return New Spliterator with mapped elements
35 Filters elements of a Spliterator based on a predicate. @param fromSpliterator source Spliterator @param predicate test condition for elements @return new Spliterator containing filtered elements
36 Checks if a collection contains an object, handling exceptions. @param collection Collection to check. @param object Object to search for. @return True if contained, false otherwise.
37 Safely removes an object from a collection, handling exceptions. @param collection Collection to remove from. @param object Object to remove. Returns true if removed.
38 Checks if an iterable is in ascending order based on the comparator. @param iterable Iterable to check. @param comparator Comparator for ordering elements.
39 Checks if an iterable is in strictly increasing order. @param iterable Iterable to check. @param comparator Comparator for comparing elements.
40 Compares Optionals, placing empty Optionals before non-empty. @param valueComparator Comparator for values within Optionals. @return Comparator for Optionals.
41 Orders Optionals, placing empties last, using valueComparator.
42 Returns a view of the set containing elements less than toElement. @param toElement Element to end the set; exclusive if inclusive is false. @param inclusive Whether to include toElement in the returned set.
43 Returns a view of the set whose elements are >= fromElement. @param fromElement the lower bound, inclusive @param inclusive whether fromElement is included
44 Adds an element to the collection. Returns true on success.
45 Returns the input iterable, ensuring it's not null. @param iterable The iterable to check. @return The same iterable if not null.
46 Adds an element to the builder and returns this builder. @param element The element to add. @return This builder instance.
47 Orders keys using the provided comparator. @param keyComparator Comparator for ordering keys. @return This builder, for chaining.
48 Orders values using the provided comparator. @param valueComparator Comparator for sorting values. @return This builder, for chaining.
49 Adds an element to the contents and returns the builder. @param element The element to add. @return This builder instance for chaining.
50 Adds specified number of copies of an element to the contents. @param element Element to add. @param occurrences Number of copies to add. @return This builder instance.
51 Sets the count for a given element. @param element The element to set the count for. @param count The count to set. @return This builder instance.
52 Collects elements into an ImmutableSortedMultiset. @param comparator Comparator for elements. @param elementFunction Extracts element from input. @param countFunction Counts occurrences of elements.
53 Returns a view of the sorted set containing elements up to `toElement`. @param toElement Element to end the view; exclusive if inclusive is false. @param inclusive Whether to include `toElement` in the view.
54 Returns a sorted set containing elements from fromElement to the end. @param fromElement the starting element @param inclusive whether fromElement is inclusive
55 Returns an unmodifiable view of the given iterable. Returns existing unmodifiable view if available.
56 Returns an unmodifiable iterable from an immutable collection. @param iterable Immutable collection to wrap. @return Unmodifiable iterable.
57 Removes and returns the first element matching the predicate. @param removeFrom Iterable to remove from. @param predicate Predicate to test elements. @return Matching element or null if none found.
58 Returns an Iterable that repeatedly cycles through the given iterable.
59 Filters elements of an iterable based on a predicate. @param unfiltered Iterable to filter. @param retainIfTrue Predicate to test elements. @return Filtered iterable.
60 Transforms an iterable by applying a function to each element. @param fromIterable Iterable to transform. @param function Function to apply to each element. @return Transformed iterable.
61 Returns an iterable that consumes elements as they are iterated. Uses a ConsumingQueueIterator if the iterable is a Queue.
62 Creates an unmodifiable iterator from a given iterator. Returns existing unmodifiable iterator if available.
63 Returns an unmodifiable iterator. @param iterator The iterator to unmodifiable. @return The unmodifiable iterator.
64 Removes all elements from iterator if they are in the collection. @param removeFrom Iterator to remove elements from. @param elementsToRemove Collection of elements to remove. @return True if any elements were removed.
65 Removes elements from an iterator if the predicate is true. @param removeFrom Iterator to remove from, @param predicate Condition for removal. @return True if any elements were removed.
66 Retains elements in collection if they are present in the given collection. @param removeFrom Iterator to remove elements from. @param elementsToRetain Collection to check for element presence. @return True if any elements were removed.
67 Adds all elements from the iterator to the collection. @param addTo Collection to add elements to. @param iterator Iterator providing elements to add. @return True if the collection was modified.
68 Returns an infinite cyclic iterator over the elements of iterable.
69 Filters elements from an iterator based on a predicate. @param unfiltered Iterator to filter. @param retainIfTrue Predicate to test each element. @return An iterator with filtered elements.
70 Checks if all elements in the iterator satisfy the predicate. @param iterator Iterator of elements to check. @param predicate Predicate to apply to each element. @return True if all elements satisfy the predicate.
71 Finds the first element in the iterator that satisfies the predicate. @param iterator Iterator to search. @param predicate Predicate to test each element. @param <T> Type of elements in the iterator. @throws NoSuchElementException if no element matches.
72 Transforms an iterator by applying a function to each element. @param fromIterator Source iterator. @param function Function to apply to each element. @return Transformed iterator of type T.
73 Returns an iterator that consumes elements and removes them. @param iterator Iterator to wrap and consume elements from. @return Consuming iterator.
74 Clears the iterator by removing all elements. @param iterator Iterator to be cleared.
75 Creates an unmodifiable iterator from an enumeration. @param enumeration The enumeration to wrap. @return An UnmodifiableIterator.
76 Returns the provided PeekingIterator, ensuring it's not null. @param iterator The PeekingIterator to return. @return The same PeekingIterator.
77 Creates a new EnumMap with the specified enum type. @param type The enum type for the EnumMap. @return A new EnumMap instance.
78 Returns an unmodifiable entry based on the given entry. @param entry The entry to create an unmodifiable view of. @return An unmodifiable Entry.
79 Transforms an entry using the provided transformer. @param transformer Transforms the entry's key-value pair. @param entry The entry to transform. @return A new Entry with the transformed value.
80 Adapts an EntryTransformer to a Function<Entry, Entry>. @param transformer Transforms an Entry<K, V1> to Entry<K, V2> @return A Function that applies the transformer.
81 Safely retrieves a value from a map by key, handling exceptions. @param map the map to retrieve from @param key the key to look up @return Value associated with key, or null if not found/error.
82 Checks if the map contains the key, safely handling exceptions. @param map The map to check. @param key The key to check for. @return True if the map contains the key, false otherwise.
83 Safely removes a key from the map and returns its value. @param map the map to remove from @param key the key to remove @return removed value or null if key not found/error
84 Applies the given action to each key-value pair in the map. @param action BiConsumer to apply to each entry.
85 Creates a MultimapBuilder with keys sorted by the given comparator. @param comparator Comparator for sorting the keys. @return MultimapBuilder with a TreeMap for keys.
86 Creates a MultimapBuilder with Enum keys. @param keyClass Enum class to use as keys. @return MultimapBuilder using the provided Enum class.
87 Returns an unmodifiable Multimap backed by the given ImmutableMultimap. @param delegate The ImmutableMultimap to wrap. @return An unmodifiable Multimap.
88 Returns an unmodifiable SetMultimap backed by the given ImmutableSetMultimap. @param delegate the ImmutableSetMultimap to wrap @return an unmodifiable SetMultimap
89 Returns an unmodifiable ListMultimap from an ImmutableListMultimap. @param delegate The ImmutableListMultimap to wrap. @return An unmodifiable ListMultimap.
90 Performs the given action on each entry (element, count). @param action The action to perform.
91 Applies the consumer to each element in the map, repeated by its count.
92 Returns an unmodifiable Multiset from the given ImmutableMultiset. @param multiset The ImmutableMultiset to wrap. @return An unmodifiable Multiset view.
93 Returns a Multiset containing the union of two Multisets. Returns a view of the multiset with the highest count for each element.
94 Returns the intersection of two multisets, containing only common elements.
95 Returns a new Multiset containing the sum of two Multisets. @param multiset1 first multiset @param multiset2 second multiset @return new Multiset containing the sum of the input multisets
96 Returns a multiset containing elements in multiset1 but not in multiset2. @param multiset1 The first multiset. @param multiset2 The second multiset. @return A new Multiset.
97 Checks if superMultiset contains all occurrences of subMultiset.
98 Retains occurrences in a multiset based on another multiset. @param multisetToModify The multiset to modify. @param occurrencesToRetain Multiset defining occurrences to retain. @return True if the multiset was modified.
99 Removes occurrences from a multiset, modifying the original multiset. @param multisetToModify Multiset to remove occurrences from. @param occurrencesToRemove Occurrences to remove. @return True if the multiset was modified.
100 Retains elements present in the provided collection. @param elementsToRetain Collection of elements to retain. @return True if the multiset was modified.
101 Returns the provided Ordering instance. @param ordering The Ordering instance to return. @return The same Ordering instance.
102 Drains elements from a queue into a collection, up to a limit. @param q queue to drain from, buffer destination, limit, timeout, unit @return number of elements drained
103 Drains elements from a queue to a collection, waiting up to a timeout. @param q queue to drain from @param buffer collection to add elements to @param numElements number of elements to drain @param timeout timeout value @param unit timeout unit @return number of elements drained
104 Checks if the value is within the range. @param value The value to check. @return True if value is within the range, false otherwise.
105 Creates a new TreeSet with the given comparator. @param comparator Comparator to order elements in the tree.
106 Zips two streams into a single stream using a BiFunction. @param streamA First stream. @param streamB Second stream. @param function Function to combine elements. @return Stream of combined elements.
107 Maps a stream of objects to a new stream with an index. @param stream Input stream of objects. @param function Function to apply with index. @return New stream of mapped objects.
108 Maps an IntStream to a Stream with index. @param stream input IntStream @param function function to apply with index @return Stream of mapped values
109 Maps a LongStream to a Stream, applying a function with an index. @param stream input LongStream @param function function to apply with index @return Stream of mapped values
110 Maps a DoubleStream to a Stream by applying a function with index. @param stream input DoubleStream @param function function applying to each double with index @return Stream of mapped objects
111 Merges a range with a value, remapping existing entries. @param range Range to merge. @param value Value to use for unmapped ranges. @param remappingFunction Function to remap existing entries.
112 Creates a TreeTraverser using a function to get children. @param nodeToChildrenFunction Function to fetch children of a node. @return A TreeTraverser instance.
113 Returns a pre-order traversal of the tree rooted at the given node. @param root The root node of the tree to traverse. @return A FluentIterable representing the pre-order traversal.
114 Returns a fluent iterable for post-order traversal of the tree. @param root The root node of the tree to traverse.
115 Performs a breadth-first traversal starting from the root node. @param root The starting node for the traversal. @return A FluentIterable representing the breadth-first traversal.
116 Adds an escape sequence for a character. @param c char to escape, r replacement string. @return this builder for chaining.
117 Adds an escape mapping for a character. @param c character to escape @param replacement replacement string @return this builder
118 Gets the code point at the specified index in the CharSequence. @param seq CharSequence to examine. @param index Index of the code point. @param end End index (exclusive). @return The code point at the index.
119 Creates a DeadEvent with the given source and event. @param source The source of the event. @param event The event object.
120 Handles a subscriber exception, delegating to a handler. Logs if the handler itself throws an exception.
121 Invokes the subscriber method with the given event. @param event The event object to pass to the method. @throws InvocationTargetException if method invocation fails.
122 Constructs a SubscriberExceptionContext with event bus, event, subscriber, and method.
123 Returns a copy of the given immutable graph. @param graph The graph to copy. Must not be null. @return A copy of the graph.
124 Returns a copy of the given immutable network. @param network The immutable network to copy. @return A copy of the input network.
125 Returns a copy of the given graph. @param graph The graph to copy. Must not be null. @return A copy of the graph.
126 Visits the next element in the horizon deque. @param horizon Deque of iterators to traverse. @return Next element or null if horizon is empty.
127 Constructs a HashingInputStream with a hasher and input stream. @param hashFunction Hash function to use. @param in Input stream to hash.
128 Constructs a new AppendableWriter with the given Appendable target. @param target The Appendable to write to. Must not be null.
129 Creates a ByteSink that wraps an encoding-aware CharSink. @param encodedSink CharSink to wrap for byte output. @return ByteSink for writing bytes via the CharSink.
130 Creates a ByteSource from a CharSource, decoding its contents. @param encodedSource CharSource to decode @return ByteSource representing the decoded content
131 Initializes a CharSequenceReader with the given CharSequence. @param seq The CharSequence to read from.
132 Copies data from a Reader to a StringBuilder. @param from Reader to copy from @param to StringBuilder to copy to @return Total number of characters copied
133 Copies data from a Reader to a Writer. @param from The Reader to copy from. @param to The Writer to copy to. @return The number of characters copied.
134 Skips characters from a Reader. @param reader Reader to skip from. @param n Number of characters to skip. @throws IOException if an I/O error occurs.
135 Constructs a CountingInputStream with the given input stream. @param in The input stream to count bytes from.
136 Constructs a CountingOutputStream with the given OutputStream. @param out The OutputStream to count bytes from.
137 Creates a BufferedReader for reading from a file with specified charset. @param file The file to read from. @param charset The character encoding to use. @throws FileNotFoundException if the file does not exist.
138 Creates a BufferedWriter writing to a file with the given charset. @param file The file to write to. @param charset The character encoding to use. @throws FileNotFoundException if the file cannot be opened.
139 Updates a file's access time. Creates if it doesn't exist. @param file The file to touch. @throws IOException If unable to update modification time.
140 Creates parent directories for a given file. @param file The file for which to create parent directories. @throws IOException if parent directories cannot be created.
141 Extracts the file extension from a full file name. @param fullName Full path to the file. @return The file extension, or an empty string if none exists.
142 Extracts filename without extension from a file path. @param file The full file path. @return Filename without extension.
143 Constructs a LittleEndianDataInputStream with the given input stream.
144 Constructs a LittleEndianDataOutputStream with the given OutputStream.
145 Updates the last modified time of a file or creates it if absent. @param path Path to the file to touch. @throws IOException if an I/O error occurs.
146 Constructs a PatternFilenameFilter with the given regex pattern. @param pattern the regex pattern to match filenames against
147 Checks if a BigInteger is a power of two. @param x The BigInteger to check. @return True if x is a power of two, false otherwise.
148 Iterates through the array and applies the consumer to each element. @param consumer The DoubleConsumer to apply to each element.
149 Iterates over the array elements and applies the consumer. @param consumer The IntConsumer to apply to each element.
150 Iterates through the array and applies the consumer to each element. @param consumer Functional interface to process each element.
151 Checks if the given class is a wrapper type (e.g., Integer, String). @param type Class to check. @return True if it's a wrapper type, false otherwise.
152 Returns the wrapper type for a primitive type, or the type itself. @param type The class to wrap, must not be null. @return The wrapper type or the original type.
153 Returns the primitive type corresponding to the given wrapper type. @param type Wrapper class (e.g., Integer.class) @return Primitive type (e.g., int.class) or original type.
154 Parses a string as an unsigned byte. @param string String to parse. @param radix Radix of the number in the string. @throws NumberFormatException if out of range.
155 Parses a string as an unsigned integer with specified radix. @param string String to parse. @param radix Radix of the number. @return Unsigned integer value.
156 Creates a new Schedule with the given delay and time unit. @param delay The delay time. @param unit The time unit of the delay.
157 Updates value for key using function and returns the new value. @param key The key to update. @param updaterFunction Function to apply for updating the value.
158 Atomically updates the value associated with the given key. @param key the key of the value to update @param updaterFunction function to apply to current value @return the updated value
159 Adapts a Callable to an AsyncCallable using a ListeningExecutorService.
160 Wraps a Callable to rename the thread before execution. @param callable Callable to execute. @param nameSupplier Supplier for the thread name. @return Callable with thread renaming.
161 Wraps a Runnable to rename the thread before execution. @param task Runnable to execute. @param nameSupplier Supplier of the new thread name.
162 Creates an AsyncClosingFunction without a closer. @param function The AsyncFunction to wrap. @return An AsyncClosingFunction that executes the function.
163 Returns the input future, ensuring it's not null. @param future The FluentFuture to return. @return The same FluentFuture.
164 Creates a Future that applies a function to the result of another Future. @param input The input Future. @param function The transformation function. @return A Future wrapping the transformed result.
165 Decorates an Executor to rename threads using a Supplier. @param executor Executor to decorate. @param nameSupplier Supplier providing thread names. @return Decorated Executor.
166 Decorates an ExecutorService with thread name updating. @param service The ExecutorService to decorate. @param nameSupplier Supplier for the thread name. @return Decorated ExecutorService.
167 Wraps a ScheduledExecutorService to rename threads. @param service The ScheduledExecutorService to wrap. @param nameSupplier Supplier for the thread name. @return Wrapped ScheduledExecutorService.
168 Constructs a SequentialExecutor with the given executor. @param executor The executor to wrap; must not be null.
169 Executes the given task, adding it to the queue if necessary. @param task The runnable task to execute.
170 Sets the uncaught exception handler for created threads. @param uncaughtExceptionHandler Handler to be set. @return This builder for fluent configuration.
171 Sets the backing ThreadFactory. @param backingThreadFactory The ThreadFactory to use. @return This builder for chaining.
172 Waits for a thread to terminate, with a timeout. @param toJoin Thread to wait for. @param timeout Timeout duration. @param unit Timeout unit (e.g., TimeUnit.SECONDS).
173 Sets the ticker for cache statistics. @param ticker The ticker object to use. @return This CacheBuilder for chaining.
174 Sets the removal listener for the cache. @param listener Listener called when entries are removed. @return This CacheBuilder for chaining.
175 Calculates and returns the mean (average) value. Requires count to be non-zero.
176 Returns the minimum value in the collection. Throws IllegalStateException if the collection is empty.
177 Returns the maximum value in the collection. @return The maximum value, or throws an exception if empty.
178 Calculates the mean value. @return The calculated mean value.
179 Returns the minimum element in the collection. Throws IllegalStateException if the collection is empty.
180 Returns the maximum value in the collection. @return The maximum value, or throws exception if empty.
181 Returns a CountDownLatch that counts down when closed. Returns a CountDownLatch(0) if already closed.
182 Converts a string to lowercase. @param string The string to convert. @return The lowercase version of the string.
183 Converts a character to lowercase. @param c The character to convert. @return The lowercase character, or the original if not uppercase.
184 Converts a string to uppercase. Returns the original string if empty.
185 Converts a lowercase character to uppercase. @param c The character to convert. @return The uppercase equivalent or the original char.
186 Truncates a CharSequence to maxLength, appending truncationIndicator. @param seq CharSequence to truncate @param maxLength max length of truncated string @param truncationIndicator indicator to append if truncated
187 Writes stats to a ByteBuffer. @param buffer ByteBuffer to write to, must have enough space.
188 Constrains a short value within a specified range [min, max]. @param value The value to constrain. @param min The minimum allowed value. @param max The maximum allowed value. @return The constrained value.
189 Sets the priority for threads created by this builder. @param priority The priority value (Thread.MIN_PRIORITY to Thread.MAX_PRIORITY) @return This {@link ThreadFactoryBuilder} for chaining.
190 Compares two CharSequences for equality, ignoring case. @param s1 First CharSequence to compare. @param s2 Second CharSequence to compare. @return True if sequences are equal ignoring case, false otherwise.
191 Creates a CacheStats object with the provided statistics. @param hitCount Hit count. @param missCount Miss count.
192 Creates a multimap from the given map. @param map The map to use as the backing map. Must be empty.
193 Sets the map and calculates the total size, validating collections. @param map map to set; keys are K, values are collections of V
194 Initializes with a backing map. Map must be empty. @param backingMap The map to use as the backing store.
195 Returns a view of the set between fromElement and toElement. @param fromElement start element (inclusive) @param toElement end element (inclusive)
196 Initializes a new EnumMultiset with the given enum type. @param type the enum type for the multiset
197 Returns a sub-set of elements between fromElement and toElement. @param fromElement start element (inclusive) @param toElement end element (inclusive) @return ImmutableSortedSet containing the sub-set
198 Partitions an iterable into lists of the specified size. @param iterable iterable to partition @param size size of each sublist @return Iterable of List<T>
199 Partitions an iterable into lists of the specified size. @param iterable Iterable to partition. @param size Partition size. @return Iterable of lists.
200 Sets the expected size of the data. @param expectedSize The expected size (must be >= 0). @return This builder instance.
201 Sets the maximum size of the collection. @param maximumSize The maximum size, must be greater than 0. @return This builder instance.
202 Constructs a StreamingHasher with given chunk and buffer sizes. @param chunkSize Size of each data chunk to process. @param bufferSize Size of the internal buffer.
203 Ensures the input value is non-negative. @param value The value to check; must not be NaN. @return The input value if non-negative, otherwise 0.0.
204 Returns a CharMatcher that matches the specified character. @param match The character to match. @return A CharMatcher that matches the character.
205 Returns a CharMatcher that rejects chars equal to match. @param match the character to reject @return a CharMatcher that rejects the character
206 Collapses consecutive matching chars in a sequence. @param sequence CharSequence to collapse. @param replacement Replacement character. @return Modified sequence or original if no match.
207 Default constructor. Calls the parameterized constructor with true.
208 Checks if two Wrapper objects are equal based on their equivalence. @param obj The object to compare to. @return True if equal, false otherwise.
209 Checks if two objects are equivalent using the equivalent method. @param t The first object. @param u The second object. @return True if equivalent, false otherwise.
210 Reclaims a value associated with a key from the weak value chain. @param key Key of the value to reclaim. @return True if value was reclaimed, false otherwise.
211 Clears a value for testing by key, hash, and reference. Returns true if found and cleared, false otherwise.
212 Checks if two iterators have the same elements. @param iterator1 First iterator @param iterator2 Second iterator @return True if elements are equal, false otherwise.
213 Checks if this entry is equal to another Multiset entry. @param object the object to compare to @return true if equal, false otherwise
214 Checks if traversal can continue without reusing an edge. @param graph The graph to traverse. @param nextNode The next node to visit. @param previousNode The previously visited node.
215 Calculates the hash code based on the reference's hash.
216 Constructs a FinalizablePhantomReference with a referent and queue. @param referent The object being referenced. @param queue The FinalizableReferenceQueue to use.
217 Constructs a FinalizableSoftReference with a referent and queue. @param referent The object to be referenced. @param queue The FinalizableReferenceQueue to use.
218 Constructs a FinalizableWeakReference with a referent and queue. @param referent The object to be weakly referenced. @param queue The FinalizableReferenceQueue to use.
219 Creates a function that always returns the given value. @param <E> The type of the value to return. @param value The constant value to return. @return A function that always returns the given value.
220 Extracts host and port from a bracketed host-port string. @param hostPortString Bracketed host-port string (e.g., [host:port]) @return String array containing host and port.
221 Checks for bracketless IPv6 literals and returns the current object.
222 Decrements an InetAddress. Wraps around if necessary. @param address The InetAddress to decrement. @return Decremented InetAddress.
223 Increments an InetAddress. Wraps around if necessary. @param address The InetAddress to increment. @return The incremented InetAddress.
224 Creates a dynamic proxy that implements the given interface. @param interfaceType The interface type to proxy. @param handler The invocation handler. @return A proxy instance of the interface type.
225 Extracts the type argument from the superclass's parameterized type.
226 Appends parts to an appendable, separated by a separator. @param appendable Target appendable. @param parts Iterator of parts to append. @return The modified appendable.
227 Appends entries to a StringBuilder. @param builder StringBuilder to append to @param entries Iterable of entries to append @return The modified StringBuilder
228 Joins entries from an iterator into a string using StringBuilder.
229 Sets the key-value separator character. @param keyValueSeparator The separator character. @return The Joiner with the specified separator.
230 Returns a string representation of the object. Creates a copy of the object to ensure consistency.
231 Retrieves the set associated with the given key. @param key the key to look up @return the set or an empty set if the key is not found
232 Retrieves a resource URL from the classloader. @param resourceName The name of the resource to retrieve. @return The URL of the resource.
233 Returns an empty Optional. Provides an empty container for generic type T.
234 Converts a Google Optional to a Java Optional. @param googleOptional Google Optional to convert. @return Java Optional or null if input is null.
235 Converts an empty string to null. @param string The string to check. @return Null if empty, otherwise the input string.
236 Checks if a string is null or empty. @param string The string to check. @return True if null or empty, false otherwise.
237 Returns a new iterable that skips a specified number of elements. @param iterable source iterable @param numberToSkip number of elements to skip @return new iterable with skipped elements
238 Returns a limited view of the iterable, up to {@code limitSize}. @param iterable Source iterable. @param limitSize Maximum number of elements to return.
239 Advances the iterator by the specified number of elements. @param iterator Iterator to advance. @param numberToAdvance Number of elements to advance. @return Actual number of elements advanced.
240 Returns an iterator that returns at most {@param limitSize} elements.
241 Creates a Traverser for a given tree-like SuccessorsFunction. @param tree The SuccessorsFunction representing the tree. @return A Traverser object for traversing the tree.
242 Rounds up to the nearest multiple of 32, ensuring positivity. @param bits Number of bits; must be positive. @return Rounded-up multiple of 32.
243 Converts a BigInteger to an InetAddress, IPv6 if specified. @param address BigInteger representing the IP address @param isIpv6 true for IPv6, false for IPv4 @return InetAddress object
244 Repeats the given string the specified number of times. @param string string to repeat @param count number of repetitions @return repeated string
245 Constructs a Bloom filter with given parameters. @param bits The bit array. @param numHashFunctions Number of hash functions (1-255). @param funnel Funnel for hashing objects. @param strategy Strategy for hash function selection.
246 Concatenates multiple hash functions into a single hash function. @param hashFunctions Iterable of hash functions to concatenate. @return A new ConcatenatedHashFunction.
247 Initializes SipHash function with provided constants and keys. @param c Compression rounds, must be positive. @param d Finalization rounds, must be positive. @param k0 First 64-bit key. @param k1 Second 64-bit key.
248 Creates a FileBackedOutputStream with given threshold and finalize behavior. @param fileThreshold Threshold for writing to file. @param resetOnFinalize Resets on finalize if true.
249 Creates an Inet4Address from a byte array. @param bytes 4-byte array representing IPv4 address @return Inet4Address object
250 Ensures array has at least minLength, padding with extra space. @param array input array @param minLength minimum length @param padding extra space to add @return array with ensured capacity
251 Ensures array capacity is at least minLength + padding. @param array input byte array @param minLength minimum required length @param padding padding to add if array is too short @return The original array or a copy with increased capacity.
252 Returns array with ensured capacity, copies if needed. @param array Input array @param minLength Minimum required length @param padding Padding to add if needed @return char array with ensured capacity
253 Ensures array capacity, copies if needed. @param array Input array. @param minLength Minimum required length. @param padding Padding to add if needed. @return The array, possibly with increased capacity.
254 Ensures array has at least minLength + padding. @param array Input array. @param minLength Minimum length required. @param padding Padding to add if needed. @return The array, potentially resized.
255 Ensures array capacity. Returns original if sufficient, otherwise creates a copy with minLength + padding.
256 Ensures array has at least minLength + padding. Returns original array if already large enough.
257 Ensures array has at least minLength + padding. @param array Input array. @param minLength Minimum length required. @param padding Padding to add if needed. @return The array (or a copy with increased capacity).
258 Casts a long to char, ensuring it's within the valid range.
259 Casts a long to int, checking for potential overflow. @param value The long value to cast. @return The casted int value.
260 Casts a long to a short, checking for potential overflow. @param value The long value to cast. @return The short representation of the value.
261 Casts a long to a byte, checking for out-of-range values. @param value the long value to cast @return the byte representation of the value
262 Casts a long to a byte, checking for out-of-range values. @param value long value to cast; must be within byte range. @return byte representation of the value.
263 Casts a long to an int after checking range. @param value long value to cast; must be within int range. @return int value.
264 Creates a scheduler that executes tasks with a fixed delay. @param initialDelay Initial delay before the first task. @param delay Recurring delay between tasks. @param unit Time unit for initialDelay and delay. @return Scheduler for fixed-delay task execution.
265 Creates a fixed-rate schedule for scheduling tasks. @param initialDelay Initial delay before first execution. @param period Period between executions. @param unit Time unit for the delay and period. @return A Scheduler instance.
266 Constrains a char value to be within a specified range [min, max].
267 Constrains a value within a specified range [min, max]. @param value The value to constrain. @param min The minimum value. @param max The maximum value.
268 Retrieves a resource URL. @param contextClass Class to search relative to. @param resourceName Resource path. @return URL of the resource.
269 Starts the stopwatch. Returns the stopwatch instance for chaining.
270 Stops the stopwatch and returns it. Returns: This stopwatch instance.
271 Verifies removal is allowed; throws exception if not. @param canRemove True if removal is permitted, false otherwise.
272 Sets the value comparator for ordering entries. @param valueComparator Comparator for values; null resets. @return this Builder instance.
273 Sets the initial capacity of the cache. @param initialCapacity The initial capacity (>= 0). @return This CacheBuilder for chaining.
274 Sets the concurrency level for the cache builder. @param concurrencyLevel The desired concurrency level (must be > 0). @return This CacheBuilder for chaining.
275 Sets the initial capacity of the map. @param initialCapacity The initial capacity (>= 0). @return A builder with the specified initial capacity.
276 Sets the concurrency level for the MapMaker. @param concurrencyLevel The desired concurrency level (must be > 0). @return This MapMaker builder.
277 Sets the maximum size of the cache. @param maximumSize The maximum number of entries allowed. @return This CacheBuilder for chaining.
278 Sets the maximum weight for the cache. @param maximumWeight The maximum weight allowed (must be >= 0) @return This CacheBuilder for chaining.
279 Sets the weigher function for the cache. @param weigher The function to calculate the weight of an entry. @return {@code this} CacheBuilder for chaining.
280 Sets the duration after which writes expire. @param duration The duration after which writes expire. @param unit The time unit of the duration.
281 Sets the duration after which accessed entries expire. @param duration The duration after which to expire. @param unit The time unit of the duration.
282 Sets the duration after which a write refreshes the cache. @param duration Refresh duration. @param unit Time unit of the duration. @return This CacheBuilder for chaining.
283 Sets the key equivalence function. @param equivalence Equivalence function for keys. @return {@code this} for chaining.
284 Sets the equivalence strategy for comparing values. @param equivalence Equivalence function for values. @return {@code this} for chaining.
285 Sets the key equivalence function. @param equivalence The equivalence function to use. @return The MapMaker builder for chaining.
286 Constructs a TypeToken from the runtime type. Throws exception if the type is a type variable.
287 Returns the cause of the failure, if the service has failed.
288 Checks if an index is within the bounds of a collection size. @param index Index to check. @param size Collection size. @param desc Description for exception message.
289 Validates index is within bounds. @param index index to check @param size size of the collection @param desc description of the index @return validated index
290 Returns a predicate that always returns true, regardless of input.
291 Returns a predicate that always returns false, regardless of input.
292 Returns a predicate that checks if an object is null.
293 Returns a predicate that checks if an object is not null.
294 Combines two predicates to return a predicate that returns true if both input predicates are true.
295 Combines two predicates with a logical OR operation. @param first The first predicate. @param second The second predicate. @return A combined predicate that returns true if either input is true.
296 Returns a new splitter that omits empty strings. Uses the existing strategy, trimmer, and limit.
297 Limits the number of items returned by the splitter. @param maxItems The maximum number of items to return. @return A new Splitter with the specified limit.
298 Splits a CharSequence into a list of strings. @param sequence The sequence to split. @return An unmodifiable list of strings.
299 Returns a string representation of the key-value pair.
300 Returns the elapsed time in the specified time unit. @param desiredUnit The time unit to convert to. @return The elapsed time in the desired unit.
301 Returns the elapsed duration as a Duration object. Uses the elapsedNanos() value to create the Duration.
302 Returns a string representation of the duration in a user-friendly format.
303 Replaces a null string with an empty string. @param string The string to check, may be null. @return An empty string if input is null, otherwise the string.
304 Finds the longest common prefix of two CharSequences. @param a First CharSequence @param b Second CharSequence @return The common prefix as a String
305 Finds the longest common suffix of two CharSequences. @param a first CharSequence @param b second CharSequence @return The longest common suffix.
306 Creates a Supplier that returns the given instance. @param <T> The type of the instance. @param instance The instance to be returned by the Supplier. @return A Supplier that returns the given instance.
307 Default constructor for the Ticker class. Protected access.
308 Throws VerifyException if expression is false; otherwise, does nothing.
309 Throws VerifyException if expression is false. @param expression boolean to verify @param errorMessageTemplate Error message template @param p1 Parameter for message formatting
310 Throws VerifyException if expression is false, with formatted error. @param expression boolean to check @param errorMessageTemplate Error message template @param p1 Parameter for error message formatting
311 Throws VerifyException if expression is false, with error message. @param expression boolean to verify @param errorMessageTemplate error message template @param p1 parameter for message formatting
312 Verifies an expression; throws VerifyException if false. @param expression Boolean to verify. @param errorMessageArgs Arguments for error message.
313 Verifies an expression; throws VerifyException if false. @param expression boolean to check @param errorMessageTemplate error message template @param p1, p2 parameters for message formatting
314 Throws VerifyException if expression is false, with formatted error. @param expression boolean to verify @param errorMessageTemplate error message template @param p1 parameter 1 for formatting @param p2 parameter 2 for formatting
315 Throws VerifyException if expression is false, with formatted error message. @param expression boolean to verify @param errorMessageTemplate error message template @param p1 parameter 1 for message formatting @param p2 parameter 2 for message formatting
316 Throws VerifyException if expression is false, with custom message. @param expression boolean to verify @param errorMessageTemplate message template for exception
317 Throws VerifyException if expression is false, with formatted error message. @param expression boolean to verify @param errorMessageTemplate error message template @param p1 parameter 1 for message formatting @param p2 parameter 2 for message formatting
318 Throws VerifyException if expression is false, with formatted error message. @param expression boolean to verify @param errorMessageTemplate error message template @param p1, p2 parameters for message formatting
319 Throws VerifyException if expression is false, with formatted error message. @param expression boolean to verify @param errorMessageTemplate error message template @param p1 parameter 1 for formatting @param p2 parameter 2 for formatting
320 Throws VerifyException if expression is false, with custom error message. @param expression boolean to verify @param errorMessageTemplate Error message format
321 Verifies an expression; throws VerifyException if false. @param expression boolean to check @param errorMessageTemplate Error message template @param p1 Parameter 1 for message formatting @param p2 Parameter 2 for message formatting
322 Verifies an expression; throws VerifyException if false. @param expression boolean to verify @param errorMessageTemplate error message template @param p1, p2 parameters for the error message
323 Verifies an expression; throws VerifyException if false. @param expression boolean to check @param errorMessageTemplate error message template @param p1, p2 parameters for the error message
324 Verifies a boolean expression, throwing VerifyException on failure. @param expression Boolean to verify. @param errorMessage Template for error message.
325 Verifies an expression; throws VerifyException if false. @param expression boolean to check @param errorMessageTemplate error message template @param p1 parameter 1 for message @param p2 parameter 2 for message
326 Throws VerifyException if expression is false, with formatted error message. @param expression boolean to verify @param errorMessageTemplate error message template @param p1 parameter 1 for message formatting @param p2 parameter 2 for message formatting
327 Throws VerifyException if expression is false, with custom error message. @param expression boolean to verify @param errorMessageTemplate Error message template @param p1 First parameter for error message @param p2 Second parameter for error message
328 Throws VerifyException if expression is false, with custom message. @param expression boolean to verify @param errorMessageTemplate message template for exception
329 Throws VerifyException if expression is false, with custom message. @param expression boolean to verify @param errorMessageTemplate message template for exception
330 Throws VerifyException if expression is false. @param expression Boolean to verify. @param errorMessage Template for error message.
331 Cleans up references in the queue, finalizing them. Returns true if successful, false otherwise.
332 Default constructor for the SimpleStatsCounter class.
333 Adds stats from another StatsCounter to the current stats. @param other The StatsCounter to add stats from.
334 Protected constructor for extending classes. Ensures proper initialization.
335 Creates a new LinkedHashMap that preserves insertion order. @return A LinkedHashMap instance.
336 Adds all entries from the given map to this map. @param m the map whose entries are added
337 Invalidates objects identified by the provided keys. @param keys Iterable of keys to invalidate.
338 Creates a new CacheBuilder with default configuration. @return A new CacheBuilder instance.
339 Throws UnsupportedLoadingOperationException; does not load all keys.
340 Returns the total request count (hits + misses). @return The sum of hitCount and missCount.
341 Calculates the total load count. @return Total load count (successes + exceptions).
342 Calculates the exception rate based on success and exception counts. Returns 0.0 if total load count is zero.
343 Calculates the average load penalty. Returns 0.0 if total load count is zero.
344 Protected constructor for ForwardingCache, calls super().
345 Protected constructor for ForwardingCollection. No-op.
346 Default constructor for ForwardingIterator. No-op.
347 Protected constructor for ForwardingMap, prevents external instantiation.
348 Default constructor for ForwardingMapEntry. No-op.
349 Protected constructor for ForwardingMultimap, used for subclassing.
350 Protected constructor to prevent direct instantiation.
351 Protected constructor for ForwardingExecutorService.
352 Default constructor for ForwardingFuture. No-op.
353 Drains the recency queue, re-adding entries if still accessed.
354 Copies a map entry, handling null keys/values. @param original The entry to copy. @param newNext Next entry in the chain. @return The copied entry or null if original is invalid.
355 Removes entries from a column if the predicate is true. @param predicate Predicate to apply to each entry. @return True if any entries were removed.
356 Initializes futures, handling all-success or value collection.
357 Wraps an executor to propagate rejected executions to a future. @param delegate Executor to wrap. @param future Future to set exception on rejection.
358 Gets the result from a {@link Future}. Throws ExecutionException if not done.
359 Gets the result of a Future, re-throwing as unchecked exceptions. @param future The Future to retrieve the result from. @return The result of the Future.
360 Clears reference queues for keys and values if enabled.
361 Returns a default equivalence relation for objects.
362 Returns a default equivalence relation for objects.
363 Returns a default equivalence relation for objects.
364 Returns a default equivalence relation for objects.
365 Returns a default equivalence relation for objects.
366 Checks if the entry is expired based on access or write time. @param entry The reference entry to check. @param now Current timestamp in nanoseconds. @return True if expired, false otherwise.
367 Returns the total number of elements in the map. Sums the values from the countMap to calculate the size.
368 Calculates the size of an iterator, returning a saturated int.
369 Calculates the size of the multiset by summing element counts. @param multiset The multiset to calculate the size of. @return The size of the multiset as an int.
370 Adds two integers, handling potential overflow. @param a First integer. @param b Second integer. @return Sum of a and b, saturated to Int.MAX_VALUE/MIN_VALUE.
371 Subtracts two integers, saturating at the integer limits.
372 Multiplies two integers, saturating to Integer.MAX_VALUE/MIN_VALUE.
373 Creates a new CompactHashSet that preserves insertion order. Returns a set that maintains the order elements are added.
374 Default constructor for AbstractIterator.
375 Constructs a new AbstractSequentialIterator with initial element. @param firstOrNull The first element, or null if empty.
376 Private constructor to prevent direct instantiation.
377 Creates and returns an unmodifiable, empty collection.
378 Polls and removes the first entry from the entry set. @return The first entry or null if the set is empty.
379 Polls the first element from the iterator, returns null if empty.
380 Refreshes the delegate if empty, propagates to ancestor.
381 Gets the collection associated with the key. Creates a new collection if one doesn't exist.
382 Returns a collection of the values in this map.
383 Returns a list of all values in the map. Casts to List<V>.
384 Returns a set of entries for this map. Delegates to superclass.
385 Returns a list of entries from the superclass. Casts the result to List<Entry<K, V>>.
386 Creates a StringBuilder with initial capacity, up to a limit. @param size Initial capacity hint, must be non-negative.
387 Creates a new ArrayList with the specified initial capacity. @param initialArraySize Initial size of the ArrayList. @return A new ArrayList with the given capacity.
388 Calculates the initial capacity. Returns Integer.MAX_VALUE if too large.
389 Creates a ListMultimapBuilder with ArrayList values. @param expectedValuesPerKey Expected size of ArrayList values. @return ListMultimapBuilder with ArrayList values.
390 Creates a SetMultimapBuilder with a HashSet for values. @param expectedValuesPerKey Expected size of HashSet per key. @return SetMultimapBuilder with HashSet values.
391 Creates a SetMultimapBuilder with LinkedHashSet values. @param expectedValuesPerKey Expected size of LinkedHashSet. @return SetMultimapBuilder with LinkedHashSet values.
392 Creates a MultimapBuilder with hash keys, pre-allocating space. @param expectedKeys Expected number of keys for the map. @return MultimapBuilder with a HashMap for keys.
393 Creates a MultimapBuilder with linked hash keys and expected size. @param expectedKeys Expected number of keys in the multimap.
394 Sets the count of an element in the multiset. @param element Element to set the count for. @param count Desired count; must be non-negative. @return The previous count of the element.
395 Sets the count of an element in a multiset if the old count matches. @param self The multiset to modify. @param element The element whose count is to be set. @param oldCount The expected old count of the element. @param newCount The new count to set for the element. @return True if the count was updated, false otherwise.
396 Calculates a standard hash code for the object. Uses Sets.hashCodeImpl for consistent hashing.
397 Checks for equality using the standard Sets implementation. @param object The object to compare to. @return True if the objects are equal, false otherwise.
398 Returns the hash code value for this object, based on its map representation.
399 Returns a string representation of the object as a map.
400 Removes all elements from the multiset that are contained in elementsToRemove. @param elementsToRemove collection of elements to remove @return true if the multiset was modified
401 Compares this multiset with another object for equality. @param object the object to compare with @return true if equal, false otherwise
402 Compares this multiset with another using Multisets.equalsImpl. @param object the object to compare to @return true if equal, false otherwise
403 Returns the first element of the iterable, or defaultValue if empty. @param iterable Source iterable. @param defaultValue Value if the iterable is empty. @return First element or defaultValue.
404 Returns a map view of the underlying data.
405 Returns a navigable set view of the map's keys.
406 Returns the provided comparator or natural order if null. @param comparator Comparator to use, or null for natural order. @return Comparator object.
407 Returns a string representation of the row map.
408 Returns a string representation of the object, based on rowMap().
409 Writes the object to an ObjectOutputStream. Writes default state and multimap data.
410 Writes the object to the output stream for serialization.
411 Writes the object to an ObjectOutputStream. Writes default state and multimap data.
412 Populates a multimap from an ObjectInputStream. @param multimap Multimap to populate. @param stream Input stream containing multimap data.
413 Returns the set of column keys. Uses the columnKeyToIndex map's keyset.
414 Returns a set of row keys. Uses the rowKeyToIndex map's keyset.
415 Returns a set view of the map's keys.
416 Checks if a column with the given key exists. @param columnKey The key of the column to check. @return True if the column exists, false otherwise.
417 Checks if a row with the given key exists. @param rowKey The key of the row to check. @return True if the row exists, false otherwise.
418 Retrieves a list associated with the given key. @param key the key to look up @return List of values or an empty list if key not found.
419 Retrieves a map for a given column key. @param columnKey The key representing the column. @return Map for the column or an empty map if not found.
420 Associates the specified value with the given key. @param key key to associate with the value @param value value to associate with the key @return this builder
421 Calculates the point offset from the origin by the given distance. @param origin starting point @param distance distance to offset @return Point offset from the origin
422 Creates a Spliterator.OfDouble from a Spliterator and a function. @param fromSpliterator The input Spliterator. @param function Transforms elements to Spliterator.OfDouble. @param topCharacteristics Characteristics of the resulting Spliterator. @param topSize Estimated size of the resulting Spliterator.
423 Creates a Spliterator.OfInt by flattening a Spliterator using a function. @param fromSpliterator Source Spliterator @param function Function to map elements to Spliterator.OfInt @param topCharacteristics Top-level characteristics @param topSize Estimated size of the flattened stream @return A Spliterator.OfInt representing the flattened stream
424 Creates a Spliterator.OfLong from a Spliterator by applying a function. @param fromSpliterator Input Spliterator @param function Function to map elements to long Spliterator @param topCharacteristics Characteristics of the resulting Spliterator @param topSize Estimated size of the resulting Spliterator @return A Spliterator.OfLong
425 Creates a flatMap Spliterator from an input Spliterator and function. @param fromSpliterator Input Spliterator. @param function Transforms elements into Spliterators. @param topCharacteristics Top-level characteristics. @param topSize Estimated size. @return A new FlatMapSpliterator.
426 Checks if this collection contains all elements of the given collection.
427 Sets the hash table mask based on the provided mask value. @param mask The mask value used to determine the hash table size.
428 Sets the hash table mask based on the provided mask value.
429 Resizes the entries, keys, and values arrays to the new capacity.
430 Resizes the entries and elements arrays to the specified capacity.
431 Calculates the hash table size, ensuring it meets minimum requirements. @param expectedSize the expected number of entries @return the calculated table size
432 Compares two integers and returns a comparison chain. @param left the first integer @param right the second integer
433 Compares two long values and returns a comparison chain.
434 Compares two booleans, prioritizing the 'left' value as greater.
435 Compares two booleans, returning false if left is false.
436 Checks if a lower bound exists. @return True if a lower bound is set, false otherwise.
437 Checks if an upper bound exists, not equal to Cut.aboveAll.
438 Default constructor for DiscreteDomain. Calls the other constructor.
439 Writes the object to an ObjectOutputStream. Writes type info and map data for serialization.
440 Writes the object to an ObjectOutputStream. Serializes keyType/object and map data.
441 Writes object state to stream. Uses default mechanism then writes the map.
442 Checks if the element is of the expected type. Throws ClassCastException if not.
443 Writes the object to the output stream during serialization.
444 Writes object state to the stream, including the multiset.
445 Writes object to stream, including comparator and multiset data.
446 Constructs a new Builder instance.
447 Creates a FluentIterable from an array of elements. @param elements array to create the iterable from @return FluentIterable containing the array elements
448 Creates an empty FluentIterable. Returns an immutable, empty FluentIterable.
449 Checks if the collection is empty. Returns true if empty, false otherwise.
450 Appends another iterable to this iterable. @param other Iterable to append; elements must be of type E. @return A new FluentIterable containing elements from both.
451 Concatenates two iterables into a single iterable. @param a First iterable. @param b Second iterable. @return Combined iterable.
452 Concatenates three iterables into a single iterable. @param a, b, c Iterables to be concatenated. @return A new iterable containing elements from all inputs.
453 Concatenates four iterables into a single iterable. @param a, b, c, d Iterables to concatenate. @return A new iterable containing all elements.
454 Returns a stream backed by the delegate collection.
455 Counts occurrences of an element in an iterator. @param iterator Iterator to search. @param element Element to count. @return Number of times the element appears.
456 Checks if the map contains the specified key. @param map the map to check, @param key the key to search for
457 Checks if a map contains the specified value. @param map the map to check, @param value the value to search for
458 Adds all elements from the given Iterable to the list at the specified index.
459 Returns a sublist backed by this list, from fromIndex to toIndex. @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
460 Calculates the object's hash code using the standard implementation.
461 Adds all entries from the provided map into this map. @param map the map whose entries to add
462 Checks for equality using Maps.equalsImpl. @param object The object to compare to. @return True if the objects are equal, false otherwise.
463 Creates a new custom table from a backing map and factory. @param backingMap Empty map to back the table. @param factory Supplier for creating empty column maps. @return A new Table instance.
464 Returns the set of column keys. Lazily initializes if null.
465 Creates a new column map with the given column key.
466 Populates a map from an ObjectInputStream. @param map Map to populate. @param stream Input stream containing map data.
467 Populates a Multiset from an ObjectInputStream. @param multiset The Multiset to populate. @param stream Input stream containing the data.
468 Rebuilds a hash table with a new size, inserting existing elements. @param newTableSize new size of the hash table @param elements elements to insert @param n number of elements to insert @return new hash table
469 Constructs a new Builder with default initial capacity.
470 Creates a new builder with the specified initial size. @param size Initial capacity of the builder. @return A new Builder instance.
471 Creates a new Builder with the specified expected size. @param expectedSize The initial capacity of the builder.
472 Ensures the dedupedElements array has at least the specified capacity.
473 Adds all elements from the given iterable to the list. @param elements Iterable containing elements to add. @return This builder instance for chaining.
474 Adds all elements from the iterator to the list. @param elements Iterator providing elements to add. @return This builder instance for chaining.
475 Adds all elements from the iterator to the list. @param elements Iterator providing elements to add. @return This builder object for chaining.
476 Adds all elements from the given iterable to the builder. @param elements Iterable containing elements to add. @return This builder, allowing method chaining.
477 Returns a collector that accumulates elements into an ImmutableList.
478 Returns an empty immutable multimap.
479 Returns a collector that accumulates to an ImmutableRangeSet.
480 Returns a collector that accumulates elements into an ImmutableSet.
481 Returns a comparator for the keys of this map.
482 Adds an element to the builder. Returns the builder instance. @param element The element to add.
483 Creates a Function that uses the given Interner for value caching. @param interner Interner instance to use for caching. @return Function that uses the interner.
484 Converts an iterable to a string using its iterator.
485 Retrieves the single element from an iterable. @param iterable Iterable containing only one element. @return The single element, or null if empty.
486 Returns the only element from iterator or defaultValue if empty.
487 Concatenates two arrays of type T into a new array. @param first First array to concatenate. @param second Second array to concatenate. @param type Class of the array elements. @return A new array containing elements from both arrays.
488 Gets the last element of an iterable. Throws NoSuchElementException if the list is empty.
489 Returns the last element of the iterator, or defaultValue if empty. @param iterator Iterator to retrieve the last element from @param defaultValue Value to return if iterator is empty @return Last element or defaultValue
490 Returns an empty unmodifiable iterator. Returns an iterator that does not iterate over any elements.
491 Writes the object's state to the stream for serialization.
492 Adds a new node to the list. @param key key of the node @param value value of the node @param nextSibling node to insert before, or null @return the newly created node
493 Converts a CharSequence to a List of Characters. @param sequence CharSequence to convert @return List of Characters from the sequence
494 Finds the index of the element in the list. Returns -1 if the element is not found.
495 Finds the last index of an element in a list. @param list list to search @param element element to find @return last index or -1 if not found
496 Checks for the next entry in the table, advancing if found. Returns true if a next entry is found, false otherwise.
497 Expands the table to double its capacity if not at maximum. Reclassifies nodes to new indices based on power-of-two expansion.
498 Attempts to drain reference queues safely using a lock.
499 Checks if an entry is live for testing purposes. @param entry The entry to check. @return True if the entry is live, false otherwise.
500 Creates a new identity hash set. Uses an identity hash map internally.
501 Returns a synchronized BiMap. @param bimap The BiMap to synchronize. @return A synchronized BiMap.
502 Performs crossover operation, potentially swapping with parent. @param index current index, E x element to be placed @return index of the element after crossover
503 Swaps last element with a suitable element in the heap. @param actualLastElement The element to be swapped. @return Index of the swapped element, or size if no swap.
504 Advances nextCursor to c, skipping elements matching skipMe.
505 Creates an iterator for the multiset. @param multiset The multiset to iterate over. @return An iterator for the multiset's entries.
506 Creates a new array of the same type as the reference array. @param reference Array to determine the type. @param length Desired length of the new array. @return New array of the specified length.
507 Converts a collection to an array. @param c Collection to convert. @return Array representation of the collection.
508 Finds the minimum element from the iterator. @param iterator Iterator providing elements to compare. @return Minimum element found in the iterator.
509 Finds the maximum element from the given iterator. @param iterator Iterator providing elements of type E. @return The maximum element found in the iterator.
510 Finds the smallest and largest values in an iterable. @param values Iterable of comparable values. @return Range containing the min and max values.
511 Returns a new ConcurrentHashSet. Uses Platform.newConcurrentHashSet().
512 Returns a string representation of the object. Delegates to toString(lowerBound, upperBound).
513 Returns the lower endpoint of the range. Returns the endpoint object of the lower bound.
514 Returns the upper endpoint of the range. @return The upper endpoint as a C object.
515 Checks for conflicts in a value bucket, throwing exception if overflow.
516 Removes duplicate entries from an array. @param entries Input array, n size, newN new size, duplicates map @return New array with duplicates removed.
517 Checks for key conflicts in a bucket. Throws exception or returns entry if duplicate.
518 Creates a collector for ImmutableSet of enum values. Delegates to CollectCollectors.toImmutableEnumSet().
519 Returns a complement of the given collection of enum constants. @param collection Collection of enum constants. @return An EnumSet containing the complement.
520 Returns the complement of a given enum collection. @param collection The enum collection to complement. @param type The enum type. @return The complement of the collection.
521 Finds the last element of an IntStream as an OptionalInt.
522 Finds the last element of a LongStream as an OptionalLong.
523 Finds the last element of a DoubleStream, boxed and returned. @param stream The DoubleStream to search. @return OptionalDouble containing the last element, or empty.
524 Partitions the buffer around a pivot element. @param left left index, right index, pivot index @return The new index of the pivot element.
525 Writes the object to an ObjectOutputStream. Serializes comparator and multimap data.
526 Default constructor for CharEscaper. Protected and prevents instantiation.
527 Default constructor for UnicodeEscaper.
528 Escapes characters in a string, replacing them with their escapes. @param s The string to escape. @param index The starting index for escaping. @return The escaped string.
529 Escapes a character using the provided CharEscaper. @param escaper CharEscaper to use for escaping @param c character to escape @return Escaped string or null if escaping fails.
530 Escapes a Unicode character and returns the result as a string.
531 Validates endpoint pair, ensuring it's not null and ordering is compatible.
532 Advances to the next node in the traversal. Returns true if successful, false otherwise.
533 Creates an EndpointPair based on graph direction. @param graph The graph to use. @param nodeU The first node. @param nodeV The second node.
534 Creates an EndpointPair based on network direction. @param network The network. @param nodeU, nodeV Nodes.
535 Returns a set of edges in the graph. Returns an unmodifiable set.
536 Returns a set of edges in the graph. Returns an unmodifiable set.
537 Validates that the provided endpoints are compatible. @param endpoints The endpoint pair to validate.
538 Returns an unmodifiable iterator over the nodes. Uses Iterators.forArray to create the iterator.
539 Sets the node order for the graph. @param nodeOrder ElementOrder object defining the node order. @return GraphBuilder with the specified node order.
540 Sets the incident edge order. Supports UNORDERED or STABLE types. @param incidentEdgeOrder ElementOrder object specifying order. @return GraphBuilder with the specified incident edge order.
541 Returns the transpose of the given graph. Returns the original graph if undirected.
542 Transposes a directed network. Returns the original if undirected.
543 Returns the transpose of the given directed graph. Returns the graph itself if undirected.
544 Sets the node order for the network builder. @param nodeOrder The desired order of nodes. @return The updated network builder.
545 Sets the edge order strategy for the network builder. @param edgeOrder The element order strategy to use. @return The updated network builder.
546 Sets the order in which nodes are added to the graph. @param nodeOrder ElementOrder object defining the node order. @return ValueGraphBuilder with the specified node order.
547 Sets the incident edge order. Supports UNORDERED and STABLE types. @param incidentEdgeOrder Order of incident edges. @return ValueGraphBuilder with the specified incident edge order.
548 Updates the internal state using the provided byte array. @param b The byte array containing the update data.
549 Updates the object's state based on the provided ByteBuffer.
550 Updates the hasher with the given bytes and clears the scratch buffer. @param bytes number of bytes to update with @return this Hasher object
551 Processes remaining bytes in ByteBuffer, padding with longs. @param bb ByteBuffer containing the remaining data to process.
552 Applies the function to the input and returns the result. @param input The input value to be processed. @return True if the input contains a match, false otherwise.
553 Creates a Bloom filter collector. @param funnel Funnel for elements, expected insertions, fpp. @return Bloom filter collector.
554 Returns the bit size of the underlying bit array.
555 Casts a long to a byte, handling saturation at max/min values.
556 Compares two bytes as unsigned integers. @param a The first byte. @param b The second byte. @return Difference between a and b as unsigned ints.
557 Converts a byte to a string representation in the given radix. @param x The byte to convert. @param radix The radix (base) to use (2-36).
558 Copies all bits from another LockFreeBitArray. @param other The LockFreeBitArray to copy from.
559 Sets the bit at the given index to 1. Returns true if successful. @param bitIndex Index of the bit to set (must be within range).
560 Calculates the hash code for this object. Uses first 4 bytes if available.
561 Converts byte array to a hexadecimal string representation.
562 Converts a byte array to a long value. @param bytes byte array containing the long's bytes @return long value represented by the byte array
563 Calculates a 64-bit hash using seeds and byte array segments. @param bytes Input byte array. @param offset Starting offset in the byte array.
564 Calculates a 64-bit hash using seeds and byte array segments. @param bytes Input byte array. @param offset Starting offset in the byte array. @param seedA Initial seed A. @param seedB Initial seed B. @param output Output array to store the 64-bit hash values.
565 Returns the long value of this BigInteger. @return The long value of the BigInteger.
566 Divides two integers and returns the quotient as an integer.
567 Calculates the remainder of a division. @param dividend The number to be divided. @param divisor The divisor. @return The remainder of the division.
568 Creates a Murmur3_32 hash function with the given seed. @param seed integer seed value for the hash function.
569 Creates a Murmur3_32HashFunction with a fixed supplementary plane fix. @param seed The seed value for the hash function. @return A Murmur3_32HashFunction instance.
570 Creates a Murmur3_128 hash function with the given seed. @param seed Integer seed value for the hash function.
571 Calculates a consistent hash bucket index based on input. @param input Input value for hashing. @param buckets Number of buckets for consistent hashing. @return Bucket index (0 to buckets-1).
572 Converts a byte array to an integer. @param bytes byte array to convert; must be at least BYTES long. @return int value represented by the byte array.
573 Copies data from an InputStream to an OutputStream. @param from Source InputStream @param to Destination OutputStream @return Total number of bytes copied
574 Reads and discards all bytes from an InputStream. @param in The input stream to exhaust. @return Total number of bytes read.
575 Reads bytes from an input stream and processes them. @param input Input stream to read from. @param processor Processor for handling the read bytes. @return Result of the byte processing.
576 Creates a new ByteArrayDataInput from the given ByteArrayInputStream. @param byteArrayInputStream The input stream to wrap. @return A new ByteArrayDataInput.
577 Creates a new ByteArrayDataOutput from a ByteArrayOutputStream. @param byteArrayOutputStream The ByteArrayOutputStream to wrap. @return A new ByteArrayDataOutput.
578 Creates a ReaderInputStream, reading from a Reader and encoding to bytes. @param reader Reader to read from @param encoder CharsetEncoder for byte conversion @param bufferSize Initial buffer size
579 Starts draining the byte buffer. Resizes if overflow occurs.
580 Copies data from a ReadableByteChannel to a WritableByteChannel. Returns the number of bytes copied.
581 Reads the next line from the reader. @return The next line as a String, or null if EOF.
582 Skips up to n bytes from the input stream. Returns the skipped bytes.
583 Returns a stream of lines from this reader. Closes the reader when the stream is closed.
584 Reads all bytes from a readable and returns the total count. @param readable The readable to exhaust. @return Total number of bytes read.
585 Initializes a LineReader with a provided Readable object. @param readable The Readable object to read from.
586 Closes an InputStream, ignoring any potential IOException. @param inputStream The InputStream to close, or null.
587 Closes a Reader, ignoring any potential IOException. @param reader The Reader to close, or null if nothing to do.
588 Transfers data to file if memory threshold is exceeded. @param len Number of bytes to be written. @throws IOException if an I/O error occurs.
589 Resets the output stream, closing it and reinitializing memory.
590 Creates a CharSource from a File using the given Charset. @param file The file to read. @param charset The character encoding to use.
591 Flushes the given {@link Flushable} quietly, logging errors.
592 Verifies insecure delete is allowed. Throws exception if ALLOW_INSECURE option is not present.
593 Doubles the capacity of a CharBuffer. @param buf The CharBuffer to grow. @return A new CharBuffer with doubled capacity.
594 Adds a portion of a character array to the current line buffer. @param cbuf char array to add @param off start index @param len number of characters to add
595 Finishes the current line if necessary. Handles cases where a return was seen or line has content.
596 Reads an unsigned short (2 bytes) from the input stream.
597 Reads the next four bytes from the stream and interprets them as an int.
598 Reads the next long value from the input stream. Reads 8 bytes and converts them to a long.
599 Writes a character (as an int) to the output stream. Delegates to the writeShort method.
600 Writes a float to the output stream as an integer.
601 Writes a long value to the output stream, reversing byte order.
602 Recursively deletes a directory, handling exceptions. @param path Path to the directory to delete. @return Collection of IOExceptions encountered, or null.
603 Deletes directory contents securely, returning IOExceptions. @param dir SecureDirectoryStream to delete from @return Collection of IOExceptions during deletion
604 Advances to the next resource. Closes current, opens next.
605 Advances to the next resource, closing the previous one. Updates 'current' with the new stream if available.
606 Creates a CharSource from a URL using the given charset. @param url The URL to read. @param charset The charset to use for decoding.
607 Divides p by q with specified rounding mode. @param p dividend @param q divisor @param mode rounding mode @return quotient
608 Calculates factorial of n. Returns Infinity if n is too large.
609 Calculates b raised to the power of k. @param b base number @param k exponent (non-negative) @return b^k
610 Calculates the greatest common divisor of two non-negative integers. @param a first non-negative integer @param b second non-negative integer @return the GCD of a and b
611 Calculates factorial using precomputed values. @param n Non-negative integer for factorial calculation. @return Factorial of n, or Integer.MAX_VALUE if out of range.
612 Calculates binomial coefficient (n choose k). @param n non-negative integer @param k non-negative integer, k <= n @return binomial coefficient as int, MAX_VALUE if overflow
613 Calculates b raised to the power of k. @param b base number @param k exponent, must be non-negative @return b^k as a long
614 Calculates factorial of n. Returns Long.MAX_VALUE if n is too large.
615 Creates a LinearTransformationBuilder with given x and y mapping values.
616 Checks if two doubles are approximately equal within a tolerance. @param a first double @param b second double @param tolerance max difference for equality @return true if doubles are approximately equal
617 Rounds a value to the nearest representable double, using mode. @param x value to round @param mode rounding mode
618 Returns the smallest power of 2 >= x. @param x The input integer. @throws ArithmeticException if x is too large.
619 Returns the highest power of 2 less than or equal to x. @param x The input integer. @return The highest power of 2.
620 Calculates the base-2 logarithm of an integer with rounding. @param x The integer to calculate the logarithm of. @param mode The rounding mode to use. @return The base-2 logarithm of x.
621 Calculates the integer square root of x with specified rounding. @param x non-negative number @param mode rounding mode @return integer square root of x
622 Adds two integers, throwing an ArithmeticException on overflow. @param a first integer @param b second integer @return sum of a and b
623 Subtracts two integers, throwing an ArithmeticException on overflow. @param a The minuend. @param b The subtrahend. @return The result of a - b.
624 Multiplies two integers, throwing an exception on overflow. @param a first integer @param b second integer @return product of a and b
625 Tests if n is a witness to the compositeness of base. @param base base value @param n number to test @return true if n is a witness, false otherwise
626 Returns the smallest power of 2 >= x. @param x The input value, must be positive. @return The ceiling power of 2 for x.
627 Returns the highest power of 2 less than or equal to x. @param x The input value, must be positive. @return The floor power of 2.
628 Calculates the base-2 logarithm of a long value with rounding. @param x The long value to calculate the logarithm of. @param mode The rounding mode to use. @return The base-2 logarithm of x.
629 Calculates the greatest common divisor of two non-negative longs. @param a first non-negative long @param b second non-negative long @return the GCD of a and b
630 Calculates the modulo of a long x by an integer m. @param x The long number to calculate the modulo of. @param m The integer divisor. @return The remainder of x divided by m.
631 Adds two longs, throwing an ArithmeticException on overflow. @param a the first long @param b the second long @return the sum of a and b
632 Subtracts two longs, throwing an exception on overflow. @param a The minuend. @param b The subtrahend. @return The result of a - b.
633 Multiplies two longs and returns the exact product. @param a The first long. @param b The second long. @return The product of a and b.
634 Returns the count of items from the underlying statistics.
635 Checks if two PairedStats objects are equal. Compares xStats, yStats, and sumOfProductsOfDeltas.
636 Constructs a new PairedStatsAccumulator object.
637 Calculates the new mean, handling non-finite values correctly. @param previousMean Previous mean value. @param value New value to incorporate. @return New mean, NaN if infinities differ.
638 Returns the count from the underlying xStats object.
639 Returns a ScaleAndIndex representing the median. Uses scale 2 and index 1 to define the median.
640 Calculates the quartile scale (4 divisions). @return A Scale object representing the quartiles.
641 Returns a scale representing percentiles (scale of 100).
642 Moves the pivot element to the start of the slice. @param array The array to modify. @param from Start index of the slice. @param to End index of the slice (exclusive).
643 Reads a Stats object from the given ByteBuffer. @param buffer ByteBuffer to read stats from. @return A Stats object constructed from the buffer.
644 Creates a snapshot of the current statistics. @return A Stats object containing the current stats.
645 Returns the port number. @return The port number, after verifying it's set.
646 Returns the configured port or the default if not configured. @param defaultPort The default port to use if no port is set. @return The configured port number.
647 Returns a string representation of the object. Includes host and port, enclosed in brackets if host contains ':'.
648 Sets the port to the default port if one isn't already set. @param defaultPort The default port to use. @return A new HostAndPort object.
649 Converts an InetAddress to a formatted string representation. Handles IPv4 and IPv6 addresses differently.
650 Checks if an IPv6 address is an ISATAP address. Returns true if it is, false otherwise.
651 Checks if an Inet6Address represents an embedded IPv4 client address.
652 Converts a Collection<Boolean> to a boolean array. Handles BooleanArrayAsList for efficiency.
653 Finds the first index of target boolean in the array. @param array array to search @param target value to find @return index of target or -1 if not found
654 Finds the last occurrence of a boolean value in an array. @param array The array to search. @param target The value to search for.
655 Converts a collection of Numbers to a byte array. Handles ByteArrayAsList for optimized conversion.
656 Finds the first index of target in array. @param array byte array to search @param target byte value to find @return Index of target or -1 if not found
657 Finds the last occurrence of a byte in a byte array. @param array The byte array to search. @param target The byte to search for. @return The last index of the byte, or -1 if not found.
658 Converts a collection of Characters to a char array. Returns a char array representation of the collection.
659 Finds the first index of target in array. @param array char array to search @param target char to find @return Index of target or -1 if not found
660 Finds the last occurrence of a char in a char array. @param array char array to search @param target char to find @return Last index of target or -1 if not found.
661 Extracts a char from the first two bytes of a byte array. @param bytes byte array containing char data @return char value from the array
662 Calculates the hash code for the array elements. Uses start/end indices and Double.hashCode for calculation.
663 Converts a collection of Numbers to a double array. Handles DoubleArrayAsList for efficiency.
664 Finds the index of the first occurrence of target in array. @param array Array to search. @param target Value to search for. @return Index of target, or -1 if not found.
665 Finds the last occurrence of target in array. @param array array to search @param target value to search for @return last index or -1 if not found
666 Converts a collection of Numbers to a float array. @param collection Collection of Number objects @return float array representation of the collection
667 Finds the index of the first occurrence of target in array. @param array array to search @param target value to search for @return index of target or -1 if not found
668 Finds the last index of a target value in a float array. @param array The array to search. @param target The value to search for.
669 Creates a new Builder with the specified initial capacity. @param initialCapacity The initial capacity of the builder.
670 Returns a new builder instance with an initial capacity of 10.
671 Finds the index of the target double within the array. @param target The double value to search for. @return Index of target or -1 if not found.
672 Finds the last occurrence of target in the array. @param target The value to search for. @return Index of last occurrence, or -1 if not found.
673 Returns a string representation of the array. Returns "[]" if empty. Uses StringBuilder for efficiency.
674 Checks if the set contains the target element. @param target the element to search for @return true if found, false otherwise
675 Creates a new Builder with the specified initial capacity. @param initialCapacity The initial capacity of the builder.
676 Returns a new builder instance with an initial capacity of 10.
677 Calculates the hash code for the array segment. Uses start/end indices and Integer.hashCode() for calculation.
678 Returns a string representation of the array. Returns "[]" if empty; otherwise, returns a comma-separated string.
679 Checks if the set contains the target element. @param target The element to search for. @return True if the element is present, false otherwise.
680 Creates a new Builder with the specified initial capacity. @param initialCapacity The initial size of the builder.
681 Returns a new builder instance, initialized with a capacity of 10.
682 Calculates the hash code for the array segment. Uses a prime number to generate the hash.
683 Returns a string representation of the array. Returns "[]" if empty, otherwise formats elements.
684 Converts a collection of Numbers to an int array. @param collection Collection of Number objects @return int array representation of the collection
685 Finds the index of the target element in the array. @param array The array to search. @param target The value to search for. @return Index of target, or -1 if not found.
686 Finds the last index of target in array. @param array array to search @param target value to search for @return last index or -1 if not found
687 Converts a collection of Numbers to a long array. @param collection Collection of Number objects @return long array representation of the collection
688 Finds the first index of target in array. @param array array to search @param target value to search for @return index of target or -1 if not found
689 Finds the last occurrence of a long value in a long array. @param array The array to search. @param target The value to search for.
690 Parses a string to a Long in the given radix. Returns null if invalid.
691 Converts a collection of Numbers to a short array. Handles ShortArrayAsList for efficiency.
692 Finds the index of the first occurrence of target in array. @param array array to search @param target value to search for @return index of target or -1 if not found
693 Finds the last occurrence of a short value in a short array. @param array The array to search. @param target The value to search for.
694 Converts a byte array to a short. @param bytes byte array containing short representation @return short value from the byte array
695 Returns a comparator for byte arrays, using UnsafeComparator if available.
696 Creates an UnsignedInteger from the given integer bits.
697 Converts the integer value to a string in the given radix. @param radix The base to use for conversion (e.g., 2 for binary).
698 Converts an integer to its string representation. @param x the integer to convert @return the string representation of the integer
699 Compares two integers using a flipped comparison. @param a the first integer @param b the second integer @return -1, 0, or 1 based on the comparison.
700 Creates an UnsignedLong from the given long bit representation.
701 Compares two longs using flipped values. @param a The first long to compare. @param b The second long to compare. @return The comparison result.
702 Parses a string as an unsigned long in the given radix. @param string String to parse. @param radix Radix of the number. @return The unsigned long value.
703 Invokes a method on the proxy, handling hashCode, equals, toString. @param proxy The proxy instance. @param method The invoked method. @param args Method arguments. @return Method return value or result of handleInvocation.
704 Gets the package name for the given class name. @return Package name as a String.
705 Gets the package name of a class. @param clazz Class object to get package name from @return Package name as a String
706 Returns a ByteSource for reading data from this URL.
707 Checks if the method is public. @return True if public, false otherwise.
708 Checks if the method is protected. @return True if protected, false otherwise.
709 Checks if the member is private. @return True if private, false otherwise.
710 Checks if the method is static. @return True if the method is static, false otherwise.
711 Checks if the method is final. @return True if final, false otherwise.
712 Checks if the method is abstract. Returns true if abstract, false otherwise.
713 Checks if the method is native. @return True if native, false otherwise.
714 Checks if method is synchronized. Returns true if synchronized, false otherwise.
715 Checks if the method is volatile. @return True if volatile, false otherwise.
716 Checks if the member is transient. @return True if transient, false otherwise.
717 Checks if the given type is equal to this type. @param type The type to compare with. @return True if types are equal, false otherwise.
718 Creates a TypeToken for the given class. @param type The class to create a TypeToken for. @return A TypeToken representing the given class.
719 Creates a TypeToken from a given Type. @param type The Type to create a TypeToken for. @return A TypeToken representing the given Type.
720 Retrieves the done value from an object, handling cancellation/failure. @param obj The object to extract the value from. @return The done value or throws an exception if cancelled/failed.
721 Adds a listener to be executed when the future is complete. @param listener Runnable to execute @param executor Executor for listener execution
722 Cancels a related future if this future is cancelled. @param related The future to potentially cancel.
723 Submits a Callable task and returns a ListenableFuture.
724 Schedules a task for execution and returns a Cancellable object. @param service The service to be scheduled. @param executor Executor for scheduling. @param runnable Task to execute.
725 Schedules a task for execution and returns a Cancellable object. @param service The service to associate with the task. @param executor Executor for scheduling. @param runnable Task to be executed.
726 Executes multiple Callable tasks in parallel with a timeout. @param tasks Collection of Callable tasks to execute. @param timeout Timeout duration for task execution. @return List of Futures representing the task results.
727 Executes tasks from collection and returns result of first completed. @param tasks Collection of Callable tasks. @param timeout Timeout duration for task execution. @return Result of the first completed task. @throws InterruptedException, ExecutionException, TimeoutException
728 Awaits termination for a specified duration. @param timeout The maximum time to wait. @return True if terminated, false otherwise.
729 Schedules a Callable to run after a delay. @param callable The Callable to execute. @param delay Duration of the delay. @return ListenableScheduledFuture object.
730 Schedules a task to run repeatedly with a fixed period. @param command Runnable to execute @param initialDelay Initial delay before first execution @param period Period between repeated executions @return ListenableScheduledFuture for the scheduled task
731 Schedules a task with a fixed delay between executions. @param command Runnable to execute @param initialDelay Initial delay before first execution @param delay Delay between subsequent executions @return ListenableScheduledFuture for the scheduled task
732 Awaits running state, timing out after the specified duration. @param timeout Duration to wait; throws TimeoutException if exceeded.
733 Awaits termination with a timeout. @param timeout Duration to wait; throws TimeoutException if exceeded.
734 Creates a proxy for the given target object, using the given timeout. @param target The target object to proxy. @param interfaceType The interface type of the proxy. @param timeout Timeout duration for the proxy. @return The created proxy object.
735 Executes a Callable with a timeout. @param callable Callable to execute. @param timeout Timeout duration. @return Result of the Callable, or throws TimeoutException.
736 Executes a Callable with a timeout, returning the result. @param callable Callable to execute. @param timeout Duration timeout value. @return Result of the Callable. @throws TimeoutException, ExecutionException
737 Runs a runnable with a timeout. @param runnable The task to execute. @param timeout The maximum duration to wait. @throws TimeoutException, InterruptedException
738 Runs a Runnable until completion or timeout. @param runnable Runnable to execute. @param timeout Timeout duration. @throws TimeoutException if the task exceeds the timeout.
739 Creates a single-thread ScheduledExecutorService with a custom thread factory. Returns the created executor.
740 Handles an exception, logging it if new or part of all-or-nothing. @param throwable The exception to handle.
741 Returns a string representation of the double value.
742 Returns the integer value of this BigInteger. @return The integer value.
743 Returns the long value of this BigInteger. @return The long value.
744 Returns the value of this BigDecimal as a float. Returns the value as a single-precision floating-point number.
745 Returns the double value represented by this object.
746 Writes object to stream. Serializes default fields and the 'get()' value.
747 Reads object state from an ObjectInputStream. Reads a double from the stream and sets the object's value.
748 Applies accumulatorFunction to current value and x, returns result. @param x The value to apply with the accumulator. @param accumulatorFunction Applies function to the current value and x.
749 Applies accumulatorFunction to the current value and returns the result. @param x The value to apply to the accumulator.
750 Returns a string representation of the double array. Uses longs for storage, formats each double with commas.
751 Writes the object's data to the output stream for serialization.
752 Applies accumulatorFunction to the current value and returns the result. @param i index, x value to apply, accumulatorFunction function
753 Accumulates value 'x' using the accumulator function. @param i index, accumulator function is applied at this index. @param x value to accumulate. @return Result of applying accumulator function.
754 Removes the entry with the given key if its value is zero. @param key the key of the entry to remove @return true if an entry was removed, false otherwise
755 Returns a map representing the counts of each element. Uses a cached map if available, otherwise creates a new one.
756 Replaces the entry for key only if current value matches expected. @param key key of entry to replace @param expectedOldValue expected old value @param newValue new value if found @return true if the replacement was successful
757 Completes the current step and transitions to a Future. Throws exception if called twice or in an invalid state.
758 Completes the future, providing a value and closer via consumer. @param consumer Consumes the value and closer. @param executor Executor for the listener.
759 Adds a runnable to be executed by the executor. Executes immediately if execution has started.
760 Executes registered listeners, reversing their execution order.
761 Catches exceptions of a specific type and applies a fallback function. @param exceptionType Exception type to catch. @param fallback Fallback function to execute on exception. @param executor Executor for the fallback function. @return A FluentFuture that executes the fallback on exception.
762 Transforms the future asynchronously using the given function. @param function Async function to transform the value. @param executor Executor for the async function. @return A new FluentFuture containing the transformed value.
763 Creates a ListenableFuture that fulfills with the given value or null. @param value The value to set on the future, or null. @return A ListenableFuture fulfilled with the given value.
764 Creates a failed future immediately with the given throwable. @param throwable The exception to be wrapped in the future. @return A ListenableFuture that fails immediately.
765 Creates a cancelled ListenableFuture. Returns instance or new one.
766 Retrieves the best validator for checked types, or a fallback. Returns the validator or a weak fallback on failure.
767 Dispatches event to each listener in the list.
768 Default constructor. Initializes Monitor with default settings.
769 Attempts to enter, interrupting if the given duration elapses. @param time The maximum time to wait, in Duration. @return True if entered successfully, false if interrupted.
770 Attempts to enter the guard interruptibly within the given duration. @param guard the guard to enter @param time the maximum time to wait @return true if entered, false otherwise
771 Checks if a guard has waiters in its queue. @param guard The guard to check. @return True if the guard has waiters, false otherwise.
772 Checks if a guard is satisfied, re-signals waiters on error. @param guard The guard to check. @return True if satisfied, throws exception on failure.
773 Shuts down the executor service and waits for termination. @param service ExecutorService to shut down @param timeout Duration to wait for termination @return True if terminated, false otherwise.
774 Sleeps for the specified duration, blocking even with interrupts. @param sleepFor The duration to sleep for.
775 Sets the rate at which permits are issued. @param permitsPerSecond The new rate (must be positive).
776 Gets the rate, synchronizing access to prevent race conditions.
777 Creates a new SettableFuture. Returns a SettableFuture instance.
778 Gets the future's value uninterruptibly within a Duration. @param future Future to retrieve value from. @param timeout Duration to wait, may saturate. @return Future's value or throws exception if timeout.
779 Creates a striped read-write lock with lazy initialization. @param stripes number of stripes for the lock @return Striped object with lazy weak read-write locks
780 Creates a Striped lock with the specified number of stripes. @param stripes Number of lock stripes. @return Striped lock instance.
781 Creates a Striped semaphore with specified stripes and permits.
782 Creates a Striped read-write lock with the specified number of stripes. @param stripes number of stripes for the lock @return Striped<ReadWriteLock> object
783 Builds a ThreadFactory instance using the builder pattern. @return A ThreadFactory object.
784 Creates a TrustedListenableFutureTask with the given runnable and result.
785 Awaits latch closure, uninterruptibly, with a timeout in Duration.
786 Awaits condition with timeout. @param condition Condition to wait on. @param timeout Timeout duration. Returns true if timeout reached.
787 Attempts to acquire a permit from semaphore without interruption. @param semaphore Semaphore to acquire from @param timeout Timeout duration @param unit Time unit for the timeout @return True if acquired, false otherwise.
788 Attempts to acquire permits from a semaphore without interruption. @param semaphore Semaphore to acquire permits from. @param permits Number of permits to acquire. @param timeout Timeout duration for acquiring permits. @return True if permits were acquired, false otherwise.
789 Attempts to acquire a lock uninterruptibly within a duration. @param lock The lock to acquire. @param timeout The maximum time to wait, in duration units. @return True if the lock was acquired, false otherwise.
790 Awaits executor termination, uninterruptibly, with a timeout. @param executor ExecutorService to await termination. @param timeout Duration to wait; returns false if timeout expires.
791 Returns the PublicSuffixType matching the given code. @param code The character code to match. @throws IllegalArgumentException if no match is found.
792 Creates an Optional containing the given non-null reference. @param reference The reference to be wrapped in an Optional. @return An Optional containing the reference.
793 Creates a new, unstarted Stopwatch instance with the given Ticker.
794 Finds the first index of an element matching the predicate. @param iterable Iterable to search. @param predicate Predicate to test each element. @return Index of the first match, or -1 if none found.
795 Checks if any element in the iterator satisfies the predicate. @param iterator Iterator of elements to check. @param predicate Predicate to test each element. @return True if any element matches, false otherwise.
796 Creates a SortedSetMultimapBuilder with natural ordering for values. @return SortedSetMultimapBuilder instance
797 Creates an ImmutableTable from a stream of objects. @param rowFunction Extracts row key from object. @param columnFunction Extracts column key. @param valueFunction Extracts value. @param mergeFunction Merges values for same row/column.
798 Creates a predicate equivalent to the target object. @param target The object to be compared for equivalence. @return A Predicate checking for equivalence to target.
799 Creates a Function that transforms keys to values from the map. @param map Source map. @param defaultValue Default value if key is not found. @return Function mapping keys to values.
800 Composes two functions: g and f. Returns a new Function<A, C>.
801 Creates a Function from a Map. @param map The map to create the function from. @return A Function that maps keys to values in the map.
802 Creates a Splitter using the provided Pattern. @param separatorPattern The regex pattern to split by. @return A Splitter instance.
803 Creates a Joiner instance with the specified separator. @param separator Separator string used to join elements. @return A Joiner instance.
804 Creates a Joiner instance using the given character as a separator.
805 Configures null value handling for the joiner. @param nullText String to use as replacement for null values @return A new MapJoiner with configured null handling.
806 Creates a Splitter that splits on the provided regex pattern. @param separatorPattern The regex pattern to split on. @return A Splitter instance.
807 Returns a predicate that matches char sequences containing the pattern. @param pattern Regex pattern to match. @return Predicate that checks for pattern presence.
808 Returns a predicate that negates the given predicate. @param predicate Predicate to be negated. @return Negated predicate.
809 Combines multiple predicates into an AND predicate. @param components Predicates to combine; returns new AND predicate.
810 Combines multiple predicates with a logical OR operation. @param components Predicates to combine; returns a new combined predicate.
811 Splits a CharSequence into key-value pairs and returns a map.
812 Splits a CharSequence into a stream of strings. @param sequence The CharSequence to split. @return A Stream of strings from the sequence.
813 Memoizes a supplier, caching its result. Returns delegate if already memoized.
814 Composes a Supplier from a Function and a Supplier. @param function Function to apply to the Supplier's result. @param supplier Supplier providing the input to the Function. @return New Supplier applying the Function to the Supplier's value.
815 Wraps a supplier to make it thread-safe. @param delegate The supplier to wrap. @return A thread-safe supplier.
816 Re-throws the throwable if it's an instance of declaredType. @param throwable The throwable to check. Null if no-op. @param declaredType The class to check against.
817 Propagates the given throwable if it's an unchecked exception. @param throwable The exception to potentially propagate.
818 Propagates a Throwable as a RuntimeException after checking. @param throwable The exception to propagate. @return A RuntimeException wrapping the original Throwable.
819 Returns a lazy stack trace for the given throwable. Uses jlaStackTrace if lazyStackTraceIsLazy() is true.
820 Creates a new reference entry within the appropriate segment. @param key The key for the entry. @param hash The hash code. @param next The next entry in the bucket. @return The newly created ReferenceEntry.
821 Creates a new RemovalNotification with the given key, value, and cause.
822 Creates a {@link Collector} that accumulates elements into a multiset. @param elementFunction Maps element to multiset element. @param countFunction Returns the count for each element. @param multisetSupplier Creates the multiset to store elements.
823 Creates a Multimap collector. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element. @param multimapSupplier Supplies the Multimap to collect into. @return Collector that populates the supplied Multimap.
824 Creates a collector that flattens a stream into a Multimap. @param keyFunction Extracts the key from each element. @param valueFunction Returns a stream of values for each element. @param multimapSupplier Provides a new Multimap instance. @return Collector to flatten stream to a Multimap.
825 Transforms a collection using a function. @param fromCollection Source collection. @param function Function to apply to each element. @return Transformed collection of type T.
826 Checks if an iterable contains a specific element. @param iterable Iterable to search. @param element Element to search for. @return True if the element is found, false otherwise.
827 Returns a view of the set containing elements less than toElement. @param toElement Element to end the set; exclusive if inclusive is false. @param inclusive Whether to include toElement in the returned set.
828 Returns a view of the set containing elements >= fromElement. @param fromElement The low endpoint of the returned set. @param inclusive Whether to include fromElement.
829 Adds an element to the queue if it can. @param e the element to add @return true if added, false otherwise.
830 Orders the keys using the provided comparator. @param keyComparator Comparator for ordering keys. @return This builder instance for chaining.
831 Orders keys using the provided comparator. @param keyComparator Comparator for ordering keys. @return This builder instance for chaining.
832 Orders values by the provided comparator. @param valueComparator Comparator for ordering values. @return This builder, for chaining.
833 Adds an element to the list and returns the builder. @param element The element to add. @return This builder instance for chaining.
834 Adds specified number of copies of an element to the builder. @param element Element to add. @param occurrences Number of copies to add. @return This builder instance.
835 Sets the count for a given element and returns the builder. @param element The element to set the count for. @param count The count to set.
836 Creates a collector for ImmutableSortedMultiset using a comparator. @param comparator Comparator to sort elements in the multiset.
837 Returns a view of the sorted set containing elements up to (but not including) toElement. @param toElement the element up to which the set is returned
838 Returns a sorted set containing elements from {@code fromElement} to the end. @param fromElement the lower bound (inclusive) of the returned set
839 Cycles the elements of the iterable infinitely. Returns a FluentIterable containing cycled elements.
840 Filters the iterable based on the provided predicate. @param predicate Predicate to apply for filtering elements. @return A new FluentIterable containing filtered elements.
841 Filters an iterable to contain only elements of a specific type. @param unfiltered Iterable to filter. @param desiredType Class of the desired type. @return Filtered iterable containing only elements of desiredType.
842 Transforms elements using the provided function. @param function Function to apply to each element. @return A new FluentIterable with transformed elements.
843 Returns a PeekingIterator from the given iterator. Creates a new one if the iterator isn't already a PeekingIterator.
844 Removes all elements from iterable or collection. @param removeFrom Iterable/Collection to remove from. @param elementsToRemove Elements to remove. Returns true if changed.
845 Removes elements from iterable if predicate is true. @param removeFrom Iterable to remove from. @param predicate Predicate to test elements. Returns true if removed.
846 Retains the elements of the specified collection in this collection. @param removeFrom Iterable from which elements are retained. @param elementsToRetain Collection of elements to retain. @return True if the collection was modified.
847 Adds all elements from the given collection to this collection. @param collection Collection to add elements from. @return True if all elements were added, false otherwise.
848 Adds all elements from the given iterable to the collection. @param addTo Collection to add elements to. @param elementsToAdd Iterable containing elements to add. @return True if the collection was modified.
849 Creates an ArrayList from an Iterator of elements. @param elements Iterator providing elements for the list @return New ArrayList containing elements from the iterator
850 Creates a HashSet from an iterator of elements. @param elements Iterator providing elements for the set. @return A HashSet containing elements from the iterator.
851 Filters an iterator to return only elements of the desired type. @param unfiltered Iterator to filter. @param desiredType Class of elements to keep. @return Filtered iterator of the desired type.
852 Checks if all elements in the iterable satisfy the predicate. @param iterable Iterable to check. @param predicate Predicate to apply to each element. @return True if all elements satisfy the predicate.
853 Finds the first element in the iterable that matches the predicate. @param iterable Iterable to search. @param predicate Predicate to apply to each element. @return Matching element or null if none found.
854 Removes all nodes associated with the given key. @param key The key whose nodes are to be removed.
855 Creates a list iterator for the given list, starting at the index. @param list the list to create the iterator for @param index the starting index for the iterator @return A ListIterator for the list.
856 Converts an array to a List. @param first First element of the array. @param rest Remaining elements of the array. @return A List containing all elements.
857 Transforms a list using a function. @param fromList List to transform. @param function Function to apply to each element. @return Transformed list.
858 Creates a list from the given first, second elements, and array.
859 Converts a set to a map using a function to map keys to values. @param set The set of keys. @param function Maps keys to values. @return A map containing the key-value pairs.
860 Adapts a NavigableSet to a NavigableMap using a function. @param set The set to adapt. @param function Function to map keys to values. @return A NavigableMap view.
861 Transforms a map's entries using a provided transformer. @param fromMap Source map. @param transformer Entry transformation logic. @return New map with transformed entries.
862 Checks if a collection contains an entry. @param c Collection of entries. @param o Entry to check for. @return True if the collection contains the entry.
863 Removes an entry from a collection if it's an Entry. @param c Collection to remove from. @param o Entry to remove. Returns true if removed.
864 Counts occurrences of an element. @param element The element to count. @return The count of the element, or 0 if not found.
865 Removes a specified number of occurrences of an element. @param element element to remove @param occurrences number of occurrences to remove @return true if successful, false otherwise
866 Sets the count for an element in the map. Returns the old count. @param element the element to set the count for @param count the new count to set
867 Atomically sets the count for an element if expectedOldCount matches. @param element the element to update @param expectedOldCount expected old count @param newCount new count to set @return true if successful, false otherwise
868 Removes values associated with the given key from the map. @param key The key whose values are to be removed.
869 Creates a MultimapBuilder with keys sorted naturally. Returns a MultimapBuilder instance.
870 Creates a SetMultimap from a given Map. @param map The Map to create the SetMultimap from. @return A new SetMultimap initialized with the Map's entries.
871 Transforms entries in a multimap using a provided transformer. @param fromMap The input multimap. @param transformer Transforms entries (K, V1) to (K, V2). @return A new multimap with transformed entries.
872 Adds all elements from the iterable to the builder. Handles Multiset specifically for efficient addition.
873 Adds all elements from another multiset to this multiset. @param elements Multiset to add elements from. @return True if any elements were added.
874 Retains occurrences present in the specified multiset. @param multisetToModify Multiset to be modified. @param multisetToRetain Multiset containing elements to retain. @return True if modified; false otherwise.
875 Removes occurrences from a multiset. @param multisetToModify Multiset to modify. @param occurrencesToRemove Elements to remove. @return True if the multiset was modified.
876 Retains elements present in the given collection. @param elementsToRetain Collection of elements to keep @return True if the multiset was modified, false otherwise.
877 Drains elements from a queue into a collection, with a timeout. @param q queue to drain from @param buffer collection to add elements to @param numElements max elements to drain @param timeout timeout duration @return number of elements drained @throws InterruptedException if interrupted while waiting
878 Drains elements from a queue to a collection, with a timeout. @param q queue to drain from @param buffer destination collection @param numElements max elements to drain @param timeout timeout duration @return number of elements drained
879 Applies the function to the input. @param input The input value to be processed. @return True if the input is contained, false otherwise.
880 Checks if this set contains all elements of the given collection. @param values collection of elements to check @return true if all elements are contained, false otherwise
881 Iterates through pairs of elements from two streams, applying consumer. Uses parallel streams if either input stream is parallel.
882 Creates a TableCollector from a stream of elements. @param rowFunction Maps element to row key. @param columnFunction Maps element to column key. @param valueFunction Maps element to value.
883 Transforms values in a table using a function. @param fromTable Source table. @param function Function to apply to each value. @return New table with transformed values.
884 Transposes a Table, swapping rows and columns. @param table The table to transpose. @return A transposed Table.
885 Creates an ArrayBasedEscaperMap from a map of character replacements. @param replacements Map of characters to their replacement strings. @return A new ArrayBasedEscaperMap instance.
886 Adds escapes for specified characters using the given replacement. @param cs characters to escape @param r replacement string for escaping @return this builder
887 Finds the index of the next character to escape. @param csq CharSequence to search. @param start Start index. @param end End index (exclusive). @return Index of the next character to escape.
888 Creates a SubscriberExceptionContext for the given event. @param event The event that triggered the exception. @return A SubscriberExceptionContext object.
889 Creates a sequential funnel that uses the provided element funnel. @param elementFunnel Funnel to use for individual elements. @return A new SequentialFunnel.
890 Creates an OutputStream from a PrimitiveSink. @param sink PrimitiveSink to wrap as an OutputStream @return OutputStream backed by the provided sink
891 Creates a StringCharsetFunnel for converting strings to bytes. @param charset Charset to use for the conversion. @return StringCharsetFunnel instance.
892 Returns a Writer, or wraps target if not a Writer. @param target Appendable to be wrapped as a Writer. @return A Writer instance.
893 Decodes a CharSequence, performing checked decoding. @param chars CharSequence to decode; returns byte array. @throws DecodingException if decoding fails.
894 Creates a new Closer instance with the default suppressor. @return A new Closer object.
895 Constructs a PatternFilenameFilter with a compiled pattern. @param patternStr Regular expression pattern string.
896 Calculates the base-2 logarithm of a BigInteger. @param x The BigInteger to calculate the logarithm of. @param mode The rounding mode to use. @return The base-2 logarithm of x.
897 Parses a string as an unsigned byte (base 10). @param string The string to parse. @return The unsigned byte value.
898 Parses a string as an unsigned integer (base 10). @param s The string to parse. @return The unsigned integer value of the string.
899 Creates a TypeVariableKey if 't' is a TypeVariable, else null.
900 Retrieves the future's value, handling Trusted, Failure, and Cancellation.
901 Creates a Schedule with the given duration. @param delay The duration for the schedule.
902 Creates and returns a new AtomicLongMap instance. Uses a ConcurrentHashMap for internal storage.
903 Accumulates value 'x' to the value associated with 'key'. @param key The key to update. @param x The value to accumulate. @return The new value after accumulation.
904 Accumulates value 'x' using the accumulatorFunction and returns result. @param key The key to operate on. @param x The value to accumulate.
905 Atomically sets the value associated with key to newValue. @param key the key to update @param newValue the new value to set @return the previous value associated with the key
906 Schedules an AutoCloseable resource for eventual closing. @param closeable Resource to close, may be null. @param closingExecutor Executor for closing the resource. @return The provided closeable object.
907 Creates a new CycleDetectingLockFactory with the given policy. @param policy The policy to use for cycle detection. @return A new CycleDetectingLockFactory instance.
908 Creates a sequential executor that runs tasks one at a time. @param delegate Executor to use for individual task execution. @return SequentialExecutor instance.
909 Creates a new SimpleTimeLimiter instance with the given executor. @param executor The executor service to use for time-limiting. @return A new SimpleTimeLimiter.
910 Waits for a thread to terminate, with a timeout. @param toJoin thread to wait for @param timeout duration to wait, may be interrupted
911 Creates an ElementOrder instance for unordered elements. Returns an ElementOrder object with UNORDERED type.
912 Creates a stable ElementOrder instance. Returns a new ElementOrder with stable sorting.
913 Creates an ElementOrder for insertion operations. Returns a new ElementOrder object with insertion type.
914 Returns an ElementOrder using natural ordering for the elements. @return An ElementOrder instance with natural ordering.
915 Creates a sorted element order using the provided comparator. @param comparator Comparator for sorting elements. @return ElementOrder instance with sorted type.
916 Returns a CountDownLatch to signal when closeables are closed.
917 Converts a CharSequence to lowercase. Handles String directly, otherwise converts each char.
918 Converts a CharSequence to uppercase. @param chars The CharSequence to convert. @return The uppercase string representation.
919 Converts stats data to a byte array in little-endian order.
920 Converts the data to a byte array using little-endian order. @return byte array representing the data.
921 Initializes the metadata with a constrained expected size. @param expectedSize The expected number of elements; must be >= 0.
922 Initializes the metadata with a constrained expected size. @param expectedSize The expected size, constrained to [1, MAX_SIZE].
923 Returns a new CharMatcher that combines this matcher with another.
924 Returns a CharMatcher based on the provided predicate. @param predicate Predicate to apply to each character.
925 Returns a new CharMatcher that combines this matcher with another.
926 Creates a CharMatcher that matches chars within the specified range. @param startInclusive start of the range (inclusive) @param endInclusive end of the range (inclusive)
927 Subtracts another CacheStats object from this one. Returns a new CacheStats with the differences.
928 Adds another CacheStats object to this one. @param other The CacheStats object to add. @return A new CacheStats object with combined stats.
929 Constructs a new AbstractListMultimap from a map. @param map the map to initialize with
930 Constructs a multimap from a map where values are collections.
931 Returns a view of the set between fromElement and toElement. @param fromElement start element (inclusive) @param toElement end element (inclusive) @return ContiguousSet view of the subset
932 Creates a new EnumMultiset for the given enum type. @param type The enum type for the multiset. @return A new EnumMultiset instance.
933 Returns a subset of elements from fromElement (inclusive) to toElement (exclusive).
934 Partitions an iterator into lists of the specified size. @param iterator Iterator to partition. @param size Size of each partition list. @return UnmodifiableIterator of List<T>.
935 Partitions an iterator into lists of a specified size, padded if needed. @param iterator Iterator to partition. @param size Partition size.
936 Sets the expected size of the collection. @param expectedSize The expected size of the collection. @return A Builder with the expected size set.
937 Creates a builder with a maximum size. @param maximumSize The maximum number of elements in the collection. @return A builder configured with the specified maximum size.
938 Constructs a StreamingHasher with equal chunk and window sizes. @param chunkSize The size of each chunk to process.
939 Calculates the population variance. Returns NaN if sumOfSquaresOfDeltas is NaN.
940 Calculates the sample variance. @return Sample variance, NaN if not computable.
941 Calculates the population variance. Returns NaN if sumOfSquaresOfDeltas is NaN.
942 Calculates the sample variance. Requires count > 1. Returns NaN if sumOfSquaresOfDeltas is NaN.
943 Creates a CharMatcher that matches any character in the sequence. @param sequence CharSequence containing characters to match. @return CharMatcher matching any character in the sequence.
944 Trims and collapses characters from a sequence. @param sequence CharSequence to process @param replacement char to replace trimmed chars @return Collapsed string or original if no trimming.
945 Creates an Equivalence based on a Function's result. @param function Function to apply; returns an Equivalence.
946 Returns a pairwise equivalence for iterables of type S. S must extend T; returns PairwiseEquivalence instance.
947 Checks if two iterables contain the same elements in order. @param iterable1 First iterable to compare. @param iterable2 Second iterable to compare. @return True if elements are equal, false otherwise.
948 Checks if two lists are equal. @param other The list to compare to. @return True if lists are equal, false otherwise.
949 Creates a new ConcurrentHashMultiset using a ConcurrentHashMap. @return A ConcurrentHashMultiset instance.
950 Creates a ConcurrentHashMultiset using the provided count map. @param countMap The ConcurrentMap to use for element counts. @return A ConcurrentHashMultiset initialized with the count map.
951 Appends an iterable of parts to an appendable. @param appendable target appendable @param parts iterable of parts to append @return the appendable after appending
952 Appends iterator parts to the given StringBuilder. @param builder StringBuilder to append to @param parts Iterator of parts to append @return The StringBuilder passed in.
953 Appends map entries to a StringBuilder. @param builder StringBuilder to append to @param map Map whose entries are appended @return StringBuilder with appended entries
954 Joins entries from an iterable into a string. @param entries Iterable of entries to join. @return A string representation of the entries.
955 Adds a value to the ToStringHelper. @param value The value to add, can be null. @return This ToStringHelper instance.
956 Adds a name-value pair to the helper. @param name Name of the property. @param value Value of the property, can be null. @return This {@link ToStringHelper} instance.
957 Adds a boolean value to the ToStringHelper. @param value The boolean value to add. @return The current ToStringHelper instance.
958 Adds a character value to the ToStringHelper. @param value The character to add. @return This ToStringHelper instance for chaining.
959 Adds a double value to the ToStringHelper. @param value The double value to add. @return This ToStringHelper instance.
960 Adds a float value to the ToStringHelper. @param value The float value to add. @return This ToStringHelper instance.
961 Adds an integer value to the ToStringHelper. @param value The integer value to add. @return This ToStringHelper instance.
962 Adds a long value to the ToStringHelper. @param value The long value to add. @return This ToStringHelper instance.
963 Adds a boolean value to the ToStringHelper. @param name Name of the boolean value. @return This ToStringHelper instance.
964 Adds a name-value pair to the ToStringHelper. @param name The name of the property. @param value The character value to add. @return This ToStringHelper instance.
965 Adds a name/value pair to the helper. @param name The name of the value. @param value The value to add as string. @return This helper instance for chaining.
966 Adds a name-value pair to the ToStringHelper. @param name Name of the property. @param value Value to add (converted to String). @return This ToStringHelper instance.
967 Adds a name-value pair to the ToStringHelper. @param name The name of the property. @param value The integer value to be converted to string. @return This ToStringHelper instance for chaining.
968 Adds a name/value pair to the helper. @param name The name of the value. @param value The value to add (converted to String). @return This ToStringHelper instance.
969 Creates an Optional from a nullable reference. @param nullableReference The reference to wrap in Optional. @return An Optional containing the value or empty if null.
970 Default constructor. Initializes the iterable delegate to absent.
971 Returns the size if known, otherwise returns empty Optional.
972 Returns an empty Optional, indicating length is unknown.
973 Converts an empty string to null, using Platform's implementation. @param string The string to check. Null is returned if null.
974 Parses a string representation of a host and port. @param hostPortString String in the format "host:port" or "host" @return HostAndPort object parsed from the input string
975 Skips a specified number of elements from the iterable. @param numberToSkip The number of elements to skip. @return A new FluentIterable skipping the specified elements.
976 Limits the iterable to the specified maximum size. @param maxSize The maximum number of elements to return. @return A new iterable with the limited size.
977 Retrieves element at position from iterable or defaultValue. @param iterable Source iterable. @param position Index of element to retrieve. @param defaultValue Value if position is out of bounds.
978 Retrieves the element at the specified position from an iterator. @param iterator Iterator to retrieve from. @param position Index of element to retrieve. @return Element at the specified position.
979 Retrieves element at position from iterator, or defaultValue. @param iterator Iterator to retrieve from. @param position Index of element to retrieve. @param defaultValue Value if element not found.
980 Creates a file traverser for the FILE_TREE. Returns a Traverser<File> object.
981 Wraps an InputStream to limit the number of bytes read. @param in The input stream to limit. @param limit The maximum number of bytes to read.
982 Creates an Inet4Address from a BigInteger representing an IPv4 address.
983 Creates an Inet6Address from a BigInteger representing IPv6 address.
984 Creates a SipHash-24 function with specified keys. @param k0 First 64-bit key. @param k1 Second 64-bit key. @return SipHash-24 function instance.
985 Creates a FileBackedOutputStream with default close behavior. @param fileThreshold Threshold size for writing to buffer.
986 Creates an Inet4Address from an integer representation. @param address Integer representing the IPv4 address. @return Inet4Address object.
987 Reserves a specified number of permits. @param permits The number of permits to reserve. @return The wait length associated with the reservation.
988 Attempts to acquire the specified number of permits within timeout. @param permits Number of permits to acquire. @param timeout Timeout in the given unit. @param unit Time unit for the timeout. @return True if permits were acquired, false otherwise.
989 Writes the object's state to an OutputStream in a specific format.
990 Creates a fixed-delay schedule with given initial and delay durations.
991 Creates a FixedRateSchedule with given initial delay and period. @param initialDelay Delay before first execution (Duration). @param period Period between executions (Duration).
992 Converts time to nanos, constrains range to prevent overflow.
993 Creates a new Stopwatch instance and immediately starts it. @param ticker The Ticker to use for timing. @return A started Stopwatch object.
994 Orders entries by value using the provided comparator. @param valueComparator Comparator for sorting values. @return This builder for chaining.
995 Sets the concurrency level for the map maker. @param concurrencyLevel The desired concurrency level. @return This builder instance for chaining.
996 Sets expiration after write, using the given Duration. @param duration The duration after which writes expire. @return This builder.
997 Sets expiration after last access, using the provided Duration. @param duration The duration after which to expire entries. @return This CacheBuilder for fluent configuration.
998 Sets the duration after which a write refresh is triggered. @param duration The duration after which to refresh. @return This builder.
999 Allows keys to be weakly referenced. Returns CacheBuilder for further configuration.
1000 Allows values in the cache to be weakly referenced. Returns the CacheBuilder for further configuration.
1001 Configures the cache values to be soft references. @return CacheBuilder instance for chaining.
1002 Configures the map to use weak keys. Returns the current MapMaker instance for chaining.
1003 Returns a MapMaker configured with weak values. Allows keys to survive garbage collection of values.
1004 Returns the failure cause of the snapshot. Returns the failure cause encapsulated in the snapshot.
1005 Checks if an index is within the valid element range [0, size). @param index Index to check. @param size Size of the element array.
1006 Checks if the index is a valid position within the size. @param index Index to check. @param size Size of the array/list.
1007 Validates position indexes. @param start start index @param end end index @param size array size
1008 Returns a predicate that checks if an object equals target. @param target The object to compare against. @return A predicate that checks for equality.
1009 Filters a multimap based on combined predicates. @param multimap Multimap to filter. @param entryPredicate Predicate for filtering entries. @return Filtered Multimap.
1010 Filters a Multiset based on the provided predicate. @param unfiltered The multiset to filter. @param predicate The predicate to apply to each element. @return A new filtered Multiset.
1011 Creates a Splitter using the provided CharMatcher as a separator. @param separatorMatcher CharMatcher to use for splitting the string. @return A Splitter instance.
1012 Creates a splitter that splits by a fixed length. @param length The length of each split. Must be positive. @return A Splitter object.
1013 Returns a splitter that trims whitespace from results.
1014 Creates a new, unstarted Stopwatch instance. Returns a new Stopwatch object.
1015 Creates a new {@link Stopwatch} instance and immediately starts it.
1016 Calculates the UTF-8 encoded length of a CharSequence. Returns the length or throws IllegalArgumentException on overflow.
1017 Awaits executor termination without interruption. @param executor ExecutorService to wait for termination.
1018 Continuously processes queue items until cleanup fails. Uses remove() on queue, breaks on failure, ignores InterruptedException.
1019 Default constructor for the Builder class.
1020 Creates a CacheLoader from a Function. @param function Function to load values. @return CacheLoader that uses the provided function.
1021 Creates a CacheLoader from a Supplier. @param supplier Provides values to be cached. @return A CacheLoader that uses the supplier.
1022 Throws an UnsupportedLoadingOperationException. No data loaded.
1023 Calculates the hit rate. Returns 1.0 if no requests.
1024 Calculates the miss rate based on request and miss counts. Returns 0.0 if no requests were made.
1025 Protected constructor for ForwardingLoadingCache.
1026 Protected constructor for ForwardingList. Prevents external instantiation.
1027 Default constructor for ForwardingMultiset. No-op.
1028 Protected constructor for ForwardingQueue, used for subclassing.
1029 Default constructor for ForwardingSet. No-op.
1030 Default constructor for ForwardingListIterator.
1031 Constructs a BiMap with provided backward and forward maps.
1032 Protected constructor for extending ForwardingConcurrentMap.
1033 Default constructor for ForwardingSortedMap. No-op.
1034 Constructs a new, empty MutableTypeToInstanceMap.
1035 Protected constructor for ForwardingListMultimap.
1036 Constructs a new ForwardingSetMultimap.
1037 Protected constructor for ForwardingListeningExecutorService.
1038 Default constructor for ForwardingListenableFuture.
1039 Creates a new reference entry for a given segment. @param segment Segment to add the entry to. @param key Key for the entry. @param hash Hash code for the key. @param next Next entry in the chain.
1040 Creates a new entry for a segment. @param segment The segment to add to. @param key The key. @param hash The hash. @param next Next entry.
1041 Retrieves the result from the closing future. @return The result of the future, or throws ExecutionException.
1042 Performs cleanup operations after a write, running unlocked cleanup.
1043 Creates a ValueReference for a segment entry, value, and weight.
1044 Creates a value reference for a segment, entry, value, and weight.
1045 Creates a ValueReference for a segment, entry, value, and weight.
1046 Records a read access for an entry and updates recency. @param entry The ReferenceEntry being accessed. @param now The current timestamp.
1047 Records a read access for a reference entry. Updates access time if recordsAccess is enabled.
1048 Records a write operation for an entry, updating weights and times. @param entry The ReferenceEntry being written. @param weight The weight of the write. @param now The current timestamp.
1049 Retrieves the live value from a reference entry, null if expired. @param entry The reference entry. @param now Current timestamp. @return The live value or null if not found/expired.
1050 Returns the number of elements in the iterable. Uses Collection.size() if available, otherwise Iterators.size().
1051 Returns the size of the multiset in linear time.
1052 Reads data from an InputStream into a byte array. @param in InputStream to read from @param bufs Queue of byte arrays @param totalLen Total bytes read so far @return Byte array containing read data @throws IOException if an I/O error occurs
1053 Sets the forward and inverse delegate maps. Maps must be empty and not equal.
1054 Creates a GeneralRange representing all elements, using the given comparator.
1055 Creates a GeneralRange extending downwards from the endpoint. @param comparator Comparator for range ordering. @param endpoint The endpoint of the range. @param boundType The bound type of the range.
1056 Creates a GeneralRange up to a specified endpoint. @param comparator for ordering elements @param endpoint exclusive endpoint value @param boundType the bound type of the range
1057 Creates a new GeneralRange with specified bounds and types. @param comparator Comparator for range elements. @param lower Lower bound value. @param lowerType Lower bound type. @param upper Upper bound value. @param upperType Upper bound type.
1058 Computes the intersection of this range with another. @param other The other range to intersect with. @return A new range representing the intersection.
1059 Returns the next element in the sequence without removing it. @return The next element or throws NoSuchElementException.
1060 Removes all values for a key. @param key the key to remove @return Collection of removed values, or empty collection.
1061 Validates the iterator's state; throws ConcurrentModificationException if modified.
1062 Puts the specified key-value pair into the map. Delegates to the superclass implementation. @param key The key for the mapping. @param value The value for the mapping. @return True if the key was associated with the value.
1063 Puts the specified key-value pair into the map, delegating to super. @param key The key for the mapping. @param value The value for the mapping. @return True if the map changed as a result of the put operation.
1064 Retrieves a list of values associated with the given key. @param key The key to retrieve the list for. @return A list of values or null if the key is not found.
1065 Returns the value associated with the given key, or null. @param key the key to look up @return Set of values or null if the key is not found
1066 Returns a set of map entries, delegating to the superclass.
1067 Writes the object's state to the stream for serialization.
1068 Converts a collection to a string representation. @param collection Collection to convert; returns "[...]" string.
1069 Converts a map to a string representation. @param map The map to convert. @return String representation of the map.
1070 Creates an ArrayList with a size hint for improved performance. @param estimatedSize The expected size of the ArrayList.
1071 Creates a HashMap with an initial capacity based on expectedSize.
1072 Creates a LinkedHashMap with the given expected size. @param expectedSize The initial capacity for the map. @return A new LinkedHashMap with the specified size.
1073 Creates a new HashSet with the specified expected size. @param expectedSize The initial capacity for the HashSet.
1074 Creates a LinkedHashSet with the specified expected size. @param expectedSize The initial capacity for the LinkedHashSet.
1075 Creates a {@link ListMultimapBuilder} with ArrayList values. Uses the default expected values per key.
1076 Creates a builder for a multimap with HashSet values. Uses the default expected values per key.
1077 Creates a builder for a multimap with LinkedHashSet values. Uses default expected values per key.
1078 Creates a MultimapBuilder with hash keys. Uses the default expected keys count.
1079 Creates a MultimapBuilder with linked hash keys. Uses default expected keys.
1080 Creates an immutable entry with the given object and count. @param e The object for the entry. @param n The count associated with the object. @return An ImmutableEntry object.
1081 Returns the count of the given element in this multiset. @param element The element to count. @param count The count to set for the element.
1082 Sets the count of an element. @param element The element to set the count for. @param oldCount The current count. @param newCount The new count to set. @return True if the count was updated.
1083 Returns the hash code value for this object, based on its map representation.
1084 Returns a string representation of the object, using asMap().
1085 Returns the entry set of this multiset. Delegates to superclass.
1086 Calculates the hash code based on the entry set's hash code.
1087 Returns the string representation of this map, based on entry set.
1088 Returns the first entry in the entry set, or null if empty.
1089 Returns the greatest element less than or equal to given element. @param e the element to find the ceiling of @return the ceiling element or null if none exists
1090 Returns the next higher element than {@code e}, or null if none. @param e the element to find the next higher element for @return the next higher element, or null if none exists
1091 Creates a new, empty TreeRangeSet. Returns an empty TreeRangeSet instance.
1092 Checks if the value is within the range. @param value The value to check. Returns true if within range.
1093 Checks if the comparator matches the Iterable's natural ordering. @param comparator The comparator to check. @param elements The iterable to check. @return True if comparators are equal, false otherwise.
1094 Adds all entries from the given table to this table.
1095 Returns the set of cells. Delegates to the superclass implementation.
1096 Returns the set of cells, delegating to the superclass.
1097 Returns a collection view of the values in this map.
1098 Returns a collection of the values in this map.
1099 Creates an Ordering based on the result of a Function. @param function Function to apply to elements for ordering. @return Ordering instance based on the function's result.
1100 Returns a Ordering from the given Comparator. If comparator is an Ordering, returns it; otherwise, wraps it.
1101 Combines this ordering with another. @param secondaryComparator Secondary comparator to apply. @return A new compound ordering.
1102 Creates an immutable cell with the given row key, column key, and value.
1103 Checks if the row and column keys exist in the table. @param rowKey The row key to check. @param columnKey The column key to check. @return True if both keys exist, false otherwise.
1104 Creates an immutable map entry with the given key and value.
1105 Creates an immutable map entry. Reuses entry if possible. @param entry The entry to potentially reuse. @param key The key for the immutable entry. @param value The value for the immutable entry.
1106 Puts the entry's key-value pair. @param entry Entry with key-value pair to put. @return This builder.
1107 Adds a key-value pair to the map and returns the builder.
1108 Resizes the entries array if the new size is larger. @param newSize The target size for the entries array.
1109 Inserts a key-value pair into the table at the given index. @param entryIndex Index for insertion. @param key Key to insert. @param value Value to insert.
1110 Resizes the entries array if the new size is larger. @param newSize The desired new size of the entries array.
1111 Inserts an entry at the given index with the provided object, hash, and mask.
1112 Allocates arrays for the hash table. @return Expected size of the hash table.
1113 Allocates arrays for the hash table. @return The expected size of the allocated arrays.
1114 Checks if this range encloses the given range. @param other The range to check for enclosure. @return True if this range encloses the other, false otherwise.
1115 Checks if this range intersects with another range. @param other The other range to check for intersection. @return True if the ranges intersect, false otherwise.
1116 Writes object state to stream, including comparator & multimap.
1117 Creates a new builder instance for constructing a sorted map. @return A new Builder object.
1118 Creates a new Builder instance for constructing objects. @return A new Builder object.
1119 Creates a new Builder instance for constructing objects. @return A new Builder object.
1120 Returns an unmodifiable iterator for the elements in this collection.
1121 Calculates frequency of an element in an iterable. @param iterable iterable to search @param element element to count @return frequency of the element
1122 Checks if the map contains the specified key using the default behavior. @param key The key to check. @return True if the map contains the key, false otherwise.
1123 Checks if the map contains the specified value. @param value The value to search for. @return True if the map contains the value, false otherwise.
1124 Returns the standard lower key, or null if none exists. @param key The key for which to find the lower key.
1125 Gets the floor key of an entry, or null if not found. @param key The key to look up. @return The floor key, or null if not found.
1126 Finds the next key in the map that is greater than or equal to the given key. @param key The key to find the ceiling key for. @return The next key, or null if none exists.
1127 Returns the next higher key or null if none exists. @param key The key to find the next higher key for.
1128 Returns the key of the first entry in the map. @return The key of the first entry, or throws NoSuchElementException.
1129 Returns the key of the last entry, or throws NoSuchElementException.
1130 Returns the last entry from the descending map's entry set. Returns null if the map is empty.
1131 Polls and removes the last entry from the map's descending entry set. @return The last entry or null if the map is empty.
1132 Returns a descending key set view of the map.
1133 Returns a sorted submap from fromKey (inclusive) to toKey (exclusive).
1134 Returns the lower entry for the given key. @param key The key to find the lower entry for. @return The lower entry, or null if none exists.
1135 Returns the floor entry for the given key. @param key The key to find the floor entry for. @return The floor entry or null if none exists.
1136 Returns a sorted map with entries whose keys are less than toKey. @param toKey The key to which the head map is compared.
1137 Returns the first entry whose key is greater than or equal to the given key. @param key The key to search for the ceiling entry. @return The entry or null if no such entry exists.
1138 Returns the entry with the highest key less than the given key. @param key The key to compare against. @return The highest entry, or null if none exists.
1139 Returns a tail map with keys >= fromKey. @param fromKey Key from which to start the tail map.
1140 Returns the submultiset between the provided bounds. @param lowerBound Lower bound (inclusive). @param upperBound Upper bound (exclusive).
1141 Creates a new, empty HashBasedTable. Uses LinkedHashMap and a Factory for internal storage.
1142 Reconstitutes the multiset from a stream. @param stream ObjectInputStream to read from. @throws IOException, ClassNotFoundException
1143 Moves the last entry to the specified destination index. @param dstIndex Destination index to move the last entry to. @param mask The mask used for hashing.
1144 Moves the last entry to the specified destination index. @param dstIndex Destination index for the last entry. @param mask The mask used for hashing.
1145 Checks if the map contains a specific value. @param value Value to search for. @return True if value is present, false otherwise.
1146 Creates a new Builder with the specified expected size. @param expectedSize The initial capacity of the builder.
1147 Default constructor for the Builder class.
1148 Creates a new builder instance for constructing objects. @return A new Builder object.
1149 Creates a new Builder with the given comparator. @param comparator Comparator for ordering keys.
1150 Creates a singleton ImmutableBiMap containing the given key-value pair.
1151 Adds an element to the deduped list, ensuring no duplicates. @param e The element to add.
1152 Constructs a new Builder with the default initial capacity.
1153 Creates a Builder for an ImmutableList with a pre-defined expected size. @param expectedSize The expected size of the list.
1154 Adds all elements from the given iterable to the builder. @param elements iterable containing elements to add @return this builder instance for chaining
1155 Adds all elements from the iterator to the list. @param elements Iterator containing elements to add. @return This builder instance for chaining.
1156 Adds all elements from the iterator to the list. @param elements Iterator containing elements to add. @return This builder instance for chaining.
1157 Returns a SerializedForm object to control serialization.
1158 Creates a singleton ImmutableTable with the given row, column, and value.
1159 Returns a string representation of the delegate iterable.
1160 Adds all values from the given iterable to the collection for the key. @param key the key to associate with the values @param values iterable of values to add @return this builder
1161 Returns the only element of an iterable, or defaultValue if empty. @param iterable Iterable to extract element from @param defaultValue Value if iterable is empty @param <T> Type of elements in the iterable
1162 Returns the last element of an iterable or defaultValue if empty. @param iterable Iterable to get the last element from. @param defaultValue Value to return if iterable is empty.
1163 Adds a key-value pair to the map. @param key The key of the entry to add. @param value The value of the entry to add. @return True.
1164 Partitions a list into sublists of the specified size. @param list List to partition. @param size Size of each sublist. @return List of sublists.
1165 Returns the index of the first occurrence of element. @param element element to find @return index of element, or -1 if not found
1166 Returns the last index of the specified element in the list. @param element The element to search for. @return The last index or -1 if not found.
1167 Performs cleanup operations before writing data. Calls runLockedCleanup() to execute the actual cleanup.
1168 Creates a new, empty TreeRangeMap.
1169 Finds the minimum element index within a range. @param index start index, must be > 0 @param len range length @return Index of the minimum element.
1170 Returns the index of the maximum element in the heap. Returns 1 or 2 based on size, or compares elements.
1171 Retrieves and returns the first element without removing it. @return The first element or null if the deque is empty.
1172 Bubbles element up the alternating levels of the queue. @param index index of the element to bubble up @param x element to be bubbled up @return index of the element after bubbling
1173 Returns an iterator for this multiset, using Multisets.iteratorImpl.
1174 Concatenates an element to an array. @param element The element to add. @param array The array to concatenate to. @return New array with element added.
1175 Converts a collection to an array of specified type. @param c Collection to convert. @param array Array to populate, or a new array. @return Array containing elements from the collection.
1176 Returns the minimum element from the given iterable. @param iterable Iterable to find the minimum element from. @return The minimum element in the iterable.
1177 Returns the maximum element of an iterable. @param iterable Iterable to find the maximum from. @return The maximum element in the iterable.
1178 Returns a string representation of the range.
1179 Creates a GeneralRange from a given Range. @param range The Range to convert. @return A GeneralRange representing the input Range.
1180 Returns a submap containing keys within the specified range. @param map NavigableMap to extract from. @param range Range of keys to include. @return Submap containing keys within the range.
1181 Returns a sub-set based on the provided range. @param set NavigableSet to extract from. @param range Range defining the sub-set bounds. @return Sub-set of the input set.
1182 Returns the row map, casting the result to SortedMap.
1183 Wraps a queue to make it synchronized. @param queue The queue to synchronize. @return A synchronized queue.
1184 Initializes the ArrayBasedCharEscaper with a map and safe character range. @param escaperMap Map of characters to escape @param safeMin Minimum safe character @param safeMax Maximum safe character
1185 Constructs an ArrayBasedUnicodeEscaper with given replacement map, range, and replacement.
1186 Creates a PercentEscaper with specified safe characters and space handling. @param safeChars Safe characters for escaping. @param plusForSpace Whether to use '+' for spaces.
1187 Escapes a string, returning the original if no escaping is needed.
1188 Creates a Subscriber, synchronized if method isn't thread-safe. @param bus EventBus instance. @param listener Listener object. @param method Method to be subscribed.
1189 Returns a string representation of the graph.
1190 Returns a set of edges in the graph. The set is unmodifiable.
1191 Returns a set view of the graph's edges. The set is unmodifiable.
1192 Adds a double value to the hasher and returns the hasher object.
1193 Creates a Bloom filter collector. @param funnel Funnel for hashing objects. @param expectedInsertions Expected number of insertions.
1194 Calculates the expected FPP (false positive probability). Uses bit count and number of hash functions.
1195 Checks if two Bloom filters are compatible. Compares hash functions, bit size, strategy, and funnel.
1196 Converts a byte to its string representation in base 10.
1197 Merges the contents of another BloomFilter into this one. Requires identical size, hash functions, funnel, and strategy.
1198 Creates a HashCode instance from a byte array. @param bytes The byte array to hash. @return A HashCode object representing the bytes.
1199 Creates a HashCode instance from an integer value. @param hash The integer to use for the HashCode. @return A new HashCode object representing the integer.
1200 Creates a HashCode instance from a long value. @param hash The long value to create the HashCode from. @return A HashCode object representing the long value.
1201 Returns the value of this BigInteger as a float.
1202 Returns the double representation of this number.
1203 Converts the long value to a BigInteger. @return BigInteger representation of the long value.
1204 Returns a good fast hash function for the given minimum bits. @param minimumBits minimum number of bits for the hash @return HashFunction object
1205 Calculates a consistent hash ring position. @param hashCode HashCode object to hash @param buckets Number of buckets in the hash ring @return Ring position as an integer.
1206 Creates an HmacMD5 HashFunction using the provided key. @param key The secret key for the HMAC calculation. @return An HmacMD5 HashFunction instance.
1207 Creates an HMAC-SHA1 hash function using the provided key. @param key The secret key for the HMAC-SHA1 calculation. @return An HmacSHA1 hash function.
1208 Creates an HMAC-SHA256 HashFunction using the provided key. @param key The secret key for the HMAC calculation. @return An HMAC-SHA256 HashFunction.
1209 Creates an HMAC-SHA512 HashFunction using the provided key. @param key The secret key for the HMAC calculation. @return An HMAC-SHA512 HashFunction.
1210 Concatenates multiple ByteSource objects into a single ByteSource.
1211 Concatenates multiple CharSource instances into a single source.
1212 Creates a ByteArrayDataInput from a byte array. @param bytes The byte array to create the input from. @return A ByteArrayDataInput instance.
1213 Creates a new ByteArrayDataOutput with a default ByteArrayOutputStream.
1214 Creates a new ByteArrayDataOutput with the specified size. @param size Initial size of the underlying ByteArrayOutputStream @throws IllegalArgumentException if size is negative
1215 Creates a ReaderInputStream with custom error handling. @param reader The Reader to read from. @param charset Character encoding to use. @param bufferSize The buffer size.
1216 Counts bytes skipped from an input stream. @param in Input stream to skip from. @return Total bytes skipped.
1217 Skips specified byte count from an input stream. @param in Input stream to skip from. @param n Number of bytes to skip. @throws IOException if end of stream is reached prematurely.
1218 Writes lines from an iterable, separated by the given line separator. @param lines Iterable of lines to write. @param lineSeparator Separator between lines. @throws IOException If an I/O error occurs.
1219 Writes lines from a stream, separated by the given line separator. @param lines Stream of character sequences to write. @param lineSeparator Separator between lines. @throws IOException if an I/O error occurs.
1220 Applies the given action to each line of the stream. @param action Consumer to apply to each line. @throws IOException if an I/O error occurs.
1221 Reads lines from a Readable object and returns them as a list. @param r Readable object to read from. @return List of strings, each representing a line.
1222 Reads lines from a readable and processes them with a processor. @param readable Source of lines to read. @param processor Processes each line; returns false to stop. @return Result from the processor.
1223 Reads more characters into the char buffer, expanding if needed.
1224 Reads a short value from the input stream. Returns a short, casts an unsigned short.
1225 Reads a char value by reading an unsigned short. @throws IOException if an I/O error occurs.
1226 Reads a float value from the input stream. Uses readInt() to convert integer bits to a float.
1227 Reads the next double value from the input stream. @throws IOException if an I/O error occurs
1228 Writes a string character by character. @param s The string to write. @throws IOException if an I/O error occurs.
1229 Writes a double value to the output stream. Converts the double to a long and writes it.
1230 Deletes directory contents insecurely. @param dir DirectoryStream to delete from. @return Collection of IOExceptions during deletion.
1231 Deletes a file or directory recursively, handling exceptions. @param dir SecureDirectoryStream for secure file operations @param path Path to delete @return Collection of IOExceptions encountered, or null if none.
1232 Creates a MultiInputStream from an iterator of ByteSource objects.
1233 Returns a CharSource for reading characters from this URL. @param charset Charset to use for decoding the URL.
1234 Calculates the number of permutations of a sorted list. @param sortedInputList Sorted list to calculate permutations. @param comparator Comparator for comparing elements in the list. @return The number of permutations, or Integer.MAX_VALUE if overflow.
1235 Calculates the mean of a sequence of numbers. @param values Iterator of Number objects @return The mean of the numbers.
1236 Checks if a double is a power of two. @param x The double value to check. @return True if x is a power of two, false otherwise.
1237 Checks if a double is a mathematical integer. @param x The double value to check. @return True if x is a mathematical integer, false otherwise.
1238 Rounds a long value to a double using the specified rounding mode. @param x long value to round @param mode rounding mode
1239 Compares two doubles, considering a tolerance for equality. @param a first double @param b second double @param tolerance tolerance value @return -1, 0, or 1 based on comparison.
1240 Calculates the maximum run length before fallback. @param tableSize The size of the table. @return The maximum run length.
1241 Trims the buffer to the first k elements and sets the threshold.
1242 Calculates the base-10 logarithm of an integer with rounding. @param x The integer to calculate the logarithm of. @param mode The rounding mode to use. @return The base-10 logarithm of x.
1243 Calculates the square root of a long value with specified rounding. @param x The value to calculate the square root of. @param mode The rounding mode to use. @return The square root of x.
1244 Calculates the new capacity of the queue. Returns a new capacity based on the old capacity.
1245 Creates a horizontal linear transformation at the given y-value. @param y The y-value for the horizontal line. @return A RegularLinearTransformation object.
1246 Creates a LinearTransformation with the given slope. @param slope the slope of the linear transformation @return a LinearTransformation object
1247 Creates a vertical linear transformation with the given y-offset. @param x The y-offset for the vertical transformation.
1248 Calculates factorial of n. @param n non-negative integer @return BigInteger representing n!
1249 Calculates the floor of the base-10 logarithm of a long. @param x The long value to calculate the logarithm of. @param mode Rounding mode to use. @return The floor of the base-10 logarithm of x.
1250 Multiplies a fraction (numerator/denominator) by a value x. @param x The value to multiply the fraction by. @return The result of the multiplication.
1251 Calculates b^k, checking for overflow. @param b base (long) @param k exponent (int) @return b raised to the power of k
1252 Calculates the population covariance. @return The population covariance, based on deltas and count.
1253 Calculates the sample covariance. Requires at least two data points. Returns the covariance value.
1254 Calculates Pearson's correlation coefficient between x and y. Returns NaN if count <= 1 or sumOfProductsOfDeltas is NaN.
1255 Calculates the mean of a sequence of numbers. @param values Iterator of Number objects, must have at least one element. @return The calculated mean as a double.
1256 Adds a value to the dataset, updating mean, min, max, sum of squares.
1257 Calculates the population covariance. @return The population covariance value.
1258 Calculates the sample covariance. Requires count() > 1. Returns the calculated covariance.
1259 Calculates Pearson's correlation coefficient. Returns NaN if count <= 1 or sumOfProductsOfDeltas is NaN.
1260 Partitions the array around a pivot element. @param array The array to partition. @param from Starting index of the slice. @param to Ending index of the slice. @return The partition point index.
1261 Creates a PairedStats object from a byte array. @param byteArray Byte array containing PairedStats data. @return A PairedStats object.
1262 Creates a Stats object from a byte array. @param byteArray byte array containing Stats data @return Stats object created from the byte array
1263 Creates a snapshot of the paired statistics. Returns a new PairedStats object with the current state.
1264 Returns a snapshot of the xStats object.
1265 Returns a snapshot of the y-axis statistics. @return A Stats object representing y-axis data.
1266 Creates a collector to accumulate number statistics into a Stats object.
1267 Converts an InetAddress to a URI string representation. Handles IPv6 addresses by enclosing them in brackets.
1268 Gets the IPv4 address from a compatible IPv6 address. @param ip IPv6 address that is IPv4-compatible @return Inet4Address representing the IPv4 portion
1269 Extracts IPv4 address from a 6to4 IPv6 address. @param ip The 6to4 IPv6 address. @return The extracted Inet4Address.
1270 Extracts the IPv4 address from an ISATAP IPv6 address. @param ip The ISATAP IPv6 address. @return The embedded IPv4 address.
1271 Computes a value from the input dataset of numbers. @param dataset Collection of numbers to process.
1272 Computes a map from integer to double based on the dataset.
1273 Adds a double value to the array. @param value The double to add. @return This builder instance.
1274 Adds all elements from a double array to the builder. @param values double array to add @return this builder
1275 Adds all elements from a collection to the array. @param values Collection of doubles to add. @return This builder instance.
1276 Adds all elements from an ImmutableDoubleArray to the builder. @param values double array to add @return this builder
1277 Creates an ImmutableDoubleArray from a single double value.
1278 Creates an ImmutableDoubleArray from two double values.
1279 Creates an ImmutableDoubleArray from the given double values.
1280 Creates an ImmutableDoubleArray from the given four doubles.
1281 Creates an ImmutableDoubleArray from the given five doubles.
1282 Creates an ImmutableDoubleArray from the given six double values.
1283 Creates an immutable copy of the given double array. @param values The double array to copy. @return A new ImmutableDoubleArray containing the values.
1284 Creates an ImmutableDoubleArray from a Collection of Doubles. Returns EMPTY if the collection is empty.
1285 Copies a DoubleStream to an ImmutableDoubleArray. @param stream The DoubleStream to copy. @return A new ImmutableDoubleArray containing the stream's elements.
1286 Returns a trimmed view, or the original array if not partial.
1287 Checks if the set contains the target value. @param target The value to search for. @return True if found, false otherwise.
1288 Adds an element to the end of the array. @param value The element to add. @return This builder instance for chaining.
1289 Adds all elements from an array to the builder's array. @param values array of integers to add @return this builder instance
1290 Adds all elements from a collection to the array. @param values Collection of integers to add. @return This builder object.
1291 Adds all elements from an ImmutableIntArray to the builder. @param values ImmutableIntArray to add. Returns the builder.
1292 Creates an ImmutableIntArray from a single integer element.
1293 Creates an ImmutableIntArray from two integers. @param e0 the first integer @param e1 the second integer @return ImmutableIntArray containing e0 and e1
1294 Creates an ImmutableIntArray from the given three integers.
1295 Creates an ImmutableIntArray from the given four integers.
1296 Creates an ImmutableIntArray from the given five integer elements.
1297 Creates an ImmutableIntArray from the given six integer elements.
1298 Creates an immutable copy of the given int array. @param values The array to copy. @return A new ImmutableIntArray containing the elements.
1299 Copies an IntStream to an ImmutableIntArray. Returns EMPTY if the stream is empty.
1300 Returns a trimmed view or the original array if not partial.
1301 Adds a value to the array. @param value The value to add. @return This builder instance.
1302 Adds all elements from the given array to the builder. @param values array of longs to add @return this builder
1303 Adds all values from the collection to the builder's array. @param values Collection of Long values to add. @return This builder object for chaining.
1304 Adds all elements from the ImmutableLongArray to the builder. @param values ImmutableLongArray to add. @return This builder instance.
1305 Creates an ImmutableLongArray from a single long element.
1306 Creates an ImmutableLongArray from two long elements.
1307 Creates an ImmutableLongArray from the given long values.
1308 Creates an ImmutableLongArray from the given four long elements.
1309 Creates an ImmutableLongArray from the given five long elements.
1310 Creates an ImmutableLongArray from the given six long elements.
1311 Creates an immutable copy of the given long array. @param values The long array to copy. @return An ImmutableLongArray containing the copied values.
1312 Converts a LongStream to an ImmutableLongArray. Returns EMPTY if the stream is empty.
1313 Returns a trimmed view if partial, otherwise returns this.
1314 Creates a ScaleAndIndexes object with the given indexes. @param indexes Collection of integer indexes. @return A ScaleAndIndexes object.
1315 Creates an ImmutableIntArray from a Collection of Integers. Returns EMPTY if the collection is empty.
1316 Creates an ImmutableLongArray from a Collection of Longs. Returns EMPTY if the collection is empty.
1317 Parses a string as an Integer in the given radix. @param string String to parse. @param radix The radix to use. @return Integer value or null if parsing fails.
1318 Parses a string to a Long. @param string The string to parse. @return Long representation or null if parsing fails.
1319 Decodes a string value into an unsigned integer. @param stringValue The string to decode. @return The decoded integer value.
1320 Creates an UnsignedInteger from a long value. @param value long value to convert; must fit within unsigned range.
1321 Creates an UnsignedInteger from a BigInteger. @param value BigInteger to convert; must be non-negative and fit in int.
1322 Parses a string as an unsigned integer with the given radix. @param string The string to parse. @param radix The radix to use for parsing.
1323 Adds an UnsignedInteger to this UnsignedInteger. @param val The UnsignedInteger to add. @return The sum of the two UnsignedIntegers.
1324 Subtracts an UnsignedInteger from this one. @param val the UnsignedInteger to subtract @return the result of the subtraction
1325 Multiplies this UnsignedInteger by another. @param val The UnsignedInteger to multiply by. @return The product of the two UnsignedIntegers.
1326 Divides this UnsignedInteger by another. @param val The divisor UnsignedInteger. @return The quotient as a new UnsignedInteger.
1327 Calculates the modulo of this UnsignedInteger by another. @param val the divisor @return the remainder of the division
1328 Returns a string representation of the object, using default level.
1329 Compares this unsigned integer with another. @param other The other UnsignedInteger to compare to. @return -1, 0, or 1 based on comparison.
1330 Creates an UnsignedLong from a long value. @param value long value to convert; must be non-negative. @return UnsignedLong representation of the value.
1331 Creates an UnsignedLong from a BigInteger. @param value BigInteger to convert; must be non-negative. @return UnsignedLong representation of the value.
1332 Adds an UnsignedLong value to this UnsignedLong. @param val the UnsignedLong to add @return the sum of this UnsignedLong and val
1333 Subtracts an UnsignedLong value. @param val The UnsignedLong to subtract. @return The result of the subtraction.
1334 Multiplies this UnsignedLong by another, returning the result. @param val the UnsignedLong to multiply by @return the product of the two UnsignedLong values
1335 Divides two longs, handling potential overflow and negative divisors.
1336 Calculates the remainder of dividend divided by divisor. Handles negative divisors and optimizes for positive dividends.
1337 Parses a string as a base-radix unsigned long. @param string String to parse. @param radix Base of the number system. @return UnsignedLong value.
1338 Parses a string representation of an unsigned long. @param string The string to parse. @return The unsigned long value represented by the string.
1339 Decodes a long value from a string. @param stringValue The string to decode. @return The decoded long value.
1340 Checks if the member is package-private. Returns true if not private, public, or protected.
1341 Wraps the type if it's a primitive; otherwise, returns itself.
1342 Unwraps the type if it's a wrapper, otherwise returns itself. Returns TypeToken of the unwrapped type or this if not a wrapper.
1343 Returns the component type of this type, or null if none.
1344 Retrieves the value from the deferred computation. @return The computed value or null if the computation failed. @throws InterruptedException, ExecutionException if an error occurs.
1345 Submits a task and adds its future to a queue. @param executorService Executor service to submit task. @param task Callable task to execute. @param queue Queue to add the future to. @return ListenableFuture representing the task.
1346 Awaits the service to be running, with a specified timeout. @param timeout Duration to wait before timing out. @throws TimeoutException if the service doesn't become running.
1347 Waits for the service to be running, with a timeout. @param timeout The maximum time to wait. @throws TimeoutException If the service doesn't start in time.
1348 Awaits the service to be running, with a specified timeout. @param timeout The maximum time to wait. @throws TimeoutException If the service doesn't start within timeout.
1349 Awaits the service to be running, with a specified timeout. @param timeout The maximum time to wait. @throws TimeoutException if the service doesn't start within timeout.
1350 Awaits termination of the service, with a timeout. @param timeout The maximum time to wait. @throws TimeoutException If the service doesn't terminate.
1351 Awaits termination of the service, with a timeout. @param timeout Duration to wait before throwing TimeoutException.
1352 Awaits termination of the service, with a timeout. @param timeout The maximum time to wait. @throws TimeoutException If the service doesn't terminate.
1353 Awaits termination of the service, with a timeout. @param timeout The maximum time to wait. @throws TimeoutException If the service doesn't terminate.
1354 Collects a value from a Future, handling exceptions. @param index Index for the value being collected. @param future Future to retrieve the value from.
1355 Atomically gets the current value and adds delta. @param delta The value to add to the current value. @return The current value before adding delta.
1356 Adds the given delta to the current value and returns the result. @param delta The value to add. @return The new value after addition.
1357 Atomically adds delta to the double at index i and returns old value.
1358 Adds delta to the current value and returns the result. @param i The initial value. @param delta The value to add. @return The sum of the initial value and delta.
1359 Attempts to cancel the execution of this future. @param mayInterruptIfRunning if true, interrupts if running @return true if cancellation was possible, false otherwise.
1360 Recursively searches for a path to the target node in the graph. @param node Target node to find a path to. @param seen Set of visited nodes to prevent cycles. @return ExampleStackTrace object representing the path, or null.
1361 Creates a ListenableFutureTask from a Callable. @param callable Callable to wrap in a ListenableFutureTask. @return A new ListenableFutureTask instance.
1362 Creates a ListenableFutureTask with the given runnable and result. @param runnable The task to execute. @param result The result of the task. @return A new ListenableFutureTask.
1363 Executes the execution list after a task completes.
1364 Creates and returns a new ExecutionSequencer instance.
1365 Wraps a ListenableFuture as a FluentFuture, or returns it if already one.
1366 Wraps a future, propagating done status without cancellation. @param future The future to wrap. @return A NonCancellationPropagatingFuture wrapping the input.
1367 Reloads a value for the given key and wraps it in a future. @param key The key to reload. @param oldValue The old value associated with the key. @return ListenableFuture containing the reloaded value.
1368 Adds an event to the queue. @param event The event to enqueue.
1369 Adds an event to the queue with a given label. @param event The event to enqueue. @param label A descriptive label for the event.
1370 Dispatches listener events if not called by the monitor thread.
1371 Dispatches listener events after checking thread safety.
1372 Signals the next waiting thread if a guard condition is satisfied.
1373 Submits an AsyncCallable for asynchronous execution. @param callable The callable to execute. @param executor Executor to run the callable on. @return ListenableFuture representing the callable's result.
1374 Schedules a callable to run after a delay, returning a ListenableFuture. @param callable Callable to execute asynchronously @param delay Delay before execution @param timeUnit Time unit of the delay @param executorService Executor service to use @return ListenableFuture representing the asynchronous execution
1375 Creates a TrustedListenableFutureTask for the given callable. @param callable The callable to wrap in a future task.
1376 Submits a Callable to an executor and returns a ListenableFuture. @param callable Callable to execute @param executor Executor to run the task @return ListenableFuture representing the task's execution
1377 Creates a TrustedListenableFutureTask for the given runnable and value.
1378 Submits a Runnable to an Executor and returns a ListenableFuture. @param runnable The task to execute. @param executor The executor to run the task on. @return ListenableFuture representing the task's execution.
1379 Attempts to acquire a semaphore permit without interruption. @param semaphore Semaphore to acquire a permit from. @param timeout Duration to wait for permit acquisition. @return True if acquired, false if timeout expires.
1380 Returns the first element as an Optional. Returns empty if absent.
1381 Returns the last element of the iterable, or absent if empty.
1382 Finds the first element matching the predicate in the iterator. @param iterator Iterator to search through. @param predicate Predicate to test each element. @return Optional containing the first match, or empty.
1383 Sets the expected node count for the graph. @param expectedNodeCount The expected number of nodes (>=0). @return This GraphBuilder for chaining.
1384 Sets the expected node count. @param expectedNodeCount The expected number of nodes (>=0). @return This builder instance.
1385 Sets the expected edge count for the graph. @param expectedEdgeCount The expected number of edges. @return This NetworkBuilder for chaining.
1386 Sets the expected node count for the graph. @param expectedNodeCount The expected number of nodes. @return This builder instance for chaining.
1387 Checks if any element in the iterable satisfies the predicate. @param iterable Iterable to check. @param predicate Predicate to apply to each element. @return True if any element matches, otherwise false.
1388 Returns a predicate that checks if a CharSequence contains pattern. @param pattern The pattern to search for. @return A predicate that checks for the pattern.
1389 Propagates a Throwable if it's an instance of declaredType. Recursively calls itself if not.
1390 Retrieves the class hierarchy as an ImmutableSet. @param concreteClass Class to start hierarchy from. @return Set of classes in the hierarchy.
1391 Returns a ThreadFactory for App Engine or the default. Uses ThreadManager if available, otherwise returns default.
1392 Checks if the delegate iterable contains the target object. @param target The object to search for. @return True if found, false otherwise.
1393 Filters a FilteredSetMultimap based on a predicate. @param multimap The multimap to filter. @param entryPredicate Predicate for filtering entries. @return A new filtered SetMultimap.
1394 Filters keys in a ListMultimap based on a predicate. @param unfiltered The ListMultimap to filter. @param keyPredicate Predicate to filter keys. @return A new filtered ListMultimap.
1395 Filters the iterable to contain only elements of the specified type. @param type The class of elements to keep. @return A FluentIterable containing only elements of the specified type.
1396 Removes all elements from the set using a GWT-compatible implementation. @param collection Collection of elements to remove. @return True if the set was modified.
1397 Creates an EnumMultiset from an iterable of enum elements. @param elements Iterable containing enum values to populate multiset. @return An EnumMultiset containing the provided enum elements.
1398 Creates a new LinkedList from the given Iterable. @param elements Iterable containing elements for the list. @return A new LinkedList containing the elements.
1399 Creates an ArrayDeque from an Iterable. @param elements Iterable to populate the deque from. @return An ArrayDeque containing the elements.
1400 Creates a ConcurrentLinkedQueue from an iterable of elements. @param elements Iterable to populate the queue with. @return A ConcurrentLinkedQueue containing the elements.
1401 Creates a LinkedBlockingDeque initialized with elements from iterable. @param elements Iterable containing elements for the deque. @return A new LinkedBlockingDeque containing the elements.
1402 Creates a LinkedBlockingQueue initialized with the given elements. @param elements Iterable containing initial queue elements. @return A new LinkedBlockingQueue.
1403 Creates a PriorityBlockingQueue from an iterable of elements. @param elements Iterable of elements to add to the queue @return A PriorityBlockingQueue containing the elements.
1404 Creates a priority queue from an iterable of comparable elements. @param elements Iterable containing elements to add to the queue @return PriorityQueue containing the elements
1405 Creates an EnumSet from an iterable, using the given element type.
1406 Creates a ConcurrentHashSet from an iterable of elements. @param elements Iterable containing elements to add to the set. @return A ConcurrentHashSet containing the provided elements.
1407 Creates a new LinkedHashSet from an iterable of elements. @param elements Iterable containing elements for the set. @return A new LinkedHashSet containing the elements.
1408 Creates a new TreeSet from an iterable of elements. @param elements Iterable containing elements to add to the set. @return A new TreeSet containing the elements.
1409 Returns the iterable as a Collection, or creates a new ArrayList.
1410 Creates a new ArrayList containing elements from the given iterable. @param elements Iterable containing elements to add to the list. @return A new ArrayList containing the elements.
1411 Creates a HashSet from an iterable, or its iterator. @param elements Iterable to populate the HashSet with. @return A new HashSet containing elements from the iterable.
1412 Checks if all elements of the collection match the predicate. @param predicate Predicate to apply to each element. @return True if all elements match, false otherwise.
1413 Creates a list iterator starting at the specified index. @param start the starting index for the list iterator @return A ListIterator instance.
1414 Adapts a SortedSet to a SortedMap using the provided function. @param set SortedSet to adapt. @param function Maps keys from the set to map values. @return SortedMap based on the set and function.
1415 Transforms entries of a sorted map using a provided transformer. @param fromMap The input sorted map. @param transformer Transforms each map entry. @return A new sorted map with transformed entries.
1416 Transforms values in a map using a function. @param fromMap Source map. @param function Function to apply to each value. @return New map with transformed values.
1417 Adds a specified number of occurrences of an element. @param element element to add @param occurrences number of occurrences to add @return the previous count of the element
1418 Adds occurrences to an element's count. Returns old count. @param element element to add occurrences to @param occurrences number of occurrences to add @return old count of the element
1419 Transforms entries in a ListMultimap using a provided transformer. @param fromMap source ListMultimap @param transformer transforms K, V1 to V2 @return new ListMultimap with transformed entries
1420 Transforms values in a Multimap using a Function. @param fromMultimap Multimap to transform @param function Function to apply to each value @return New Multimap with transformed values
1421 Adds all elements from the given iterable to the builder. @param elements Iterable containing elements to add. @return This builder for chaining.
1422 Adds all elements from a collection to the multiset. @param self the multiset to add to @param elements collection of elements to add @return true if the multiset was modified
1423 Applies the contains operation on the input. @param input The input to be checked for containment. @return True if the input is contained, false otherwise.
1424 Creates a TableCollector to populate a table from stream elements. @param rowFunction Maps element to row key. @param columnFunction Maps element to column key. @param valueFunction Maps element to cell value. @param tableSupplier Creates the table to populate.
1425 Escapes slow characters in a string, handling supplementary chars. @param s input string @param index start index @return escaped string
1426 Constructs a StandardNetwork with provided configurations and data. @param builder Network builder object. @param nodeConnections Node connection map. @param edgeToReferenceNode Edge to node reference map.
1427 Constructs a StandardValueGraph with given builder, connections, and edge count.
1428 Copies data from a Readable to an Appendable. @param from Source of data. @param to Destination for data. @return Number of characters copied.
1429 Decodes a CharSequence into a byte array. Throws IllegalArgumentException on decoding errors.
1430 Returns the smallest power of 2 >= x. @param x The BigInteger to find the ceiling power of 2 for. @return The ceiling power of 2 as a BigInteger.
1431 Returns the largest power of 2 less than or equal to x.
1432 Creates an Invokable from a constructor. @param constructor Constructor to create Invokable from @return Invokable instance
1433 Creates an Invokable from a given Method. @param method The Method to wrap as an Invokable. @return A new MethodInvokable instance.
1434 Completes a future, executing listeners and handling delegation. @param param The future to complete. @param callInterruptTask Whether to call interruptTask.
1435 Adds the specified delta to the value associated with key. @param key the key whose value is updated @param delta the value to add @return the new value associated with the key
1436 Atomically gets the current value and adds delta. @param key The key associated with the value. @param delta The value to add to the current value. @return The previous value associated with the key.
1437 Adds all entries from a map to this map. @param m the map whose entries are added
1438 Constructs a new AbstractGraphBuilder with the given directed flag. @param directed whether the graph is directed
1439 Adds a listener to be invoked via the provided executor. @param listener The listener to add. @param executor Executor for listener invocation.
1440 Converts an A to a B using corrected forwarding. @param a The input object of type A. @return The converted object of type B, or null.
1441 Constructs a new CompactHashMap with the default initial size.
1442 Constructs a CompactHashMap with an expected size. @param expectedSize The initial capacity of the map.
1443 Constructs a new CompactHashSet with the default initial capacity.
1444 Constructs a CompactHashSet with an expected size. @param expectedSize The initial capacity estimate.
1445 Extracts the simple name of a class, removing numeric prefixes. Returns the class name after the package if it's a top-level class.
1446 Constructs a SortedSetMultimap from a Map. @param map the map to initialize from
1447 Creates a Multimap from a Map and a Collection factory. @param map Initial map data. @param factory Collection factory. @return A new Multimap instance.
1448 Creates a new, empty HashMultiset.
1449 Creates a new LinkedHashMultiset. Returns an empty multiset implementation.
1450 Creates an EnumMultiset from an iterable and enum type. @param elements Iterable of enum elements to add. @param type The enum type. @return An EnumMultiset containing the elements.
1451 Calculates the population standard deviation. Returns the square root of the population variance.
1452 Calculates the sample standard deviation. Returns the square root of the sample variance.
1453 Calculates the population standard deviation. Returns the square root of the population variance.
1454 Calculates the sample standard deviation. Returns the square root of the sample variance.
1455 Returns a CharMatcher that rejects any char in the sequence. @param sequence The sequence of characters to reject. @return A CharMatcher rejecting chars in the sequence.
1456 Creates a StringConverter for the specified target format. @param targetFormat The CaseFormat to convert to. @return A StringConverter instance.
1457 Chains this converter with another, applying them sequentially. @param secondConverter The converter to apply after this one. @return A new ConverterComposition combining both converters.
1458 Returns a converter that reverses the conversion. Returns cached converter if available, otherwise creates one.
1459 Creates a StringConverter for the given enum class. @param enumClass The enum class to convert from String. @return A StringConverter instance.
1460 Creates a Converter from a BiMap. @param bimap The BiMap to use for conversion. @return A Converter using the provided BiMap.
1461 Compares this object to another using Lists.equalsImpl. @param object The object to compare to. @return True if objects are equal, false otherwise.
1462 Creates a ConcurrentHashMultiset from an iterable of elements. @param elements iterable of elements to add to the multiset @return ConcurrentHashMultiset containing the elements
1463 Appends object array to appendable. @param appendable target appendable @param parts object array to append @return the appendable after appending
1464 Appends an Iterable of parts to a StringBuilder. @param builder StringBuilder to append to @param parts Iterable of parts to append @return The StringBuilder after appending.
1465 Joins elements from an iterator into a single string.
1466 Joins map entries into a string representation. @param map The map to join. @return A string containing the map's entries.
1467 Returns a string representation of the object. Uses MoreObjects.toStringHelper for formatting.
1468 Returns a string representation of this object. Includes initialCapacity, concurrencyLevel, key/value strengths.
1469 Returns a string representation of this cache configuration.
1470 Initializes the map with provided builder and entry helper. Sets concurrency level, segment count, and creates segments.
1471 Converts a java.util.Optional to a Guava Optional. @param javaUtilOptional The java.util.Optional to convert. @return A Guava Optional or null if the input is null.
1472 Creates a HostAndPort from a host string and port number. @param host The host string to parse. @param port The port number. @return A HostAndPort object.
1473 Creates a HostAndPort from a host string, ensuring no port is present. @param host The host string to parse. @return A HostAndPort object representing the host.
1474 Retrieves element at position from iterable. @param iterable source iterable @param position index of element to retrieve @return element at the specified position
1475 Creates a copy of this BloomFilter with the same parameters.
1476 Acquires a given number of permits, waits if necessary. @param permits number of permits to acquire @return Time in seconds spent waiting for permits.
1477 Attempts to acquire the lock with a timeout. @param timeout Duration to wait for lock acquisition. @return True if lock acquired, false otherwise.
1478 Attempts to acquire a permit, waiting up to timeout. @param timeout Acquisition timeout. @param unit Time unit of the timeout parameter. @return True if acquired, false if timeout expires.
1479 Attempts to acquire the specified number of permits. @param permits the number of permits to acquire @return true if acquired, false otherwise
1480 Attempts to acquire the lock. @return True if the lock was acquired, false otherwise.
1481 Attempts to acquire the specified number of permits within the timeout. @param permits Number of permits to acquire. @param timeout Duration to wait for permits. @return True if permits were acquired, false otherwise.
1482 Attempts to acquire the lock, waiting for a specified duration. @param time Time to wait in the given unit. @param unit TimeUnit of the given time. @return True if the lock was acquired, false otherwise.
1483 Protected constructor to prevent direct instantiation.
1484 Checks if the heap is intact by verifying all indices.
1485 Creates a CacheBuilder with configured options. @return CacheBuilder instance with specified settings.
1486 Returns a MapMaker configured with weak keys. @param mapMaker The MapMaker instance to configure. @return A new MapMaker with weak keys enabled.
1487 Checks if the current service state matches the expected state. Throws IllegalStateException if states don't match.
1488 Retrieves the value at the specified row and column. @param rowIndex Row index. @param columnIndex Column index. @return Value at the specified indices.
1489 Sets the element at the given row and column. @param rowIndex row index @param columnIndex column index @param value new value, can be null @return The previous value at the specified position
1490 Retrieves the element at the specified index. @param index the index of the element to retrieve @return the element at the given index
1491 Retrieves the element at the specified index. @param index the index of the element to retrieve @return the element at the given index
1492 Retrieves the element at the specified index. @param index the index of the element to retrieve @return the element at the given index
1493 Returns the index of the first match in the sequence, or -1. @param sequence CharSequence to search. @param start Start index (inclusive).
1494 Constructs an AbstractIndexedListIterator with initial size and position. @param size The number of elements in the list. @param position The initial position of the iterator.
1495 Creates a ByteArrayDataInput from bytes, starting at a given index. @param bytes The byte array. @param start The starting index.
1496 Checks if the byte array segment is well-formed (ASCII). @param bytes The byte array to check. @param off Start index. @param len Length of the segment.
1497 Copies elements from src to dst array. @param src Source array, offset, len, and destination array. @param <T> Type of the destination array. @return Destination array containing copied elements.
1498 Copies a portion of an array to a new Object array. @param elements source array, offset, length @return New Object array containing copied elements.
1499 Writes bytes to a destination array. @param dest Destination array. @param offset Start offset in the array. @param maxLength Maximum number of bytes to write. @return Number of bytes written.
1500 Encodes a byte array to a String. @param bytes bytes to encode @param off start offset in bytes @param len number of bytes to encode @return encoded String
1501 Reads up to len bytes from the input stream into the byte array. @param in Input stream to read from. @param b Byte array to read into. @param off Offset into the byte array. @param len Maximum number of bytes to read. @return Actual number of bytes read.
1502 Reverses the portion of array between fromIndex and toIndex (exclusive). @param array array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1503 Reverses the portion of the array between fromIndex and toIndex. @param array array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1504 Reverses the portion of the array between fromIndex and toIndex. @param array the array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1505 Reverses the portion of the array between fromIndex and toIndex. @param array array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1506 Reverses the portion of the array between fromIndex and toIndex. @param array array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1507 Returns a new array containing elements from startIndex to endIndex. @param startIndex start index (inclusive) @param endIndex end index (exclusive) @return Subarray of elements
1508 Returns a new IntArray containing elements from startIndex to endIndex. @param startIndex start index (inclusive) @param endIndex end index (exclusive)
1509 Returns a new LongArray containing elements from startIndex to endIndex. @param startIndex start index (inclusive) @param endIndex end index (exclusive) @return new LongArray sub-array
1510 Reverses the portion of the array from fromIndex to toIndex. @param array array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1511 Reverses the portion of the array from fromIndex to toIndex (exclusive). @param array array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1512 Reverses the portion of the array between fromIndex and toIndex. @param array array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1513 Sorts a portion of a byte array using flip and sort. @param array Array to sort. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1514 Sorts a portion of the byte array in descending order. @param array Array to sort, fromIndex and toIndex define the range.
1515 Sorts a portion of the array using flip and sort. @param array array to sort, fromIndex and toIndex define range.
1516 Sorts a portion of the array in descending order. @param array the array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1517 Sorts a portion of the array in ascending order. @param array array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1518 Sorts a portion of the array in descending order. @param array array to sort, fromIndex and toIndex define the range.
1519 Filters a collection based on a predicate. @param unfiltered Collection to filter. @param predicate Predicate to apply to each element. @return A filtered collection.
1520 Creates a Splitter that uses the given character as a separator. @param separator The character to use for splitting strings. @return A Splitter instance.
1521 Default constructor for SleepingStopwatch. No-op.
1522 Constructs a Finalizer with queue, class, and reference. @param finalizableReferenceClass Class to finalize @param queue Reference queue @param frqReference PhantomReference
1523 Default constructor for the Builder class.
1524 Creates a new builder instance for constructing objects. @return A new Builder object.
1525 Default constructor for the Builder class.
1526 Default constructor for ForwardingSortedMultiset.
1527 Protected constructor for ForwardingDeque. Default implementation.
1528 Default constructor for ForwardingBlockingQueue.
1529 Default constructor for ForwardingSortedSet. No-op.
1530 Protected constructor for creating a ForwardingNavigableMap.
1531 Returns an unmodifiable view of the given BiMap. @param bimap The BiMap to wrap in an unmodifiable view. @return An UnmodifiableBiMap.
1532 Creates a new MutableClassToInstanceMap. Returns an empty map to store class-instance mappings.
1533 Creates a MutableClassToInstanceMap from a backing map. @param backingMap Map of class to instance. @return New MutableClassToInstanceMap.
1534 Creates an empty ImmutableTypeToInstanceMap.
1535 Default constructor for ForwardingSortedSetMultimap.
1536 Returns an unmodifiable Multimap. Returns delegate if already unmodifiable.
1537 Returns an unmodifiable view of the given table. @param table The table to wrap in an unmodifiable view. @return An UnmodifiableTable wrapping the input table.
1538 Wraps a Future to make it executable in a pool thread. @param future The Future to wrap. @param executor Executor to run the Future in. @return ListenableFuture that wraps the given Future.
1539 Retrieves the value if the given key is present, otherwise null.
1540 Retrieves a value by key, loading it if necessary. @param key The key to retrieve. @param valueLoader Callable to load value if not present. @return The value associated with the key.
1541 Returns a map of values for the given keys from the delegate. @param keys keys to retrieve values for @return Map of values or empty map if no keys are present
1542 Puts a key-value pair into the underlying map. Delegates to the map implementation.
1543 Adds all entries from the given map to this map. @param m the map whose entries are added
1544 Invalidates all entries associated with the given keys. @param keys Iterable of keys to invalidate.
1545 Creates a new entry for a segment. @param segment The segment to add to. @param key The key of the entry. @param hash The hash code. @param next The next entry in the chain.
1546 Creates a new entry for the segment. @param segment The segment to add to. @param key The key. @param hash The hash. @param next Next entry.
1547 Creates a new entry for a segment. @param segment Segment to add entry to. @param key Key for the entry. @param hash Hash code of the key. @param next Next entry in the chain.
1548 Creates a new entry for a segment. @param segment The segment to add to. @param key The key. @param hash The hash. @param next Next entry.
1549 Creates a new reference entry for a given segment. @param segment The segment to create the entry in. @param key The key for the entry. @param hash The hash code for the key. @param next The next entry in the chain.
1550 Creates a new reference entry for a segment. @param segment The segment to create in. @param key The key. @param hash The hash. @param next Next entry.
1551 Sets the value for a reference entry, updating its reference. @param entry The reference entry to update. @param key The key associated with the value. @param value The new value to set. @param now The current timestamp.
1552 Returns the number of elements in the delegate iterable.
1553 Calculates the number of edges in the graph. Returns the total edge count, derived from node degrees.
1554 Converts an InputStream to a byte array. @param in Input stream to convert. @throws IOException if an I/O error occurs.
1555 Reads bytes from an InputStream into a byte array, up to expectedSize. @param in InputStream to read from. @param expectedSize Expected number of bytes to read. @return Byte array containing read bytes, or null if error.
1556 Constructs a new AbstractBiMap with the given forward and backward maps.
1557 Removes all values associated with the given key. @param key The key to remove values for. @return List of removed values.
1558 Replaces values for a key with a new iterable, returns old values.
1559 Removes all elements associated with the given key. @param key The key whose elements are to be removed. @return Set of removed values.
1560 Gets the value associated with the given key, from the parent map. @param key The key whose value is to be retrieved. @return The value associated with the key, as a SortedSet.
1561 Returns a string representation of the collection using default format.
1562 Returns a string representation of the object using Maps.toStringImpl.
1563 Creates a new HashMap with the specified expected size. @param expectedSize The initial capacity of the HashMap. @return A new HashMap with the given expected size.
1564 Checks if a graph contains a cycle. @param graph The graph to check. @return True if a cycle exists, false otherwise.
1565 Creates a HashBasedTable with specified row and cell capacity. @param expectedRows expected number of rows @param expectedCellsPerRow expected cells per row @return HashBasedTable instance
1566 Creates a LinkedHashMap with the specified expected size. @param expectedSize The initial size of the map. @return A new LinkedHashMap.
1567 Creates a map with the specified expected size based on the type. @param expectedSize The expected size of the map to create. @return A map implementation.
1568 Creates a new HashSet with the specified expected size. @param expectedSize The initial size of the HashSet. @return A new HashSet with the expected size.
1569 Creates a LinkedHashSet with the specified expected size. @param expectedSize The initial size of the LinkedHashSet. @return A new LinkedHashSet.
1570 Initializes ServiceManagerState with a collection of services. @param services Immutable collection of Service objects.
1571 Returns the first entry in the multiset, or null if empty.
1572 Returns the last entry in the multiset, or null if empty. Creates an immutable entry with element and count.
1573 Polls the first entry from the multiset. Returns null if empty.
1574 Polls the last entry from the multiset in descending order. Returns the entry or null if the multiset is empty.
1575 Returns the entry set of the multiset. Delegates to superclass.
1576 Returns the entry set view of the multiset. Delegates to the superclass implementation.
1577 Creates a TreeRangeSet from a RangeSet. @param rangeSet The RangeSet to copy. @return A new TreeRangeSet containing the ranges.
1578 Creates a TreeRangeSet from an iterable of ranges. @param ranges iterable of ranges to add to the set. @return A TreeRangeSet containing the ranges.
1579 Returns a navigable map backed by this multimap. Returns a view of the multimap's keys and associated values.
1580 Returns the set of cells, delegating to the superclass.
1581 Returns a collection of the values in this map.
1582 Returns the reversed range. Creates a new range if reverse is null.
1583 Creates an immutable cell with the given row key, column key, and value.
1584 Returns an immutable set containing elements of this set.
1585 Associates the specified key with the given value. @param key The key for the entry. @param value The value for the entry. @return This builder.
1586 Creates an immutable map with two entries. @param k1, v1 first entry @param k2, v2 second entry @return ImmutableMap containing the two entries
1587 Creates an immutable map with three entries. @param k1, k2, k3 keys @param v1, v2, v3 values @return ImmutableMap containing the three entries
1588 Creates an immutable map with the given key-value pairs. @param k1, k2, k3, k4 keys @param v1, v2, v3, v4 values @return ImmutableMap containing the provided entries
1589 Creates an immutable map from the given key-value pairs. @param k1, k2, k3, k4, k5 keys @param v1, v2, v3, v4, v5 values @return ImmutableMap containing the provided entries
1590 Creates an immutable map with the given key-value pairs. @param k1, v1, ..., k6, v6 keys and values for the map @return An ImmutableMap containing the provided entries
1591 Creates an immutable map from the given key-value pairs. @param k1, v1, ..., k7, v7 keys and values to populate the map @return ImmutableMap containing the provided entries
1592 Creates an immutable map from eight key-value pairs.
1593 Creates an immutable map from the given key-value pairs.
1594 Creates an immutable map from the given key-value pairs.
1595 Creates an immutable map entry from a given entry. @param entry The entry to make immutable. @return An ImmutableMapEntry.
1596 Adds an entry to the map and returns the builder. @param entry The entry to add. @return This builder instance.
1597 Adds all entries from the given iterable to the map. @param entries Iterable of entries to add. @return This builder.
1598 Adds an entry to the map and returns the builder. @param entry The entry to add. @return This builder instance.
1599 Filters a sorted set based on a predicate. @param unfiltered The set to filter. @param predicate The filter condition. @return A new filtered SortedSet.
1600 Trims the map to the current size, potentially resizing.
1601 Trims the set to the current size, potentially resizing.
1602 Checks if the range is empty. @return True if lowerBound equals upperBound, false otherwise.
1603 Checks if two Range objects are equal based on bounds. @param object Object to compare to, must be a Range. @return True if ranges are equal, false otherwise.
1604 Adds the element to the end of the list, at index size(). @param element The element to add. @return True.
1605 Returns a standard iterator for the list.
1606 Returns a list iterator over the list from the beginning.
1607 Finds the first node within the specified range. Returns null if no such node exists.
1608 Creates a new HashBasedTable from the given Table. @param table The table to copy from. @return A new HashBasedTable containing the data.
1609 Creates a new TreeBasedTable with natural ordering for rows/cols.
1610 Creates a new TreeBasedTable with given row and column comparators.
1611 Creates a new HashBiMap with the specified expected size.
1612 Creates a new builder instance for constructing objects. @return A new Builder object.
1613 Constructs a new Builder instance.
1614 Returns a builder that orders elements using natural ordering.
1615 Creates a new Builder instance, using the provided comparator. @param comparator Comparator for ordering keys. @return A new Builder instance.
1616 Returns a Builder using the reverse natural order. Uses Ordering.natural().reverse() for reverse sorting.
1617 Creates an immutable map with the given key-value pair.
1618 Returns an immutable inverse of this bi-map. Maps values to keys.
1619 Creates a new Builder instance. Returns a Builder object for constructing objects of type E.
1620 Creates a new Builder instance with the given comparator. @param comparator Comparator to define the order. @return A new Builder instance.
1621 Returns a Builder using reverse natural order. Returns a new Builder instance.
1622 Returns a builder that sorts elements using natural ordering.
1623 Returns a reversed view of the list. Returns the original list if size <= 1.
1624 Returns an ImmutableList of characters from the given string. @param string The string to convert. @return An ImmutableList containing the string's characters.
1625 Creates an immutable list containing a single element. @param e1 The element to be the sole item in the list. @return An ImmutableList containing only the provided element.
1626 Returns an immutable set of entries. Lazily initialized.
1627 Creates an immutable set containing a single element. @param e1 The element to be added to the set. @return An immutable set with the given element.
1628 Returns the charset, parsing if necessary. Returns Optional<Charset>, null if absent.
1629 Stops all managed services asynchronously. Returns the ServiceManager instance for chaining.
1630 Checks if all services are running. Returns true if all are, false otherwise.
1631 Creates a new Builder with the specified expected size. @param expectedSize The initial capacity of the builder.
1632 Adds all entries from the given multimap to this builder. @param multimap multimap to add entries from @return this builder
1633 Throws a FileSystemException if file deletion fails, including suppressed IOExceptions.
1634 Concatenates multiple iterators into a single iterator. @param inputs Iterators to concatenate; can be empty. @return A new iterator containing elements from all inputs.
1635 Retrieves an entry by key. Returns null if key is null.
1636 Performs cleanup after a read operation, if threshold is met.
1637 Checks if the sorted map contains the key. @param key The key to check. Returns true if present.
1638 Returns a submap with keys from fromKey to toKey (inclusive). @param fromKey start key @param toKey end key @return SortedMap containing keys between fromKey and toKey
1639 Computes the difference between two maps using a value equivalence. @param left Left map. @param right Right map. @param valueEquivalence Equivalence for comparing values. @return MapDifference object representing the difference.
1640 Calculates the difference between two sorted maps. @param left Left sorted map. @param right Right map. @return SortedMapDifference representing the difference.
1641 Constructs an AsyncEventBus with identifier and executor.
1642 Creates an AsyncEventBus with a given executor and exception handler.
1643 Constructs an AsyncEventBus with a provided executor. @param executor Executor for asynchronous event handling.
1644 Creates an EventBus with a given identifier. @param identifier EventBus identifier.
1645 Constructs an EventBus with default name and dispatchers. @param exceptionHandler Handler for exceptions during event handling.
1646 Finds the index of the minimum child of a node. @param index index of the parent node @return index of the minimum child
1647 Finds the minimum grandchild of a node at the given index. Returns -1 if no grandchild exists.
1648 Retrieves and removes the last element of the list, or null if empty.
1649 Moves element x up the heap until heap property is restored. @param index Index of the element to move up. @param x The element to be moved.
1650 Checks if the collection contains the given object. @param object The object to search for. @return True if found, false otherwise.
1651 Adds an element to the collection and returns true. @param element The element to add. @return True after adding the element.
1652 Removes a single instance of the element. @param element element to remove @return true if removed, false otherwise
1653 Clears the map entries using the entry set iterator.
1654 Counts occurrences of an object in the entry set. @param object The object to count. Returns 0 if not found.
1655 Calculates the hash code based on the entry set's hash code.
1656 Returns a string representation of the map, using entry set.
1657 Converts collection to an array of type T. @param array The array to convert, can be null. @return An array of type T.
1658 Polls the last element from the iterator. Returns the element or null if empty.
1659 Returns a sorted subset from fromElement (inclusive) to toElement (exclusive).
1660 Returns the element immediately preceding {@code e} in the set. @param e the element to find the predecessor of @return the predecessor element, or null if none exists
1661 Returns the element immediately preceding 'e' in the set, or null.
1662 Returns a sorted set containing elements less than `toElement`. @param toElement element to which the head set extends, exclusive.
1663 Returns the next higher element than 'e' in the sorted set, or null.
1664 Returns the next higher element than 'e' or null if none.
1665 Returns a sub-set by lower (inclusive) and upper (exclusive) bounds.
1666 Returns a sorted set containing elements not less than fromElement. @param fromElement the lower bound, inclusive @return a new sorted set
1667 Returns a sorted set of row keys. Returns the keyset of the underlying row map.
1668 Returns the row map, casting the result to SortedMap.
1669 Returns a synchronized deque backed by the given deque. @param deque the deque to be synchronized @return a synchronized deque
1670 Constructs an ArrayBasedCharEscaper with a replacement map. @param replacementMap Map of characters to their escaped strings. @param safeMin The inclusive lower bound of safe characters. @param safeMax The inclusive upper bound of safe characters.
1671 Creates an Escaper instance from the character array. @return An Escaper object wrapping the character array.
1672 Creates an ArrayBasedUnicodeEscaper with a replacement map. @param replacementMap Char to String map for escaping. @param safeMin Minimum safe character code. @param safeMax Maximum safe character code. @param unsafeReplacement Replacement for unsafe chars.
1673 Creates a HashCode from a byte array. @param bytes The byte array to create the HashCode from. @return A HashCode object.
1674 Creates a HashCode from a string. String must be at least 2 chars.
1675 Combines multiple HashCode objects into a single HashCode. @param hashCodes Iterable of HashCode objects to combine. @return Combined HashCode.
1676 Combines an iterable of HashCode objects into a single HashCode. Requires at least one HashCode and all must have same bit length.
1677 Computes HMAC-MD5 hash using the provided key. @param key The secret key for HMAC-MD5 calculation. @return HMAC-MD5 hash object.
1678 Creates an HMAC-SHA1 hash function from a byte key. @param key The secret key to use for the HMAC. @return An HmacSHA1 hash function.
1679 Creates an HMAC-SHA256 HashFunction from a byte key. @param key The secret key as a byte array. @return HMAC-SHA256 HashFunction.
1680 Calculates HMAC-SHA512 hash using the provided key. @param key The secret key for HMAC calculation. @return HMAC-SHA512 HashFunction object.
1681 Wraps a byte array as a ByteSource. @param b The byte array to wrap. @return A ByteSource backed by the given byte array.
1682 Wraps a CharSequence for efficient character access. Uses StringCharSource for Strings, CharSequenceCharSource otherwise.
1683 Writes an iterable of lines to the output stream. Uses system line separator.
1684 Writes lines from a stream to the output, using default line separator. @param lines Stream of character sequences to write. @throws IOException if an I/O error occurs.
1685 Reads a BloomFilter from an InputStream. @param in InputStream to read from. @param funnel Funnel function for hashing elements. @throws IOException if an I/O error occurs.
1686 Calculates the mean of a collection of numbers. @param values iterable of Number objects @return the arithmetic mean of the numbers
1687 Calculates the base-2 logarithm of a double, rounded according to mode. @param x The double value. Must be positive and finite. @param mode Rounding mode to apply. @return The base-2 logarithm of x.
1688 Detects hash flooding in a hash table. @param hashTable The hash table to check. @return True if hash flooding is detected, false otherwise.
1689 Adds an element to the buffer, maintaining sorted order. @param elem The element to add.
1690 Creates a new Alphabet with case ignored. Returns a new Alphabet instance with ignoreCase set to true.
1691 Creates a TopKSelector to find the k smallest elements. @param k the number of smallest elements to select @param comparator comparator for ordering elements
1692 Creates a TopKSelector to find the k largest elements. @param k The number of largest elements to select. @param comparator Comparator for ordering the elements.
1693 Creates a new LinearTransformation based on two points (x1,y1) and (x2,y2).
1694 Calculates a least-squares linear transformation. Returns LinearTransformation or forNaN if conditions aren't met.
1695 Calculates a least squares linear transformation. Returns LinearTransformation or forNaN if conditions fail.
1696 Checks if a long is prime using a combination of methods. @param n The number to check for primality. @return True if n is prime, false otherwise.
1697 Calculates the floor of the base-10 logarithm of a BigInteger. @param x BigInteger value to calculate log10 for, must be positive. @param mode RoundingMode to use for the calculation.
1698 Calculates the binomial coefficient (n choose k). @param n non-negative integer @param k non-negative integer, k <= n @return binomial coefficient, may be Long.MAX_VALUE on overflow
1699 Calculates the mean of a collection of numbers. @param values Iterable of Number objects @return The arithmetic mean of the numbers.
1700 Adds two values and updates statistics for correlation calculation. @param x The first value to add. @param y The second value to add.
1701 Adds all numbers from the iterable to the collection as doubles.
1702 Adds all numbers from the iterator to the collection. @param values Iterator of Number objects to add.
1703 Adds all stats from the given Stats object. @param values Stats object containing values to add.
1704 Adds all stats from another accumulator. @param values Accumulator whose stats to merge.
1705 Selects the element at the 'required' index in the range [from,to].
1706 Adds all elements from a DoubleStream to the builder. @param stream Stream of doubles to add. @return This builder instance.
1707 Adds all elements from the given iterable to the builder. @param values iterable of doubles to add. @return this builder.
1708 Adds all elements from the IntStream to the builder. @param stream IntStream containing elements to add. @return This builder instance.
1709 Adds all elements from the given iterable to the builder. @param values Iterable of integers to add. @return This builder instance.
1710 Adds all elements from a LongStream to the builder. @param stream The LongStream to add elements from. @return This builder instance.
1711 Reads object data from input stream. Populates the 'longs' AtomicLongArray from deserialized data.
1712 Adds all elements from the given iterable to the builder. @param values Iterable of Long values to add. @return This builder instance.
1713 Tries to parse a string to an Integer. @param string The string to parse. @return Integer parsed from string, or null if parsing fails.
1714 Parses a string to an UnsignedInteger, using base 10. @param string The string to parse. @return The UnsignedInteger value.
1715 Divides this UnsignedLong by another. @param val The divisor UnsignedLong value. @return The quotient of the division.
1716 Converts a long to a string representation in the specified radix. @param x The long value to convert. @param radix The radix (base) to use for the conversion.
1717 Calculates (a * b) % m, preventing overflow. @param a base @param b base @param m modulus @return result of the modular multiplication
1718 Calculates (a * a) % m. @param a The base number. @param m The modulus. @return The result of the modular squaring operation.
1719 Calculates the modulo of this UnsignedLong with another. @param val The divisor. @return The remainder of the division.
1720 Parses a String to an UnsignedLong. @param string String to parse, base is 10. @return UnsignedLong representation of the string.
1721 Checks if two Entry objects are equal based on key and value. @param object The object to compare to, must be an Entry. @return True if equal, false otherwise.
1722 Calculates a standard hash code based on key and value. Returns 0 if either key or value is null.
1723 Returns a string representation of the key-value pair. @return String combining the key and value with an equals sign.
1724 Checks if the component is an array. @return True if it's an array, false otherwise.
1725 Decorates an ExecutorService to a ListeningExecutorService. Handles ScheduledExecutorService as well.
1726 Returns a ListeningScheduledExecutorService, or wraps the delegate. @param delegate The ScheduledExecutorService to decorate. @return A ListeningScheduledExecutorService.
1727 Executes tasks from collection, returning the result of first completed. @param executorService Executor service to run tasks. @param tasks Callable tasks to execute.
1728 Creates a CombinedFuture to execute an AsyncCallable. @param combiner AsyncCallable to execute. @param executor Executor for asynchronous execution. @return CombinedFuture instance.
1729 Creates a CombinedFuture to execute a Callable with an executor. @param combiner Callable to execute. @param executor Executor to run the Callable. @return CombinedFuture instance.
1730 Checks if lock acquisition is safe; throws exception if unsafe. @param policy Policy to handle potential deadlocks. @param acquiredLock Lock already acquired.
1731 Reloads a value associated with a key. @param key The key to reload. @param oldValue The old value associated with the key. @return A ListenableFuture representing the reload operation.
1732 Returns a ListenableFuture representing the status of the future.
1733 Submits an async callable to an executor, returning a future. @param callable The async callable to execute. @param executor The executor to run the callable with.
1734 Retrieves a value from a Future, handling specified exceptions. @param validator Validator for exception class. @param future Future to retrieve from. @param exceptionClass Exception class to wrap. @return Value from the Future.
1735 Retrieves the result of a Future with a timeout, throwing a checked exception. @param future Future to retrieve the result from. @param exceptionClass Expected exception type. @param timeout Timeout duration. @param unit Timeout unit. @return Result of the Future. @throws X Exception of specified type.
1736 Releases the lock held by the current thread. Signals the next waiting thread if this is the last release.
1737 Awaits condition satisfaction, waiting up to nanos. Signals next waiter before waiting if requested.
1738 Wraps a future with a timeout. Returns the future if done. @param delegate The future to wrap. @param time Timeout duration. @param unit Time unit for timeout. @param scheduledExecutor Executor for timeout scheduling. @return ListenableFuture with timeout.
1739 Schedules a callable to run after a delay. @param callable The callable to execute. @param delay The delay before execution. @param executorService ExecutorService to use. @return ListenableFuture representing the scheduled task.
1740 Retrieves an enum constant by its string value. @param enumClass Enum class to search within. @param value String value of the enum constant. @return Enum constant or an empty Optional if not found.
1741 Finds the first element in iterable matching the predicate. @param iterable iterable to search @param predicate predicate to apply to each element @return Optional containing the element, or empty if none match
1742 Checks if any element in the collection matches the predicate. @param predicate Predicate to apply to each element. @return True if any element matches, otherwise false.
1743 Creates a CharMatcher based on totalCharacters and a BitSet. @param totalCharacters Number of characters to consider. @param table BitSet representing character presence. @param description Description of the CharMatcher.
1744 Propagates checked exceptions if possible, recursively. @param throwable The exception to propagate. @param declaredType1, declaredType2 Exception types.
1745 Wraps a Throwable as a RuntimeException and re-throws it. Checks for IOException and unchecked exceptions.
1746 Rethrows a Throwable as a RuntimeException, checking types. @param e The Throwable to rethrow. @param declaredType Exception type to check. @throws X if declaredType is found.
1747 Closes all resources in the stack, suppressing exceptions.
1748 Creates a new thread with the given name and runnable. @param name Thread name. @param runnable Runnable to execute in the thread. @return The newly created Thread object.
1749 Filters keys in a SetMultimap based on the provided predicate. @param unfiltered The SetMultimap to filter. @param keyPredicate Predicate to filter keys. @return A new filtered SetMultimap.
1750 Filters entries in a SetMultimap based on the provided predicate. @param unfiltered The SetMultimap to filter. @param entryPredicate Predicate to determine which entries to keep. @return A filtered SetMultimap.
1751 Retrieves a declared annotation of the specified type. @param annotationType The class of the annotation to retrieve. @return The annotation or null if not found.
1752 Merges sorted iterators into a single unmodifiable iterator. @param iterators Iterable of sorted iterators. @param comparator Comparator for merging elements.
1753 Converts an iterable to an array. @param iterable The iterable to convert. @return An array containing the iterable's elements.
1754 Replaces values associated with a key, returns old values. @param key The key for values to be replaced. @param values Iterable of new values. @return List of old values.
1755 Removes all values associated with the given key. @param key The key whose values should be removed. @return A list of the removed values.
1756 Creates a CopyOnWriteArrayList from an Iterable. @param elements Iterable containing elements for the list. @return A new CopyOnWriteArrayList containing the elements.
1757 Creates a new CopyOnWriteArraySet from the given iterable elements. @param elements Iterable containing elements for the new set. @return A new CopyOnWriteArraySet containing the elements.
1758 Searches a sorted list for a key using binary search. @param list Sorted list to search. @param key Key to search for. @return Index of key if found, otherwise index where it would be inserted.
1759 Retrieves a list of values associated with the provided keys. @param keys Iterable of keys to fetch values for. @return An unmodifiable list of values (L) for the keys.
1760 Returns a string representation of the graph's properties.
1761 Returns a string representation of the graph. Includes directed status, self-loops, nodes, and edges.
1762 Transforms entries in a NavigableMap using a transformer. @param fromMap source NavigableMap @param transformer transforms entries (K, V1) -> V2 @return Transformed NavigableMap with V2 values.
1763 Transforms values in a sorted map using a function. @param fromMap The input sorted map. @param function Function to apply to each value. @return A new sorted map with transformed values.
1764 Adds a specified number of occurrences of an element. @param element element to add @param occurrences number of occurrences to add @return the previous count of the element
1765 Adds a specified number of occurrences of an element. @param element element to add @param occurrences number of occurrences to add @return the previous count of the element
1766 Transforms values in a ListMultimap using a provided function. @param fromMultimap Multimap to transform. @param function Function to apply to each value. @return New ListMultimap with transformed values.
1767 Adds all elements from a collection to this multiset. @param elementsToAdd Collection of elements to add. @return True if the multiset was modified.
1768 Adds all elements from the given collection to this multiset. @param elementsToAdd Collection of elements to add @return True if the multiset was modified.
1769 Returns a synchronized Multimap backed by the given map. @param multimap the Multimap to synchronize @return a synchronized Multimap
1770 Wraps a Table for synchronized access. @param table The Table to be synchronized. @return A synchronized Table.
1771 Escapes a string, replacing special characters. @param string The string to escape. @return The escaped string.
1772 Converts a Readable object to a StringBuilder. @param r Readable object to convert; throws IOException. @return StringBuilder containing the content of the Readable.
1773 Creates a ListenableFuture that catches exceptions of a type. @param input Future to wrap. @param exceptionType Exception type to catch. @param fallback Fallback function. @param executor Executor for fallback. @return ListenableFuture with exception handling.
1774 Attempts to cancel the future. @param mayInterruptIfRunning whether to interrupt running threads @return true if cancellation succeeded, false otherwise
1775 Atomically sets the value. Returns true if successful, false otherwise.
1776 Atomically sets the exception and completes the task if successful. @param throwable The exception to set. @return True if set successfully, false otherwise.
1777 Sets a future value or cancellation. Returns true if successful. @param future The future to set, or null if canceling.
1778 Transforms a ListenableFuture using a function and executor. @param input Future to transform. @param function Function to apply. @param executor Executor for asynchronous execution.
1779 Atomically increments the counter for the given key by 1. @param key The key whose counter is incremented. @return The updated counter value.
1780 Decrements the counter associated with the key by 1. @param key The key for which to decrement the counter. @return The new value of the counter.
1781 Atomically increments the value associated with the key. @param key The key whose value is to be incremented. @return The incremented value.
1782 Atomically gets the value and decrements it by one. @param key The key whose value is to be decremented. @return The previous value associated with the key.
1783 Creates an AtomicLongMap from a given map. @param m Map to initialize the AtomicLongMap with. @return A new AtomicLongMap containing the data from the map.
1784 Constructs a GraphBuilder with the specified direction. @param directed whether the graph is directed
1785 Constructs a NetworkBuilder with the specified directed flag.
1786 Constructs a ValueGraphBuilder with the specified direction. @param directed if the graph is directed
1787 Adds a listener and executor to the listeners list. @param listener The listener to add. @param executor The executor for the listener.
1788 Applies a conversion to the input 'a' and returns the result.
1789 Creates a new, empty CompactHashMap instance.
1790 Creates a new CompactHashMap with the specified expected size. @param expectedSize Initial capacity for the map. @return A new CompactHashMap instance.
1791 Creates a new, empty CompactHashSet. Returns an empty set to store elements.
1792 Creates a new CompactHashSet with the specified expected size. @param expectedSize The initial capacity for the set. @return A new CompactHashSet instance.
1793 Creates a new ListMultimap from a map and a list factory. @param map source map; key type K, value type Collection<V> @param factory list factory for values @return A new ListMultimap instance
1794 Creates a new SetMultimap from a map and a set factory. @param map Source map. @param factory Set creation factory. @return New SetMultimap instance.
1795 Constructs a new Builder with a LinkedHashMultiset.
1796 Combines this converter with another to convert A -> B -> C. @param secondConverter Converter from B to C @return Combined converter
1797 Appends object array parts to the given StringBuilder. @param builder StringBuilder to append to @param parts Object array to append @return StringBuilder with appended parts
1798 Joins elements of an iterable into a single string, using separator. @param parts Iterable of elements to join. @return Joined string.
1799 Creates a MapMakerInternalMap based on the builder's strength settings.
1800 Creates a MapMakerInternalMap with dummy values based on builder strengths.
1801 Concatenates multiple iterables into a single FluentIterable. @param inputs Iterables to concatenate; may be empty.
1802 Retrieves the element at the specified position. @param position the index of the element to retrieve @return the element at the given position
1803 Acquires a lock with a default timeout (1). @return The lock acquisition time in milliseconds.
1804 Enters a timed event. @param time The duration of the timed event. @return True if entry was successful.
1805 Attempts to enter the guard, returning true if satisfied. @param guard The guard to enter. @param time The timeout duration. @param unit The time unit of the timeout.
1806 Creates a CacheBuilder from a CacheBuilderSpec. @param spec CacheBuilderSpec object to create builder from. @return CacheBuilder instance.
1807 Creates a strong interner. Returns a new builder configured for strong interning.
1808 Creates a new weak-typed {@link Interner}. Returns a builder configured for weak references.
1809 Puts a value into the table at the specified row and column. @param rowKey Row key. @param columnKey Column key. @param value Value to set. @return Previous value or null if new.
1810 Erases a cell value at the given row and column keys. @param rowKey Row key. @param columnKey Column key. @return The erased value or null if row/column not found.
1811 Checks if this array is equal to another ImmutableDoubleArray. @param object Object to compare to, must be ImmutableDoubleArray. @return True if arrays are equal, false otherwise.
1812 Checks if this array is equal to another ImmutableIntArray. @param object The object to compare to. @return True if the arrays are equal, false otherwise.
1813 Checks if two ImmutableLongArray objects are equal. @param object The object to compare to. @return True if objects are equal, false otherwise.
1814 Converts a string to a new format based on the provided CaseFormat. @param format The format to apply (e.g., UPPER_CAMEL) @param s The string to convert @return The converted string
1815 Returns the index of the first occurrence of sequence in this string.
1816 Constructor for AbstractIndexedListIterator with default initial offset. @param size The number of elements in the list.
1817 Parses a Teredo IPv6 address and extracts relevant information. @param ip the Teredo IPv6 address to parse @return A TeredoInfo object containing parsed details.
1818 Checks if the byte array is well-formed. Delegates to the overloaded method with start/end indices.
1819 Encodes a byte array into a String. @param bytes The byte array to encode. @return The encoded String.
1820 Reads exactly {@code len} bytes from the input stream into the buffer. @param in Input stream to read from. @param b Buffer to store the bytes. @param off Offset in the buffer. @param len Number of bytes to read. @throws IOException if an I/O error occurs.
1821 Reverses the order of elements in the boolean array.
1822 Rotates a boolean array segment by a distance. @param array array to rotate @param distance rotation distance @param fromIndex start index @param toIndex end index (exclusive)
1823 Reverses the order of elements in the byte array. @param array The byte array to be reversed.
1824 Rotates a portion of the array by the given distance. @param array array to rotate, distance is the shift amount.
1825 Sorts a portion of the byte array in descending order. @param array The byte array to sort. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1826 Sorts a portion of the character array in descending order. @param array array to sort, fromIndex and toIndex define the range.
1827 Reverses the order of elements in the character array. @param array The character array to be reversed.
1828 Rotates a portion of the array by the given distance. @param array array to rotate, distance is the shift amount @param fromIndex start index, toIndex end index (exclusive)
1829 Sorts a portion of the array in descending order. @param array Array to sort. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1830 Reverses the order of elements in the given double array.
1831 Rotates a portion of the array by the given distance. @param array array to rotate, distance is the rotation distance.
1832 Sorts a portion of the array in descending order. @param array Array to sort. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1833 Reverses the elements in the input float array. @param array The float array to be reversed.
1834 Rotates a portion of an array by a given distance. @param array array to rotate, distance is the rotation distance.
1835 Sorts a portion of the array in descending order. @param array array to sort, fromIndex and toIndex define range.
1836 Reverses the elements in the given integer array in-place.
1837 Rotates a portion of the array by a given distance. @param array array to rotate @param distance rotation distance @param fromIndex start index of the section to rotate @param toIndex end index of the section to rotate
1838 Sorts a portion of the array in descending order. @param array Array to sort, fromIndex and toIndex define range.
1839 Reverses the elements in the provided array in-place. @param array The array to be reversed.
1840 Rotates a portion of the array by the given distance. @param array array to rotate @param distance rotation distance @param fromIndex start index @param toIndex end index
1841 Sorts a portion of the array in descending order. @param array array to sort, fromIndex & toIndex define range.
1842 Reverses the order of elements in a short array. @param array The short array to be reversed.
1843 Rotates a short array segment by a given distance. @param array array to rotate, distance is the rotation amount
1844 Sorts the byte array in ascending order. Uses the provided array and sorts it in place.
1845 Sorts a byte array in descending order. @param array The byte array to be sorted.
1846 Sorts the provided integer array in ascending order. @param array The array to be sorted.
1847 Sorts an integer array in descending order. @param array The array to be sorted.
1848 Sorts the provided long array in ascending order. @param array The long array to be sorted.
1849 Sorts the input array in descending order. @param array The array to be sorted.
1850 Creates a splitter that splits by the given separator string. @param separator The string used to split the input. @return A Splitter instance.
1851 Sets the key-value separator character. @param separator The separator character. @return The splitter with the specified separator.
1852 Starts a finalizer thread for a FinalizableReference. @param finalizableReferenceClass FinalizableReference class @param queue Reference queue @param frqReference PhantomReference
1853 Creates a new builder instance for constructing objects. @return A new Builder object.
1854 Creates a new builder instance for constructing objects. @return A new Builder object.
1855 Returns an unmodifiable Multiset. Returns the input if already unmodifiable. @param multiset The multiset to wrap in an unmodifiable view.
1856 Creates a new EvictingQueue with the specified maximum size. @param maxSize The maximum number of elements the queue can hold. @return A new EvictingQueue instance.
1857 Constructs a new ForwardingBlockingDeque. No-op constructor.
1858 Constructs a new ForwardingBlockingDeque. No-op constructor.
1859 Default constructor for ForwardingNavigableSet.
1860 Returns an unmodifiable set of entries from the given set. @param entrySet The set of entries to make unmodifiable. @return An unmodifiable set of entries.
1861 Returns an unmodifiable NavigableMap. @param map The NavigableMap to unmodifiable. @return An unmodifiable NavigableMap.
1862 Returns an unmodifiable ListMultimap. Returns the delegate if already unmodifiable.
1863 Returns an unmodifiable SetMultimap, or the delegate if already unmodifiable.
1864 Returns an unmodifiable view of the given RowSortedTable. The table's row type remains mutable.
1865 Wraps a Future as a ListenableFuture, if not already one. @param future The Future to wrap. @return A ListenableFuture.
1866 Adds a callback to a ListenableFuture to be executed on an executor. @param future The future to add the callback to. @param callback The callback to be executed. @param executor The executor to run the callback on.
1867 Constructs a LocalCache with the provided builder and loader. @param builder CacheBuilder configuring cache parameters. @param loader CacheLoader to load values for cache entries.
1868 Creates a new TreeMultiset with natural ordering. Returns a TreeMultiset instance.
1869 Creates a new TreeMultiset. @param comparator Comparator for ordering elements, or null for natural order. @return A new TreeMultiset instance.
1870 Replaces values associated with a key, delegating to superclass. @param key The key for value replacement. @param values Iterable of new values. @return List of replaced values.
1871 Replaces values for a key, delegating to the superclass. @param key The key for which values are replaced. @param values Iterable of new values for the key. @return Set of replaced values.
1872 Removes all values associated with the given key. @param key The key to remove values for. @return SortedSet of removed values.
1873 Creates a new HashMultiset with the specified number of distinct elements.
1874 Checks if the network contains a cycle. Returns true if cycle is found, false otherwise.
1875 Creates a new LinkedHashMultiset allowing distinctElements. @param distinctElements the maximum number of distinct elements @return a new LinkedHashMultiset instance
1876 Constructs a StandardNetwork using the provided builder.
1877 Constructs a StandardValueGraph with default initial capacity. @param builder Graph builder instance used for initialization.
1878 Creates a new HashSet with the expected size. @return A new HashSet with initial capacity.
1879 Creates a new LinkedHashSet with the specified expected size.
1880 Adds a cell to the table. @param rowKey Row key of the cell. @param columnKey Column key of the cell. @param value Value of the cell. @return This builder instance.
1881 Adds a key-value pair to the map and returns the builder.
1882 Adds a key-value pair to the map builder. @param key The key (Class) @param value The value (T) @return This builder for chaining.
1883 Adds all entries from the map to the builder. @param map Map of class to object to add. @return This builder.
1884 Adds a key-value pair to the builder, using the provided entry.
1885 Puts the specified key-value pair into the map and returns 'this'.
1886 Associates a key-value pair to the map builder. @param key The key (Class type). @param value The value of type T extending B. @return This builder instance for chaining.
1887 Associates a key with a value in the map builder. @param key The key to associate with the value. @param value The value to associate with the key.
1888 Adds all entries from the given iterable to the map. @param entries iterable containing key-value entries @return this builder object
1889 Adds all entries from the given iterable to the map. @param entries Iterable of entries to add. @return This builder for chaining.
1890 Filters a NavigableSet based on the provided predicate. @param unfiltered The set to filter. @param predicate The filter condition. @return A new filtered NavigableSet.
1891 Builds an ImmutableSortedMap based on the current size. Returns an empty map if size is 0, or constructs map.
1892 Adds a range-value pair to the builder. @param range The range to associate with the value. @param value The value to associate with the range.
1893 Adds a range to the list. @param range The range to add. Returns this builder.
1894 Returns the intersection of this range with another range. @param connectedRange the range to intersect with @return the intersection range, or the other range if fully contained
1895 Calculates the gap between two ranges. Throws exception if ranges overlap. @param otherRange the other range to compare with @return a new Range representing the gap
1896 Returns the overlapping range with another range. @param other The other range to intersect with. @return The intersection range, or the other range if fully contained.
1897 Creates a canonical Range based on the given domain. @param domain DiscreteDomain to use for canonicalization @return Canonical Range object.
1898 Creates a new HashBiMap with the default initial capacity. @return A new HashBiMap instance.
1899 Creates a HashBiMap from the given map. @param map source map to populate the bi-map @return A new HashBiMap containing the map's entries
1900 Creates and returns a new Builder instance.
1901 Creates an ImmutableClassToInstanceMap from a class and instance. @param <B> Base type @param <T> Subtype of B @param type Class of the instance @param value Instance of the class @return ImmutableClassToInstanceMap containing the class-instance mapping
1902 Returns the values of this map as an immutable set.
1903 Reverses the given list. Handles ImmutableList, ReverseList, and RandomAccess.
1904 Creates an immutable list from an array. @param elements array to copy from @return ImmutableList containing array elements
1905 Converts an array to an ImmutableList. Handles empty, single, and multiple elements.
1906 Returns a sublist of this list, from fromIndex to toIndex. @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1907 Creates an immutable RangeMap from a range and a value. @param range The range for the entry. @param value The value associated with the range.
1908 Creates an ImmutableRangeSet from a Range. @param range The range to create the set from. @return An ImmutableRangeSet containing the range.
1909 Creates an immutable sorted map with one entry. @param comparator Comparator for keys. @param k1 Key. @param v1 Value.
1910 Creates an immutable set from the given array elements. @param elements array of elements to create the set from @return ImmutableSet containing the array elements
1911 Creates a new Builder instance. Returns a Builder object for constructing the object.
1912 Concatenates two iterators into a single iterator. @param a First iterator. @param b Second iterator. @return Concatenated iterator.
1913 Concatenates three iterators into a single iterator. @param a, b, c Iterators to concatenate. @return A new iterator containing elements from all iterators.
1914 Concatenates four iterators into a single iterator. @param a, b, c, d Iterators to concatenate. @return A new iterator containing elements from all iterators.
1915 Gets an iterator over subscribers for the given event type. @param event The event to find subscribers for. @return An iterator of subscribers.
1916 Retrieves the done value from a ClosingFuture. @param closingFuture Future to get the done value from. @return Done value of the future, or null if it's null.
1917 Checks if the map contains the specified value. @param value value to search for @return true if value is present, false otherwise
1918 Removes the entry for the given key. @param key The key of the entry to remove. @return The value of the removed entry, or null.
1919 Clears the map entries by iterating and removing them.
1920 Checks if the standard entry set is empty. Returns true if empty, false otherwise.
1921 Calculates a standard hash code based on the entry set.
1922 Calculates the difference between two maps. @param left The left map. @param right The right map. @return A MapDifference object representing the difference.
1923 Constructs an EventBus with the default name "default".
1924 Performs crossover operation. Swaps elements if minChild exists and ordering is correct. @param index Current index. @param x Element to crossover. @return Index of the swapped element.
1925 Fills a hole in the queue by traversing to its min grandchild. @param index index of the hole to fill @return index of the last visited node
1926 Checks if the set contains the object using standard comparison. @param object The object to check for containment. @return True if the object is contained, false otherwise.
1927 Removes the specified object from the sorted set, if present. Returns true if an element was removed, false otherwise.
1928 Returns a sorted set containing elements between fromElement and toElement.
1929 Returns a sorted set of row keys. Casts the keyset of the rowMap to SortedSet<R>.
1930 Removes all elements of the set whose keys are equal to key. @param key The key to compare against. Returns a set.
1931 Creates a Bloom filter with a default hashing strategy. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions. @param fpp False positive probability. @return New BloomFilter instance.
1932 Rounds a double to the nearest integer using the given mode. @param x the double to round @param mode the rounding mode to use
1933 Rounds a double to a long according to the specified rounding mode. @param x The double value to round. @param mode The rounding mode to use.
1934 Adds all elements from the iterator to the queue. @param elements Iterator of elements to add.
1935 Returns a TopKSelector for the least k elements, using natural ordering. @param k The number of least elements to select.
1936 Creates a TopKSelector to find the k greatest elements. @param k The number of greatest elements to select.
1937 Checks if a number is prime using LongMath. @param n the integer to check @return true if prime, false otherwise
1938 Calculates the binomial coefficient (n choose k). @param n non-negative integer @param k non-negative integer, k <= n @return binomial coefficient as a BigInteger
1939 Calculates statistics (min, max, sum, count) from a number iterable. @param values Iterable of Number objects to calculate stats from. @return Stats object containing the calculated statistics.
1940 Calculates statistics from an iterator of numbers. @param values Iterator of Number objects to analyze. @return Stats object containing calculated statistics.
1941 Adds all stats from the given PairedStats object. Updates sumOfProductsOfDeltas based on existing yStats.
1942 Calculates stats from a DoubleStream. @param values Stream of double values to analyze. @return Stats object containing calculated statistics.
1943 Calculates stats from an IntStream. @param values IntStream of numerical values. @return Stats object containing calculated statistics.
1944 Calculates stats from a LongStream. @param values Stream of long values to analyze. @return Stats object containing calculated statistics.
1945 Adds all elements from the provided DoubleStream to the stats. @param values The DoubleStream whose elements to add.
1946 Adds all elements from the IntStream to the StatsAccumulator. @param values IntStream containing values to add.
1947 Adds all elements from the LongStream to the StatsAccumulator.
1948 Selects elements in-place based on requirements, recursively. @param allRequired Array of selection requirements. @param requiredFrom Start index for requirements. @param requiredTo End index for requirements. @param array Array to modify. @param from Start index for array selection. @param to End index for array selection.
1949 Creates an ImmutableDoubleArray from an Iterable of Doubles.
1950 Creates an ImmutableIntArray from an Iterable of Integers.
1951 Creates an ImmutableLongArray from an Iterable of Long values.
1952 Converts the long value to a string in the specified radix. @param radix The base to use for the conversion.
1953 Converts a long to its string representation in base 10.
1954 Invokes any of the given Callable tasks, with optional timeout. @param executorService Executor service to run tasks. @param tasks Callable tasks to execute. @param timed Whether to use a timeout. @param timeout Timeout duration. @return Result of the first completed task. @throws InterruptedException, ExecutionException, TimeoutException
1955 Runs a Runnable in an Executor and returns a ListenableFuture. @param combiner Runnable to execute @param executor Executor to run the Runnable on @return ListenableFuture representing the task execution
1956 Creates a ClosingFuture wrapping the given ListenableFuture. @param future The ListenableFuture to wrap. @return A new ClosingFuture instance.
1957 Retrieves and removes the head of the queue, or null if empty.
1958 Attempts to peek at the element; returns null if empty.
1959 Submits a Callable to the executor and wraps it in a ListenableFuture. @param callable The Callable to execute. @param executor Executor to run the callable. @return ListenableFuture that tracks the Callable's execution.
1960 Gets the result of a Future, throwing an exception of type X. @param future The Future to get the result from. @param exceptionClass The exception class to throw on failure. @param timeout Timeout value. @param unit Timeout unit. @return The result of the Future.
1961 Notifies listeners that the service has stopped. Transitions service to TERMINATED state, if applicable.
1962 Notifies the system of a failure, updating state and dispatching events. @param cause The Throwable object representing the failure.
1963 Starts a stopwatch for the given service, if one doesn't exist. @param service The service to start a stopwatch for.
1964 Transitions a service from one state to another. @param service The service to transition. @param from The initial state. @param to The target state.
1965 Waits until the guard condition is met, potentially signaling. @param guard The guard to wait on. @throws InterruptedException If interrupted while waiting.
1966 Waits for a guard to become satisfied. Throws IllegalMonitorStateException if preconditions are not met.
1967 Waits on a guard until it's satisfied, uninterruptibly. @param guard The guard to wait on.
1968 Waits for a guard to be satisfied without interruption. Throws IllegalMonitorStateException if not holding the lock.
1969 Attempts to enter the condition, waiting if necessary. @param guard The condition to wait for. @param time The maximum wait time. @param unit The time unit of the timeout. @return True if the condition is satisfied, false otherwise.
1970 Attempts to acquire the lock until the given time elapses. @param guard Guard to satisfy. @param time Timeout duration. @param unit Time unit of the timeout. @return True if acquired, false otherwise.
1971 Waits for a guard to be satisfied, with a timeout. @param guard The guard to wait for. @param time Timeout duration. @param unit Time unit for the timeout. @return True if guard is satisfied, false if timeout.
1972 Waits uninterruptibly for a guard to become satisfied within a time. @param guard The guard to wait on. @param time The timeout duration. @param unit The time unit of the timeout. @return True if the guard was satisfied, false if timeout.
1973 Sets a timeout for the future, using the provided executor. @param timeout Timeout duration. @param unit TimeUnit of the timeout. @param scheduledExecutor Executor for timeout scheduling.
1974 Wraps a ListenableFuture with a timeout. @param delegate Future to wrap, time timeout duration, executor scheduler
1975 Returns the first element matching the predicate, or empty. @param predicate Predicate to apply to each element.
1976 Creates a CharMatcher, precomputing if possible for efficiency. @return CharMatcher instance, either precomputed or negated.
1977 Rethrows a Throwable as a RuntimeException after checks. @param e Throwable to rethrow @param declaredType1 Type to check for @param declaredType2 Another type to check for @throws IOException, X1, X2 if conditions are met
1978 Writes an array of bytes to the output stream. @param bytes The byte array to write. @throws IOException If an I/O error occurs.
1979 Writes data from an input stream to the open output stream. @param input The input stream to read from. @return Number of bytes written.
1980 Checks if the stream is empty. Returns true if empty, false otherwise.
1981 Returns the size of the data source. Uses cached size if available.
1982 Copies the stream to the given output stream. @param output the output stream to copy to @return number of bytes copied @throws IOException if an I/O error occurs
1983 Copies data from the input stream to the provided sink. @param sink ByteSink to copy data to @return Number of bytes copied
1984 Reads all bytes from the input stream. Returns byte array or throws IOException.
1985 Reads bytes from stream using processor. @param processor Processor to handle the bytes. @return Result of the processor. @throws IOException if an I/O error occurs.
1986 Compares contents of this ByteSource with another. @param other The other ByteSource to compare with. @throws IOException if an I/O error occurs.
1987 Writes a character sequence to the output stream. @param charSequence The sequence of characters to write. @throws IOException If an I/O error occurs.
1988 Writes data from a readable to an output stream. @param readable Source of data to be written. @return Number of characters written.
1989 Returns the length of the stream. Uses cached value if available, otherwise reads from stream.
1990 Copies stream content to an Appendable. @param appendable Destination for the copied content. @return Number of characters copied. @throws IOException If an I/O error occurs.
1991 Copies data to a CharSink. @param sink CharSink to copy data to. @return Number of characters copied. @throws IOException if an I/O error occurs.
1992 Reads and returns the first line from the buffered stream. @return The first line as a String, or null if EOF. @throws IOException if an I/O error occurs.
1993 Reads lines from a stream using a LineProcessor. @param processor Processes each line; returns the result. @return Result of the LineProcessor, or null if applicable. @throws IOException if an I/O error occurs.
1994 Checks if the stream is empty. Returns true if empty.
1995 Expands the table to double its capacity when needed. Reclassifies entries to new bins based on hash.
1996 Filters keys in a Multimap based on the provided predicate. @param unfiltered The Multimap to filter. @param keyPredicate Predicate to filter keys. @return A new Multimap with filtered keys.
1997 Filters values in a SetMultimap based on a predicate. @param unfiltered The SetMultimap to filter. @param valuePredicate Predicate for filtering values. @return Filtered SetMultimap.
1998 Filters multimap entries based on the provided predicate. @param unfiltered The multimap to filter. @param entryPredicate Predicate to apply to each entry. @return A new filtered Multimap.
1999 Creates an iterator for column keys, removing duplicates based on comparator.
2000 Creates an ImmutableBiMap from a given iterable of entries.
2001 Creates an immutable map from the given entries. @param entries iterable of map entries @return ImmutableMap containing the entries
2002 Converts an iterable to an array of the specified type. @param iterable Iterable to convert @param type Array component type @return Array containing elements from the iterable
2003 Creates an immutable sorted set from an iterable using the given comparator.
2004 Performs binary search on a list transformed by keyFunction. @param list List to search. @param keyFunction Function to extract key from list elements. @param key Search key. @return Index of the key, or -1 if not found.
2005 Removes all values associated with the given key. @param key The key whose values are to be removed. @return A list of the removed values.
2006 Transforms values in a NavigableMap using a Function. @param fromMap Input NavigableMap @param function Function to apply to each value @return New NavigableMap with transformed values
2007 Removes a mapping if it exists. @param rowKey Row key of the mapping. @param columnKey Column key of the mapping. @param value Value of the mapping. @return True if mapping was removed, false otherwise.
2008 Returns a synchronized ListMultimap. @param multimap The ListMultimap to synchronize. @return A synchronized ListMultimap.
2009 Returns a synchronized view of the given SetMultimap. @param multimap The SetMultimap to synchronize. @return A synchronized SetMultimap.
2010 Converts a Readable object to a String. @param r The Readable object to convert. @return The String representation of the Readable.
2011 Catches exceptions of a specific type and applies a fallback. @param exceptionType Exception type to catch. @param fallback Function to apply on exception. @param executor Executor for fallback function. @return A FluentFuture that handles the specified exception.
2012 Transforms the Future's value using the given function. @param function Function to apply to the Future's value. @param executor Executor for the function. @return Transformed FluentFuture.
2013 Creates a GraphBuilder for a directed graph. @return GraphBuilder instance for building a directed graph.
2014 Creates a GraphBuilder for undirected graphs. Returns a new GraphBuilder instance.
2015 Creates a GraphBuilder from an existing Graph. @param graph The graph to build from. @return A GraphBuilder configured with graph properties.
2016 Creates a directed network builder. Returns a new NetworkBuilder for directed graph creation.
2017 Creates an undirected network builder. Returns a new NetworkBuilder instance for undirected graphs.
2018 Creates a NetworkBuilder from an existing Network. @param network The Network to copy configuration from. @return A NetworkBuilder initialized with the Network's settings.
2019 Creates a ValueGraphBuilder for a directed graph. Returns a new ValueGraphBuilder configured for directed edges.
2020 Creates a ValueGraphBuilder for an undirected graph. Returns a new ValueGraphBuilder with undirected mode enabled.
2021 Creates a ValueGraphBuilder from an existing ValueGraph. @param graph The ValueGraph to copy configuration from. @return A ValueGraphBuilder initialized with graph's settings.
2022 Adds a listener to the state, executing on the provided executor.
2023 Creates a new, empty CompactLinkedHashSet. Returns an instance of CompactLinkedHashSet.
2024 Creates a CompactHashSet from a collection. @param collection Collection to initialize the set with. @return A new CompactHashSet containing elements from the collection.
2025 Creates a new CompactLinkedHashSet with the specified expected size.
2026 Creates a new SortedSetMultimap from a map and a sorted set factory. @param map initial map of keys to sorted sets @param factory factory for creating sorted sets @return A new SortedSetMultimap instance.
2027 Returns a Collector that accumulates elements into an ImmutableMultiset.
2028 Creates a collector to build an ImmutableMultiset from elements. @param elementFunction Extracts element from input. @param countFunction Returns count for an element.
2029 Creates a new Builder instance for constructing objects. @return A new Builder object.
2030 Joins array elements into a single string. @param parts Array of objects to join. @return Joined string.
2031 Joins the elements of the collection using the provided Joiner. @param joiner Joiner object to use for joining. @return String containing the joined elements.
2032 Simplifies a file path by resolving redundant components. @param pathname The file path to simplify. @return Simplified file path string.
2033 Parses an encoded trie to build a map of public suffix types. @param stack Deque for intermediate domain segments. @param encoded Encoded trie string. @param start Starting index in the encoded string. @param builder Builder for the public suffix type map. @return Number of characters consumed from the encoded string.
2034 Creates a concurrent map, either a ConcurrentHashMap or MapMakerInternalMap. @return A ConcurrentMap implementation.
2035 Transforms elements and concatenates the resulting iterables. @param function Function to transform each element. @return A FluentIterable containing transformed elements.
2036 Concatenates multiple iterables into a single iterable. @param inputs Iterables to concatenate. @return A new iterable containing all elements.
2037 Retrieves a value after a specified timeout. @param timeout Timeout duration. @param unit Time unit for the timeout. @return The retrieved value.
2038 Adds a new node to the graph and returns its connections. @param node The node to add. @return GraphConnections object for the new node.
2039 Attempts to enter the guard within the specified duration. @param guard The guard to enter. @param time Duration to wait, saturated to fit in nanos.
2040 Converts a string to a new format based on the provided format. @param format CaseFormat to apply @param s string to convert @return converted string
2041 Converts a string to a different case format. @param format CaseFormat enum specifying the target format @param s input string to convert @return converted string
2042 Converts a string to a different case format. @param format CaseFormat enum defining conversion rules. @param s String to convert. @return Converted string.
2043 Converts a string to a specified case format. @param format Target CaseFormat. @param str String to convert. @return Converted string.
2044 Checks if the CharSequence does not contain the sequence. @param sequence the CharSequence to search for @return true if the sequence is not found, false otherwise
2045 Removes the leading characters that match the regex. @param sequence CharSequence to remove from @return Modified string with leading characters removed
2046 Replaces characters in sequence with replacement char. @param sequence CharSequence to modify @param replacement Char to replace matching chars with @return Modified string
2047 Extracts an embedded IPv4 address from an Inet6Address. @param ip The Inet6Address to check. @return The embedded Inet4Address or null if not found.
2048 Reads bytes from the input stream and updates the hasher. @param bytes buffer to store read bytes @param off offset in the buffer @param len maximum number of bytes to read @return Number of bytes read, or -1 if EOF.
2049 Reads all bytes from the input stream into the provided byte array. @param in The InputStream to read from. @param b The byte array to fill. @throws IOException if an I/O error occurs.
2050 Rotates elements in a boolean array by a specified distance.
2051 Rotates elements in a byte array by a specified distance. @param array The byte array to rotate. @param distance The number of positions to rotate.
2052 Sorts the byte array in descending order. @param array The byte array to be sorted.
2053 Sorts a char array in descending order. @param array The char array to be sorted.
2054 Rotates an array by a specified distance. @param array The array to rotate. @param distance The distance to rotate by.
2055 Sorts the input array in descending order. @param array The array to be sorted.
2056 Rotates an array by a specified distance. @param array The array to rotate. @param distance The number of positions to rotate.
2057 Sorts an array of floats in descending order. @param array The array to be sorted.
2058 Rotates an array by a specified distance. @param array The array to rotate. @param distance The number of positions to rotate.
2059 Sorts an integer array in descending order. @param array The array to be sorted.
2060 Rotates an array to the right by a specified distance. @param array The array to rotate. @param distance The number of positions to rotate.
2061 Sorts the input array in descending order. @param array The array to be sorted.
2062 Rotates an array to the right by a specified distance. @param array The array to rotate. @param distance The number of positions to rotate.
2063 Sorts a short array in descending order. @param array The short array to be sorted.
2064 Rotates the array elements by a given distance. @param array The array to rotate. @param distance The number of positions to rotate.
2065 Sets the key-value separator. @param separator Separator string for key-value pairs. @return Chainable splitter with the specified separator.
2066 Creates a RateLimiter with specified permits/second, warmup, and unit. @param permitsPerSecond permits per second @param warmupPeriod warmup period in the given unit @param unit time unit for the warmup period @return a RateLimiter instance
2067 Returns an unmodifiable view of the given sorted multiset. @param sortedMultiset the sorted multiset to wrap @return an unmodifiable sorted multiset
2068 Returns an unmodifiable NavigableSet view of the given set. Returns the set if already unmodifiable.
2069 Returns an unmodifiable collection of entries. Handles Set types for optimized unmodifiable view.
2070 Returns an unmodifiable view of the given SortedSetMultimap. Returns the delegate if already unmodifiable.
2071 Creates a ClosingFuture that closes the AutoCloseable on success. @param future The future wrapping the AutoCloseable. @param closingExecutor Executor for closing the resource. @return A ClosingFuture that manages closing.
2072 Adds a callback to be executed when the Future completes. @param callback Callback to run on completion. @param executor Executor for the callback execution.
2073 Creates a new EnumBiMap with specified key and value types. @param keyType Key enum type. @param valueType Value enum type. @return New EnumBiMap instance.
2074 Creates a new EnumHashBiMap with the given key type. @param keyType The enum class to use as keys. @return A new EnumHashBiMap instance.
2075 Creates a TreeMultiset from an iterable of elements. @param elements iterable containing elements to add @return A new TreeMultiset containing the elements.
2076 Constructs a new Builder using the provided comparator. @param comparator Comparator for element ordering.
2077 Replaces values for a key with values from an iterable. @param key The key to replace values for. @param values Iterable of new values. @return SortedSet of values (cast from superclass).
2078 Replaces values for a key with the provided iterable. @param key The key to replace values for. @param values Iterable of new values. @return The replaced values.
2079 Creates a HashMultiset from an iterable of elements. @param elements iterable containing elements to add @return A HashMultiset containing the elements.
2080 Creates a new ArrayListMultimap with specified expected sizes. @param expectedKeys Initial expected number of keys. @param expectedValuesPerKey Initial expected values per key.
2081 Creates a new HashMultimap with initial capacity estimates. @param expectedKeys Expected number of keys. @param expectedValuesPerKey Expected values per key.
2082 Creates a HashMultimap from a given Multimap. @param multimap The Multimap to copy. @return A new HashMultimap containing the same entries.
2083 Creates a new LinkedListMultimap with the specified expected keys.
2084 Creates a LinkedHashMultiset containing elements from the iterable. @param elements Iterable of elements to add to the multiset. @return A new LinkedHashMultiset.
2085 Creates a new LinkedHashMultimap with default capacities. Returns the newly created multimap instance.
2086 Creates a new LinkedHashMultimap with specified capacities. @param expectedKeys Initial capacity for keys. @param expectedValuesPerKey Initial capacity per key. @return A new LinkedHashMultimap instance.
2087 Constructs a StandardMutableNetwork using the provided builder.
2088 Constructs a StandardMutableValueGraph using the provided builder. @param builder Graph builder for initializing the graph.
2089 Adds a cell to the builder. Handles immutable cells differently. @param cell The cell to add. @return This builder for chaining.
2090 Adds the given entry to the map and returns the builder.
2091 Adds all entries from the given iterable to the map. @param entries Iterable of entries to add. @return This builder.
2092 Adds an entry to the map and returns the builder. @param entry The entry to add. @return This builder instance.
2093 Returns this view as an {@code ImmutableSetMultimap}. Creates a new multimap if {@code multimapView} is null.
2094 Builds the sorted map. Returns the map or throws an exception.
2095 Adds all entries from the given RangeMap to this RangeMap. @param rangeMap the RangeMap to copy entries from @return this builder
2096 Adds all ranges from the iterable to the builder. @param ranges iterable of Range objects to add @return this builder
2097 Returns ranges intersecting the given range. @param range The range to intersect with existing ranges. @return ImmutableList of intersecting ranges.
2098 Creates a contiguous set defined by a range and discrete domain. @param range Range defining the set's bounds. @param domain Discrete domain of the set. @return ContiguousSet object.
2099 Returns a range if it matches the given value and entry. @param range The range to check. @param value The value to match. @param entry The entry to compare. @return The spanned range or the original range.
2100 Returns a sorted set view of the elements in this range set. @param domain the discrete domain of the elements @return ImmutableSortedSet containing the elements
2101 Creates an ImmutableMap from a Map with Enum keys. @param map The source Map. @return An ImmutableMap containing the key-value pairs.
2102 Returns an immutable map of rows to column-value maps.
2103 Returns an iterator over elements in descending order.
2104 Builds an immutable list from the current contents. Sets copyOnWrite to true. @return ImmutableList containing the elements.
2105 Converts an array to an ImmutableList. @param elements array to convert @return ImmutableList containing the array elements
2106 Builds an ImmutableSortedSet. Returns an empty set if n is 0.
2107 Creates an ImmutableMap from an array of entries. @param n size of the map @param entryArray array of map entries @param throwIfDuplicateKeys whether to throw on duplicate keys @return ImmutableMap containing the entries
2108 Finds the index of a suffix matching the desired type. @param desiredType The desired PublicSuffixType to match.
2109 Creates an immutable set from an iterable of enum elements. @param elements Iterable containing enum values. @return An ImmutableSet containing the elements.
2110 Returns an unmodifiable iterator for the elements in this collection.
2111 Posts an event to subscribers. Recursively posts DeadEvent if no subscribers.
2112 Attempts crossover and bubble-up operation. Returns MoveDesc if successful, null otherwise.
2113 Returns the comparator used for ordering rows. Uses requireNonNull to ensure comparator is not null.
2114 Returns a synchronized NavigableSet backed by the given set. @param navigableSet The NavigableSet to synchronize. @return A synchronized NavigableSet.
2115 Creates a BloomFilter with the given funnel, insertions, and FPP. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions. @param fpp False positive probability. @return A new BloomFilter instance.
2116 Creates a Bloom filter with the given funnel and expected insertions. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions. @return A BloomFilter instance.
2117 Estimates the number of elements added using HyperLogLog algorithm.
2118 Returns a collector that finds the least k elements. @param k number of least elements to collect @param comparator comparator for ordering elements
2119 Returns the {@code k} least elements from the iterator. @param iterator Iterator of elements to select from. @param k Number of least elements to return. @return List containing the {@code k} least elements.
2120 Adds all elements from the given iterable to this collection. @param elements Iterable containing elements to add.
2121 Returns a string representation of the value. Uses UnsignedLongs.toString for conversion.
2122 Checks acquired locks before acquiring a lock. Updates the list of acquired locks if necessary.
2123 Transforms the future's value using the provided function. @param function Function to apply to the future's value. @param executor Executor for asynchronous execution. @return A ClosingFuture representing the transformed value.
2124 Transforms the future asynchronously using the given function. @param function Function to transform the future's result. @param executor Executor for asynchronous execution. @return A ClosingFuture representing the transformed result.
2125 Gets the Future's value, throwing X if it's done with an error. @param future Future to get the value from. @param exceptionClass Class of exception to check. @return The Future's value.
2126 Gets the result of a Future, throwing an exception if it fails. @param future Future to retrieve the result from @param exceptionClass Exception class to check @param timeout Timeout duration @return Result of the Future
2127 Reschedules the task, initializing or updating the cancellation delegate. @return Cancellable object to cancel the rescheduled task.
2128 Transitions service to RUNNING or STOPPING state after startup.
2129 Starts all services asynchronously. Returns the ServiceManager instance.
2130 Attempts to enter the guard within the given duration. @param guard The guard to enter. @param time The duration to wait, in Duration units. @throws InterruptedException If interrupted while waiting.
2131 Attempts to enter the guard uninterruptibly within a duration. @param guard the guard to enter @param time the maximum time to wait, in Duration units
2132 Waits for a guard to become true, up to the specified duration. @param guard The guard to wait for. @param time The maximum time to wait. @throws InterruptedException If interrupted while waiting.
2133 Waits uninterruptibly for a guard to signal, or timeout. @param guard The guard to wait on. @param time The maximum duration to wait. @return True if the guard signals within the duration.
2134 Sets a timeout for the Future, using the provided executor. @param timeout Duration for the timeout. @param scheduledExecutor Executor for timeout scheduling. @return Future with timeout applied.
2135 Writes a byte array to a file. @param from The byte array to write. @param to The file to write to.
2136 Computes a hash using the provided HashFunction. @param hashFunction The function to use for hashing. @return Hash object representing the computed hash.
2137 Copies a file to an output stream. @param from Source file to copy. @param to Output stream to write to.
2138 Copies data from a URL to an OutputStream. @param from The URL to copy from. @param to The OutputStream to copy to.
2139 Copies a file from the source to the destination. @param from Source file to be copied. @param to Destination file.
2140 Reads a file and returns its content as a byte array. @param file The file to read. @throws IOException if an I/O error occurs.
2141 Converts a URL to a byte array. @param url The URL to convert. @return Byte array representation of the URL content.
2142 Reads file bytes using a processor. @param file File to read. @param processor Processor for handling bytes. @return Result of the processor.
2143 Checks if two files are equal, comparing length and content. @param file1 The first file to compare. @param file2 The second file to compare. @throws IOException if an I/O error occurs during comparison.
2144 Checks if two paths are equal, using file size and content comparison.
2145 Writes a CharSequence to a file using a specified charset. @param from CharSequence to write @param to File to write to @param charset Charset for encoding
2146 Appends a CharSequence to a file using a specified charset. @param from CharSequence to append @param to File to append to @param charset Charset for encoding
2147 Copies a file's content to an Appendable, using the given charset.
2148 Reads the first line from a file using the specified charset. @param file The file to read. @param charset The character encoding to use. @return The first line or null if the file is empty.
2149 Reads all lines from a file using the specified charset. @param file The file to read. @param charset The character encoding to use. @return A list of strings, each representing a line.
2150 Reads lines from a file using a LineProcessor. @param file File to read. @param charset Charset to use. @param callback LineProcessor to process each line. @return Result of the LineProcessor.
2151 Reads lines from a URL using a charset and processor. @param url URL to read from. @param charset Charset to use. @param callback Processor for each line. @return Result of the processor, or null.
2152 Maps a file into memory. @param file The file to map. @param mode The mapping mode (e.g., READ_ONLY). @throws IOException If an I/O error occurs.
2153 Maps a file into memory. @param file The file to map. @param mode The mapping mode. @param size The size of the mapping. @return A MappedByteBuffer object. @throws IOException If an I/O error occurs.
2154 Adds a delayed shutdown hook to the given ExecutorService. @param service ExecutorService to shutdown. @param terminationTimeout Termination timeout. @param timeUnit Time unit for termination timeout.
2155 Filters a multimap's values based on the given predicate. @param unfiltered Multimap to filter. @param valuePredicate Predicate to apply to each value. @return A new multimap with filtered values.
2156 Creates a compound ordering from an iterable of comparators. @param comparators Comparators to combine for ordering. @return A CompoundOrdering instance.
2157 Returns a copy of the map as an ImmutableBiMap. @param map The map to copy. @return A new ImmutableBiMap containing the map's entries.
2158 Converts the iterable to an array of the specified type. @param type The type of the array to be created. @return An array containing the elements of the iterable.
2159 Converts an iterator to an array of the specified type. @param iterator Iterator to convert. @param type Array component type. @return Array containing elements from the iterator.
2160 Returns a sorted set from this multiset, using the given comparator.
2161 Creates an ImmutableSortedSet from the given iterable. Uses natural ordering of elements.
2162 Creates an immutable sorted set from a collection. @param comparator Comparator for sorting elements. @param elements Collection to create the set from.
2163 Returns a sorted map of rows, mapping row keys to column-value maps.
2164 Returns a string representation of the object, using lazy computation.
2165 Returns a synchronized SortedSetMultimap. @param multimap The SortedSetMultimap to synchronize. @return A synchronized SortedSetMultimap.
2166 Reads the entire content from the stream as a String. @throws IOException if an I/O error occurs.
2167 Creates a new CompactLinkedHashMap with the specified expected size.
2168 Creates a CompactLinkedHashSet from a collection. @param collection Collection to create the set from. @return A new CompactLinkedHashSet containing collection elements.
2169 Creates a new TreeMultimap with natural ordering for keys/values.
2170 Creates a new TreeMultimap with specified key and value comparators.
2171 Checks if the sequence matches any of the defined patterns. @param sequence CharSequence to check against patterns. @return True if any pattern matches, false otherwise.
2172 Removes the negated sequence from the given sequence. @param sequence CharSequence to remove from. @return The resulting CharSequence.
2173 Replaces occurrences of a sequence with a replacement sequence. @param sequence The sequence to be replaced. @param replacement The replacement sequence.
2174 Coerces an InetAddress to an Inet4Address, handling special cases. @param ip The InetAddress to coerce. @return An Inet4Address representation of the input.
2175 Creates a RateLimiter with given permits/second and warmup. @param permitsPerSecond Rate of requests allowed per second. @param warmupPeriod Duration to warm up the rate limiter.
2176 Returns a Set of Map.Entry objects representing the map's entries.
2177 Schedules a task for future execution after a specified delay. @param command Runnable task to execute. @param delay Delay before execution. @param unit Time unit of the delay. @return ListenableScheduledFuture representing the scheduled task.
2178 Creates a LoadingCache using the provided CacheLoader. @param loader Loads values for the cache. @return A new LoadingCache instance.
2179 Builds a local cache instance based on this cache configuration. @return A LocalCache instance.
2180 Creates a Builder with the given comparator for ordering. @param comparator Comparator to define the order. @return A new Builder instance.
2181 Returns a builder that sorts elements in reverse natural order.
2182 Creates a Builder using the natural ordering of elements. @return A Builder instance with natural ordering.
2183 Creates a new EnumBiMap from a Map. @param map The map to initialize the EnumBiMap with. @return A new EnumBiMap containing the map's entries.
2184 Creates a new EnumHashBiMap from a given map. @param map The map to initialize the BiMap with. @return A new EnumHashBiMap containing the map's entries.
2185 Replaces the values associated with the given key. @param key The key whose values are to be replaced. @param values New values to replace the old ones. @return The previous values associated with the key.
2186 Checks if two lists are permutations of each other. @param first The first list. @param second The second list. @return True if lists are permutations, false otherwise.
2187 Creates a new, empty ArrayListMultimap with nullable keys/values.
2188 Creates an ArrayListMultimap from a given Multimap. @param multimap The Multimap to copy. @return A new ArrayListMultimap containing the data.
2189 Creates a new, empty HashMultimap. Returns a HashMultimap with no entries.
2190 Creates a new, empty LinkedListMultimap. Supports nullable keys and values.
2191 Creates a LinkedListMultimap from a given Multimap. @param multimap The Multimap to copy. @return A new LinkedListMultimap.
2192 Creates a LinkedHashMultimap from a given Multimap. @param multimap the Multimap to copy from @return a new LinkedHashMultimap containing the data.
2193 Creates a new MutableNetwork instance from the current builder. @return A MutableNetwork object.
2194 Constructs a StandardMutableGraph using the provided builder. @param builder Graph builder to initialize the graph.
2195 Creates a new MutableValueGraph instance based on the current configuration.
2196 Adds all cells from the given table to this builder. @param table The table to copy cells from. @return This builder.
2197 Adds all entries from the given iterable to the map. @param entries Iterable of entries to add. @return This builder for chaining.
2198 Adds all entries from the given map to this builder. @param map map containing key-value pairs to add @return this builder
2199 Adds all entries from the given iterable to the map. @param entries Iterable of entries to add. @return This builder for chaining.
2200 Filters an AbstractFilteredMap based on a predicate. @param map The map to filter. @param entryPredicate Filter condition for map entries. @return A new filtered map.
2201 Adds all ranges from the given RangeSet. @param ranges RangeSet to add ranges from @return this Builder
2202 Returns the intersection of this set with the given range. @param range The range to intersect with. @return A new ImmutableRangeSet representing the intersection.
2203 Returns a contiguous set of integers from lower to upper (inclusive).
2204 Returns a contiguous set containing all longs from lower to upper (inclusive).
2205 Returns a contiguous set of integers from lower (inclusive) to upper (exclusive).
2206 Returns a contiguous set containing longs from lower (inclusive) to upper (exclusive).
2207 Coalesces a range with neighboring entries using provided value. @param range The range to coalesce. @param value The value to use for coalescing. @return The coalesced range.
2208 Adds a node to the network and returns its connections. @param node The node to add. @return NetworkConnections object for the added node.
2209 Returns an immutable map backed by the given map. Returns the original map if it's an immutable view.
2210 Retrieves a row map for the given row key. @param rowKey The key representing the row. @return ImmutableMap containing row data, or an empty map.
2211 Returns the greatest element < e, or null if none exists. @param e the element to compare against @return the lower element or null
2212 Returns the greatest element of the set less than or equal to given element.
2213 Creates an immutable list from the given iterator. @param elements Iterator providing elements for the list.
2214 Builds an ImmutableRangeMap from the entries. Sorts entries, validates ranges, and constructs the map.
2215 Builds an ImmutableRangeSet from the internal list of ranges. Returns an ImmutableRangeSet or a specialized instance.
2216 Parses the Java classpath and returns a list of URLs.
2217 Returns a list of Parameter objects for this method.
2218 Returns a list of exception types. Converts generic exception types to TypeToken objects.
2219 Wraps a collection of Callable tasks. @param tasks Collection of Callable tasks to wrap. @return ImmutableList of wrapped Callable tasks.
2220 Returns a sorted copy of the given iterable. @param elements Iterable of comparable elements @return Sorted ImmutableList containing the elements
2221 Returns a sorted copy of the given iterable. @param comparator Comparator for sorting elements. @param elements Iterable to be sorted and copied.
2222 Creates an ImmutableSortedSet from an iterator, using the given comparator.
2223 Creates an ImmutableMap from an array of entries. @param n size of the array, must match array length @param entryArray array of map entries @param throwIfDuplicateKeys whether to throw on duplicate keys
2224 Returns the index of the public suffix. Caches the result.
2225 Returns the index of the registry suffix. Caches the result.
2226 Creates an ImmutableSortedMap from entries with a comparator. @param comparator Comparator for keys. @param sameComparator Whether comparator is same as backing map. @param entries Iterable of entries to add.
2227 Creates a new TreeBasedTable with the same comparators, copying all data. @param table The table to copy from. @return A new TreeBasedTable with copied data.
2228 Creates a Bloom filter with the given funnel and expected insertions. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions. @return A new BloomFilter instance.
2229 Returns a collector finding the {@code k} greatest elements. @param k Number of greatest elements to find. @param comparator Comparator for element ordering.
2230 Returns the k smallest elements from the iterable. @param iterable The iterable to extract elements from. @param k The number of smallest elements to return.
2231 Returns the {@code k} greatest elements from the iterator. @param iterator Iterator of elements to consider. @param k The number of greatest elements to return.
2232 Catches exceptions of a specific type and returns a value. @param exceptionType Exception type to catch. @param fallback Fallback function to compute value. @param executor Executor for fallback function. @return ClosingFuture with the result or exception.
2233 Awaits the state to be stopped. Delegates to the internal state.
2234 Waits for the state to be stopped, with a timeout. @param timeout Timeout duration. @param unit Time unit of the timeout.
2235 Returns a precomputed CharMatcher instance for efficiency.
2236 Calculates the hash code of a file using the given hash function. @param file The file to hash. @param hashFunction The hash function to use. @return The hash code of the file.
2237 Moves a file from the specified source to the destination. Copies if rename fails, then deletes originals.
2238 Reads lines from a URL using the specified charset. @param url URL to read from. @param charset Character encoding to use. @return List of strings, each representing a line. @throws IOException if an I/O error occurs.
2239 Maps a file to a MappedByteBuffer with read-only access. @param file The file to map. @return A MappedByteBuffer representing the file.
2240 Gets an exiting executor service. @param executor ThreadPoolExecutor to terminate @param terminationTimeout Timeout for termination @param timeUnit TimeUnit of the timeout @return ExecutorService for exiting tasks
2241 Returns an exiting ScheduledExecutorService. @param executor Executor to use. @param terminationTimeout Termination timeout. @param timeUnit Time unit for the timeout.
2242 Adds a delayed shutdown hook to an ExecutorService. @param service ExecutorService to shutdown. @param terminationTimeout Duration for termination.
2243 Reclaims a key-value entry from the cache. Returns true if found.
2244 Reclaims a value from the map based on key, hash, and reference.
2245 Awaits the healthy state of the underlying component.
2246 Waits until the state is healthy, or timeout expires. @param timeout Timeout duration. @param unit Time unit of the timeout (e.g., SECONDS).
2247 Returns startup times for each service. @return ImmutableMap of Service to startup time (Long)
2248 Retrieves declared annotations of a specific type. @param annotationType The class of the annotation to retrieve. @return Array of annotations of the specified type.
2249 Creates an ImmutableSortedSet from a Collection, using natural order. @param elements Collection to copy; elements must be comparable. @return ImmutableSortedSet containing the elements.
2250 Returns a synchronized NavigableMap backed by the given map. @param navigableMap The NavigableMap to synchronize. @return A synchronized NavigableMap.
2251 Reads file content as a string using specified charset. @param file The file to read. @param charset The charset to use. @return String representation of file content.
2252 Reads URL content as a String using the specified charset. @param url URL to read @param charset Character encoding @return String representation of the URL content
2253 Creates a new, empty CompactLinkedHashMap. Returns an instance of CompactLinkedHashMap.
2254 Creates a TreeMultimap from a Multimap, using natural ordering. @param multimap The Multimap to convert. @return A new TreeMultimap.
2255 Creates a ReentrantLock, either standard or cycle-detecting. @param lockName Lock name for cycle detection (optional) @param fair Whether the lock is fair or not. @return A ReentrantLock instance.
2256 Creates a ReentrantReadWriteLock, fair or cycle-detecting. @param lockName Lock name for cycle detection. @param fair Whether locks are granted fairly. @return A ReentrantReadWriteLock instance.
2257 Creates a map of enum values to LockGraphNodes, initializing locks.
2258 Validates a domain part string. @param part The domain part to validate. @param isFinalPart True if this is the final part. @return True if the part is valid, false otherwise.
2259 Converts an InetAddress to an integer representation.
2260 Checks if the collection contains the given object. @param object The object to search for. @return True if found, false otherwise.
2261 Removes the specified object from the collection. @param object The object to remove. Returns true if removed.
2262 Removes all elements from the set that are contained in the collection. @param collection Collection of elements to remove. @return True if the set was modified, false otherwise.
2263 Retains elements present in the specified collection. @param collection Collection to compare against. @return True if any changes occurred.
2264 Clears the iterator, effectively emptying the collection.
2265 Checks if the standard iterator has no more elements. Returns true if empty, false otherwise.
2266 Converts the collection to an array of Objects. @return An array containing all collection elements.
2267 Schedules a task after a specified delay. @param command Runnable task to execute. @param delay Duration delay before execution. @return ListenableScheduledFuture representing the scheduled task.
2268 Finds all subscribers within a listener, mapping event types to subscribers. @param listener Object containing subscriber methods @return Multimap of event types to Subscriber objects
2269 Creates a subgraph induced by the given nodes from the network. @param network The original network. @param nodes Nodes to include in the subgraph. @return A new MutableNetwork representing the induced subgraph.
2270 Creates a mutable copy of the given network. @param network The network to copy. @return A new MutableNetwork with the same nodes and edges.
2271 Creates a new mutable graph based on the current graph builder. @return A new StandardMutableGraph instance.
2272 Creates a subgraph induced by the given nodes from the graph. @param graph The original graph. @param nodes The nodes to include in the subgraph. @return A new subgraph containing only the specified nodes and edges.
2273 Creates a mutable copy of the given ValueGraph. @param graph The ValueGraph to copy. @return A new MutableValueGraph containing the same nodes and edges.
2274 Adds all entries from the given map to the builder. @param map map containing key-value pairs to add @return this builder
2275 Adds all entries from the given map to the builder. @param map map containing key-value pairs to add @return this builder instance
2276 Filters a NavigableMap based on two predicates. @param map The map to filter. @param entryPredicate Filter predicate for entries. @return A new filtered NavigableMap.
2277 Filters a SortedMap based on a combined predicate. @param map The SortedMap to filter. @param entryPredicate Predicate for filtering entries. @return A new filtered SortedMap.
2278 Filters a map based on a predicate applied to its keys. @param unfiltered The map to filter. @param keyPredicate Predicate for filtering keys. @return A new filtered map.
2279 Filters map entries based on the provided predicate. @param unfiltered The map to filter. @param entryPredicate Predicate to apply to each entry. @return A filtered map containing entries matching the predicate.
2280 Collects elements to an ImmutableSortedMap. @param comparator Comparator for keys. @param keyFunction Extracts key from element. @param valueFunction Extracts value from element.
2281 Creates an ImmutableEnumMap collector. @param keyFunction Extracts the enum key from an object. @param valueFunction Extracts the value from an object.
2282 Creates an ImmutableEnumMap collector. @param keyFunction Maps input to enum key. @param valueFunction Maps input to value. @param mergeFunction Merges values for duplicate keys.
2283 Retrieves type mappings from a given context type. @param contextType The type to introspect for mappings. @return ImmutableMap of TypeVariableKey to Type.
2284 Concatenates ByteSources from an iterator into a single ByteSource.
2285 Concatenates multiple CharSources into a single CharSource. @param sources Iterator of CharSources to concatenate.
2286 Creates an immutable range set from an iterable of ranges.
2287 Creates an immutable sorted multiset from an iterable, using the given comparator.
2288 Creates an immutable sorted multiset from a sorted multiset. @param sortedMultiset The sorted multiset to copy. @return An ImmutableSortedMultiset containing the same elements.
2289 Returns a copy of this collection as an immutable list.
2290 Creates a collector to accumulate elements into an ImmutableSortedSet. @param comparator Comparator for sorting the elements.
2291 Creates an ImmutableSortedSet from the given iterator. Uses natural ordering of elements.
2292 Builds an ImmutableBiMap. Returns empty map if size is 0.
2293 Returns a view of the sorted map from first to but excluding toKey. @param toKey key up to which the head map is returned @param inclusive whether to include toKey
2294 Returns a tail map of the sorted map, keys >= fromKey. @param fromKey Key from which the tail map starts. @param inclusive Whether fromKey is included in the tail map.
2295 Checks if this domain part is a public suffix. Returns true if it is, false otherwise.
2296 Checks if the domain has a public suffix. Returns true if a public suffix is found, false otherwise.
2297 Checks if the domain is under a public suffix. @return True if under a public suffix, false otherwise.
2298 Checks if the domain is a top-level private domain. Returns true if the public suffix index is 1, false otherwise.
2299 Checks if the current registry suffix is the root suffix.
2300 Checks if a registry suffix exists. @return True if a suffix is found, false otherwise.
2301 Checks if the current domain is under a registry suffix. @return True if under a suffix, false otherwise.
2302 Checks if the domain is a top-level domain under a registry suffix.
2303 Creates an immutable sorted map from entries and a comparator. @param entries Iterable of entries to populate the map. @param comparator Comparator for sorting the keys.
2304 Returns an immutable sorted map backed by the given sorted map. @param map The sorted map to copy. @return An immutable sorted map.
2305 Creates an immutable copy of the set. Uses a builder to avoid unnecessary iterations.
2306 Returns a set of raw types that are superclasses of T. Uses TypeCollector to gather super types.
2307 Removes the element at the specified index. @param index index of the element to remove @return MoveDesc object describing changes, or null
2308 Calculates the square root of a BigInteger with specified rounding. @param x BigInteger to find the square root of. @param mode Rounding mode to apply.
2309 Creates an immutable set from an iterator of elements. @param elements Iterator providing elements for the set. @return Immutable set containing elements from the iterator.
2310 Recursively scans a directory for resources, building a set. @param directory Directory to scan. @param packagePrefix Resource path prefix.
2311 Extracts classpath entries from a JAR's manifest. @param jarFile The JAR file. @param manifest The JAR's manifest. @return ImmutableSet of File objects representing classpath entries.
2312 Returns the raw type of this type variable or wildcard.
2313 Returns the {@code k} greatest elements from the iterable. Delegates to {@code leastOf} after reversing the iterable.
2314 Waits for the stopped state, with a timeout. @param timeout The maximum time to wait. @throws TimeoutException if the timeout expires.
2315 Returns an exiting executor service from the Application. @param executor The ThreadPoolExecutor to use. @return An ExecutorService.
2316 Gets an exiting executor service with a given termination timeout. @param executor ThreadPoolExecutor to shut down @param terminationTimeout Duration for termination @return ExecutorService for exiting tasks
2317 Returns the exiting scheduled executor service from the application. @param executor The ScheduledThreadPoolExecutor instance. @return The exiting ScheduledExecutorService.
2318 Gets an exiting ScheduledExecutorService with a timeout. @param executor Executor to shut down; timeout duration. @return Exiting ScheduledExecutorService.
2319 Evicts entries from the segment to maintain weight limit. @param newest The newest ReferenceEntry to consider.
2320 Waits until the service is healthy, up to the given timeout. @param timeout The maximum time to wait, in Duration. @throws TimeoutException if the service doesn't become healthy.
2321 Returns startup durations as a map of Service to Duration.
2322 Retrieves annotations of a specific type. @param annotationType The class of the annotation to retrieve. @return Array of annotations of the specified type.
2323 Creates a new ReentrantLock with the given name. @param lockName Name of the lock for debugging/monitoring. @return A new ReentrantLock instance.
2324 Creates a ReentrantReadWriteLock with the given name. @param lockName Name of the lock (for debugging/monitoring) @return New ReentrantReadWriteLock instance.
2325 Validates the syntax of each part in the provided list. @param parts List of strings to validate. Returns true if valid.
2326 Registers a listener to receive events of various types. @param listener The listener object containing subscriber methods.
2327 Unregisters a listener from all registered event types. Throws IllegalArgumentException if unregistration fails.
2328 Creates an ImmutableNetwork.Builder from the current NetworkBuilder.
2329 Creates a subgraph induced by the given nodes from the graph. @param graph The original graph. @param nodes Nodes to include in the subgraph. @return The induced subgraph.
2330 Creates a mutable copy of the given graph. @param graph The graph to copy. @return A new MutableGraph containing the same nodes and edges.
2331 Creates an ImmutableValueGraph.Builder from the current ValueGraph. @return ImmutableValueGraph.Builder instance
2332 Filters a BiMap based on a combined predicate. @param map The BiMap to filter. @param entryPredicate Predicate for filtering entries. @return A new filtered BiMap.
2333 Filters entries in a NavigableMap based on the given predicate. @param unfiltered The map to filter. @param entryPredicate Predicate to filter entries. @return A new filtered NavigableMap.
2334 Filters entries of a sorted map based on a predicate. @param unfiltered The sorted map to filter. @param entryPredicate Predicate to filter entries. @return A new filtered SortedMap.
2335 Filters a map's entries based on a predicate applied to values. @param unfiltered The map to filter. @param valuePredicate Predicate to test each value. @return A new map containing only matching entries.
2336 Creates an ImmutableMap collector from a stream of objects. @param keyFunction Extracts the key from each element. @param valueFunction Extracts the value from each element. @param mergeFunction Merges values for duplicate keys.
2337 Creates an ImmutableRangeMap from a stream of objects. @param keyFunction Extracts the key (Range) from an object. @param valueFunction Extracts the value from an object.
2338 Creates a copy of the sorted multiset from the given iterable. Uses natural ordering for elements.
2339 Builds an ImmutableSortedMultiset from the current contents. Returns a new immutable multiset.
2340 Creates a wildcard type with the given upper bound. @param upperBound The upper bound for the wildcard type.
2341 Creates a wildcard type with the given lower bound. @param lowerBound The lower bound of the wildcard type.
2342 Returns ordered permutations of elements based on the comparator. @param elements iterable elements @param comparator comparator for ordering elements
2343 Returns a sorted immutable list based on the given comparator. @param comparator Comparator to define the sort order.
2344 Creates an immutable list from a collection. Returns existing ImmutableList if possible, else constructs new one.
2345 Builds an immutable bi-map. Returns the built bi-map.
2346 Builds the map or throws an exception if building fails. @return The built immutable map.
2347 Builds an immutable map, excluding the last inserted entry.
2348 Returns a view of the map containing entries with keys < toKey. @param toKey The exclusive key to end the head map.
2349 Returns a submap with keys between fromKey and toKey (inclusive/exclusive). @param fromKey start key @param fromInclusive whether fromKey is inclusive @param toKey end key @param toInclusive whether toKey is inclusive @return submap
2350 Returns a tail map of the sorted map, starting with fromKey. @param fromKey the key from which the tail map starts
2351 Creates an ImmutableSortedMap from the given entries, using natural ordering. @param entries Iterable of entries to copy. @return ImmutableSortedMap containing the entries.
2352 Creates an immutable sorted map from the given map. Uses natural ordering of keys.
2353 Creates an immutable sorted map from a map, using the given comparator. @param map source map @param comparator comparator for keys @return ImmutableSortedMap
2354 Calculates the Cartesian product of a list of sets. @param sets A list of sets to compute the product of. @return A set of lists representing the Cartesian product.
2355 Removes the first occurrence of the target object from the queue. @param target the object to remove @return true if removed, false otherwise
2356 Removes and returns the element at the specified index. @param index Index of the element to remove. @return The element removed, or null if index is invalid.
2357 Creates an immutable set from the given iterable. @param elements Iterable to copy elements from. @return ImmutableSet containing the elements.
2358 Creates an Invokable for the given constructor. @param constructor Constructor to wrap; must be for the type. @return Invokable instance for the constructor.
2359 Checks if this type is a subtype of the given supertype. Handles wildcard types and array types appropriately.
2360 Creates an Invokable for the given method, resolving generic types. @param method The method to create an Invokable for. @return An Invokable object.
2361 Expire entries if lock acquired. @param now current timestamp for expiration
2362 Creates a new WithExplicitOrdering instance for an enum. @param enumClass Enum class to order. @param policy Ordering policy to use. @return WithExplicitOrdering instance.
2363 Registers an object with the subscriber list. @param object The object to register.
2364 Unregisters an object from the subscriber list. @param object The object to unregister.
2365 Returns an ImmutableGraph.Builder for the graph. Uses the underlying GraphBuilder.
2366 Filters entries in a BiMap based on the provided predicate. @param unfiltered The BiMap to filter. @param entryPredicate Predicate to filter entries. @return A new filtered BiMap.
2367 Filters a NavigableMap based on a predicate applied to its keys. @param unfiltered The map to filter. @param keyPredicate Predicate to apply to the keys. @return A new filtered NavigableMap.
2368 Filters a NavigableMap based on a predicate applied to its values. @param unfiltered The map to filter. @param valuePredicate Predicate to apply to each value. @return A new filtered NavigableMap.
2369 Filters a sorted map based on a predicate applied to its keys. @param unfiltered The map to filter. @param keyPredicate Predicate to apply to each key. @return A new sorted map with filtered keys.
2370 Filters a SortedMap's values based on a predicate. @param unfiltered The map to filter. @param valuePredicate Predicate to apply to each value. @return A new SortedMap with filtered values.
2371 Creates an immutable sorted multiset from an iterator. @param comparator Comparator for sorting elements. @param elements Iterator providing elements for the multiset.
2372 Creates a set of LocationInfo from classpath entries for a classloader.
2373 Finds a subtype of a component type from the bounds. Returns the subtype or null if none found.
2374 Creates a new array type based on the component type. Handles wildcard types, otherwise uses current Java version.
2375 Generates ordered permutations of elements using natural ordering. @param elements Iterable of elements to permute. @return Collection of ordered permutations.
2376 Creates an immutable multiset from the given iterable. Returns existing multiset if it's immutable and complete.
2377 Creates an immutable multiset from an iterator of elements. @param elements Iterator providing the elements for the multiset.
2378 Copies multiset, sorts entries by count (highest first), returns immutable copy.
2379 Generates all permutations of the input collection. @param elements Collection of elements to permute. @return A Collection of Lists, each representing a permutation.
2380 Creates an immutable list from an iterable. @param elements iterable to copy; must not be null @return ImmutableList containing elements from iterable
2381 Returns an immutable copy of the range set. Returns the original if it's an immutable, full range set.
2382 Creates an immutable sorted set from a sorted set. @param sortedSet The sorted set to copy. @return An immutable sorted set.
2383 Reads lines from a stream and returns them as an ImmutableList. @return ImmutableList of strings read from the stream. @throws IOException if an I/O error occurs.
2384 Builds and returns an ImmutableClassToInstanceMap. Returns an empty map if the underlying map is empty.
2385 Creates an ImmutableListMultimap from a collection of map entries. @param mapEntries Collection of map entries (key, collection of values) @param valueComparator Comparator for values, sorts if provided.
2386 Builds an immutable map. @return An immutable map containing the accumulated data.
2387 Creates an ImmutableSetMultimap from a collection of map entries. @param mapEntries Collection of map entries. @param valueComparator Comparator for values, or null.
2388 Converts a Properties object to an ImmutableMap. @param properties Properties object to convert. @return ImmutableMap containing key-value pairs from properties.
2389 Creates an immutable map with elements as keys and their index as values. @param list Collection of elements to create the map from. @return ImmutableMap mapping elements to their index.
2390 Builds an immutable map from types to instances. Uses the map builder to create the map.
2391 Creates a new TypeTable with mappings merged from the input map. @param mappings Map of TypeVariableKey to Type, overriding existing mappings.
2392 Creates an immutable map from keys iterator and value function. @param keys Iterator of keys. @param valueFunction Function to generate values from keys. @return ImmutableMap with keys and generated values.
2393 Returns a view of the sorted map sub-range [fromKey, toKey). fromKey and toKey are inclusive/exclusive, respectively.
2394 Converts stream to an ImmutableSortedMap. @param comparator Key comparator. @param keyFunction Key extraction function. @param valueFunction Value extraction function. @param mergeFunction Value merge function.
2395 Retrieves and removes the last element of the deque, or null if empty.
2396 Removes and returns the last element. @return The last element or throws NoSuchElementException.
2397 Converts the iterable to an immutable set. Returns a new ImmutableSet containing the elements.
2398 Checks if the given type is a supertype of this type. @param type The TypeToken to check. @return True if the type is a supertype, false otherwise.
2399 Checks if the given type is a supertype of this type. @param type the type to check @return true if type is a supertype, false otherwise
2400 Checks if the current type is a subtype of the given type. @param type The TypeToken to check against. @return True if this type is a subtype of the given type.
2401 Drains key and value reference queues if enabled in the map.
2402 Filters a BiMap based on a predicate applied to its keys. @param unfiltered The BiMap to filter. @param keyPredicate Predicate to apply to keys. @return A new BiMap containing only matching entries.
2403 Filters a BiMap based on a predicate applied to its values. @param unfiltered The BiMap to filter. @param valuePredicate Predicate for filtering values. @return A new filtered BiMap.
2404 Creates a copy of a sorted multiset from the given iterator. @param elements Iterator of elements to include in the multiset.
2405 Returns a TypeToken for the given class, handling arrays & generics.
2406 Converts the delegate to an immutable multiset. @return An ImmutableMultiset containing elements from the delegate.
2407 Builds an immutable multiset from the current contents. @return ImmutableMultiset containing the elements.
2408 Computes the Cartesian product of a list of lists. @param lists List of lists to compute the product of. @return List of lists representing the Cartesian product.
2409 Parses a cache builder specification string and populates a spec. @param cacheBuilderSpecification The specification string to parse. @return Populated CacheBuilderSpec object.
2410 Converts the iterable to an immutable list. Returns a new ImmutableList containing the elements.
2411 Lists files in a directory. @param dir The directory to list. @return Immutable list of files in the directory.
2412 Constructs an InternetDomainName with the given name. Normalizes and validates the domain name.
2413 Creates a ListenableFuture that wraps a list of futures. @param futures Iterable of ListenableFutures to combine @return ListenableFuture containing the combined list.
2414 Creates a FutureCombiner for when all provided futures complete. @param futures Iterable of ListenableFuture objects. @return A FutureCombiner instance.
2415 Creates a FutureCombiner for when all futures succeed. @param futures Iterable of ListenableFuture<V> to combine @return FutureCombiner that resolves when all futures succeed
2416 Creates a ListFuture that succeeds when all input futures do. @param futures Iterable of ListenableFuture instances. @return A ListenableFuture representing the list of results.
2417 Converts an iterable of futures to a GWT-compatible array. @param futures Iterable of ListenableFutures @return Array of ListenableFutures
2418 Creates a union of ranges from an iterable. @param ranges iterable of Range objects to union @return ImmutableRangeSet containing the union of ranges
2419 Computes the intersection of this range set with another. @param other The other range set. @return A new range set containing the intersection.
2420 Returns the set of elements in this range set that are not in other. @param other The range set to subtract. @return A new range set representing the difference.
2421 Creates an ImmutableBiMap collector from elements. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element.
2422 Creates a copy of a map from classes to instances. @param map The map to copy. @return A new ImmutableClassToInstanceMap.
2423 Creates a copy of the given multimap. @param multimap The multimap to copy. @return A new ImmutableListMultimap containing the same entries.
2424 Builds an ImmutableMultimap from the internal builder state. Returns an empty multimap if the builder is empty.
2425 Merges a range with a value and applies a remapping function. @param range Range to merge. @param value Value to use for unmapped ranges. @param remappingFunction Function to remap existing values.
2426 Builds an ImmutableSetMultimap from the internal builder entries. Returns an empty multimap if the builder is empty.
2427 Creates an immutable map with unique keys derived from values. @param values Iterator of values to create keys from. @param keyFunction Function to extract key from each value. @return ImmutableMap with unique keys.
2428 Generates combinations of size 'size' from the input set. @param set input set of elements @param size the size of each combination @return a Set containing combinations
2429 Creates an immutable copy of the given graph. @param graph The graph to copy. @return An ImmutableGraph containing a copy of the input.
2430 Creates a new TypeResolver with provided type mappings. @param mappings Type variable mappings to apply. @return New TypeResolver instance.
2431 Converts an iterable of keys to an immutable map using a function for values. @param keys iterable of keys @param valueFunction function to generate values from keys @return ImmutableMap with keys and generated values
2432 Retrieves and removes the first element of the queue, or null.
2433 Adds the element to the heap. @param element Element to add. Returns true if added.
2434 Returns a set of all ClassInfo resources.
2435 Returns a set of top-level class info objects from resources.
2436 Performs a breadth-first traversal starting from the given nodes. @param startNodes Iterable of starting nodes for traversal. @return Iterable representing the breadth-first traversal.
2437 Performs a depth-first pre-order traversal starting from given nodes. @param startNodes Iterable of starting nodes for traversal. @return Iterable representing the depth-first pre-order traversal.
2438 Performs a depth-first post-order traversal starting from given nodes. @param startNodes Iterable of starting nodes for traversal. @return Iterable containing nodes in post-order.
2439 Scans files for resources and returns them as an immutable set. @param scannedFiles files to scan for resources @return ImmutableSet of ResourceInfo objects
2440 Returns a specialized Invokable with the given return type. @param returnType The expected return type. @return Specialized Invokable.
2441 Safely drains reference queues, acquiring and releasing a lock.
2442 Resolves a type, handling TypeVariable, ParameterizedType, etc. @param type The type to resolve. @return The resolved type.
2443 Checks if a type is a supertype/subtype of a formal type. @param formalType The formal type to check against. @param declaration TypeVariable for wildcard type canonicalization. @return True if the runtime type matches or is a subtype/supertype.
2444 Canonicalizes a type argument, handling WildcardTypes. @param declaration TypeVariable for context. @param typeArg Type argument to canonicalize. @return Canonicalized type.
2445 Creates a CacheBuilder from a specification string. @param spec Cache builder specification string. @return CacheBuilder instance.
2446 Disables caching by setting the maximum size to zero. Returns a CacheBuilderSpec object.
2447 Creates an InternetDomainName from a given domain string. @param domain The domain string to create the object from. @return An InternetDomainName object.
2448 Returns futures in completion order of the input futures. @param futures Iterable of ListenableFuture objects. @return ImmutableList of ListenableFuture objects.
2449 Returns the union of this RangeSet with another. @param other The RangeSet to union with. @return A new RangeSet representing the union.
2450 Returns a copy of the multimap. Returns the original if it's an immutable, non-partial view. Otherwise, creates a new copy.
2451 Builds an immutable multimap. Delegates to superclass implementation.
2452 Creates an ImmutableMap collector from elements using key/value functions.
2453 Creates an ImmutableSetMultimap containing the given key-value pair.
2454 Creates an ImmutableSetMultimap from the given key-value pairs.
2455 Creates an ImmutableSetMultimap from the given key-value pairs.
2456 Creates an ImmutableSetMultimap from the given key-value pairs.
2457 Creates an ImmutableSetMultimap from the given key-value pairs.
2458 Creates an ImmutableSetMultimap from an iterable of entries. @param entries iterable of key-value pairs @return A new ImmutableSetMultimap containing the entries.
2459 Creates an immutable multimap from the given multimap. @param multimap The multimap to copy. @return An ImmutableSetMultimap containing the data.
2460 Creates an immutable map with unique keys derived from values. @param values Iterable of values to create keys from. @param keyFunction Function to extract keys from values.
2461 Creates a new ArrayTable with the given row and column keys.
2462 Computes the power set of a given set. @param set The input set. @return A set containing all subsets of the input set.
2463 Creates an ImmutableTable based on cell list and row/column spaces. Chooses Dense or Sparse implementation based on cell density.
2464 Creates an immutable graph from the mutable graph. @return ImmutableGraph - a copy of the mutable graph.
2465 Returns an immutable copy of the given network. @param network The network to copy. @return An ImmutableNetwork.
2466 Returns an immutable copy of the given ValueGraph. @param graph The ValueGraph to copy. @return An ImmutableValueGraph.
2467 Creates a TypeResolver instance with mappings from context type. @param contextType The context type to use for type mappings.
2468 Creates a TypeResolver with an invariant context type. @param contextType The context type to make invariant.
2469 Creates a TypeResolver with mappings from formal to actual types. @param formal The formal type. @param actual The actual type. @return A TypeResolver with the generated mappings.
2470 Converts the iterable to an immutable map using the given function. @param valueFunction Function to generate value for each element. @return ImmutableMap with elements as keys and values from function.
2471 Creates a MinMaxPriorityQueue from an iterable. @param initialContents iterable to initialize the queue @return MinMaxPriorityQueue containing the elements.
2472 Adds the specified element to this queue. Calls offer(element) and returns true.
2473 Returns top-level classes within the specified package. @param packageName Package name to filter classes by. @return ImmutableSet of ClassInfo objects.
2474 Gets top-level classes recursively within a package. @param packageName Package name to search within. @return ImmutableSet of ClassInfo objects.
2475 Performs a breadth-first traversal starting from a single node. @param startNode The starting node for the traversal.
2476 Performs a depth-first pre-order traversal starting from a node. @param startNode The starting node for the traversal.
2477 Performs a depth-first post-order traversal starting from a node. @param startNode The starting node for the traversal.
2478 Scans for resources. Delegates to the overloaded method with an empty set.
2479 Creates a ClassPath from a ClassLoader, avoiding duplicate scans. @param classloader The class loader to scan. @throws IOException if an I/O error occurs during scanning.
2480 Configures the return type of the invokable. @param returnType The Class of the return type. @return Invokable with the specified return type.
2481 Retrieves the live value from a reference entry. @param entry Reference entry to check. @param now Current timestamp. Returns value or null if expired.
2482 Performs cleanup operations before writing data. @param now Current timestamp for cleanup operations.
2483 Resolves a type variable, handling bounds and JDK compatibility. @param var TypeVariable to resolve. @param forDependants TypeTable for resolving dependencies. @return Resolved Type or original if bounds are identical.
2484 Returns the generic return type of the method. Returns Class if no type parameters are present.
2485 Resolves the runtime type and returns a serializable representation.
2486 Creates a Traverser for traversing file trees. Uses MoreFiles.fileTreeChildren to get children.
2487 Parses a host specifier string, validating format and components. @param specifier Host specifier string to parse. @return HostSpecifier object representing the parsed host.
2488 Returns the domain name's ancestor, removing specified levels. @param levels Number of domain levels to remove. @return Ancestor domain name with corresponding parts.
2489 Creates a child domain name by appending the leftParts. @param leftParts String to prepend to the domain name @return New InternetDomainName object
2490 Checks if the given string is a valid Internet domain name. @param name String to validate. Returns true if valid, false otherwise.
2491 Creates a collector for flattening to ImmutableListMultimap. @param keyFunction Extracts the key from the input. @param valuesFunction Extracts a stream of values.
2492 Creates an ImmutableListMultimap with a single key-value pair. @param k1 the key @param v1 the value @return ImmutableListMultimap containing the key-value pair
2493 Creates an ImmutableListMultimap from the given key-value pairs.
2494 Creates an ImmutableListMultimap from the given key-value pairs.
2495 Creates an ImmutableListMultimap from the given key-value pairs.
2496 Creates an ImmutableListMultimap from the given key-value pairs.
2497 Creates an immutable multimap from the given iterable of entries.
2498 Creates a multimap from an iterator and a key function. @param values Iterator of values. @param keyFunction Function to extract the key from a value. @return ImmutableListMultimap with keys and values.
2499 Adds or replaces parameters for the given attribute with values. @param attribute Parameter attribute name. @param values Parameter values to add/replace. @return New MediaType instance with updated parameters.
2500 Creates an ImmutableSetMultimap from a stream of objects. @param keyFunction Extracts the key from each object. @param valueFunction Extracts the value from each object.
2501 Returns the inverse of this multimap. @return An ImmutableSetMultimap with keys and values swapped.
2502 Marks the ServiceManager as ready. Throws exception if transitioned.
2503 Returns a multimap of services grouped by state. Uses the underlying state's multimap.
2504 Creates a map with unique keys based on the provided function. @param keyFunction Function to extract the key from each element. @return A map with unique keys.
2505 Creates an ArrayTable from a given Table. @param table The Table to create the ArrayTable from. @return An ArrayTable.
2506 Creates an immutable network from the mutable network. @return An ImmutableNetwork representing the current state.
2507 Creates an immutable copy of the mutable value graph. Returns the immutable graph.
2508 Initializes the TypeToken with the declaring class's type. @param declaringClass Class representing the declaring type.
2509 Creates a new MinMaxPriorityQueue with an empty initial set.
2510 Creates a MinMaxPriorityQueue from an iterable. @param initialContents Initial elements for the queue. @return A new MinMaxPriorityQueue.
2511 Finds reachable nodes from a given node in a graph. @param graph The graph to traverse. @param node The starting node. @return Set of reachable nodes.
2512 Retrieves an entry for the given key. @param key The key to search for. @return The entry or null if not found.
2513 Checks if a reference entry is currently live. @param entry The reference entry to check. @param now Current timestamp. @return True if live, false otherwise.
2514 Inserts a loading value reference for the given key. @param key Key to insert. @param hash Hash code of the key. @param checkTime Whether to check refresh time. @return LoadingValueReference or null if refresh is pending.
2515 Performs cleanup after a read operation, based on readCount.
2516 Resolves a type variable, handling bounds and JDK compatibility. @param var TypeVariable to resolve. @param forDependants TypeTable for resolving dependencies. @return Resolved Type or the original TypeVariable if unresolvable.
2517 Executes a combining callable with an executor and returns a future. @param combiningCallable Callable to execute. @param executor Executor to run the callable. @return ClosingFuture wrapping the result.
2518 Executes an async callable using a provided executor. @param combiningCallable Callable to execute asynchronously. @param executor Executor to run the callable with. @return ClosingFuture wrapping the result of the callable.
2519 Parses a host specifier string. @param specifier Host specifier string to parse. @throws ParseException if the specifier is invalid.
2520 Checks if a string is a valid host specifier. @param specifier String to validate. Returns true if valid.
2521 Gets the public suffix, or null if not present.
2522 Returns the top-level private domain of this domain. Returns this if it's already a top-level private domain.
2523 Gets the registry suffix of the domain, or null if none exists.
2524 Returns the top domain under the registry suffix. Returns null if not found.
2525 Returns the parent InternetDomainName. Requires that the domain has a parent.
2526 Creates a Collector to collect to an ImmutableListMultimap. @param keyFunction Extracts the key from an input object. @param valueFunction Extracts the value from an input object.
2527 Creates an immutable multimap from a single key-value pair.
2528 Creates an ImmutableMultimap from the given key-value pairs.
2529 Creates an ImmutableMultimap from the given key-value pairs.
2530 Creates an ImmutableMultimap from the given key-value pairs.
2531 Creates an ImmutableMultimap from the given key-value pairs.
2532 Creates an immutable multimap from a given iterable of entries.
2533 Returns the inverse of this multimap. Returns a multimap with keys and values swapped.
2534 Indexes values into a Multimap using the keyFunction. @param values Iterable of values to index. @param keyFunction Function to extract the key from each value. @return An ImmutableListMultimap.
2535 Adds a single parameter to the media type. @param attribute Parameter name. @param value Parameter value. @return New media type with the added parameter.
2536 Creates a new MediaType with the given parameters. @param parameters Multimap of parameters to include. @return A new MediaType with the specified parameters.
2537 Creates a MediaType with the given type and subtype. @param type The media type string (e.g., "image") @param subtype The subtype string (e.g., "jpeg") @return A new MediaType object.
2538 Parses a media type string into a MediaType object. @param input The media type string to parse. @return A MediaType object representing the parsed media type.
2539 Constructs a ServiceManager with the provided services. Handles empty service lists by adding a placeholder service.
2540 Creates a collector for flattening to ImmutableSetMultimap. @param keyFunction Extracts the key from the input. @param valuesFunction Extracts a stream of values.
2541 Resolves a Type to a TypeToken, handling invariant types. @param type The Type to resolve. @return A TypeToken representing the resolved type.
2542 Creates a new MinMaxPriorityQueue with natural ordering. @param <E> Type of elements in the priority queue. @return A new MinMaxPriorityQueue instance.
2543 Refreshes a cache value. Loads from loader if not present. @param key Cache key. @return The cached value or null if loading failed.
2544 Retrieves a value, records stats, and stores it. @param key key @return the value @throws ExecutionException if loading fails
2545 Advances to the next entry, returning true if valid. @param entry The ReferenceEntry to advance to.
2546 Checks if the map contains the specified value. @param value The value to search for. @return True if the value is present, false otherwise.
2547 Indexes the multimap's values by applying the key function. @param keyFunction Function to extract the key from each value. @return An ImmutableListMultimap indexed by the key function.
2548 Sets the charset for the media type. @param charset The Charset to set. @return A new MediaType with the specified charset.
2549 Returns a media type without any parameters. Returns a new media type if parameters exist.
2550 Creates an application-specific MediaType. @param subtype subtype of the media type. @return A MediaType object.
2551 Creates an audio media type with the given subtype. @param subtype The subtype of the audio media type. @return A MediaType object representing the audio type.
2552 Creates a font type MediaType. @param subtype Font subtype (e.g., "ttf", "otf") @return Font type MediaType object.
2553 Creates a MediaType for image with the given subtype.
2554 Creates a text media type with the given subtype. @param subtype The subtype of the text media type. @return A MediaType object representing the text type.
2555 Creates a video media type with the given subtype. @param subtype The subtype of the video media type. @return A video media type.
2556 Builds the immutable table. Returns of() if empty, Singleton if size 1.
2557 Gets the generic superclass type token. Returns null if no superclass is found.
2558 Returns a list of generic interfaces for the type. Handles TypeVariable and WildcardType bounds.
2559 Resolves the supertype of a type, handling generics and arrays. @param superclass The superclass to resolve from. @return The resolved TypeToken<? super T>.
2560 Loads all values for given keys using the provided loader. @param keys keys to load @param loader cache loader @return Map containing loaded values or null if error
2561 Advances to the next entry in the chain, returning true if successful.
2562 Builds an immutable table from the current state. @return ImmutableTable containing the table data.
2563 Advances to the next entry in the table. Returns true if successful, false otherwise.
2564 Gets a subtype of the current type, based on the provided class. @param subclass The class representing the subtype. @return A TypeToken representing the subtype.
2565 Creates a copy of the given table. Returns the table if it's an ImmutableTable, otherwise copies cells.
2566 Creates an ImmutableTable from a stream of objects. @param rowFunction Maps object to row key. @param columnFunction Maps object to column key. @param valueFunction Maps object to table value. @return An ImmutableTable.
