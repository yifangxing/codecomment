file_path,Name,full_name,Start Line,End Line,Comment,Pre_Comment,child Name,domain,inner_method,node_level
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,<init>,com.google.common.base.Absent:<init>(),36,36,"/**
 * Private constructor to prevent instantiation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,<init>,com.google.common.base.Present:<init>(java.lang.Object),31,33,"/**
 * Sets the reference to the specified value.
 * @param reference the new reference value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,or,com.google.common.base.Absent:or(java.lang.Object),48,51,"/**
* Returns the value if present; otherwise, returns the default value.
* @param defaultValue value to return if none is present
* @return the value if present, or the default value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,or,com.google.common.base.Absent:or(com.google.common.base.Supplier),59,63,"/**
 * Returns the value if present, otherwise gets from supplier.
 * @param supplier provides an alternative value if current is absent
 * @return the value or result from supplier
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,doAndThen,com.google.common.base.Converter$IdentityConverter:doAndThen(com.google.common.base.Converter),581,584,"/**
* Combines this converter with another.
* @param otherConverter converter to apply after this one
* @return combined converter
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,convertAll,com.google.common.base.Converter:convertAll(java.lang.Iterable),270,291,"/**
* Converts all elements of an Iterable from type A to type B.
* @param fromIterable Iterable containing elements of type A
* @return Iterable of converted elements of type B
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,or,com.google.common.base.Present:or(java.lang.Object),45,49,"/**
* Returns the referenced value if present; otherwise returns the default.
* @param defaultValue value to return if reference is null
* @return referenced value or default
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,<init>,com.google.common.base.Stopwatch:<init>(com.google.common.base.Ticker),145,147,"/**
 * Initializes a Stopwatch with a given Ticker.
 * @param ticker the Ticker to use for timekeeping
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,orderRowsBy,com.google.common.collect.ImmutableTable$Builder:orderRowsBy(java.util.Comparator),203,207,"/**
* Sets the comparator for ordering rows.
* @param rowComparator comparator to define row order
* @return this Builder instance
*/",Specifies the ordering of the generated table's rows.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,orderColumnsBy,com.google.common.collect.ImmutableTable$Builder:orderColumnsBy(java.util.Comparator),210,214,"/**
* Sets a comparator to order columns.
* @param columnComparator comparator for column ordering
* @return Builder instance
*/",Specifies the ordering of the generated table's columns.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,mergeSorted,"com.google.common.collect.Iterables:mergeSorted(java.lang.Iterable,java.util.Comparator)",1070,1083,"/**
 * Merges multiple sorted iterables into a single sorted iterable.
 * @param iterables collection of sorted iterables to merge
 * @param comparator comparator for sorting elements
 * @return unmodifiable iterable containing all elements in sorted order
 */","* Returns an iterable over the merged contents of all given {@code iterables}. Equivalent entries
   * will not be de-duplicated.
   *
   * <p>Callers must ensure that the source {@code iterables} are in non-descending order as this
   * method does not sort its input.
   *
   * <p>For any equivalent elements across all {@code iterables}, it is undefined which element is
   * returned first.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,indexOf,"com.google.common.collect.Iterators:indexOf(java.util.Iterator,com.google.common.base.Predicate)",801,811,"/**
* Finds index of first element matching predicate.
* @param iterator source iterator
* @param predicate condition to match elements
* @return index of matching element or -1 if not found
*/","* Returns the index in {@code iterator} of the first element that satisfies the provided {@code
   * predicate}, or {@code -1} if the Iterator has no such elements.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code
   * predicate.apply(Iterators.get(iterator, i))} returns {@code true}, or {@code -1} if there is no
   * such index.
   *
   * <p>If -1 is returned, the iterator will be left exhausted: its {@code hasNext()} method will
   * return {@code false}. Otherwise, the iterator will be set to the element which satisfies the
   * {@code predicate}.
   *
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:treeSetValues(java.util.Comparator),384,394,"/**
* Creates a SortedSetMultimap with tree set values.
* @param comparator comparator for value ordering
* @return builder for SortedSetMultimap
*/","* Uses a {@link TreeSet} ordered by the specified comparator to store value collections.
     *
     * <p>Multimaps generated by the resulting builder will not be serializable if {@code
     * comparator} is not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,enumSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:enumSetValues(java.lang.Class),397,409,"/**
* Configures a SetMultimap with enum set values.
* @param valueClass the Enum class for values
* @return a SetMultimapBuilder configured for enum sets
*/",Uses an {@link EnumSet} to store value collections.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,union,"com.google.common.collect.Sets:union(java.util.Set,java.util.Set)",830,906,"/**
* Returns a union view of two sets.
* @param set1 first set
* @param set2 second set
* @return SetView containing elements from both sets without duplicates
*/","* Returns an unmodifiable <b>view</b> of the union of two sets. The returned set contains all
   * elements that are contained in either backing set. Iterating over the returned set iterates
   * first over all the elements of {@code set1}, then over each element of {@code set2}, in order,
   * that is not contained in {@code set1}.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,intersection,"com.google.common.collect.Sets:intersection(java.util.Set,java.util.Set)",935,1004,"/**
* Returns a view of the intersection of two sets.
* @param set1 first set
* @param set2 second set
* @return SetView containing common elements
*/","* Returns an unmodifiable <b>view</b> of the intersection of two sets. The returned set contains
   * all elements that are contained by both backing sets. The iteration order of the returned set
   * matches that of {@code set1}.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.
   *
   * <p><b>Note:</b> The returned view performs slightly better when {@code set1} is the smaller of
   * the two sets. If you have reason to believe one of your sets will generally be smaller than the
   * other, pass it first. Unfortunately, since this method sets the generic type of the returned
   * set based on the type of the first set passed, this could in rare cases force you to make a
   * cast, for example:
   *
   * {@snippet :
   * Set<Object> aFewBadObjects = ...
   * Set<String> manyBadStrings = ...
   *
   * // impossible for a non-String to be in the intersection
   * SuppressWarnings(""unchecked"")
   * Set<String> badStrings = (Set) Sets.intersection(
   *     aFewBadObjects, manyBadStrings);
   * }
   *
   * <p>This is unfortunate, but should come up only very rarely.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,difference,"com.google.common.collect.Sets:difference(java.util.Set,java.util.Set)",1016,1080,"/**
 * Computes the difference between two sets.
 * @param set1 first set to compare
 * @param set2 second set to compare
 * @return SetView containing elements in set1 but not in set2
 */","* Returns an unmodifiable <b>view</b> of the difference of two sets. The returned set contains
   * all elements that are contained by {@code set1} and not contained by {@code set2}. {@code set2}
   * may also contain elements not present in {@code set1}; these are simply ignored. The iteration
   * order of the returned set matches that of {@code set1}.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,symmetricDifference,"com.google.common.collect.Sets:symmetricDifference(java.util.Set,java.util.Set)",1093,1160,"/**
* Computes the symmetric difference of two sets.
* @param set1 first input set
* @param set2 second input set
* @return a SetView containing elements in either set but not both
*/","* Returns an unmodifiable <b>view</b> of the symmetric difference of two sets. The returned set
   * contains all elements that are contained in either {@code set1} or {@code set2} but not in
   * both. The iteration order of the returned set is undefined.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.
   *
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,merge,"com.google.common.collect.TableCollectors$MutableCell:merge(java.lang.Object,java.util.function.BinaryOperator)",197,200,"/**
* Merges current value with a new value using a specified function.
* @param value the new value to merge
* @param mergeFunction binary operator defining the merge logic
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toImmutableTable,"com.google.common.collect.TableCollectors:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",51,79,"/**
 * Collects elements into an ImmutableTable.
 * @param rowFunction extracts row key from element
 * @param columnFunction extracts column key from element
 * @param valueFunction extracts value from element
 * @param mergeFunction merges values for duplicate keys
 * @return Collector that builds ImmutableTable
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,indexOf,"com.google.common.primitives.Booleans:indexOf(boolean[],boolean[])",186,203,"/**
 * Finds the starting index of a target boolean array within a source array.
 * @param array the source boolean array to search within
 * @param target the target boolean array to find
 * @return the starting index of target in array, or -1 if not found
 */","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,indexOf,"com.google.common.primitives.Bytes:indexOf(byte[],byte[])",116,133,"/**
* Finds the starting index of a target byte array within another array.
* @param array the array to search within
* @param target the array to find
* @return the starting index or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,indexOf,"com.google.common.primitives.Chars:indexOf(char[],char[])",174,191,"/**
* Finds the index of a target character array within another array.
* @param array the source array to search within
* @param target the target array to find
* @return starting index of target in array, or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,indexOf,"com.google.common.primitives.Doubles:indexOf(double[],double[])",160,177,"/**
* Finds the starting index of a target array within a source array.
* @param array the source array to search
* @param target the array to find within the source array
* @return the starting index of the target array or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,indexOf,"com.google.common.primitives.Floats:indexOf(float[],float[])",157,174,"/**
 * Finds the starting index of a target float array within another array.
 * @param array the array to search within
 * @param target the array to search for
 * @return the starting index of target in array, or -1 if not found
 */","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,indexOf,"com.google.common.primitives.Ints:indexOf(int[],int[])",184,201,"/**
 * Finds the starting index of a target array within a source array.
 * @param array source array to search within
 * @param target sub-array to find
 * @return index of first occurrence or -1 if not found
 */","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,indexOf,"com.google.common.primitives.Longs:indexOf(long[],long[])",145,162,"/**
* Finds the starting index of a target array within a source array.
* @param array the source array to search within
* @param target the sub-array to find
* @return the starting index of the target in the array, or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,indexOf,"com.google.common.primitives.Shorts:indexOf(short[],short[])",178,195,"/**
* Finds the starting index of a target array within another array.
* @param array the array to search within
* @param target the array to find
* @return the starting index of target in array, or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ImmediateFuture.java,addListener,"com.google.common.util.concurrent.ImmediateFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",41,60,"/**
 * Adds a listener to be executed by the given executor.
 * @param listener the task to execute
 * @param executor the executor to run the task
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,<init>,com.google.common.util.concurrent.Monitor$Guard:<init>(com.google.common.util.concurrent.Monitor),318,321,"/**
 * Initializes a Guard with a given Monitor.
 * @param monitor the Monitor to use
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,newGuard,com.google.common.util.concurrent.Monitor:newGuard(java.util.function.BooleanSupplier),370,378,"/**
* Creates a new guard with a satisfaction condition.
* @param isSatisfied BooleanSupplier defining the satisfaction condition
* @return A new Guard instance
*/","* Creates a new {@linkplain Guard guard} for this monitor.
   *
   * @param isSatisfied the new guard's boolean condition (see {@link Guard#isSatisfied
   *     isSatisfied()})
   * @since 21.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,or,com.google.common.base.Absent:or(com.google.common.base.Optional),53,57,"/**
* Returns the original optional if present, otherwise returns a second choice.
* @param secondChoice alternative optional to use if the original is empty
* @return this optional or the second choice
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesAllOf,com.google.common.base.CharMatcher$Any:matchesAllOf(java.lang.CharSequence),1063,1067,"/**
 * Checks if the given sequence matches all criteria.
 * @param sequence input character sequence to check
 * @return always true, as it matches all by default
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,removeFrom,com.google.common.base.CharMatcher$Any:removeFrom(java.lang.CharSequence),1074,1078,"/**
 * Removes characters from the given sequence.
 * @param sequence the input character sequence
 * @return an empty string
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,trimFrom,com.google.common.base.CharMatcher$Any:trimFrom(java.lang.CharSequence),1101,1105,"/**
 * Trims characters from the input sequence.
 * @param sequence the input character sequence to be trimmed
 * @return an empty string after trimming
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,and,com.google.common.base.CharMatcher$Any:and(com.google.common.base.CharMatcher),1112,1115,"/**
 * Returns a matcher that matches only if both this matcher and the other matcher match.
 * @param other another CharMatcher to combine with
 * @return a new CharMatcher representing the logical AND of both matchers
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,or,com.google.common.base.CharMatcher$Any:or(com.google.common.base.CharMatcher),1117,1121,"/**
* Combines this matcher with another using logical OR.
* @param other the other character matcher to combine with
* @return this matcher, as combining with itself has no effect
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$NamedFastMatcher:<init>(java.lang.String),981,983,"/**
* Constructs a NamedFastMatcher with a description.
* @param description non-null string describing the matcher
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,com.google.common.base.CharMatcher$None:indexIn(java.lang.CharSequence),1143,1147,"/**
 * Returns the index of this matcher within the given sequence.
 * Always returns -1 as it does not match any sequence.
 * @param sequence the character sequence to search within
 * @return always -1, indicating no match found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,lastIndexIn,com.google.common.base.CharMatcher$None:lastIndexIn(java.lang.CharSequence),1156,1160,"/**
 * Returns the last index of a character in the given sequence.
 * @param sequence the input character sequence
 * @return always -1, indicating no valid index found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesNoneOf,com.google.common.base.CharMatcher$None:matchesNoneOf(java.lang.CharSequence),1167,1171,"/**
 * Checks if the given sequence does not match any criteria.
 * @param sequence the input character sequence to check
 * @return true, always returns true as it matches none of the criteria
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,replaceFrom,"com.google.common.base.CharMatcher$None:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)",1183,1187,"/**
 * Replaces a portion of the given sequence with a specified replacement.
 * @param sequence the original character sequence
 * @param replacement the string to replace parts of the sequence
 * @return the original sequence as a string, ignoring the replacement
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,countIn,com.google.common.base.CharMatcher$None:countIn(java.lang.CharSequence),1209,1213,"/**
 * Counts occurrences of a specific character in a sequence.
 * @param sequence the input character sequence
 * @return always returns 0
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,and,com.google.common.base.CharMatcher$None:and(com.google.common.base.CharMatcher),1215,1219,"/**
 * Combines this matcher with another using logical AND.
 * @param other the other CharMatcher to combine with
 * @return this CharMatcher instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,or,com.google.common.base.CharMatcher$None:or(com.google.common.base.CharMatcher),1221,1224,"/**
 * Returns this matcher, ensuring it's non-null.
 * @param other unused parameter
 * @return this CharMatcher instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Defaults.java,defaultValue,com.google.common.base.Defaults:defaultValue(java.lang.Class),42,65,"/**
 * Returns default value for a primitive type.
 * @param type the Class object representing the primitive type
 * @return default value of the specified primitive type or null if not primitive
 */","* Returns the default value of {@code type} as defined by JLS --- {@code 0} for numbers, {@code
   * false} for {@code boolean} and {@code '\0'} for {@code char}. For non-primitive types and
   * {@code void}, {@code null} is returned.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,<init>,"com.google.common.base.Equivalence$EquivalentToPredicate:<init>(com.google.common.base.Equivalence,java.lang.Object)",318,321,"/**
 * Initializes a predicate with an equivalence and a target.
 * @param equivalence equivalence relation for comparison
 * @param target the target object to compare against
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,<init>,"com.google.common.base.Equivalence$Wrapper:<init>(com.google.common.base.Equivalence,java.lang.Object)",228,231,"/**
 * Initializes a new Wrapper with an equivalence and a reference.
 * @param equivalence the equivalence relation to use for comparisons
 * @param reference the object to be wrapped
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,"com.google.common.base.Functions$ForMapWithDefault:<init>(java.util.Map,java.lang.Object)",198,201,"/**
* Initializes a ForMapWithDefault with a map and default value.
* @param map the backing map
* @param defaultValue the default value to return if key is not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,"com.google.common.base.Functions$FunctionComposition:<init>(com.google.common.base.Function,com.google.common.base.Function)",260,263,"/**
* Constructs a function composition.
* @param g second function to apply
* @param f first function to apply
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,com.google.common.base.Functions$FunctionForMapNoDefault:<init>(java.util.Map),157,159,"/**
 * Initializes the map with the provided map.
 * @param map the input map to be used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,com.google.common.base.Functions$PredicateFunction:<init>(com.google.common.base.Predicate),316,318,"/**
 * Initializes PredicateFunction with a non-null predicate.
 * @param predicate the condition to be checked
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,com.google.common.base.Functions$SupplierFunction:<init>(com.google.common.base.Supplier),421,423,"/**
 * Initializes a new instance with a given supplier.
 * @param supplier function to supply values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,apply,com.google.common.base.Functions$ToStringFunction:apply(java.lang.Object),74,78,"/**
 * Converts an object to its string representation.
 * @param o the object to convert
 * @return the string representation of the object
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/JdkPattern.java,<init>,com.google.common.base.JdkPattern$JdkMatcher:<init>(java.util.regex.Matcher),55,57,"/**
 * Constructs a JdkMatcher with a given Matcher.
 * @param matcher the Matcher to be used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/JdkPattern.java,<init>,com.google.common.base.JdkPattern:<init>(java.util.regex.Pattern),28,30,"/**
 * Initializes with a given Pattern.
 * @param pattern compiled regex pattern; cannot be null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,<init>,"com.google.common.base.Joiner$MapJoiner:<init>(com.google.common.base.Joiner,java.lang.String)",381,384,"/**
* Initializes a MapJoiner with a Joiner and key-value separator.
* @param joiner Joiner instance used for joining map entries
* @param keyValueSeparator separator between keys and values in each entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,<init>,com.google.common.base.Joiner:<init>(java.lang.String),80,82,"/**
 * Constructs a Joiner with the specified separator.
 * @param separator non-null string used to separate elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,useForNull,com.google.common.base.Joiner:useForNull(java.lang.String),276,294,"/**
 * Specifies text to use for null values.
 * @param nullText replacement text for nulls
 * @return a new Joiner instance with null handling set
 */","* Returns a joiner with the same behavior as this one, except automatically substituting {@code
   * nullText} for any provided null elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,iterable,"com.google.common.base.Joiner:iterable(java.lang.Object,java.lang.Object,java.lang.Object[])",532,553,"/**
* Creates an iterable from three elements: two initial objects and a varargs array.
* @param first first element, can be null
* @param second second element, can be null
* @param rest additional elements as an array, cannot be null
* @return Iterable containing all provided elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,<init>,com.google.common.base.MoreObjects$ToStringHelper:<init>(java.lang.String),157,159,"/**
* Initializes a new instance of ToStringHelper.
* @param className name of the class being processed
*/",Use {@link MoreObjects#toStringHelper(Object)} to create an instance.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,presentInstances,com.google.common.base.Optional:presentInstances(java.lang.Iterable),341,360,"/**
 * Filters present instances from an iterable of optionals.
 * @param optionals iterable containing optional values
 * @return iterable of present values
 */","* Returns the value of each present instance from the supplied {@code optionals}, in order,
   * skipping over occurrences of {@link Optional#absent}. Iterators are unmodifiable and are
   * evaluated lazily.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> this method has no equivalent in Java 8's
   * {@code Optional} class; use {@code
   * optionals.stream().filter(Optional::isPresent).map(Optional::get)} instead.
   *
   * <p><b>Java 9 users:</b> use {@code optionals.stream().flatMap(Optional::stream)} instead.
   *
   * @since 11.0 (generics widened in 13.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,compilePattern,com.google.common.base.Platform:compilePattern(java.lang.String),92,95,"/**
* Compiles a regex pattern.
* @param pattern regex string to compile
* @return compiled CommonPattern object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,"com.google.common.base.Predicates$CompositionPredicate:<init>(com.google.common.base.Predicate,com.google.common.base.Function)",694,697,"/**
* Initializes CompositionPredicate with a predicate and function.
* @param p predicate to apply to transformed input
* @param f function to transform input A to type B
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$ContainsPatternPredicate:<init>(com.google.common.base.CommonPattern),734,736,"/**
 * Initializes predicate with a common pattern.
 * @param pattern the pattern to be used for matching
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$InPredicate:<init>(java.util.Collection),644,646,"/**
 * Initializes an InPredicate with a non-null collection.
 * @param target the collection to be checked against
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$InstanceOfPredicate:<init>(java.lang.Class),567,569,"/**
 * Constructs an InstanceOfPredicate for the given class.
 * @param clazz the class to check instances against
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$NotPredicate:<init>(com.google.common.base.Predicate),382,384,"/**
 * Constructs a new NotPredicate.
 * @param predicate the original predicate to negate
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$SubtypeOfPredicate:<init>(java.lang.Class),606,608,"/**
 * Constructs a predicate for a specific class.
 * @param clazz the target class to be checked
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,defensiveCopy,com.google.common.base.Predicates:defensiveCopy(java.lang.Iterable),804,810,"/**
* Creates a defensive copy of an iterable.
* @param iterable the source iterable
* @return a new ArrayList containing non-null elements from the iterable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,or,com.google.common.base.Present:or(com.google.common.base.Optional),51,55,"/**
 * Returns the current Optional if present; otherwise, returns the provided alternative.
 * @param secondChoice alternative Optional to return if current is empty
 * @return current Optional or secondChoice if current is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,or,com.google.common.base.Present:or(com.google.common.base.Supplier),57,61,"/**
 * Returns the reference if present; otherwise, invokes the supplier.
 * @param supplier provides an alternative value if reference is null
 * @return the reference or the value from supplier
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,<init>,"com.google.common.base.Splitter$MapSplitter:<init>(com.google.common.base.Splitter,com.google.common.base.Splitter)",482,485,"/**
* Initializes a new MapSplitter with specified splitters.
* @param outerSplitter splits the input into entries
* @param entrySplitter splits each entry into key and value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,split,com.google.common.base.Splitter:split(java.lang.CharSequence),368,385,"/**
 * Splits a character sequence into an iterable of strings.
 * @param sequence the input sequence to split
 * @return Iterable of split strings
 */","* Splits {@code sequence} into string components and makes them available through an {@link
   * Iterator}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use
   * {@link #splitToList(CharSequence)}. Java 8+ users may prefer {@link #splitToStream} instead.
   *
   * @param sequence the sequence of characters to split
   * @return an iteration over the segments split from the parameter",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,padStart,"com.google.common.base.Strings:padStart(java.lang.String,int,char)",92,103,"/**
 * Pads the start of a string with a specified character to reach a minimum length.
 * @param string the original string
 * @param minLength the desired minimum length of the resulting string
 * @param padChar the character used for padding
 * @return the padded string
 */","* Returns a string, of length at least {@code minLength}, consisting of {@code string} prepended
   * with as many copies of {@code padChar} as are necessary to reach that length. For example,
   *
   * <ul>
   *   <li>{@code padStart(""7"", 3, '0')} returns {@code ""007""}
   *   <li>{@code padStart(""2010"", 3, '0')} returns {@code ""2010""}
   * </ul>
   *
   * <p>See {@link java.util.Formatter} for a richer set of formatting capabilities.
   *
   * @param string the string which should appear at the end of the result
   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in
   *     which case the input string is always returned.
   * @param padChar the character to insert at the beginning of the result until the minimum length
   *     is reached
   * @return the padded string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,padEnd,"com.google.common.base.Strings:padEnd(java.lang.String,int,char)",123,134,"/**
* Pads the end of a string with a specified character to reach a minimum length.
* @param string original string
* @param minLength desired minimum length of the resulting string
* @param padChar character used for padding
* @return padded string or original if already long enough
*/","* Returns a string, of length at least {@code minLength}, consisting of {@code string} appended
   * with as many copies of {@code padChar} as are necessary to reach that length. For example,
   *
   * <ul>
   *   <li>{@code padEnd(""4."", 5, '0')} returns {@code ""4.000""}
   *   <li>{@code padEnd(""2010"", 3, '!')} returns {@code ""2010""}
   * </ul>
   *
   * <p>See {@link java.util.Formatter} for a richer set of formatting capabilities.
   *
   * @param string the string which should appear at the beginning of the result
   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in
   *     which case the input string is always returned.
   * @param padChar the character to append to the end of the result until the minimum length is
   *     reached
   * @return the padded string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,com.google.common.base.Suppliers$MemoizingSupplier:<init>(com.google.common.base.Supplier),133,135,"/**
 * Initializes a new memoizing supplier.
 * @param delegate the original supplier to delegate calls to
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:<init>(com.google.common.base.Supplier),188,190,"/**
 * Constructs a memoizing supplier that does not serialize.
 * @param delegate the underlying supplier to memoize results from
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,"com.google.common.base.Suppliers$SupplierComposition:<init>(com.google.common.base.Function,com.google.common.base.Supplier)",64,67,"/**
* Constructs a SupplierComposition.
* @param function mapping function from F to T
* @param supplier provides instances of F
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,com.google.common.base.Suppliers$ThreadSafeSupplier:<init>(com.google.common.base.Supplier),410,412,"/**
 * Wraps a supplier to ensure thread safety.
 * @param delegate original supplier to be wrapped
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,throwIfInstanceOf,"com.google.common.base.Throwables:throwIfInstanceOf(java.lang.Throwable,java.lang.Class)",72,79,"/**
* Throws the input throwable if it is an instance of the specified type.
* @param throwable the throwable to check and possibly rethrow
* @param declaredType the class of the exception to look for
*/","* Throws {@code throwable} if it is an instance of {@code declaredType}. Example usage:
   *
   * <pre>
   * for (Foo foo : foos) {
   *   try {
   *     foo.bar();
   *   } catch (BarException | RuntimeException | Error t) {
   *     failure = t;
   *   }
   * }
   * if (failure != null) {
   *   throwIfInstanceOf(failure, BarException.class);
   *   throwIfUnchecked(failure);
   *   throw new AssertionError(failure);
   * }
   * </pre>
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,throwIfUnchecked,com.google.common.base.Throwables:throwIfUnchecked(java.lang.Throwable),129,137,"/**
* Throws the given throwable if it is an unchecked exception or error.
* @param throwable the Throwable to check and possibly rethrow
*/","* Throws {@code throwable} if it is a {@link RuntimeException} or {@link Error}. Example usage:
   *
   * <pre>
   * for (Foo foo : foos) {
   *   try {
   *     foo.bar();
   *   } catch (RuntimeException | Error t) {
   *     failure = t;
   *   }
   * }
   * if (failure != null) {
   *   throwIfUnchecked(failure);
   *   throw new AssertionError(failure);
   * }
   * </pre>
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,getCausalChain,com.google.common.base.Throwables:getCausalChain(java.lang.Throwable),284,308,"/**
 * Retrieves the causal chain of a throwable.
 * @param throwable the initial throwable
 * @return an unmodifiable list of throwables in the causal chain
 */","* Gets a {@code Throwable} cause chain as a list. The first entry in the list will be {@code
   * throwable} followed by its cause hierarchy. Note that this is a snapshot of the cause chain and
   * will not reflect any subsequent changes to the cause chain.
   *
   * <p>Here's an example of how it can be used to find specific types of exceptions in the cause
   * chain:
   *
   * <pre>
   * Iterables.filter(Throwables.getCausalChain(e), IOException.class));
   * </pre>
   *
   * @param throwable the non-null {@code Throwable} to extract causes from
   * @return an unmodifiable list containing the cause chain starting with {@code throwable}
   * @throws IllegalArgumentException if there is a loop in the causal chain",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,jlaStackTrace,com.google.common.base.Throwables:jlaStackTrace(java.lang.Throwable),401,430,"/**
 * Retrieves stack trace elements for a given throwable.
 * @param t the throwable to inspect
 * @return list of StackTraceElement objects representing the stack trace
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,load,com.google.common.cache.CacheLoader$FunctionToCacheLoader:load(java.lang.Object),167,170,"/**
 * Loads value by applying computing function to the given key.
 * @param key key to compute value for
 * @return computed value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,load,com.google.common.cache.CacheLoader$SupplierToCacheLoader:load(java.lang.Object),218,222,"/**
 * Loads value by key using a computing supplier.
 * @param key unique identifier for the value to load
 * @return loaded value or null if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,asyncReloading,"com.google.common.cache.CacheLoader:asyncReloading(com.google.common.cache.CacheLoader,java.util.concurrent.Executor)",184,208,"/**
 * Wraps a CacheLoader for asynchronous reloading.
 * @param loader original CacheLoader to delegate load operations
 * @param executor Executor to run reload tasks
 * @return CacheLoader with async reload capability
 */","* Returns a {@code CacheLoader} which wraps {@code loader}, executing calls to {@link
   * CacheLoader#reload} using {@code executor}.
   *
   * <p>This method is useful only when {@code loader.reload} has a synchronous implementation, such
   * as {@linkplain #reload the default implementation}.
   *
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$Segment:newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1999,2002,"/**
* Creates a new entry for the map.
* @param key the entry's key
* @param hash the entry's hash code
* @param next reference to the next entry in the chain
* @return the newly created ReferenceEntry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/RemovalListeners.java,asynchronous,"com.google.common.cache.RemovalListeners:asynchronous(com.google.common.cache.RemovalListener,java.util.concurrent.Executor)",40,46,"/**
* Wraps a removal listener to execute asynchronously.
* @param listener the original removal listener
* @param executor the executor for asynchronous execution
* @return a new RemovalListener that executes asynchronously
*/","* Returns a {@code RemovalListener} which processes all eviction notifications using {@code
   * executor}.
   *
   * @param listener the backing listener
   * @param executor the executor with which removal notifications are asynchronously executed",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/RemovalNotification.java,<init>,"com.google.common.cache.RemovalNotification:<init>(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause)",53,56,"/**
* Constructs a removal notification.
* @param key   the removed cache key
* @param value the removed cache value
* @param cause reason for the removal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,forEach,com.google.common.collect.AbstractMapBasedMultimap:forEach(java.util.function.BiConsumer),1307,1312,"/**
 * Applies the given action to each key-value pair in the map.
 * @param action BiConsumer to be applied to each entry
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,forEachEntry,com.google.common.collect.AbstractMapBasedMultiset:forEachEntry(java.util.function.ObjIntConsumer),163,167,"/**
 * Iterates over each entry in the map.
 * @param action consumer to accept element and its count
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,<init>,com.google.common.collect.AbstractSortedMultiset:<init>(java.util.Comparator),47,49,"/**
 * Initializes an AbstractSortedMultiset with a specified comparator.
 * @param comparator the comparator that defines the element order
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,subMultiset,"com.google.common.collect.AbstractSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",102,112,"/**
 * Returns a submultiset of elements within the specified range.
 * @param fromElement lower bound element
 * @param fromBoundType type of inclusion for fromElement
 * @param toElement upper bound element
 * @param toBoundType type of inclusion for toElement
 * @return SortedMultiset containing elements in the specified range
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,column,com.google.common.collect.ArrayTable:column(java.lang.Object),604,613,"/**
 * Retrieves a map of values for the specified column.
 * @param columnKey unique key identifying the column
 * @return Map with row keys and corresponding values, or empty if column not found
 */","* Returns a view of all mappings that have the given column key. If the column key isn't in
   * {@link #columnKeySet()}, an empty immutable map is returned.
   *
   * <p>Otherwise, for each row key in {@link #rowKeySet()}, the returned map associates the row key
   * with the corresponding value in the table. Changes to the returned map will update the
   * underlying table, and vice versa.
   *
   * @param columnKey key of column to search for in the table
   * @return the corresponding map from row keys to values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,row,com.google.common.collect.ArrayTable:row(java.lang.Object),696,705,"/**
 * Retrieves a row from the table by its key.
 * @param rowKey unique identifier for the row
 * @return Map of column to value, or empty map if not found
 */","* Returns a view of all mappings that have the given row key. If the row key isn't in {@link
   * #rowKeySet()}, an empty immutable map is returned.
   *
   * <p>Otherwise, for each column key in {@link #columnKeySet()}, the returned map associates the
   * column key with the corresponding value in the table. Changes to the returned map will update
   * the underlying table, and vice versa.
   *
   * @param rowKey key of row to search for in the table
   * @return the corresponding map from column keys to values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toMultiset,"com.google.common.collect.CollectCollectors:toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier)",167,182,"/**
* Collects elements into a Multiset.
* @param elementFunction extracts the element from T
* @param countFunction determines the count for each element
* @param multisetSupplier supplies the Multiset instance
* @return Collector that groups elements into a Multiset
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toMultimap,"com.google.common.collect.CollectCollectors:toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",413,432,"/**
 * Collects elements into a Multimap.
 * @param keyFunction function to extract keys from input elements
 * @param valueFunction function to extract values from input elements
 * @param multimapSupplier supplier for the resulting Multimap
 * @return Collector that groups elements by keys and maps them to values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,flatteningToMultimap,"com.google.common.collect.CollectCollectors:flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",434,457,"/**
* Collects elements into a Multimap using key and value functions.
* @param keyFunction maps input to keys
* @param valueFunction maps input to values as a stream
* @param multimapSupplier provides the Multimap instance
* @return Collector that gathers elements into a Multimap
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,map,"com.google.common.collect.CollectSpliterators:map(java.util.Spliterator,java.util.function.Function)",108,144,"/**
 * Maps elements of a spliterator using a function.
 * @param fromSpliterator input spliterator
 * @param function mapping function
 * @return new spliterator with mapped elements
 */","* Returns a {@code Spliterator} over the elements of {@code fromSpliterator} mapped by {@code
   * function}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,filter,"com.google.common.collect.CollectSpliterators:filter(java.util.Spliterator,java.util.function.Predicate)",147,202,"/**
* Filters elements of a spliterator based on a predicate.
* @param fromSpliterator the original spliterator to filter
* @param predicate the condition to apply to each element
* @return a spliterator with filtered elements
*/",Returns a {@code Spliterator} filtered by the specified predicate.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,forEach,com.google.common.collect.Collections2$FilteredCollection:forEach(java.util.function.Consumer),184,193,"/**
* Applies the given action to each element that satisfies the predicate.
* @param action consumer to apply to elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,removeIf,com.google.common.collect.Collections2$FilteredCollection:removeIf(java.util.function.Predicate),210,214,"/**
* Removes elements matching both predicates.
* @param filter additional condition to match for removal
* @return true if any elements were removed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,"com.google.common.collect.Collections2$TransformedCollection:<init>(java.util.Collection,com.google.common.base.Function)",269,272,"/**
* Initializes a transformed collection.
* @param fromCollection original collection to transform
* @param function transformation function to apply
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,forEach,com.google.common.collect.Collections2$TransformedCollection:forEach(java.util.function.Consumer),294,298,"/**
* Applies given action to each element after transforming it.
* @param action the action to be performed on each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,removeIf,com.google.common.collect.Collections2$TransformedCollection:removeIf(java.util.function.Predicate),300,304,"/**
* Removes elements matching a predicate after applying a function.
* @param filter condition to test each element
* @return true if any elements were removed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,safeContains,"com.google.common.collect.Collections2:safeContains(java.util.Collection,java.lang.Object)",100,107,"/**
 * Checks if a collection safely contains an object.
 * @param collection the collection to search
 * @param object the object to find, may be null
 * @return true if the collection contains the object, false otherwise
 */","* Delegates to {@link Collection#contains}. Returns {@code false} if the {@code contains} method
   * throws a {@code ClassCastException} or {@code NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,safeRemove,"com.google.common.collect.Collections2:safeRemove(java.util.Collection,java.lang.Object)",113,120,"/**
 * Removes an object from a collection safely.
 * @param collection the collection to remove from
 * @param object the object to remove, may be null
 * @return true if the object was removed, false otherwise
 */","* Delegates to {@link Collection#remove}. Returns {@code false} if the {@code remove} method
   * throws a {@code ClassCastException} or {@code NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,isInOrder,"com.google.common.collect.Comparators:isInOrder(java.lang.Iterable,java.util.Comparator)",73,88,"/**
* Checks if elements in iterable are sorted according to comparator.
* @param iterable the collection of elements to check
* @param comparator the comparator defining order
* @return true if elements are in non-decreasing order, false otherwise
*/","* Returns {@code true} if each element in {@code iterable} after the first is greater than or
   * equal to the element that preceded it, according to the specified comparator. Note that this is
   * always true when the iterable has fewer than two elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,isInStrictOrder,"com.google.common.collect.Comparators:isInStrictOrder(java.lang.Iterable,java.util.Comparator)",95,110,"/**
* Checks if elements in iterable are strictly ordered.
* @param iterable collection of comparable elements
* @param comparator defines the order
* @return true if elements are strictly increasing, false otherwise
*/","* Returns {@code true} if each element in {@code iterable} after the first is <i>strictly</i>
   * greater than the element that preceded it, according to the specified comparator. Note that
   * this is always true when the iterable has fewer than two elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,emptiesFirst,com.google.common.collect.Comparators:emptiesFirst(java.util.Comparator),176,180,"/**
* Compares Optionals with empty values first.
* @param valueComparator comparator for non-empty values
* @return Comparator that orders Optionals, placing empties first
*/","* Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as less
   * than all other values, and orders the rest using {@code valueComparator} on the contained
   * value.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,emptiesLast,com.google.common.collect.Comparators:emptiesLast(java.util.Comparator),189,193,"/**
* Creates a comparator that sorts Optionals, placing empty ones last.
* @param valueComparator comparator for the values inside Optional
* @return Comparator for Optional objects
*/","* Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as greater
   * than all other values, and orders the rest using {@code valueComparator} on the contained
   * value.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,com.google.common.collect.ContiguousSet:headSet(java.lang.Comparable),152,155,"/**
* Returns elements less than toElement.
* @param toElement upper bound (exclusive)
* @return ContiguousSet of elements less than toElement
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,"com.google.common.collect.ContiguousSet:headSet(java.lang.Comparable,boolean)",160,164,"/**
* Returns a view of the portion of this set up to (but not including) toElement.
* @param toElement upper bound element
* @param inclusive true if the endpoint is included
* @return ContiguousSet containing elements less than (or equal to, if inclusive) toElement
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,com.google.common.collect.ContiguousSet:tailSet(java.lang.Comparable),187,190,"/**
 * Returns a view of the set whose elements are greater than or equal to the specified element.
 * @param fromElement lower bound (inclusive)
 * @return sub-set with elements >= fromElement
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,"com.google.common.collect.ContiguousSet:tailSet(java.lang.Comparable,boolean)",195,199,"/**
* Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive).
* @param fromElement lower bound element
* @param inclusive true if the lower bound is inclusive
* @return ContiguousSet from fromElement to the end
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,forEachEntry,com.google.common.collect.EnumMultiset:forEachEntry(java.util.function.ObjIntConsumer),283,291,"/**
 * Iterates over entries with positive counts.
 * @param action consumer to accept each entry's enum constant and count
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,add,com.google.common.collect.EvictingQueue:add(java.lang.Object),103,115,"/**
* Adds an element to the collection.
* @param e element to add
* @return always true
*/","* Adds the given element to this queue. If the queue is currently full, the element at the head
   * of the queue is evicted to make room.
   *
   * @return {@code true} always",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,<init>,"com.google.common.collect.FilteredEntryMultimap:<init>(com.google.common.collect.Multimap,com.google.common.base.Predicate)",55,58,"/**
* Constructs a filtered multimap based on a predicate.
* @param unfiltered the original multimap to filter
* @param predicate the condition to apply for filtering entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,addAll,com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:addAll(java.util.Collection),127,131,"/**
* Throws an exception as adding elements is not supported.
* @param collection elements to be added (not used)
* @return always false
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,<init>,"com.google.common.collect.FilteredKeyMultimap:<init>(com.google.common.collect.Multimap,com.google.common.base.Predicate)",45,48,"/**
* Creates a filtered multimap based on a key predicate.
* @param unfiltered original multimap to filter
* @param keyPredicate predicate to test keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,<init>,com.google.common.collect.FilteredMultimapValues:<init>(com.google.common.collect.FilteredMultimap),43,45,"/**
* Initializes a new instance with the specified filtered multimap.
* @param multimap the filtered multimap to use
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,from,com.google.common.collect.FluentIterable:from(com.google.common.collect.FluentIterable),172,178,"/**
* Returns the same iterable, ensuring it's not null.
* @param iterable the iterable to check
* @return the original iterable
*/","* Construct a fluent iterable from another fluent iterable. This is obviously never necessary,
   * but is intended to help call out cases where one migration from {@code Iterable} to {@code
   * FluentIterable} has obviated the need to explicitly convert to a {@code FluentIterable}.
   *
   * @deprecated instances of {@code FluentIterable} don't need to be converted to {@code
   *     FluentIterable}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,forEach,com.google.common.collect.HashBiMap:forEach(java.util.function.BiConsumer),570,578,"/**
 * Iterates over entries in key insertion order.
 * @param action consumer to apply to each entry
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,getInstance,com.google.common.collect.ImmutableClassToInstanceMap:getInstance(java.lang.Class),182,186,"/**
* Retrieves an instance of the specified type.
* @param type class type to retrieve
* @return instance of type T or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,add,com.google.common.collect.ImmutableList$Builder:add(java.lang.Object),836,843,"/**
* Adds an element to the builder.
* @param element the element to be added
* @return the current builder instance
*/","* Adds {@code element} to the {@code ImmutableList}.
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,forEach,com.google.common.collect.ImmutableList:forEach(java.util.function.Consumer),416,423,"/**
* Applies a given consumer to each element in the collection.
* @param consumer the action to perform on each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,forEach,com.google.common.collect.ImmutableMapKeySet:forEach(java.util.function.Consumer),68,72,"/**
* Applies given action to each key in the map.
* @param action consumer to apply to each key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,forEach,com.google.common.collect.ImmutableMapValues:forEach(java.util.function.Consumer),106,111,"/**
* Applies given action to each value in the map.
* @param action consumer to apply to each value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,orderKeysBy,com.google.common.collect.ImmutableMultimap$Builder:orderKeysBy(java.util.Comparator),336,340,"/**
* Sets comparator for ordering keys.
* @param keyComparator comparator to order keys
* @return this builder instance
*/","* Specifies the ordering of the generated multimap's keys.
     *
     * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,orderValuesBy,com.google.common.collect.ImmutableMultimap$Builder:orderValuesBy(java.util.Comparator),347,351,"/**
* Sets comparator for ordering values.
* @param valueComparator comparator to define value order
* @return this builder instance
*/","* Specifies the ordering of the generated multimap's values for each key.
     *
     * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,add,com.google.common.collect.ImmutableMultiset$Builder:add(java.lang.Object),498,503,"/**
* Adds an element to the builder.
* @param element the element to add, must not be null
* @return this builder instance for method chaining
*/","* Adds {@code element} to the {@code ImmutableMultiset}.
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,addCopies,"com.google.common.collect.ImmutableMultiset$Builder:addCopies(java.lang.Object,int)",530,534,"/**
 * Adds multiple copies of an element to the builder.
 * @param element the element to add
 * @param occurrences number of times to add the element
 * @return the Builder instance for method chaining
 */","* Adds a number of occurrences of an element to this {@code ImmutableMultiset}.
     *
     * @param element the element to add
     * @param occurrences the number of occurrences of the element to add. May be zero, in which
     *     case no change will be made.
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation
     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,setCount,"com.google.common.collect.ImmutableMultiset$Builder:setCount(java.lang.Object,int)",546,550,"/**
* Sets the count of an element in the builder.
* @param element the element to update
* @param count new count value for the element
* @return this Builder instance
*/","* Adds or removes the necessary occurrences of an element such that the element attains the
     * desired count.
     *
     * @param element the element to add or remove occurrences of
     * @param count the desired count of the element in this multiset
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code count} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,forEach,com.google.common.collect.ImmutableSet$Indexed:forEach(java.util.function.Consumer),348,355,"/**
* Applies a consumer to each element in the collection.
* @param consumer the action to perform on each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:add(java.lang.Object),955,962,"/**
* Adds an element to the set.
* @param e element to be added
* @return this SetBuilderImpl instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,toImmutableSortedMultiset,"com.google.common.collect.ImmutableSortedMultiset:toImmutableSortedMultiset(java.util.Comparator,java.util.function.Function,java.util.function.ToIntFunction)",86,103,"/**
 * Collects elements into an immutable sorted multiset.
 * @param comparator order for elements
 * @param elementFunction extracts the element from input
 * @param countFunction determines the count of each element
 * @return ImmutableSortedMultiset with sorted elements and their counts
 */","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableSortedMultiset}
   * whose elements are the result of applying {@code elementFunction} to the inputs, with counts
   * equal to the result of applying {@code countFunction} to the inputs.
   *
   * <p>If the mapped elements contain duplicates (according to {@code comparator}), the first
   * occurrence in encounter order appears in the resulting multiset, with count equal to the sum of
   * the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element.
   *
   * @since 22.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,headSet,"com.google.common.collect.ImmutableSortedSet:headSet(java.lang.Object,boolean)",649,652,"/**
* Returns elements less than or equal to specified element.
* @param toElement upper bound element
* @param inclusive true if the upper bound is inclusive
* @return ImmutableSortedSet of elements
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,tailSet,"com.google.common.collect.ImmutableSortedSet:tailSet(java.lang.Object,boolean)",702,705,"/**
* Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive) fromElement.
* @param fromElement lower bound element
* @param inclusive true if the lower bound is inclusive
* @return ImmutableSortedSet containing elements greater than or equal to fromElement
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,forEach,com.google.common.collect.IndexedImmutableSet:forEach(java.util.function.Consumer),42,49,"/**
* Applies a given consumer to each element in the collection.
* @param consumer action to be performed on each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,unmodifiableIterable,com.google.common.collect.Iterables:unmodifiableIterable(java.lang.Iterable),72,81,"/**
 * Returns an unmodifiable view of the specified iterable.
 * @param iterable the original iterable to wrap
 * @return an unmodifiable Iterable; or the original if already unmodifiable
 */",Returns an unmodifiable view of {@code iterable}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,unmodifiableIterable,com.google.common.collect.Iterables:unmodifiableIterable(com.google.common.collect.ImmutableCollection),89,95,"/**
* Returns an unmodifiable view of the specified immutable collection.
* @param iterable the iterable to wrap
* @return an unmodifiable Iterable
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,removeFirstMatching,"com.google.common.collect.Iterables:removeFirstMatching(java.lang.Iterable,com.google.common.base.Predicate)",209,221,"/**
* Removes and returns the first element matching the predicate.
* @param removeFrom iterable to search and remove from
* @param predicate condition to match elements
* @return matched element or null if not found
*/","Removes and returns the first matching element, or returns {@code null} if there is none.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,cycle,com.google.common.collect.Iterables:cycle(java.lang.Iterable),373,391,"/**
* Creates an infinite cycle of the given iterable.
* @param iterable the iterable to cycle through
* @return a FluentIterable that infinitely iterates over the input iterable
*/","* Returns an iterable whose iterators cycle indefinitely over the elements of {@code iterable}.
   *
   * <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code
   * remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code
   * iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable}
   * is empty.
   *
   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
   * should use an explicit {@code break} or be certain that you will eventually remove all the
   * elements.
   *
   * <p>To cycle over the iterable {@code n} times, use the following: {@code
   * Iterables.concat(Collections.nCopies(n, iterable))}
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Stream.generate(() -> iterable).flatMap(Streams::stream)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,filter,"com.google.common.collect.Iterables:filter(java.lang.Iterable,com.google.common.base.Predicate)",572,598,"/**
* Filters elements of an iterable based on a predicate.
* @param unfiltered the original iterable to filter
* @param retainIfTrue predicate to determine which elements to retain
* @return filtered iterable with only elements that satisfy the predicate
*/","* Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate
   * {@code retainIfTrue}. The returned iterable's iterator does not support {@code remove()}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#filter}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,transform,"com.google.common.collect.Iterables:transform(java.lang.Iterable,com.google.common.base.Function)",731,752,"/**
 * Transforms elements of an iterable using a specified function.
 * @param fromIterable the source iterable to transform
 * @param function the transformation function applied to each element
 * @return a new iterable with transformed elements
 */","* Returns a view containing the result of applying {@code function} to each element of {@code
   * fromIterable}.
   *
   * <p>The returned iterable's iterator supports {@code remove()} if {@code fromIterable}'s
   * iterator does. After a successful {@code remove()} call, {@code fromIterable} no longer
   * contains the corresponding element.
   *
   * <p>If the input {@code Iterable} is known to be a {@code List} or other {@code Collection},
   * consider {@link Lists#transform} and {@link Collections2#transform}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#map}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,consumingIterable,com.google.common.collect.Iterables:consumingIterable(java.lang.Iterable),1020,1036,"/**
* Creates a consuming iterable from the given iterable.
* @param iterable the source iterable
* @return an Iterable that consumes elements as they are iterated
*/","* Returns a view of the supplied iterable that wraps each generated {@link Iterator} through
   * {@link Iterators#consumingIterator(Iterator)}.
   *
   * <p>Note: If {@code iterable} is a {@link Queue}, the returned iterable will instead use {@link
   * Queue#isEmpty} and {@link Queue#remove()}, since {@link Queue}'s iteration order is undefined.
   * Calling {@link Iterator#hasNext()} on a generated iterator from the returned iterable may cause
   * an item to be immediately dequeued for return on a subsequent call to {@link Iterator#next()}.
   *
   * <p>Whether the input {@code iterable} is a {@link Queue} or not, the returned {@code Iterable}
   * is not thread-safe.
   *
   * @param iterable the iterable to wrap
   * @return a view of the supplied iterable that wraps each generated iterator through {@link
   *     Iterators#consumingIterator(Iterator)}; for queues, an iterable that generates iterators
   *     that return and consume the queue's elements in queue order
   * @see Iterators#consumingIterator(Iterator)
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,<init>,com.google.common.collect.Iterators$PeekingImpl:<init>(java.util.Iterator),1187,1189,"/**
 * Initializes a new PeekingImpl with the given iterator.
 * @param iterator the iterator to be wrapped
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,unmodifiableIterator,com.google.common.collect.Iterators:unmodifiableIterator(java.util.Iterator),129,149,"/**
* Returns an unmodifiable view of the specified iterator.
* @param iterator the iterator to wrap
* @return an unmodifiable UnmodifiableIterator
*/",Returns an unmodifiable view of {@code iterator}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,unmodifiableIterator,com.google.common.collect.Iterators:unmodifiableIterator(com.google.common.collect.UnmodifiableIterator),157,164,"/**
 * Wraps an iterator to ensure it is not null.
 * @param iterator the iterator to wrap
 * @return a non-null UnmodifiableIterator
 * @deprecated Use checkNotNull() directly instead
 */","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,removeAll,"com.google.common.collect.Iterators:removeAll(java.util.Iterator,java.util.Collection)",205,216,"/**
 * Removes all elements from the iterator that are contained in the specified collection.
 * @param removeFrom iterator to remove elements from
 * @param elementsToRemove collection of elements to remove
 * @return true if any elements were removed, false otherwise
 */","* Traverses an iterator and removes every element that belongs to the provided collection. The
   * iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @param removeFrom the iterator to (potentially) remove elements from
   * @param elementsToRemove the elements to remove
   * @return {@code true} if any element was removed from {@code iterator}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,removeIf,"com.google.common.collect.Iterators:removeIf(java.util.Iterator,com.google.common.base.Predicate)",227,239,"/**
* Removes elements from iterator matching the predicate.
* @param removeFrom iterator to remove elements from
* @param predicate condition for removal
* @return true if any elements were removed, false otherwise
*/","* Removes every element that satisfies the provided predicate from the iterator. The iterator
   * will be left exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @param removeFrom the iterator to (potentially) remove elements from
   * @param predicate a predicate that determines whether an element should be removed
   * @return {@code true} if any elements were removed from the iterator
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,retainAll,"com.google.common.collect.Iterators:retainAll(java.util.Iterator,java.util.Collection)",250,261,"/**
* Removes elements from iterator not present in collection.
* @param removeFrom iterator to modify
* @param elementsToRetain collection of elements to retain
* @return true if any elements were removed, false otherwise
*/","* Traverses an iterator and removes every element that does not belong to the provided
   * collection. The iterator will be left exhausted: its {@code hasNext()} method will return
   * {@code false}.
   *
   * @param removeFrom the iterator to (potentially) remove elements from
   * @param elementsToRetain the elements to retain
   * @return {@code true} if any element was removed from {@code iterator}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,addAll,"com.google.common.collect.Iterators:addAll(java.util.Collection,java.util.Iterator)",363,373,"/**
 * Adds all elements from the iterator to the collection.
 * @param addTo the collection to add elements to
 * @param iterator the iterator providing elements to add
 * @return true if the collection was modified, false otherwise
 */","* Adds all elements in {@code iterator} to {@code collection}. The iterator will be left
   * exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @return {@code true} if {@code collection} was modified as a result of this operation",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,cycle,com.google.common.collect.Iterators:cycle(java.lang.Iterable),403,439,"/**
 * Creates an infinite cycle of elements from the given iterable.
 * @param iterable source of elements to cycle through
 * @return Iterator that repeatedly traverses the iterable
 */","* Returns an iterator that cycles indefinitely over the elements of {@code iterable}.
   *
   * <p>The returned iterator supports {@code remove()} if the provided iterator does. After {@code
   * remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code
   * iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable}
   * is empty.
   *
   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
   * should use an explicit {@code break} or be certain that you will eventually remove all the
   * elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,filter,"com.google.common.collect.Iterators:filter(java.util.Iterator,com.google.common.base.Predicate)",666,682,"/**
* Filters elements from an iterator based on a predicate.
* @param unfiltered the original iterator to filter
* @param retainIfTrue predicate to determine if an element should be retained
* @return UnmodifiableIterator with filtered elements
*/","* Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate
   * {@code retainIfTrue}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,all,"com.google.common.collect.Iterators:all(java.util.Iterator,com.google.common.base.Predicate)",707,717,"/**
* Checks if all elements in the iterator satisfy the given predicate.
* @param iterator the iterator to check
* @param predicate the condition to apply to each element
* @return true if all elements match the predicate, false otherwise
*/","* Returns {@code true} if every element returned by {@code iterator} satisfies the given
   * predicate. If {@code iterator} is empty, {@code true} is returned.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,find,"com.google.common.collect.Iterators:find(java.util.Iterator,com.google.common.base.Predicate)",728,740,"/**
 * Finds the first element in an iterator that matches a predicate.
 * @param iterator the iterator to search through
 * @param predicate the condition to apply to each element
 * @param <T> the type of elements in the iterator
 * @return the matching element or throws NoSuchElementException if none found
 */","* Returns the first element in {@code iterator} that satisfies the given predicate; use this
   * method only when such an element is known to exist. If no such element is found, the iterator
   * will be left exhausted: its {@code hasNext()} method will return {@code false}. If it is
   * possible that <i>no</i> element will match, use {@link #tryFind} or {@link #find(Iterator,
   * Predicate, Object)} instead.
   *
   * @throws NoSuchElementException if no element in {@code iterator} matches the given predicate",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,find,"com.google.common.collect.Iterators:find(java.util.Iterator,com.google.common.base.Predicate,java.lang.Object)",751,762,"/**
* Finds the first element matching a predicate in an iterator.
* @param iterator source of elements to search through
* @param predicate condition to match each element against
* @param defaultValue value to return if no match is found
* @return first matching element or default value if none found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,transform,"com.google.common.collect.Iterators:transform(java.util.Iterator,com.google.common.base.Function)",821,831,"/**
* Applies a transformation function to each element of an iterator.
* @param fromIterator the original iterator
* @param function the transformation function
* @return an iterator with transformed elements
*/","* Returns a view containing the result of applying {@code function} to each element of {@code
   * fromIterator}.
   *
   * <p>The returned iterator supports {@code remove()} if {@code fromIterator} does. After a
   * successful {@code remove()} call, {@code fromIterator} no longer contains the corresponding
   * element.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,consumingIterator,com.google.common.collect.Iterators:consumingIterator(java.util.Iterator),997,1018,"/**
 * Returns an iterator that consumes elements by removing them from the original iterator.
 * @param iterator the original iterator to consume elements from
 * @return a new iterator that removes each element after returning it
 */","* Returns a view of the supplied {@code iterator} that removes each element from the supplied
   * {@code iterator} as it is returned.
   *
   * <p>The provided iterator must support {@link Iterator#remove()} or else the returned iterator
   * will fail on the first call to {@code next}. The returned {@link Iterator} is also not
   * thread-safe.
   *
   * @param iterator the iterator to remove and return elements from
   * @return an iterator that removes and returns elements from the supplied iterator
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,clear,com.google.common.collect.Iterators:clear(java.util.Iterator),1037,1043,"/**
* Clears all elements from the provided iterator.
* @param iterator the iterator to clear
*/",Clears the iterator using its remove method.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,forEnumeration,com.google.common.collect.Iterators:forEnumeration(java.util.Enumeration),1139,1154,"/**
* Converts Enumeration to UnmodifiableIterator.
* @param enumeration the Enumeration to convert
* @return UnmodifiableIterator wrapping the Enumeration
*/","* Adapts an {@code Enumeration} to the {@code Iterator} interface.
   *
   * <p>This method has no equivalent in {@link Iterables} because viewing an {@code Enumeration} as
   * an {@code Iterable} is impossible. However, the contents can be <i>copied</i> into a collection
   * using {@link Collections#list}.
   *
   * <p><b>Java 9 users:</b> use {@code enumeration.asIterator()} instead, unless it is important to
   * return an {@code UnmodifiableIterator} instead of a plain {@code Iterator}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,asEnumeration,com.google.common.collect.Iterators:asEnumeration(java.util.Iterator),1163,1178,"/**
* Converts an Iterator to an Enumeration.
* @param <T> the type of elements
* @param iterator the Iterator to convert
* @return Enumeration wrapping the Iterator
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,peekingIterator,com.google.common.collect.Iterators:peekingIterator(com.google.common.collect.PeekingIterator),1281,1288,"/**
 * Wraps a given iterator to ensure it is not null.
 * @param iterator the iterator to wrap
 * @return the same iterator after null check
 * @deprecated Use checkNotNull(iterator) directly
 */","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$AbstractListWrapper:<init>(java.util.List),1165,1167,"/**
 * Constructs an AbstractListWrapper with a given backing list.
 * @param backingList the list to wrap; must not be null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$OnePlusArrayList:<init>(java.lang.Object,java.lang.Object[])",343,346,"/**
* Constructs an OnePlusArrayList with an initial element and an array of additional elements.
* @param first the first element in the list
* @param rest an array containing the remaining elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$ReverseList:<init>(java.util.List),866,868,"/**
 * Initializes and validates the list to be reversed.
 * @param forwardList the original list to reverse; must not be null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$TransformingRandomAccessList:<init>(java.util.List,com.google.common.base.Function)",626,629,"/**
 * Constructs a transforming list.
 * @param fromList source list to transform
 * @param function transformation function for elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,removeIf,com.google.common.collect.Lists$TransformingRandomAccessList:removeIf(java.util.function.Predicate),666,670,"/**
* Removes elements matching the given predicate.
* @param filter condition to test each element
* @return true if any elements were removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$TransformingSequentialList:<init>(java.util.List,com.google.common.base.Function)",569,572,"/**
* Initializes a transforming list.
* @param fromList source list of elements to transform
* @param function transformation function applied to each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,removeIf,com.google.common.collect.Lists$TransformingSequentialList:removeIf(java.util.function.Predicate),604,608,"/**
* Removes elements matching the given predicate.
* @param filter condition to test each element
* @return true if any elements were removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$TwoPlusArrayList:<init>(java.lang.Object,java.lang.Object,java.lang.Object[])",373,377,"/**
* Constructs a list with two initial elements and an array of additional elements.
* @param first the first element
* @param second the second element
* @param rest array containing remaining elements, must not be null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$AsMapView:<init>(java.util.Set,com.google.common.base.Function)",891,894,"/**
* Constructs an AsMapView with a set and a mapping function.
* @param set the source set of keys
* @param function maps each key to a value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$KeySet:<init>(java.util.Map),3918,3920,"/**
 * Constructs a KeySet from the provided map.
 * @param map the source map to extract keys from
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$KeySet:forEach(java.util.function.Consumer),3931,3936,"/**
* Applies a given action to each key in the map.
* @param action Consumer to perform on each key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$NavigableAsMapView:<init>(java.util.NavigableSet,com.google.common.base.Function)",1045,1048,"/**
* Constructs a view with keys from NavigableSet and values generated by function.
* @param ks the navigable set of keys
* @param vFunction the function to compute values from keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$TransformedEntriesMap:<init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer)",2141,2145,"/**
* Initializes a map with transformed entries.
* @param fromMap original map to transform entries from
* @param transformer function to apply to each entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$TransformedEntriesMap:forEach(java.util.function.BiConsumer),2206,2211,"/**
* Applies an action to each key-value pair after transformation.
* @param action consumer that accepts a key and transformed value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$Values:<init>(java.util.Map),4111,4113,"/**
 * Initializes with a non-null map.
 * @param map the map to initialize with; must not be null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$Values:forEach(java.util.function.Consumer),4124,4129,"/**
* Iterates over each value in the map and applies the given action.
* @param action the consumer to accept each value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,newEnumMap,com.google.common.collect.Maps:newEnumMap(java.lang.Class),449,452,"/**
* Creates an EnumMap for the specified enum type.
* @param type enum class to create map for
* @return EnumMap instance with the given enum type
*/","* Creates an {@code EnumMap} instance.
   *
   * @param type the key type for this map
   * @return a new, empty {@code EnumMap}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableEntry,com.google.common.collect.Maps:unmodifiableEntry(java.util.Map$Entry),1496,1512,"/**
 * Creates an unmodifiable entry from a given entry.
 * @param entry the original entry to wrap
 * @return an unmodifiable Entry object
 */","* Returns an unmodifiable view of the specified map entry. The {@link Entry#setValue} operation
   * throws an {@link UnsupportedOperationException}. This also has the side effect of redefining
   * {@code equals} to comply with the Entry contract, to avoid a possible nefarious implementation
   * of equals.
   *
   * @param entry the entry for which to return an unmodifiable view
   * @return an unmodifiable view of the entry",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntry,"com.google.common.collect.Maps:transformEntry(com.google.common.collect.Maps$EntryTransformer,java.util.Map$Entry)",2107,2125,"/**
* Transforms an entry using a given transformer.
* @param transformer function to transform the value
* @param entry original key-value pair
* @return new entry with transformed value
*/",Returns a view of an entry transformed by the specified transformer.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asEntryToEntryFunction,com.google.common.collect.Maps:asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer),2128,2133,"/**
 * Converts an Entry to another Entry using a transformer.
 * @param transformer function to apply to the key and value of the input Entry
 * @return Function that transforms Entry<K, V1> to Entry<K, V2>
 */",Views an entry transformer as a function from entries to entries.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,safeGet,"com.google.common.collect.Maps:safeGet(java.util.Map,java.lang.Object)",3797,3804,"/**
* Safely retrieves value from map by key.
* @param map the map to search
* @param key the key to look for
* @return value associated with key or null if not found or error occurs
*/","* Delegates to {@link Map#get}. Returns {@code null} on {@code ClassCastException} and {@code
   * NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,safeContainsKey,"com.google.common.collect.Maps:safeContainsKey(java.util.Map,java.lang.Object)",3810,3817,"/**
* Checks if a map contains a specified key safely.
* Handles null keys and type mismatches gracefully.
* @param map the map to check
* @param key the key to look for
* @return true if the key is present, false otherwise
*/","* Delegates to {@link Map#containsKey}. Returns {@code false} on {@code ClassCastException} and
   * {@code NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,safeRemove,"com.google.common.collect.Maps:safeRemove(java.util.Map,java.lang.Object)",3823,3830,"/**
 * Safely removes a value from the map by key.
 * @param map the map to remove from
 * @param key the key of the value to remove
 * @return the removed value or null if an exception occurs
 */","* Delegates to {@link Map#remove}. Returns {@code null} on {@code ClassCastException} and {@code
   * NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,<init>,com.google.common.collect.MinMaxPriorityQueue$Builder:<init>(java.util.Comparator),178,180,"/**
* Initializes a new Builder with a specified comparator.
* @param comparator Comparator to define sorting order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimap.java,forEach,com.google.common.collect.Multimap:forEach(java.util.function.BiConsumer),342,345,"/**
* Applies an action to each key-value pair in the map.
* @param action consumer that accepts a key and value
*/","* Performs the given action for all key-value pairs contained in this multimap. If an ordering is
   * specified by the {@code Multimap} implementation, actions will be performed in the order of
   * iteration of {@link #entries()}. Exceptions thrown by the action are relayed to the caller.
   *
   * <p>To loop over all keys and their associated value collections, write {@code
   * Multimaps.asMap(multimap).forEach((key, valueCollection) -> action())}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$EnumSetSupplier:<init>(java.lang.Class),259,261,"/**
 * Constructs an EnumSetSupplier for the given enum class.
 * @param clazz the enum class to supply EnumSets for
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$TreeSetSupplier:<init>(java.util.Comparator),245,247,"/**
 * Constructs a TreeSetSupplier with a specified comparator.
 * @param comparator the comparator to use for ordering elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeKeys,com.google.common.collect.MultimapBuilder:treeKeys(java.util.Comparator),152,161,"/**
* Creates a MultimapBuilder with tree keys.
* @param comparator for ordering the keys
* @return MultimapBuilderWithKeys instance using TreeMap
*/","* Uses a {@link TreeMap} sorted by the specified comparator to map keys to value collections.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in sorted order.
   *
   * <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be
   * safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be
   * cast to a {@link java.util.SortedMap}.
   *
   * <p>Multimaps generated by the resulting builder will not be serializable if {@code comparator}
   * is not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,enumKeys,com.google.common.collect.MultimapBuilder:enumKeys(java.lang.Class),168,179,"/**
* Creates a MultimapBuilder with enum keys.
* @param keyClass Class of the enum keys
* @return MultimapBuilderWithKeys configured for enum keys
*/","* Uses an {@link EnumMap} to map keys to value collections.
   *
   * @since 16.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$AsMap:<init>(com.google.common.collect.Multimap),1879,1881,"/**
 * Initializes the map with entries from the given multimap.
 * @param multimap source multimap to convert
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,forEach,com.google.common.collect.Multimaps$Keys:forEach(java.util.function.Consumer),1766,1770,"/**
* Applies a given action to each key in the multimap.
* @param consumer action to be performed on each key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$MapMultimap:<init>(java.util.Map),1143,1145,"/**
 * Constructs a MapMultimap from a given map.
 * @param map the source map to populate the multimap
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$TransformedEntriesMultimap:<init>(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer)",1506,1510,"/**
 * Constructs a TransformedEntriesMultimap.
 * @param fromMultimap the source multimap to transform entries from
 * @param transformer the entry transformer function
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableMultimap,com.google.common.collect.Multimaps:unmodifiableMultimap(com.google.common.collect.ImmutableMultimap),670,676,"/**
* Returns an unmodifiable view of the specified multimap.
* @param delegate the multimap to wrap
* @return an unmodifiable Multimap instance
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableSetMultimap,com.google.common.collect.Multimaps:unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap),937,944,"/**
 * Returns an unmodifiable view of the specified set multimap.
 * @param delegate the original immutable set multimap
 * @return unmodifiable set multimap
 */","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableListMultimap,com.google.common.collect.Multimaps:unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap),1021,1028,"/**
 * Returns an unmodifiable view of the specified list multimap.
 * @param delegate the original list multimap to wrap
 * @return an unmodifiable ListMultimap instance
 */","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multiset.java,forEachEntry,com.google.common.collect.Multiset:forEachEntry(java.util.function.ObjIntConsumer),347,350,"/**
* Applies an action to each entry in the collection.
* @param action consumer that accepts an element and its count
*/","* Runs the specified action for each distinct element in this multiset, and the number of
   * occurrences of that element. For some {@code Multiset} implementations, this may be more
   * efficient than iterating over the {@link #entrySet()} either explicitly or with {@code
   * entrySet().forEach(action)}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multiset.java,forEach,com.google.common.collect.Multiset:forEach(java.util.function.Consumer),467,479,"/**
* Applies an action to each element in the multiset.
* @param action the action to be performed on each element
*/","* {@inheritDoc}
   *
   * <p>Elements that occur multiple times in the multiset will be passed to the {@code Consumer}
   * correspondingly many times, though not necessarily sequentially.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,<init>,"com.google.common.collect.Multisets$FilteredMultiset:<init>(com.google.common.collect.Multiset,com.google.common.base.Predicate)",333,336,"/**
 * Constructs a filtered multiset.
 * @param unfiltered original multiset to filter
 * @param predicate condition for elements to be included
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,unmodifiableMultiset,com.google.common.collect.Multisets:unmodifiableMultiset(com.google.common.collect.ImmutableMultiset),122,128,"/**
 * Returns an unmodifiable view of the specified immutable multiset.
 * @param multiset the immutable multiset to be wrapped
 * @return unmodifiable Multiset instance
 */","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,union,"com.google.common.collect.Multisets:union(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",416,473,"/**
 * Computes the union of two multisets.
 * @param multiset1 first multiset
 * @param multiset2 second multiset
 * @return a new Multiset representing the union
 */","* Returns an unmodifiable view of the union of two multisets. In the returned multiset, the count
   * of each element is the <i>maximum</i> of its counts in the two backing multisets. The iteration
   * order of the returned multiset matches that of the element set of {@code multiset1} followed by
   * the members of the element set of {@code multiset2} that are not contained in {@code
   * multiset1}, with repeated occurrences of the same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,intersection,"com.google.common.collect.Multisets:intersection(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",487,529,"/**
* Computes the intersection of two multisets.
* @param multiset1 first multiset
* @param multiset2 second multiset
* @return a new Multiset containing elements common to both, with minimum counts
*/","* Returns an unmodifiable view of the intersection of two multisets. In the returned multiset,
   * the count of each element is the <i>minimum</i> of its counts in the two backing multisets,
   * with elements that would have a count of 0 not included. The iteration order of the returned
   * multiset matches that of the element set of {@code multiset1}, with repeated occurrences of the
   * same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,sum,"com.google.common.collect.Multisets:sum(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",543,605,"/**
 * Returns a multiset containing the union of elements from two multisets.
 * @param multiset1 first input multiset
 * @param multiset2 second input multiset
 * @return Multiset with combined counts of elements from both inputs
 */","* Returns an unmodifiable view of the sum of two multisets. In the returned multiset, the count
   * of each element is the <i>sum</i> of its counts in the two backing multisets. The iteration
   * order of the returned multiset matches that of the element set of {@code multiset1} followed by
   * the members of the element set of {@code multiset2} that are not contained in {@code
   * multiset1}, with repeated occurrences of the same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,difference,"com.google.common.collect.Multisets:difference(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",619,679,"/**
 * Computes the difference between two multisets.
 * @param multiset1 first multiset
 * @param multiset2 second multiset to subtract from the first
 * @return a new Multiset representing elements in multiset1 not in multiset2
 */","* Returns an unmodifiable view of the difference of two multisets. In the returned multiset, the
   * count of each element is the result of the <i>zero-truncated subtraction</i> of its count in
   * the second multiset from its count in the first multiset, with elements that would have a count
   * of 0 not included. The iteration order of the returned multiset matches that of the element set
   * of {@code multiset1}, with repeated occurrences of the same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,containsOccurrences,"com.google.common.collect.Multisets:containsOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",687,698,"/**
* Checks if a multiset contains at least as many occurrences of each element as another multiset.
* @param superMultiset the multiset to check within
* @param subMultiset the multiset with required occurrences
* @return true if superMultiset contains all elements of subMultiset with equal or greater count, false otherwise
*/","* Returns {@code true} if {@code subMultiset.count(o) <= superMultiset.count(o)} for all {@code
   * o}.
   *
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,retainOccurrencesImpl,"com.google.common.collect.Multisets:retainOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",723,742,"/**
* Retains specified occurrences in a multiset.
* @param multisetToModify the multiset to modify
* @param occurrencesToRetain the multiset specifying counts to retain
* @return true if any elements were removed or modified, false otherwise
*/",Delegate implementation which cares about the element type.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,removeOccurrences,"com.google.common.collect.Multisets:removeOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",805,825,"/**
* Removes occurrences from one multiset based on another.
* @param multisetToModify the multiset to modify
* @param occurrencesToRemove the multiset containing occurrences to remove
* @return true if any elements were removed, false otherwise
*/","* For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one
   * occurrence of {@code e} in {@code multisetToModify}.
   *
   * <p>Equivalently, this method modifies {@code multisetToModify} so that {@code
   * multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) -
   * occurrencesToRemove.count(e))}.
   *
   * <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll
   * removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear
   * in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit
   * sometimes more efficient than, the following:
   *
   * {@snippet :
   * for (E e : occurrencesToRemove) {
   *   multisetToModify.remove(e);
   * }
   * }
   *
   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation
   * @since 10.0 (missing in 18.0 when only the overload taking an {@code Iterable} was present)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,retainAllImpl,"com.google.common.collect.Multisets:retainAllImpl(com.google.common.collect.Multiset,java.util.Collection)",931,939,"/**
 * Retains only the elements in the multiset that are contained in the specified collection.
 * @param self the multiset to be modified
 * @param elementsToRetain the collection of elements to retain
 * @return true if this multiset was modified as a result of the call
 */",An implementation of {@link Multiset#retainAll}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,compare,"com.google.common.collect.NaturalOrdering:compare(java.lang.Comparable,java.lang.Comparable)",37,43,"/**
 * Compares two Comparable objects.
 * @param left first object to compare
 * @param right second object to compare
 * @return result of comparison as integer
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,from,com.google.common.collect.Ordering:from(com.google.common.collect.Ordering),203,209,"/**
 * Checks if the provided ordering is not null.
 * @param ordering the ordering to check
 * @return the same ordering object
 * @deprecated use checkNotNull directly
 */","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drain,"com.google.common.collect.Queues:drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit)",313,346,"/**
* Drains elements from a BlockingQueue to a collection.
* @param q source queue
* @param buffer destination collection
* @param numElements max number of elements to drain
* @param timeout max wait time for elements
* @param unit time unit for timeout
* @return number of elements drained
*/","* Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code
   * numElements} elements are not available, it will wait for them up to the specified timeout.
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up, in units of {@code unit}
   * @param unit a {@code TimeUnit} determining how to interpret the timeout parameter
   * @return the number of elements transferred
   * @throws InterruptedException if interrupted while waiting",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drainUninterruptibly,"com.google.common.collect.Queues:drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit)",383,425,"/**
 * Drains elements from a blocking queue into a collection.
 * @param q source blocking queue
 * @param buffer destination collection
 * @param numElements max number of elements to drain
 * @param timeout max wait time in the given unit
 * @param unit time unit for the timeout
 * @return number of elements drained
 */","* Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, long, TimeUnit)}, but
   * with a different behavior in case it is interrupted while waiting. In that case, the operation
   * will continue as usual, and in the end the thread's interruption status will be set (no {@code
   * InterruptedException} is thrown).
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up, in units of {@code unit}
   * @param unit a {@code TimeUnit} determining how to interpret the timeout parameter
   * @return the number of elements transferred",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,contains,com.google.common.collect.Range:contains(java.lang.Comparable),407,411,"/**
* Checks if the range contains a specific value.
* @param value the value to check
* @return true if the value is within the range, false otherwise
*/","* Returns {@code true} if {@code value} is within the bounds of this range. For example, on the
   * range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)}
   * returns {@code false}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,forEach,com.google.common.collect.RegularImmutableBiMap:forEach(java.util.function.BiConsumer),165,171,"/**
* Applies the given action to each key-value pair.
* @param action the action to perform on each entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,forEach,com.google.common.collect.RegularImmutableMap:forEach(java.util.function.BiConsumer),289,295,"/**
 * Applies the given action to each entry in the map.
 * @param action the action to be performed on each entry
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,headIndex,"com.google.common.collect.RegularImmutableSortedSet:headIndex(java.lang.Object,boolean)",252,259,"/**
 * Finds the insertion point for an element.
 * @param toElement element to search for
 * @param inclusive true to include equal elements
 * @return insertion index or -1 if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,tailIndex,"com.google.common.collect.RegularImmutableSortedSet:tailIndex(java.lang.Object,boolean)",272,279,"/**
* Finds the tail index of an element.
* @param fromElement element to search for
* @param inclusive true to include the element if found
* @return index of the element or insertion point
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseNaturalOrdering.java,compare,"com.google.common.collect.ReverseNaturalOrdering:compare(java.lang.Comparable,java.lang.Comparable)",32,41,"/**
 * Compares two objects using their natural ordering.
 * @param left the first object to compare
 * @param right the second object to compare
 * @return negative if left is less than right, positive if greater, zero if equal
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,retainAll,com.google.common.collect.Sets$ImprovedAbstractSet:retainAll(java.util.Collection),89,92,"/**
* Retains only elements contained in the specified collection.
* @param c collection containing elements to be retained
* @return true if this collection changed as a result of the call
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newTreeSet,com.google.common.collect.Sets:newTreeSet(java.util.Comparator),438,442,"/**
* Creates a new TreeSet with the specified comparator.
* @param comparator the comparator to order the elements
* @return a new TreeSet instance
*/","* Creates a <i>mutable</i>, empty {@code TreeSet} instance with the given comparator.
   *
   * <p><b>Note:</b> if mutability is not required, use {@code
   * ImmutableSortedSet.orderedBy(comparator).build()} instead.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,
   * use the {@code TreeSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>. One caveat to this is that the {@code TreeSet} constructor uses a null {@code
   * Comparator} to mean ""natural ordering,"" whereas this factory rejects null. Clean your code
   * accordingly.
   *
   * @param comparator the comparator to use to sort the set
   * @return a new, empty {@code TreeSet}
   * @throws NullPointerException if {@code comparator} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,forEach,com.google.common.collect.SingletonImmutableBiMap:forEach(java.util.function.BiConsumer),67,70,"/**
 * Applies given action to the single key-value pair.
 * @param action consumer to apply to the key and value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$ColumnKeySet:retainAll(java.util.Collection),736,751,"/**
 * Retains only the mappings whose keys are contained in the specified collection.
 * @param c collection of keys to retain
 * @return true if this map was modified as a result of the call
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,zip,"com.google.common.collect.Streams:zip(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiFunction)",332,363,"/**
* Zips two streams using a binary function.
* @param streamA first input stream
* @param streamB second input stream
* @param function binary function to apply to elements of both streams
* @return Stream of results from applying the function to paired elements
*/","* Returns a stream in which each element is the result of passing the corresponding element of
   * each of {@code streamA} and {@code streamB} to {@code function}.
   *
   * <p>For example:
   *
   * {@snippet :
   * Streams.zip(
   *   Stream.of(""foo1"", ""foo2"", ""foo3""),
   *   Stream.of(""bar1"", ""bar2""),
   *   (arg1, arg2) -> arg1 + "":"" + arg2)
   * }
   *
   * <p>will return {@code Stream.of(""foo1:bar1"", ""foo2:bar2"")}.
   *
   * <p>The resulting stream will only be as long as the shorter of the two input streams; if one
   * stream is longer, its extra elements will be ignored.
   *
   * <p>Note that if you are calling {@link Stream#forEach} on the resulting stream, you might want
   * to consider using {@link #forEachPair} instead of this method.
   *
   * <p><b>Performance note:</b> The resulting stream is not <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>.
   * This may harm parallel performance.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.Stream,com.google.common.collect.Streams$FunctionWithIndex)",444,503,"/**
 * Maps elements of a stream with their index.
 * @param stream the source stream
 * @param function mapping function that takes an element and its index
 * @return a new stream with mapped elements
 */","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indices in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     Stream.of(""a"", ""b"", ""c""),
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>would return {@code Stream.of(""0:a"", ""1:b"", ""2:c"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.IntStream,com.google.common.collect.Streams$IntFunctionWithIndex)",527,582,"/**
 * Maps an IntStream to a Stream with index using a function.
 * @param stream the source IntStream
 * @param function the mapping function with index
 * @return a Stream of mapped values
 */","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indexes in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     IntStream.of(10, 11, 12),
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>...would return {@code Stream.of(""0:10"", ""1:11"", ""2:12"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.LongStream,com.google.common.collect.Streams$LongFunctionWithIndex)",606,661,"/**
 * Maps elements of a LongStream with their index.
 * @param stream the input LongStream
 * @param function the mapping function that takes an element and its index
 * @return a Stream of mapped results
 */","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indexes in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     LongStream.of(10, 11, 12),
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>...would return {@code Stream.of(""0:10"", ""1:11"", ""2:12"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.DoubleStream,com.google.common.collect.Streams$DoubleFunctionWithIndex)",685,740,"/**
 * Maps elements of a DoubleStream with their index.
 * @param stream input DoubleStream
 * @param function mapping function that takes an element and its index
 * @return Stream of mapped results
 */","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indexes in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     DoubleStream.of(0.0, 1.0, 2.0)
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>...would return {@code Stream.of(""0:0.0"", ""1:1.0"", ""2:2.0"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedObject:<init>(java.lang.Object,java.lang.Object)",85,88,"/**
* Initializes synchronized object with delegate and optional mutex.
* @param delegate target object to synchronize access to
* @param mutex lock object; uses 'this' if null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toTable,"com.google.common.collect.TableCollectors:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)",102,135,"/**
* Collects elements into a table.
* @param rowFunction extracts row key from element
* @param columnFunction extracts column key from element
* @param valueFunction extracts value from element
* @param mergeFunction merges values for duplicate keys
* @param tableSupplier supplies the table implementation
* @return Collector that groups elements into a table
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,mergeTables,"com.google.common.collect.TableCollectors:mergeTables(com.google.common.collect.Table,java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)",203,221,"/**
 * Merges a value into the specified cell of a table.
 * @param table the table to merge into
 * @param row the row key for the target cell
 * @param column the column key for the target cell
 * @param value the new value to merge
 * @param mergeFunction function to compute the merged value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,"com.google.common.collect.Tables$TransformedTable:<init>(com.google.common.collect.Table,com.google.common.base.Function)",420,423,"/**
* Constructs a transformed table.
* @param fromTable source table to transform
* @param function transformation function for values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,com.google.common.collect.Tables$TransposeTable:<init>(com.google.common.collect.Table),225,227,"/**
 * Initializes a new instance with the transposed table.
 * @param original the original table to transpose
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedIterator.java,<init>,com.google.common.collect.TransformedIterator:<init>(java.util.Iterator),36,38,"/**
 * Initializes a new TransformedIterator with the given iterator.
 * @param backingIterator the underlying iterator to transform
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,put,"com.google.common.collect.TreeRangeMap$1:put(com.google.common.collect.Range,java.lang.Object)",137,144,"/**
* Adds a key-value pair for the specified range.
* @param range the key range
* @param value the associated value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putCoalescing,"com.google.common.collect.TreeRangeMap$1:putCoalescing(com.google.common.collect.Range,java.lang.Object)",146,156,"/**
* Adds or merges a range with the existing ranges.
* @param range the range to add or merge
* @param value the value associated with the range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$1:remove(com.google.common.collect.Range),211,259,"/**
 * Removes a specified range from the range map.
 * @param rangeToRemove the range to be removed
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,merge,"com.google.common.collect.TreeRangeMap$1:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)",283,335,"/**
 * Merges a range with a value using a remapping function.
 * @param range the range to merge
 * @param value the value to associate with the range
 * @param remappingFunction function to apply for merging values
 */",* @since 28.1,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,subRangeMap,com.google.common.collect.TreeRangeMap$1:subRangeMap(com.google.common.collect.Range),384,391,"/**
 * Returns a sub-range map restricted to the specified range.
 * @param subRange the range to restrict the map to
 * @return a RangeMap covering only the specified range
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,<init>,"com.google.common.collect.TreeTraverser$PostOrderNode:<init>(java.lang.Object,java.util.Iterator)",214,217,"/**
* Initializes a PostOrderNode with a root and a child iterator.
* @param root the root node of the tree
* @param childIterator iterator for child nodes
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,next,com.google.common.collect.TreeTraverser$PreOrderIterator:next(),158,170,"/**
 * Returns the next element in the traversal.
 * @return the next element
 * @throws NoSuchElementException if no more elements are available
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,using,com.google.common.collect.TreeTraverser:using(com.google.common.base.Function),93,103,"/**
* Creates a tree traverser using a function to get children nodes.
* @param nodeToChildrenFunction function mapping each node to its children
* @return TreeTraverser instance for the given node structure
*/","* Returns a tree traverser that uses the given function to navigate from a node to its children.
   * This is useful if the function instance already exists, or so that you can supply a lambda
   * expressions. If those circumstances don't apply, you probably don't need to use this; subclass
   * {@code TreeTraverser} and implement its {@link #children} method directly.
   *
   * @since 20.0
   * @deprecated Use {@link com.google.common.graph.Traverser#forTree} instead. If you are using a
   *     lambda, these methods have exactly the same signature.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,preOrderTraversal,com.google.common.collect.TreeTraverser:preOrderTraversal(java.lang.Object),118,139,"/**
* Performs pre-order traversal on a tree.
* @param root the starting node of the traversal
* @return FluentIterable for traversing nodes in pre-order
*/","* Returns an unmodifiable iterable over the nodes in a tree structure, using pre-order traversal.
   * That is, each node's subtrees are traversed after the node itself is returned.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration
   * is in progress or when the iterators generated by {@link #children} are advanced.
   *
   * @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPreOrder} instead, which has
   *     the same behavior.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,postOrderTraversal,com.google.common.collect.TreeTraverser:postOrderTraversal(java.lang.Object),183,204,"/**
* Performs post-order traversal on a tree.
* @param root the root node of the tree
* @return FluentIterable for traversing nodes in post-order
*/","* Returns an unmodifiable iterable over the nodes in a tree structure, using post-order
   * traversal. That is, each node's subtrees are traversed before the node itself is returned.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration
   * is in progress or when the iterators generated by {@link #children} are advanced.
   *
   * @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPostOrder} instead, which
   *     has the same behavior.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,breadthFirstTraversal,com.google.common.collect.TreeTraverser:breadthFirstTraversal(java.lang.Object),258,267,"/**
* Performs a breadth-first traversal starting from the given root.
* @param root the starting node for traversal
* @return FluentIterable representing the traversal order
*/","* Returns an unmodifiable iterable over the nodes in a tree structure, using breadth-first
   * traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration
   * is in progress or when the iterators generated by {@link #children} are advanced.
   *
   * @deprecated Use {@link com.google.common.graph.Traverser#breadthFirst} instead, which has the
   *     same behavior.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedCharEscaper.java,escape,com.google.common.escape.ArrayBasedCharEscaper:escape(java.lang.String),103,113,"/**
* Escapes special characters in the input string.
* @param s the string to be escaped
* @return the escaped string
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedEscaperMap.java,createReplacementArray,com.google.common.escape.ArrayBasedEscaperMap:createReplacementArray(java.util.Map),66,78,"/**
* Creates a replacement array from character mappings.
* @param map mapping of characters to replacement strings
* @return 2D char array where each index corresponds to a character's replacements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedUnicodeEscaper.java,escape,com.google.common.escape.ArrayBasedUnicodeEscaper:escape(java.lang.String),142,154,"/**
* Escapes special characters in a string.
* @param s input string to be escaped
* @return escaped string or original if no escaping needed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,addEscape,"com.google.common.escape.CharEscaperBuilder:addEscape(char,java.lang.String)",84,91,"/**
* Adds an escape mapping for a character.
* @param c character to be escaped
* @param r replacement string
* @return this builder instance
*/",Add a new mapping from an index to an object to the escaping.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,addEscape,"com.google.common.escape.Escapers$Builder:addEscape(char,java.lang.String)",140,146,"/**
* Adds a character escape mapping.
* @param c character to be escaped
* @param replacement string to replace the character with
* @return this Builder instance for method chaining
*/","* Adds a replacement string for the given input character. The specified character will be
     * replaced by the given string whenever it occurs in the input, irrespective of whether it lies
     * inside or outside the 'safe' range.
     *
     * @param c the character to be replaced
     * @param replacement the string to replace the given character
     * @return the builder instance
     * @throws NullPointerException if {@code replacement} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,codePointAt,"com.google.common.escape.UnicodeEscaper:codePointAt(java.lang.CharSequence,int,int)",245,286,"/**
 * Retrieves the code point at a specified index within a CharSequence.
 * @param seq the CharSequence to query
 * @param index the starting index of the character
 * @param end the ending index for validation
 * @return the Unicode code point or throws exceptions if invalid
 */","* Returns the Unicode code point of the character at the given index.
   *
   * <p>Unlike {@link Character#codePointAt(CharSequence, int)} or {@link String#codePointAt(int)}
   * this method will never fail silently when encountering an invalid surrogate pair.
   *
   * <p>The behaviour of this method is as follows:
   *
   * <ol>
   *   <li>If {@code index >= end}, {@link IndexOutOfBoundsException} is thrown.
   *   <li><b>If the character at the specified index is not a surrogate, it is returned.</b>
   *   <li>If the first character was a high surrogate value, then an attempt is made to read the
   *       next character.
   *       <ol>
   *         <li><b>If the end of the sequence was reached, the negated value of the trailing high
   *             surrogate is returned.</b>
   *         <li><b>If the next character was a valid low surrogate, the code point value of the
   *             high/low surrogate pair is returned.</b>
   *         <li>If the next character was not a low surrogate value, then {@link
   *             IllegalArgumentException} is thrown.
   *       </ol>
   *   <li>If the first character was a low surrogate value, {@link IllegalArgumentException} is
   *       thrown.
   * </ol>
   *
   * @param seq the sequence of characters from which to decode the code point
   * @param index the index of the first character to decode
   * @param end the index beyond the last valid character to decode
   * @return the Unicode code point for the given index or the negated value of the trailing high
   *     surrogate character at the end of the sequence",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/DeadEvent.java,<init>,"com.google.common.eventbus.DeadEvent:<init>(java.lang.Object,java.lang.Object)",41,44,"/**
* Constructs a DeadEvent with a source and an event.
* @param source the source of the event
* @param event the event object
*/","* Creates a new DeadEvent.
   *
   * @param source object broadcasting the DeadEvent (generally the {@link EventBus}).
   * @param event the event that could not be delivered.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,handleSubscriberException,"com.google.common.eventbus.EventBus:handleSubscriberException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext)",216,228,"/**
* Handles exceptions for subscribers.
* @param e the original exception
* @param context provides additional context about the exception
*/",Handles the given exception thrown by a subscriber with the given context.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,invokeSubscriberMethod,com.google.common.eventbus.Subscriber:invokeSubscriberMethod(java.lang.Object),81,95,"/**
* Invokes a subscriber method with the given event.
* @param event the event to pass to the method
* @throws InvocationTargetException if method invocation fails
*/","* Invokes the subscriber method. This method can be overridden to make the invocation
   * synchronized.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberExceptionContext.java,<init>,"com.google.common.eventbus.SubscriberExceptionContext:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.Object,java.lang.reflect.Method)",39,45,"/**
* Initializes context for exception handling in event subscribers.
* @param eventBus the EventBus instance
* @param event the event object that triggered the subscription
* @param subscriber the subscriber object handling the event
* @param subscriberMethod the method within the subscriber handling the event
*/","* @param eventBus The {@link EventBus} that handled the event and the subscriber. Useful for
   *     broadcasting a new event based on the error.
   * @param event The event object that caused the subscriber to throw.
   * @param subscriber The source subscriber context.
   * @param subscriberMethod the subscribed method.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,"com.google.common.graph.AbstractBaseGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",157,162,"/**
* Checks if there is an edge between two nodes.
* @param nodeU first node
* @param nodeV second node
* @return true if edge exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,hasEdgeConnecting,"com.google.common.graph.AbstractNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)",224,229,"/**
* Checks if there's an edge between two nodes.
* @param nodeU first node
* @param nodeV second node
* @return true if edge exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,<init>,com.google.common.graph.AbstractUndirectedNetworkConnections:<init>(java.util.Map),39,41,"/**
* Constructs an undirected network with given edge connections.
* @param incidentEdgeMap mapping of elements to their incident edges
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,com.google.common.graph.DirectedGraphConnections$NodeConnection:<init>(java.lang.Object),75,77,"/**
 * Constructs a new NodeConnection with the specified node.
 * @param node the node to connect to, must not be null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,value,com.google.common.graph.DirectedGraphConnections:value(java.lang.Object),413,425,"/**
 * Retrieves the value associated with a node.
 * @param node the node to query
 * @return the value or null if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,<init>,"com.google.common.graph.EdgesConnecting:<init>(java.util.Map,java.lang.Object)",42,45,"/**
* Initializes edges connecting to a target node.
* @param nodeToEdgeMap map of nodes to their outgoing edges
* @param targetNode the node to connect edges to
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,<init>,"com.google.common.graph.EndpointPair:<init>(java.lang.Object,java.lang.Object)",46,49,"/**
* Initializes an EndpointPair with two non-null nodes.
* @param nodeU first node in the pair
* @param nodeV second node in the pair
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,copyOf,com.google.common.graph.ImmutableGraph:copyOf(com.google.common.graph.ImmutableGraph),71,77,"/**
 * Returns a non-null immutable graph.
 * @param graph the graph to be checked and returned
 * @return the input graph, guaranteed to not be null
 * @deprecated Use Preconditions.checkNotNull instead
 */","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,copyOf,com.google.common.graph.ImmutableNetwork:copyOf(com.google.common.graph.ImmutableNetwork),69,75,"/**
* Copies an immutable network, ensuring it's not null.
* @param network the network to copy
* @return the same network instance
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,copyOf,com.google.common.graph.ImmutableValueGraph:copyOf(com.google.common.graph.ImmutableValueGraph),66,72,"/**
 * Copies an immutable value graph.
 * @param graph the graph to copy
 * @return a new instance of the same graph
 */","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,<init>,com.google.common.graph.MapIteratorCache:<init>(java.util.Map),58,60,"/**
 * Initializes a new instance of MapIteratorCache with the provided map.
 * @param backingMap the map to back this cache
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,getWithoutCaching,com.google.common.graph.MapIteratorCache:getWithoutCaching(java.lang.Object),93,96,"/**
 * Retrieves value without caching.
 * @param key unique identifier for the value
 * @return associated value or null if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MultiEdgesConnecting.java,<init>,"com.google.common.graph.MultiEdgesConnecting:<init>(java.util.Map,java.lang.Object)",43,46,"/**
* Initializes with outgoing edges and target node.
* @param outEdgeToNode map of edges to connected nodes
* @param targetNode the node to connect to
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,visitNext,com.google.common.graph.Traverser$Traversal$2:visitNext(java.util.Deque),480,480,"/**
 * Visits the next node in the traversal.
 * @param horizon stack of iterators representing current traversal path
 * @return the next node or null if no more nodes to visit
 */","* Visits the next node from the top iterator of {@code horizon} and returns the visited node.
     * Null is returned to indicate reaching the end of the top iterator.
     *
     * <p>For example, if horizon is {@code [[a, b], [c, d], [e]]}, {@code visitNext()} will return
     * {@code [a, b, null, c, d, null, e, null]} sequentially, encoding the topological structure.
     * (Note, however, that the callers of {@code visitNext()} often insert additional iterators
     * into {@code horizon} between calls to {@code visitNext()}. This causes them to receive
     * additional values interleaved with those shown above.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,<init>,com.google.common.graph.Traverser:<init>(com.google.common.graph.SuccessorsFunction),70,72,"/**
 * Initializes a new Traverser with a given successors function.
 * @param successorFunction function to determine successors of a node
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,<init>,com.google.common.graph.UndirectedGraphConnections:<init>(java.util.Map),43,45,"/**
 * Initializes an undirected graph with given node connections.
 * @param adjacentNodeValues map of nodes and their connected values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,<init>,com.google.common.hash.Funnels$SequentialFunnel:<init>(com.google.common.hash.Funnel),182,184,"/**
 * Constructs a SequentialFunnel with a specified element funnel.
 * @param elementFunnel the funnel to process elements, cannot be null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,<init>,com.google.common.hash.Funnels$SinkAsStream:<init>(com.google.common.hash.PrimitiveSink),253,255,"/**
 * Initializes with a given sink.
 * @param sink PrimitiveSink to be used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,<init>,com.google.common.hash.Funnels$StringCharsetFunnel:<init>(java.nio.charset.Charset),93,95,"/**
* Initializes a new instance with a specified character set.
* @param charset the character set to use; must not be null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingInputStream.java,<init>,"com.google.common.hash.HashingInputStream:<init>(com.google.common.hash.HashFunction,java.io.InputStream)",41,44,"/**
* Initializes a new HashingInputStream.
* @param hashFunction the hash function to use
* @param in the input stream to read from
*/","* Creates an input stream that hashes using the given {@link HashFunction} and delegates all data
   * read from it to the underlying {@link InputStream}.
   *
   * <p>The {@link InputStream} should not be read from before or after the hand-off.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingOutputStream.java,<init>,"com.google.common.hash.HashingOutputStream:<init>(com.google.common.hash.HashFunction,java.io.OutputStream)",44,47,"/**
* Initializes a new HashingOutputStream.
* @param hashFunction the hashing algorithm to use
* @param out the underlying output stream to write data to
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,<init>,com.google.common.io.AppendableWriter:<init>(java.lang.Appendable),46,48,"/**
 * Initializes an AppendableWriter with a target.
 * @param target the Appendable object to write to
 */","* Creates a new writer that appends everything it writes to {@code target}.
   *
   * @param target target to which to append output",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodingStream,com.google.common.io.BaseEncoding$StandardBaseEncoding:encodingStream(java.io.Writer),637,681,"/**
* Creates an OutputStream that encodes bytes to a Writer using a specified alphabet.
* @param out Writer to output encoded characters
* @return OutputStream for encoding byte data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,trimTrailingPadding,com.google.common.io.BaseEncoding$StandardBaseEncoding:trimTrailingPadding(java.lang.CharSequence),722,736,"/**
 * Removes trailing padding characters from a CharSequence.
 * @param chars the input CharSequence to trim
 * @return trimmed CharSequence without trailing padding
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodingStream,com.google.common.io.BaseEncoding$StandardBaseEncoding:decodingStream(java.io.Reader),778,849,"/**
 * Creates a decoding stream from a Reader.
 * @param reader source of encoded characters
 * @return InputStream that decodes the input
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodingSink,com.google.common.io.BaseEncoding:encodingSink(com.google.common.io.CharSink),177,187,"/**
* Creates a ByteSink for writing bytes to an encoded CharSink.
* @param encodedSink sink for the encoded output
* @return ByteSink that writes to the encodedCharSink
*/",* Returns a {@code ByteSink} that writes base-encoded bytes to the specified {@code CharSink}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodingSource,com.google.common.io.BaseEncoding:decodingSource(com.google.common.io.CharSource),250,260,"/**
* Creates a ByteSource from a CharSource by decoding it.
* @param encodedSource source of encoded characters
* @return ByteSource representing the decoded bytes
*/","* Returns a {@code ByteSource} that reads base-encoded bytes from the specified {@code
   * CharSource}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,trimTrailingPadding,com.google.common.io.BaseEncoding:trimTrailingPadding(java.lang.CharSequence),272,274,"/**
 * Trims trailing padding from the input sequence.
 * @param chars the input character sequence
 * @return the trimmed character sequence
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,ignoringReader,"com.google.common.io.BaseEncoding:ignoringReader(java.io.Reader,java.lang.String)",1055,1080,"/**
* Creates a Reader that ignores specified characters.
* @param delegate original Reader to wrap
* @param toIgnore string of characters to ignore
* @return Reader ignoring specified characters
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,<init>,com.google.common.io.CharSequenceReader:<init>(java.lang.CharSequence),46,48,"/**
 * Initializes a new CharSequenceReader.
 * @param seq the character sequence to read from; must not be null
 */",Creates a new reader wrapping the given character sequence.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,com.google.common.io.CharStreams$NullWriter:write(char[]),290,293,"/**
 * Writes characters from a buffer to a destination.
 * @param cbuf character array containing data to write
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,com.google.common.io.CharStreams$NullWriter:write(java.lang.String),300,303,"/**
 * Writes a string to the output.
 * @param str the string to be written, must not be null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,copyReaderToBuilder,"com.google.common.io.CharStreams:copyReaderToBuilder(java.io.Reader,java.lang.StringBuilder)",112,124,"/**
* Copies data from a Reader to a StringBuilder.
* @param from source Reader
* @param to destination StringBuilder
* @return number of characters copied
* @throws IOException if an I/O error occurs
*/","* Copies all characters between the {@link Reader} and {@link StringBuilder} objects. Does not
   * close or flush the reader.
   *
   * <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific
   * types. CharBuffer has poor performance when being written into or read out of so round tripping
   * all the bytes through the buffer takes a long time. With these specialized types we can just
   * use a char array.
   *
   * @param from the object to read from
   * @param to the object to write to
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,copyReaderToWriter,"com.google.common.io.CharStreams:copyReaderToWriter(java.io.Reader,java.io.Writer)",140,152,"/**
* Copies data from Reader to Writer.
* @param from source Reader
* @param to destination Writer
* @return number of characters copied
*/","* Copies all characters between the {@link Reader} and {@link Writer} objects. Does not close or
   * flush the reader or writer.
   *
   * <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific
   * types. CharBuffer has poor performance when being written into or read out of so round tripping
   * all the bytes through the buffer takes a long time. With these specialized types we can just
   * use a char array.
   *
   * @param from the object to read from
   * @param to the object to write to
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,skipFully,"com.google.common.io.CharStreams:skipFully(java.io.Reader,long)",258,267,"/**
 * Skips exactly n characters in the given Reader.
 * @param reader source of characters to skip
 * @param n number of characters to skip
 * @throws IOException if an I/O error occurs or end of stream is reached prematurely
 */","* Discards {@code n} characters of data from the reader. This method will block until the full
   * amount has been skipped. Does not close the reader.
   *
   * @param reader the reader to read from
   * @param n the number of characters to skip
   * @throws EOFException if this stream reaches the end before skipping all the characters
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,<init>,com.google.common.io.Closer:<init>(com.google.common.io.Closer$Suppressor),95,98,"/**
* Initializes a Closer with a Suppressor.
* @param suppressor used to suppress exceptions
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CountingInputStream.java,<init>,com.google.common.io.CountingInputStream:<init>(java.io.InputStream),43,45,"/**
 * Wraps an InputStream to count the number of bytes read.
 * @param in the input stream to be wrapped
 */","* Wraps another input stream, counting the number of bytes read.
   *
   * @param in the input stream to be wrapped",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CountingOutputStream.java,<init>,com.google.common.io.CountingOutputStream:<init>(java.io.OutputStream),42,44,"/**
 * Constructs a CountingOutputStream that wraps another OutputStream.
 * @param out the underlying OutputStream to be wrapped
 */","* Wraps another output stream, counting the number of bytes written.
   *
   * @param out the output stream to be wrapped",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,newReader,"com.google.common.io.Files:newReader(java.io.File,java.nio.charset.Charset)",86,90,"/**
 * Creates a BufferedReader for reading from a file with specified charset.
 * @param file the File to read from
 * @param charset the Charset to use for decoding bytes to characters
 * @return a BufferedReader instance
 * @throws FileNotFoundException if the file does not exist
 */","* Returns a buffered reader that reads from a file using the given character set.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#newBufferedReader(java.nio.file.Path, Charset)}.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return the buffered reader",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,newWriter,"com.google.common.io.Files:newWriter(java.io.File,java.nio.charset.Charset)",104,108,"/**
* Creates a BufferedWriter for writing to a file with specified charset.
* @param file the File object to write to
* @param charset character set for encoding
* @return BufferedWriter instance
* @throws FileNotFoundException if the file cannot be opened for writing
*/","* Returns a buffered writer that writes to a file using the given character set.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#newBufferedWriter(java.nio.file.Path, Charset,
   * java.nio.file.OpenOption...)}.
   *
   * @param file the file to write to
   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return the buffered writer",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,touch,com.google.common.io.Files:touch(java.io.File),445,451,"/**
* Updates the last modified timestamp of a file.
* @param file the file to touch
* @throws IOException if unable to update the timestamp
*/","* Creates an empty file or updates the last updated timestamp on the same as the unix command of
   * the same name.
   *
   * @param file the file to create or update
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,createParentDirs,com.google.common.io.Files:createParentDirs(java.io.File),462,478,"/**
* Creates all parent directories for a given file.
* @param file the target file
* @throws IOException if directory creation fails
*/","* Creates any necessary but nonexistent parent directories of the specified file. Note that if
   * this operation fails it may have succeeded in creating some (but not all) of the necessary
   * parent directories.
   *
   * @throws IOException if an I/O error occurs, or if any necessary but nonexistent parent
   *     directories of the specified file could not be created.
   * @since 4.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,getFileExtension,com.google.common.io.Files:getFileExtension(java.lang.String),796,801,"/**
 * Retrieves the file extension from a full file name.
 * @param fullName complete file path or name
 * @return file extension or empty string if no extension
 */","* Returns the <a href=""http://en.wikipedia.org/wiki/Filename_extension"">file extension</a> for
   * the given file name, or the empty string if the file has no extension. The result does not
   * include the '{@code .}'.
   *
   * <p><b>Note:</b> This method simply returns everything after the last '{@code .}' in the file's
   * name as determined by {@link File#getName}. It does not account for any filesystem-specific
   * behavior that the {@link File} API does not already account for. For example, on NTFS it will
   * report {@code ""txt""} as the extension for the filename {@code ""foo.exe:.txt""} even though NTFS
   * will drop the {@code "":.txt""} part of the name when the file is actually created on the
   * filesystem due to NTFS's <a
   * href=""https://learn.microsoft.com/en-us/archive/blogs/askcore/alternate-data-streams-in-ntfs"">Alternate
   * Data Streams</a>.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,getNameWithoutExtension,com.google.common.io.Files:getNameWithoutExtension(java.lang.String),813,818,"/**
* Removes the file extension from a given file path.
* @param file full file path or name
* @return file name without extension
*/","* Returns the file name without its <a
   * href=""http://en.wikipedia.org/wiki/Filename_extension"">file extension</a> or path. This is
   * similar to the {@code basename} unix command. The result does not include the '{@code .}'.
   *
   * @param file The name of the file to trim the extension from. This can be either a fully
   *     qualified file name (including a path) or just a file name.
   * @return The file name without its path or extension.
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,<init>,com.google.common.io.LittleEndianDataInputStream:<init>(java.io.InputStream),51,53,"/**
 * Constructs a LittleEndianDataInputStream.
 * @param in input stream to read from, must not be null
 */","* Creates a {@code LittleEndianDataInputStream} that wraps the given stream.
   *
   * @param in the stream to delegate to",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,<init>,com.google.common.io.LittleEndianDataOutputStream:<init>(java.io.OutputStream),46,48,"/**
 * Constructs a LittleEndianDataOutputStream.
 * @param out underlying output stream
 */","* Creates a {@code LittleEndianDataOutputStream} that wraps the given stream.
   *
   * @param out the stream to delegate to",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,touch,com.google.common.io.MoreFiles:touch(java.nio.file.Path),389,407,"/**
* Updates or creates a file with current timestamp.
* @param path file path to update or create
* @throws IOException if an I/O error occurs
*/","* Like the unix command of the same name, creates an empty file or updates the last modified
   * timestamp of the existing file at the given path to the current system time.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/PatternFilenameFilter.java,<init>,com.google.common.io.PatternFilenameFilter:<init>(java.util.regex.Pattern),53,55,"/**
 * Constructs a filter with a given pattern.
 * @param pattern regex pattern to match filenames
 */","* Constructs a pattern file name filter object.
   *
   * @param pattern the pattern on which to filter file names",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,isPowerOfTwo,com.google.common.math.BigIntegerMath:isPowerOfTwo(java.math.BigInteger),72,75,"/**
* Checks if a BigInteger is a power of two.
* @param x the BigInteger to check
* @return true if x is a power of two, false otherwise
*/",Returns {@code true} if {@code x} represents a power of two.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/PercentEscaper.java,nextEscapeIndex,"com.google.common.net.PercentEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)",127,137,"/**
* Finds the next escape index in the CharSequence.
* @param csq the CharSequence to search
* @param index the starting index
* @param end the ending index
* @return the index of the next character that needs escaping, or end if none
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/PercentEscaper.java,escape,com.google.common.net.PercentEscaper:escape(java.lang.String),143,154,"/**
* Escapes a string by checking each character.
* @param s the input string to be escaped
* @return escaped string or original if no escaping needed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,forEach,com.google.common.primitives.ImmutableDoubleArray:forEach(java.util.function.DoubleConsumer),426,431,"/**
* Applies a given DoubleConsumer to each element in the array range.
* @param consumer action to be performed on each double value
*/","* Invokes {@code consumer} for each value contained in this array, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,forEach,com.google.common.primitives.ImmutableIntArray:forEach(java.util.function.IntConsumer),421,426,"/**
* Applies a given consumer to each element in the range.
* @param consumer function to apply to each element
*/","* Invokes {@code consumer} for each value contained in this array, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,forEach,com.google.common.primitives.ImmutableLongArray:forEach(java.util.function.LongConsumer),423,428,"/**
 * Applies a consumer function to each element in the range.
 * @param consumer function to apply to each element
 */","* Invokes {@code consumer} for each value contained in this array, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Primitives.java,isWrapperType,com.google.common.primitives.Primitives:isWrapperType(java.lang.Class),101,103,"/**
 * Checks if a given class is a wrapper type.
 * @param type Class to check
 * @return true if type is a wrapper, false otherwise
 */","* Returns {@code true} if {@code type} is one of the nine primitive-wrapper types, such as {@link
   * Integer}.
   *
   * @see Class#isPrimitive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Primitives.java,wrap,com.google.common.primitives.Primitives:wrap(java.lang.Class),115,122,"/**
 * Wraps primitive types to their corresponding wrapper classes.
 * @param type the class of the type to wrap
 * @return the wrapper class or the original type if not a primitive
 */","* Returns the corresponding wrapper type of {@code type} if it is a primitive type; otherwise
   * returns {@code type} itself. Idempotent.
   *
   * <pre>
   *     wrap(int.class) == Integer.class
   *     wrap(Integer.class) == Integer.class
   *     wrap(String.class) == String.class
   * </pre>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Primitives.java,unwrap,com.google.common.primitives.Primitives:unwrap(java.lang.Class),134,141,"/**
* Unwraps wrapper class to primitive class if applicable.
* @param type the wrapper class to unwrap
* @return the corresponding primitive class or original type if not a wrapper
*/","* Returns the corresponding primitive type of {@code type} if it is a wrapper type; otherwise
   * returns {@code type} itself. Idempotent.
   *
   * <pre>
   *     unwrap(Integer.class) == int.class
   *     unwrap(int.class) == int.class
   *     unwrap(String.class) == String.class
   * </pre>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,parseUnsignedByte,"com.google.common.primitives.UnsignedBytes:parseUnsignedByte(java.lang.String,int)",229,238,"/**
 * Parses an unsigned byte from a string.
 * @param string the string to parse
 * @param radix the base of the number in the string
 * @return the parsed byte value
 * @throws NumberFormatException if the string is out of range
 */","* Returns the unsigned {@code byte} value represented by a string with the given radix.
   *
   * @param string the string containing the unsigned {@code byte} representation to be parsed.
   * @param radix the radix to use while parsing {@code string}
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte} with
   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link
   *     Character#MAX_RADIX}.
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Byte#parseByte(String)})
   * @since 13.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,parseUnsignedInt,"com.google.common.primitives.UnsignedInts:parseUnsignedInt(java.lang.String,int)",360,369,"/**
 * Parses a string as an unsigned integer.
 * @param string the string to parse
 * @param radix the radix to use while parsing
 * @return the parsed unsigned integer value
 * @throws NumberFormatException if the string is not a valid unsigned integer in the specified radix
 */","* Returns the unsigned {@code int} value represented by a string with the given radix.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String, int)} instead.
   *
   * @param string the string containing the unsigned integer representation to be parsed.
   * @param radix the radix to use while parsing {@code s}; must be between {@link
   *     Character#MIN_RADIX} and {@link Character#MAX_RADIX}.
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int}, or
   *     if supplied radix is invalid.
   * @throws NullPointerException if {@code s} is null (in contrast to {@link
   *     Integer#parseInt(String)})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,<init>,"com.google.common.reflect.ClassPath$LocationInfo:<init>(java.io.File,java.lang.ClassLoader)",411,414,"/**
* Initializes LocationInfo with home directory and class loader.
* @param home file representing the home directory
* @param classloader class loader for resource loading
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,<init>,"com.google.common.reflect.ClassPath$ResourceInfo:<init>(java.io.File,java.lang.String,java.lang.ClassLoader)",217,221,"/**
* Constructs a ResourceInfo instance.
* @param file the resource file
* @param resourceName the name of the resource
* @param loader class loader for loading the resource
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,<init>,com.google.common.reflect.Invokable:<init>(java.lang.reflect.AccessibleObject),68,72,"/**
* Initializes an Invokable with a given accessible object.
* @param member the accessible object to be invoked
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver$TypeVariableKey:<init>(java.lang.reflect.TypeVariable),554,556,"/**
 * Constructs a TypeVariableKey.
 * @param var TypeVariable to be wrapped
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,<init>,com.google.common.reflect.TypeToken:<init>(java.lang.reflect.Type),164,166,"/**
 * Constructs a TypeToken with a specified type.
 * @param type the runtime type to be tokenized
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,usedInGenericType,com.google.common.reflect.Types$JavaVersion$2:usedInGenericType(java.lang.reflect.Type),642,642,"/**
 * Determines the generic type usage.
 * @param type input type to analyze
 * @return generic type information
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,getComponentType,com.google.common.reflect.Types:getComponentType(java.lang.reflect.Type),167,192,"/**
 * Retrieves the component type of a given Java Type.
 * @param type the input Java Type
 * @return the component type or null if not applicable
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,<init>,"com.google.common.util.concurrent.AbstractCatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,java.lang.Object)",70,75,"/**
 * Initializes a catching future with an input future, exception type, and fallback function.
 * @param inputFuture the original future to monitor for completion or failure
 * @param exceptionType the type of exception to catch
 * @param fallback the function to execute if the specified exception occurs
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,<init>,com.google.common.util.concurrent.AbstractFuture$Failure:<init>(java.lang.Throwable),163,165,"/**
 * Records a failure with an exception.
 * @param exception the Throwable that caused the failure
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,<init>,"com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:<init>(long,java.util.concurrent.TimeUnit)",742,745,"/**
 * Initializes a new schedule with a specified delay and time unit.
 * @param delay the amount of time to wait before execution
 * @param unit the time unit for the delay
 */","* @param delay the time from now to delay execution
       * @param unit the time unit of the delay parameter",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,<init>,"com.google.common.util.concurrent.AbstractTransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Object)",62,65,"/**
 * Initializes a future transformation.
 * @param inputFuture the original listenable future
 * @param function the transformation function to apply
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,releaseResources,com.google.common.util.concurrent.AggregateFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason),336,347,"/**
* Releases resources based on the given reason.
* @param reason the reason for releasing resources
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,<init>,com.google.common.util.concurrent.AtomicLongMap:<init>(java.util.concurrent.ConcurrentHashMap),64,66,"/**
 * Constructs an AtomicLongMap using a ConcurrentHashMap.
 * @param map the underlying ConcurrentHashMap to use
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,updateAndGet,"com.google.common.util.concurrent.AtomicLongMap:updateAndGet(java.lang.Object,java.util.function.LongUnaryOperator)",145,153,"/**
* Updates value for a key using a function and returns the new value.
* @param key identifier for the value to update
* @param updaterFunction function to compute the new value
* @return updated value
*/","* Updates the value currently associated with {@code key} with the specified function, and
   * returns the new value. If there is not currently a value associated with {@code key}, the
   * function is applied to {@code 0L}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndUpdate,"com.google.common.util.concurrent.AtomicLongMap:getAndUpdate(java.lang.Object,java.util.function.LongUnaryOperator)",162,174,"/**
 * Updates the value for a key using a function and returns the old value.
 * @param key the key to update
 * @param updaterFunction the function to compute new value from old value
 * @return the old value before update
 */","* Updates the value currently associated with {@code key} with the specified function, and
   * returns the old value. If there is not currently a value associated with {@code key}, the
   * function is applied to {@code 0L}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Callables.java,asAsyncCallable,"com.google.common.util.concurrent.Callables:asAsyncCallable(java.util.concurrent.Callable,com.google.common.util.concurrent.ListeningExecutorService)",49,56,"/**
* Wraps a Callable in an AsyncCallable using a ListeningExecutorService.
* @param callable the task to execute asynchronously
* @param listeningExecutorService the executor service to use
* @return an AsyncCallable that submits the task to the executor
*/","* Creates an {@link AsyncCallable} from a {@link Callable}.
   *
   * <p>The {@link AsyncCallable} returns the {@link ListenableFuture} resulting from {@link
   * ListeningExecutorService#submit(Callable)}.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Callables.java,threadRenaming,"com.google.common.util.concurrent.Callables:threadRenaming(java.util.concurrent.Callable,com.google.common.base.Supplier)",66,84,"/**
* Wraps a Callable to rename the thread during execution.
* @param callable the task to be executed
* @param nameSupplier provides the new thread name
* @return a Callable that renames the thread and restores the original name afterward
*/","* Wraps the given callable such that for the duration of {@link Callable#call} the thread that is
   * running will have the given name.
   *
   * @param callable The callable to wrap
   * @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once
   *     for each invocation of the wrapped callable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Callables.java,threadRenaming,"com.google.common.util.concurrent.Callables:threadRenaming(java.lang.Runnable,com.google.common.base.Supplier)",94,111,"/**
* Wraps a Runnable to rename the current thread temporarily.
* @param task the original Runnable task
* @param nameSupplier supplies the new thread name
* @return a Runnable that renames the thread before execution and restores it afterward
*/","* Wraps the given runnable such that for the duration of {@link Runnable#run} the thread that is
   * running with have the given name.
   *
   * @param task The Runnable to wrap
   * @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once
   *     for each invocation of the wrapped callable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,add,"com.google.common.util.concurrent.ClosingFuture$CloseableList:add(java.lang.AutoCloseable,java.util.concurrent.Executor)",2230,2242,"/**
 * Adds a closable resource to be closed by an executor.
 * @param closeable the resource to close, may be null
 * @param executor the executor to use for closing
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,com.google.common.util.concurrent.ClosingFuture$Peeker:<init>(com.google.common.collect.ImmutableList),1136,1138,"/**
 * Constructs a Peeker with a list of ClosingFuture objects.
 * @param futures list of ClosingFuture objects to be managed
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:<init>(com.google.common.util.concurrent.ClosingFuture),332,334,"/**
* Initializes with a closing future.
* @param closingFuture future to be closed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,withoutCloser,com.google.common.util.concurrent.ClosingFuture:withoutCloser(com.google.common.util.concurrent.AsyncFunction),826,830,"/**
* Wraps an AsyncFunction to ignore closer.
* @param function the original async function
* @return an AsyncClosingFunction that ignores the closer
*/","* Returns an {@link AsyncClosingFunction} that applies an {@link AsyncFunction} to an input,
   * ignoring the DeferredCloser and returning a {@code ClosingFuture} derived from the returned
   * {@link ListenableFuture}.
   *
   * <p>Use this method to pass a transformation to {@link #transformAsync(AsyncClosingFunction,
   * Executor)} or to {@link #catchingAsync(Class, AsyncClosingFunction, Executor)} as long as it
   * meets these conditions:
   *
   * <ul>
   *   <li>It does not need to capture any {@link Closeable} objects by calling {@link
   *       DeferredCloser#eventuallyClose(Object, Executor)}.
   *   <li>It returns a {@link ListenableFuture}.
   * </ul>
   *
   * <p>Example usage:
   *
   * {@snippet :
   * // Result.getRowsFuture() returns a ListenableFuture.
   * ClosingFuture<List<Row>> rowsFuture =
   *     queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor);
   * }
   *
   * @param function transforms the value of a {@code ClosingFuture} step to a {@link
   *     ListenableFuture} with the value of a derived step",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,com.google.common.util.concurrent.CycleDetectingLockFactory:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy),452,454,"/**
 * Initializes a new CycleDetectingLockFactory with a given policy.
 * @param policy configuration policy for lock detection
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,newProxy,"com.google.common.util.concurrent.FakeTimeLimiter:newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit)",44,52,"/**
* Creates a new proxy for the given target.
* @param <T> type of the target and interface
* @param target object to be proxied
* @param interfaceType interface that the proxy should implement
* @param timeoutDuration duration of the timeout
* @param timeoutUnit unit of the timeout duration
* @return the original target (mock implementation)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,from,com.google.common.util.concurrent.FluentFuture:from(com.google.common.util.concurrent.FluentFuture),145,151,"/**
* Wraps a FluentFuture, ensuring it's not null.
* @param future the FluentFuture to be wrapped
* @return the same FluentFuture object
* @deprecated Use checkNotNull directly instead
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,lazyTransform,"com.google.common.util.concurrent.Futures:lazyTransform(java.util.concurrent.Future,com.google.common.base.Function)",512,555,"/**
* Transforms the result of a Future using a given function.
* @param input Future to transform
* @param function Function to apply to the Future's result
* @return A new Future with transformed result
*/","* Like {@link #transform(ListenableFuture, Function, Executor)} except that the transformation
   * {@code function} is invoked on each call to {@link Future#get() get()} on the returned future.
   *
   * <p>The returned {@code Future} reflects the input's cancellation state directly, and any
   * attempt to cancel the returned Future is likewise passed through to the input Future.
   *
   * <p>Note that calls to {@linkplain Future#get(long, TimeUnit) timed get} only apply the timeout
   * to the execution of the underlying {@code Future}, <em>not</em> to the execution of the
   * transformation function.
   *
   * <p>The primary audience of this method is callers of {@code transform} who don't have a {@code
   * ListenableFuture} available and do not mind repeated, lazy function evaluation.
   *
   * @param input The future to transform
   * @param function A Function to transform the results of the provided future to the results of
   *     the returned future.
   * @return A future that returns the result of the transformation.
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,renamingDecorator,"com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.Executor,com.google.common.base.Supplier)",867,873,"/**
* Decorates an executor to rename threads.
* @param executor original executor
* @param nameSupplier provides new thread names
* @return Executor with renamed threads
*/","* Creates an {@link Executor} that renames the {@link Thread threads} that its tasks run in.
   *
   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
   * prevents the renaming then it will be skipped but the tasks will still execute.
   *
   * @param executor The executor to decorate
   * @param nameSupplier The source of names for each task",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,renamingDecorator,"com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.ExecutorService,com.google.common.base.Supplier)",886,902,"/**
 * Wraps an executor service to rename threads.
 * @param service the original ExecutorService
 * @param nameSupplier supplies new thread names
 * @return a decorated ExecutorService with renamed threads
 */","* Creates an {@link ExecutorService} that renames the {@link Thread threads} that its tasks run
   * in.
   *
   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
   * prevents the renaming then it will be skipped but the tasks will still execute.
   *
   * @param service The executor to decorate
   * @param nameSupplier The source of names for each task",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,renamingDecorator,"com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier)",915,932,"/**
 * Decorates a ScheduledExecutorService to rename threads.
 * @param service the original executor service
 * @param nameSupplier supplies new thread names
 * @return decorated ScheduledExecutorService
 */","* Creates a {@link ScheduledExecutorService} that renames the {@link Thread threads} that its
   * tasks run in.
   *
   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
   * prevents the renaming then it will be skipped but the tasks will still execute.
   *
   * @param service The executor to decorate
   * @param nameSupplier The source of names for each task",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Platform.java,restoreInterruptIfIsInterruptedException,com.google.common.util.concurrent.Platform:restoreInterruptIfIsInterruptedException(java.lang.Throwable),34,39,"/**
 * Restores interrupt status if the given Throwable is an InterruptedException.
 * @param t the Throwable to check
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,<init>,com.google.common.util.concurrent.RateLimiter:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch),234,236,"/**
 * Initializes rate limiter with a stopwatch.
 * @param stopwatch used to track elapsed time
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SequentialExecutor.java,<init>,com.google.common.util.concurrent.SequentialExecutor:<init>(java.util.concurrent.Executor),90,92,"/**
* Initializes a new SequentialExecutor with a provided Executor.
* @param executor the Executor to be used for task execution; must not be null
*/",Use {@link MoreExecutors#newSequentialExecutor},,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SequentialExecutor.java,execute,com.google.common.util.concurrent.SequentialExecutor:execute(java.lang.Runnable),100,174,"/**
 * Executes a task, ensuring it runs in the correct order.
 * @param task runnable to be executed
 */","* Adds a task to the queue and makes sure a worker thread is running.
   *
   * <p>If this method throws, e.g. a {@code RejectedExecutionException} from the delegate executor,
   * execution of tasks will stop until a call to this method is made.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,<init>,com.google.common.util.concurrent.SimpleTimeLimiter:<init>(java.util.concurrent.ExecutorService),56,58,"/**
 * Initializes a new SimpleTimeLimiter with an ExecutorService.
 * @param executor the ExecutorService to use for limiting time
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,setUncaughtExceptionHandler,com.google.common.util.concurrent.ThreadFactoryBuilder:setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler),129,134,"/**
* Sets the handler for uncaught exceptions.
* @param uncaughtExceptionHandler exception handler to use
* @return this ThreadFactoryBuilder instance
*/","* Sets the {@link UncaughtExceptionHandler} for new threads created with this ThreadFactory.
   *
   * @param uncaughtExceptionHandler the uncaught exception handler for new Threads created with
   *     this ThreadFactory
   * @return this for the builder pattern",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,setThreadFactory,com.google.common.util.concurrent.ThreadFactoryBuilder:setThreadFactory(java.util.concurrent.ThreadFactory),145,149,"/**
* Sets the backing thread factory.
* @param backingThreadFactory the thread factory to use
* @return this builder instance
*/","* Sets the backing {@link ThreadFactory} for new threads created with this ThreadFactory. Threads
   * will be created by invoking #newThread(Runnable) on this backing {@link ThreadFactory}.
   *
   * @param backingThreadFactory the backing {@link ThreadFactory} which will be delegated to during
   *     thread creation.
   * @return this for the builder pattern
   * @see MoreExecutors",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeoutFuture.java,<init>,com.google.common.util.concurrent.TimeoutFuture:<init>(com.google.common.util.concurrent.ListenableFuture),82,84,"/**
 * Initializes a new TimeoutFuture with a given delegate.
 * @param delegate the ListenableFuture to wrap and monitor
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,joinUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread,long,java.util.concurrent.TimeUnit)",195,219,"/**
* Joins a thread with a timeout, ignoring interruptions.
* @param toJoin the thread to join
* @param timeout maximum time to wait
* @param unit time unit for the timeout
*/","* Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)}
   * uninterruptibly.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,<init>,com.google.common.util.concurrent.WrappingExecutorService:<init>(java.util.concurrent.ExecutorService),51,53,"/**
 * Initializes a new WrappingExecutorService with a delegate.
 * @param delegate the ExecutorService to wrap
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,submit,com.google.common.util.concurrent.WrappingExecutorService:submit(java.util.concurrent.Callable),98,101,"/**
* Submits a callable task to be executed.
* @param task the callable task to execute
* @return a Future representing pending completion of the task
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,<init>,"com.google.common.base.Splitter$SplittingIterator:<init>(com.google.common.base.Splitter,java.lang.CharSequence)",541,546,"/**
 * Initializes a new SplittingIterator with the given Splitter and CharSequence.
 * @param splitter configuration for splitting behavior
 * @param toSplit the CharSequence to split
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,ticker,com.google.common.cache.CacheBuilder:ticker(com.google.common.base.Ticker),942,947,"/**
* Sets the ticker for cache expiration.
* @param ticker Ticker instance to use for timekeeping
* @return This CacheBuilder instance
*/","* Specifies a nanosecond-precision time source for this cache. By default, {@link
   * System#nanoTime} is used.
   *
   * <p>The primary intent of this method is to facilitate testing of caches with a fake or mock
   * time source.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if a ticker was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,removalListener,com.google.common.cache.CacheBuilder:removalListener(com.google.common.cache.RemovalListener),976,985,"/**
* Sets a removal listener for cache entries.
* @param listener the listener to be notified of entry removals
* @return CacheBuilder instance with the removal listener set
*/","* Specifies a listener instance that caches should notify each time an entry is removed for any
   * {@linkplain RemovalCause reason}. Each cache created by this builder will invoke this listener
   * as part of the routine maintenance described in the class documentation above.
   *
   * <p><b>Warning:</b> after invoking this method, do not continue to use <i>this</i> cache builder
   * reference; instead use the reference this method <i>returns</i>. At runtime, these point to the
   * same instance, but only the returned reference has the correct generic type information to
   * ensure type safety. For best results, use the standard method-chaining idiom illustrated in the
   * class documentation above, configuring a builder and building your cache in a single statement.
   * Failure to heed this advice can result in a {@link ClassCastException} being thrown by a cache
   * operation at some <i>undefined</i> point in the future.
   *
   * <p><b>Warning:</b> any exception thrown by {@code listener} will <i>not</i> be propagated to
   * the {@code Cache} user, only logged via a {@link Logger}.
   *
   * @return the cache builder reference that should be used instead of {@code this} for any
   *     remaining configuration and cache building
   * @throws IllegalStateException if a removal listener was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,setValue,com.google.common.collect.LinkedListMultimap$NodeIterator:setValue(java.lang.Object),407,410,"/**
 * Sets the value of the current element.
 * @param value the new value to set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,set,com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:set(java.lang.Object),559,563,"/**
* Sets the value of the current element.
* @param value the new value to be set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,addOutEdge,"com.google.common.graph.AbstractDirectedNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",135,142,"/**
* Adds an outgoing edge to the node.
* @param edge the edge to be added
* @param node the target node for the edge
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,addOutEdge,"com.google.common.graph.AbstractUndirectedNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",96,100,"/**
 * Adds an outgoing edge to a node.
 * @param edge the edge to be added
 * @param node the target node of the edge
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,<init>,"com.google.common.graph.ElementOrder:<init>(com.google.common.graph.ElementOrder$Type,java.util.Comparator)",73,77,"/**
* Constructs an ElementOrder with a specified type and comparator.
* @param type the order type (SORTED or UNORDERED)
* @param comparator the comparator for sorted types, can be null for unordered types
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hash,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:hash(),399,405,"/**
* Computes and returns the hash code.
* Marks computation as done to prevent rehashing.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,mean,com.google.common.math.Stats:mean(),254,257,"/**
 * Returns the calculated mean value.
 * @return mean value as a double
 */","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the
   * result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}.
   * If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link
   * Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * <p>If you only want to calculate the mean, use {@link #meanOf} instead of creating a {@link
   * Stats} instance.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,min,com.google.common.math.Stats:min(),380,383,"/**
 * Returns the minimum value.
 * @throws IllegalStateException if no values have been added
 */","* Returns the lowest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only then the result is the lowest finite value. If it contains {@link
   * Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,max,com.google.common.math.Stats:max(),398,401,"/**
 * Returns the maximum value in the dataset.
 * @return the maximum value
 */","* Returns the highest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values
   * only then the result is the highest finite value. If it contains {@link
   * Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,mean,com.google.common.math.StatsAccumulator:mean(),247,250,"/**
 * Returns the calculated mean value.
 * Throws an IllegalStateException if no data points have been added.
 * @return mean of the data points
 */","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the
   * result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}.
   * If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link
   * Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,min,com.google.common.math.StatsAccumulator:min(),373,376,"/**
 * Returns the minimum value.
 * Throws IllegalStateException if no values have been added.
 * @return minimum value
 */","* Returns the lowest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only then the result is the lowest finite value. If it contains {@link
   * Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,max,com.google.common.math.StatsAccumulator:max(),391,394,"/**
 * Returns the maximum value in the dataset.
 * @return maximum value or throws an exception if count is zero
 */","* Returns the highest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values
   * only then the result is the highest finite value. If it contains {@link
   * Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,whenClosedCountDown,com.google.common.util.concurrent.ClosingFuture$CloseableList:whenClosedCountDown(),2247,2258,"/**
* Returns a CountDownLatch that counts down when the resource is closed.
* If already closed, returns an already counted-down latch.
* @return CountDownLatch to await closure
*/",* Returns a latch that reaches zero when this objects' deferred closeables have been closed.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,execute,com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:execute(java.lang.Runnable),320,374,"/**
* Executes a task based on current state and delegate executor.
* @param task Runnable task to execute
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,run,com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:run(),189,230,"/**
 * Executes queued listener events until none remain or an error occurs.
 * Logs exceptions during event execution and ensures thread state is updated accordingly.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/AbstractIterator.java,hasNext,com.google.common.base.AbstractIterator:hasNext(),53,64,"/**
* Checks if there are more elements to iterate over.
* @return true if next element is available, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,unsafeDoForward,com.google.common.base.Converter:unsafeDoForward(java.lang.Object),244,246,"/**
* Safely forwards input to doForward after casting.
* @param a nullable input of type A
* @return result of doForward or null if cast fails
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,unsafeDoBackward,com.google.common.base.Converter:unsafeDoBackward(java.lang.Object),248,250,"/**
* Performs backward operation on nullable input.
* @param b nullable input object of type B
* @return result of backward operation or null if input is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,apply,com.google.common.base.Functions$ForMapWithDefault:apply(java.lang.Object),203,211,"/**
* Applies a function to retrieve a value by key from a map.
* @param key the key to look up in the map
* @return the value associated with the key, or default value if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,get,com.google.common.base.Suppliers$ExpiringMemoizingSupplier:get(),300,328,"/**
 * Retrieves the cached value, refreshing if expired.
 * @return cached value or newly fetched value if expired
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,get,com.google.common.base.Suppliers$MemoizingSupplier:get(),137,155,"/**
 * Retrieves and initializes the value if not already done.
 * @return The initialized value of type T
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,get,com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:get(),192,209,"/**
 * Retrieves the computed value, ensuring thread-safe lazy initialization.
 * @return The computed value of type T
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toLowerCase,com.google.common.base.Ascii:toLowerCase(java.lang.String),407,422,"/**
 * Converts a string to lowercase.
 * @param string the input string
 * @return the lowercase version of the input string
 */","* Returns a copy of the input string in which all {@linkplain #isUpperCase(char) uppercase ASCII
   * characters} have been converted to lowercase. All other characters are copied without
   * modification.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toLowerCase,com.google.common.base.Ascii:toLowerCase(char),446,448,"/**
 * Converts uppercase character to lowercase.
 * @param c input character
 * @return lowercase version of c, or c if already lowercase
 */","* If the argument is an {@linkplain #isUpperCase(char) uppercase ASCII character}, returns the
   * lowercase equivalent. Otherwise returns the argument.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,hasUpperCase,com.google.common.io.BaseEncoding$Alphabet:hasUpperCase(),555,562,"/**
 * Checks if any character in the array is uppercase.
 * @return true if at least one character is uppercase, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toUpperCase,com.google.common.base.Ascii:toUpperCase(java.lang.String),455,470,"/**
* Converts the first character of a string to uppercase.
* @param string input string
* @return modified string with first character uppercased
*/","* Returns a copy of the input string in which all {@linkplain #isLowerCase(char) lowercase ASCII
   * characters} have been converted to uppercase. All other characters are copied without
   * modification.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toUpperCase,com.google.common.base.Ascii:toUpperCase(char),494,496,"/**
* Converts character to uppercase.
* @param c character to convert
* @return uppercase version of character or original if already uppercase
*/","* If the argument is a {@linkplain #isLowerCase(char) lowercase ASCII character}, returns the
   * uppercase equivalent. Otherwise returns the argument.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,hasLowerCase,com.google.common.io.BaseEncoding$Alphabet:hasLowerCase(),546,553,"/**
* Checks if any character in the array is lowercase.
* @return true if at least one character is lowercase, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,truncate,"com.google.common.base.Ascii:truncate(java.lang.CharSequence,int,java.lang.String)",550,577,"/**
 * Truncates a sequence to a specified maximum length with an indicator.
 * @param seq the input character sequence
 * @param maxLength the maximum allowed length of the truncated string
 * @param truncationIndicator the string appended at the end of truncated text
 * @return truncated string with indicator or original if within max length
 */","* Truncates the given character sequence to the given maximum length. If the length of the
   * sequence is greater than {@code maxLength}, the returned string will be exactly {@code
   * maxLength} chars in length and will end with the given {@code truncationIndicator}. Otherwise,
   * the sequence will be returned as a string with no changes to the content.
   *
   * <p>Examples:
   *
   * {@snippet :
   * Ascii.truncate(""foobar"", 7, ""...""); // returns ""foobar""
   * Ascii.truncate(""foobar"", 5, ""...""); // returns ""fo...""
   * }
   *
   * <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use
   * with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe
   * for use with it (such as all-ASCII text) and for simple debugging text. When using this method,
   * consider the following:
   *
   * <ul>
   *   <li>it may split surrogate pairs
   *   <li>it may split characters and combining characters
   *   <li>it does not consider word boundaries
   *   <li>if truncating for display to users, there are other considerations that must be taken
   *       into account
   *   <li>the appropriate truncation indicator may be locale-dependent
   *   <li>it is safe to use non-ASCII characters in the truncation indicator
   * </ul>
   *
   * @throws IllegalArgumentException if {@code maxLength} is less than the length of {@code
   *     truncationIndicator}
   * @since 16.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,writeTo,com.google.common.math.Stats:writeTo(java.nio.ByteBuffer),605,618,"/**
 * Writes statistics to a ByteBuffer.
 * @param buffer destination for writing data
 */","* Writes to the given {@link ByteBuffer} a byte representation of this instance.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.
   *
   * @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as
   *     {@link ByteOrder#LITTLE_ENDIAN}, to which a BYTES-long byte representation of this instance
   *     is written. In the process increases the position of {@link ByteBuffer} by BYTES.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,constrainToRange,"com.google.common.primitives.Ints:constrainToRange(int,int,int)",284,288,"/**
* Constrains a value within a specified range.
* @param value the number to constrain
* @param min the minimum allowable value
* @param max the maximum allowable value
* @return the constrained value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,constrainToRange,"com.google.common.primitives.Shorts:constrainToRange(short,short,short)",274,277,"/**
 * Constrains a value within a specified range.
 * @param value the value to constrain
 * @param min the minimum allowable value
 * @param max the maximum allowable value
 * @return the constrained value
 */","* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.
   *
   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned
   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code
   * value} is greater than {@code max}, {@code max} is returned.
   *
   * @param value the {@code short} value to constrain
   * @param min the lower bound (inclusive) of the range to constrain {@code value} to
   * @param max the upper bound (inclusive) of the range to constrain {@code value} to
   * @throws IllegalArgumentException if {@code min > max}
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,setPriority,com.google.common.util.concurrent.ThreadFactoryBuilder:setPriority(int),104,120,"/**
* Sets thread priority.
* @param priority thread priority level
* @return this builder instance
*/","* Sets the priority for new threads created with this ThreadFactory.
   *
   * <p><b>Warning:</b> relying on the thread scheduler is <a
   * href=""http://errorprone.info/bugpattern/ThreadPriorityCheck"">discouraged</a>.
   *
   * @param priority the priority for new Threads created with this ThreadFactory
   * @return this for the builder pattern",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,equalsIgnoreCase,"com.google.common.base.Ascii:equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)",601,625,"/**
* Compares two CharSequences for equality, ignoring case.
* @param s1 first CharSequence to compare
* @param s2 second CharSequence to compare
* @return true if sequences are equal ignoring case, false otherwise
*/","* Indicates whether the contents of the given character sequences {@code s1} and {@code s2} are
   * equal, ignoring the case of any ASCII alphabetic characters between {@code 'a'} and {@code 'z'}
   * or {@code 'A'} and {@code 'Z'} inclusive.
   *
   * <p>This method is significantly faster than {@link String#equalsIgnoreCase} and should be used
   * in preference if at least one of the parameters is known to contain only ASCII characters.
   *
   * <p>Note however that this method does not always behave identically to expressions such as:
   *
   * <ul>
   *   <li>{@code string.toUpperCase().equals(""UPPER CASE ASCII"")}
   *   <li>{@code string.toLowerCase().equals(""lower case ascii"")}
   * </ul>
   *
   * <p>due to case-folding of some non-ASCII characters (which does not occur in {@link
   * String#equalsIgnoreCase}). However in almost all cases that ASCII strings are used, the author
   * probably wanted the behavior provided by this method rather than the subtle and sometimes
   * surprising behavior of {@code toUpperCase()} and {@code toLowerCase()}.
   *
   * @since 16.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$And:<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)",1571,1574,"/**
 * Combines two character matchers using logical AND.
 * @param a first character matcher
 * @param b second character matcher
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$AnyOf:<init>(java.lang.CharSequence),1755,1758,"/**
 * Initializes with sorted characters from input sequence.
 * @param chars character sequence to process
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$ForPredicate:<init>(com.google.common.base.Predicate),1822,1824,"/**
 * Constructs a ForPredicate with the given character predicate.
 * @param predicate the character predicate to be used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Negated:<init>(com.google.common.base.CharMatcher),1521,1523,"/**
 * Creates a negated version of the given CharMatcher.
 * @param original the original CharMatcher to negate
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$Or:<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)",1604,1607,"/**
 * Combines two character matchers with logical OR.
 * @param a first character matcher
 * @param b second character matcher
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,setBits,com.google.common.base.CharMatcher$And:setBits(java.util.BitSet),1581,1590,"/**
* Updates bitset with common bits from two components.
* @param table target bitset to update
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,setBits,com.google.common.base.CharMatcher$Negated:setBits(java.util.BitSet),1545,1552,"/**
* Inverts the bits in the given BitSet.
* @param table BitSet to modify
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,setBits,com.google.common.base.CharMatcher$Or:setBits(java.util.BitSet),1609,1614,"/**
* Sets bits in both first and second BitSet objects.
* @param table BitSet containing the bits to be set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$InRange:<init>(char,char)",1790,1794,"/**
* Initializes a range with inclusive start and end characters.
* @param startInclusive the starting character of the range
* @param endInclusive the ending character of the range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$RangesMatcher:<init>(java.lang.String,char[],char[])",1324,1335,"/**
* Initializes a RangesMatcher with specified ranges.
* @param description textual description of the matcher
* @param rangeStarts array of start characters for each range
* @param rangeEnds array of end characters for each range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,<init>,"com.google.common.cache.CacheStats:<init>(long,long,long,long,long,long)",78,99,"/**
* Constructs a CacheStats object with specified metrics.
* @param hitCount number of successful cache hits
* @param missCount number of cache misses
* @param loadSuccessCount number of successful loads
* @param loadExceptionCount number of load exceptions
* @param totalLoadTime total time spent on loading operations in nanoseconds
* @param evictionCount number of evictions
*/","* Constructs a new {@code CacheStats} instance.
   *
   * <p>Five parameters of the same type in a row is a bad thing, but this class is not constructed
   * by end users and is too fine-grained for a builder.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,<init>,com.google.common.collect.AbstractMapBasedMultimap:<init>(java.util.Map),123,126,"/**
 * Constructs a new instance with an empty map.
 * @param map backing map that must be empty
 */","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,setMap,com.google.common.collect.AbstractMapBasedMultimap:setMap(java.util.Map),129,136,"/**
* Sets the internal map and calculates total size.
* @param map new map with collections of values
*/",Used during deserialization only.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,<init>,com.google.common.collect.AbstractMapBasedMultiset:<init>(java.util.Map),64,67,"/**
* Constructs a new multiset backed by the specified map.
* @param backingMap the map to back this multiset with; must be empty
*/",Standard constructor.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,indexed,"com.google.common.collect.CollectSpliterators:indexed(int,int,java.util.function.IntFunction,java.util.Comparator)",48,102,"/**
* Creates a spliterator with indexed elements.
* @param size number of elements
* @param extraCharacteristics additional characteristics
* @param function maps index to element
* @param comparator optional comparator for sorted elements
* @return Spliterator over generated elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,add,com.google.common.collect.Collections2$FilteredCollection:add(java.lang.Object),135,139,"/**
* Adds an element if it satisfies a predicate.
* @param element the element to add
* @return true if added, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,addAll,com.google.common.collect.Collections2$FilteredCollection:addAll(java.util.Collection),141,147,"/**
* Adds all elements from the given collection if they satisfy the predicate.
* @param collection elements to be added
* @return true if any elements were added, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Comparable,java.lang.Comparable)",166,172,"/**
* Returns a subset of elements from fromElement (inclusive) to toElement (exclusive).
* @param fromElement lower bound of the subset
* @param toElement upper bound of the subset
* @return ContiguousSet containing elements in the specified range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Comparable,boolean,java.lang.Comparable,boolean)",177,185,"/**
* Returns a subset of elements within the specified range.
* @param fromElement lower bound of the range
* @param fromInclusive true if fromElement is inclusive
* @param toElement upper bound of the range
* @param toInclusive true if toElement is inclusive
* @return ContiguousSet containing elements in the specified range
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,inferKeyTypeOrObjectUnderJ2cl,com.google.common.collect.EnumBiMap:inferKeyTypeOrObjectUnderJ2cl(java.util.Map),97,106,"/**
* Infers the key type from a map.
* @param map input map with enum keys
* @return Class of the enum key or object under J2CL
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,inferValueTypeOrObjectUnderJ2cl,com.google.common.collect.EnumBiMap:inferValueTypeOrObjectUnderJ2cl(java.util.Map),108,114,"/**
 * Infers the value type from a map, considering EnumBiMap.
 * @param map input map with enum values
 * @return Class of enum or object type
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,<init>,com.google.common.collect.EnumMultiset:<init>(java.lang.Class),93,98,"/**
* Initializes a new EnumMultiset for the given enum type.
* @param type the enum class to use
*/",Creates an empty {@code EnumMultiset}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,<init>,com.google.common.collect.ImmutableEnumMap:<init>(java.util.EnumMap),56,59,"/**
* Wraps an EnumMap ensuring it's not empty.
* @param delegate the EnumMap to wrap
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,subSet,"com.google.common.collect.ImmutableSortedSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",674,682,"/**
* Returns a subset of elements within the specified range.
* @param fromElement lower bound of the range (inclusive)
* @param fromInclusive true if the lower bound is inclusive
* @param toElement upper bound of the range (exclusive)
* @param toInclusive true if the upper bound is inclusive
* @return ImmutableSortedSet containing elements within the specified range
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,partition,"com.google.common.collect.Iterables:partition(java.lang.Iterable,int)",527,537,"/**
 * Partitions an iterable into fixed-size lists.
 * @param iterable the source iterable to partition
 * @param size the size of each partition
 * @return an Iterable of Lists, where each list is a partition of the original iterable
 */","* Divides an iterable into unmodifiable sublists of the given size (the final iterable may be
   * smaller). For example, partitioning an iterable containing {@code [a, b, c, d, e]} with a
   * partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterable containing two
   * inner lists of three and two elements, all in the original order.
   *
   * <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()}
   * method. The returned lists implement {@link RandomAccess}, whether or not the input list does.
   *
   * <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements.
   * As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link
   * OutOfMemoryError}.
   *
   * <p><b>Note:</b> if {@code iterable} is a {@link List}, use {@link Lists#partition(List, int)}
   * instead.
   *
   * @param iterable the iterable to return a partitioned view of
   * @param size the desired size of each partition (the last may be smaller)
   * @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided
   *     into partitions
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,paddedPartition,"com.google.common.collect.Iterables:paddedPartition(java.lang.Iterable,int)",554,564,"/**
 * Partitions an iterable into padded lists of a specified size.
 * @param iterable the source iterable to partition
 * @param size the desired size of each partition
 * @return Iterable of lists, with the last list padded if necessary
 */","* Divides an iterable into unmodifiable sublists of the given size, padding the final iterable
   * with null values if necessary. For example, partitioning an iterable containing {@code [a, b,
   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer
   * iterable containing two inner lists of three elements each, all in the original order.
   *
   * <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()}
   * method.
   *
   * @param iterable the iterable to return a partitioned view of
   * @param size the desired size of each partition
   * @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided
   *     into partitions (the final iterable may have trailing null elements)
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,partitionImpl,"com.google.common.collect.Iterators:partitionImpl(java.util.Iterator,int,boolean)",626,660,"/**
* Partitions an iterator into fixed-size lists.
* @param iterator source iterator of elements
* @param size partition size
* @param pad whether to pad the last partition with nulls if needed
* @return unmodifiable iterator over partitions
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,expectedSize,com.google.common.collect.MinMaxPriorityQueue$Builder:expectedSize(int),186,191,"/**
* Sets the expected size of the collection.
* @param expectedSize the anticipated number of elements
* @return this Builder instance for method chaining
*/","* Configures this builder to build min-max priority queues with an initial expected size of
     * {@code expectedSize}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,maximumSize,com.google.common.collect.MinMaxPriorityQueue$Builder:maximumSize(int),199,204,"/**
* Sets the maximum size.
* @param maximumSize the maximum size to set
* @return the builder instance
*/","* Configures this builder to build {@code MinMaxPriorityQueue} instances that are limited to
     * {@code maximumSize} elements. Each time a queue grows beyond this bound, it immediately
     * removes its greatest element (according to its comparator), which might be the element that
     * was just added.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,<init>,"com.google.common.collect.TreeMultiset$AvlNode:<init>(java.lang.Object,int)",617,626,"/**
 * Constructs an AVL tree node.
 * @param elem the element to store in the node
 * @param elemCount count of the element
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,newHasher,com.google.common.hash.AbstractNonStreamingHashFunction:newHasher(int),39,43,"/**
* Creates a new hasher with an expected input size.
* @param expectedInputSize the estimated size of the input data
* @return a Hasher instance for hashing operations
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,<init>,"com.google.common.hash.AbstractStreamingHasher:<init>(int,int)",61,70,"/**
* Initializes the AbstractStreamingHasher.
* @param chunkSize size of each data chunk
* @param bufferSize total buffer size, must be multiple of chunkSize
*/","* Constructor for use by subclasses. This hasher instance will process chunks of the specified
   * size, using an internal buffer of {@code bufferSize} size, which must be a multiple of {@code
   * chunkSize}.
   *
   * @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation;
   *     must be at least 4
   * @param bufferSize the size of the internal buffer. Must be a multiple of chunkSize",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,separatingAppendable,"com.google.common.io.BaseEncoding:separatingAppendable(java.lang.Appendable,java.lang.String,int)",1082,1111,"/**
 * Wraps an Appendable to insert a separator after every specified number of characters.
 * @param delegate the underlying Appendable
 * @param separator the string to insert
 * @param afterEveryChars number of characters before inserting the separator
 * @return new Appendable with separator functionality
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleUtils.java,ensureNonNegative,com.google.common.math.DoubleUtils:ensureNonNegative(double),133,136,"/**
* Ensures a value is non-negative.
* @param value the number to check
* @return the original value or 0 if negative
*/","Returns its argument if it is non-negative, zero if it is negative.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,toFile,com.google.common.reflect.ClassPath:toFile(java.net.URL),671,679,"/**
 * Converts a file URL to a File object.
 * @param url the URL to convert, must use ""file"" protocol
 * @return File object representing the URL
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,is,com.google.common.base.CharMatcher:is(char),297,299,"/**
 * Creates a CharMatcher that matches a specific character.
 * @param match the character to match
 * @return a CharMatcher instance
 */",Returns a {@code char} matcher that matches only one specified BMP character.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,isEither,"com.google.common.base.CharMatcher:isEither(char,char)",1717,1719,"/**
 * Creates a character matcher that matches either of two characters.
 * @param c1 first character to match
 * @param c2 second character to match
 * @return CharMatcher instance matching c1 or c2
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,isNot,com.google.common.base.CharMatcher:isNot(char),306,308,"/**
 * Creates a CharMatcher that matches any character except the specified one.
 * @param match character to exclude from matching
 * @return CharMatcher instance excluding the specified character
 */","* Returns a {@code char} matcher that matches any character except the BMP character specified.
   *
   * <p>To negate another {@code CharMatcher}, use {@link #negate()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesNoneOf,com.google.common.base.CharMatcher$Negated:matchesNoneOf(java.lang.CharSequence),1535,1538,"/**
 * Checks if input matches none of criteria.
 * @param sequence input to check
 * @return true if input matches none, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,countIn,com.google.common.base.CharMatcher$Negated:countIn(java.lang.CharSequence),1540,1543,"/**
 * Counts occurrences in sequence excluding those in original.
 * @param sequence input character sequence
 * @return difference between total and original counts
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,collapseFrom,"com.google.common.base.CharMatcher:collapseFrom(java.lang.CharSequence,char)",840,857,"/**
 * Collapses matching characters in a CharSequence with a replacement character.
 * @param sequence the input CharSequence to process
 * @param replacement the character used for replacements
 * @return String with collapsed matches or original if no replacements are made
 */","* Returns a string copy of the input character sequence, with each group of consecutive matching
   * BMP characters replaced by a single replacement character. For example:
   *
   * {@snippet :
   * CharMatcher.anyOf(""eko"").collapseFrom(""bookkeeper"", '-')
   * }
   *
   * ... returns {@code ""b-p-r""}.
   *
   * <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching
   * character, then iterates the remainder of the sequence calling {@link #matches(char)} for each
   * character.
   *
   * @param sequence the character sequence to replace matching groups of characters in
   * @param replacement the character to append to the result string in place of each group of
   *     matching characters in {@code sequence}
   * @return the new string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CommonPattern.java,isPcreLike,com.google.common.base.CommonPattern:isPcreLike(),40,42,"/**
 * Checks if the pattern compiler is PCRE-like.
 * @return true if PCRE-like, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,equals,com.google.common.base.Converter$ConverterComposition:equals(java.lang.Object),422,429,"/**
* Checks equality with another ConverterComposition.
* @param object the object to compare
* @return true if both first and second converters are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,equals,com.google.common.base.Converter$ReverseConverter:equals(java.lang.Object),347,354,"/**
* Checks equality with another ReverseConverter.
* @param object the object to compare
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,com.google.common.base.Converter:<init>(),153,155,"/**
 * Initializes a new Converter with default settings.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,getEnumConstants,com.google.common.base.Enums:getEnumConstants(java.lang.Class),86,95,"/**
 * Retrieves cached enum constants.
 * @param enumClass the class of the enum type
 * @return map of enum names to weak references of enum constants
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FunctionalEquivalence.java,<init>,"com.google.common.base.FunctionalEquivalence:<init>(com.google.common.base.Function,com.google.common.base.Equivalence)",39,43,"/**
* Constructs a new instance with the given function and equivalence.
* @param function the function to apply
* @param resultEquivalence equivalence for comparing results
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/PairwiseEquivalence.java,<init>,com.google.common.base.PairwiseEquivalence:<init>(com.google.common.base.Equivalence),29,31,"/**
 * Sets the equivalence relation for elements.
 * @param elementEquivalence the equivalence relation to use
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,apply,com.google.common.base.Equivalence$EquivalentToPredicate:apply(java.lang.Object),323,326,"/**
 * Checks if the input is equivalent to the target.
 * @param input the value to compare
 * @return true if input is equivalent to target, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,equals,com.google.common.base.Equivalence$Wrapper:equals(java.lang.Object),244,263,"/**
* Checks equality based on wrapped reference and equivalence.
* @param obj object to compare
* @return true if objects are equivalent, false otherwise
*/","* Returns {@code true} if {@link Equivalence#equivalent(Object, Object)} applied to the wrapped
     * references is {@code true} and both wrappers use the {@link Object#equals(Object) same}
     * equivalence.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,test,"com.google.common.base.Equivalence:test(java.lang.Object,java.lang.Object)",83,88,"/**
* Tests equivalence of two nullable objects.
* @param t first object to compare
* @param u second object to compare
* @return true if objects are equivalent, false otherwise
*/","* @deprecated Provided only to satisfy the {@link BiPredicate} interface; use {@link #equivalent}
   *     instead.
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FunctionalEquivalence.java,doEquivalent,"com.google.common.base.FunctionalEquivalence:doEquivalent(java.lang.Object,java.lang.Object)",45,48,"/**
* Checks equivalence of two objects by applying a function and comparing results.
* @param a first object to compare
* @param b second object to compare
* @return true if processed results are equivalent, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/PairwiseEquivalence.java,doEquivalent,"com.google.common.base.PairwiseEquivalence:doEquivalent(java.lang.Iterable,java.lang.Iterable)",33,45,"/**
 * Checks if two iterables are equivalent.
 * @param iterableA first iterable to compare
 * @param iterableB second iterable to compare
 * @return true if both iterables have the same elements in the same order, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,reclaimValue,"com.google.common.collect.MapMakerInternalMap$Segment:reclaimValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",1869,1900,"/**
 * Removes a value reference from the map.
 * @param key key of the entry to remove
 * @param hash hash code of the key
 * @param valueReference reference to the value to be removed
 * @return true if removal was successful, false otherwise
 */",Removes an entry whose value has been garbage collected.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clearValueForTesting,"com.google.common.collect.MapMakerInternalMap$Segment:clearValueForTesting(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",1903,1933,"/**
* Removes a value reference for testing.
* @param key entry key
* @param hash entry hash code
* @param valueReference reference to the value to remove
* @return true if removed, false otherwise
*/","Clears a value that has not yet been set, and thus does not require count to be modified.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,equals,com.google.common.base.Equivalence$EquivalentToPredicate:equals(java.lang.Object),328,338,"/**
* Checks equality based on equivalence and target.
* @param obj object to compare
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,equals,com.google.common.base.Functions$ConstantFunction:equals(java.lang.Object),376,383,"/**
* Checks equality based on value.
* @param obj the object to compare with
* @return true if values are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,equals,com.google.common.base.Functions$ForMapWithDefault:equals(java.lang.Object),213,220,"/**
* Checks equality with another ForMapWithDefault instance.
* @param o the object to compare
* @return true if maps and default values are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,equals,com.google.common.base.Predicates$ContainsPatternPredicate:equals(java.lang.Object),750,761,"/**
* Checks if this predicate is equal to another object.
* @param obj the object to compare with
* @return true if the objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,equals,com.google.common.base.Suppliers$SupplierOfInstance:equals(java.lang.Object),373,380,"/**
 * Checks equality with another SupplierOfInstance based on instance.
 * @param obj the object to compare with
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapEntry.java,equals,com.google.common.collect.AbstractMapEntry:equals(java.lang.Object),48,56,"/**
 * Checks equality based on key and value.
 * @param object the object to compare with
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsValue,com.google.common.collect.ArrayTable:containsValue(java.lang.Object),424,434,"/**
* Checks if the specified value is present in the array.
* @param value the value to search for
* @return true if the value is found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,remove,com.google.common.collect.FilteredMultimapValues:remove(java.lang.Object),62,74,"/**
 * Removes an entry with a specific value from the multimap.
 * @param o value to be removed
 * @return true if an entry was removed, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,seekByKey,"com.google.common.collect.HashBiMap:seekByKey(java.lang.Object,int)",241,250,"/**
 * Searches for an entry by key in the hash table.
 * @param key the key to search for
 * @param keyHash precomputed hash of the key
 * @return BiEntry if found, otherwise null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,seekByValue,"com.google.common.collect.HashBiMap:seekByValue(java.lang.Object,int)",252,261,"/**
* Searches for an entry by value.
* @param value the value to search for
* @param valueHash precomputed hash of the value
* @return BiEntry if found, otherwise null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,elementsEqual,"com.google.common.collect.Iterators:elementsEqual(java.util.Iterator,java.util.Iterator)",272,284,"/**
* Checks if two iterators have equal elements in the same order.
* @param iterator1 first iterator to compare
* @param iterator2 second iterator to compare
* @return true if both iterators are equal, false otherwise
*/","* Determines whether two iterators contain equal elements in the same order. More specifically,
   * this method returns {@code true} if {@code iterator1} and {@code iterator2} contain the same
   * number of elements and every element of {@code iterator1} is equal to the corresponding element
   * of {@code iterator2}.
   *
   * <p>Note that this will modify the supplied iterators, since they will have been advanced some
   * number of elements forward.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,matchesValue,"com.google.common.collect.LinkedHashMultimap$ValueEntry:matchesValue(java.lang.Object,int)",216,218,"/**
 * Checks if the value matches the given hash and object.
 * @param v the value to compare
 * @param smearedVHash the smeared hash of the value
 * @return true if both conditions match, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$FilteredMapValues:remove(java.lang.Object),2917,2928,"/**
 * Removes an entry by value if it matches the predicate.
 * @param o value to remove
 * @return true if removed, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,equals,com.google.common.collect.Maps$ValueDifferenceImpl:equals(java.lang.Object),729,737,"/**
* Checks equality with another ValueDifference instance.
* @param object the object to compare
* @return true if both left and right values are equal, otherwise false
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,equals,com.google.common.collect.Multisets$AbstractEntry:equals(java.lang.Object),836,844,"/**
 * Checks equality of two Multiset entries.
 * @param object the object to compare with
 * @return true if both count and element are equal, false otherwise
 */","* Indicates whether an object equals this entry, following the behavior specified in {@link
     * Multiset.Entry#equals}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,equals,com.google.common.collect.Tables$AbstractCell:equals(java.lang.Object),176,188,"/**
* Checks if this Cell is equal to another object.
* @param obj the object to compare with
* @return true if both cells have the same row key, column key, and value; false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,equals,com.google.common.graph.ElementOrder:equals(java.lang.Object),161,172,"/**
* Checks equality based on type and comparator.
* @param obj object to compare with
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,canTraverseWithoutReusingEdge,"com.google.common.graph.Graphs:canTraverseWithoutReusingEdge(com.google.common.graph.Graph,java.lang.Object,java.lang.Object)",167,175,"/**
* Checks if traversing from previousNode to nextNode is possible without reusing an edge.
* @param graph the graph being traversed
* @param nextNode the node to traverse to
* @param previousNode the node that was previously visited (nullable)
* @return true if traversal is possible, false otherwise
*/","* Determines whether an edge has already been used during traversal. In the directed case a cycle
   * is always detected before reusing an edge, so no special logic is required. In the undirected
   * case, we must take care not to ""backtrack"" over an edge (i.e. going from A to B and then going
   * from B to A).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,equals,com.google.common.net.HostAndPort:equals(java.lang.Object),277,287,"/**
* Checks equality with another HostAndPort instance.
* @param other object to compare
* @return true if both host and port match, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,hashCode,com.google.common.base.Equivalence$Wrapper:hashCode(),266,269,"/**
 * Generates hash code based on reference.
 * @param reference the object to hash
 * @return computed hash code
 */",Returns the result of {@link Equivalence#hash(Object)} applied to the wrapped reference.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FunctionalEquivalence.java,doHash,com.google.common.base.FunctionalEquivalence:doHash(java.lang.Object),50,53,"/**
 * Computes hash code using function and equivalence.
 * @param a input object
 * @return hash code of transformed object
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/PairwiseEquivalence.java,doHash,com.google.common.base.PairwiseEquivalence:doHash(java.lang.Iterable),47,54,"/**
* Computes a hash code for an iterable using a custom algorithm.
* @param iterable the collection of elements to hash
* @return computed hash code as an integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizablePhantomReference.java,<init>,"com.google.common.base.FinalizablePhantomReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)",43,46,"/**
* Initializes a new FinalizablePhantomReference.
* @param referent object being referenced, can be null
* @param queue reference queue for cleanup
*/","* Constructs a new finalizable phantom reference.
   *
   * @param referent to phantom reference
   * @param queue that should finalize the referent",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableReferenceQueue.java,close,com.google.common.base.FinalizableReferenceQueue:close(),225,229,"/**
* Closes resources by enqueuing and cleaning up.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableSoftReference.java,<init>,"com.google.common.base.FinalizableSoftReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)",41,44,"/**
 * Initializes a soft reference with cleanup.
 * @param referent object to be softly referenced
 * @param queue finalization queue for cleanup
 */","* Constructs a new finalizable soft reference.
   *
   * @param referent to softly reference
   * @param queue that should finalize the referent",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableWeakReference.java,<init>,"com.google.common.base.FinalizableWeakReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)",41,44,"/**
 * Initializes a FinalizableWeakReference.
 * @param referent object to be weakly referenced
 * @param queue reference queue for cleanup
 */","* Constructs a new finalizable weak reference.
   *
   * @param referent to weakly reference
   * @param queue that should finalize the referent",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableReferenceQueue.java,loadFinalizer,com.google.common.base.FinalizableReferenceQueue$DecoupledLoader:loadFinalizer(),329,346,"/**
 * Loads the Finalizer class using URLClassLoader.
 * @return Class<?> instance of Finalizer or null if loading fails
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,constant,com.google.common.base.Functions:constant(java.lang.Object),357,360,"/**
 * Returns a function that always returns the specified value.
 * @param value the constant value to be returned by the function
 * @return a Function that always returns 'value'
 */","* Returns a function that ignores its input and always returns {@code value}.
   *
   * <p>Prefer to use the lambda expression {@code o -> value} instead. Note that it is not
   * serializable unless you explicitly make it {@link Serializable}, typically by writing {@code
   * (Function<Object, E> & Serializable) o -> value}.
   *
   * @param value the constant value for the function to return
   * @return a function that always returns {@code value}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,apply,com.google.common.base.Functions$FunctionForMapNoDefault:apply(java.lang.Object),161,168,"/**
* Retrieves value by key from map, ensuring key existence.
* @param key unique identifier for the value
* @return value associated with the key or null if not present
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseInteger,"com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser:parseInteger(com.google.common.cache.CacheBuilderSpec,int)",365,372,"/**
* Sets concurrency level for cache builder spec.
* @param spec CacheBuilderSpec object to configure
* @param value integer value for concurrency level
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseInteger,"com.google.common.cache.CacheBuilderSpec$InitialCapacityParser:parseInteger(com.google.common.cache.CacheBuilderSpec,int)",329,336,"/**
* Sets initial capacity for cache.
* @param spec CacheBuilderSpec object to configure
* @param value integer value for initial capacity
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseLong,"com.google.common.cache.CacheBuilderSpec$MaximumSizeParser:parseLong(com.google.common.cache.CacheBuilderSpec,long)",341,348,"/**
 * Sets the maximum size for the cache.
 * @param spec Cache configuration specification
 * @param value Maximum size value to be set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseLong,"com.google.common.cache.CacheBuilderSpec$MaximumWeightParser:parseLong(com.google.common.cache.CacheBuilderSpec,long)",353,360,"/**
 * Sets the maximum weight for cache entries.
 * @param spec CacheBuilderSpec object to configure
 * @param value long representing the maximum weight
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,<init>,com.google.common.collect.ConcurrentHashMultiset:<init>(java.util.concurrent.ConcurrentMap),128,132,"/**
 * Constructs a new ConcurrentHashMultiset with the provided map.
 * @param countMap backing concurrent map for element counts
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,convert,"com.google.common.collect.Maps$BiMapConverter:convert(com.google.common.collect.BiMap,java.lang.Object)",1620,1624,"/**
* Converts input using a bidirectional map.
* @param bimap the bidirectional map to use for conversion
* @param input the input value to convert
* @return the converted output value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdges,com.google.common.graph.AbstractBaseGraph:incidentEdges(java.lang.Object),106,134,"/**
 * Returns incident edges for a given node.
 * @param node the node to find incident edges for
 * @return set of endpoint pairs representing incident edges
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,getHostAndPortFromBracketedHost,com.google.common.net.HostAndPort:getHostAndPortFromBracketedHost(java.lang.String),210,238,"/**
 * Extracts host and port from a bracketed host-port string.
 * @param hostPortString formatted as ""[host]:port""
 * @return array with host and port, or empty port if not specified
 */","* Parses a bracketed host-port string, throwing IllegalArgumentException if parsing fails.
   *
   * @param hostPortString the full bracketed host-port specification. Port might not be specified.
   * @return an array with 2 strings: host and port, in that order.
   * @throws IllegalArgumentException if parsing the bracketed host-port string fails.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,requireBracketsForIPv6,com.google.common.net.HostAndPort:requireBracketsForIPv6(),271,275,"/**
* Ensures IPv6 literals have brackets.
* Throws IllegalArgumentException if not.
* @return current HostAndPort instance
*/","* Generate an error if the host might be a non-bracketed IPv6 literal.
   *
   * <p>URI formatting requires that IPv6 literals be surrounded by brackets, like ""[2001:db8::1]"".
   * Chain this call after {@link #fromString(String)} to increase the strictness of the parser, and
   * disallow IPv6 literals that don't contain these brackets.
   *
   * <p>Note that this parser identifies IPv6 literals solely based on the presence of a colon. To
   * perform actual validation of IP addresses, see the {@link InetAddresses#forString(String)}
   * method.
   *
   * @return {@code this}, to enable chaining of calls.
   * @throws IllegalArgumentException if bracketless IPv6 is detected.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,decrement,com.google.common.net.InetAddresses:decrement(java.net.InetAddress),1179,1191,"/**
* Decrements the given InetAddress by one.
* @param address the InetAddress to decrement
* @return decremented InetAddress or throws IllegalArgumentException if it wraps around
*/","* Returns a new InetAddress that is one less than the passed in address. This method works for
   * both IPv4 and IPv6 addresses.
   *
   * @param address the InetAddress to decrement
   * @return a new InetAddress that is one less than the passed in address
   * @throws IllegalArgumentException if InetAddress is at the beginning of its range
   * @since 18.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,increment,com.google.common.net.InetAddresses:increment(java.net.InetAddress),1202,1214,"/**
 * Increments the given IP address by one.
 * @param address current IP address
 * @return incremented IP address or throws exception if overflow occurs
 */","* Returns a new InetAddress that is one more than the passed in address. This method works for
   * both IPv4 and IPv6 addresses.
   *
   * @param address the InetAddress to increment
   * @return a new InetAddress that is one more than the passed in address
   * @throws IllegalArgumentException if InetAddress is at the end of its range
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Reflection.java,newProxy,"com.google.common.reflect.Reflection:newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)",79,86,"/**
* Creates a proxy instance for the given interface.
* @param <T> generic type of the interface
* @param interfaceType class of the interface to be proxied
* @param handler invocation handler to process method calls
* @return proxy object implementing the specified interface
*/","* Returns a proxy instance that implements {@code interfaceType} by dispatching method
   * invocations to {@code handler}. The class loader of {@code interfaceType} will be used to
   * define the proxy class. To implement multiple interfaces or specify a class loader, use {@link
   * Proxy#newProxyInstance}.
   *
   * @throws IllegalArgumentException if {@code interfaceType} does not specify the type of a Java
   *     interface",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeCapture.java,capture,com.google.common.reflect.TypeCapture:capture(),30,34,"/**
 * Captures the generic type of the class.
 * @return The actual type argument of the generic superclass.
 */",Returns the captured type.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeParameter.java,<init>,com.google.common.reflect.TypeParameter:<init>(),50,54,"/**
* Initializes a TypeParameter with a captured type.
* @throws IllegalArgumentException if the captured type is not a TypeVariable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,toString,com.google.common.base.Joiner$1:toString(java.lang.Object),510,530,"/**
* Converts an object to a CharSequence, handling nulls.
* @param part the object to convert
* @return CharSequence representation of the object or null if input is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.util.Iterator)",103,114,"/**
 * Appends elements from an iterator to an Appendable.
 * @param appendable destination for appending
 * @param parts iterator of objects to append
 * @return the modified Appendable object
 * @throws IOException if an I/O error occurs
 */","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code appendable}.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.lang.Iterable)",450,453,"/**
 * Appends entries to a StringBuilder.
 * @param builder StringBuilder to append to
 * @param entries Iterable of entries to append
 * @return the updated StringBuilder
 */","* Appends the string representation of each entry in {@code entries}, using the previously
     * configured separator and key-value separator, to {@code builder}. Identical to {@link
     * #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.
     *
     * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner$MapJoiner:join(java.util.Iterator),496,498,"/**
 * Joins entries into a string.
 * @param entries iterator of map entries
 * @return concatenated string of entry values
 */","* Returns a string containing the string representation of each entry in {@code entries}, using
     * the previously configured separator and key-value separator.
     *
     * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,withKeyValueSeparator,com.google.common.base.Joiner:withKeyValueSeparator(char),347,349,"/**
 * Sets the key-value separator for map joining.
 * @param keyValueSeparator character to separate keys and values
 * @return a new MapJoiner instance with the specified separator
 */","* Returns a {@code MapJoiner} using the given key-value separator, and the same configuration as
   * this {@code Joiner} otherwise.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,toString,com.google.common.base.MoreObjects$ToStringHelper:toString(),383,414,"/**
 * Generates a string representation of the object.
 * @return String representation including class name and values
 */","* Returns a string in the format specified by {@link MoreObjects#toStringHelper(Object)}.
     *
     * <p>After calling this method, you can keep adding more properties to later call toString()
     * again and get a more complete representation of the same object; but properties cannot be
     * removed, so this only allows limited reuse of the helper instance. The helper allows
     * duplication of properties (multiple name/value pairs with the same name can be added).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addHolder,com.google.common.base.MoreObjects$ToStringHelper:addHolder(java.lang.Object),422,427,"/**
* Adds a holder with a given value.
* @param value the value to be held
* @return this instance for method chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addHolder,"com.google.common.base.MoreObjects$ToStringHelper:addHolder(java.lang.String,java.lang.Object)",429,435,"/**
* Adds a holder with a name and value.
* @param name the name of the holder
* @param value the value to hold, can be null
* @return this ToStringHelper instance for chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addUnconditionalHolder,com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder(java.lang.Object),443,448,"/**
* Adds an unconditional holder with a value.
* @param value the value to hold
* @return this instance for method chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addUnconditionalHolder,"com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder(java.lang.String,java.lang.Object)",450,456,"/**
* Adds an unconditional holder with a name and value.
* @param name the name of the holder
* @param value the value to hold
* @return this instance for chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getWeigher,com.google.common.cache.CacheBuilder:getWeigher(),604,607,"/**
* Returns the weigher for entries.
* @return Weigher instance or default OneWeigher if none set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getKeyStrength,com.google.common.cache.CacheBuilder:getKeyStrength(),638,640,"/**
 * Returns the key strength, defaulting to STRONG if unset.
 * @return Key strength or STRONG if not specified
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getValueStrength,com.google.common.cache.CacheBuilder:getValueStrength(),698,700,"/**
 * Returns the strength of the value, defaulting to STRONG.
 * @return Value strength or STRONG if not set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getRemovalListener,com.google.common.cache.CacheBuilder:getRemovalListener(),988,992,"/**
* Returns the removal listener.
* @param <K1> key type extending K
* @param <V1> value type extending V
* @return RemovalListener or NullListener if none set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,get,com.google.common.collect.ImmutableSetMultimap:get(java.lang.Object),528,533,"/**
* Retrieves an immutable set of values by key.
* @param key the key to look up
* @return an ImmutableSet of values or an empty set if the key is not found
*/","* Returns an immutable set of the values for the given key. If no mappings in the multimap have
   * the provided key, an empty immutable set is returned. The values are in the same order as the
   * parameters used to build this multimap.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,getKeyStrength,com.google.common.collect.MapMaker:getKeyStrength(),221,223,"/**
 * Returns the key strength, defaulting to STRONG if not set.
 * @return Key strength or STRONG if null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,getValueStrength,com.google.common.collect.MapMaker:getValueStrength(),268,270,"/**
 * Returns the strength of the value, defaulting to STRONG.
 * @return Strength object representing the value's strength
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,getResource,com.google.common.io.Resources:getResource(java.lang.String),187,197,"/**
* Retrieves a resource by name.
* @param resourceName the name of the resource to find
* @return URL of the resource or throws an exception if not found
*/","* Returns a {@code URL} pointing to {@code resourceName} if the resource is found using the
   * {@linkplain Thread#getContextClassLoader() context class loader}. In simple environments, the
   * context class loader will find resources from the class path. In environments where different
   * threads can have different class loaders, for example app servers, the context class loader
   * will typically have been set to an appropriate loader for the current thread.
   *
   * <p>In the unusual case where the context class loader is null, the class loader that loaded
   * this class ({@code Resources}) will be used instead.
   *
   * @throws IllegalArgumentException if the resource is not found",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,absent,com.google.common.base.Optional:absent(),96,98,"/**
 * Returns an empty Optional.
 * @param <T> type of the value
 * @return Optional containing no value
 */","* Returns an {@code Optional} instance with no contained reference.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's
   * {@code Optional.empty}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,toJavaUtil,com.google.common.base.Optional:toJavaUtil(com.google.common.base.Optional),148,155,"/**
* Converts a Google Optional to a Java Util Optional.
* @param googleOptional the Google Optional instance
* @return Java Util Optional or null if input is null
*/","* Returns the equivalent {@code java.util.Optional} value to the given {@code
   * com.google.common.base.Optional}, or {@code null} if the argument is null.
   *
   * <p>If {@code googleOptional} is known to be non-null, use {@code googleOptional.toJavaUtil()}
   * instead.
   *
   * <p>Unfortunately, the method reference {@code Optional::toJavaUtil} will not work, because it
   * could refer to either the static or instance version of this method. Write out the lambda
   * expression {@code o -> Optional.toJavaUtil(o)} instead.
   *
   * @since 21.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,emptyToNull,com.google.common.base.Platform:emptyToNull(java.lang.String),80,82,"/**
 * Converts an empty string to null.
 * @param string input string
 * @return original string or null if it's empty
 */","* Returns the string if it is not empty, or a null string otherwise.
   *
   * @param string the string to test and possibly return
   * @return {@code string} if it is not empty; {@code null} otherwise",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,isNullOrEmpty,com.google.common.base.Strings:isNullOrEmpty(java.lang.String),70,72,"/**
* Checks if a string is null or empty.
* @param string the string to check
* @return true if the string is null or empty, false otherwise
*/","* Returns {@code true} if the given string is null or is the empty string.
   *
   * <p>Consider normalizing your string references with {@link #nullToEmpty}. If you do, you can
   * use {@link String#isEmpty()} instead of this method, and you won't need special null-safe forms
   * of methods like {@link String#toUpperCase} either. Or, if you'd like to normalize ""in the other
   * direction,"" converting empty strings to {@code null}, you can use {@link #emptyToNull}.
   *
   * @param string a string reference to check
   * @return {@code true} if the string is null or is the empty string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseDuration,"com.google.common.cache.CacheBuilderSpec$AccessDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)",461,466,"/**
* Sets access expiration duration for cache.
* @param spec CacheBuilderSpec to configure
* @param duration duration of time before entry expires after last access
* @param unit TimeUnit for the duration
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$RecordStatsParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",412,417,"/**
 * Parses cache configuration to enable statistics recording.
 * @param spec CacheBuilderSpec object to configure
 * @param key Configuration key (not used)
 * @param value Configuration value (must be null)
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseDuration,"com.google.common.cache.CacheBuilderSpec$RefreshDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)",481,486,"/**
 * Sets refresh duration and time unit for cache.
 * @param spec CacheBuilderSpec object to configure
 * @param duration refresh duration value
 * @param unit TimeUnit for the duration
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseDuration,"com.google.common.cache.CacheBuilderSpec$WriteDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)",471,476,"/**
 * Sets the write expiration duration for cache entries.
 * @param spec CacheBuilderSpec to configure
 * @param duration duration value
 * @param unit TimeUnit for the duration
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,chooseTableSize,com.google.common.collect.ImmutableSet:chooseTableSize(int),696,711,"/**
* Determines optimal table size for a given set size.
* @param setSize desired number of elements in the set
* @return calculated table size ensuring proper load factor and capacity limits
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,skip,"com.google.common.collect.Iterables:skip(java.lang.Iterable,int)",912,969,"/**
 * Skips elements in an iterable.
 * @param iterable the iterable to process
 * @param numberToSkip number of elements to skip
 * @return a new iterable with skipped elements
 */","* Returns a view of {@code iterable} that skips its first {@code numberToSkip} elements. If
   * {@code iterable} contains fewer than {@code numberToSkip} elements, the returned iterable skips
   * all of its elements.
   *
   * <p>Modifications to the underlying {@link Iterable} before a call to {@code iterator()} are
   * reflected in the returned iterator. That is, the iterator skips the first {@code numberToSkip}
   * elements that exist when the {@code Iterator} is created, not when {@code skip()} is called.
   *
   * <p>The returned iterable's iterator supports {@code remove()} if the iterator of the underlying
   * iterable supports it. Note that it is <i>not</i> possible to delete the last skipped element by
   * immediately calling {@code remove()} on that iterator, as the {@code Iterator} contract states
   * that a call to {@code remove()} before a call to {@code next()} will throw an {@link
   * IllegalStateException}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#skip}
   *
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,limit,"com.google.common.collect.Iterables:limit(java.lang.Iterable,int)",984,999,"/**
* Limits an iterable to a specified size.
* @param iterable the source iterable
* @param limitSize maximum number of elements to include
* @return limited iterable
*/","* Returns a view of {@code iterable} containing its first {@code limitSize} elements. If {@code
   * iterable} contains fewer than {@code limitSize} elements, the returned view contains all of its
   * elements. The returned iterable's iterator supports {@code remove()} if {@code iterable}'s
   * iterator does.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#limit}
   *
   * @param iterable the iterable to limit
   * @param limitSize the maximum number of elements in the returned iterable
   * @throws IllegalArgumentException if {@code limitSize} is negative
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,advance,"com.google.common.collect.Iterators:advance(java.util.Iterator,int)",934,944,"/**
 * Advances the given iterator by a specified number of steps.
 * @param iterator the iterator to advance
 * @param numberToAdvance the number of steps to advance
 * @return the actual number of steps advanced
 */","* Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times or until {@code
   * hasNext()} returns {@code false}, whichever comes first.
   *
   * @return the number of elements the iterator was advanced
   * @since 13.0 (since 3.0 as {@code Iterators.skip})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,limit,"com.google.common.collect.Iterators:limit(java.util.Iterator,int)",956,983,"/**
* Limits the number of elements from an iterator.
* @param iterator source iterator
* @param limitSize maximum number of elements to return
* @return Iterator with limited size
*/","* Returns a view containing the first {@code limitSize} elements of {@code iterator}. If {@code
   * iterator} contains fewer than {@code limitSize} elements, the returned view contains all of its
   * elements. The returned iterator supports {@code remove()} if {@code iterator} does.
   *
   * @param iterator the iterator to limit
   * @param limitSize the maximum number of elements in the returned iterator
   * @throws IllegalArgumentException if {@code limitSize} is negative
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,forTree,com.google.common.graph.Traverser:forTree(com.google.common.graph.SuccessorsFunction),180,193,"/**
 * Creates a traverser for a tree structure.
 * @param tree function defining the tree's successors
 * @return Traverser object for tree traversal
 */","* Creates a new traverser for a directed acyclic graph that has at most one path from the start
   * node(s) to any node reachable from the start node(s), and has no paths from any start node to
   * any other start node, such as a tree or forest.
   *
   * <p>{@code forTree()} is especially useful (versus {@code forGraph()}) in cases where the data
   * structure being traversed is, in addition to being a tree/forest, also defined <a
   * href=""https://github.com/google/guava/wiki/GraphsExplained#non-recursiveness"">recursively</a>.
   * This is because the {@code forTree()}-based implementations don't keep track of visited nodes,
   * and therefore don't need to call {@code equals()} or {@code hashCode()} on the node objects;
   * this saves both time and space versus traversing the same graph using {@code forGraph()}.
   *
   * <p>Providing a graph to be traversed for which there is more than one path from the start
   * node(s) to any node may lead to:
   *
   * <ul>
   *   <li>Traversal not terminating (if the graph has cycles)
   *   <li>Nodes being visited multiple times (if multiple paths exist from any start node to any
   *       node reachable from any start node)
   * </ul>
   *
   * <p><b>Performance notes</b>
   *
   * <ul>
   *   <li>Traversals require <i>O(n)</i> time (where <i>n</i> is the number of nodes reachable from
   *       the start node).
   *   <li>While traversing, the traverser will use <i>O(H)</i> space (where <i>H</i> is the number
   *       of nodes that have been seen but not yet visited, that is, the ""horizon"").
   * </ul>
   *
   * <p><b>Examples</b> (all edges are directed facing downwards)
   *
   * <p>The graph below would be valid input with start nodes of {@code a, f, c}. However, if {@code
   * b} were <i>also</i> a start node, then there would be multiple paths to reach {@code e} and
   * {@code h}.
   *
   * {@snippet :
   *    a     b      c
   *   / \   / \     |
   *  /   \ /   \    |
   * d     e     f   g
   *       |
   *       |
   *       h
   * }
   *
   * <p>.
   *
   * <p>The graph below would be a valid input with start nodes of {@code a, f}. However, if {@code
   * b} were a start node, there would be multiple paths to {@code f}.
   *
   * {@snippet :
   *    a     b
   *   / \   / \
   *  /   \ /   \
   * c     d     e
   *        \   /
   *         \ /
   *          f
   * }
   *
   * <p><b>Note on binary trees</b>
   *
   * <p>This method can be used to traverse over a binary tree. Given methods {@code
   * leftChild(node)} and {@code rightChild(node)}, this method can be called as
   *
   * {@snippet :
   * Traverser.forTree(node -> ImmutableList.of(leftChild(node), rightChild(node)));
   * }
   *
   * @param tree {@link SuccessorsFunction} representing a directed acyclic graph that has at most
   *     one path between any two nodes",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,<init>,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:<init>(long[]),176,185,"/**
* Constructs a LockFreeBitArray from an array of longs.
* @param data array of long integers to initialize the bit array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,checkPositiveAndMakeMultipleOf32,com.google.common.hash.Hashing:checkPositiveAndMakeMultipleOf32(int),739,742,"/**
* Rounds up to the nearest multiple of 32 for a positive integer.
* @param bits positive integer value
* @return smallest multiple of 32 greater than or equal to bits
*/","Checks that the passed argument is positive, and ceils it to a multiple of 32.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,<init>,"com.google.common.io.ByteStreams$LimitedInputStream:<init>(java.io.InputStream,long)",720,725,"/**
 * Wraps an input stream with a byte limit.
 * @param in the underlying input stream
 * @param limit maximum number of bytes to read
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,<init>,com.google.common.math.Quantiles$Scale:<init>(int),176,179,"/**
* Initializes a new Scale with a specified quantile scale.
* @param scale positive integer representing the quantile scale
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,<init>,"com.google.common.math.Quantiles$ScaleAndIndexes:<init>(int,int[])",327,334,"/**
* Initializes ScaleAndIndexes with a scale and an array of indexes.
* @param scale the scaling factor
* @param indexes array of index values to validate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromBigInteger,"com.google.common.net.InetAddresses:fromBigInteger(java.math.BigInteger,boolean)",1120,1150,"/**
 * Converts BigInteger to InetAddress.
 * @param address BigInteger representation of IP address
 * @param isIpv6 true for IPv6, false for IPv4
 * @return InetAddress object or throws exception if conversion fails
 */","* Converts a BigInteger to either an IPv4 or IPv6 address. If the IP is IPv4, it must be
   * constrained to 32 bits, otherwise it is constrained to 128 bits.
   *
   * @param address the address represented as a big integer
   * @param isIpv6 whether the created address should be IPv4 or IPv6
   * @return the BigInteger converted to an address
   * @throws IllegalArgumentException if the BigInteger is not between 0 and maximum value for IPv4
   *     or IPv6 respectively",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,com.google.common.util.concurrent.Striped$PowerOfTwoStriped:<init>(int),350,353,"/**
* Initializes a striped structure with a given number of stripes.
* @param stripes the desired number of stripes, must be positive
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodabetFor,com.google.common.io.BaseEncoding$Alphabet:decodabetFor(char[]),481,491,"/**
 * Creates a decoding table for base32 encoding.
 * @param chars array of characters to map
 * @return byte array representing the decoding table
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,repeat,"com.google.common.base.Strings:repeat(java.lang.String,int)",148,174,"/**
* Repeats a string multiple times.
* @param string the string to repeat
* @param count number of times to repeat
* @return repeated string or original if count is 1
*/","* Returns a string consisting of a specific number of concatenated copies of an input string. For
   * example, {@code repeat(""hey"", 3)} returns the string {@code ""heyheyhey""}.
   *
   * <p><b>Java 11+ users:</b> use {@code string.repeat(count)} instead.
   *
   * @param string any non-null string
   * @param count the number of times to repeat it; a nonnegative integer
   * @return a string containing {@code string} repeated {@code count} times (the empty string if
   *     {@code count} is zero)
   * @throws IllegalArgumentException if {@code count} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkNonNegative,com.google.common.graph.Graphs:checkNonNegative(int),642,646,"/**
* Checks if a value is non-negative.
* @param value the integer to check
* @return the same value if non-negative
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkPositive,com.google.common.graph.Graphs:checkPositive(int),654,658,"/**
* Checks if a value is positive.
* @param value the integer to check
* @return the original value if positive
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,newHasher,com.google.common.hash.AbstractHashFunction:newHasher(int),75,80,"/**
* Creates a new hasher with the specified expected input size.
* @param expectedInputSize estimated size of the input data
* @return Hasher instance initialized with the expected input size
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,<init>,"com.google.common.hash.BloomFilter:<init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy)",131,140,"/**
 * Initializes a Bloom filter with specified parameters.
 * @param bits underlying bit array for storing hash values
 * @param numHashFunctions number of hash functions to use
 * @param funnel strategy for converting elements to bytes
 * @param strategy bloom filter strategy (e.g., size, false positive rate)
 */",Creates a BloomFilter.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/ChecksumHashFunction.java,<init>,"com.google.common.hash.ChecksumHashFunction:<init>(com.google.common.hash.ImmutableSupplier,int,java.lang.String)",42,48,"/**
 * Initializes a ChecksumHashFunction.
 * @param checksumSupplier supplies the checksum instance
 * @param bits number of bits, must be 32 or 64
 * @param toString string representation of the function
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,concatenating,com.google.common.hash.Hashing:concatenating(java.lang.Iterable),774,783,"/**
* Creates a concatenated hash function from an iterable of hash functions.
* @param hashFunctions collection of hash functions to concatenate
* @return ConcatenatedHashFunction object combining the input functions
*/","* Returns a hash function which computes its hash code by concatenating the hash codes of the
   * underlying hash functions together. This can be useful if you need to generate hash codes of a
   * specific length.
   *
   * <p>For example, if you need 1024-bit hash codes, you could join two {@link Hashing#sha512} hash
   * functions together: {@code Hashing.concatenating(Hashing.sha512(), Hashing.sha512())}.
   *
   * @since 19.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,<init>,"com.google.common.hash.SipHashFunction:<init>(int,int,long,long)",55,64,"/**
* Initializes a SipHash function with given parameters.
* @param c number of iterations for compression phase
* @param d number of iterations for finalization phase
* @param k0 first key component
* @param k1 second key component
*/","* @param c the number of compression rounds (must be positive)
   * @param d the number of finalization rounds (must be positive)
   * @param k0 the first half of the key
   * @param k1 the second half of the key",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,<init>,"com.google.common.io.FileBackedOutputStream:<init>(int,boolean)",119,154,"/**
 * Constructs a FileBackedOutputStream with specified file threshold and reset behavior.
 * @param fileThreshold the size in bytes after which data is written to a file
 * @param resetOnFinalize whether to reset the stream on finalization
 */","* Creates a new instance that uses the given file threshold, and optionally resets the data when
   * the {@link ByteSource} returned by {@link #asByteSource} is finalized.
   *
   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file
   * @param resetOnFinalize if true, the {@link #reset} method will be called when the {@link
   *     ByteSource} returned by {@link #asByteSource} is finalized.
   * @throws IllegalArgumentException if {@code fileThreshold} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,<init>,"com.google.common.net.InetAddresses$TeredoInfo:<init>(java.net.Inet4Address,java.net.Inet4Address,int,int)",768,781,"/**
 * Constructs a TeredoInfo object with specified server, client, port, and flags.
 * @param server optional IPv4 address of the server
 * @param client optional IPv4 address of the client
 * @param port port number (0 <= port <= 0xffff)
 * @param flags flag values (0 <= flags <= 0xffff)
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getInet4Address,com.google.common.net.InetAddresses:getInet4Address(byte[]),124,132,"/**
 * Converts a byte array to an Inet4Address.
 * @param bytes 4-byte array representing an IPv4 address
 * @return Inet4Address object
 */","* Returns an {@link Inet4Address}, given a byte array representation of the IPv4 address.
   *
   * @param bytes byte array representing an IPv4 address (should be of length 4)
   * @return {@link Inet4Address} corresponding to the supplied byte array
   * @throws IllegalArgumentException if a valid {@link Inet4Address} can not be created",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,ensureCapacity,"com.google.common.primitives.Booleans:ensureCapacity(boolean[],int,int)",272,276,"/**
* Ensures array has at least minLength + padding capacity.
* @param array original boolean array
* @param minLength minimum required length
* @param padding additional capacity to ensure
* @return resized array if necessary, otherwise the original array
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,ensureCapacity,"com.google.common.primitives.Bytes:ensureCapacity(byte[],int,int)",201,205,"/**
* Ensures array has minimum length with optional padding.
* @param array original byte array
* @param minLength desired minimum length
* @param padding additional space to allocate if needed
* @return new array with ensured capacity or original if sufficient
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,ensureCapacity,"com.google.common.primitives.Chars:ensureCapacity(char[],int,int)",356,360,"/**
* Ensures the char array has at least the specified minimum length with optional padding.
* @param array original char array
* @param minLength desired minimum length of the array
* @param padding additional space to allocate if needed
* @return new char array with ensured capacity or original if sufficient
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,ensureCapacity,"com.google.common.primitives.Doubles:ensureCapacity(double[],int,int)",348,352,"/**
* Ensures the array has at least the specified minimum length.
* @param array original array
* @param minLength desired minimum length
* @param padding additional capacity to add if resizing
* @return resized array or original if sufficient capacity
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,ensureCapacity,"com.google.common.primitives.Floats:ensureCapacity(float[],int,int)",345,349,"/**
* Ensures the array has at least the specified minimum length with optional padding.
* @param array original float array
* @param minLength desired minimum length of the array
* @param padding additional capacity to add if resizing
* @return resized array or original if sufficient capacity
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,ensureCapacity,"com.google.common.primitives.Ints:ensureCapacity(int[],int,int)",416,420,"/**
* Ensures array has at least the specified minimum length with optional padding.
* @param array original integer array
* @param minLength desired minimum length of the array
* @param padding additional capacity to add if resizing
* @return resized array or original if sufficient capacity
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,ensureCapacity,"com.google.common.primitives.Longs:ensureCapacity(long[],int,int)",495,499,"/**
* Ensures the array has at least the specified minimum length with additional padding.
* @param array original array to check and resize if necessary
* @param minLength minimum required length of the array
* @param padding extra capacity to add beyond the minimum length
* @return resized array if necessary, otherwise the original array
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,ensureCapacity,"com.google.common.primitives.Shorts:ensureCapacity(short[],int,int)",406,410,"/**
* Ensures the array has at least the specified minimum length with optional padding.
* @param array original short array
* @param minLength desired minimum length of the array
* @param padding additional capacity to be added if resizing is needed
* @return resized array or original if sufficient capacity exists
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,checkPermits,com.google.common.util.concurrent.RateLimiter:checkPermits(int),493,495,"/**
 * Validates that the number of permits is positive.
 * @param permits number of requested permits
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkNonNegative,com.google.common.graph.Graphs:checkNonNegative(long),648,652,"/**
* Checks if a value is non-negative.
* @param value the value to check
* @return the original value if non-negative
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkPositive,com.google.common.graph.Graphs:checkPositive(long),660,664,"/**
* Ensures a number is positive.
* @param value the number to check
* @return the original value if positive
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,checkedCast,com.google.common.primitives.Chars:checkedCast(long),85,89,"/**
 * Safely casts a long to a char.
 * @param value the long value to cast
 * @return the char representation of the long value
 * @throws IllegalArgumentException if out of char range
 */","* Returns the {@code char} value that is equal to {@code value}, if possible.
   *
   * @param value any value in the range of the {@code char} type
   * @return the {@code char} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Character#MAX_VALUE}
   *     or less than {@link Character#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,checkedCast,com.google.common.primitives.Ints:checkedCast(long),95,99,"/**
* Safely casts long to int.
* @param value long value to cast
* @return int representation of the value
* @throws IllegalArgumentException if value is out of int range
*/","* Returns the {@code int} value that is equal to {@code value}, if possible.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Use {@link
   * Math#toIntExact(long)} instead, but be aware that that method throws {@link
   * ArithmeticException} rather than {@link IllegalArgumentException}.
   *
   * @param value any value in the range of the {@code int} type
   * @return the {@code int} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Integer#MAX_VALUE} or
   *     less than {@link Integer#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,checkNoOverflow,com.google.common.primitives.Longs:checkNoOverflow(long),268,274,"/**
 * Converts a long to an int, checking for overflow.
 * @param result the long value to convert
 * @return the int value if no overflow occurs
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,checkedCast,com.google.common.primitives.Shorts:checkedCast(long),90,94,"/**
 * Converts long to short safely.
 * @param value long value to convert
 * @return short representation of the value
 * @throws IllegalArgumentException if conversion overflows
 */","* Returns the {@code short} value that is equal to {@code value}, if possible.
   *
   * @param value any value in the range of the {@code short} type
   * @return the {@code short} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Short#MAX_VALUE} or
   *     less than {@link Short#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,checkedCast,com.google.common.primitives.SignedBytes:checkedCast(long),57,61,"/**
 * Converts long to byte with overflow check.
 * @param value the long value to convert
 * @return byte representation of the value
 * @throws IllegalArgumentException if conversion overflows
 */","* Returns the {@code byte} value that is equal to {@code value}, if possible.
   *
   * @param value any value in the range of the {@code byte} type
   * @return the {@code byte} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Byte#MAX_VALUE} or
   *     less than {@link Byte#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,checkedCast,com.google.common.primitives.UnsignedBytes:checkedCast(long),97,101,"/**
* Safely casts a long to a byte.
* Throws an exception if the value is out of range.
* @param value the long value to cast
* @return the casted byte value
*/","* Returns the {@code byte} value that, when treated as unsigned, is equal to {@code value}, if
   * possible.
   *
   * @param value a value between 0 and 255 inclusive
   * @return the {@code byte} value that, when treated as unsigned, equals {@code value}
   * @throws IllegalArgumentException if {@code value} is negative or greater than 255",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,checkedCast,com.google.common.primitives.UnsignedInts:checkedCast(long),93,96,"/**
 * Safely casts a long to an int.
 * @param value the long value to cast
 * @return the int value if within range
 * @throws IllegalArgumentException if out of int range
 */","* Returns the {@code int} value that, when treated as unsigned, is equal to {@code value}, if
   * possible.
   *
   * @param value a value between 0 and 2<sup>32</sup>-1 inclusive
   * @return the {@code int} value that, when treated as unsigned, equals {@code value}
   * @throws IllegalArgumentException if {@code value} is negative or greater than or equal to
   *     2<sup>32</sup>
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedDelaySchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedDelaySchedule(long,long,java.util.concurrent.TimeUnit)",143,155,"/**
* Creates a fixed-delay scheduler.
* @param initialDelay initial delay before first execution
* @param delay delay between subsequent executions
* @param unit time unit for delays
* @return Scheduler instance
*/","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleWithFixedDelay} method.
     *
     * @param initialDelay the time to delay first execution
     * @param delay the delay between the termination of one execution and the commencement of the
     *     next
     * @param unit the time unit of the initialDelay and delay parameters",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedRateSchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedRateSchedule(long,long,java.util.concurrent.TimeUnit)",178,190,"/**
* Creates a fixed-rate scheduler.
* @param initialDelay delay before first execution in milliseconds
* @param period interval between executions in milliseconds
* @param unit time unit for delay and period (deprecated)
* @return Scheduler instance
*/","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleAtFixedRate} method.
     *
     * @param initialDelay the time to delay first execution
     * @param period the period between successive executions of the task
     * @param unit the time unit of the initialDelay and period parameters",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,checkPositiveTimeout,com.google.common.util.concurrent.SimpleTimeLimiter:checkPositiveTimeout(long),279,281,"/**
 * Validates that the specified timeout duration is positive.
 * @param timeoutDuration the timeout duration to validate
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,constrainToRange,"com.google.common.primitives.Chars:constrainToRange(char,char,char)",266,269,"/**
 * Constrains a character value within a specified range.
 * @param value the character to constrain
 * @param min the minimum allowable value
 * @param max the maximum allowable value
 * @return the constrained character value
 */","* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.
   *
   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned
   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code
   * value} is greater than {@code max}, {@code max} is returned.
   *
   * @param value the {@code char} value to constrain
   * @param min the lower bound (inclusive) of the range to constrain {@code value} to
   * @param max the upper bound (inclusive) of the range to constrain {@code value} to
   * @throws IllegalArgumentException if {@code min > max}
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,constrainToRange,"com.google.common.primitives.Longs:constrainToRange(long,long,long)",240,243,"/**
* Constrains a value within a specified range.
* @param value the value to constrain
* @param min the minimum allowable value
* @param max the maximum allowable value
* @return the constrained value
*/","* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.
   *
   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned
   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code
   * value} is greater than {@code max}, {@code max} is returned.
   *
   * <p><b>Java 21+ users:</b> Use {@code Math.clamp} instead. Note that that method is capable of
   * constraining a {@code long} input to an {@code int} range.
   *
   * @param value the {@code long} value to constrain
   * @param min the lower bound (inclusive) of the range to constrain {@code value} to
   * @param max the upper bound (inclusive) of the range to constrain {@code value} to
   * @throws IllegalArgumentException if {@code min > max}
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$KeyStrengthParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",383,388,"/**
 * Parses cache configuration for key strength.
 * @param spec CacheBuilderSpec object to configure
 * @param key configuration key
 * @param value unused; must be null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$ValueStrengthParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",399,406,"/**
* Parses cache specification for value strength.
* @param spec CacheBuilderSpec instance
* @param key configuration key
* @param value configuration value (expected to be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,add,"com.google.common.collect.Multisets$FilteredMultiset:add(java.lang.Object,int)",374,379,"/**
 * Adds an element with specified occurrences to the multiset.
 * @param element the element to add
 * @param occurrences number of times to add the element
 * @return the previous count of the element in the multiset
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,getResource,"com.google.common.io.Resources:getResource(java.lang.Class,java.lang.String)",205,211,"/**
 * Retrieves a resource URL by name.
 * @param contextClass class providing the context for loading the resource
 * @param resourceName name of the resource to find
 * @return URL of the resource if found; throws IllegalArgumentException otherwise
 */","* Given a {@code resourceName} that is relative to {@code contextClass}, returns a {@code URL}
   * pointing to the named resource.
   *
   * @throws IllegalArgumentException if the resource is not found",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,disallowPrimitiveType,"com.google.common.reflect.Types:disallowPrimitiveType(java.lang.reflect.Type[],java.lang.String)",525,532,"/**
* Checks for and disallows primitive types in the given array.
* @param types array of Type objects to check
* @param usedAs context describing how types are used
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,<init>,"com.google.common.util.concurrent.AbstractService$StateSnapshot:<init>(com.google.common.util.concurrent.Service$State,boolean,java.lang.Throwable)",609,624,"/**
* Initializes a state snapshot.
* @param internalState current state of the system
* @param shutdownWhenStartupFinishes flag to indicate if shutdown should occur after startup
* @param failure exception if the state is FAILED, otherwise null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,checkNoDuplicate,"com.google.common.collect.RegularImmutableTable:checkNoDuplicate(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",196,204,"/**
* Ensures no duplicate keys exist.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param existingValue current value associated with the key pair, if any
* @param newValue new value to be checked against existing value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,start,com.google.common.base.Stopwatch:start(),163,169,"/**
* Starts the stopwatch.
* Throws an exception if already running.
* @return the Stopwatch instance
*/","* Starts the stopwatch.
   *
   * @return this {@code Stopwatch} instance
   * @throws IllegalStateException if the stopwatch is already running.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,stop,com.google.common.base.Stopwatch:stop(),178,185,"/**
* Stops the stopwatch and records the elapsed time.
* @return This Stopwatch instance for method chaining
*/","* Stops the stopwatch. Future reads will return the fixed duration that had elapsed up to this
   * point.
   *
   * @return this {@code Stopwatch} instance
   * @throws IllegalStateException if the stopwatch is already stopped.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,checkNonLoadingCache,com.google.common.cache.CacheBuilder:checkNonLoadingCache(),1053,1055,"/**
* Ensures refreshAfterWrite is not set for non-LoadingCaches.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,checkWeightWithWeigher,com.google.common.cache.CacheBuilder:checkWeightWithWeigher(),1057,1070,"/**
* Validates weigher and maximumWeight configuration.
* @param weigher the weighing device to use
* @param maximumWeight the upper weight limit
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:remove(),1470,1477,"/**
 * Removes the current element from the underlying collection.
 * @throws IllegalStateException if no elements have been iterated since the last removal
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectPreconditions.java,checkRemove,com.google.common.collect.CollectPreconditions:checkRemove(boolean),62,64,"/**
* Ensures removal is allowed.
* @param canRemove flag indicating if removal is permitted
*/","* Precondition tester for {@code Iterator.remove()} that throws an exception with a consistent
   * error message.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,orderEntriesByValue,com.google.common.collect.ImmutableMap$Builder:orderEntriesByValue(java.util.Comparator),513,518,"/**
* Sets the comparator for ordering entries by value.
* @param valueComparator comparator to define order of values
* @return Builder instance with value comparator set
*/","* Configures this {@code Builder} to order entries by value according to the specified
     * comparator.
     *
     * <p>The sort order is stable, that is, if two entries have values that compare as equivalent,
     * the entry that was inserted first will be first in the built map's iteration order.
     *
     * @throws IllegalStateException if this method was already called
     * @since 19.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,remove,com.google.common.collect.Iterators$PeekingImpl:remove(),1209,1213,"/**
* Removes the last element returned by the iterator.
* Throws an exception if peek() has been called since the last next().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,remove,com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:remove(),546,557,"/**
* Removes the last element returned by iterator.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,isEvenLevel,com.google.common.collect.MinMaxPriorityQueue:isEvenLevel(int),491,496,"/**
* Checks if the given zero-based index corresponds to an even level.
* @param index zero-based index of the element
* @return true if the index is at an even level, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,checkNotDone,com.google.common.hash.MacHashFunction$MacHasher:checkNotDone(),130,132,"/**
* Ensures the hasher is not already used.
* Throws an error if hash() has been called previously.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,checkNotDone,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:checkNotDone(),157,159,"/**
 * Ensures the hasher has not been used yet.
 * Throws an exception if hash() has already been called.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,initialCapacity,com.google.common.cache.CacheBuilder:initialCapacity(int),411,420,"/**
 * Sets the initial capacity of the cache.
 * @param initialCapacity starting number of entries
 * @return this CacheBuilder instance for chaining
 */","* Sets the minimum total size for the internal hash tables. For example, if the initial capacity
   * is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each
   * having a hash table of size eight. Providing a large enough estimate at construction time
   * avoids the need for expensive resizing operations later, but setting this value unnecessarily
   * high wastes memory.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code initialCapacity} is negative
   * @throws IllegalStateException if an initial capacity was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,concurrencyLevel,com.google.common.cache.CacheBuilder:concurrencyLevel(int),457,466,"/**
* Sets the expected number of concurrent threads accessing the cache.
* @param concurrencyLevel positive integer representing concurrency level
* @return CacheBuilder instance with updated settings
*/","* Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The
   * table is internally partitioned to try to permit the indicated number of concurrent updates
   * without contention. Because assignment of entries to these partitions is not necessarily
   * uniform, the actual concurrency observed may vary. Ideally, you should choose a value to
   * accommodate as many threads as will ever concurrently modify the table. Using a significantly
   * higher value than you need can waste space and time, and a significantly lower value can lead
   * to thread contention. But overestimates and underestimates within an order of magnitude do not
   * usually have much noticeable impact. A value of one permits only one thread to modify the cache
   * at a time, but since read operations and cache loading computations can proceed concurrently,
   * this still yields higher concurrency than full synchronization.
   *
   * <p>Defaults to 4. <b>Note:</b>The default may change in the future. If you care about this
   * value, you should always choose it explicitly.
   *
   * <p>The current implementation uses the concurrency level to create a fixed number of hashtable
   * segments, each governed by its own write lock. The segment lock is taken once for each explicit
   * write, and twice for each cache loading computation (once prior to loading the new value, and
   * once after loading completes). Much internal cache management is performed at the segment
   * granularity. For example, access queues and write queues are kept per segment when they are
   * required by the selected eviction algorithm. As such, when writing unit tests it is not
   * uncommon to specify {@code concurrencyLevel(1)} in order to achieve more deterministic eviction
   * behavior.
   *
   * <p>Note that future implementations may abandon segment locking in favor of more advanced
   * concurrency controls.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive
   * @throws IllegalStateException if a concurrency level was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,initialCapacity,com.google.common.collect.MapMaker:initialCapacity(int),144,153,"/**
* Sets the initial capacity of the map.
* @param initialCapacity initial size for the map
* @return this MapMaker instance
*/","* Sets the minimum total size for the internal hash tables. For example, if the initial capacity
   * is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each
   * having a hash table of size eight. Providing a large enough estimate at construction time
   * avoids the need for expensive resizing operations later, but setting this value unnecessarily
   * high wastes memory.
   *
   * @throws IllegalArgumentException if {@code initialCapacity} is negative
   * @throws IllegalStateException if an initial capacity was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,concurrencyLevel,com.google.common.collect.MapMaker:concurrencyLevel(int),178,187,"/**
* Sets the concurrency level for map operations.
* @param concurrencyLevel expected number of concurrent threads
* @return this MapMaker instance
*/","* Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The
   * table is internally partitioned to try to permit the indicated number of concurrent updates
   * without contention. Because assignment of entries to these partitions is not necessarily
   * uniform, the actual concurrency observed may vary. Ideally, you should choose a value to
   * accommodate as many threads as will ever concurrently modify the table. Using a significantly
   * higher value than you need can waste space and time, and a significantly lower value can lead
   * to thread contention. But overestimates and underestimates within an order of magnitude do not
   * usually have much noticeable impact. A value of one permits only one thread to modify the map
   * at a time, but since read operations can proceed concurrently, this still yields higher
   * concurrency than full synchronization. Defaults to 4.
   *
   * <p><b>Note:</b> Prior to Guava release 9.0, the default was 16. It is possible the default will
   * change again in the future. If you care about this value, you should always choose it
   * explicitly.
   *
   * @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive
   * @throws IllegalStateException if a concurrency level was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,asInt,com.google.common.hash.HashCode$BytesHashCode:asInt(),267,277,"/**
 * Converts the first 4 bytes to an integer.
 * @return integer representation of the byte array
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,maximumSize,com.google.common.cache.CacheBuilder:maximumSize(long),493,505,"/**
* Sets the maximum number of entries in the cache.
* @param maximumSize maximum number of entries allowed
* @return CacheBuilder instance for chaining
*/","* Specifies the maximum number of entries the cache may contain.
   *
   * <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in
   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each
   * resulting segment inside the cache <i>independently</i> limits its own size to approximately
   * {@code maximumSize / concurrencyLevel}.
   *
   * <p>When eviction is necessary, the cache evicts entries that are less likely to be used again.
   * For example, the cache may evict an entry because it hasn't been used recently or very often.
   *
   * <p>If {@code maximumSize} is zero, elements will be evicted immediately after being loaded into
   * cache. This can be useful in testing, or to disable caching temporarily.
   *
   * <p>This feature cannot be used in conjunction with {@link #maximumWeight}.
   *
   * @param maximumSize the maximum size of the cache
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code maximumSize} is negative
   * @throws IllegalStateException if a maximum size or weight was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,maximumWeight,com.google.common.cache.CacheBuilder:maximumWeight(long),534,546,"/**
 * Sets the maximum total weight of entries in the cache.
 * @param maximumWeight the maximum allowed weight; must be non-negative
 * @return this CacheBuilder instance for chaining
 */","* Specifies the maximum weight of entries the cache may contain. Weight is determined using the
   * {@link Weigher} specified with {@link #weigher}, and use of this method requires a
   * corresponding call to {@link #weigher} prior to calling {@link #build}.
   *
   * <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in
   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each
   * resulting segment inside the cache <i>independently</i> limits its own weight to approximately
   * {@code maximumWeight / concurrencyLevel}.
   *
   * <p>When eviction is necessary, the cache evicts entries that are less likely to be used again.
   * For example, the cache may evict an entry because it hasn't been used recently or very often.
   *
   * <p>If {@code maximumWeight} is zero, elements will be evicted immediately after being loaded
   * into cache. This can be useful in testing, or to disable caching temporarily.
   *
   * <p>Note that weight is only used to determine whether the cache is over capacity; it has no
   * effect on selecting which entry should be evicted next.
   *
   * <p>This feature cannot be used in conjunction with {@link #maximumSize}.
   *
   * @param maximumWeight the maximum total weight of entries the cache may contain
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code maximumWeight} is negative
   * @throws IllegalStateException if a maximum weight or size was already set
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,weigher,com.google.common.cache.CacheBuilder:weigher(com.google.common.cache.Weigher),577,594,"/**
* Sets a weigher for the cache.
* @param weigher function to determine the weight of entries
* @return CacheBuilder instance with weigher set
*/","* Specifies the weigher to use in determining the weight of entries. Entry weight is taken into
   * consideration by {@link #maximumWeight(long)} when determining which entries to evict, and use
   * of this method requires a corresponding call to {@link #maximumWeight(long)} prior to calling
   * {@link #build}. Weights are measured and recorded when entries are inserted into the cache, and
   * are thus effectively static during the lifetime of a cache entry.
   *
   * <p>When the weight of an entry is zero it will not be considered for size-based eviction
   * (though it still may be evicted by other means).
   *
   * <p><b>Important note:</b> Instead of returning <em>this</em> as a {@code CacheBuilder}
   * instance, this method returns {@code CacheBuilder<K1, V1>}. From this point on, either the
   * original reference or the returned reference may be used to complete configuration and build
   * the cache, but only the ""generic"" one is type-safe. That is, it will properly prevent you from
   * building caches whose key or value types are incompatible with the types accepted by the
   * weigher already provided; the {@code CacheBuilder} type cannot do this. For best results,
   * simply use the standard method-chaining idiom, as illustrated in the documentation at top,
   * configuring a {@code CacheBuilder} and building your {@link Cache} all in a single statement.
   *
   * <p><b>Warning:</b> if you ignore the above advice, and use this {@code CacheBuilder} to build a
   * cache whose key or value type is incompatible with the weigher, you will likely experience a
   * {@link ClassCastException} at some <i>undefined</i> point in the future.
   *
   * @param weigher the weigher to use in calculating the weight of cache entries
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if a weigher was already set or {@link #maximumSize(long)} was
   *     previously called
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterWrite,"com.google.common.cache.CacheBuilder:expireAfterWrite(long,java.util.concurrent.TimeUnit)",753,763,"/**
* Sets the maximum time after a write for an entry to remain in the cache.
* @param duration the length of time after which an entry should expire
* @param unit the time unit of the duration
* @return this CacheBuilder instance
*/","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, or the most recent replacement of its value.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when
   * feasible), use {@link #expireAfterWrite(Duration)} instead.
   *
   * @param duration the length of time after an entry is created that it should be automatically
   *     removed
   * @param unit the unit that {@code duration} is expressed in
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterWrite} was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterAccess,"com.google.common.cache.CacheBuilder:expireAfterAccess(long,java.util.concurrent.TimeUnit)",831,841,"/**
* Sets cache expiration after access.
* @param duration time before expiration
* @param unit time unit of the duration
* @return CacheBuilder instance with updated settings
*/","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, the most recent replacement of its value, or its last
   * access. Access time is reset by all cache read and write operations (including {@code
   * Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code
   * containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}. So, for
   * example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for the
   * entries you retrieve.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when
   * feasible), use {@link #expireAfterAccess(Duration)} instead.
   *
   * @param duration the length of time after an entry is last accessed that it should be
   *     automatically removed
   * @param unit the unit that {@code duration} is expressed in
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterAccess} was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,refreshAfterWrite,"com.google.common.cache.CacheBuilder:refreshAfterWrite(long,java.util.concurrent.TimeUnit)",916,925,"/**
* Sets cache entries to expire after a fixed duration of write access.
* @param duration the length of time before expiration
* @param unit the time unit for the duration
* @return this CacheBuilder instance
*/","* Specifies that active entries are eligible for automatic refresh once a fixed duration has
   * elapsed after the entry's creation, or the most recent replacement of its value. The semantics
   * of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link
   * CacheLoader#reload}.
   *
   * <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is
   * recommended that users of this method override {@link CacheLoader#reload} with an asynchronous
   * implementation; otherwise refreshes will be performed during unrelated cache read and write
   * operations.
   *
   * <p>Currently automatic refreshes are performed when the first stale request for an entry
   * occurs. The request triggering refresh will make a synchronous call to {@link
   * CacheLoader#reload}
   * and immediately return the new value if the returned future is complete, and the old value
   * otherwise.
   *
   * <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>.
   *
   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when
   * feasible), use {@link #refreshAfterWrite(Duration)} instead.
   *
   * @param duration the length of time after an entry is created that it should be considered
   *     stale, and thus eligible for refresh
   * @param unit the unit that {@code duration} is expressed in
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #refreshAfterWrite} was already set
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,keyEquivalence,com.google.common.cache.CacheBuilder:keyEquivalence(com.google.common.base.Equivalence),366,372,"/**
* Sets the key equivalence strategy.
* @param equivalence custom key equivalence strategy
* @return CacheBuilder instance with specified key equivalence
*/","* Sets a custom {@code Equivalence} strategy for comparing keys.
   *
   * <p>By default, the cache uses {@link Equivalence#identity} to determine key equality when
   * {@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise.
   *
   * @return this {@code CacheBuilder} instance (for chaining)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,valueEquivalence,com.google.common.cache.CacheBuilder:valueEquivalence(com.google.common.base.Equivalence),387,394,"/**
 * Sets the equivalence for cache values.
 * @param equivalence Equivalence strategy for comparing values
 * @return This CacheBuilder instance
 */","* Sets a custom {@code Equivalence} strategy for comparing values.
   *
   * <p>By default, the cache uses {@link Equivalence#identity} to determine value equality when
   * {@link #weakValues} or {@link #softValues} is specified, and {@link Equivalence#equals()}
   * otherwise.
   *
   * @return this {@code CacheBuilder} instance (for chaining)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,setKeyStrength,com.google.common.cache.CacheBuilder:setKeyStrength(com.google.common.cache.LocalCache$Strength),631,636,"/**
* Sets the strength of keys in the cache.
* @param strength the desired strength for keys
* @return the CacheBuilder instance with updated settings
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,setValueStrength,com.google.common.cache.CacheBuilder:setValueStrength(com.google.common.cache.LocalCache$Strength),691,696,"/**
* Sets the value strength for caching.
* @param strength the desired strength (e.g., STRONG or WEAK)
* @return this CacheBuilder instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,keyEquivalence,com.google.common.collect.MapMaker:keyEquivalence(com.google.common.base.Equivalence),121,128,"/**
* Sets custom key equivalence.
* @param equivalence the equivalence strategy for keys
* @return this MapMaker instance
*/","* Sets a custom {@code Equivalence} strategy for comparing keys.
   *
   * <p>By default, the map uses {@link Equivalence#identity} to determine key equality when {@link
   * #weakKeys} is specified, and {@link Equivalence#equals()} otherwise. The only place this is
   * used is in {@link Interners.WeakInterner}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,setKeyStrength,com.google.common.collect.MapMaker:setKeyStrength(com.google.common.collect.MapMakerInternalMap$Strength),210,219,"/**
 * Sets the strength of keys in the map.
 * @param strength desired key strength
 * @return this MapMaker instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,setValueStrength,com.google.common.collect.MapMaker:setValueStrength(com.google.common.collect.MapMakerInternalMap$Strength),257,266,"/**
 * Sets the strength of values in the map.
 * @param strength the desired value strength
 * @return this MapMaker instance for method chaining
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,<init>,com.google.common.reflect.TypeToken:<init>(),124,134,"/**
 * Constructs a TypeToken capturing the generic type.
 * @throws IllegalArgumentException if constructed for a type variable
 */","* Constructs a new type token of {@code T}.
   *
   * <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the
   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.
   *
   * <p>For example:
   *
   * {@snippet :
   * TypeToken<List<String>> t = new TypeToken<List<String>>() {};
   * }",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,failureCause,com.google.common.util.concurrent.AbstractService$StateSnapshot:failureCause(),640,647,"/**
 * Returns the failure cause of the service.
 * @return Throwable representing the failure reason
 */",* @see Service#failureCause(),,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,doTransform,"com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:doTransform(com.google.common.util.concurrent.AsyncFunction,java.lang.Object)",222,233,"/**
* Transforms input using an asynchronous function.
* @param function the transformation function
* @param input the input data
* @return ListenableFuture of transformed output
* @throws Exception if transformation fails
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,runInterruptibly,com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask:runInterruptibly(),163,171,"/**
 * Executes the callable and checks for null future.
 * @return ListenableFuture with the result or throws exception if null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,runInterruptibly,com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:runInterruptibly(),161,168,"/**
* Executes the callable and returns its result as a ListenableFuture.
* @return ListenableFuture containing the result of the callable execution
* @throws Exception if an error occurs during execution
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkElementIndex,"com.google.common.base.Preconditions:checkElementIndex(int,int,java.lang.String)",1365,1372,"/**
* Checks if an index is within bounds.
* @param index the index to check
* @param size the size of the collection
* @param desc description of the collection for error message
* @return the index if valid
* @throws IndexOutOfBoundsException if index is out of bounds
*/","* Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size
   * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.
   *
   * @param index a user-supplied index identifying an element of an array, list or string
   * @param size the size of that array, list or string
   * @param desc the text to use to describe this index in an error message
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkPositionIndex,"com.google.common.base.Preconditions:checkPositionIndex(int,int,java.lang.String)",1414,1421,"/**
* Checks if index is within valid range.
* @param index the index to check
* @param size the size of the container
* @param desc description of the container for error message
* @return the index if valid
* @throws IndexOutOfBoundsException if index is out of bounds
*/","* Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of
   * size {@code size}. A position index may range from zero to {@code size}, inclusive.
   *
   * @param index a user-supplied index identifying a position in an array, list or string
   * @param size the size of that array, list or string
   * @param desc the text to use to describe this index in an error message
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,badPositionIndexes,"com.google.common.base.Preconditions:badPositionIndexes(int,int,int)",1452,1461,"/**
* Validates position indexes in a range.
* @param start starting index
* @param end ending index
* @param size total size of the range
* @return error message if invalid, otherwise null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,alwaysTrue,com.google.common.base.Predicates:alwaysTrue(),51,53,"/**
* Returns a predicate that always evaluates to true.
* @param <T> the type of elements to be matched
* @return a predicate that accepts any element and returns true
*/","* Returns a predicate that always evaluates to {@code true}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code x -> true}, but note that lambdas do not have
   * human-readable {@link #toString()} representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,alwaysFalse,com.google.common.base.Predicates:alwaysFalse(),61,63,"/**
* Returns a predicate that always evaluates to false.
* @param <T> the type of elements to be evaluated by this predicate
* @return a predicate that always returns false
*/","* Returns a predicate that always evaluates to {@code false}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code x -> false}, but note that lambdas do not have
   * human-readable {@link #toString()} representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,isNull,com.google.common.base.Predicates:isNull(),73,75,"/**
* Returns a predicate that checks if an object is null.
* @param <T> the type of the object to check
* @return Predicate checking for null
*/","* Returns a predicate that evaluates to {@code true} if the object reference being tested is
   * null.
   *
   * <p><b>Discouraged:</b> Prefer using either {@code x -> x == null} or {@code Objects::isNull},
   * but note that lambdas and method references do not have human-readable {@link #toString()}
   * representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,notNull,com.google.common.base.Predicates:notNull(),85,87,"/**
* Creates a predicate to check if an object is not null.
* @return Predicate that returns true if the object is not null
*/","* Returns a predicate that evaluates to {@code true} if the object reference being tested is not
   * null.
   *
   * <p><b>Discouraged:</b> Prefer using either {@code x -> x != null} or {@code Objects::nonNull},
   * but note that lambdas and method references do not have human-readable {@link #toString()}
   * representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,and,"com.google.common.base.Predicates:and(com.google.common.base.Predicate,com.google.common.base.Predicate)",134,137,"/**
* Combines two predicates with a logical AND.
* @param first the first predicate
* @param second the second predicate
* @return a compound Predicate that returns true if both input predicates return true
*/","* Returns a predicate that evaluates to {@code true} if both of its components evaluate to {@code
   * true}. The components are evaluated in order, and evaluation will be ""short-circuited"" as soon
   * as a false predicate is found.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.and(second)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,or,"com.google.common.base.Predicates:or(com.google.common.base.Predicate,com.google.common.base.Predicate)",174,177,"/**
 * Combines two predicates with a logical OR.
 * @param first the first predicate
 * @param second the second predicate
 * @return a Predicate that evaluates to true if either of the input predicates is true
 */","* Returns a predicate that evaluates to {@code true} if either of its components evaluates to
   * {@code true}. The components are evaluated in order, and evaluation will be ""short-circuited""
   * as soon as a true predicate is found.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.or(second)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/SmallCharMatcher.java,matches,com.google.common.base.SmallCharMatcher:matches(char),111,133,"/**
 * Checks if character matches filter criteria.
 * @param c character to check
 * @return true if character matches, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,<init>,com.google.common.base.Splitter:<init>(com.google.common.base.Splitter$Strategy),108,110,"/**
 * Constructs a Splitter with the given strategy.
 * @param strategy splitting strategy to use
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,omitEmptyStrings,com.google.common.base.Splitter:omitEmptyStrings(),306,308,"/**
 * Omits empty strings from split results.
 * @return a new Splitter instance configured to skip empty strings
 */","* Returns a splitter that behaves equivalently to {@code this} splitter, but automatically omits
   * empty strings from the results. For example, {@code
   * Splitter.on(',').omitEmptyStrings().split("",a,,,b,c,,"")} returns an iterable containing only
   * {@code [""a"", ""b"", ""c""]}.
   *
   * <p>If either {@code trimResults} option is also specified when creating a splitter, that
   * splitter always trims results first before checking for emptiness. So, for example, {@code
   * Splitter.on(':').omitEmptyStrings().trimResults().split("": : : "")} returns an empty iterable.
   *
   * <p>Note that it is ordinarily not possible for {@link #split(CharSequence)} to return an empty
   * iterable, but when using this option, it can (if the input sequence consists of nothing but
   * separators).
   *
   * @return a splitter with the desired configuration",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,limit,com.google.common.base.Splitter:limit(int),326,329,"/**
* Sets a maximum number of items to split.
* @param maxItems the maximum number of items allowed
* @return a new Splitter instance with the limit set
*/","* Returns a splitter that behaves equivalently to {@code this} splitter but stops splitting after
   * it reaches the limit. The limit defines the maximum number of items returned by the iterator,
   * or the maximum size of the list returned by {@link #splitToList}.
   *
   * <p>For example, {@code Splitter.on(',').limit(3).split(""a,b,c,d"")} returns an iterable
   * containing {@code [""a"", ""b"", ""c,d""]}. When omitting empty strings, the omitted strings do not
   * count. Hence, {@code Splitter.on(',').limit(3).omitEmptyStrings().split(""a,,,b,,,c,d"")} returns
   * an iterable containing {@code [""a"", ""b"", ""c,d""]}. When trim is requested, all entries are
   * trimmed, including the last. Hence {@code Splitter.on(',').limit(3).trimResults().split("" a , b
   * , c , d "")} results in {@code [""a"", ""b"", ""c , d""]}.
   *
   * @param maxItems the maximum number of items returned
   * @return a splitter with the desired configuration
   * @since 9.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,trimResults,com.google.common.base.Splitter:trimResults(com.google.common.base.CharMatcher),355,358,"/**
* Configures trimming of split results using provided matcher.
* @param trimmer CharMatcher to define characters to trim
* @return New Splitter instance with configured trimming
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,splitToList,com.google.common.base.Splitter:splitToList(java.lang.CharSequence),399,410,"/**
 * Splits a CharSequence into a list of strings.
 * @param sequence the input sequence to split
 * @return an unmodifiable list of split strings
 */","* Splits {@code sequence} into string components and returns them as an immutable list. If you
   * want an {@link Iterable} which may be lazily evaluated, use {@link #split(CharSequence)}.
   *
   * @param sequence the sequence of characters to split
   * @return an immutable list of the segments split from the parameter
   * @since 15.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,createTempDir,com.google.common.io.TempFileCreator$JavaIoCreator:createTempDir(),259,280,"/**
* Creates a temporary directory.
* @return File object representing the created directory
* @throws IllegalStateException if creation fails after multiple attempts
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,createTempDir,com.google.common.io.TempFileCreator$JavaNioCreator:createTempDir(),121,130,"/**
* Creates a temporary directory.
* @return File object representing the created directory
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,createTempFile,com.google.common.io.TempFileCreator$JavaNioCreator:createTempFile(java.lang.String),132,140,"/**
* Creates a temporary file in the system's temp directory.
* @param prefix prefix for the temp file name
* @return File object representing the created temp file
* @throws IOException if an I/O error occurs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/StandardSystemProperty.java,toString,com.google.common.base.StandardSystemProperty:toString(),160,163,"/**
 * Returns string representation of key-value pair.
 * @return formatted string ""key=value""
 */",Returns a string representation of this system property.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,<init>,com.google.common.base.Stopwatch:<init>(),141,143,"/**
 * Initializes a Stopwatch with system ticker.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getTicker,com.google.common.cache.CacheBuilder:getTicker(boolean),949,954,"/**
 * Returns the current ticker instance.
 * @param recordsTime true to use system ticker, false for null ticker
 * @return Ticker object based on recordsTime flag
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,elapsed,com.google.common.base.Stopwatch:elapsed(java.util.concurrent.TimeUnit),216,218,"/**
 * Converts elapsed time to specified unit.
 * @param desiredUnit target time unit for conversion
 * @return elapsed time in the desired unit
 */","* Returns the current elapsed time shown on this stopwatch, expressed in the desired time unit,
   * with any fraction rounded down.
   *
   * <p><b>Note:</b> the overhead of measurement can be more than a microsecond, so it is generally
   * not useful to specify {@link TimeUnit#NANOSECONDS} precision here.
   *
   * <p>It is generally not a good idea to use an ambiguous, unitless {@code long} to represent
   * elapsed time. Therefore, we recommend using {@link #elapsed()} instead, which returns a
   * strongly-typed {@code Duration} instance.
   *
   * @since 14.0 (since 10.0 as {@code elapsedTime()})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,elapsed,com.google.common.base.Stopwatch:elapsed(),226,231,"/**
* Calculates elapsed time.
* @return Duration representing elapsed time in nanoseconds
*/","* Returns the current elapsed time shown on this stopwatch as a {@link Duration}. Unlike {@link
   * #elapsed(TimeUnit)}, this method does not lose any precision due to rounding.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,toString,com.google.common.base.Stopwatch:toString(),234,243,"/**
* Returns a string representation of the elapsed time.
* @return formatted string showing elapsed time in appropriate units
*/",Returns a string representation of the current elapsed time.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,nullToEmpty,com.google.common.base.Strings:nullToEmpty(java.lang.String),45,47,"/**
 * Converts null to an empty string.
 * @param string input string which may be null
 * @return empty string if input is null, otherwise original string
 */","* Returns the given string if it is non-null; the empty string otherwise.
   *
   * @param string the string to test and possibly return
   * @return {@code string} itself if it is non-null; {@code """"} if it is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,commonPrefix,"com.google.common.base.Strings:commonPrefix(java.lang.CharSequence,java.lang.CharSequence)",183,196,"/**
* Finds the longest common prefix between two CharSequences.
* @param a first CharSequence
* @param b second CharSequence
* @return the longest common prefix as String
*/","* Returns the longest string {@code prefix} such that {@code a.toString().startsWith(prefix) &&
   * b.toString().startsWith(prefix)}, taking care not to split surrogate pairs. If {@code a} and
   * {@code b} have no common prefix, returns the empty string.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,commonSuffix,"com.google.common.base.Strings:commonSuffix(java.lang.CharSequence,java.lang.CharSequence)",205,219,"/**
* Finds the common suffix between two CharSequences.
* @param a first CharSequence
* @param b second CharSequence
* @return String representing the common suffix or empty string if none
*/","* Returns the longest string {@code suffix} such that {@code a.toString().endsWith(suffix) &&
   * b.toString().endsWith(suffix)}, taking care not to split surrogate pairs. If {@code a} and
   * {@code b} have no common suffix, returns the empty string.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,ofInstance,com.google.common.base.Suppliers:ofInstance(java.lang.Object),354,357,"/**
 * Creates a Supplier that returns the provided instance.
 * @param instance the object to supply
 * @return Supplier providing the given instance
 */","* Returns a supplier that always supplies {@code instance}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code () -> instance}, but note that lambdas do not have
   * human-readable {@link #toString()} representations and are not serializable. If you need a
   * supplier that is serializable, use {@code (Supplier<T> & Serializable) () -> instance}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ticker.java,<init>,com.google.common.base.Ticker$1:<init>(),33,33,"/**
 * Constructs a new Ticker instance.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,<init>,com.google.common.cache.CacheBuilder$3:<init>(),311,311,"/**
 * Private constructor to prevent instantiation of CacheBuilder.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,encodedLengthGeneral,"com.google.common.base.Utf8:encodedLengthGeneral(java.lang.CharSequence,int)",78,98,"/**
* Calculates UTF-8 length of CharSequence starting from index.
* @param sequence input character sequence
* @param start starting index
* @return UTF-8 encoded length
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,com.google.common.base.Verify:verify(boolean),98,102,"/**
 * Throws VerifyException if the given expression is false.
 * @param expression condition to verify as true
 */","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with no
   * message otherwise.
   *
   * @throws VerifyException if {@code expression} is {@code false}
   * @see Preconditions#checkState Preconditions.checkState()",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char)",136,140,"/**
* Verifies boolean expression; throws exception with formatted message if false.
* @param expression condition to check
* @param errorMessageTemplate template for error message
* @param p1 parameter for message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int)",150,154,"/**
* Throws VerifyException if expression is false.
* @param expression condition to check
* @param errorMessageTemplate error message template
* @param p1 parameter for error message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long)",164,168,"/**
 * Throws VerifyException if expression is false.
 * @param expression boolean condition to check
 * @param errorMessageTemplate error message template with one placeholder
 * @param p1 parameter for the error message template
 */","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object)",119,126,"/**
* Throws VerifyException if the given expression is false.
* @param expression condition to verify
* @param errorMessageTemplate error message template
* @param errorMessageArgs arguments for the error message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * @param expression a boolean expression
   * @param errorMessageTemplate a template for the exception message should the check fail. The
   *     message is formed by replacing each {@code %s} placeholder in the template with an
   *     argument. These are matched by position - the first {@code %s} gets {@code
   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in
   *     square braces. Unmatched placeholders will be left as-is.
   * @param errorMessageArgs the arguments to be substituted into the message template. Arguments
   *     are converted to strings using {@link String#valueOf(Object)}.
   * @throws VerifyException if {@code expression} is {@code false}
   * @see Preconditions#checkState Preconditions.checkState()",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,char)",192,196,"/**
* Verifies a boolean condition; throws an exception with formatted message if false.
* @param expression the condition to check
* @param errorMessageTemplate template for error message
* @param p1 first character parameter for message
* @param p2 second character parameter for message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,char)",206,210,"/**
 * Verifies a boolean condition; throws exception with formatted message if false.
 * @param expression the condition to check
 * @param errorMessageTemplate template for error message
 * @param p1 first parameter for message formatting
 * @param p2 second parameter for message formatting
 */","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,char)",220,224,"/**
* Throws a VerifyException if the expression is false.
* @param expression condition to verify
* @param errorMessageTemplate error message format string
* @param p1 first parameter for error message
* @param p2 second parameter for error message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,char)",234,239,"/**
* Throws VerifyException if expression is false.
* @param expression condition to verify
* @param errorMessageTemplate error message template with placeholders
* @param p1 first placeholder value
* @param p2 second placeholder value
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,int)",249,253,"/**
* Throws a VerifyException with formatted message if expression is false.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for error message
* @param p1 character parameter for message formatting
* @param p2 integer parameter for message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,int)",263,267,"/**
* Throws VerifyException with formatted message if expression is false.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for error message
* @param p1 first parameter for message formatting
* @param p2 second parameter for message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,int)",277,281,"/**
* Throws a VerifyException if the expression is false.
* @param expression condition to verify
* @param errorMessageTemplate template for error message
* @param p1 first parameter for message formatting
* @param p2 second parameter for message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,int)",291,296,"/**
* Throws VerifyException if expression is false.
* @param expression condition to verify
* @param errorMessageTemplate error message template
* @param p1 first parameter for message formatting
* @param p2 second parameter for message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,long)",306,310,"/**
* Throws VerifyException if expression is false.
* @param expression condition to check
* @param errorMessageTemplate template for error message
* @param p1 first placeholder for error message
* @param p2 second placeholder for error message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,long)",320,324,"/**
* Throws VerifyException if expression is false.
* @param expression condition to verify
* @param errorMessageTemplate template for error message
* @param p1 first parameter for message formatting
* @param p2 second parameter for message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,long)",334,338,"/**
* Throws an exception if the given expression is false.
* @param expression condition to verify as true
* @param errorMessageTemplate error message template with placeholders for parameters
* @param p1 first parameter for the error message
* @param p2 second parameter for the error message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,long)",348,353,"/**
* Throws VerifyException if expression is false.
* @param expression condition to verify
* @param errorMessageTemplate error message template
* @param p1 first parameter for the message
* @param p2 second parameter for the message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,java.lang.Object)",363,368,"/**
 * Throws a VerifyException if the given expression is false.
 * @param expression boolean condition to verify
 * @param errorMessageTemplate template for error message with placeholders
 * @param p1 first placeholder character in the error message
 * @param p2 second placeholder object in the error message, can be null
 */","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,java.lang.Object)",378,383,"/**
* Throws VerifyException if expression is false.
* @param expression condition to verify
* @param errorMessageTemplate error message template with placeholders
* @param p1 first parameter for the error message
* @param p2 second parameter for the error message (nullable)
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,java.lang.Object)",393,398,"/**
* Throws VerifyException if expression is false.
* @param expression condition to verify
* @param errorMessageTemplate error message template
* @param p1 first parameter for the error message
* @param p2 second parameter for the error message (nullable)
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object)",408,413,"/**
 * Throws an exception if the given expression is false.
 * @param expression condition to verify
 * @param errorMessageTemplate template for error message with placeholders
 * @param p1 first placeholder value
 * @param p2 second placeholder value
 */","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)",423,432,"/**
* Throws VerifyException if expression is false.
* @param expression condition to verify
* @param errorMessageTemplate error message template
* @param p1,p2,p3 parameters for the error message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",442,452,"/**
 * Throws an exception if the expression is false.
 * @param expression condition to verify
 * @param errorMessageTemplate template for error message
 * @param p1 parameter for error message
 * @param p2 parameter for error message
 * @param p3 parameter for error message
 * @param p4 parameter for error message
 */","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,cleanUp,com.google.common.base.internal.Finalizer:cleanUp(java.lang.ref.Reference),160,183,"/**
 * Cleans up references by invoking their finalization method.
 * @param firstReference the initial reference to clean up
 * @return true if cleanup is successful, false otherwise
 */","* Cleans up the given reference and any other references already in the queue. Catches and logs
   * all throwables.
   *
   * @return true if the caller should continue to wait for more references to be added to the
   *     queue, false if the associated FinalizableReferenceQueue is no longer referenced.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,<init>,com.google.common.cache.AbstractCache$SimpleStatsCounter:<init>(),218,218,"/**
 * Constructs a new instance of SimpleStatsCounter.
 */",Constructs an instance with all counts initialized to zero.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,incrementBy,com.google.common.cache.AbstractCache$SimpleStatsCounter:incrementBy(com.google.common.cache.AbstractCache$StatsCounter),272,280,"/**
 * Adds statistics from another StatsCounter instance.
 * @param other the StatsCounter to add statistics from
 */",Increments all counters by the values in {@code other}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,<init>,com.google.common.cache.AbstractLoadingCache:<init>(),46,46,"/**
 * Constructs an instance of AbstractLoadingCache.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,preservesInsertionOrderOnPutsMap,com.google.common.collect.Platform:preservesInsertionOrderOnPutsMap(),73,76,"/**
* Creates a map that maintains insertion order.
* @return LinkedHashMap with preserved insertion order
*/","* Returns the platform preferred map implementation that preserves insertion order when used only
   * for insertions.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,putAll,com.google.common.cache.AbstractCache:putAll(java.util.Map),94,99,"/**
 * Adds all entries from the specified map.
 * @param m map whose entries are to be added
 */",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,invalidateAll,com.google.common.cache.AbstractCache:invalidateAll(java.lang.Iterable),117,123,"/**
* Invalidates all entries in the cache by their keys.
* @param keys iterable collection of keys to invalidate
*/",* @since 11.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,getUnchecked,com.google.common.cache.AbstractLoadingCache:getUnchecked(java.lang.Object),48,56,"/**
* Retrieves value for a given key without checked exceptions.
* @param key the key to look up
* @return the value associated with the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,newBuilder,com.google.common.cache.CacheBuilder:newBuilder(),320,322,"/**
 * Creates a new CacheBuilder instance.
 * @return CacheBuilder object configured with default settings
 */","* Constructs a new {@code CacheBuilder} instance with default settings, including strong keys,
   * strong values, and no automatic eviction of any kind.
   *
   * <p>Note that while this return type is {@code CacheBuilder<Object, Object>}, type parameters on
   * the {@link #build} methods allow you to create a cache of any key and value type desired.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,hashCode,com.google.common.cache.CacheBuilderSpec:hashCode(),241,254,"/**
* Generates hash code based on configuration parameters.
* @return int hash value for the CacheSpec instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,equals,com.google.common.cache.CacheBuilderSpec:equals(java.lang.Object),256,281,"/**
 * Checks equality of CacheBuilderSpec instances.
 * @param obj the object to compare with
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,<init>,com.google.common.cache.CacheLoader$FunctionToCacheLoader:<init>(com.google.common.base.Function),163,165,"/**
* Initializes a cache loader with a computing function.
* @param computingFunction the function to compute values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,<init>,com.google.common.cache.CacheLoader$SupplierToCacheLoader:<init>(com.google.common.base.Supplier),214,216,"/**
* Initializes with a supplier for computing values.
* @param computingSupplier function to compute values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,loadAll,com.google.common.cache.CacheLoader:loadAll(java.lang.Iterable),125,129,"/**
* Throws an exception indicating the operation is unsupported.
* @param keys iterable of keys to load
* @throws Exception always thrown due to unsupported operation
*/","* Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link
   * LoadingCache#getAll}.
   *
   * <p>If the returned map doesn't contain all requested {@code keys} then the entries it does
   * contain will be cached, but {@code getAll} will throw an exception. If the returned map
   * contains extra keys not present in {@code keys} then all returned entries will be cached, but
   * only the entries for {@code keys} will be returned from {@code getAll}.
   *
   * <p>This method should be overridden when bulk retrieval is significantly more efficient than
   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls
   * to {@link LoadingCache#get} if this method is not overridden.
   *
   * @param keys the unique, non-null keys whose values should be loaded
   * @return a map from each key in {@code keys} to the value associated with that key; <b>may not
   *     contain null values</b>
   * @throws Exception if unable to load the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,requestCount,com.google.common.cache.CacheStats:requestCount(),109,111,"/**
 * Returns the total count of requests.
 * @return sum of hit and miss counts
 */","* Returns the number of times {@link Cache} lookup methods have returned either a cached or
   * uncached value. This is defined as {@code hitCount + missCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,loadCount,com.google.common.cache.CacheStats:loadCount(),161,163,"/**
 * Returns the total count of loads by summing success and exception counts.
 * @return Total load count
 */","* Returns the total number of times that {@link Cache} lookup methods attempted to load new
   * values. This includes both successful load operations and those that threw exceptions. This is
   * defined as {@code loadSuccessCount + loadExceptionCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,loadExceptionRate,com.google.common.cache.CacheStats:loadExceptionRate(),202,205,"/**
* Calculates the exception rate during loading.
* @return Exception rate as a percentage or 0.0 if no loads occurred
*/","* Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code
   * loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when {@code
   * loadSuccessCount + loadExceptionCount == 0}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,averageLoadPenalty,com.google.common.cache.CacheStats:averageLoadPenalty(),225,228,"/**
* Calculates the average load penalty.
* @return average load time or 0 if no loads occurred
*/","* Returns the average time spent loading new values. This is defined as {@code totalLoadTime /
   * (loadSuccessCount + loadExceptionCount)}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,<init>,com.google.common.cache.ForwardingCache:<init>(),39,39,"/**
 * Initializes a new instance of ForwardingCache.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,<init>,com.google.common.collect.ForwardingCollection:<init>(),54,54,"/**
 * Constructs a new instance of ForwardingCollection.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingIterator.java,<init>,com.google.common.collect.ForwardingIterator:<init>(),44,44,"/**
 * Constructs a new ForwardingIterator instance.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,<init>,com.google.common.collect.ForwardingMap:<init>(),62,62,/** Initializes an empty ForwardingMap. */,Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,<init>,com.google.common.collect.ForwardingMapEntry:<init>(),55,55,"```java
/**
 * Constructs a new ForwardingMapEntry instance.
 */
```",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,<init>,com.google.common.collect.ForwardingMultimap:<init>(),44,44,"```java
/**
 * Constructs a new empty ForwardingMultimap.
 */
```",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingTable.java,<init>,com.google.common.collect.ForwardingTable:<init>(),39,39,"/**
 * Initializes a new instance of ForwardingTable.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingExecutorService.java,<init>,com.google.common.util.concurrent.ForwardingExecutorService:<init>(),49,49,"/**
 * Constructs a new ForwardingExecutorService.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,<init>,com.google.common.util.concurrent.ForwardingFuture:<init>(),41,41,"/**
 * Constructs a new ForwardingFuture instance.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,delegate,com.google.common.cache.ForwardingLoadingCache:delegate(),41,42,"/**
 * Provides the delegate cache instance.
 * @return LoadingCache implementation to be used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,createEntrySet,com.google.common.collect.ImmutableMultiset:createEntrySet(),365,367,"/**
 * Creates an immutable set of entries.
 * @return ImmutableSet containing entries or empty if none exist
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:build(),675,678,"/**
 * Builds an empty immutable set.
 * @return An empty ImmutableSet instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,createEntrySet,com.google.common.collect.ImmutableSortedMap:createEntrySet(),808,872,"/**
* Creates an immutable entry set for the sorted map.
* @return ImmutableSet of entries or empty set if map is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,createCellSet,com.google.common.collect.RegularImmutableTable:createCellSet(),42,45,"/**
* Creates an immutable set of cells.
* @return ImmutableSet of cells or empty set if this is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getSubscribersForTesting,com.google.common.eventbus.SubscriberRegistry:getSubscribersForTesting(java.lang.Class),116,119,"/**
* Retrieves subscribers for testing.
* @param eventType event type class
* @return set of subscribers or empty immutable set if none found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getInterfaces,com.google.common.reflect.TypeToken$TypeCollector$3:getInterfaces(java.lang.Object),1431,1431,"/**
 * Retrieves interfaces implemented by a given type.
 * @param type the type to inspect
 * @return an iterable of interfaces implemented by the type
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isEmpty,com.google.common.cache.LocalCache$AbstractCacheSet:isEmpty(),4543,4546,"/**
 * Checks if the cache is empty.
 * @return true if the cache contains no elements, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isEmpty,com.google.common.cache.LocalCache$Values:isEmpty(),4595,4598,"/**
 * Checks if the local cache is empty.
 * @return true if the cache has no elements, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,offer,com.google.common.cache.LocalCache$AccessQueue:offer(com.google.common.cache.ReferenceEntry),3830,3840,"/**
* Adds an entry to the access order queue.
* @param entry the entry to be added
* @return always true
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,iterator,com.google.common.cache.LocalCache$AccessQueue:iterator(),3908,3917,"/**
* Returns an iterator over the access-ordered entries.
* @return Iterator of ReferenceEntry objects in access order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainRecencyQueue,com.google.common.cache.LocalCache$Segment:drainRecencyQueue(),2578,2590,"/**
 * Drains and processes entries from the recency queue.
 * Moves entries to the access queue if still present.
 */","* Drains the recency queue, updating eviction metadata that the entries therein were read in
     * the specified relative order. This currently amounts to adding them to relevant eviction
     * lists (accounting for the fact that they could have been removed from the map since being
     * added to the recency queue).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$2:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Copies a map entry to a new segment.
* @param segment target segment for the copied entry
* @param original original entry to copy
* @param newNext next entry in the new chain
* @param key key of the entry
* @return new ReferenceEntry instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$3:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Copies an entry with a new next reference.
* @param segment the segment to use for copying
* @param original the original entry to copy
* @param newNext the new next reference for the copied entry
* @param key the key of the new entry
* @return the newly created ReferenceEntry object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$4:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
 * Creates a copy of the given entry with a new next reference.
 * @param segment the segment to which the entry belongs
 * @param original the original entry to copy
 * @param newNext the new next entry in the chain
 * @param key the key for the new entry
 * @return a new ReferenceEntry object
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$6:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Copies a reference entry.
* @param segment the segment to associate with the new entry
* @param original the original entry to copy
* @param newNext the next entry in the chain
* @param key the key for the new entry
* @return a new ReferenceEntry instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$7:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Copies a reference entry with a new next pointer.
* @param segment the segment to associate with the new entry
* @param original the original entry to copy
* @param newNext the new next entry in the chain
* @param key the key for the new entry
* @return a new ReferenceEntry object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$8:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Creates a copy of a reference entry.
* @param segment the segment to associate with the new entry
* @param original the original entry to copy
* @param newNext the next entry in the chain
* @param key the key for the new entry
* @return a new ReferenceEntry object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$Segment:copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",2008,2027,"/**
* Copies a reference entry with a new next pointer.
* @param original the original reference entry to copy
* @param newNext the new next entry in the chain
* @return copied ReferenceEntry or null if key or value is collected
*/","* Copies {@code original} into a new entry chained to {@code newNext}. Returns the new entry,
     * or {@code null} if {@code original} was already garbage collected.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,offer,com.google.common.cache.LocalCache$WriteQueue:offer(com.google.common.cache.ReferenceEntry),3690,3700,"/**
 * Adds an entry to the write queue.
 * @param entry the entry to be added
 * @return always true
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,satisfies,"com.google.common.collect.FilteredEntryMultimap:satisfies(java.lang.Object,java.lang.Object)",75,77,"/**
 * Checks if the given key-value pair satisfies the predicate.
 * @param key the key to check
 * @param value the value associated with the key
 * @return true if the key-value pair satisfies the predicate, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,get,com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries:get(int),88,92,"/**
 * Retrieves an entry by index.
 * @param index position of the entry in the list
 * @return Entry with value and key swapped
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,apply,"com.google.common.collect.Maps$AbstractFilteredMap:apply(java.lang.Object,java.lang.Object)",2855,2861,"/**
* Applies predicate to immutable entry of key and value.
* @param key the key object
* @param value the value object
* @return true if predicate condition is met, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,containsEntry,"com.google.common.collect.Multimaps$MapMultimap:containsEntry(java.lang.Object,java.lang.Object)",1162,1165,"/**
 * Checks if the map contains an entry with the specified key and value.
 * @param key   the key to check for in the map
 * @param value the value associated with the key to check for in the map
 * @return true if the map contains the entry, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,"com.google.common.collect.Multimaps$MapMultimap:remove(java.lang.Object,java.lang.Object)",1230,1233,"/**
* Removes entry with specified key and value from map.
* @param key key of the entry to remove
* @param value value of the entry to remove
* @return true if removed successfully, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeFromColumnIf,com.google.common.collect.StandardTable$Column:removeFromColumnIf(com.google.common.base.Predicate),487,504,"/**
* Removes entries from the column based on a predicate.
* @param predicate condition to test each entry
* @return true if any entries were removed, false otherwise
*/",Removes all {@code Column} mappings whose row key and value satisfy the given predicate.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,next,com.google.common.cache.LocalCache$KeyIterator:next(),4463,4466,"/**
 * Returns the next key in the iteration.
 * @return the next key or throws NoSuchElementException if no more keys are available
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",972,976,"/**
* Initializes a new StrongEntry with key, hash, and next reference.
* @param key the entry's key
* @param hash the hash code of the key
* @param next reference to the next entry in the chain or null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1190,1194,"/**
 * Creates a weak entry with a reference queue.
 * @param queue the reference queue to register with
 * @param key the key for this entry
 * @param hash the hash code of the key
 * @param next the next entry in the chain
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,set,com.google.common.cache.LocalCache$LoadingValueReference:set(java.lang.Object),3519,3522,"/**
 * Sets the new value of the future.
 * @param newValue the new value to be set
 * @return true if the value was set, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,setException,com.google.common.cache.LocalCache$LoadingValueReference:setException(java.lang.Throwable),3524,3527,"/**
 * Sets an exception for the future value.
 * @param t Throwable to be set as the exception
 * @return true if successful, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,init,com.google.common.util.concurrent.AggregateFuture:init(),113,180,"/**
 * Initializes the futures list and sets up listeners for completion.
 * @param futures List of ListenableFuture objects to manage
 */","* Must be called at the end of each subclass's constructor. This method performs the ""real""
   * initialization; we can't put this in the constructor because, in the case where futures are
   * already complete, we would not initialize the subclass before calling {@link
   * #collectValueFromNonCancelledFuture}. As this is called after the subclass is constructed,
   * we're guaranteed to have properly initialized the subclass.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,closeQuietly,"com.google.common.util.concurrent.ClosingFuture:closeQuietly(java.lang.AutoCloseable,java.util.concurrent.Executor)",2128,2161,"/**
 * Closes an AutoCloseable resource asynchronously.
 * @param closeable the resource to close
 * @param executor the executor to use for closing
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,rejectionPropagatingExecutor,"com.google.common.util.concurrent.MoreExecutors:rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)",1026,1040,"/**
 * Creates an executor that propagates RejectedExecutionException to a future.
 * @param delegate the underlying executor
 * @param future the future to propagate exceptions to
 * @return an executor with rejection propagation
 */","* Returns an Executor that will propagate {@link RejectedExecutionException} from the delegate
   * executor to the given {@code future}.
   *
   * <p>Note, the returned executor can only be used once.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,waitForValue,com.google.common.cache.LocalCache$LoadingValueReference:waitForValue(),3601,3604,"/**
 * Waits and retrieves the value from a future.
 * @return the result of the computation
 * @throws ExecutionException if an error occurred during computation
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getDone,com.google.common.util.concurrent.Futures:getDone(java.util.concurrent.Future),1160,1176,"/**
* Retrieves result from a completed Future.
* @param future the Future object to retrieve the result from
* @return the result of the Future
* @throws ExecutionException if an exception occurred during computation
* @throws IllegalStateException if the Future is not done
*/","* Returns the result of the input {@code Future}, which must have already completed.
   *
   * <p>The benefits of this method are twofold. First, the name ""getDone"" suggests to readers that
   * the {@code Future} is already done. Second, if buggy code calls {@code getDone} on a {@code
   * Future} that is still pending, the program will throw instead of block. This can be important
   * for APIs like {@link #whenAllComplete whenAllComplete(...)}{@code .}{@link
   * FutureCombiner#call(Callable, Executor) call(...)}, where it is easy to use a new input from
   * the {@code call} implementation but forget to add it to the arguments of {@code
   * whenAllComplete}.
   *
   * <p>If you are looking for a method to determine whether a given {@code Future} is done, use the
   * instance method {@link Future#isDone()}.
   *
   * @throws ExecutionException if the {@code Future} failed with an exception
   * @throws CancellationException if the {@code Future} was cancelled
   * @throws IllegalStateException if the {@code Future} is not done
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getUnchecked,com.google.common.util.concurrent.Futures:getUnchecked(java.util.concurrent.Future),1368,1385,"/**
* Retrieves result from Future without interruption.
* @param future the Future object to retrieve from
* @return result of the Future or throws exception if failed
*/","* Returns the result of calling {@link Future#get()} uninterruptibly on a task known not to throw
   * a checked exception. This makes {@code Future} more suitable for lightweight, fast-running
   * tasks that, barring bugs in the code, will not fail. This gives it exception-handling behavior
   * similar to that of {@code ForkJoinTask.join}.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@link
   *       UncheckedExecutionException} (if the cause is an {@code Exception}) or {@link
   *       ExecutionError} (if the cause is an {@code Error}).
   *   <li>Any {@link InterruptedException} causes a retry of the {@code get} call. The interrupt is
   *       restored before {@code getUnchecked} returns.
   *   <li>Any {@link CancellationException} is propagated untouched. So is any other {@link
   *       RuntimeException} ({@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to eliminate all checked exceptions: to loop to avoid {@code
   * InterruptedException}, to pass through {@code CancellationException}, and to wrap any exception
   * from the underlying computation in an {@code UncheckedExecutionException} or {@code
   * ExecutionError}.
   *
   * <p>For an uninterruptible {@code get} that preserves other exceptions, see {@link
   * Uninterruptibles#getUninterruptibly(Future)}.
   *
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with an
   *     {@code Exception} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache$LocalManualCache:size(),4897,4900,"/**
 * Returns the number of entries in the local cache.
 * @return size of the local cache as a long
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,initTable,com.google.common.cache.LocalCache$Segment:initTable(java.util.concurrent.atomic.AtomicReferenceArray),1990,1997,"/**
* Initializes the table with a new reference array.
* @param newTable the new table to initialize
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,runWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",81,93,"/**
* Executes a task with a specified timeout.
* @param runnable the task to execute
* @param timeoutDuration the duration of the timeout
* @param timeoutUnit the time unit for the timeout
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,wrapAndThrowExecutionExceptionOrError,com.google.common.util.concurrent.SimpleTimeLimiter:wrapAndThrowExecutionExceptionOrError(java.lang.Throwable),261,269,"/**
* Wraps and throws an appropriate exception based on the cause.
* @param cause the original Throwable to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,wrapAndThrowRuntimeExecutionExceptionOrError,com.google.common.util.concurrent.SimpleTimeLimiter:wrapAndThrowRuntimeExecutionExceptionOrError(java.lang.Throwable),271,277,"/**
 * Wraps and throws a runtime exception or error based on the cause.
 * @param cause the underlying Throwable to be wrapped
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clearReferenceQueues,com.google.common.cache.LocalCache$Segment:clearReferenceQueues(),2504,2511,"/**
* Clears reference queues for keys and values if used by the map.
*/",Clears all entries from the key and value reference queues.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,iterator,com.google.common.cache.LocalCache$WriteQueue:iterator(),3768,3777,"/**
* Returns an iterator over the entries in write order.
* @return Iterator of ReferenceEntry objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,runUnlockedCleanup,com.google.common.cache.LocalCache$Segment:runUnlockedCleanup(),3481,3486,"/**
* Processes pending notifications if lock is not held by current thread.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$SoftValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1542,1546,"/**
* Creates a soft reference for the given value.
* @param queue queue to register with the reference
* @param value the value to reference
* @param entry associated reference entry
* @return a new SoftValueReference instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeightedSoftValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int)",1638,1642,"/**
* Initializes a weighted soft reference.
* @param queue the reference queue to enqueue upon garbage collection
* @param referent the object the reference refers to
* @param entry associated reference entry
* @param weight weight assigned to the reference
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeightedStrongValueReference:<init>(java.lang.Object,int)",1660,1663,"/**
 * Constructs a weighted reference to an object.
 * @param referent the object being referenced
 * @param weight the weight associated with the reference
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,defaultEquivalence,com.google.common.cache.LocalCache$Strength$1:defaultEquivalence(),444,444,"/**
 * Provides a default equivalence strategy.
 * @return Equivalence instance for comparing objects
 */","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,defaultEquivalence,com.google.common.collect.MapMakerInternalMap$Strength$1:defaultEquivalence(),272,272,"/**
 * Provides a default equivalence strategy for objects.
 * @return Equivalence instance used to compare objects
 */","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,defaultEquivalence,com.google.common.cache.LocalCache$Strength$2:defaultEquivalence(),444,444,"/**
 * Provides a default equivalence strategy for objects.
 * @return Equivalence instance defining equality checks
 */","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,defaultEquivalence,com.google.common.cache.LocalCache$Strength$3:defaultEquivalence(),444,444,"/**
 * Provides a default equivalence strategy for objects.
 * @return Equivalence instance defining equality checks
 */","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,defaultEquivalence,com.google.common.collect.MapMakerInternalMap$Strength$2:defaultEquivalence(),272,272,"/**
 * Provides a default equivalence strategy for objects.
 * @return Equivalence instance defining equality rules
 */","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$WeakValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1498,1502,"/**
* Creates a weak reference for a value.
* @param queue the reference queue to enqueue upon garbage collection
* @param value the value to reference
* @param entry associated reference entry
* @return a new WeakValueReference instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeightedWeakValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int)",1616,1620,"/**
* Creates a weighted weak reference.
* @param queue reference queue for enqueuing discarded references
* @param referent the object the new reference refers to
* @param entry associated reference entry
* @param weight weight of the reference
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nullifyAccessOrder,com.google.common.cache.LocalCache:nullifyAccessOrder(com.google.common.cache.ReferenceEntry),1811,1815,"/**
* Removes a node from the access order queue.
* @param nulled node to be removed from the queue
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nullifyWriteOrder,com.google.common.cache.LocalCache:nullifyWriteOrder(com.google.common.cache.ReferenceEntry),1824,1828,"/**
 * Resets write order for a given entry.
 * @param nulled the entry to reset
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,waitForValue,com.google.common.cache.LocalCache$StrongValueReference:waitForValue(),1603,1606,"/**
 * Waits for and returns the value.
 * @return the value associated with this future
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,next,com.google.common.cache.LocalCache$ValueIterator:next(),4471,4474,"/**
 * Returns the value of the next entry in the iteration.
 * @return the value of the next entry
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,toString,com.google.common.cache.LocalCache$WriteThroughEntry:toString(),4523,4526,"/**
 * Returns string representation of key-value pair.
 * @return ""key=value"" formatted string
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesWriteQueue,com.google.common.cache.LocalCache:usesWriteQueue(),352,354,"/**
 * Checks if write expiration is used.
 * @return true if writes expire after a certain time, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordsWrite,com.google.common.cache.LocalCache:recordsWrite(),356,358,"/**
 * Checks if records should be written based on expiration or refresh conditions.
 * @return true if records need writing; false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,expires,com.google.common.cache.LocalCache:expires(),332,334,"/**
 * Checks if an entry should expire.
 * @return true if entry expires after write or access, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesAccessQueue,com.google.common.cache.LocalCache:usesAccessQueue(),348,350,"/**
 * Checks if access queue is used.
 * @return true if either expiration after access or size-based eviction is enabled
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordsAccess,com.google.common.cache.LocalCache:recordsAccess(),360,362,"/**
 * Determines if records expire after access.
 * @return true if records expire after being accessed, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isExpired,"com.google.common.cache.LocalCache:isExpired(com.google.common.cache.ReferenceEntry,long)",1791,1800,"/**
* Checks if a cache entry is expired.
* @param entry the cache entry to check
* @param now current time in nanoseconds
* @return true if entry is expired, false otherwise
*/",Returns true if the entry has expired.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newValueReference,"com.google.common.cache.LocalCache:newValueReference(com.google.common.cache.ReferenceEntry,java.lang.Object,int)",1720,1724,"/**
* Creates a new value reference.
* @param entry the reference entry
* @param value the value to be referenced
* @param weight the weight of the reference
* @return ValueReference object associated with the entry and value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,hash,com.google.common.cache.LocalCache:hash(java.lang.Object),1726,1729,"/**
 * Computes hash code for given key.
 * @param key the object to hash (can be null)
 * @return hashed value as an integer
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache:size(),3969,3972,"/**
 * Returns the size of the collection as an integer.
 * @return size of the collection, saturated to Integer.MAX_VALUE if necessary
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,size,com.google.common.collect.AbstractMapBasedMultiset:size(),185,188,"/**
 * Returns the size of the collection.
 * @return size as an integer, saturated if necessary
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,size,com.google.common.collect.ConcurrentHashMultiset:size(),154,161,"/**
* Returns the total count of all elements in the map.
* @return Total count as an int, saturated if overflow occurs
*/","* {@inheritDoc}
   *
   * <p>If the data in the multiset is modified by any other threads during this method, it is
   * undefined which (if any) of these modifications will be reflected in the result.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,size,com.google.common.collect.EnumMultiset:size(),125,128,"/**
 * Returns the size of the collection.
 * @return The number of elements in the collection as an int
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,size,com.google.common.collect.Iterators:size(java.util.Iterator),170,177,"/**
* Counts the number of elements in an iterator.
* @param iterator the iterator to count elements from
* @return the size of the iterator as an int
*/","* Returns the number of elements remaining in {@code iterator}. The iterator will be left
   * exhausted: its {@code hasNext()} method will return {@code false}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,size,com.google.common.collect.JdkBackedImmutableMultiset:size(),89,92,"/**
 * Returns the size of the collection.
 * @return The size as an integer, saturated to avoid overflow
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap:size(),2345,2353,"/**
* Returns the total number of entries in all segments.
* @return Total count of entries as an int
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,linearTimeSizeImpl,com.google.common.collect.Multisets:linearTimeSizeImpl(com.google.common.collect.Multiset),1136,1142,"/**
* Calculates the total size of a multiset in linear time.
* @param multiset the input multiset
* @return the total count of all elements in the multiset
*/",An implementation of {@link Multiset#size}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,size,com.google.common.collect.RegularImmutableSortedMultiset:size(),95,99,"/**
* Returns the number of elements in the range.
* @return size as an integer, saturated if overflow
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedAdd,"com.google.common.math.IntMath:saturatedAdd(int,int)",540,542,"/**
* Adds two integers with overflow protection.
* @param a first integer
* @param b second integer
* @return sum of a and b, clamped to int range if overflow occurs
*/","* Returns the sum of {@code a} and {@code b} unless it would overflow or underflow in which case
   * {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedSubtract,"com.google.common.math.IntMath:saturatedSubtract(int,int)",550,552,"/**
* Performs saturated subtraction of two integers.
* @param a minuend
* @param b subtrahend
* @return result of the subtraction or Integer.MIN_VALUE/MAX_VALUE if overflow occurs
*/","* Returns the difference of {@code a} and {@code b} unless it would overflow or underflow in
   * which case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedMultiply,"com.google.common.math.IntMath:saturatedMultiply(int,int)",560,562,"/**
* Multiplies two integers with saturation.
* @param a first integer
* @param b second integer
* @return saturated result of the multiplication
*/","* Returns the product of {@code a} and {@code b} unless it would overflow or underflow in which
   * case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,preservesInsertionOrderOnAddsSet,com.google.common.collect.Platform:preservesInsertionOrderOnAddsSet(),91,93,"/**
* Creates a set that maintains insertion order.
* @return a new CompactHashSet instance
*/","* Returns the platform preferred set implementation that preserves insertion order when used only
   * for insertions.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,checkKey,com.google.common.collect.AbstractBiMap$Inverse:checkKey(java.lang.Object),474,478,"/**
* Checks and returns the key from the inverse map.
* @param key the key to check
* @return the corresponding key from the inverse map or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,entrySet,com.google.common.collect.EnumBiMap:entrySet(),320,324,"/**
* Returns a set view of the map's entries.
* @return a Set containing all key-value pairs in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,entrySet,com.google.common.collect.EnumHashBiMap:entrySet(),320,324,"/**
* Returns a set view of the mappings in this map.
* @return a set containing all entries in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,setValue,com.google.common.collect.AbstractBiMap$BiMapEntry:setValue(java.lang.Object),338,352,"/**
* Updates the value of an entry.
* @param value new value to set
* @return old value associated with the entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,containsValue,com.google.common.collect.EnumBiMap:containsValue(java.lang.Object),117,120,"/**
* Checks if the map contains a value.
* @param value value to check
* @return true if the value is present, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,containsValue,com.google.common.collect.EnumHashBiMap:containsValue(java.lang.Object),117,120,"/**
 * Checks if the map contains the specified value.
 * @param value value to search for
 * @return true if value is present, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.AbstractBiMap$EntrySet:clear(),393,396,"/**
 * Clears all entries from the map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.AbstractBiMap$KeySet:clear(),245,248,"/**
* Clears all entries from the map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.EnumBiMap:clear(),217,221,"/**
 * Clears all elements from both the main and inverse collections.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.EnumHashBiMap:clear(),217,221,"/**
 * Clears all elements from both the delegate and its inverse.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,iterator,com.google.common.collect.AbstractBiMap$EntrySet:iterator(),419,422,"/**
 * Returns an iterator over the entries in this map.
 * @return Iterator of Entry objects representing key-value pairs
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,makeInverse,com.google.common.collect.AbstractBiMap:makeInverse(java.util.Map),107,109,"/**
* Creates an inverse bimap from the given map.
* @param backward the original map to invert
* @return a new bimap representing the inverted mapping
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,checkValue,com.google.common.collect.AbstractBiMap$Inverse:checkValue(java.lang.Object),480,484,"/**
* Checks and returns the key corresponding to the given value.
* @param value the value to check
* @return the key associated with the value, or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,values,com.google.common.collect.AbstractBiMap$Inverse:values(),277,285,"/**
* Returns a set of values from the map.
* @return Set containing all values in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,values,com.google.common.collect.EnumBiMap:values(),277,285,"/**
* Returns a set of values from the map.
* @return Set containing all values in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,iterator,com.google.common.collect.AbstractBiMap$KeySet:iterator(),269,272,"/**
 * Returns an iterator over the keys in this map.
 * @return Iterator of keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,iterator,com.google.common.collect.Multimaps$Keys:iterator(),1787,1790,"/**
 * Returns an iterator over the keys of the multimap.
 * @return Iterator over keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,keySet,com.google.common.collect.EnumBiMap:keySet(),232,236,"/**
* Returns the set of keys in the map.
* Initializes a new KeySet if none exists.
* @return Set of keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,keySet,com.google.common.collect.EnumHashBiMap:keySet(),232,236,"/**
 * Returns a set of keys.
 * Initializes if not already created.
 * @return Set of keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,iterator,com.google.common.collect.AbstractBiMap$ValueSet:iterator(),296,299,"/**
 * Returns an iterator over the values in this map.
 * @return Iterator of values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,iterator,com.google.common.collect.FilteredMultimapValues:iterator(),47,50,"/**
 * Returns an iterator over the values of the multimap.
 * @return Iterator over values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,inverse,com.google.common.collect.EnumBiMap:inverse(),225,228,"/**
 * Returns the inverse of this bimap.
 * @return A new BiMap where keys and values are swapped
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,inverse,com.google.common.collect.EnumHashBiMap:inverse(),225,228,"/**
 * Returns the inverse of this bimap.
 * @return A new BiMap where keys and values are swapped
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,next,com.google.common.collect.AbstractMapBasedMultimap$Itr:next(),1178,1192,"/**
* Returns next entry from the map iterator.
* @return T object representing the next entry or null if no more entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,<init>,"com.google.common.collect.GeneralRange:<init>(java.util.Comparator,boolean,java.lang.Object,com.google.common.collect.BoundType,boolean,java.lang.Object,com.google.common.collect.BoundType)",103,146,"/**
 * Constructs a GeneralRange with specified bounds and comparator.
 * @param comparator defines element ordering
 * @param hasLowerBound true if lower bound is present
 * @param lowerEndpoint lower bound value, can be null if absent
 * @param lowerBoundType type of the lower bound (inclusive/exclusive)
 * @param hasUpperBound true if upper bound is present
 * @param upperEndpoint upper bound value, can be null if absent
 * @param upperBoundType type of the upper bound (inclusive/exclusive)
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,next,com.google.common.collect.Iterators$PeekingImpl:next(),1196,1207,"/**
 * Retrieves the next element in the iteration.
 * @return the next element
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,peek,com.google.common.collect.Iterators$PeekingImpl:peek(),1215,1224,"/**
* Returns the next element without advancing the iterator.
* @return the next element or null if no more elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,getOrDefault,"com.google.common.collect.Maps$TransformedEntriesMap:getOrDefault(java.lang.Object,java.lang.Object)",2163,2172,"/**
* Retrieves value by key, transforming it if present; returns default otherwise.
* @param key key to retrieve value for
* @param defaultValue value to return if key not found or transformation fails
* @return transformed value or default
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$TransformedEntriesMap:remove(java.lang.Object),2175,2182,"/**
* Removes entry by key and transforms it.
* @param key unique identifier for the entry
* @return transformed value or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,getElement,com.google.common.collect.TreeMultiset$AvlNode:getElement(),1031,1035,"/**
* Retrieves element from collection.
* @return Element of type E or null if not present
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,updateInverseMap,"com.google.common.collect.AbstractBiMap:updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object)",154,164,"/**
* Updates the inverse map with new key-value pair.
* @param key the key associated with the value
* @param containedKey flag indicating if key was previously present
* @param oldValue previous value associated with the key (may be null)
* @param newValue new value to associate with the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,removeFromBothMaps,com.google.common.collect.AbstractBiMap:removeFromBothMaps(java.lang.Object),172,179,"/**
* Removes a key-value pair from both maps.
* @param key the key to remove
* @return the value associated with the removed key, or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,replaceAll,com.google.common.collect.EnumBiMap:replaceAll(java.util.function.BiFunction),194,215,"/**
* Replaces all values using a function, ensuring bijective property.
* @param function mapping from key to new value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,replaceAll,com.google.common.collect.EnumHashBiMap:replaceAll(java.util.function.BiFunction),194,215,"/**
 * Replaces each value with the result of applying a function to it.
 * Clears and repopulates the inverse map, throwing an exception if duplicates occur.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,next,com.google.common.collect.AbstractIndexedListIterator:next(),75,82,"/**
* Retrieves the next element in the iteration.
* Throws NoSuchElementException if no more elements are available.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,previous,com.google.common.collect.AbstractIndexedListIterator:previous(),94,101,"/**
* Returns the previous element in the iteration.
* Throws NoSuchElementException if no previous element exists.
* @return previous element of type E
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,<init>,com.google.common.collect.AbstractIterator:<init>(),69,69,"/**
 * Initializes an AbstractIterator instance.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSequentialIterator.java,<init>,com.google.common.collect.AbstractSequentialIterator:<init>(java.lang.Object),50,52,"/**
 * Initializes an iterator with the first element.
 * @param firstOrNull the first element or null if none
 */","* Creates a new iterator with the given first element, or, if {@code firstOrNull} is null,
   * creates a new empty iterator.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableListIterator.java,<init>,com.google.common.collect.UnmodifiableListIterator:<init>(),34,34,"/**
 * Initializes an unmodifiable list iterator.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,hasNext,com.google.common.collect.AbstractIterator:hasNext(),126,137,"/**
 * Checks if there are more elements to process.
 * @return true if next element is available, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,wrapEntry,com.google.common.collect.AbstractMapBasedMultimap$AsMap:wrapEntry(java.util.Map$Entry),1412,1415,"/**
* Wraps an entry with an immutable key and collection value.
* @param entry original map entry to be wrapped
* @return new Entry with immutable key and collection
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,sortedMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:sortedMap(),1546,1549,"/**
* Returns a navigable map of keys to collections of values.
* @return NavigableMap with sorted keys and associated collections
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,comparator,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:comparator(),1491,1494,"/**
 * Returns the comparator used to order the keys.
 * @return Comparator or null if natural ordering is used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,firstKey,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:firstKey(),1496,1500,"/**
 * Returns the first key in the sorted map.
 * @return the first key or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lastKey,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:lastKey(),1502,1506,"/**
 * Returns the last key in the sorted map.
 * @return the last key or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headMap,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:headMap(java.lang.Object),1508,1511,"/**
* Returns a sorted map containing entries with keys less than toKey.
* @param toKey the upper bound key (exclusive)
* @return SortedMap with keys < toKey
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subMap,"com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:subMap(java.lang.Object,java.lang.Object)",1513,1517,"/**
* Returns a sorted map containing entries within the specified key range.
* @param fromKey inclusive lower bound of the range
* @param toKey exclusive upper bound of the range
* @return SortedMap with entries between fromKey and toKey
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailMap,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:tailMap(java.lang.Object),1519,1522,"/**
 * Returns a view of the portion of this map whose keys are greater than or equal to `fromKey`.
 * @param fromKey the lower bound key (inclusive)
 * @return a sorted map containing the tail subset
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createKeySet,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:createKeySet(),1534,1537,"/**
 * Creates a sorted key set from a sorted map.
 * @return SortedSet of keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollAsMapEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollAsMapEntry(java.util.Iterator),1617,1627,"/**
* Retrieves and removes the next map entry from iterator.
* @param entryIterator iterator over map entries
* @return immutable map entry with key and unmodifiable collection of values, or null if no more entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createUnmodifiableEmptyCollection,com.google.common.collect.AbstractMapBasedMultimap:createUnmodifiableEmptyCollection(),143,145,"/**
 * Creates an unmodifiable empty collection.
 * @return Unmodifiable empty collection instance
 */","* Creates an unmodifiable, empty collection of values.
   *
   * <p>This is used in {@link #removeAll} on an empty key.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,sortedMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:sortedMap(),1065,1068,"/**
* Returns a navigable map of keys to collections of values.
* @return NavigableMap with sorted keys and associated collections
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,comparator,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:comparator(),1026,1029,"/**
 * Returns the comparator used to order the keys in this map.
 * @return the comparator or null if natural ordering is used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,first,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:first(),1031,1035,"/**
 * Retrieves the first key from the sorted map.
 * @return the first key or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:headSet(java.lang.Object),1037,1040,"/**
* Returns a sorted set of keys less than the specified element.
* @param toElement the upper bound (exclusive)
* @return a SortedSet containing keys less than toElement
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,last,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:last(),1042,1046,"/**
 * Retrieves the last key in the sorted map.
 * @return the last key or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:subSet(java.lang.Object,java.lang.Object)",1048,1051,"/**
* Returns a subset of keys within the specified range.
* @param fromElement inclusive lower bound
* @param toElement exclusive upper bound
* @return SortedSet containing keys in the range [fromElement, toElement)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:tailSet(java.lang.Object),1053,1056,"/**
* Returns a subset of keys greater than or equal to the specified element.
* @param fromElement the lower bound (inclusive)
* @return SortedSet containing keys from the specified element onwards
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollFirst,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:pollFirst(),1090,1093,"/**
 * Removes and returns the first element from the queue.
 * @return the head of this queue, or null if the queue is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollFirst,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:pollFirst(),722,725,"/**
 * Retrieves and removes the first element from the queue.
 * @return the first element, or null if the queue is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,pollFirstEntry,com.google.common.collect.AbstractNavigableMap:pollFirstEntry(),51,54,"/**
* Removes and returns the first entry from the map.
* @return the first Entry or null if the map is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,pollLastEntry,com.google.common.collect.AbstractNavigableMap:pollLastEntry(),56,59,"/**
 * Removes and returns the last entry from this map.
 * @return the last Entry or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardPollFirstEntry,com.google.common.collect.ForwardingNavigableMap:standardPollFirstEntry(),243,245,"/**
 * Removes and returns the first entry from the map.
 * @return the removed entry or null if the map is empty
 */","* A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of {@code
   * entrySet}. If you override {@code entrySet}, you may wish to override {@code pollFirstEntry} to
   * forward to this implementation.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardPollFirst,com.google.common.collect.ForwardingNavigableSet:standardPollFirst(),127,129,"/**
 * Retrieves and removes the first element from the iterator.
 * @return the first element or null if the iterator is empty
 */","* A sensible definition of {@link #pollFirst} in terms of the {@code iterator} method. If you
   * override {@link #iterator} you may wish to override {@link #pollFirst} to forward to this
   * implementation.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:remove(),484,489,"/**
 * Removes current element from iterator and updates size.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,refreshIfEmpty,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:refreshIfEmpty(),353,365,"/**
 * Refreshes delegate if empty, checks for concurrent modifications.
 */","* If the delegate collection is empty, but the multimap has values for the key, replace the
     * delegate with the new collection for the key.
     *
     * <p>For a subcollection, refresh its ancestor and validate that the ancestor delegate hasn't
     * changed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,addAll,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:addAll(int,java.util.Collection)",778,793,"/**
* Inserts elements from a collection at a specified index.
* @param index position to insert elements
* @param c collection of elements to add
* @return true if the list was modified, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,get,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:get(int),795,800,"/**
* Retrieves element at specified index.
* @param index position of the element to retrieve
* @return element at the given index or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,set,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:set(int,java.lang.Object)",802,807,"/**
* Sets an element at a specific index in the list.
* @param index position of the element to set
* @param element new value for the specified index
* @return the element previously at the specified position
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,add,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:add(int,java.lang.Object)",809,818,"/**
 * Adds an element at the specified index.
 * @param index position to insert the element
 * @param element the element to add
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:remove(int),820,828,"/**
* Removes element at specified index.
* @param index position of the element to remove
* @return removed element or null if list is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,indexOf,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:indexOf(java.lang.Object),830,834,"/**
 * Returns the index of the first occurrence of an element.
 * Refreshes the list if empty.
 * @param o element to search for
 * @return index of element or -1 if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lastIndexOf,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:lastIndexOf(java.lang.Object),836,840,"/**
* Returns the last index of the specified element.
* Refreshes list if empty before searching.
* @param o element to search for
* @return the last index of element or -1 if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,hasPrevious,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:hasPrevious(),875,878,"/**
 * Checks if there is a previous element in the delegate list iterator.
 * @return true if there is a previous element, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,previous,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:previous(),880,884,"/**
 * Returns the previous element in the iteration.
 * @return the previous element or null if no such element exists
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,nextIndex,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:nextIndex(),886,889,"/**
 * Returns the index of the element that would be returned by subsequent call to next().
 * @return index of the next element or list size if at end
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,previousIndex,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:previousIndex(),891,894,"/**
 * Returns the index of the element that would be returned by a subsequent call to previous().
 * @return Index of the previous element, or -1 if at the beginning
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,set,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:set(java.lang.Object),896,899,"/**
 * Sets the current element of the delegate iterator to the specified value.
 * @param value the new value to be set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,add,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:add(java.lang.Object),901,909,"/**
* Adds a value to the list and updates size.
* @param value the value to add
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subList,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:subList(int,int)",854,861,"/**
* Returns a sublist of the list.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
* @return List containing elements from fromIndex to toIndex
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,getSortedSetDelegate,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:getSortedSetDelegate(),697,700,"/**
* Returns a sorted set delegate.
* @return NavigableSet containing elements in sorted order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,comparator,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:comparator(),643,646,"/**
 * Returns the comparator used to order elements.
 * @return Comparator or null if natural ordering is used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,first,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:first(),648,653,"/**
* Retrieves the first element in the sorted set.
* Refreshes the set if it's empty.
* @return the first element or null if the set is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,last,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:last(),655,660,"/**
 * Retrieves the last element in the sorted set.
 * Refreshes the set if it's empty.
 * @return the last element or null if the set is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:headSet(java.lang.Object),662,669,"/**
 * Returns a view of the portion of the set whose elements are strictly less than toElement.
 * @param toElement upper bound element, not included in the returned set
 * @return SortedSet containing elements less than toElement
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:subSet(java.lang.Object,java.lang.Object)",671,678,"/**
* Returns a subset of the sorted set within specified range.
* @param fromElement lower bound of the sub-set (inclusive)
* @param toElement upper bound of the sub-set (exclusive)
* @return SortedSet containing elements in the range [fromElement, toElement)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:tailSet(java.lang.Object),680,687,"/**
* Returns a view of the portion of this set whose elements are greater than or equal to fromElement.
* @param fromElement lower bound element (inclusive)
* @return SortedSet containing elements greater than or equal to fromElement
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,put,"com.google.common.collect.AbstractMapBasedMultimap:put(java.lang.Object,java.lang.Object)",189,207,"/**
* Adds a value to the collection associated with the given key.
* @param key key to identify the collection
* @param value value to add to the collection
* @return true if the value was added, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,getOrCreateCollection,com.google.common.collect.AbstractMapBasedMultimap:getOrCreateCollection(java.lang.Object),209,216,"/**
* Retrieves or creates a collection for a given key.
* @param key the key to identify the collection
* @return the existing or newly created collection
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,get,com.google.common.collect.AbstractMapBasedMultimap:get(java.lang.Object),292,299,"/**
* Retrieves a collection of values by key.
* @param key unique identifier for the collection
* @return wrapped collection of values associated with the key
*/","* {@inheritDoc}
   *
   * <p>The returned collection is not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,values,com.google.common.collect.AbstractMapBasedMultimap:values(),1214,1217,"/**
 * Returns a collection of all values in the map.
 * @return Collection containing all values associated with keys in the map
 */","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the values for one key, followed
   * by the values of a second key, and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,values,com.google.common.collect.LinkedListMultimap:values(),748,751,"/**
 * Returns a list of all values in the map.
 * @return List containing all values
 */","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the values in the order they
   * were added to the multimap. Because the values may have duplicates and follow the insertion
   * ordering, this method returns a {@link List}, instead of the {@link Collection} specified in
   * the {@link ListMultimap} interface.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createKeys,com.google.common.collect.AbstractMapBasedMultimap:createKeys(),1247,1250,"/**
 * Creates a multiset of keys from this map.
 * @return Multiset containing all keys with their respective counts
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,createKeys,com.google.common.collect.LinkedListMultimap:createKeys(),735,738,"/**
 * Creates a view of keys in the multimap.
 * @return Multiset view of keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createKeys,com.google.common.collect.Multimaps$MapMultimap:createKeys(),1270,1273,"/**
 * Creates and returns a multiset of keys from this map.
 * @return Multiset containing all keys from the map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,entries,com.google.common.collect.AbstractMapBasedMultimap:entries(),1261,1264,"/**
 * Returns all entries in the map.
 * @return a collection of map entries
 */","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the values for one key, followed
   * by the values of a second key, and so on.
   *
   * <p>Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the
   * time the entry is returned by a method call to the collection or its iterator.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,valueIterator,com.google.common.collect.AbstractMultimap:valueIterator(),218,220,"/**
* Returns an iterator over values.
* @return Iterator of values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,entries,com.google.common.collect.LinkedListMultimap:entries(),798,801,"/**
* Returns a list of map entries.
* @return List of Entry objects representing key-value pairs
*/","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the entries in the order they
   * were added to the multimap. Because the entries may have duplicates and follow the insertion
   * ordering, this method returns a {@link List}, instead of the {@link Collection} specified in
   * the {@link ListMultimap} interface.
   *
   * <p>An entry's {@link Entry#getKey} method always returns the same key, regardless of what
   * happens subsequently. As long as the corresponding key-value mapping is not removed from the
   * multimap, {@link Entry#getValue} returns the value from the multimap, which may change over
   * time, and {@link Entry#setValue} modifies that value. Removing the mapping from the multimap
   * does not alter the value returned by {@code getValue()}, though a subsequent {@code setValue()}
   * call won't update the multimap but will lead to a revised value being returned by {@code
   * getValue()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,getAndSet,"com.google.common.collect.AbstractMapBasedMultiset:getAndSet(com.google.common.collect.Count,int)",337,343,"/**
* Atomically sets the given count and returns the old value.
* @param i Count object to update, can be null
* @param count new value to set
* @return previous value or 0 if Count is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,next,com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:next(),215,229,"/**
* Returns the next element from the iterator.
* @return The next key in the iteration
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,clear,com.google.common.collect.AbstractMapBasedMultiset:clear(),169,176,"/**
* Resets all counts to zero and clears the map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,iterator,com.google.common.collect.HashMultiset:iterator(),190,193,"/**
 * Returns an iterator over elements in this multiset.
 * @return Iterator of elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,iterator,com.google.common.collect.LinkedHashMultiset:iterator(),190,193,"/**
 * Returns an iterator over the elements in this multiset.
 * @return An Iterator over the elements in this multiset
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,newStringBuilderForCollection,com.google.common.collect.Collections2:newStringBuilderForCollection(int),351,354,"/**
* Creates a StringBuilder for a collection of given size.
* @param size expected number of elements in the collection
* @return StringBuilder initialized with optimal capacity
*/",Returns best-effort-sized StringBuilder based on the given collection size.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,remove,"com.google.common.collect.FilteredEntryMultimap$Keys:remove(java.lang.Object,int)",361,385,"/**
* Removes a specified number of entries with the given key.
* @param key the key to remove entries for
* @param occurrences the maximum number of entries to remove
* @return the number of removed entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,computeArrayListCapacity,com.google.common.collect.Lists:computeArrayListCapacity(int),155,161,"/**
* Computes capacity for ArrayList based on size.
* @param arraySize current size of the array
* @return computed capacity ensuring non-negative value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayListWithCapacity,com.google.common.collect.Lists:newArrayListWithCapacity(int),180,185,"/**
* Creates a new ArrayList with the specified initial capacity.
* @param initialArraySize the initial capacity of the list
* @return an ArrayList instance with the given capacity
*/","* Creates an {@code ArrayList} instance backed by an array with the specified initial size;
   * simply delegates to {@link ArrayList#ArrayList(int)}.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,
   * use {@code new }{@link ArrayList#ArrayList(int) ArrayList}{@code <>(int)} directly, taking
   * advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>. (Unlike here, there is no risk of overload ambiguity, since the {@code ArrayList}
   * constructors very wisely did not accept varargs.)
   *
   * @param initialArraySize the exact size of the initial backing array for the returned array list
   *     ({@code ArrayList} documentation calls this value the ""capacity"")
   * @return a new, empty {@code ArrayList} which is guaranteed not to resize itself unless its size
   *     reaches {@code initialArraySize + 1}
   * @throws IllegalArgumentException if {@code initialArraySize} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,capacity,com.google.common.collect.Maps:capacity(int),286,307,"/**
 * Calculates capacity for a collection based on expected size.
 * @param expectedSize estimated number of elements
 * @return calculated capacity to accommodate the expected size
 */","* Returns a capacity that is sufficient to keep the map from being resized as long as it grows no
   * larger than expectedSize and the load factor is ≥ its default (0.75).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$ArrayListSupplier:<init>(int),185,187,"/**
* Initializes an ArrayListSupplier with expected values per key.
* @param expectedValuesPerKey expected number of values per key (must be non-negative)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$HashSetSupplier:<init>(int),217,219,"/**
 * Initializes a new HashSetSupplier with an expected number of values per key.
 * @param expectedValuesPerKey the expected number of values for each key; must be non-negative
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:<init>(int),231,233,"/**
 * Initializes a LinkedHashSetSupplier with an expected number of values per key.
 * @param expectedValuesPerKey the expected average number of values per key
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,arrayListValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:arrayListValues(int),295,305,"/**
 * Creates a ListMultimap with array list values.
 * @param expectedValuesPerKey estimated number of values per key
 * @return ListMultimapBuilder configured for array list values
 */","* Uses an {@link ArrayList} to store value collections, initialized to expect the specified
     * number of values per key.
     *
     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:hashSetValues(int),337,347,"/**
* Creates a set multimap with hash sets as value collections.
* @param expectedValuesPerKey estimated average number of values per key
* @return SetMultimapBuilder configured for hash set values
*/","* Uses a hash-based {@code Set} to store value collections, initialized to expect the specified
     * number of values per key.
     *
     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedHashSetValues(int),360,370,"/**
* Creates a builder for a SetMultimap with linked hash set values.
* @param expectedValuesPerKey estimated number of values per key
* @return builder instance
*/","* Uses an insertion-ordered hash-based {@code Set} to store value collections, initialized to
     * expect the specified number of values per key.
     *
     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashKeys,com.google.common.collect.MultimapBuilder:hashKeys(int),83,91,"/**
 * Creates a multimap builder with hash keys.
 * @param expectedKeys the expected number of key elements
 * @return MultimapBuilderWithKeys instance
 */","* Uses a hash table to map keys to value collections, initialized to expect the specified number
   * of keys.
   *
   * @throws IllegalArgumentException if {@code expectedKeys < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashKeys,com.google.common.collect.MultimapBuilder:linkedHashKeys(int),114,122,"/**
* Creates a multimap builder with linked hash keys.
* @param expectedKeys estimated number of key entries
* @return MultimapBuilderWithKeys instance
*/","* Uses an hash table to map keys to value collections, initialized to expect the specified number
   * of keys.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in the order that they were first added to the
   * multimap, save that if all values associated with a key are removed and then the key is added
   * back into the multimap, that key will come last in the key iteration order.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,<init>,"com.google.common.collect.Multisets$ImmutableEntry:<init>(java.lang.Object,int)",268,272,"/**
* Creates an immutable entry with an element and its count.
* @param element the element to be stored
* @param count the count associated with the element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,setCountImpl,"com.google.common.collect.Multisets:setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int)",942,956,"/**
* Sets the count of an element in a multiset.
* @param self the multiset to modify
* @param element the element to update
* @param count new count for the element
* @return old count of the element
*/","An implementation of {@link Multiset#setCount(Object, int)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,setCountImpl,"com.google.common.collect.Multisets:setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int,int)",959,970,"/**
* Sets element count in multiset if current count matches.
* @param self the Multiset to modify
* @param element the element whose count to set
* @param oldCount expected current count of the element
* @param newCount new count to set for the element
* @return true if count was updated, false otherwise
*/","An implementation of {@link Multiset#setCount(Object, int, int)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,spliterator,com.google.common.collect.AbstractMultimap$Entries:spliterator(),134,137,"/**
 * Returns a spliterator over map entries.
 * @return Spliterator of Entry objects
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,hashCode,com.google.common.collect.AbstractMultimap$EntrySet:hashCode(),142,145,"/**
* Generates hash code using Google Guava's implementation.
* @return hash code of the object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,hashCode,com.google.common.collect.FilteredKeySetMultimap$EntrySet:hashCode(),69,72,"/**
 * Generates hash code using Google Guava's implementation.
 * @return hash code of the object
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,standardHashCode,com.google.common.collect.ForwardingSet:standardHashCode(),98,100,"/**
 * Generates a hash code using Google Guava's Sets.hashCodeImpl.
 * @return computed hash code
 */","* A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #equals} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,hashCode,com.google.common.collect.ImmutableSet:hashCode(),298,301,"/**
 * Generates hash code using Sets utility.
 * @return Hash code of the object
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,hashCode,com.google.common.collect.Maps$UnmodifiableEntrySet:hashCode(),1583,1586,"/**
 * Generates hash code using Google Guava's Sets implementation.
 * @return computed hash code
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,hashCode,com.google.common.collect.RegularContiguousSet:hashCode(),237,240,"/**
 * Generates hash code using Google Guava's Sets implementation.
 * @return computed hash code
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,hashCode,com.google.common.collect.Sets$FilteredSet:hashCode(),1291,1294,"/**
 * Generates hash code for the current instance.
 * Delegates to hashCodeImpl with this instance.
 * @return hash code value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,hashCode,com.google.common.collect.TreeRangeSet$AsRanges:hashCode(),110,113,"/**
 * Generates hash code for the object.
 * @return computed hash code
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,equals,com.google.common.collect.AbstractMultimap$EntrySet:equals(java.lang.Object),147,150,"/**
 * Checks equality with another object.
 * @param obj object to compare
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,equals,com.google.common.collect.FilteredKeySetMultimap$EntrySet:equals(java.lang.Object),74,77,"/**
 * Checks equality with another object using Sets utility.
 * @param o object to compare
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,standardEquals,com.google.common.collect.ForwardingSet:standardEquals(java.lang.Object),88,90,"/**
 * Checks equality using standard equals implementation.
 * @param object the object to compare with
 * @return true if objects are equal, false otherwise
 */","* A sensible definition of {@link #equals} in terms of {@link #size} and {@link #containsAll}. If
   * you override either of those methods, you may wish to override {@link #equals} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,equals,com.google.common.collect.Maps$UnmodifiableEntrySet:equals(java.lang.Object),1578,1581,"/**
 * Checks equality with another object.
 * @param object the object to compare
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,equals,com.google.common.collect.Sets$FilteredSet:equals(java.lang.Object),1286,1289,"/**
 * Checks equality with another object.
 * @param object the object to compare
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:equals(java.lang.Object),1022,1030,"/**
 * Checks equality with another object.
 * @param o the object to compare with
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,equals,com.google.common.collect.TreeRangeSet$AsRanges:equals(java.lang.Object),115,118,"/**
 * Checks equality with another object.
 * @param o object to compare
 * @return true if objects are equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,containsValue,com.google.common.collect.AbstractMultimap:containsValue(java.lang.Object),48,57,"/**
* Checks if the map contains a specified value.
* @param value the value to check for presence in the map
* @return true if any collection within the map contains the value, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,containsEntry,"com.google.common.collect.AbstractMultimap:containsEntry(java.lang.Object,java.lang.Object)",59,63,"/**
* Checks if map contains entry with specified key and value.
* @param key the key to search for
* @param value the value associated with the key
* @return true if entry exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,remove,"com.google.common.collect.AbstractMultimap:remove(java.lang.Object,java.lang.Object)",65,70,"/**
* Removes a value associated with a key.
* @param key the key to identify the collection of values
* @param value the value to remove from the collection
* @return true if the value was removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,hashCode,com.google.common.collect.AbstractMultimap:hashCode(),251,254,"/**
 * Generates hash code based on map representation.
 * @return int hash code value
 */","* Returns the hash code for this multimap.
   *
   * <p>The hash code of a multimap is defined as the hash code of the map view, as returned by
   * {@link Multimap#asMap}.
   *
   * @see Map#hashCode",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,toString,com.google.common.collect.AbstractMultimap:toString(),262,265,"/**
 * Returns string representation of the map.
 * @return String representation of the map
 */","* Returns a string representation of the multimap, generated by calling {@code toString} on the
   * map returned by {@link Multimap#asMap}.
   *
   * @return a string representation of the multimap",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,asMap,com.google.common.collect.LinkedListMultimap:asMap(),228,232,"/**
 * Returns a map view of the multimap.
 * @return Map where keys are mapped to collections of values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,com.google.common.collect.AbstractMultimap:putAll(com.google.common.collect.Multimap),93,101,"/**
 * Adds all entries from the specified multimap.
 * @param multimap source of entries to add
 * @return true if any entries were added, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,keySet,com.google.common.collect.LinkedListMultimap:keySet(),162,166,"/**
 * Returns the set of keys.
 * @return a Set containing all keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,keys,com.google.common.collect.LinkedListMultimap:keys(),172,176,"/**
 * Returns a multiset of keys.
 * Initializes if not already created.
 * @return Multiset containing all keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,equals,com.google.common.collect.AbstractMultimap:equals(java.lang.Object),238,241,"/**
 * Checks equality with another object.
 * @param object the object to compare
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,contains,com.google.common.collect.ConcurrentHashMultiset:contains(java.lang.Object),54,57,"/**
 * Checks if the collection contains the specified element.
 * @param element the element to check for presence
 * @return true if the element is present, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,contains,com.google.common.collect.EnumMultiset:contains(java.lang.Object),54,57,"/**
 * Checks if the collection contains the specified element.
 * @param element the element to check for presence
 * @return true if the element is present, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,add,com.google.common.collect.AbstractMultiset:add(java.lang.Object),60,65,"/**
* Adds an element to the collection with a weight of 1.
* @param element the element to be added
* @return always true indicating successful addition
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,remove,com.google.common.collect.AbstractMultiset:remove(java.lang.Object),73,77,"/**
 * Removes an element from the collection.
 * @param element the object to be removed
 * @return true if the element was present and removed, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,removeAll,com.google.common.collect.AbstractMultiset:removeAll(java.util.Collection),111,115,"/**
* Removes all occurrences of specified elements from this multiset.
* @param elementsToRemove collection of elements to remove
* @return true if any element was removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardRemoveAll,com.google.common.collect.ForwardingMultiset:standardRemoveAll(java.util.Collection),190,193,"/**
* Removes all occurrences of specified elements.
* @param elementsToRemove collection of elements to remove
* @return true if any element was removed
*/","* A sensible definition of {@link #removeAll} in terms of the {@code removeAll} method of {@link
   * #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #removeAll}
   * to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,elementSet,com.google.common.collect.AbstractMultiset:elementSet(),130,137,"/**
* Returns a set of elements.
* Initializes the element set if not already created.
* @return Set of elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,entrySet,com.google.common.collect.AbstractMultiset:entrySet(),164,171,"/**
* Returns a set of entries.
* @return Set containing all entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,equals,com.google.common.collect.AbstractMultiset:equals(java.lang.Object),207,210,"/**
 * Checks equality with another object.
 * @param object the object to compare
 * @return true if equal, false otherwise
 */","* {@inheritDoc}
   *
   * <p>This implementation returns {@code true} if {@code object} is a multiset of the same size
   * and if, for each element, the two multisets have the same count.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardEquals,com.google.common.collect.ForwardingMultiset:standardEquals(java.lang.Object),285,287,"/**
 * Checks equality with another object using standard equals implementation.
 * @param object the object to compare with
 * @return true if equal, false otherwise
 */","* A sensible, albeit inefficient, definition of {@link #equals} in terms of {@code
   * entrySet().size()} and {@link #count}. If you override either of these methods, you may wish to
   * override {@link #equals} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,equals,com.google.common.collect.ImmutableMultiset:equals(java.lang.Object),336,339,"/**
 * Checks equality with another object.
 * @param object the object to compare with
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,firstEntry,com.google.common.collect.AbstractNavigableMap:firstEntry(),41,44,"/**
 * Returns the first entry in the map.
 * @return the first Entry or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,lastEntry,com.google.common.collect.AbstractNavigableMap:lastEntry(),46,49,"/**
* Returns the last entry in descending order.
* @return the last Entry or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getFirst,"com.google.common.collect.Iterables:getFirst(java.lang.Iterable,java.lang.Object)",825,829,"/**
* Retrieves the first element from an iterable or returns a default value.
* @param iterable the source of elements
* @param defaultValue value to return if iterable is empty
* @return the first element or the default value
*/","* Returns the first element in {@code iterable} or {@code defaultValue} if the iterable is empty.
   * The {@link Iterators} analog to this method is {@link Iterators#getNext}.
   *
   * <p>If no default value is desired (and the caller instead wants a {@link
   * NoSuchElementException} to be thrown), it is recommended that {@code
   * iterable.iterator().next()} is used instead.
   *
   * <p>To get the only element in a single-element {@code Iterable}, consider using {@link
   * #getOnlyElement(Iterable)} or {@link #getOnlyElement(Iterable, Object)} instead.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.findFirst().orElse(defaultValue)}
   *
   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),
   * consider using {@code collection.getFirst()} instead. Note that if the collection is empty,
   * {@code getFirst()} throws a {@code NoSuchElementException}, while this method returns the
   * default value.
   *
   * @param defaultValue the default value to return if the iterable is empty
   * @return the first element of {@code iterable} or the default value
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,lowerKey,com.google.common.collect.AbstractNavigableMap:lowerKey(java.lang.Object),103,106,"/**
* Returns the greatest key less than the specified key.
* @param key the reference key
* @return the greatest key less than key, or null if no such key exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,floorKey,com.google.common.collect.AbstractNavigableMap:floorKey(java.lang.Object),108,111,"/**
* Returns the greatest key less than or equal to the given key.
* @param key the key to search for
* @return the greatest key less than or equal to the given key, or null if no such key exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,ceilingKey,com.google.common.collect.AbstractNavigableMap:ceilingKey(java.lang.Object),113,116,"/**
* Returns the least key greater than or equal to the specified key.
* @param key the key to find the ceiling for
* @return the least key greater than or equal to key, or null if no such key exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,higherKey,com.google.common.collect.AbstractNavigableMap:higherKey(java.lang.Object),118,121,"/**
* Returns the least key greater than the specified key.
* @param key the reference key
* @return the least key greater than key, or null if no such key exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,descendingKeySet,com.google.common.collect.AbstractNavigableMap:descendingKeySet(),150,153,"/**
 * Returns a descending key set.
 * @return NavigableSet of keys in reverse order
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,<init>,com.google.common.collect.ImmutableRangeSet:<init>(com.google.common.collect.ImmutableList),151,153,"/**
 * Constructs an ImmutableRangeSet from a list of ranges.
 * @param ranges sorted and non-overlapping list of Range objects
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,<init>,"com.google.common.collect.ImmutableRangeSet:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableRangeSet)",155,158,"/**
* Constructs an ImmutableRangeSet with specified ranges and complement.
* @param ranges sorted list of non-overlapping ranges
* @param complement precomputed complement range set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,com.google.common.collect.TreeRangeSet:<init>(java.util.NavigableMap),76,78,"/**
* Initializes a TreeRangeSet with given ranges.
* @param rangesByLowerCut map of lower bounds to ranges
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,contains,com.google.common.collect.ImmutableRangeSet:contains(java.lang.Comparable),30,33,"/**
 * Checks if the collection contains a specified value.
 * @param value the value to search for
 * @return true if the value is found, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,contains,com.google.common.collect.TreeRangeSet:contains(java.lang.Comparable),30,33,"/**
 * Checks if the set contains a specified value.
 * @param value the value to check for containment
 * @return true if the value is contained, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,isEmpty,com.google.common.collect.TreeRangeSet:isEmpty(),38,41,"/**
 * Checks if the collection is empty.
 * @return true if no elements are present, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,clear,com.google.common.collect.AbstractRangeSet:clear(),53,56,"/**
 * Clears all elements in the collection.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,com.google.common.collect.TreeRangeSet$RangesByUpperBound:<init>(java.util.NavigableMap),294,297,"/**
* Initializes with a map of ranges by lower bound.
* @param rangesByLowerBound map associating cuts with ranges
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,enclosesAll,com.google.common.collect.ImmutableRangeSet:enclosesAll(com.google.common.collect.RangeSet),58,61,"/**
* Checks if this range set contains all ranges of another set.
* @param other RangeSet to compare with
* @return true if all ranges in 'other' are enclosed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,enclosesAll,com.google.common.collect.TreeRangeSet:enclosesAll(com.google.common.collect.RangeSet),58,61,"/**
* Checks if this range set contains all ranges from another set.
* @param other the RangeSet to check against
* @return true if all ranges in 'other' are contained within this set, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,addAll,com.google.common.collect.TreeRangeSet:addAll(com.google.common.collect.RangeSet),63,66,"/**
 * Adds all ranges from another RangeSet to this set.
 * @param other RangeSet whose ranges are to be added
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,removeAll,com.google.common.collect.TreeRangeSet:removeAll(com.google.common.collect.RangeSet),68,71,"/**
 * Removes all ranges from this set that are contained in the given RangeSet.
 * @param other the RangeSet whose ranges will be removed from this set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,equals,com.google.common.collect.ImmutableRangeSet:equals(java.lang.Object),81,90,"/**
* Checks equality with another RangeSet.
* @param obj object to compare
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,equals,com.google.common.collect.TreeRangeSet:equals(java.lang.Object),81,90,"/**
* Checks equality with another object.
* @param obj the object to compare
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,asMap,com.google.common.collect.AbstractSortedSetMultimap:asMap(),136,139,"/**
 * Returns this multimap as an unmodifiable map.
 * @return A map view of the multimap
 */","* Returns a map view that associates each key with the corresponding values in the multimap.
   * Changes to the returned map, such as element removal, will update the underlying multimap. The
   * map does not support {@code setValue} on its entries, {@code put}, or {@code putAll}.
   *
   * <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same
   * behavior as {@link #get}, returning a live collection. When passed a key that is not present,
   * however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection.
   *
   * <p>Though the method signature doesn't say so explicitly, the returned map has {@link
   * SortedSet} values.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,keySet,com.google.common.collect.TreeMultimap:keySet(),185,188,"/**
* Returns a navigable set view of the keys.
* @return NavigableSet containing all keys in the map
*/","* {@inheritDoc}
   *
   * <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link
   * NavigableSet}, instead of the {@link java.util.Set} specified in the {@link Multimap}
   * interface.
   *
   * @since 14.0 (present with return type {@code SortedSet} since 2.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,orNaturalOrder,com.google.common.collect.Maps:orNaturalOrder(java.util.Comparator),786,793,"/**
* Returns the given comparator or natural order if null.
* @param comparator custom comparator to use
* @return provided comparator or natural ordering
*/","* Returns the specified comparator if not null; otherwise returns {@code Ordering.natural()}.
   * This method is an abomination of generics; the only purpose of this method is to contain the
   * ugly type-casting in one place.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseNaturalOrdering.java,reverse,com.google.common.collect.ReverseNaturalOrdering:reverse(),43,46,"/**
* Returns natural ordering.
* @return Ordering instance with natural order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedIterables.java,comparator,com.google.common.collect.SortedIterables:comparator(java.util.SortedSet),51,60,"/**
* Returns the comparator for a sorted set, using natural ordering if none.
* @param sortedSet the set to get the comparator from
* @return the comparator or natural ordering if null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,comparator,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:comparator(),500,503,"/**
 * Returns a natural ordering comparator for cuts.
 * @return Comparator for comparing cuts naturally
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,comparator,com.google.common.collect.TreeRangeSet$RangesByUpperBound:comparator(),332,335,"/**
 * Returns a natural ordering comparator for cuts.
 * @return Comparator for comparing Cut objects naturally
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,comparator,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:comparator(),734,737,"/**
 * Returns natural ordering comparator for Cut objects.
 * @return Comparator for Cut objects
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,firstEntry,com.google.common.collect.TreeMultiset:firstEntry(),66,70,"/**
 * Retrieves the first entry from the collection.
 * @return the first Entry or null if the collection is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,lastEntry,com.google.common.collect.TreeMultiset:lastEntry(),72,76,"/**
* Returns the last entry in the collection.
* @return the last Entry or null if the collection is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,descendingMultiset,com.google.common.collect.AbstractSortedMultiset:descendingMultiset(),122,126,"/**
* Returns a descending multiset view of the elements.
* @return SortedMultiset with elements in descending order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,contains,com.google.common.collect.AbstractTable$Values:contains(java.lang.Object),217,220,"/**
 * Checks if the collection contains the specified value.
 * @param o the value to check for presence
 * @return true if the value is present, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsValue,com.google.common.collect.StandardTable:containsValue(java.lang.Object),109,112,"/**
 * Checks if this map contains the specified value.
 * @param value value to check for presence in the map
 * @return true if the map contains the value, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,isEmpty,com.google.common.collect.ImmutableTable:isEmpty(),85,88,"/**
 * Checks if the collection is empty.
 * @return true if no elements are present, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,putAll,com.google.common.collect.AbstractTable:putAll(com.google.common.collect.Table),109,114,"/**
* Copies all entries from the specified table into this table.
* @param table source table to copy entries from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,cellSet,com.google.common.collect.AbstractTable:cellSet(),118,122,"/**
* Returns the set of cells in the table.
* @return Set of Cell objects representing table entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,values,com.google.common.collect.AbstractTable:values(),181,185,"/**
* Returns a collection of all values.
* Initializes if not already created.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,equals,com.google.common.collect.AbstractTable:equals(java.lang.Object),233,236,"/**
 * Checks equality with another object.
 * @param obj the object to compare
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,toString,com.google.common.collect.ArrayTable:toString(),244,247,"/**
 * Returns string representation of the row map.
 * @return String representation of the row map
 */",Returns the string representation {@code rowMap().toString()}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,toString,com.google.common.collect.ImmutableTable:toString(),244,247,"/**
 * Returns string representation of the row map.
 * @return String representation of the row map
 */",Returns the string representation {@code rowMap().toString()}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ByFunctionOrdering.java,<init>,"com.google.common.collect.ByFunctionOrdering:<init>(com.google.common.base.Function,com.google.common.collect.Ordering)",39,42,"/**
* Initializes with a function and an ordering.
* @param function mapping function from F to T
* @param ordering specifies the order for T elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparatorOrdering.java,<init>,com.google.common.collect.ComparatorOrdering:<init>(java.util.Comparator),34,36,"/**
 * Initializes ordering with a specified comparator.
 * @param comparator the comparator to use for ordering
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompoundOrdering.java,<init>,"com.google.common.collect.CompoundOrdering:<init>(java.util.Comparator,java.util.Comparator)",33,36,"/**
* Initializes compound ordering with two comparators.
* @param primary primary comparator for initial sorting
* @param secondary secondary comparator for tie-breaking
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,<init>,com.google.common.collect.ExplicitOrdering:<init>(com.google.common.collect.ImmutableMap),35,37,"/**
 * Initializes ordering with a rank map.
 * @param rankMap mapping of items to their ranks
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LexicographicalOrdering.java,<init>,com.google.common.collect.LexicographicalOrdering:<init>(java.util.Comparator),33,35,"/**
 * Sets the comparator for lexicographical ordering.
 * @param elementOrder comparator defining the order of elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,<init>,com.google.common.collect.NaturalOrdering:<init>(),81,81,"/**
 * Private constructor to prevent instantiation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsFirstOrdering.java,<init>,com.google.common.collect.NullsFirstOrdering:<init>(com.google.common.collect.Ordering),32,34,"/**
 * Wraps an existing Ordering to prioritize null values first.
 * @param ordering the original ordering to wrap
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsLastOrdering.java,<init>,com.google.common.collect.NullsLastOrdering:<init>(com.google.common.collect.Ordering),32,34,"/**
 * Initializes a new instance with the specified ordering.
 * @param ordering the base ordering to be used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseNaturalOrdering.java,<init>,com.google.common.collect.ReverseNaturalOrdering:<init>(),100,100,"/**
 * Private constructor to prevent instantiation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,<init>,com.google.common.collect.ReverseOrdering:<init>(com.google.common.collect.Ordering),34,36,"/**
 * Creates an ordering that is the reverse of the specified order.
 * @param forwardOrder the original ordering to be reversed
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UsingToStringOrdering.java,<init>,com.google.common.collect.UsingToStringOrdering:<init>(),44,44,"/**
 * Constructs an instance of UsingToStringOrdering. 
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,writeObject,com.google.common.collect.ArrayListMultimap:writeObject(java.io.ObjectOutputStream),160,165,"/**
 * Writes object state to a stream.
 * @param stream output stream for serialization
 * @throws IOException if I/O error occurs
 */","* @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the
   *     key, number of values for that key, and the key's values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,writeObject,com.google.common.collect.HashMultimap:writeObject(java.io.ObjectOutputStream),136,141,"/**
* Writes object state to a stream.
* @param stream output stream for serialization
* @throws IOException if an I/O error occurs
*/","* @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the
   *     key, number of values for that key, and the key's values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,writeObject,com.google.common.collect.ImmutableListMultimap:writeObject(java.io.ObjectOutputStream),512,517,"/**
 * Writes object state to a stream.
 * @param stream the output stream for serialization
 * @throws IOException if an I/O error occurs
 */","* @serialData number of distinct keys, and then for each distinct key: the key, the number of
   *     values for that key, and the key's values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,readObject,com.google.common.collect.ArrayListMultimap:readObject(java.io.ObjectInputStream),167,176,"/**
* Reads object state from input stream.
* @param stream source of serialized data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Serialization.java,populateMultimap,"com.google.common.collect.Serialization:populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream)",162,167,"/**
* Populates a multimap from an input stream.
* @param multimap the target multimap to populate
* @param stream the input stream containing key-value pairs
*/","* Populates a multimap by reading an input stream, as part of deserialization. See {@link
   * #writeMultimap} for the data format.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,<init>,"com.google.common.collect.TableCollectors$MutableCell:<init>(java.lang.Object,java.lang.Object,java.lang.Object)",176,180,"/**
* Initializes a new MutableCell with specified row, column, and value.
* @param row the row index of the cell
* @param column the column index of the cell
* @param value the initial value of the cell
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,"com.google.common.collect.Tables$ImmutableCell:<init>(java.lang.Object,java.lang.Object,java.lang.Object)",140,147,"/**
* Constructs an ImmutableCell with specified row, column, and value.
* @param rowKey the row identifier
* @param columnKey the column identifier
* @param value the cell's value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,keySet,com.google.common.collect.ArrayTable$ArrayMap:keySet(),197,200,"/**
 * Returns a set of keys in the map.
 * @return Set of keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getKey,com.google.common.collect.ArrayTable$ArrayMap:getKey(int),202,204,"/**
 * Retrieves key by index.
 * @param index position of the key in the set
 * @return key at specified index
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,put,"com.google.common.collect.ArrayTable$ArrayMap:put(java.lang.Object,java.lang.Object)",278,286,"/**
* Updates the value for a given key.
* @param key unique identifier for the value
* @param value new value to set
* @return old value associated with the key or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,columnKeySet,com.google.common.collect.ArrayTable:columnKeySet(),645,648,"/**
 * Returns an immutable set of column keys.
 * @return ImmutableSet containing all column keys
 */","* Returns an immutable set of the valid column keys, including those that are associated with
   * null values only.
   *
   * @return immutable set of column keys",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,rowKeySet,com.google.common.collect.ArrayTable:rowKeySet(),737,740,"/**
* Returns an immutable set of all row keys.
* @return ImmutableSet containing all row keys
*/","* Returns an immutable set of the valid row keys, including those that are associated with null
   * values only.
   *
   * @return immutable set of row keys",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,getKey,com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:getKey(int),104,106,"/**
 * Retrieves key at specified index.
 * @param index position of the key in the list
 * @return key at given index
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,toString,com.google.common.collect.ExplicitOrdering:toString(),66,69,"/**
 * Returns string representation of ordering with explicit ranks.
 * @return formatted string of rank keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,createKeySet,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:createKeySet(),1136,1139,"/**
 * Creates an immutable set of keys from the map.
 * @return ImmutableSet containing all keys from the map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,readResolve,com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm:readResolve(),99,101,"/**
 * Returns the key set of the internal map.
 * @return Set containing all keys from the map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,keySet,com.google.common.collect.ImmutableMultimap:keySet(),584,587,"/**
 * Returns an immutable set of keys from the map.
 * @return ImmutableSet containing all keys in the map
 */","* Returns an immutable set of the distinct keys in this multimap, in the same order as they
   * appear in this multimap.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,columnKeySet,com.google.common.collect.ImmutableTable:columnKeySet(),343,346,"/**
 * Returns an immutable set of all column keys.
 * @return ImmutableSet containing column keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,readResolve,com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm:readResolve(),364,366,"/**
 * Returns the key set of the map.
 * @return Set of keys from the map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,contains,com.google.common.collect.Sets$PowerSet:contains(java.lang.Object),1750,1757,"/**
* Checks if the input object is a Set and contains all its elements.
* @param obj the object to check
* @return true if obj is a Set and all its elements are present, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,entryIterator,com.google.common.collect.ArrayTable$ArrayMap:entryIterator(),246,254,"/**
* Returns an iterator over map entries.
* @return Iterator of Entry objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,isEmpty,com.google.common.collect.ArrayTable$ArrayMap:isEmpty(),219,222,"/**
 * Checks if the map is empty.
 * @return true if no entries are present, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsKey,com.google.common.collect.ArrayTable$ArrayMap:containsKey(java.lang.Object),263,266,"/**
 * Checks if the map contains the specified key.
 * @param key the key to check
 * @return true if the map contains the key, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsColumn,com.google.common.collect.ArrayTable:containsColumn(java.lang.Object),410,413,"/**
 * Checks if a column key exists in the mapping.
 * @param columnKey the key to check
 * @return true if the column key is present, false otherwise
 */","* Returns {@code true} if the provided column key is among the column keys provided when the
   * table was constructed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsRow,com.google.common.collect.ArrayTable:containsRow(java.lang.Object),419,422,"/**
 * Checks if a row key exists in the map.
 * @param rowKey key to search for
 * @return true if the row key is present, false otherwise
 */","* Returns {@code true} if the provided row key is among the row keys provided when the table was
   * constructed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,containsKey,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:containsKey(java.lang.Object),1141,1144,"/**
 * Checks if the map contains the specified key.
 * @param key the key to check for presence in the map
 * @return true if the map contains the key, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,contains,com.google.common.collect.ImmutableMapKeySet:contains(java.lang.Object),58,61,"/**
 * Checks if the map contains the specified key.
 * @param object the key to check for presence in the map
 * @return true if the map contains the key, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,containsKey,com.google.common.collect.ImmutableMultimap:containsKey(java.lang.Object),563,566,"/**
 * Checks if the map contains a mapping for the specified key.
 * @param key key whose presence in this map is to be tested
 * @return true if this map contains a mapping for the specified key, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,cellIterator,com.google.common.collect.ArrayTable:cellIterator(),549,557,"/**
* Returns an iterator over cells.
* @return Iterator of Cell objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,valuesIterator,com.google.common.collect.ArrayTable:valuesIterator(),791,799,"/**
 * Returns an iterator over the values.
 * @return Iterator of nullable values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,asList,com.google.common.collect.EmptyContiguousSet:asList(),118,121,"/**
 * Returns an empty immutable list.
 * @return Immutable list containing no elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,get,com.google.common.collect.ImmutableListMultimap:get(java.lang.Object),446,451,"/**
* Retrieves an immutable list of values by key.
* @param key the key to look up
* @return an immutable list of values or an empty list if the key is not found
*/","* Returns an immutable list of the values for the given key. If no mappings in the multimap have
   * the provided key, an empty immutable list is returned. The values are in the same order as the
   * parameters used to build this multimap.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,createValues,com.google.common.collect.RegularImmutableTable:createValues(),86,89,"/**
* Creates an immutable collection of values.
* @return ImmutableCollection containing values or empty if none exist
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,column,com.google.common.collect.ImmutableTable:column(java.lang.Object),336,341,"/**
* Retrieves a column from the table.
* @param columnKey key of the column to retrieve
* @return ImmutableMap containing rows and values for the specified column
*/","* {@inheritDoc}
   *
   * @throws NullPointerException if {@code columnKey} is {@code null}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver$TypeTable:<init>(),280,282,"/**
 * Initializes an empty type table.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntry.java,<init>,"com.google.common.collect.ImmutableMapEntry:<init>(java.lang.Object,java.lang.Object)",52,55,"/**
 * Constructs an immutable map entry.
 * @param key entry key
 * @param value entry value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,put,"com.google.common.collect.ImmutableMultimap$Builder:put(java.lang.Object,java.lang.Object)",238,248,"/**
* Adds a key-value pair to the builder.
* @param key unique identifier for the value
* @param value associated with the key
* @return Builder instance for method chaining
*/",Adds a key-value mapping to the built multimap.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain$BigIntegerDomain:offset(java.math.BigInteger,long)",224,228,"/**
* Adds a specified distance to an origin BigInt.
* @param origin starting BigInteger value
* @param distance distance to add (non-negative)
* @return new BigInteger after adding distance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain$LongDomain:offset(java.lang.Long,long)",147,155,"/**
* Calculates new offset by adding distance to origin.
* @param origin starting point for offset calculation
* @param distance amount to add to origin
* @return new offset value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain:offset(java.lang.Comparable,long)",263,274,"/**
* Computes the C object at a given distance from the origin.
* @param origin starting C object
* @param distance number of steps to move forward
* @return C object after moving the specified distance
* @throws IllegalArgumentException if distance is negative or overflow occurs
*/","* Returns, conceptually, ""origin + distance"", or equivalently, the result of calling {@link
   * #next} on {@code origin} {@code distance} times.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliterator:trySplit(),376,399,"/**
 * Tries to split the spliterator into two parts.
 * @return a new spliterator or null if cannot be split
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMapToDouble,"com.google.common.collect.CollectSpliterators:flatMapToDouble(java.util.Spliterator,java.util.function.Function,int,long)",275,290,"/**
 * Flattens and maps elements to double values.
 * @param fromSpliterator source spliterator
 * @param function mapping function to double spliterator
 * @param topCharacteristics characteristics for the resulting spliterator
 * @param topSize estimated size of the resulting spliterator
 * @return Spliterator.OfDouble with mapped double values
 */","* Returns a {@code Spliterator.OfDouble} that iterates over the elements of the spliterators
   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code
   * function} returns {@code null} for an input, it is replaced with an empty stream.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMapToInt,"com.google.common.collect.CollectSpliterators:flatMapToInt(java.util.Spliterator,java.util.function.Function,int,long)",231,246,"/**
 * Applies a flat map transformation to convert elements into integers.
 * @param fromSpliterator the source spliterator
 * @param function mapping function converting elements to int spliterators
 * @param topCharacteristics characteristics for the resulting spliterator
 * @param topSize estimated size of the resulting spliterator
 * @return a new Spliterator.OfInt with transformed elements
 */","* Returns a {@code Spliterator.OfInt} that iterates over the elements of the spliterators
   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code
   * function} returns {@code null} for an input, it is replaced with an empty stream.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMapToLong,"com.google.common.collect.CollectSpliterators:flatMapToLong(java.util.Spliterator,java.util.function.Function,int,long)",253,268,"/**
 * Transforms a spliterator of elements into a long spliterator using a mapping function.
 * @param fromSpliterator the original spliterator to transform
 * @param function the mapping function that converts each element to a long spliterator
 * @param topCharacteristics characteristics for the resulting spliterator
 * @param topSize estimated size of the resulting spliterator
 * @return a new Spliterator.OfLong with transformed elements
 */","* Returns a {@code Spliterator.OfLong} that iterates over the elements of the spliterators
   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code
   * function} returns {@code null} for an input, it is replaced with an empty stream.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMap,"com.google.common.collect.CollectSpliterators:flatMap(java.util.Spliterator,java.util.function.Function,int,long)",208,224,"/**
 * Applies a flat map operation to the input spliterator.
 * @param fromSpliterator the source spliterator
 * @param function mapping function that returns a spliterator for each element
 * @param topCharacteristics characteristics of the resulting spliterator
 * @param topSize estimated size of the resulting spliterator
 * @return a new spliterator after flat map operation
 */","* Returns a {@code Spliterator} that iterates over the elements of the spliterators generated by
   * applying {@code function} to the elements of {@code fromSpliterator}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$FilteredSet:<init>(java.util.Set,com.google.common.base.Predicate)",1282,1284,"/**
 * Constructs a filtered set from an existing set and a predicate.
 * @param unfiltered original set to filter
 * @param predicate condition to apply for filtering elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,containsAll,com.google.common.collect.Collections2$FilteredCollection:containsAll(java.util.Collection),164,167,"/**
 * Checks if this collection contains all elements of another collection.
 * @param collection the collection to check for elements
 * @return true if all elements are contained, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardContainsAll,com.google.common.collect.ForwardingCollection:standardContainsAll(java.util.Collection),149,151,"/**
 * Checks if this collection contains all elements of another collection.
 * @param collection the collection to check against
 * @return true if all elements are contained, false otherwise
 */","* A sensible definition of {@link #containsAll} in terms of {@link #contains} . If you override
   * {@link #contains}, you may wish to override {@link #containsAll} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,containsAll,com.google.common.collect.RegularContiguousSet:containsAll(java.util.Collection),185,188,"/**
 * Checks if this collection contains all elements of the specified target collection.
 * @param targets the collection of elements to check for containment
 * @return true if all elements are contained, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsAll,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:containsAll(java.util.Collection),1015,1020,"/**
* Checks if all elements of the collection are contained.
* @param c collection to check for elements
* @return true if all elements are present, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,calculateNextPermutation,com.google.common.collect.Collections2$OrderedPermutationIterator:calculateNextPermutation(),524,540,"/**
* Calculates the next lexicographical permutation.
* Sets nextPermutation to null if no further permutations exist.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,calculateNextPermutation,com.google.common.collect.Collections2$PermutationIterator:calculateNextPermutation(),656,685,"/**
* Calculates the next permutation of a list.
* Adjusts indices and swaps elements to generate the next lexicographical order.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,contains,com.google.common.collect.CompactHashMap$EntrySetView:contains(java.lang.Object),827,838,"/**
* Checks if the map contains a specified key-value pair.
* @param o object to check, can be null
* @return true if the map contains the key-value pair, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap$KeySetView:remove(java.lang.Object),729,735,"/**
* Removes an element from the map.
* @param o the object to remove
* @return true if the element was removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,keySetIterator,com.google.common.collect.CompactHashMap:keySetIterator(),768,780,"/**
* Returns an iterator over the keys.
* @return Iterator of keys or custom iterator if delegate is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,entrySetIterator,com.google.common.collect.CompactHashMap:entrySetIterator(),874,885,"/**
* Returns an iterator over map entries.
* @return Iterator of Entry objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,size,com.google.common.collect.CompactHashMap:size(),953,957,"/**
 * Returns the number of elements in the map.
 * Uses a delegate if available; otherwise, returns the cached size.
 * @return size of the map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,valuesIterator,com.google.common.collect.CompactHashMap:valuesIterator(),1052,1064,"/**
* Returns an iterator over the values of the map.
* Delegates to the underlying map if available, otherwise uses a custom iterator.
* @return Iterator over values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,spliterator,com.google.common.collect.CompactHashMap$KeySetView:spliterator(),742,752,"/**
* Returns a spliterator for the keys.
* @return Spliterator over map keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,spliterator,com.google.common.collect.CompactHashMap$ValuesView:spliterator(),1013,1022,"/**
* Returns a spliterator for the values in this map.
* @return Spliterator for values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,next,com.google.common.collect.CompactHashMap$Itr:next(),638,649,"/**
* Returns the next element in the iteration.
* Throws NoSuchElementException if no such element exists.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setHashTableMask,com.google.common.collect.CompactHashMap:setHashTableMask(int),311,315,"/**
* Sets the hash table mask and updates metadata.
* @param mask the new hash table mask value
*/",Stores the hash table mask as the number of bits needed to represent an index.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,setHashTableMask,com.google.common.collect.CompactHashSet:setHashTableMask(int),279,283,"/**
* Sets the hash table mask.
* @param mask the new mask value for the hash table
*/",Stores the hash table mask as the number of bits needed to represent an index.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,entry,com.google.common.collect.CompactHashMap:entry(int),1188,1190,"/**
 * Retrieves an entry from the entries array.
 * @param i index of the entry to retrieve
 * @return value at the specified index
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setEntry,"com.google.common.collect.CompactHashMap:setEntry(int,int)",1200,1202,"/**
 * Sets an entry in the array at index i to the specified value.
 * @param i index of the entry to set
 * @param value new value for the entry
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,key,com.google.common.collect.CompactHashMap:key(int),1178,1181,"/**
 * Retrieves the key at the specified index.
 * @param i index of the key to retrieve
 * @return key at the given index
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setKey,"com.google.common.collect.CompactHashMap:setKey(int,java.lang.Object)",1192,1194,"/**
 * Sets the key at a specific index.
 * @param i index where the key is to be stored
 * @param key the key to store
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,resizeEntries,com.google.common.collect.CompactHashMap:resizeEntries(int),426,430,"/**
 * Resizes internal arrays to new capacity.
 * @param newCapacity the new capacity for entries, keys, and values
 */","* Resizes the internal entries array to the specified capacity, which may be greater or less than
   * the current capacity.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,value,com.google.common.collect.CompactHashMap:value(int),1183,1186,"/**
 * Retrieves the value at the specified index.
 * @param i index of the value to retrieve
 * @return value at the given index
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setValue,"com.google.common.collect.CompactHashMap:setValue(int,java.lang.Object)",1196,1198,"/**
 * Sets the value at the specified index.
 * @param i index of the value to set
 * @param value the new value to assign
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,keySet,com.google.common.collect.CompactHashMap:keySet(),687,690,"/**
* Returns a set view of the keys.
* Lazily initializes if not already created.
* @return Set of keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,entrySet,com.google.common.collect.CompactHashMap:entrySet(),797,800,"/**
* Returns a set view of the map's entries.
* Lazily initializes if not already created.
* @return Set of Entry<K, V> objects representing the mappings
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,values,com.google.common.collect.CompactHashMap:values(),980,983,"/**
* Returns a collection view of the values.
* Caches and returns the view if not already created.
* @return Collection of values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,isUsingHashFloodingResistance,com.google.common.collect.CompactHashSet:isUsingHashFloodingResistance(),273,276,"/**
 * Checks if hash flooding resistance is enabled.
 * @return true if hash flooding resistance is in use, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,iterator,com.google.common.collect.CompactHashSet:iterator(),539,588,"/**
 * Returns an iterator over the elements in this set.
 * @return Iterator over the elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,size,com.google.common.collect.CompactHashSet:size(),615,619,"/**
* Returns the number of elements in the set.
* Uses a delegate if available, otherwise returns cached size.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,entry,com.google.common.collect.CompactHashSet:entry(int),744,746,"/**
 * Retrieves an entry from the array of required entries.
 * @param i index of the entry to retrieve
 * @return the entry at the specified index
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,setEntry,"com.google.common.collect.CompactHashSet:setEntry(int,int)",752,754,"/**
 * Sets the value of an entry at a specific index.
 * @param i index of the entry to set
 * @param value new value to assign to the entry
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,resizeEntries,com.google.common.collect.CompactHashSet:resizeEntries(int),378,381,"/**
 * Resizes internal arrays to specified capacity.
 * @param newCapacity the new capacity for the arrays
 */","* Resizes the internal entries array to the specified capacity, which may be greater or less than
   * the current capacity.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,spliterator,com.google.common.collect.CompactHashSet:spliterator(),590,600,"/**
 * Returns a spliterator for the collection.
 * @return Spliterator over elements of type E
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,toArray,com.google.common.collect.CompactHashSet:toArray(),626,633,"/**
 * Converts the collection to an array.
 * @return An array containing all elements of the collection, or an empty array if needs allocation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,element,com.google.common.collect.CompactHashSet:element(int),739,742,"/**
 * Retrieves an element at the specified index.
 * @param i index of the element to retrieve
 * @return element at index i
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,setElement,"com.google.common.collect.CompactHashSet:setElement(int,java.lang.Object)",748,750,"/**
 * Sets an element at a specific index.
 * @param i index of the element to be set
 * @param value new value for the element
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashing.java,tableSize,com.google.common.collect.CompactHashing:tableSize(int),70,73,"/**
 * Calculates the hash table size based on expected elements.
 * @param expectedSize estimated number of elements to store
 * @return computed hash table capacity
 */","* Returns the power of 2 hashtable size required to hold the expected number of items or the
   * minimum hashtable size, whichever is greater.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,link,com.google.common.collect.CompactLinkedHashMap:link(int),310,312,"/**
 * Retrieves a link by index.
 * @param i index of the link
 * @return link value at the specified index
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setLink,"com.google.common.collect.CompactLinkedHashMap:setLink(int,long)",314,316,"/**
 * Sets a link value at specified index.
 * @param i index of the link to set
 * @param value new link value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,getPredecessor,com.google.common.collect.CompactLinkedHashSet:getPredecessor(int),162,164,"/**
 * Retrieves the predecessor index of an entry.
 * @param entry index of the current entry
 * @return index of the preceding entry or -1 if none exists
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,setPredecessor,"com.google.common.collect.CompactLinkedHashSet:setPredecessor(int,int)",175,177,"/**
 * Sets the predecessor of an entry.
 * @param entry index of the entry
 * @param pred predecessor value to set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,getSuccessor,com.google.common.collect.CompactLinkedHashSet:getSuccessor(int),166,169,"/**
 * Retrieves the successor index of an entry.
 * @param entry index of the current element
 * @return index of the next element, adjusted by subtracting 1
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,setSuccessor,"com.google.common.collect.CompactLinkedHashSet:setSuccessor(int,int)",171,173,"/**
 * Sets the successor index for an entry.
 * @param entry the index of the entry
 * @param succ the successor index to be set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compare,"com.google.common.collect.ComparisonChain$1:compare(int,int)",242,242,"/**
 * Compares two integers and chains comparison results.
 * @param left first integer to compare
 * @param right second integer to compare
 * @return ComparisonChain instance for further comparisons or final result
 */","* Compares two {@code int} values as specified by {@link Integer#compare}, <i>if</i> the result
   * of this comparison chain has not already been determined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,compare,"com.google.common.primitives.Ints$LexicographicalComparator:compare(int[],int[])",464,476,"/**
* Compares two integer arrays lexicographically.
* @param left first array to compare
* @param right second array to compare
* @return negative, zero, or positive if left is less than, equal to, or greater than right
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compare,"com.google.common.collect.ComparisonChain$1:compare(long,long)",248,248,"/**
 * Compares two long values and returns a comparison chain.
 * @param left first value to compare
 * @param right second value to compare
 * @return ComparisonChain object for further comparisons or result retrieval
 */","* Compares two {@code long} values as specified by {@link Long#compare}, <i>if</i> the result of
   * this comparison chain has not already been determined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,compare,"com.google.common.primitives.Longs$LexicographicalComparator:compare(long[],long[])",544,554,"/**
* Compares two long arrays lexicographically.
* @param left first array to compare
* @param right second array to compare
* @return negative, zero, or positive if left is less than, equal to, or greater than right
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compareTrueFirst,"com.google.common.collect.ComparisonChain$1:compareTrueFirst(boolean,boolean)",287,287,"/**
 * Compares two booleans with true values prioritized.
 * @param left first boolean value to compare
 * @param right second boolean value to compare
 * @return ComparisonChain instance reflecting the comparison
 */","* Compares two {@code boolean} values, considering {@code true} to be less than {@code false},
   * <i>if</i> the result of this comparison chain has not already been determined.
   *
   * <p>Java 8+ users: you can get the equivalent from {@link Booleans#trueFirst()}. For example:
   *
   * <pre>
   * Comparator.comparing(Foo::isBar, {@link Booleans#trueFirst()})
   * </pre>
   *
   * @since 12.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compareFalseFirst,"com.google.common.collect.ComparisonChain$1:compareFalseFirst(boolean,boolean)",301,301,"/**
 * Compares two booleans, placing false before true.
 * @param left first boolean to compare
 * @param right second boolean to compare
 * @return ComparisonChain object for further comparisons
 */","* Compares two {@code boolean} values, considering {@code false} to be less than {@code true},
   * <i>if</i> the result of this comparison chain has not already been determined.
   *
   * <p>Java 8+ users: you can get the equivalent from {@link Booleans#falseFirst()}. For example:
   *
   * <pre>
   * Comparator.comparing(Foo::isBar, {@link Booleans#falseFirst()})
   * </pre>
   *
   * @since 12.0 (present as {@code compare} since 2.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,compare,"com.google.common.primitives.Booleans$LexicographicalComparator:compare(boolean[],boolean[])",322,332,"/**
 * Compares two boolean arrays lexicographically.
 * @param left first boolean array to compare
 * @param right second boolean array to compare
 * @return negative if left is less, positive if left is greater, zero if equal
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingIterator.java,next,com.google.common.collect.ConcurrentHashMultiset$3:next(),54,59,"/**
* Returns the next element in the iteration.
* @return the next element in the iteration
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,readObject,com.google.common.collect.ConcurrentHashMultiset:readObject(java.io.ObjectInputStream),602,609,"/**
 * Deserializes the object from an input stream.
 * @param stream the input stream to read from
 * @throws IOException if I/O error occurs
 * @throws ClassNotFoundException if class not found during deserialization
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,leastValueAbove,com.google.common.collect.Cut$BelowAll:leastValueAbove(com.google.common.collect.DiscreteDomain),177,180,"/**
 * Returns the minimum value from the given discrete domain.
 * @param domain the discrete domain to query
 * @return the least value in the domain
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,greatestValueBelow,com.google.common.collect.Cut$AboveAll:greatestValueBelow(com.google.common.collect.DiscreteDomain),282,285,"/**
 * Returns the greatest value below the given domain's maximum.
 * @param domain the discrete domain to consider
 * @return the greatest value in the domain or null if none exists
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,isLessThan,com.google.common.collect.Cut$AboveValue:isLessThan(java.lang.Comparable),399,402,"/**
* Checks if the endpoint is less than a given value.
* @param value the value to compare against
* @return true if endpoint is less than value, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,isLessThan,com.google.common.collect.Cut$BelowValue:isLessThan(java.lang.Comparable),318,321,"/**
* Checks if this range's endpoint is less than or equal to the given value.
* @param value the value to compare against
* @return true if endpoint <= value, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,equalsOrThrow,"com.google.common.collect.RegularContiguousSet:equalsOrThrow(java.lang.Comparable,java.lang.Comparable)",115,117,"/**
 * Compares two Comparables and throws if they are not equal.
 * @param left the first comparable object
 * @param right the second comparable object, can be null
 * @return true if both are non-null and equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,<init>,com.google.common.collect.ContiguousSet:<init>(com.google.common.collect.DiscreteDomain),147,150,"/**
 * Constructs a contiguous set with the specified discrete domain.
 * @param domain the discrete domain defining the set's elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,<init>,"com.google.common.collect.RegularImmutableSortedSet:<init>(com.google.common.collect.ImmutableList,java.util.Comparator)",49,52,"/**
* Constructs an immutable sorted set from a list of elements.
* @param elements the list of elements to be included in the set
* @param comparator the comparator that defines the order of elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$AboveAll:<init>(),230,233,"/**
 * Initializes an AboveAll instance.
 * Calls superclass constructor with an empty string.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$AboveValue:<init>(java.lang.Comparable),395,397,"/**
 * Constructs an instance with the specified endpoint.
 * @param endpoint the C endpoint to be used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$BelowAll:<init>(),125,133,"/**
* Initializes a BelowAll object with a dummy endpoint.
* This class overrides methods using the endpoint field.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$BelowValue:<init>(java.lang.Comparable),314,316,"/**
 * Constructs a new instance with the specified endpoint.
 * @param endpoint the C endpoint to be used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withLowerBoundType,"com.google.common.collect.Cut$AboveValue:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",414,424,"/**
* Creates a cut with the specified lower bound type.
* @param boundType type of bound (OPEN or CLOSED)
* @param domain discrete domain for value operations
* @return new Cut instance with updated lower bound
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,hasLowerBound,com.google.common.collect.Range:hasLowerBound(),338,340,"/**
 * Checks if there is a defined lower bound.
 * @return true if lower bound exists, false otherwise
 */",Returns {@code true} if this range has a lower endpoint.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withUpperBoundType,"com.google.common.collect.Cut$AboveValue:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",426,436,"/**
* Creates a cut with specified upper bound type.
* @param boundType type of the bound (OPEN or CLOSED)
* @param domain discrete domain for value retrieval
* @return new Cut object based on bound type
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,compareTo,com.google.common.collect.Cut:compareTo(com.google.common.collect.Cut),71,85,"/**
* Compares this Cut to another based on endpoint and position.
* @param that the other Cut to compare against
* @return negative if this is less than that, positive if greater, zero if equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,hasUpperBound,com.google.common.collect.Range:hasUpperBound(),364,366,"/**
 * Checks if there is an upper bound defined.
 * @return true if an upper bound exists, false otherwise
 */",Returns {@code true} if this range has an upper endpoint.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,canonical,com.google.common.collect.Cut$AboveValue:canonical(com.google.common.collect.DiscreteDomain),458,462,"/**
* Returns the canonical cut for a given discrete domain.
* @param domain the discrete domain to find the cut for
* @return the canonical Cut object representing the boundary or aboveAll if none exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,<init>,com.google.common.collect.DescendingImmutableSortedMultiset:<init>(com.google.common.collect.ImmutableSortedMultiset),31,33,"/**
 * Creates a descending view of an immutable sorted multiset.
 * @param forward original immutable sorted multiset
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,<init>,"com.google.common.collect.RegularImmutableSortedMultiset:<init>(com.google.common.collect.RegularImmutableSortedSet,long[],int,int)",54,60,"/**
 * Constructs a RegularImmutableSortedMultiset.
 * @param elementSet sorted set of elements
 * @param cumulativeCounts array holding cumulative counts
 * @param offset starting index in the cumulativeCounts array
 * @param length number of elements to consider
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,elementSet,com.google.common.collect.DescendingImmutableSortedMultiset:elementSet(),55,58,"/**
 * Returns an immutable sorted set of elements in descending order.
 * @return ImmutableSortedSet containing elements in reverse order
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,valueComparator,com.google.common.collect.ImmutableSetMultimap:valueComparator(),673,677,"/**
* Returns comparator used for values, if any.
* @return Comparator or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,comparator,com.google.common.collect.ImmutableSortedMultiset:comparator(),328,331,"/**
 * Returns the comparator used to order elements in this set.
 * @return Comparator object or null if natural ordering is used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,indexOf,com.google.common.collect.DescendingImmutableSortedSet:indexOf(java.lang.Object),106,114,"/**
 * Returns the reverse index of the first occurrence of the specified element.
 * @param target the element to search for
 * @return the reverse index or -1 if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,entrySet,com.google.common.collect.DescendingMultiset:entrySet(),116,120,"/**
 * Returns a set view of the entries in this collection.
 * @return A Set containing all entries, lazily initialized if necessary.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,<init>,com.google.common.collect.DiscreteDomain:<init>(),250,252,"/**
 * Constructs a new DiscreteDomain with default settings.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,tailSetImpl,"com.google.common.collect.EmptyContiguousSet:tailSetImpl(java.lang.Object,boolean)",81,84,"/**
* Returns a view of the set from fromElement to the end.
* @param fromElement lower bound of the range (inclusive)
* @return ContiguousSet from fromElement to the end
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,subSetImpl,"com.google.common.collect.EmptyContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",75,79,"/**
 * Returns the entire set as it is already contiguous.
 * @param fromElement lower bound of the subset
 * @param fromInclusive true if the lower bound is inclusive
 * @param toElement upper bound of the subset
 * @param toInclusive true if the upper bound is inclusive
 * @return the original set since it's already contiguous
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,headSetImpl,"com.google.common.collect.EmptyContiguousSet:headSetImpl(java.lang.Object,boolean)",70,73,"/**
 * Returns this set as the head set up to but excluding/to including the specified element.
 * @param toElement upper bound element for the head set
 * @param inclusive true if the upper bound is inclusive
 * @return this set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,writeObject,com.google.common.collect.EnumBiMap:writeObject(java.io.ObjectOutputStream),142,148,"/**
* Custom serialization method for the map.
* @param stream ObjectOutputStream to write data
* @throws IOException if I/O error occurs
*/","* @serialData the key class, value class, number of entries, first key, first value, second key,
   *     second value, and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,writeObject,com.google.common.collect.EnumHashBiMap:writeObject(java.io.ObjectOutputStream),117,122,"/**
 * Writes object state to ObjectOutputStream.
 * @param stream the ObjectOutputStream to write to
 * @throws IOException if an I/O error occurs
 */","* @serialData the key class, number of entries, first key, first value, second key, second value,
   *     and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,writeObject,com.google.common.collect.HashBiMap:writeObject(java.io.ObjectOutputStream),783,788,"/**
* Writes object state to output stream.
* @param stream ObjectOutputStream for writing
* @throws IOException if I/O error occurs
*/","* @serialData the number of entries, first key, first value, second key, second value, and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,next,com.google.common.collect.EnumMultiset$Itr:next(),230,239,"/**
* Returns the next element in the iteration.
* Throws NoSuchElementException if no more elements are available.
* @return the next element of type T
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,checkIsE,com.google.common.collect.EnumMultiset:checkIsE(java.lang.Object),113,118,"/**
* Checks if element is of expected type.
* @param element the object to check
* @throws ClassCastException if element is not of expected type
*/","* Returns {@code element} cast to {@code E}, if it actually is a nonnull E. Otherwise, throws
   * either a NullPointerException or a ClassCastException as appropriate.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,count,com.google.common.collect.EnumMultiset:count(java.lang.Object),130,138,"/**
* Counts occurrences of an enum element.
* @param element the enum element to count
* @return count of the element or 0 if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,writeObject,com.google.common.collect.EnumMultiset:writeObject(java.io.ObjectOutputStream),298,303,"/**
 * Writes object state to a stream.
 * @param stream ObjectOutputStream for writing
 * @throws IOException if I/O error occurs
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,writeObject,com.google.common.collect.HashMultiset:writeObject(java.io.ObjectOutputStream),80,85,"/**
 * Writes object state to a stream.
 * @param stream ObjectOutputStream to serialize data
 * @throws IOException if an I/O error occurs
 */","* @serialData the number of distinct elements, the first element, its count, the second element,
   *     its count, and so on",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,writeObject,com.google.common.collect.LinkedHashMultiset:writeObject(java.io.ObjectOutputStream),88,93,"/**
 * Writes object state to a stream.
 * @param stream output stream for serialization
 * @throws IOException if an I/O error occurs
 */","* @serialData the number of distinct elements, the first element, its count, the second element,
   *     its count, and so on",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,writeObject,com.google.common.collect.TreeMultiset:writeObject(java.io.ObjectOutputStream),1068,1074,"/**
* Writes object state to output stream.
* @param stream ObjectOutputStream for writing
* @throws IOException if I/O error occurs
*/","* @serialData the comparator, the number of distinct elements, the first element, its count, the
   *     second element, its count, and so on",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,rank,com.google.common.collect.ExplicitOrdering:rank(java.lang.Object),44,50,"/**
* Retrieves the rank of a given value.
* @param value the value to find the rank for
* @return the rank of the value
* @throws IncomparableValueException if the value is not found in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,clear,com.google.common.collect.FilteredEntryMultimap$AsMap:clear(),181,184,"/**
 * Clears all entries in the filtered multimap.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,<init>,com.google.common.collect.ImmutableRangeMap$Builder:<init>(),114,116,"/**
* Initializes a new Builder with an empty entries list.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,<init>,com.google.common.collect.ImmutableRangeSet$Builder:<init>(),760,762,"/**
* Initializes a new Builder with an empty list of ranges.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,<init>,com.google.common.collect.ImmutableTable$Builder:<init>(),200,200,"/**
 * Constructs a new Builder instance.
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableTable#builder}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,<init>,com.google.common.io.Files$1:<init>(),73,73,"/**
 * Private constructor to prevent instantiation of utility class.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,<init>,com.google.common.io.Resources$1:<init>(),47,47,"/**
 * Private constructor to prevent instantiation of this utility class.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,removeAll,com.google.common.collect.FilteredEntryMultimap:removeAll(java.lang.Object),106,109,"/**
* Removes all values associated with the specified key.
* @param key the key whose values are to be removed
* @return a collection of removed values or an empty unmodifiable collection if none were present
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,unfiltered,com.google.common.collect.FilteredKeyListMultimap:unfiltered(),36,39,"/**
 * Returns an unfiltered version of this multimap.
 * @return ListMultimap containing all entries without filters applied
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,delegate,com.google.common.collect.ForwardingList:delegate(),60,61,"/**
 * Delegates to a specific implementation to fetch a list of elements.
 * @return List of elements of type E
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,removeAll,com.google.common.collect.FilteredKeyMultimap:removeAll(java.lang.Object),79,82,"/**
* Removes all values associated with a given key.
* @param key key whose mappings are to be removed
* @return collection of removed values or empty collection if key not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,from,com.google.common.collect.FluentIterable:from(java.lang.Object[]),160,162,"/**
* Creates a FluentIterable from an array of elements.
* @param elements array of elements to be iterated over
* @return FluentIterable instance containing the elements
*/","* Returns a fluent iterable containing {@code elements} in the specified order.
   *
   * <p>The returned iterable is an unmodifiable view of the input array.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#of(Object[])
   * Stream.of(T...)}.
   *
   * @since 20.0 (since 18.0 as an overload of {@code of})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,of,com.google.common.collect.FluentIterable:of(),311,314,"/**
* Creates an empty FluentIterable.
* @param <E> the element type
* @return a FluentIterable with no elements
*/","* Returns a fluent iterable containing no elements.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,isEmpty,com.google.common.collect.FluentIterable:isEmpty(),605,607,"/**
 * Checks if the collection is empty.
 * @return true if no elements present, false otherwise
 */","* Determines whether this fluent iterable is empty.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code !stream.findAny().isPresent()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,append,com.google.common.collect.FluentIterable:append(java.lang.Iterable),392,394,"/**
* Appends another iterable to this one.
* @param other the iterable to append
* @return a new FluentIterable containing elements of both
*/","* Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable,
   * followed by those of {@code other}. The iterators are not polled until necessary.
   *
   * <p>The returned iterable's {@code Iterator} supports {@code remove()} when the corresponding
   * {@code Iterator} supports it.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#concat}.
   *
   * @since 18.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,"com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable)",429,432,"/**
* Concatenates two iterables.
* @param a first iterable
* @param b second iterable
* @return combined iterable containing elements from both a and b
*/","* Combines two iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements in {@code a}, followed by the elements in {@code b}. The source
   * iterators are not polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Stream.concat(a, b)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,"com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)",445,448,"/**
 * Concatenates three iterables into one.
 * @param a first iterable
 * @param b second iterable
 * @param c third iterable
 * @return concatenated iterable containing elements from a, b, and c
 */","* Combines three iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the
   * elements in {@code c}. The source iterators are not polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Streams.concat(a, b, c)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,"com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)",462,468,"/**
* Concatenates multiple iterables into one.
* @param a,b,c,d iterables to concatenate
* @return combined iterable of all inputs
*/","* Combines four iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the
   * elements in {@code c}, followed by the elements in {@code d}. The source iterators are not
   * polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Streams.concat(a, b, c, d)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,stream,com.google.common.collect.FluentIterable:stream(),850,852,"/**
 * Returns a stream of elements from the delegate collection.
 * @return Stream containing elements of type E
 */","* Returns a stream of this fluent iterable's contents (similar to calling {@link
   * Collection#stream} on a collection).
   *
   * <p><b>Note:</b> the earlier in the chain you can switch to {@code Stream} usage (ideally not
   * going through {@code FluentIterable} at all), the more performant and idiomatic your code will
   * be. This method is a transitional aid, to be used only when really necessary.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,remainingCapacity,com.google.common.collect.ForwardingBlockingDeque:remainingCapacity(),61,64,"/**
 * Returns the remaining capacity of the delegate collection.
 * @return int representing the remaining capacity
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,putFirst,com.google.common.collect.ForwardingBlockingDeque:putFirst(java.lang.Object),66,69,"/**
 * Adds an element to the front of the queue.
 * @param e the element to add
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,putLast,com.google.common.collect.ForwardingBlockingDeque:putLast(java.lang.Object),71,74,"/**
 * Adds an element to the end of the queue.
 * @param e the element to add
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,offerFirst,"com.google.common.collect.ForwardingBlockingDeque:offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit)",76,79,"/**
* Adds element to the front of the queue with timeout.
* @param e element to add
* @param timeout maximum time to wait for space
* @param unit time unit for timeout
* @return true if added, false if timed out or interrupted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,offerLast,"com.google.common.collect.ForwardingBlockingDeque:offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)",81,84,"/**
 * Offers an element at the end of the deque with a timeout.
 * @param e the element to add
 * @param timeout the maximum time to wait for space in the deque
 * @param unit the time unit of the timeout parameter
 * @return true if the element was added, false if timed out
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,takeFirst,com.google.common.collect.ForwardingBlockingDeque:takeFirst(),86,89,"/**
 * Retrieves and removes the first element from the queue.
 * @return the head of this queue
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,takeLast,com.google.common.collect.ForwardingBlockingDeque:takeLast(),91,94,"/**
 * Retrieves and removes the last element from the queue.
 * @return the last element of the queue
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,pollFirst,"com.google.common.collect.ForwardingBlockingDeque:pollFirst(long,java.util.concurrent.TimeUnit)",96,99,"/**
* Retrieves and removes the first element of this deque waiting up to the specified time.
* @param timeout how long to wait before giving up, in units of {@code unit}
* @param unit a {@code TimeUnit} determining how to interpret the {@code timeout} parameter
* @return the head of this deque, or {@code null} if the specified waiting time elapses before an element is available
* @throws InterruptedException if interrupted while waiting
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,pollLast,"com.google.common.collect.ForwardingBlockingDeque:pollLast(long,java.util.concurrent.TimeUnit)",101,104,"/**
* Retrieves and removes the last element of the deque within a specified time.
* @param timeout maximum time to wait for an element
* @param unit time unit for the timeout
* @return the last element or null if not available before the timeout
* @throws InterruptedException if interrupted while waiting
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,put,com.google.common.collect.ForwardingBlockingDeque:put(java.lang.Object),106,109,"/**
 * Adds an element to the underlying collection.
 * @param e element to add
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,offer,"com.google.common.collect.ForwardingBlockingDeque:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)",111,114,"/**
 * Offers an element to the queue with a specified timeout.
 * @param e element to add
 * @param timeout maximum time to wait
 * @param unit time unit for timeout
 * @return true if successful, false if timed out
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,take,com.google.common.collect.ForwardingBlockingDeque:take(),116,119,"/**
 * Retrieves and removes an element from the queue.
 * Blocks until an element is available.
 * @return the head of this queue
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,poll,"com.google.common.collect.ForwardingBlockingDeque:poll(long,java.util.concurrent.TimeUnit)",121,124,"/**
* Retrieves and removes an element from the queue with a specified timeout.
* @param timeout maximum time to wait for an element
* @param unit time unit of the timeout parameter
* @return the head of this queue, or null if no element is available within the given timeout
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,drainTo,com.google.common.collect.ForwardingBlockingDeque:drainTo(java.util.Collection),126,129,"/**
 * Drains all available elements to the provided collection.
 * @param c target collection to add elements
 * @return number of elements drained
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,drainTo,"com.google.common.collect.ForwardingBlockingDeque:drainTo(java.util.Collection,int)",131,134,"/**
 * Transfers up to maxElements elements from this collection to another.
 * @param c destination collection
 * @param maxElements maximum number of elements to transfer
 * @return the number of elements transferred
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,frequency,"com.google.common.collect.Iterators:frequency(java.util.Iterator,java.lang.Object)",381,389,"/**
* Counts occurrences of an element in an iterator.
* @param iterator source of elements
* @param element target element to count
* @return number of times element appears in iterator
*/","* Returns the number of elements in the specified iterator that equal the specified object. The
   * iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @see Collections#frequency",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsKeyImpl,"com.google.common.collect.Maps:containsKeyImpl(java.util.Map,java.lang.Object)",3833,3835,"/**
 * Checks if the map contains the specified key.
 * @param map the map to search in
 * @param key the key to look for
 * @return true if the key is present, false otherwise
 */",An admittedly inefficient implementation of {@link Map#containsKey}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsValueImpl,"com.google.common.collect.Maps:containsValueImpl(java.util.Map,java.lang.Object)",3838,3840,"/**
 * Checks if the map contains the specified value.
 * @param map the map to search in
 * @param value the value to look for
 * @return true if the value is found, false otherwise
 */",An implementation of {@link Map#containsValue}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardAddAll,"com.google.common.collect.ForwardingList:standardAddAll(int,java.lang.Iterable)",148,150,"/**
 * Adds all elements from an iterable to this list at a specified position.
 * @param index position at which to insert the elements
 * @param elements iterable containing elements to add
 * @return true if the list was modified as a result of the call
 */","* A sensible default implementation of {@link #addAll(int, Collection)}, in terms of the {@code
   * add} method of {@link #listIterator(int)}. If you override {@link #listIterator(int)}, you may
   * wish to override {@link #addAll(int, Collection)} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardSubList,"com.google.common.collect.ForwardingList:standardSubList(int,int)",214,216,"/**
 * Returns a sublist of elements from fromIndex (inclusive) to toIndex (exclusive).
 * @param fromIndex the starting index (inclusive)
 * @param toIndex the ending index (exclusive)
 * @return List containing the specified range of elements
 */","* A sensible default implementation of {@link #subList(int, int)}. If you override any other
   * methods, you may wish to override {@link #subList(int, int)} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardHashCode,com.google.common.collect.ForwardingList:standardHashCode(),236,238,"/**
 * Generates a hash code based on the object's fields.
 * @return computed hash code
 */","* A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #hashCode} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,get,com.google.common.collect.ForwardingListMultimap:get(java.lang.Object),46,49,"/**
 * Retrieves values associated with the given key.
 * @param key the key to look up
 * @return a list of values or an empty list if no mapping exists
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,replaceValues,"com.google.common.collect.ForwardingListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",57,61,"/**
* Replaces values associated with a key.
* @param key the key to update
* @param values new values to associate with the key
* @return list of old values replaced
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardPutAll,com.google.common.collect.ForwardingMap:standardPutAll(java.util.Map),146,148,"/**
* Adds all entries from the specified map to this map.
* @param map the map whose entries are to be added
*/","* A sensible definition of {@link #putAll(Map)} in terms of {@link #put(Object, Object)}. If you
   * override {@link #put(Object, Object)}, you may wish to override {@link #putAll(Map)} to forward
   * to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardEquals,com.google.common.collect.ForwardingMap:standardEquals(java.lang.Object),275,277,"/**
 * Checks equality with another object using standard equals implementation.
 * @param object the object to compare with
 * @return true if objects are equal, false otherwise
 */","* A sensible definition of {@link #equals} in terms of the {@code equals} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #equals} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,equals,com.google.common.collect.ImmutableMap:equals(java.lang.Object),1205,1208,"/**
 * Checks equality with another object.
 * @param object the object to compare
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,iterator,com.google.common.collect.ForwardingMultiset$StandardElementSet:iterator(),250,253,"/**
 * Returns an iterator over the elements of the multiset.
 * @return Iterator over elements, allowing traversal
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,replaceAll,com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:replaceAll(java.util.function.BiFunction),286,289,"/**
* Applies a function to each entry and replaces its value.
* @param function mapping function for key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,lowerEntry,com.google.common.collect.ForwardingNavigableMap:lowerEntry(java.lang.Object),66,69,"/**
* Returns the greatest entry with a key less than the specified key.
* @param key the key to compare against
* @return an Entry or null if no such entry exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,lowerKey,com.google.common.collect.ForwardingNavigableMap:lowerKey(java.lang.Object),80,83,"/**
* Returns the greatest key less than the specified key.
* @param key the key to search for
* @return the greatest key less than key, or null if no such key exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,floorEntry,com.google.common.collect.ForwardingNavigableMap:floorEntry(java.lang.Object),94,97,"/**
 * Returns the greatest entry less than or equal to the specified key.
 * @param key the key to compare against
 * @return an Entry with the greatest key less than or equal to the specified key, or null if no such entry exists
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,floorKey,com.google.common.collect.ForwardingNavigableMap:floorKey(java.lang.Object),108,111,"/**
* Returns the greatest key less than or equal to the specified key.
* @param key the key to search for
* @return the greatest key less than or equal to key, or null if no such key exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,ceilingEntry,com.google.common.collect.ForwardingNavigableMap:ceilingEntry(java.lang.Object),122,125,"/**
 * Returns the smallest entry greater than or equal to the specified key.
 * @param key the key to search for
 * @return an Entry with the smallest key greater than or equal to the specified key, or null if no such entry exists
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,ceilingKey,com.google.common.collect.ForwardingNavigableMap:ceilingKey(java.lang.Object),136,139,"/**
 * Finds the least key greater than or equal to the specified key.
 * @param key the key to search for
 * @return the least key greater than or equal to key, or null if no such key exists
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,higherEntry,com.google.common.collect.ForwardingNavigableMap:higherEntry(java.lang.Object),150,153,"/**
 * Finds the entry with the least key greater than the specified key.
 * @param key the key to search for
 * @return an Entry with the least key greater than key, or null if no such entry exists
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,higherKey,com.google.common.collect.ForwardingNavigableMap:higherKey(java.lang.Object),164,167,"/**
* Returns the least key greater than the given key.
* @param key reference point
* @return next higher key or null if no such key exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,firstEntry,com.google.common.collect.ForwardingNavigableMap:firstEntry(),178,181,"/**
 * Returns the first entry in the map.
 * @return the first Entry or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,lastEntry,com.google.common.collect.ForwardingNavigableMap:lastEntry(),206,209,"/**
 * Retrieves the last entry in the map.
 * @return the last Entry or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,pollFirstEntry,com.google.common.collect.ForwardingNavigableMap:pollFirstEntry(),233,236,"/**
 * Removes and returns the first entry from the map.
 * @return the first Entry or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,pollLastEntry,com.google.common.collect.ForwardingNavigableMap:pollLastEntry(),247,250,"/**
 * Removes and returns the last entry from this map.
 * @return the last entry or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,descendingMap,com.google.common.collect.ForwardingNavigableMap:descendingMap(),261,264,"/**
 * Returns a reverse-ordered view of the map.
 * @return NavigableMap with keys in descending order
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,navigableKeySet,com.google.common.collect.ForwardingNavigableMap:navigableKeySet(),327,330,"/**
* Returns navigable key set of the map.
* @return NavigableSet containing all keys in ascending order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,descendingKeySet,com.google.common.collect.ForwardingNavigableMap:descendingKeySet(),347,350,"/**
 * Returns a reverse-ordered view of the keys.
 * @return NavigableSet containing keys in descending order
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,subMap,"com.google.common.collect.ForwardingNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",374,381,"/**
 * Returns a submap containing keys within the specified range.
 * @param fromKey lower bound of the range (inclusive if fromInclusive is true)
 * @param fromInclusive whether the lower bound key is inclusive
 * @param toKey upper bound of the range (inclusive if toInclusive is true)
 * @param toInclusive whether the upper bound key is inclusive
 * @return NavigableMap containing keys within the specified range
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,headMap,"com.google.common.collect.ForwardingNavigableMap:headMap(java.lang.Object,boolean)",383,386,"/**
* Returns a navigable map containing entries up to (or including) the specified key.
* @param toKey the upper bound key
* @param inclusive true if the upper bound is inclusive
* @return NavigableMap with entries up to the specified key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,tailMap,"com.google.common.collect.ForwardingNavigableMap:tailMap(java.lang.Object,boolean)",388,391,"/**
 * Returns a navigable map containing entries greater than or equal to the specified key.
 * @param fromKey the lower bound of the returned map
 * @param inclusive whether the lower bound is inclusive
 * @return NavigableMap with entries >= fromKey
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,elementSet,com.google.common.collect.ForwardingSortedMultiset:elementSet(),54,57,"/**
 * Returns the navigable set of elements.
 * Delegates to the underlying collection.
 * @return NavigableSet containing all elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,comparator,com.google.common.collect.ForwardingSortedMultiset:comparator(),79,82,"/**
 * Returns the comparator used by this collection.
 * @return the comparator or null if natural ordering is used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,descendingMultiset,com.google.common.collect.ForwardingSortedMultiset:descendingMultiset(),84,87,"/**
 * Returns the multiset with elements in reverse order.
 * @return SortedMultiset with elements sorted in descending order
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,firstEntry,com.google.common.collect.ForwardingSortedMultiset:firstEntry(),111,114,"/**
 * Retrieves the first entry in the map.
 * @return the first Entry or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,lastEntry,com.google.common.collect.ForwardingSortedMultiset:lastEntry(),131,134,"/**
 * Returns the last entry in the navigable set.
 * @return the last Entry or null if set is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,pollFirstEntry,com.google.common.collect.ForwardingSortedMultiset:pollFirstEntry(),152,155,"/**
 * Removes and returns the first entry in the map.
 * @return the first Entry or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,pollLastEntry,com.google.common.collect.ForwardingSortedMultiset:pollLastEntry(),174,177,"/**
 * Removes and returns the last entry in the map.
 * @return the last Entry or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,headMultiset,"com.google.common.collect.ForwardingSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",197,200,"/**
 * Returns a multiset of elements less than or equal to the specified upper bound.
 * @param upperBound the upper bound element
 * @param boundType specifies if the bound is inclusive or exclusive
 * @return SortedMultiset with elements up to the upper bound
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,subMultiset,"com.google.common.collect.ForwardingSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",202,209,"/**
* Returns a view of the subset of elements within specified bounds.
* @param lowerBound the lower bound element
* @param lowerBoundType type of inclusion for the lower bound
* @param upperBound the upper bound element
* @param upperBoundType type of inclusion for the upper bound
* @return SortedMultiset containing elements within the bounds
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,tailMultiset,"com.google.common.collect.ForwardingSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",227,230,"/**
 * Returns a view of the elements greater than or equal to the specified lower bound.
 * @param lowerBound the lower bound to compare against
 * @param boundType specifies whether the lower bound is inclusive or exclusive
 * @return a SortedMultiset containing elements greater than or equal to the lower bound
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,get,com.google.common.collect.ForwardingSortedSetMultimap:get(java.lang.Object),47,50,"/**
 * Retrieves a sorted set of values associated with the specified key.
 * @param key the key to look up
 * @return a SortedSet of values or an empty set if no mapping exists
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,removeAll,com.google.common.collect.ForwardingSortedSetMultimap:removeAll(java.lang.Object),52,55,"/**
 * Removes all values associated with the specified key.
 * @param key the key whose associated values are to be removed
 * @return a sorted set of removed values, possibly empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,valueComparator,com.google.common.collect.ForwardingSortedSetMultimap:valueComparator(),62,65,"/**
 * Returns the comparator used to order values.
 * Delegates to the underlying collection's comparator.
 * @return Comparator or null if natural ordering is used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,delegate,com.google.common.collect.ForwardingSetMultimap:delegate(),43,44,"/**
 * Returns the delegate multimap.
 * @return the underlying multimap implementation
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellSet,com.google.common.collect.Tables$UnmodifiableTable:cellSet(),554,557,"/**
* Returns an unmodifiable set of all cells in the matrix.
* @return Unmodifiable set of Cell objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,column,com.google.common.collect.Tables$UnmodifiableTable:column(java.lang.Object),564,567,"/**
* Returns an unmodifiable map of values by column key.
* @param columnKey the key for the column
* @return a map of row keys to values for the given column
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,columnKeySet,com.google.common.collect.Tables$UnmodifiableTable:columnKeySet(),569,572,"/**
 * Returns an unmodifiable set of all column keys.
 * @return Set containing all column keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,row,com.google.common.collect.Tables$UnmodifiableTable:row(java.lang.Object),597,600,"/**
 * Retrieves an unmodifiable view of the specified row.
 * @param rowKey key identifying the row to retrieve
 * @return unmodifiable map representing the row or null if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowKeySet,com.google.common.collect.Tables$UnmodifiableTable:rowKeySet(),602,605,"/**
 * Returns an unmodifiable set of row keys.
 * @return Set of row keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,values,com.google.common.collect.Tables$UnmodifiableTable:values(),612,615,"/**
 * Returns an unmodifiable collection of all values in the map.
 * @return Unmodifiable collection of values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,tooLow,com.google.common.collect.GeneralRange:tooLow(java.lang.Object),166,174,"/**
* Checks if the given value is below the lower bound.
* @param t the value to compare
* @return true if value is below the lower bound, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,tooHigh,com.google.common.collect.GeneralRange:tooHigh(java.lang.Object),176,184,"/**
* Checks if value exceeds upper bound.
* @param t the value to check
* @return true if value is too high, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,equals,com.google.common.collect.GeneralRange:equals(java.lang.Object),241,254,"/**
* Checks equality with another GeneralRange.
* @param obj the object to compare
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,hashCode,com.google.common.collect.GeneralRange:hashCode(),256,264,"/**
* Generates hash code based on comparator and endpoint details.
* @return calculated hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,<init>,"com.google.common.collect.HashBasedTable:<init>(java.util.Map,com.google.common.collect.HashBasedTable$Factory)",102,104,"/**
 * Constructs a HashBasedTable with the specified backing map and value factory.
 * @param backingMap the underlying map that backs this table
 * @param factory for creating new values when inserting into an empty row
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,<init>,"com.google.common.collect.StandardRowSortedTable:<init>(java.util.SortedMap,com.google.common.base.Supplier)",59,62,"/**
* Constructs a StandardRowSortedTable.
* @param backingMap sorted map holding row data
* @param factory supplier for creating new maps
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,newCustomTable,"com.google.common.collect.Tables:newCustomTable(java.util.Map,com.google.common.base.Supplier)",372,378,"/**
* Creates a new custom table with specified backing map and row map supplier.
* @param backingMap initial empty map for storing rows
* @param factory supplies new empty maps for each row
* @return Table instance initialized with the given parameters
*/","* Creates a table that uses the specified backing map and factory. It can generate a table based
   * on arbitrary {@link Map} classes.
   *
   * <p>The {@code factory}-generated and {@code backingMap} classes determine the table iteration
   * order. However, the table's {@code row()} method returns instances of a different class than
   * {@code factory.get()} does.
   *
   * <p>Call this method only when the simpler factory methods in classes like {@link
   * HashBasedTable} and {@link TreeBasedTable} won't suffice.
   *
   * <p>The views returned by the {@code Table} methods {@link Table#column}, {@link
   * Table#columnKeySet}, and {@link Table#columnMap} have iterators that don't support {@code
   * remove()}. Otherwise, all optional operations are supported. Null row keys, columns keys, and
   * values are not supported.
   *
   * <p>Lookups by row key are often faster than lookups by column key, because the data is stored
   * in a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still
   * runs quickly, since the row key is provided. However, {@code column(columnKey).size()} takes
   * longer, since an iteration across all row keys occurs.
   *
   * <p>Note that this implementation is not synchronized. If multiple threads access this table
   * concurrently and one of the threads modifies the table, it must be synchronized externally.
   *
   * <p>The table is serializable if {@code backingMap}, {@code factory}, the maps generated by
   * {@code factory}, and the table contents are all serializable.
   *
   * <p>Note: the table assumes complete ownership over of {@code backingMap} and the maps returned
   * by {@code factory}. Those objects should not be manually updated and they should not use soft,
   * weak, or phantom references.
   *
   * @param backingMap place to store the mapping from each row key to its corresponding column key
   *     / value map
   * @param factory supplier of new, empty maps that will each hold all column key / value mappings
   *     for a given row key
   * @throws IllegalArgumentException if {@code backingMap} is not empty
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,columnMap,com.google.common.collect.HashBasedTable:columnMap(),875,879,"/**
* Returns the column map.
* Initializes if not already created.
* @return Map of columns to rows to values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,columnKeySet,com.google.common.collect.HashBasedTable:columnKeySet(),680,684,"/**
* Returns the set of column keys.
* Initializes if not already created.
* @return Set of column keys
*/","* {@inheritDoc}
   *
   * <p>The returned set has an iterator that does not support {@code remove()}.
   *
   * <p>The set's iterator traverses the columns of the first row, the columns of the second row,
   * etc., skipping any columns that have appeared previously.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:size(),924,927,"/**
 * Returns the number of unique column keys.
 * @return size of the column key set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,keySet,com.google.common.collect.StandardTable$ColumnMap:keySet(),907,910,"/**
 * Returns the set of keys from the column map.
 * @return Set of column keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,column,com.google.common.collect.HashBasedTable:column(java.lang.Object),454,457,"/**
 * Returns a map representing a column.
 * @param columnKey key of the column to retrieve
 * @return map with column data or empty map if not found
 */","* {@inheritDoc}
   *
   * <p>The returned map's views have iterators that don't support {@code remove()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,row,com.google.common.collect.HashBasedTable:row(java.lang.Object),312,315,"/**
 * Retrieves a row from the table.
 * @param rowKey key identifying the row
 * @return Map representing the row or empty if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,clear,com.google.common.collect.HashBasedTable:clear(),135,138,"/**
 * Clears all entries from the map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.HashBasedTable:size(),124,131,"/**
* Returns total number of entries in all maps.
* @return sum of sizes of all contained maps
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,isEmpty,com.google.common.collect.HashBasedTable:isEmpty(),119,122,"/**
 * Checks if the map is empty.
 * @return true if the map contains no key-value mappings, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,clear,com.google.common.collect.HashBiMap$Inverse:clear(),609,612,"/**
 * Clears all elements from the underlying collection.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,containsKey,com.google.common.collect.HashBiMap$Inverse:containsKey(java.lang.Object),614,617,"/**
 * Checks if the map contains a specified value.
 * @param value the value to check for presence in the map
 * @return true if the value is found, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,inverse,com.google.common.collect.HashBiMap$Inverse:inverse(),648,651,"/**
 * Returns the inverse of this bimap.
 * @return A new BiMap where keys and values are swapped
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,values,com.google.common.collect.HashBiMap$Inverse:values(),686,689,"/**
 * Returns the set of keys from the underlying map.
 * @return Set of keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,writeReplace,com.google.common.collect.HashBiMap$Inverse:writeReplace(),755,757,"/**
 * Provides an alternative serialized form.
 * @return InverseSerializedForm instance representing the current state
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,readResolve,com.google.common.collect.HashBiMap$InverseSerializedForm:readResolve(),775,777,"/**
 * Returns the inverse of the Bimap.
 * @return Inverted Bimap instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,values,com.google.common.collect.HashBiMap:values(),512,515,"/**
 * Returns a set of all values in the map.
 * @return Set containing all values from the map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,next,com.google.common.collect.HashBiMap$Itr:next(),447,459,"/**
 * Returns the next element in the iteration.
 * @throws NoSuchElementException if no more elements are available
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,init,com.google.common.collect.HashBiMap:init(int),139,149,"/**
* Initializes the hash map with an expected size.
* @param expectedSize estimated number of entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,rehashIfNecessary,com.google.common.collect.HashBiMap:rehashIfNecessary(),380,397,"/**
 * Resizes hash tables if necessary to maintain load factor.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Serialization.java,populateMap,"com.google.common.collect.Serialization:populateMap(java.util.Map,java.io.ObjectInputStream)",73,77,"/**
 * Populates a map from an input stream.
 * @param map the map to populate
 * @param stream the input stream containing map data
 * @throws IOException if I/O error occurs
 * @throws ClassNotFoundException if class of serialized object cannot be found
 */","* Populates a map by reading an input stream, as part of deserialization. See {@link #writeMap}
   * for the data format.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySet,com.google.common.collect.HashBiMap:entrySet(),3758,3781,"/**
* Returns a set of map entries.
* @return Set containing all key-value pairs in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,readObject,com.google.common.collect.HashMultiset:readObject(java.io.ObjectInputStream),87,94,"/**
* Deserializes the multiset from an input stream.
* @param stream ObjectInputStream to read from
* @throws IOException if I/O error occurs
* @throws ClassNotFoundException if class not found during deserialization
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,readObject,com.google.common.collect.LinkedHashMultiset:readObject(java.io.ObjectInputStream),95,102,"/**
* Reads object state from input stream.
* @param stream source of serialized data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Serialization.java,populateMultiset,"com.google.common.collect.Serialization:populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream)",116,120,"/**
 * Populates a multiset from an input stream.
 * @param multiset the multiset to populate
 * @param stream the input stream containing element data
 * @throws IOException if reading from the stream fails
 * @throws ClassNotFoundException if a class in the stream cannot be found
 */","* Populates a multiset by reading an input stream, as part of deserialization. See {@link
   * #writeMultiset} for the data format.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Hashing.java,smearedHash,com.google.common.collect.Hashing:smearedHash(java.lang.Object),55,57,"/**
* Computes a smeared hash code for an object.
* @param o the object to hash, may be null
* @return smeared hash code of the object or 0 if null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,rebuildHashTable,"com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:rebuildHashTable(int,java.lang.Object[],int)",828,844,"/**
* Rebuilds a hash table with a new size.
* @param newTableSize the desired size of the new hash table
* @param elements array containing elements to be rehashed
* @param n number of elements to process from the elements array
* @return the newly built hash table
*/",Builds a new open-addressed hash table from the first n objects in elements.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableAsList.java,writeReplace,com.google.common.collect.ImmutableAsList:writeReplace(),84,89,"/**
* Returns a serialized form of the delegate collection.
* @return SerializedForm object representing the collection state
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,<init>,com.google.common.collect.ImmutableBiMap$Builder:<init>(int),347,349,"/**
 * Constructs a builder with the specified size.
 * @param size initial capacity of the builder
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,<init>,com.google.common.collect.ImmutableMap$Builder:<init>(),426,428,"/**
 * Initializes a new Builder with default capacity.
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableMap#builder}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,makeBuilder,com.google.common.collect.ImmutableMap$SerializedForm:makeBuilder(int),1299,1301,"/**
 * Creates a new builder instance.
 * @param size initial capacity for the builder
 * @return Builder object with specified size
 */",* Returns a builder that builds the unserialized type. Subclasses should override this method.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,builderWithExpectedSize,com.google.common.collect.ImmutableMap:builderWithExpectedSize(int),368,371,"/**
* Creates a new Builder with an initial capacity.
* @param expectedSize the expected number of entries
* @return a Builder instance
*/","* Returns a new builder, expecting the specified number of entries to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link
   * Builder#build} is called, the builder is likely to perform better than an unsized {@link
   * #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of entries added to the builder.
   *
   * @since 23.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,inverse,com.google.common.collect.RegularImmutableBiMap:inverse(),195,202,"/**
* Returns the inverse of this bi-map.
* @return ImmutableBiMap with keys and values swapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,valuePredicateOnEntries,com.google.common.collect.Maps:valuePredicateOnEntries(com.google.common.base.Predicate),2400,2403,"/**
* Creates a predicate on map entries based on value.
* @param valuePredicate condition for the entry values
* @return Predicate that checks if entry's value matches given condition
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,<init>,"com.google.common.collect.JdkBackedImmutableBiMap:<init>(com.google.common.collect.ImmutableList,java.util.Map,java.util.Map)",59,64,"/**
 * Initializes a JdkBackedImmutableBiMap with given entries and delegates.
 * @param entries list of key-value pairs
 * @param forwardDelegate map for forward lookup (K to V)
 * @param backwardDelegate map for backward lookup (V to K)
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,<init>,"com.google.common.collect.RegularImmutableBiMap:<init>(com.google.common.collect.ImmutableMapEntry[],com.google.common.collect.ImmutableMapEntry[],java.util.Map$Entry[],int,int)",116,127,"/**
* Constructs a RegularImmutableBiMap.
* @param keyTable array of entries for key lookup
* @param valueTable array of entries for value lookup
* @param entries array of map entries
* @param mask bitmask for table indexing
* @param hashCode precomputed hash code of the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,<init>,"com.google.common.collect.SingletonImmutableBiMap:<init>(java.lang.Object,java.lang.Object)",44,49,"/**
* Constructs a singleton immutable bi-map with one key-value pair.
* @param singleKey the unique key
* @param singleValue the value associated with the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,<init>,"com.google.common.collect.SingletonImmutableBiMap:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableBiMap)",51,55,"/**
* Constructs a singleton immutable bi-map.
* @param singleKey the key for the singleton entry
* @param singleValue the value for the singleton entry
* @param inverse the inverse bi-map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,<init>,"com.google.common.collect.JdkBackedImmutableMap:<init>(java.util.Map,com.google.common.collect.ImmutableList)",91,94,"/**
 * Constructs an immutable map backed by JDK collections.
 * @param delegateMap the underlying mutable map
 * @param entries list of immutable map entries
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,<init>,"com.google.common.collect.RegularImmutableMap:<init>(java.util.Map$Entry[],com.google.common.collect.ImmutableMapEntry[],int)",217,222,"/**
* Initializes a RegularImmutableMap with given entries, table, and mask.
* @param entries array of map entries
* @param table hash table for fast lookups (nullable)
* @param mask bitmask for computing hash bucket index
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,readResolve,com.google.common.collect.ImmutableClassToInstanceMap:readResolve(),202,204,"/**
 * Returns an empty instance or self if not empty.
 * @return Empty instance or current instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,ensureCapacity,com.google.common.collect.ImmutableMap$Builder:ensureCapacity(int),437,444,"/**
 * Ensures the array has enough capacity.
 * @param minCapacity minimum required capacity
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,ensureCapacity,com.google.common.collect.ImmutableSet$SetBuilderImpl:ensureCapacity(int),603,609,"/**
* Ensures the array has at least the specified capacity.
* @param minCapacity minimum required capacity
*/","* Resizes internal data structures if necessary to store the specified number of distinct
     * elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList$Builder:<init>(int),814,817,"/**
* Initializes a Builder with specified capacity.
* @param capacity initial size of the builder's contents array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,<init>,com.google.common.collect.ImmutableMultiset$Builder:<init>(com.google.common.collect.Multiset),487,489,"/**
 * Constructs a builder with specified multiset contents.
 * @param contents initial multiset of elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$Builder:<init>(boolean),493,495,"/**
 * Initializes a new Builder instance.
 * @param subclass ignored parameter
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,addAll,com.google.common.collect.ImmutableSet$Builder:addAll(java.lang.Iterable),540,545,"/**
 * Adds all elements from the specified iterable.
 * @param elements iterable of elements to add
 * @return current builder instance
 */","* Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate
     * elements (only the first duplicate element is added).
     *
     * @param elements the elements to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,addAll,com.google.common.collect.ImmutableList$Builder:addAll(java.util.Iterator),905,910,"/**
* Adds all elements from iterator to builder.
* @param elements iterator of elements to add
* @return current builder instance
*/","* Adds each element of {@code elements} to the {@code ImmutableList}.
     *
     * @param elements the {@code Iterator} to add to the {@code ImmutableList}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,addAll,com.google.common.collect.ImmutableMultiset$Builder:addAll(java.util.Iterator),578,583,"/**
* Adds all elements from iterator to builder.
* @param elements iterator of elements to add
* @return the current builder instance
*/","* Adds each element of {@code elements} to the {@code ImmutableMultiset}.
     *
     * @param elements the elements to add to the {@code ImmutableMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,addAll,com.google.common.collect.ImmutableSet$Builder:addAll(java.util.Iterator),547,552,"/**
 * Adds all elements from iterator to builder.
 * @param elements iterator of elements to add
 * @return this builder instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList:<init>(),392,392,"/**
 * Constructs an empty immutable list.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,<init>,com.google.common.collect.ImmutableMapValues:<init>(com.google.common.collect.ImmutableMap),40,42,"/**
 * Constructs an instance with the given immutable map.
 * @param map the immutable map to store
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,<init>,com.google.common.collect.ImmutableMultimap$EntryCollection:<init>(com.google.common.collect.ImmutableMultimap),623,625,"/**
 * Constructs an EntryCollection from an ImmutableMultimap.
 * @param multimap the source ImmutableMultimap to initialize with
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,<init>,com.google.common.collect.ImmutableMultimap$Values:<init>(com.google.common.collect.ImmutableMultimap),830,832,"/**
 * Constructs a new instance with the given multimap.
 * @param multimap immutable multimap to store values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet:<init>(),277,277,"/**
* Constructs an empty immutable set.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,addAll,com.google.common.collect.ImmutableList$Builder:addAll(java.lang.Iterable),881,896,"/**
* Adds all elements from the given iterable.
* @param elements iterable of elements to add
* @return this builder instance
*/","* Adds each element of {@code elements} to the {@code ImmutableList}.
     *
     * @param elements the {@code Iterable} to add to the {@code ImmutableList}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,writeReplace,com.google.common.collect.ImmutableList:writeReplace(),748,753,"/**
 * Provides custom serialization replacement.
 * @return SerializedForm object containing array representation
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,writeReplace,com.google.common.collect.ImmutableEnumMap:writeReplace(),118,122,"/**
 * Returns serialized form of the enum delegate.
 * @return EnumSerializedForm object representing the serialized state
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,entryIterator,com.google.common.collect.ImmutableEnumMap:entryIterator(),97,100,"/**
* Returns an unmodifiable iterator over entries.
* @return Iterator of Entry objects from the delegate collection
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,iterator,com.google.common.collect.Maps$UnmodifiableEntries:iterator(),1544,1547,"/**
 * Returns an unmodifiable iterator over the entries.
 * @return Iterator of Entry objects
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,writeReplace,com.google.common.collect.ImmutableEnumSet:writeReplace(),140,144,"/**
* Returns an EnumSerializedForm instance for serialization.
* @return EnumSerializedForm object representing the delegate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,combine,com.google.common.collect.ImmutableList$Builder:combine(com.google.common.collect.ImmutableList$Builder),912,917,"/**
 * Combines contents from another builder.
 * @param builder source builder to merge
 * @return current builder with combined contents
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,reverseIndex,com.google.common.collect.ImmutableList$ReverseImmutableList:reverseIndex(int),644,646,"/**
* Reverses the given index based on the current size.
* @param index original index
* @return reversed index
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,reversePosition,com.google.common.collect.ImmutableList$ReverseImmutableList:reversePosition(int),648,650,"/**
 * Calculates the reversed position of an index.
 * @param index original index
 * @return reversed index based on current size
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList$SubList:listIterator(int),406,414,"/**
 * Returns an unmodifiable list iterator starting at the specified index.
 * @param index starting position for the iterator
 * @return UnmodifiableListIterator for this list
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList:listIterator(),401,404,"/**
* Returns an unmodifiable list iterator over elements.
* @return UnmodifiableListIterator starting from index 0
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,listIterator,com.google.common.collect.RegularImmutableAsList:listIterator(int),55,59,"/**
 * Returns an unmodifiable list iterator starting at the specified index.
 * @param index starting index for the iteration
 * @return UnmodifiableListIterator of elements from the list
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,toImmutableList,com.google.common.collect.ImmutableList:toImmutableList(),74,76,"/**
* Converts a stream to an immutable list.
* @return Collector that gathers elements into an ImmutableList
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableList}, in encounter order.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner2:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",1434,1438,"/**
* Constructs a Combiner2 with two futures.
* @param future1 first closing future
* @param future2 second closing future
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner3:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",1603,1609,"/**
* Constructs a Combiner3 with three ClosingFutures.
* @param future1 first ClosingFuture to combine
* @param future2 second ClosingFuture to combine
* @param future3 third ClosingFuture to combine
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner4:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",1794,1804,"/**
* Combines four ClosingFutures into a single composite future.
* @param future1 first ClosingFuture to combine
* @param future2 second ClosingFuture to combine
* @param future3 third ClosingFuture to combine
* @param future4 fourth ClosingFuture to combine
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner5:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",2001,2013,"/**
 * Combines five ClosingFuture objects.
 * @param future1 first future to combine
 * @param future2 second future to combine
 * @param future3 third future to combine
 * @param future4 fourth future to combine
 * @param future5 fifth future to combine
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,copyIntoArray,"com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:copyIntoArray(java.lang.Object[],int)",56,60,"/**
* Copies entries into an array.
* @param dst destination array for copied entries
* @param offset starting index in the destination array
* @return number of elements copied
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyIntoArray,"com.google.common.collect.ImmutableSet$Indexed:copyIntoArray(java.lang.Object[],int)",357,360,"/**
 * Copies elements into an array.
 * @param dst destination array
 * @param offset starting index in the destination array
 * @return number of elements copied
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,copyIntoArray,"com.google.common.collect.IndexedImmutableSet:copyIntoArray(java.lang.Object[],int)",51,55,"/**
 * Copies elements into an array.
 * @param dst destination array
 * @param offset starting index in the destination array
 * @return number of elements copied
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,copyIntoArray,"com.google.common.collect.RegularImmutableAsList:copyIntoArray(java.lang.Object[],int)",67,71,"/**
* Copies elements into an array.
* @param dst destination array
* @param offset starting index in the destination array
* @return number of elements copied
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,copyIntoArray,"com.google.common.collect.RegularImmutableSortedSet:copyIntoArray(java.lang.Object[],int)",165,168,"/**
* Copies elements into a destination array.
* @param dst destination array to copy into
* @param offset starting index in the destination array
* @return number of elements copied
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,hashCode,com.google.common.reflect.Types$ParameterizedTypeImpl:hashCode(),295,300,"/**
* Generates hash code based on owner type, arguments list, and raw type.
* @return computed hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,hashCode,com.google.common.reflect.Types$WildcardTypeImpl:hashCode(),497,500,"/**
 * Generates hash code based on lower and upper bounds.
 * @return combined hash code of lower and upper bounds
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,com.google.common.collect.ImmutableMultimap:of(),84,86,"/**
 * Creates an empty immutable multimap.
 * @return ImmutableMultimap with no entries
 */","* Returns an empty multimap.
   *
   * <p><b>Performance note:</b> the instance returned is a singleton.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,<init>,"com.google.common.collect.ImmutableListMultimap:<init>(com.google.common.collect.ImmutableMap,int)",435,437,"/**
 * Constructs an ImmutableListMultimap from an ImmutableMap of keys to ImmutableList values.
 * @param map ImmutableMap where each key maps to a list of immutable values
 * @param size Total number of entries in the multimap
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,<init>,"com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:<init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableList)",46,49,"/**
* Initializes a new RegularEntrySet with given map and entries.
* @param map immutable map of key-value pairs
* @param entries list of map entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,createKeySet,com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createKeySet(),755,758,"/**
 * Creates an immutable set of keys.
 * @return ImmutableSet containing all keys from this map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,createKeySet,com.google.common.collect.JdkBackedImmutableBiMap:createKeySet(),123,126,"/**
 * Creates an immutable set of keys.
 * @return ImmutableSet containing all keys from this map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,createKeySet,com.google.common.collect.JdkBackedImmutableMap:createKeySet(),117,120,"/**
* Creates an immutable set of keys.
* @return ImmutableSet containing all keys from the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,createKeySet,com.google.common.collect.RegularImmutableBiMap$Inverse:createKeySet(),238,241,"/**
 * Creates an immutable key set from this map.
 * @return ImmutableSet containing all keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,createKeySet,com.google.common.collect.RegularImmutableBiMap:createKeySet(),160,163,"/**
 * Creates an immutable set of keys.
 * @return ImmutableSet containing all keys from this map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,entryIterator,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:entryIterator(),1168,1193,"/**
* Returns an iterator over entries with keys and immutable sets of values.
* @return UnmodifiableIterator of Entry<K, ImmutableSet<V>>
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,<init>,com.google.common.collect.ImmutableMap$SerializedForm:<init>(com.google.common.collect.ImmutableMap),1243,1260,"/**
* Initializes serialized form of an immutable map.
* @param map the ImmutableMap to serialize
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,keyIterator,com.google.common.collect.ImmutableMap:keyIterator(),1070,1083,"/**
 * Returns an unmodifiable iterator over the keys.
 * @return UnmodifiableIterator of keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,hashCode,com.google.common.collect.ImmutableMap:hashCode(),1212,1215,"/**
 * Generates hash code based on entry set.
 * @return hash code value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,readResolve,com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm:readResolve(),149,151,"/**
 * Returns entry set of the map.
 * @return Set of Map.Entry objects representing map entries
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,get,com.google.common.collect.ImmutableMapKeySet:get(int),63,66,"/**
 * Retrieves key at specified index from map entries.
 * @param index position of the entry in the map
 * @return key associated with the entry at given index
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,asList,com.google.common.collect.ImmutableMapValues:asList(),81,104,"/**
* Returns an immutable list of values from the map.
* @return ImmutableList containing all values in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,getCell,com.google.common.collect.SparseImmutableTable:getCell(int),115,123,"/**
* Retrieves a cell by its index.
* @param index the cell's position in the flattened structure
* @return Cell object at the specified index
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,containsValue,com.google.common.collect.ImmutableMap:containsValue(java.lang.Object),986,989,"/**
 * Checks if this map contains the specified value.
 * @param value value to check for presence in the map
 * @return true if a value is present, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,readResolve,com.google.common.collect.ImmutableMapValues$SerializedForm:readResolve(),139,141,"/**
 * Returns the values of the map.
 * @return Collection of values from the map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,copyIntoArray,"com.google.common.collect.ImmutableMultimap$Values:copyIntoArray(java.lang.Object[],int)",844,851,"/**
 * Copies values into an array.
 * @param dst destination array
 * @param offset starting index in the destination array
 * @return updated offset after copying
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,readResolve,com.google.common.collect.RegularImmutableMap$Values$SerializedForm:readResolve(),419,421,"/**
 * Returns the values of the map as a collection.
 * @return Collection of map values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,isHashCodeFast,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:isHashCodeFast(),1163,1166,"/**
 * Checks if hash code computation is fast.
 * @return true if hash code is computed quickly, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,isHashCodeFast,com.google.common.collect.ImmutableMapEntrySet:isHashCodeFast(),116,120,"/**
* Checks if hash code calculation is fast.
* @return true if hash code calculation is fast, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,checkNoConflict,"com.google.common.collect.ImmutableMap:checkNoConflict(boolean,java.lang.String,java.lang.Object,java.lang.Object)",373,378,"/**
* Throws an exception if a conflict is detected.
* @param safe true if no conflict, false otherwise
* @param conflictDescription description of the conflict
* @param entry1 first object involved in the conflict
* @param entry2 second object involved in the conflict
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,writeReplace,com.google.common.collect.ImmutableMapEntrySet:writeReplace(),127,132,"/**
* Provides serialized form of entry set.
* @return Serialized form object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,createAsList,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:createAsList(),77,80,"/**
* Creates an immutable list from entries.
* @return ImmutableList containing map entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,<init>,"com.google.common.collect.ImmutableSortedAsList:<init>(com.google.common.collect.ImmutableSortedSet,com.google.common.collect.ImmutableList)",34,36,"/**
* Constructs an immutable sorted list from a set and a list.
* @param backingSet the source sorted set
* @param backingList the source list
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,contains,com.google.common.collect.ImmutableMapValues:contains(java.lang.Object),71,74,"/**
 * Checks if the collection contains the specified object.
 * @param object the object to check for presence
 * @return true if the object is present, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,iterator,com.google.common.collect.ImmutableMultimap$EntryCollection:iterator(),627,630,"/**
 * Returns an unmodifiable iterator over all entries in the multimap.
 * @return Iterator of Entry objects
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,isPartialView,com.google.common.collect.ImmutableMultimap$EntryCollection:isPartialView(),632,635,"/**
 * Checks if the view is partial.
 * @return true if the view is partial, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,size,com.google.common.collect.ImmutableMultimap$EntryCollection:size(),637,640,"/**
 * Returns the total number of key-value pairs in the multimap.
 * @return the size of the multimap
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,size,com.google.common.collect.ImmutableMultimap$Keys:size(),748,751,"/**
 * Returns the number of key-value pairs in the multimap.
 * @return Size of the multimap
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,size,com.google.common.collect.ImmutableMultimap$Values:size(),853,856,"/**
 * Returns the number of key-value pairs in the multimap.
 * @return size of the multimap
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,<init>,"com.google.common.collect.JdkBackedImmutableMultiset:<init>(java.util.Map,com.google.common.collect.ImmutableList,long)",59,64,"/**
 * Initializes a new immutable multiset backed by JDK collections.
 * @param delegateMap underlying map for element counts
 * @param entries list of entries representing the elements and their counts
 * @param size total number of elements in the multiset
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,<init>,"com.google.common.collect.RegularImmutableMultiset:<init>(com.google.common.collect.Multisets$ImmutableEntry[],com.google.common.collect.Multisets$ImmutableEntry[],int,int,com.google.common.collect.ImmutableSet)",126,137,"/**
* Constructs a RegularImmutableMultiset with specified parameters.
* @param entries array of ImmutableEntry objects representing elements and their counts
* @param hashTable array used for fast lookup, may be null
* @param size total number of elements in the multiset
* @param hashCode precomputed hash code for the multiset
* @param elementSet set of unique elements, may be null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,writeReplace,com.google.common.collect.ImmutableMultimap$Keys:writeReplace(),764,769,"/**
* Provides serialization replacement for ImmutableMultimap.
* @return KeysSerializedForm instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,readResolve,com.google.common.collect.ImmutableMultimap$KeysSerializedForm:readResolve(),787,789,"/**
 * Returns the keys of the multimap as an unmodifiable set.
 * @return Unmodifiable set of keys from the multimap
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,contains,com.google.common.collect.ImmutableMultimap$Values:contains(java.lang.Object),834,837,"/**
 * Checks if the multimap contains the specified value.
 * @param object value to check for presence
 * @return true if the value is present, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,iterator,com.google.common.collect.ImmutableMultimap$Values:iterator(),839,842,"/**
 * Returns an iterator over all values in the multimap.
 * @return UnmodifiableIterator of values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,forEach,com.google.common.collect.ImmutableMultimap:forEach(java.util.function.BiConsumer),706,712,"/**
* Applies the given action to each key-value pair in the multimap.
* @param action the action to perform on each entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,elementSet,com.google.common.collect.JdkBackedImmutableMultiset:elementSet(),73,77,"/**
* Returns an immutable set of elements.
* @return ImmutableSet containing all elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,elementSet,com.google.common.collect.RegularImmutableMultiset:elementSet(),181,185,"/**
* Returns an immutable set of elements.
* @return ImmutableSet containing all unique elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,writeReplace,com.google.common.collect.ImmutableMultiset$EntrySet:writeReplace(),406,411,"/**
* Provides serialized form of entry set.
* @return EntrySetSerializedForm object for serialization
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,writeReplace,com.google.common.collect.ImmutableMultiset:writeReplace(),436,441,"/**
 * Returns serialized form of the object.
 * @return SerializedForm instance representing the object's state
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,writeReplace,com.google.common.collect.ImmutableRangeSet$AsSet:writeReplace(),711,715,"/**
 * Provides custom serialization form.
 * @return AsSetSerializedForm object containing ranges and domain
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,writeReplace,com.google.common.collect.ImmutableRangeSet:writeReplace(),866,869,"/**
* Replaces object with its serialized form.
* @return SerializedForm of the object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,toImmutableRangeSet,com.google.common.collect.ImmutableRangeSet:toImmutableRangeSet(),73,76,"/**
* Converts a stream of Range objects to an ImmutableRangeSet.
* @param <E> element type that extends Comparable
* @return Collector for ImmutableRangeSet
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableRangeSet}. As in {@link Builder}, overlapping ranges are not permitted and adjacent
   * ranges will be merged.
   *
   * @since 23.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:<init>(),661,663,"/**
 * Constructs an instance with zero elements.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:<init>(int),728,733,"/**
* Initializes a new RegularSetBuilderImpl with the specified capacity.
* @param expectedCapacity initial capacity for the set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$RegularSetBuilderImpl),735,741,"/**
* Copies a RegularSetBuilderImpl instance.
* @param toCopy the instance to copy
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,writeReplace,com.google.common.collect.ImmutableSet:writeReplace(),418,422,"/**
 * Provides an alternative object to serialize during deserialization.
 * @return SerializedForm object containing array data
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,toImmutableSet,com.google.common.collect.ImmutableSet:toImmutableSet(),71,73,"/**
* Creates a collector that collects elements into an immutable set.
* @param <E> element type
* @return Collector for ImmutableSet<E>
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableSet}. Elements appear in the resulting set in the encounter order of the stream; if
   * the stream contains duplicates (according to {@link Object#equals(Object)}), only the first
   * duplicate in encounter order will appear in the result.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,delegateCollection,com.google.common.collect.ImmutableSortedAsList:delegateCollection(),38,41,"/**
 * Returns an immutable sorted set.
 * @return ImmutableSortedSet of elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,<init>,"com.google.common.collect.ImmutableSortedMap:<init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList)",764,766,"/**
* Constructs an ImmutableSortedMap from sorted keys and values.
* @param keySet sorted set of keys
* @param valueList list of values corresponding to the keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,forEach,com.google.common.collect.ImmutableSortedMap:forEach(java.util.function.BiConsumer),782,789,"/**
* Executes an action on each entry.
* @param action the consumer to accept keys and values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,isPartialView,com.google.common.collect.ImmutableSortedMap:isPartialView(),797,800,"/**
 * Checks if either key set or value list represents a partial view.
 * @return true if either key set or value list is partial, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,firstEntry,com.google.common.collect.ImmutableSortedMap:firstEntry(),1071,1074,"/**
 * Returns the first entry in the map.
 * @return the first Entry or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lastEntry,com.google.common.collect.ImmutableSortedMap:lastEntry(),1076,1079,"/**
 * Returns the last entry in the map.
 * @return the last Entry or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,comparator,com.google.common.collect.ImmutableSortedMap:comparator(),904,907,"/**
* Returns the comparator used to order the keys.
* @return Comparator for key ordering or null if natural ordering is used
*/","* Returns the comparator that orders the keys, which is {@link Ordering#natural()} when the
   * natural ordering of the keys is used. Note that its behavior is not consistent with {@link
   * TreeMap#comparator()}, which returns {@code null} to indicate natural ordering.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,writeReplace,com.google.common.collect.ImmutableSortedMultiset:writeReplace(),596,600,"/**
* Returns a serialized form of this object.
* @return SerializedForm instance representing this object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,add,com.google.common.collect.ImmutableSortedSet$Builder:add(java.lang.Object),497,521,"/**
* Adds an element to the builder.
* @param element the element to add
* @return the builder instance
*/","* Adds {@code element} to the {@code ImmutableSortedSet}. If the {@code ImmutableSortedSet}
     * already contains {@code element}, then {@code add} has no effect. (only the previously added
     * element is retained).
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,writeReplace,com.google.common.collect.ImmutableSortedSet:writeReplace(),881,885,"/**
 * Returns a proxy object for serialization.
 * @return SerializedForm object containing comparator and elements array
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,unsafeCompare,"com.google.common.collect.ImmutableSortedSet:unsafeCompare(java.lang.Object,java.lang.Object)",599,601,"/**
 * Compares two objects using an unsafe comparator.
 * @param a first object to compare
 * @param b second object to compare (can be null)
 * @return result of the comparison
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,<init>,com.google.common.collect.RegularImmutableTable:<init>(),38,38,"/**
 * Constructs an empty ImmutableTable with regular row and column keys.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,<init>,"com.google.common.collect.SingletonImmutableTable:<init>(java.lang.Object,java.lang.Object,java.lang.Object)",37,41,"/**
* Initializes a singleton immutable table with a single row, column, and value.
* @param rowKey the row key
* @param columnKey the column key
* @param value the value at the specified row and column
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,<init>,com.google.common.collect.Interners$InternerBuilder:<init>(),49,49,"/**
 * Private constructor to prevent instantiation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,asFunction,com.google.common.collect.Interners:asFunction(com.google.common.collect.Interner),165,167,"/**
* Wraps an Interner in a Function.
* @param interner object to wrap
* @return Function that interns its input
*/","* Returns a function that delegates to the {@link Interner#intern} method of the given interner.
   *
   * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toString,com.google.common.collect.Iterables:toString(java.lang.Iterable),247,249,"/**
 * Converts an Iterable to a string representation.
 * @param iterable the Iterable to convert
 * @return string representation of the Iterable
 */","* Returns a string representation of {@code iterable}, with the format {@code [e1, e2, ..., en]}
   * (that is, identical to {@link java.util.Arrays Arrays}{@code
   * .toString(Iterables.toArray(iterable))}). Note that for <i>most</i> implementations of {@link
   * Collection}, {@code collection.toString()} also gives the same result, but that behavior is not
   * generally guaranteed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getOnlyElement,com.google.common.collect.Iterables:getOnlyElement(java.lang.Iterable),260,263,"/**
* Retrieves the single element from an iterable.
* Throws if iterable is empty or contains more than one element.
* @param iterable source of elements
* @return the only element in the iterable
*/","* Returns the single element contained in {@code iterable}.
   *
   * <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code
   * stream.collect(MoreCollectors.onlyElement())}.
   *
   * @throws NoSuchElementException if the iterable is empty
   * @throws IllegalArgumentException if the iterable contains multiple elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,getOnlyElement,"com.google.common.collect.Iterators:getOnlyElement(java.util.Iterator,java.lang.Object)",336,340,"/**
* Returns the only element from an iterator or a default value if empty.
* @param iterator source of elements
* @param defaultValue value to return if iterator is empty
* @return single element from iterator or default value
*/","* Returns the single element contained in {@code iterator}, or {@code defaultValue} if the
   * iterator is empty.
   *
   * @throws IllegalArgumentException if the iterator contains multiple elements. The state of the
   *     iterator is unspecified.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,concat,"com.google.common.collect.ObjectArrays:concat(java.lang.Object[],java.lang.Object[],java.lang.Class)",72,79,"/**
* Concatenates two arrays of the same type.
* @param first first array to concatenate
* @param second second array to concatenate
* @param type class type of the arrays
* @return new array containing elements of both input arrays
*/","* Returns a new array that contains the concatenated contents of two arrays.
   *
   * @param first the first array of elements to concatenate
   * @param second the second array of elements to concatenate
   * @param type the component type of the returned array",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getLast,com.google.common.collect.Iterables:getLast(java.lang.Iterable),843,855,"/**
 * Retrieves the last element from an iterable.
 * @param iterable source of elements
 * @return last element or throws exception if empty
 */","* Returns the last element of {@code iterable}. If {@code iterable} is a {@link List} with {@link
   * RandomAccess} support, then this operation is guaranteed to be {@code O(1)}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Streams#findLast Streams.findLast(stream).get()}
   *
   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),
   * consider using {@code collection.getLast()} instead.
   *
   * @return the last element of {@code iterable}
   * @throws NoSuchElementException if the iterable is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,getLast,"com.google.common.collect.Iterators:getLast(java.util.Iterator,java.lang.Object)",921,925,"/**
* Retrieves last element from iterator or default value if empty.
* @param iterator source of elements
* @param defaultValue value to return if iterator is empty
* @return last element or default value
*/","* Advances {@code iterator} to the end, returning the last element or {@code defaultValue} if the
   * iterator is empty.
   *
   * @param defaultValue the default value to return if the iterator is empty
   * @return the last element of {@code iterator}
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,hasNext,com.google.common.collect.Iterators$ConcatenatedIterator:hasNext(),1394,1430,"/**
* Checks if there are more elements to iterate over.
* @return true if next element exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,emptyIterator,com.google.common.collect.Iterators:emptyIterator(),80,82,"/**
 * Returns an empty unmodifiable iterator.
 * @param <T> the type of elements in the iterator
 * @return an empty UnmodifiableIterator
 */","* Returns the empty iterator.
   *
   * <p>The {@link Iterable} equivalent of this method is {@link ImmutableSet#of()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,iterator,com.google.common.collect.SingletonImmutableList:iterator(),50,53,"/**
* Returns an unmodifiable iterator containing a single element.
* @return UnmodifiableIterator with one element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableSet.java,iterator,com.google.common.collect.SingletonImmutableSet:iterator(),55,58,"/**
 * Returns an unmodifiable iterator containing only the specified element.
 * @return UnmodifiableIterator with single element
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,newHeader,com.google.common.collect.LinkedHashMultimap$ValueEntry:newHeader(),211,214,"/**
* Creates a new header entry with null values.
* @return ValueEntry object initialized with nulls
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,forEach,com.google.common.collect.LinkedHashMultimap$ValueSet:forEach(java.util.function.Consumer),452,460,"/**
* Iterates over values in the value set.
* @param action consumer to apply to each value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,rehashIfNecessary,com.google.common.collect.LinkedHashMultimap$ValueSet:rehashIfNecessary(),503,519,"/**
* Resizes the hash table if necessary based on load factor.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,clear,com.google.common.collect.LinkedHashMultimap$ValueSet:clear(),547,559,"/**
* Clears all entries in the multimap.
* Sets hashTable to null, size to 0, and removes all ValueEntries.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,deleteFromValueSet,com.google.common.collect.LinkedHashMultimap:deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink),148,151,"/**
 * Deletes an entry from a value set by updating successor and predecessor links.
 * @param entry the entry to be deleted
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,succeedsInMultimap,"com.google.common.collect.LinkedHashMultimap:succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry)",142,146,"/**
 * Links two ValueEntries in a multimap.
 * @param pred predecessor entry
 * @param succ successor entry
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,entrySpliterator,com.google.common.collect.LinkedHashMultimap:entrySpliterator(),593,596,"/**
* Returns a spliterator over map entries.
* @return Spliterator for iterating over entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,writeObject,com.google.common.collect.LinkedHashMultimap:writeObject(java.io.ObjectOutputStream),618,631,"/**
 * Serializes the map to an ObjectOutputStream.
 * @param stream the output stream to serialize to
 * @throws IOException if I/O error occurs during serialization
 */","* @serialData the expected values per key, the number of distinct keys, the number of entries,
   *     and the entries in order",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,valueIterator,com.google.common.collect.LinkedHashMultimap:valueIterator(),598,601,"/**
 * Returns an iterator over values.
 * @return Iterator of values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,hasNext,com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:hasNext(),426,430,"/**
 * Checks if there is a next element.
 * @return true if next element exists, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,next,com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:next(),432,445,"/**
* Returns the next key in the iteration.
* @throws NoSuchElementException if no more keys are available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,remove,com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:remove(),447,454,"/**
 * Removes the current element from the iterator.
 * Throws IllegalStateException if called without a prior next().
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,addNode,"com.google.common.collect.LinkedListMultimap:addNode(java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node)",198,249,"/**
* Adds a new node to the linked list.
* @param key key of the node
* @param value value of the node
* @param nextSibling sibling node to insert before (null if adding to tail)
* @return newly added Node object
*/","* Adds a new node for the specified key-value pair before the specified {@code nextSibling}
   * element, or at the end of the list if {@code nextSibling} is null. Note: if {@code nextSibling}
   * is specified, it MUST be for a node for the same {@code key}!",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,hasNext,com.google.common.collect.LinkedListMultimap$NodeIterator:hasNext(),334,338,"/**
 * Checks if there are more elements to iterate over.
 * @return true if there is a next element, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,next,com.google.common.collect.LinkedListMultimap$NodeIterator:next(),340,351,"/**
* Returns the next node in iteration.
* Throws NoSuchElementException if no more nodes exist.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,remove,com.google.common.collect.LinkedListMultimap$NodeIterator:remove(),353,366,"/**
* Removes the last element returned by iterator.
* Throws IllegalStateException if no element has been returned or remove() called twice.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,hasPrevious,com.google.common.collect.LinkedListMultimap$NodeIterator:hasPrevious(),368,372,"/**
 * Checks if there is a previous element.
 * @return true if previous element exists, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,previous,com.google.common.collect.LinkedListMultimap$NodeIterator:previous(),374,385,"/**
* Retrieves the previous node in the iteration.
* Throws NoSuchElementException if no previous node exists.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,charactersOf,com.google.common.collect.Lists:charactersOf(java.lang.CharSequence),762,764,"/**
 * Converts a CharSequence to a list of Characters.
 * @param sequence the input CharSequence
 * @return a List containing individual Characters from the sequence
 */","* Returns a view of the specified {@code CharSequence} as a {@code List<Character>}, viewing
   * {@code sequence} as a sequence of Unicode code units. The view does not support any
   * modification operations, but reflects any changes to the underlying character sequence.
   *
   * @param sequence the character sequence to view as a {@code List} of characters
   * @return an {@code List<Character>} view of the character sequence
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$RandomAccessPartition:<init>(java.util.List,int)",739,741,"/**
 * Constructs a partition with random access.
 * @param list the original list to partition
 * @param size the size of each partition
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,indexOfImpl,"com.google.common.collect.Lists:indexOfImpl(java.util.List,java.lang.Object)",1065,1077,"/**
 * Returns the index of the first occurrence of the specified element.
 * @param list the list to search within
 * @param element the element to find
 * @return the index of the element or -1 if not found
 */",An implementation of {@link List#indexOf(Object)}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,lastIndexOfImpl,"com.google.common.collect.Lists:lastIndexOfImpl(java.util.List,java.lang.Object)",1098,1110,"/**
 * Finds the last index of an element in a list.
 * @param list the list to search
 * @param element the element to find
 * @return the last index of the element, or -1 if not found
 */",An implementation of {@link List#lastIndexOf(Object)}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,delegate,com.google.common.collect.ForwardingConcurrentMap:delegate(),46,47,"/**
 * Returns the delegate map.
 * @return ConcurrentMap instance used as a delegate
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry:<init>(java.lang.Object,int)",584,586,"/**
 * Constructs a new StrongKeyDummyValueEntry.
 * @param key the key to be associated with this entry
 * @param hash the hash code of the key
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry:<init>(java.lang.Object,int)",394,396,"/**
 * Constructs a StrongKeyStrongValueEntry.
 * @param key the entry's key
 * @param hash the entry's hash code
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)",696,698,"/**
* Constructs a WeakKeyDummyValueEntry.
* @param queue reference queue for tracking garbage-collected keys
* @param key the key to be weakly referenced
* @param hash the hash code of the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)",787,789,"/**
* Constructs a new entry with weak key and strong value.
* @param queue reference queue to register this entry with
* @param key the key for the entry
* @param hash the hash code of the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsValue,com.google.common.collect.MapMakerInternalMap:containsValue(java.lang.Object),2385,2421,"/**
* Checks if the map contains a value.
* @param value value to search for
* @return true if value is found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isEmpty,com.google.common.collect.MapMakerInternalMap$EntrySet:isEmpty(),2776,2779,"/**
 * Checks if the map is empty.
 * @return true if the map contains no key-value mappings, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isEmpty,com.google.common.collect.MapMakerInternalMap$KeySet:isEmpty(),2688,2691,"/**
 * Checks if the map is empty.
 * @return true if the map contains no key-value mappings, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isEmpty,com.google.common.collect.MapMakerInternalMap$Values:isEmpty(),2722,2725,"/**
 * Checks if the map is empty.
 * @return true if the map contains no key-value mappings, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,nextInTable,com.google.common.collect.MapMakerInternalMap$HashIterator:nextInTable(),2577,2586,"/**
 * Advances to the next entry in the table.
 * @return true if a valid entry is found, false otherwise
 */",Finds the next entry in the current table. Returns {@code true} if an entry was found.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,expand,com.google.common.collect.MapMakerInternalMap$Segment:expand(),1556,1622,"/**
 * Expands the hash table by doubling its capacity.
 * Reclassifies nodes to new bins while preserving order.
 */",Expands the table if possible.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$Segment:<init>(com.google.common.collect.MapMakerInternalMap,int)",1234,1237,"/**
* Initializes a segment with a specified initial capacity.
* @param map reference to the internal map
* @param initialCapacity starting capacity for the segment's table
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,tryDrainReferenceQueues,com.google.common.collect.MapMakerInternalMap$Segment:tryDrainReferenceQueues(),1362,1370,"/**
 * Attempts to drain reference queues under a lock.
 */",Cleanup collected entries when the lock is available.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,runLockedCleanup,com.google.common.collect.MapMakerInternalMap$Segment:runLockedCleanup(),2007,2016,"/**
 * Runs cleanup operations under a lock.
 * Attempts to acquire the lock and performs reference queue draining and reset of read count.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$Segment:clear(),1794,1811,"/**
* Clears all elements from the collection.
* Acquires lock, sets table entries to null, and resets counters.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)",652,661,"/**
* Creates a new entry for the given segment and key.
* @param segment the segment to add the entry to
* @param key the key for the new entry
* @param hash the hash of the key
* @param next the next entry in the chain, or null if none
* @return a new StrongKeyDummyValueEntry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)",467,476,"/**
* Creates a new entry in the segment.
* @param segment the segment to add the entry to
* @param key the key for the new entry
* @param hash the hash of the key
* @param next the next entry in the chain, or null if none
* @return a new StrongKeyStrongValueEntry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)",566,575,"/**
* Creates a new entry for the segment.
* @param segment the segment to add the entry to
* @param key the key of the entry
* @param hash the hash code of the key
* @param next the next entry in the chain
* @return a new StrongKeyWeakValueEntry or LinkedStrongKeyWeakValueEntry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry:<init>(java.lang.Object,int)",487,489,"/**
 * Constructs a new entry with the specified key and hash.
 * @param key the key of this entry
 * @param hash the hash code for the key
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)",882,884,"/**
* Constructs a weak key and value entry.
* @param queue reference queue to enqueue upon garbage collection
* @param key the key object (weakly referenced)
* @param hash the hash code of the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)",2078,2082,"/**
* Creates a weak value reference for testing.
* @param e internal entry object
* @param value value to be referenced
* @return WeakValueReference instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,setWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",2084,2095,"/**
* Sets a weak value reference for testing purposes.
* @param e internal entry to modify
* @param valueReference new weak value reference to set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getWeakValueReferenceForTesting,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry),2072,2076,"/**
* Retrieves weak value reference for testing.
* @param e internal entry to process
* @return WeakValueReference object associated with the entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry)",751,762,"/**
 * Copies an entry with a potentially updated next reference.
 * @param segment the segment containing the entry
 * @param entry the original entry to copy
 * @param newNext the new next entry in the chain or null
 * @return a new entry or null if the key is collected
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getValue,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$LinkedWeakKeyDummyValueEntry:getValue(),700,703,"/**
 * Returns the predefined Dummy value.
 * @return Always returns Dummy.VALUE
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)",841,854,"/**
 * Copies a weak-key strong-value entry.
 * @param segment the segment containing the entry
 * @param entry the original entry to copy
 * @param newNext the new next entry in the chain
 * @return a new entry with the same key and value, or null if key is collected
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)",2209,2213,"/**
 * Creates a weak value reference for testing.
 * @param e internal entry object
 * @param value the value to be referenced
 * @return WeakValueReference instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,setWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",2215,2226,"/**
* Sets a new weak value reference for testing purposes.
* @param e the internal entry to update
* @param valueReference the new weak value reference
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getWeakValueReferenceForTesting,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry),2203,2207,"/**
* Retrieves weak value reference for testing.
* @param e internal entry object
* @return WeakValueReference object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isLiveForTesting,com.google.common.collect.MapMakerInternalMap:isLiveForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry),1128,1131,"/**
* Checks if an entry is live for testing purposes.
* @param entry the InternalEntry to check
* @return true if the entry has a non-null live value, false otherwise
*/","* This method is a convenience for testing. Code should call {@link Segment#getLiveValue}
   * instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,hash,com.google.common.collect.MapMakerInternalMap:hash(java.lang.Object),1108,1111,"/**
 * Computes hash code for a given key.
 * @param key object to hash
 * @return rehashed integer value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredKeyMap:<init>(java.util.Map,com.google.common.base.Predicate,com.google.common.base.Predicate)",2975,2981,"/**
 * Constructs a filtered map based on key and entry predicates.
 * @param unfiltered the original map to filter
 * @param keyPredicate predicate for filtering keys
 * @param entryPredicate predicate for filtering entries
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createKeySet,com.google.common.collect.Maps$AsMapView:createKeySet(),896,899,"/**
 * Creates a set that allows only removal of elements.
 * @return Set with restricted add operations
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,size,com.google.common.collect.Maps$AsMapView:size(),906,909,"/**
 * Returns the number of elements in the set.
 * @return Size of the backing set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsKey,com.google.common.collect.Maps$AsMapView:containsKey(java.lang.Object),911,914,"/**
 * Checks if the set contains the specified key.
 * @param key the key to check
 * @return true if the key is present, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$AsMapView:remove(java.lang.Object),932,941,"/**
* Removes a key from the backing set and returns the associated value.
* @param key the key to remove
* @return the value associated with the removed key, or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$AsMapView:clear(),943,946,"/**
 * Clears all elements from the underlying set.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$AsMapView:forEach(java.util.function.BiConsumer),965,970,"/**
* Applies a consumer to each key-value pair.
* @param action the consumer to apply
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,backingSet,com.google.common.collect.Maps$SortedAsMapView:backingSet(),990,993,"/**
 * Returns the backing sorted set.
 * @return SortedSet of keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entryIterator,com.google.common.collect.Maps$NavigableAsMapView:entryIterator(),1095,1098,"/**
 * Returns an iterator over map entries.
 * @param set backing set of keys
 * @param function function to convert keys to values
 * @return iterator over key-value pairs
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,iterator,com.google.common.collect.Multimaps$AsMap$EntrySet:iterator(),1904,1907,"/**
* Returns an iterator over map entries.
* @return Iterator of Entry objects representing key and collection value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,iterator,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:iterator(),919,922,"/**
 * Returns an iterator over column entries.
 * @return Iterator of Entry objects representing columns
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,iterator,com.google.common.collect.StandardTable$RowMap$EntrySet:iterator(),839,842,"/**
 * Returns an iterator over table entries.
 * @return Iterator of Entry objects representing rows in the table
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySet,com.google.common.collect.Maps$DescendingMap:entrySet(),4383,4387,"/**
* Returns a set of entries.
* @return Set containing all entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$DescendingMap:subMap(java.lang.Object,java.lang.Object)",4434,4437,"/**
* Returns a view of the portion of this map whose keys range from fromKey (inclusive) to toKey (exclusive).
* @param fromKey low endpoint of the keys in the returned map
* @param toKey high endpoint of the keys in the returned map, exclusive
* @return SortedMap containing the specified range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$DescendingMap:headMap(java.lang.Object),4444,4447,"/**
* Returns entries with keys less than specified key.
* @param toKey exclusive upper bound for keys
* @return SortedMap containing entries with keys less than toKey
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$DescendingMap:tailMap(java.lang.Object),4454,4457,"/**
* Returns a view of the portion of this map whose keys are greater than or equal to fromKey.
* @param fromKey the lower bound key (inclusive)
* @return SortedMap containing the specified range of keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:removeAll(java.util.Collection),955,965,"/**
* Removes all elements in the specified collection from this set.
* @param c collection containing elements to be removed
* @return true if any element was removed as a result of this call
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forcePut,"com.google.common.collect.Maps$FilteredEntryBiMap:forcePut(java.lang.Object,java.lang.Object)",3387,3391,"/**
 * Forces insertion of a key-value pair.
 * @param key the key to insert
 * @param value the value to associate with the key
 * @return the previous value associated with the key or null if none
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,replaceAll,com.google.common.collect.Maps$FilteredEntryBiMap:replaceAll(java.util.function.BiFunction),3393,3401,"/**
* Replaces each entry's value using a function.
* @param function mapping function for key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeAll,com.google.common.collect.Maps$FilteredEntryMap$KeySet:removeAll(java.util.Collection),3098,3101,"/**
 * Removes all elements from the unfiltered collection that match the predicate.
 * @param collection elements to remove
 * @return true if any elements were removed
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,retainAll,com.google.common.collect.Maps$FilteredEntryMap$KeySet:retainAll(java.util.Collection),3103,3106,"/**
 * Retains all elements in the unfiltered collection that match the given predicate.
 * @param collection elements to retain
 * @return true if this collection changed as a result of the call
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:comparator(),3147,3150,"/**
 * Returns the comparator used to sort the map.
 * @return Comparator or null if natural ordering is used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$FilteredEntrySortedMap:comparator(),3181,3184,"/**
 * Returns the comparator used to order the keys.
 * @return Comparator or null if natural ordering is used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastKey,com.google.common.collect.Maps$FilteredEntrySortedMap:lastKey(),3193,3206,"/**
* Returns the last key in the filtered map.
* @return the last key that satisfies the filter condition or throws NoSuchElementException if none found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstKey,com.google.common.collect.Maps$FilteredEntrySortedMap:firstKey(),3186,3191,"/**
* Returns the first key in the map.
* Throws NoSuchElementException if the map is empty.
* @return the first key in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,iterator,com.google.common.collect.Maps$KeySet:iterator(),3926,3929,"/**
 * Returns an iterator over the keys of the map.
 * @return Iterator of keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,size,com.google.common.collect.Maps$KeySet:size(),3938,3941,"/**
 * Returns the number of key-value mappings in the map.
 * @return size of the map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,isEmpty,com.google.common.collect.Maps$KeySet:isEmpty(),3943,3946,"/**
 * Checks if the underlying map is empty.
 * @return true if the map has no entries, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,contains,com.google.common.collect.Maps$KeySet:contains(java.lang.Object),3948,3951,"/**
 * Checks if the map contains the specified key.
 * @param o the key to check
 * @return true if the map contains the key, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$KeySet:clear(),3962,3965,"/**
 * Clears all entries from the map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,map,com.google.common.collect.Maps$SortedKeySet:map(),3982,3985,"/**
 * Returns the sorted map from the superclass.
 * @return SortedMap containing key-value pairs
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$SortedMapDifferenceImpl:<init>(java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap)",752,758,"/**
 * Constructs a SortedMapDifferenceImpl object.
 * @param onlyOnLeft entries unique to the left map
 * @param onlyOnRight entries unique to the right map
 * @param onBoth entries common to both maps
 * @param differences detailed differences between values of common keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toString,com.google.common.collect.Maps$MapDifferenceImpl:toString(),682,699,"/**
* Returns a string indicating equality and differences.
* @return ""equal"" or details of differences if not equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesOnlyOnLeft,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesOnlyOnLeft(),770,773,"/**
 * Returns entries unique to the left map.
 * @return SortedMap with entries only in the left map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesOnlyOnRight,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesOnlyOnRight(),775,778,"/**
* Returns entries unique to the right map.
* @return SortedMap containing entries only in the right map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesInCommon,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesInCommon(),765,768,"/**
* Returns sorted map of common entries.
* @return SortedMap containing shared key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,equals,com.google.common.collect.Maps$MapDifferenceImpl:equals(java.lang.Object),661,674,"/**
* Checks equality with another MapDifference object.
* @param object the object to compare
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,hashCode,com.google.common.collect.Maps$MapDifferenceImpl:hashCode(),676,680,"/**
* Generates hash code based on set differences.
* @return computed hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesDiffering,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesDiffering(),760,763,"/**
* Returns a sorted map of differing entries.
* @return SortedMap with keys and their value differences
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lower,com.google.common.collect.Maps$NavigableKeySet:lower(java.lang.Object),4032,4035,"/**
* Returns the greatest key less than or equal to the specified element.
* @param e the element to search for
* @return the greatest key less than or equal to e, or null if no such key exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,floor,com.google.common.collect.Maps$NavigableKeySet:floor(java.lang.Object),4037,4040,"/**
* Finds the greatest key less than or equal to the given element.
* @param e the element to compare with
* @return the greatest key less than or equal to e, or null if no such key exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,ceiling,com.google.common.collect.Maps$NavigableKeySet:ceiling(java.lang.Object),4042,4045,"/**
* Returns the least key greater than or equal to the specified element.
* @param e element to compare with keys in this map
* @return the least key greater than or equal to e, or null if no such key exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,higher,com.google.common.collect.Maps$NavigableKeySet:higher(java.lang.Object),4047,4050,"/**
* Finds the least key greater than the specified key.
* @param e key to search for
* @return the least key greater than e, or null if no such key exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollFirst,com.google.common.collect.Maps$NavigableKeySet:pollFirst(),4052,4055,"/**
 * Retrieves and removes the first entry from the map.
 * @return the key of the first entry or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollLast,com.google.common.collect.Maps$NavigableKeySet:pollLast(),4057,4060,"/**
 * Removes and returns the last key from the map.
 * @return the last key or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingSet,com.google.common.collect.Maps$NavigableKeySet:descendingSet(),4062,4065,"/**
 * Returns a navigable set of keys in descending order.
 * @return NavigableSet containing keys in reverse order
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$NavigableKeySet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",4072,4079,"/**
* Returns a navigable set of keys within the specified range.
* @param fromElement lower bound of the range
* @param fromInclusive true if the lower bound is inclusive
* @param toElement upper bound of the range
* @param toInclusive true if the upper bound is inclusive
* @return NavigableSet containing keys in the specified range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,"com.google.common.collect.Maps$NavigableKeySet:headSet(java.lang.Object,boolean)",4086,4089,"/**
* Returns a view of the portion of the map whose keys are less than (or equal to, if inclusive) toElement.
* @param toElement upper bound element for the returned set
* @param inclusive true if the toElement is included in the returned set
* @return NavigableSet of keys from the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,"com.google.common.collect.Maps$NavigableKeySet:tailSet(java.lang.Object,boolean)",4096,4099,"/**
 * Returns a navigable set of keys greater than or equal to the specified element.
 * @param fromElement the lower bound (inclusive if inclusive is true)
 * @param inclusive whether the lower bound is inclusive
 * @return NavigableSet containing keys greater than or equal to fromElement
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,fromMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:fromMap(),2389,2392,"/**
* Converts to a navigable map.
* @return NavigableMap with key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$TransformedEntriesSortedMap:comparator(),2232,2235,"/**
* Returns the comparator used by the underlying map.
* @return Comparator or null if natural ordering is used
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstKey,com.google.common.collect.Maps$TransformedEntriesSortedMap:firstKey(),2237,2241,"/**
 * Returns the first key in the map.
 * @return the first key or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastKey,com.google.common.collect.Maps$TransformedEntriesSortedMap:lastKey(),2248,2252,"/**
 * Returns the last key in the map.
 * @return the last key or null if the map is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,delegate,com.google.common.collect.ForwardingSortedMap:delegate(),65,66,"/**
 * Provides a sorted map delegate.
 * @return SortedMap instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,create,"com.google.common.collect.Maps$ValueDifferenceImpl:create(java.lang.Object,java.lang.Object)",707,710,"/**
* Creates a ValueDifference object comparing two values.
* @param left the first value to compare
* @param right the second value to compare
* @return ValueDifference containing both values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,iterator,com.google.common.collect.Maps$Values:iterator(),4119,4122,"/**
 * Returns an iterator over values in the map.
 * @return Iterator of values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$Values:remove(java.lang.Object),4131,4144,"/**
 * Removes an object from the collection.
 * @param o object to be removed
 * @return true if the object was successfully removed, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,size,com.google.common.collect.Maps$Values:size(),4176,4179,"/**
 * Returns the number of key-value mappings in the map.
 * @return The size of the map as an integer.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,isEmpty,com.google.common.collect.Maps$Values:isEmpty(),4181,4184,"/**
 * Checks if the map is empty.
 * @return true if the map has no entries, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,contains,com.google.common.collect.Maps$Values:contains(java.lang.Object),4186,4189,"/**
 * Checks if the map contains the specified value.
 * @param o the value to check
 * @return true if the value is present, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$Values:clear(),4191,4194,"/**
 * Clears all entries from the map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeAll,com.google.common.collect.Maps$Values:removeAll(java.util.Collection),4146,4159,"/**
* Removes all entries with values contained in the specified collection.
* @param c collection of values to remove
* @return true if any elements were removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,retainAll,com.google.common.collect.Maps$Values:retainAll(java.util.Collection),4161,4174,"/**
 * Retains only the entries whose values are contained in the specified collection.
 * @param c collection of values to retain
 * @return true if this set changed as a result of the call
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,<init>,com.google.common.eventbus.SubscriberRegistry:<init>(com.google.common.eventbus.EventBus),69,71,"/**
 * Initializes a new SubscriberRegistry with the given EventBus.
 * @param bus the EventBus instance to register subscribers with
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,<init>,com.google.common.collect.TreeRangeMap:<init>(),89,91,"/**
 * Initializes an empty TreeRangeMap.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newIdentityHashSet,com.google.common.collect.Sets:newIdentityHashSet(),453,455,"/**
* Creates a new identity hash set.
* @return Set with identity-based equality
*/","* Creates an empty {@code Set} that uses identity to determine equality. It compares object
   * references, instead of calling {@code equals}, to determine whether a provided object matches
   * an element in the set. For example, {@code contains} returns {@code false} when passed an
   * object that equals a set member, but isn't the same instance. This behavior is similar to the
   * way {@code IdentityHashMap} handles key lookups.
   *
   * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,synchronizedBiMap,com.google.common.collect.Maps:synchronizedBiMap(com.google.common.collect.BiMap),1678,1682,"/**
 * Returns a synchronized view of the specified bi-map.
 * @param bimap the bi-map to be wrapped
 * @return a synchronized BiMap instance
 */","* Returns a synchronized (thread-safe) bimap backed by the specified bimap. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing bimap is accomplished
   * through the returned bimap.
   *
   * <p>It is imperative that the user manually synchronize on the returned map when accessing any
   * of its collection views:
   *
   * {@snippet :
   * BiMap<Long, String> map = Maps.synchronizedBiMap(
   *     HashBiMap.<Long, String>create());
   * ...
   * Set<Long> set = map.keySet();  // Needn't be in synchronized block
   * ...
   * synchronized (map) {  // Synchronizing on map, not set!
   *   Iterator<Long> it = set.iterator(); // Must be in synchronized block
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned bimap will be serializable if the specified bimap is serializable.
   *
   * @param bimap the bimap to be wrapped in a synchronized view
   * @return a synchronized view of the specified bimap",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keyPredicateOnEntries,com.google.common.collect.Maps:keyPredicateOnEntries(com.google.common.base.Predicate),2395,2398,"/**
* Creates a predicate that tests entries based on key.
* @param keyPredicate condition for keys
* @return predicate testing if entry's key matches the given condition
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,compareElements,"com.google.common.collect.MinMaxPriorityQueue$Heap:compareElements(int,int)",530,532,"/**
 * Compares two elements using an ordering strategy.
 * @param a index of first element
 * @param b index of second element
 * @return comparison result based on ordering
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,peek,com.google.common.collect.MinMaxPriorityQueue:peek(),318,321,"/**
 * Retrieves but does not remove the first element.
 * @return the first element or null if empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,getGrandparentIndex,com.google.common.collect.MinMaxPriorityQueue$Heap:getGrandparentIndex(int),760,762,"/**
* Returns the index of the grandparent node.
* @param i index of the current node
* @return index of the grandparent node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,crossOverUp,"com.google.common.collect.MinMaxPriorityQueue$Heap:crossOverUp(int,java.lang.Object)",634,664,"/**
* Inserts element into the heap at specified index.
* @param index position to insert element
* @param x element to be inserted
* @return new index of the inserted element after potential swaps
*/","* Moves an element one level up from a min level to a max level (or vice versa). Returns the
     * new position of the element.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,swapWithConceptuallyLastElement,com.google.common.collect.MinMaxPriorityQueue$Heap:swapWithConceptuallyLastElement(java.lang.Object),679,694,"/**
 * Swaps the last element with a conceptually last element in the heap.
 * @param actualLastElement the element to swap with
 * @return index of swapped element or original size if no swap occurs
 */","* Swap {@code actualLastElement} with the conceptually correct last element of the heap.
     * Returns the index that {@code actualLastElement} now resides in.
     *
     * <p>Since the last element of the array is actually in the middle of the sorted structure, a
     * childless aunt node could be smaller, which would corrupt the invariant if this element
     * becomes the new parent of the aunt node. In that case, we first switch the last element with
     * its aunt node, before returning.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,nextNotInSkipMe,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:nextNotInSkipMe(int),869,878,"/**
 * Updates the cursor to the next index not in skipMe.
 * @param c current cursor position
 */","* Advances nextCursor to the index of the first element after {@code c} that is not in {@code
     * skipMe} and returns {@code size()} if there is no such element.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,initialQueueSize,"com.google.common.collect.MinMaxPriorityQueue:initialQueueSize(int,int,java.lang.Iterable)",939,956,"/**
 * Calculates the initial queue size based on configuration.
 * @param configuredExpectedSize user-specified expected size
 * @param maximumSize maximum allowable size
 * @param initialContents initial elements to be added
 * @return calculated initial queue size
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,add,com.google.common.collect.MoreCollectors$ToOptionalState:add(java.lang.Object),117,130,"/**
 * Adds an object to the collection, ensuring no duplicates.
 * @param o the object to add
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,combine,com.google.common.collect.MoreCollectors$ToOptionalState:combine(com.google.common.collect.MoreCollectors$ToOptionalState),132,150,"/**
 * Combines two ToOptionalState instances.
 * @param other another ToOptionalState instance to combine with
 * @return the combined ToOptionalState instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,getOptional,com.google.common.collect.MoreCollectors$ToOptionalState:getOptional(),152,158,"/**
* Returns an Optional containing the element if extras is empty.
* Throws an exception if extras is not empty.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,getElement,com.google.common.collect.MoreCollectors$ToOptionalState:getElement(),160,168,"/**
* Retrieves the main element.
* Throws NoSuchElementException if element is null.
* Throws IllegalStateException if extras are present.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,build,com.google.common.collect.MultimapBuilder$ListMultimapBuilder:build(com.google.common.collect.Multimap),439,443,"/**
* Builds a ListMultimap from the given Multimap.
* @param multimap input Multimap to be converted
* @return ListMultimap with the same key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,build,com.google.common.collect.MultimapBuilder$SetMultimapBuilder:build(com.google.common.collect.Multimap),459,463,"/**
* Builds a set multimap from the given multimap.
* @param multimap input multimap to be converted
* @return SetMultimap with unique values for each key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:<init>(),474,474,"/**
* Constructs a new instance of SortedSetMultimapBuilder.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,com.google.common.collect.Multimaps$AsMap$EntrySet:remove(java.lang.Object),1909,1918,"/**
* Removes an entry by key if present.
* @param o object to be removed, must be a Map.Entry
* @return true if the entry was successfully removed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$AsMap:get(java.lang.Object),1921,1925,"/**
 * Retrieves values by key.
 * @param key the key to search for
 * @return collection of values or null if key is not present
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,com.google.common.collect.Multimaps$AsMap:remove(java.lang.Object),1927,1930,"/**
* Removes entries associated with a key.
* @param key the key to remove
* @return collection of removed values or null if key not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,delegate,com.google.common.collect.Multimaps$UnmodifiableListMultimap:delegate(),799,802,"/**
* Returns the delegate ListMultimap.
* @return delegate ListMultimap instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,delegate,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:delegate(),829,832,"/**
* Returns the delegate multimap.
* @return SetMultimap instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,remove,"com.google.common.collect.Multisets$FilteredMultiset:remove(java.lang.Object,int)",381,389,"/**
 * Removes a specified number of occurrences of an element.
 * @param element the element to remove
 * @param occurrences the number of times to remove the element
 * @return the actual number of elements removed
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iteratorImpl,com.google.common.collect.Multisets:iteratorImpl(com.google.common.collect.Multiset),1061,1063,"/**
* Creates an iterator for a multiset.
* @param multiset the multiset to iterate over
* @return Iterator that traverses elements of the multiset
*/",An implementation of {@link Multiset#iterator}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,next,com.google.common.collect.Multisets$MultisetIteratorImpl:next(),1088,1105,"/**
* Returns the next element in the iterator.
* @throws NoSuchElementException if no more elements are available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,elementSet,com.google.common.collect.Multisets$UnmodifiableMultiset:elementSet(),151,155,"/**
* Returns the set of elements.
* @return Set containing all elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,delegate,com.google.common.collect.UnmodifiableSortedMultiset:delegate(),44,47,"/**
 * Returns the sorted multiset delegate.
 * @return SortedMultiset object
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,delegate,com.google.common.collect.ForwardingMultiset:delegate(),56,57,"/**
 * Returns the underlying multiset delegate.
 * @return the delegate multiset
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,delegate,com.google.common.collect.MutableClassToInstanceMap$2:delegate(),79,82,"/**
 * Returns the delegate map.
 * @return Map of class types to corresponding instances
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,writeReplace,com.google.common.collect.MutableClassToInstanceMap:writeReplace(),186,188,"/**
 * Provides an alternative object during serialization.
 * @return SerializedForm instance containing delegate data
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,newArray,"com.google.common.collect.ObjectArrays:newArray(java.lang.Object[],int)",61,63,"/**
 * Creates a new array of the same type as the given reference.
 * @param reference existing array to infer type from
 * @param length size of the new array
 * @return new array of specified length and type
 */","* Returns a new array of the given length with the same type as a reference array.
   *
   * @param reference any array of the desired type
   * @param length the length of the new array",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,toArrayImpl,com.google.common.collect.ObjectArrays:toArrayImpl(java.util.Collection),180,182,"/**
 * Converts collection to array.
 * @param c source collection
 * @return array of Objects containing collection elements
 */","* Returns an array containing all of the elements in the specified collection. This method
   * returns the elements in the order they are returned by the collection's iterator. The returned
   * array is ""safe"" in that no references to it are maintained by the collection. The caller is
   * thus free to modify the returned array.
   *
   * <p>This method assumes that the collection size doesn't change while the method is running.
   *
   * <p>TODO(kevinb): support concurrently modified collections?
   *
   * @param c the collection for which to return an array of elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,checkElementsNotNull,"com.google.common.collect.ObjectArrays:checkElementsNotNull(java.lang.Object[],int)",219,225,"/**
* Checks elements in the array are not null up to given length.
* @param array the array to check
* @param length number of elements to validate
* @return the original array if all elements are non-null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,compare,"com.google.common.collect.Ordering$ArbitraryOrdering:compare(java.lang.Object,java.lang.Object)",355,376,"/**
* Compares two objects based on their identity hash codes and UIDs.
* @param left first object to compare
* @param right second object to compare
* @return negative if left is less, positive if left is greater, zero if equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,min,com.google.common.collect.Ordering:min(java.util.Iterator),561,571,"/**
* Finds the minimum element in an iterator.
* @param iterator iterator containing elements to compare
* @return minimum element or throws NoSuchElementException if empty
*/","* Returns the least of the specified values according to this ordering. If there are multiple
   * least values, the first of those is returned. The iterator will be left exhausted: its {@code
   * hasNext()} method will return {@code false}.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).min(thisComparator).get()} instead
   * (but note that it does not guarantee which tied minimum element is returned).
   *
   * @param iterator the iterator whose minimum element is to be determined
   * @throws NoSuchElementException if {@code iterator} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,max,"com.google.common.collect.ReverseOrdering:max(java.lang.Object,java.lang.Object)",72,75,"/**
* Returns the maximum of two elements using natural ordering.
* @param a first element to compare
* @param b second element to compare
* @return the greater of the two elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,max,com.google.common.collect.Ordering:max(java.util.Iterator),652,662,"/**
* Finds the maximum element in an iterator.
* @param iterator Iterator of elements to compare
* @return Maximum element found or throws NoSuchElementException if empty
*/","* Returns the greatest of the specified values according to this ordering. If there are multiple
   * greatest values, the first of those is returned. The iterator will be left exhausted: its
   * {@code hasNext()} method will return {@code false}.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).max(thisComparator).get()} instead
   * (but note that it does not guarantee which tied maximum element is returned).
   *
   * @param iterator the iterator whose maximum element is to be determined
   * @throws NoSuchElementException if {@code iterator} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,encloseAll,com.google.common.collect.Range:encloseAll(java.lang.Iterable),304,322,"/**
* Encloses all values in a range.
* @param values iterable collection of comparable values
* @return Range object containing the minimum and maximum values
*/","* Returns the minimal range that {@linkplain Range#contains(Comparable) contains} all of the
   * given values. The returned range is {@linkplain BoundType#CLOSED closed} on both ends.
   *
   * @throws ClassCastException if the values are not mutually comparable
   * @throws NoSuchElementException if {@code values} is empty
   * @throws NullPointerException if any of {@code values} is null
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,min,"com.google.common.collect.ReverseOrdering:min(java.lang.Object,java.lang.Object)",51,54,"/**
 * Returns the minimum of two elements.
 * @param a first element to compare
 * @param b second element to compare
 * @return the smaller of a and b
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newConcurrentHashSet,com.google.common.collect.Sets:newConcurrentHashSet(),279,281,"/**
* Creates a new concurrent hash set.
* @return ConcurrentHashSet instance
*/","* Creates a thread-safe set backed by a hash map. The set is backed by a {@link
   * ConcurrentHashMap} instance, and thus carries the same concurrency guarantees.
   *
   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The
   * set is serializable.
   *
   * @return a new, empty thread-safe {@code Set}
   * @since 15.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,compare,"com.google.common.collect.Range$RangeLexOrdering:compare(com.google.common.collect.Range,com.google.common.collect.Range)",721,727,"/**
* Compares two ranges based on their bounds.
* @param left first range to compare
* @param right second range to compare
* @return negative if left is less, positive if greater, zero if equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,toString,com.google.common.collect.Range:toString(),681,684,"/**
 * Returns string representation of range.
 * @param lowerBound start of range
 * @param upperBound end of range
 * @return formatted range string
 */","* Returns a string representation of this range, such as {@code ""[3..5)""} (other examples are
   * listed in the class documentation).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,lowerEndpoint,com.google.common.collect.Range:lowerEndpoint(),348,350,"/**
 * Returns the lower endpoint of the range.
 * @return the lower endpoint value
 */","* Returns the lower endpoint of this range.
   *
   * @throws IllegalStateException if this range is unbounded below (that is, {@link
   *     #hasLowerBound()} returns {@code false})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,upperEndpoint,com.google.common.collect.Range:upperEndpoint(),374,376,"/**
 * Returns the upper endpoint of the range.
 * @return the upper endpoint as type C
 */","* Returns the upper endpoint of this range.
   *
   * @throws IllegalStateException if this range is unbounded above (that is, {@link
   *     #hasUpperBound()} returns {@code false})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,descendingIterator,com.google.common.collect.RegularContiguousSet:descendingIterator(),102,113,"/**
* Returns an unmodifiable descending iterator over the elements.
* @return UnmodifiableIterator in reverse order of elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,iterator,com.google.common.collect.RegularContiguousSet:iterator(),90,100,"/**
 * Returns an iterator over elements from first to last.
 * @return UnmodifiableIterator for the range
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,size,com.google.common.collect.RegularContiguousSet:size(),165,169,"/**
* Returns the number of elements in the range.
* Uses domain distance between first and last elements.
* @return size as int, capped at Integer.MAX_VALUE if exceeded
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,equals,com.google.common.collect.RegularContiguousSet:equals(java.lang.Object),223,234,"/**
 * Checks equality with another RegularContiguousSet.
 * @param object the object to compare
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,size,com.google.common.collect.RegularImmutableBiMap$Inverse:size(),206,209,"/**
 * Returns the number of elements in the set.
 * Utilizes the inverse set's size to determine the count.
 * @return the size of the set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,get,com.google.common.collect.RegularImmutableBiMap$Inverse:get(java.lang.Object),222,236,"/**
* Retrieves key by value from the map.
* @param value the value to search for
* @return associated key or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,checkNoConflictInValueBucket,"com.google.common.collect.RegularImmutableBiMap:checkNoConflictInValueBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)",136,146,"/**
 * Checks for conflicts in the value bucket and throws an exception if overflow occurs.
 * @param value the value to check for conflict
 * @param entry the current map entry being processed
 * @param valueBucketHead the head of the value bucket
 * @throws BucketOverflowException if the bucket size exceeds the maximum allowed length
 */","* @throws IllegalArgumentException if another entry in the bucket has the same key
   * @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash
   *     flooding attack",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,writeReplace,com.google.common.collect.RegularImmutableBiMap$Inverse:writeReplace(),314,319,"/**
 * Provides an object to replace this instance during serialization.
 * @return InverseSerializedForm containing the current map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,removeDuplicates,"com.google.common.collect.RegularImmutableMap:removeDuplicates(java.util.Map$Entry[],int,int,java.util.IdentityHashMap)",186,203,"/**
* Removes duplicate entries from an array.
* @param entries input entry array
* @param n number of entries to process
* @param newN expected size after removing duplicates
* @param duplicates map tracking duplicate status
* @return array with duplicates removed
*/","* Constructs a new entry array where each duplicated key from the original appears only once, at
   * its first position but with its final value. The {@code duplicates} map is modified.
   *
   * @param entries the original array of entries including duplicates
   * @param n the number of valid entries in {@code entries}
   * @param newN the expected number of entries once duplicates are removed
   * @param duplicates a map of canonical {@link Entry} objects for each duplicate key. This map
   *     will be updated by the method, setting each value to false as soon as the {@link Entry} has
   *     been included in the new entry array.
   * @return an array of {@code newN} entries where no key appears more than once.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,createKeySet,com.google.common.collect.RegularImmutableMap:createKeySet(),312,315,"/**
 * Creates an immutable key set from the current map.
 * @return ImmutableSet of keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,size,com.google.common.collect.RegularImmutableMap$KeySet:size(),339,342,"/**
 * Returns the number of key-value mappings in this map.
 * @return the number of entries in the map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,size,com.google.common.collect.RegularImmutableMap$Values:size(),389,392,"/**
 * Returns the number of key-value mappings in the map.
 * @return the size of the map
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,checkNoConflictInKeyBucket,"com.google.common.collect.RegularImmutableMap:checkNoConflictInKeyBucket(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,boolean)",235,256,"/**
* Checks for key conflicts in a hash bucket.
* @param key the key to check
* @param newValue the value associated with the key
* @param keyBucketHead the head of the key bucket
* @param throwIfDuplicateKeys flag to determine if an exception should be thrown on conflict
* @return the existing entry if found and duplicates are not allowed, otherwise null
* @throws BucketOverflowException if the bucket exceeds maximum length
*/","* Checks if the given key already appears in the hash chain starting at {@code keyBucketHead}. If
   * it does not, then null is returned. If it does, then if {@code throwIfDuplicateKeys} is true an
   * {@code IllegalArgumentException} is thrown, and otherwise the existing {@link Entry} is
   * returned.
   *
   * @throws IllegalArgumentException if another entry in the bucket has the same key and {@code
   *     throwIfDuplicateKeys} is true
   * @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash
   *     flooding attack",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,get,"com.google.common.collect.RegularImmutableMap:get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)",265,287,"/**
* Retrieves value by key from a hash table.
* @param key key to search for
* @param keyTable array of map entries
* @param mask bit mask for index calculation
* @return value associated with the key, or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,hashFloodingDetected,com.google.common.collect.RegularImmutableMultiset:hashFloodingDetected(com.google.common.collect.Multisets$ImmutableEntry[]),87,98,"/**
 * Detects hash flooding by checking bucket lengths.
 * @param hashTable array of ImmutableEntry representing the hash table
 * @return true if any bucket exceeds MAX_HASH_BUCKET_LENGTH, otherwise false
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,forEachEntry,com.google.common.collect.RegularImmutableSortedMultiset:forEachEntry(java.util.function.ObjIntConsumer),71,77,"/**
* Iterates over entries, applying an action to each.
* @param action consumer accepting element and its count
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,last,com.google.common.collect.RegularImmutableSortedSet:last(),215,221,"/**
 * Returns the last element of the list.
 * Throws NoSuchElementException if the list is empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,unsafeBinarySearch,com.google.common.collect.RegularImmutableSortedSet:unsafeBinarySearch(java.lang.Object),156,158,"/**
 * Performs an unsafe binary search on elements.
 * @param key the key to search for
 * @return index of the key if found, otherwise a negative insertion point
 * @throws ClassCastException if key cannot be compared to elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,indexOf,com.google.common.collect.RegularImmutableSortedSet:indexOf(java.lang.Object),300,312,"/**
* Searches for target object in sorted elements.
* @param target the object to search for
* @return index of target if found, otherwise -1
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,delegate,com.google.common.collect.ForwardingNavigableSet:delegate(),58,59,"/**
 * Returns the navigable set to be delegated.
 * @return the underlying navigable set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,iterator,com.google.common.collect.Sets$PowerSet:iterator(),1740,1748,"/**
* Returns an iterator over subsets of the input set.
* @return Iterator of Set<E>
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,toImmutableEnumSet,com.google.common.collect.Sets:toImmutableEnumSet(),150,152,"/**
* Collects enum elements into an immutable set.
* @param <E> type of enum extending Enum<E>
* @return Collector for ImmutableSet of enums
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableSet}
   * with an implementation specialized for enums. Unlike {@link ImmutableSet#toImmutableSet}, the
   * resulting set will iterate over elements in their enum definition order, not encounter order.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,complementOf,com.google.common.collect.Sets:complementOf(java.util.Collection),505,515,"/**
* Returns a new EnumSet containing all elements not in the given collection.
* @param collection the collection whose complement is to be computed
* @return an EnumSet with elements not present in the input collection
*/","* Creates an {@code EnumSet} consisting of all enum values that are not in the specified
   * collection. If the collection is an {@link EnumSet}, this method has the same behavior as
   * {@link EnumSet#complementOf}. Otherwise, the specified collection must contain at least one
   * element, in order to determine the element type. If the collection could be empty, use {@link
   * #complementOf(Collection, Class)} instead of this method.
   *
   * @param collection the collection whose complement should be stored in the enum set
   * @return a new, modifiable {@code EnumSet} containing all values of the enum that aren't present
   *     in the given collection
   * @throws IllegalArgumentException if {@code collection} is not an {@code EnumSet} instance and
   *     contains no elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,complementOf,"com.google.common.collect.Sets:complementOf(java.util.Collection,java.lang.Class)",527,535,"/**
* Returns the complement of an enum set.
* @param collection elements to exclude
* @param type enum class type
* @return EnumSet containing all other enum constants
*/","* Creates an {@code EnumSet} consisting of all enum values that are not in the specified
   * collection. This is equivalent to {@link EnumSet#complementOf}, but can act on any input
   * collection, as long as the elements are of enum type.
   *
   * @param collection the collection whose complement should be stored in the {@code EnumSet}
   * @param type the type of the elements in the set
   * @return a new, modifiable {@code EnumSet} initially containing all the values of the enum not
   *     present in the given collection",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,<init>,com.google.common.collect.SortedMultisets$NavigableElementSet:<init>(com.google.common.collect.SortedMultiset),99,101,"/**
 * Constructs a navigable element set from a sorted multiset.
 * @param multiset the source sorted multiset
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,iterator,com.google.common.collect.SortedMultisets$ElementSet:iterator(),57,60,"/**
* Returns an iterator over the elements of this multiset.
* @return Iterator over elements, with repetition according to their count
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,comparator,com.google.common.collect.SortedMultisets$ElementSet:comparator(),62,65,"/**
* Returns the comparator used by the multiset.
* @return Comparator of the elements in the multiset
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,subSet,"com.google.common.collect.SortedMultisets$ElementSet:subSet(java.lang.Object,java.lang.Object)",67,70,"/**
* Returns a subset of elements between two specified elements.
* @param fromElement inclusive lower bound
* @param toElement exclusive upper bound
* @return SortedSet containing elements in the range [fromElement, toElement)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,headSet,com.google.common.collect.SortedMultisets$ElementSet:headSet(java.lang.Object),72,75,"/**
 * Returns elements less than the specified element.
 * @param toElement upper bound (exclusive)
 * @return SortedSet of elements less than toElement
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,tailSet,com.google.common.collect.SortedMultisets$ElementSet:tailSet(java.lang.Object),77,80,"/**
* Returns elements greater than or equal to fromElement.
* @param fromElement the lower bound (inclusive)
* @return SortedSet of elements meeting the criteria
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,first,com.google.common.collect.SortedMultisets$ElementSet:first(),82,86,"/**
* Retrieves the first element from the multiset.
* @return the first element, or throws an exception if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,last,com.google.common.collect.SortedMultisets$ElementSet:last(),88,92,"/**
 * Retrieves the last element from the multiset.
 * @return The last element or throws an exception if empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,iterator,com.google.common.collect.StandardTable$ColumnKeySet:iterator(),688,691,"/**
 * Returns an iterator for column keys.
 * @return Iterator over column keys
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,updateBackingRowMapField,com.google.common.collect.StandardTable$Row:updateBackingRowMapField(),326,330,"/**
* Updates backingRowMap with computed values.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.StandardTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",149,156,"/**
 * Puts a value in the table.
 * @param rowKey key identifying the row
 * @param columnKey key identifying the column
 * @param value value to put
 * @return previous value or null if none existed
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowMap,com.google.common.collect.StandardTable:rowMap(),802,806,"/**
* Returns the row map, creating it if necessary.
* @return Map of rows to columns with values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,findLast,com.google.common.collect.Streams:findLast(java.util.stream.IntStream),941,945,"/**
* Finds the last element in an IntStream.
* @param stream input IntStream
* @return OptionalInt containing the last element or empty if none present
*/","* Returns the last element of the specified stream, or {@link OptionalInt#empty} if the stream is
   * empty.
   *
   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This
   * method's runtime will be between O(log n) and O(n), performing better on <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * streams.
   *
   * @see IntStream#findFirst()
   * @throws NullPointerException if the last element of the stream is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,findLast,com.google.common.collect.Streams:findLast(java.util.stream.LongStream),959,963,"/**
* Finds the last element in a LongStream.
* @param stream the input LongStream
* @return OptionalLong containing the last element, or empty if stream is empty
*/","* Returns the last element of the specified stream, or {@link OptionalLong#empty} if the stream
   * is empty.
   *
   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This
   * method's runtime will be between O(log n) and O(n), performing better on <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * streams.
   *
   * @see LongStream#findFirst()
   * @throws NullPointerException if the last element of the stream is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,findLast,com.google.common.collect.Streams:findLast(java.util.stream.DoubleStream),977,981,"/**
* Finds the last element in a DoubleStream.
* @param stream the input stream of doubles
* @return OptionalDouble containing the last element or empty if stream is empty
*/","* Returns the last element of the specified stream, or {@link OptionalDouble#empty} if the stream
   * is empty.
   *
   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This
   * method's runtime will be between O(log n) and O(n), performing better on <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * streams.
   *
   * @see DoubleStream#findFirst()
   * @throws NullPointerException if the last element of the stream is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedAsMap:values(),1420,1428,"/**
* Returns a collection of all value collections.
* @return Collection of value collections
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedAsMapEntries:<init>(java.util.Set,java.lang.Object)",959,961,"/**
* Wraps a set of map entries with synchronization.
* @param delegate original set of map entries
* @param mutex object used for locking; may be null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSortedSet:<init>(java.util.SortedSet,java.lang.Object)",309,311,"/**
 * Constructs a synchronized sorted set.
 * @param delegate the sorted set to be wrapped
 * @param mutex the object to use as the lock; if null, this set itself is used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,set,"com.google.common.collect.Synchronized:set(java.util.Set,java.lang.Object)",265,268,"/**
* Wraps a set with synchronization.
* @param set the set to wrap
* @param mutex object used for locking; if null, uses the set itself
* @return synchronized Set instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedCollection:delegate(),131,135,"/**
 * Delegates to superclass for collection.
 * @return Collection of elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedEntry:delegate(),1797,1801,"/**
* Returns the delegate entry.
* Overrides to ensure type safety.
* @return Map.Entry of key-value pair
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedMap:delegate(),1072,1076,"/**
* Returns the delegate map.
* @return Map object containing key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedMultimap:delegate(),602,606,"/**
* Returns the delegate multimap.
* @return Multimap instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedTable:delegate(),2046,2050,"/**
* Returns the delegate table.
* @return Table object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedDeque:<init>(java.util.Deque,java.lang.Object)",1902,1904,"/**
 * Constructs a synchronized Deque.
 * @param delegate underlying Deque implementation
 * @param mutex object used for synchronization; may be null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,queue,"com.google.common.collect.Synchronized:queue(java.util.Queue,java.lang.Object)",1841,1843,"/**
 * Wraps a queue with synchronization.
 * @param queue the original queue to wrap
 * @param mutex object used for locking; if null, uses internal lock
 * @return synchronized Queue instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedRandomAccessList:<init>(java.util.List,java.lang.Object)",482,484,"/**
 * Creates a synchronized random access list.
 * @param list the underlying list to be wrapped
 * @param mutex object used as a lock - if null, this list itself is used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,multiset,"com.google.common.collect.Synchronized:multiset(com.google.common.collect.Multiset,java.lang.Object)",489,495,"/**
* Wraps a multiset with synchronization.
* @param multiset the original multiset to be wrapped
* @param mutex object used for locking or null for internal lock
* @return synchronized version of the multiset
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,get,"com.google.common.collect.Tables$TransformedTable:get(java.lang.Object,java.lang.Object)",430,438,"/**
* Retrieves and processes a value from the table.
* @param rowKey key identifying the row
* @param columnKey key identifying the column
* @return processed value or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,remove,"com.google.common.collect.Tables$TransformedTable:remove(java.lang.Object,java.lang.Object)",463,469,"/**
* Removes an element from the table by row and column keys.
* @param rowKey key identifying the row
* @param columnKey key identifying the column
* @return value associated with the removed key pair or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,delegate,com.google.common.collect.Tables$UnmodifiableRowSortedMap:delegate(),651,654,"/**
* Returns the delegate table cast to RowSortedTable.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,partition,"com.google.common.collect.TopKSelector:partition(int,int,int)",215,229,"/**
* Partitions array around a pivot.
* @param left starting index of partition range
* @param right ending index of partition range
* @param pivotIndex index of the pivot element
* @return new index of the pivot element
*/","* Partitions the contents of buffer in the range [left, right] around the pivot element
   * previously stored in buffer[pivotValue]. Returns the new index of the pivot element,
   * pivotNewIndex, so that everything in [left, pivotNewIndex] is ≤ pivotValue and everything in
   * (pivotNewIndex, right] is greater than pivotValue.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,hasPrevious,com.google.common.collect.TransformedListIterator:hasPrevious(),41,44,"/**
 * Checks if there is a previous element in the iterator.
 * @return true if a previous element exists, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,previous,com.google.common.collect.TransformedListIterator:previous(),46,50,"/**
* Returns the previous element in the iteration.
* @return transformed previous element or null if no more elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,nextIndex,com.google.common.collect.TransformedListIterator:nextIndex(),52,55,"/**
 * Returns the index of the element that would be returned by subsequent call to next().
 * @return Index of the next element
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,previousIndex,com.google.common.collect.TransformedListIterator:previousIndex(),57,60,"/**
 * Returns the index of the element that would be returned by a call to previous().
 * @return Index of the previous element or -1 if at the beginning
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,comparator,com.google.common.collect.TreeBasedTable$TreeRow:comparator(),207,210,"/**
 * Returns the comparator for the column.
 * @return Comparator used to sort the column
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,computeBackingRowMap,com.google.common.collect.TreeBasedTable$TreeRow:computeBackingRowMap(),270,284,"/**
* Computes the backing row map with optional bounds.
* @return SortedMap with applied lower and upper bounds, or null if wholeRow is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,maintainEmptyInvariant,com.google.common.collect.TreeBasedTable$TreeRow:maintainEmptyInvariant(),286,294,"/**
* Maintains invariant by removing empty rows from the map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,createCollection,com.google.common.collect.TreeMultimap:createCollection(java.lang.Object),144,150,"/**
* Creates a collection for the given key.
* @param key the key to associate with the collection
* @return a new collection associated with the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,writeObject,com.google.common.collect.TreeMultimap:writeObject(java.io.ObjectOutputStream),208,215,"/**
 * Writes object state to a stream for serialization.
 * @param stream the output stream to which the object is serialized
 * @throws IOException if an I/O error occurs during serialization
 */","* @serialData key comparator, value comparator, number of distinct keys, and then for each
   *     distinct key: the key, number of values for that key, and key values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,recomputeMultiset,com.google.common.collect.TreeMultiset$AvlNode:recomputeMultiset(),935,939,"/**
 * Recomputes the multiset properties.
 * Updates distinct elements and total count based on left and right subtrees.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,recomputeHeight,com.google.common.collect.TreeMultiset$AvlNode:recomputeHeight(),941,943,"/**
 * Recomputes the height of the current node.
 * Updates the height based on the maximum height of its children plus one.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,balanceFactor,com.google.common.collect.TreeMultiset$AvlNode:balanceFactor(),972,974,"/**
 * Calculates the balance factor of the node.
 * @return difference between left and right subtree heights
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,successor,"com.google.common.collect.TreeMultiset:successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)",1052,1056,"/**
* Updates successor relationships for AVL nodes.
* @param a first node in the sequence
* @param b second node in the sequence
* @param c third node in the sequence
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,elementIterator,com.google.common.collect.TreeMultiset:elementIterator(),440,443,"/**
 * Returns an iterator over the elements of this multiset.
 * @return Iterator over elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,comparator,com.google.common.collect.TreeMultiset:comparator(),61,64,"/**
 * Returns the comparator used to order elements.
 * @return Comparator object or null if natural ordering is used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,equals,com.google.common.collect.TreeRangeMap$SubRangeMap:equals(java.lang.Object),633,640,"/**
* Checks equality with another RangeMap.
* @param o the object to compare
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,hashCode,com.google.common.collect.TreeRangeMap$SubRangeMap:hashCode(),642,645,"/**
* Generates hash code based on map of ranges.
* @return hash code of the range map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,toString,com.google.common.collect.TreeRangeMap$SubRangeMap:toString(),647,650,"/**
 * Converts the object to a string representation of its map of ranges.
 * @return A string representing the map of ranges
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,equals,com.google.common.collect.TreeRangeMap:equals(java.lang.Object),812,819,"/**
* Checks equality with another RangeMap.
* @param o the object to compare
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,hashCode,com.google.common.collect.TreeRangeMap:hashCode(),821,824,"/**
 * Generates hash code based on map of ranges.
 * @return hash code value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaper.java,<init>,com.google.common.escape.CharEscaper:<init>(),46,46,"/**
 * Protected constructor to prevent instantiation from outside the class.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,<init>,com.google.common.escape.UnicodeEscaper:<init>(),59,59,"/**
 * Default constructor for UnicodeEscaper class.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaper.java,escapeSlow,"com.google.common.escape.CharEscaper:escapeSlow(java.lang.String,int)",96,156,"/**
* Escapes characters in a string starting from a given index.
* @param s input string to escape
* @param index starting index for escaping
* @return escaped string
*/","* Returns the escaped form of a given literal string, starting at the given index. This method is
   * called by the {@link #escape(String)} method when it discovers that escaping is required. It is
   * protected to allow subclasses to override the fastpath escaping function to inline their
   * escaping test. See {@link CharEscaperBuilder} for an example usage.
   *
   * @param s the literal string to be escaped
   * @param index the index to start escaping from
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,computeReplacement,"com.google.common.escape.Escapers:computeReplacement(com.google.common.escape.CharEscaper,char)",171,173,"/**
* Computes replacement for a character using an escaper.
* @param escaper CharEscaper instance
* @param c character to escape
* @return escaped character as String or null if no replacement needed
*/","* Returns a string that would replace the given character in the specified escaper, or {@code
   * null} if no replacement should be made. This method is intended for use in tests through the
   * {@code EscaperAsserts} class; production users of {@link CharEscaper} should limit themselves
   * to its public interface.
   *
   * @param c the character to escape if necessary
   * @return the replacement string, or {@code null} if no escaping was needed",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,computeReplacement,"com.google.common.escape.Escapers:computeReplacement(com.google.common.escape.UnicodeEscaper,int)",184,186,"/**
* Computes replacement string for Unicode code point.
* @param escaper UnicodeEscaper instance
* @param cp Unicode code point
* @return Escaped string or null if no replacement needed
*/","* Returns a string that would replace the given character in the specified escaper, or {@code
   * null} if no replacement should be made. This method is intended for use in tests through the
   * {@code EscaperAsserts} class; production users of {@link UnicodeEscaper} should limit
   * themselves to its public interface.
   *
   * @param cp the Unicode code point to escape if necessary
   * @return the replacement string, or {@code null} if no escaping was needed",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Dispatcher.java,dispatch,"com.google.common.eventbus.Dispatcher$ImmediateDispatcher:dispatch(java.lang.Object,java.util.Iterator)",185,191,"/**
* Distributes an event to all subscribers.
* @param event the event to be dispatched
* @param subscribers iterator of event subscribers
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Dispatcher.java,dispatch,"com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher:dispatch(java.lang.Object,java.util.Iterator)",157,168,"/**
 * Dispatches an event to all subscribers.
 * @param event the event to dispatch
 * @param subscribers iterator of subscribers to notify
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Dispatcher.java,dispatch,"com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher:dispatch(java.lang.Object,java.util.Iterator)",98,120,"/**
* Dispatches an event to subscribers.
* @param event the event to be dispatched
* @param subscribers iterator of subscribers to notify
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,logger,com.google.common.eventbus.EventBus$LoggingHandler:logger(com.google.common.eventbus.SubscriberExceptionContext),286,288,"/**
* Retrieves logger for EventBus based on context.
* @param context event bus exception context
* @return Logger instance specific to the event bus identifier
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,message,com.google.common.eventbus.EventBus$LoggingHandler:message(com.google.common.eventbus.SubscriberExceptionContext),290,301,"/**
* Generates an error message for a subscriber exception.
* @param context provides details about the exception context
* @return formatted error message string
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,<init>,"com.google.common.eventbus.Subscriber:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)",56,63,"/**
* Initializes a new subscriber.
* @param bus event bus instance
* @param target object to receive events
* @param method method to handle events
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,validateEndpoints,com.google.common.graph.AbstractBaseGraph:validateEndpoints(com.google.common.graph.EndpointPair),179,182,"/**
* Validates endpoint compatibility.
* @param endpoints pair of endpoints to validate
*/","* Throws {@code IllegalArgumentException} if the ordering of {@code endpoints} is not compatible
   * with the directionality of this graph.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,com.google.common.graph.AbstractBaseGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),164,173,"/**
 * Checks if there's an edge connecting two nodes.
 * @param endpoints pair of nodes to check
 * @return true if edge exists, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,predecessors,com.google.common.graph.ForwardingGraph:predecessors(java.lang.Object),70,73,"/**
 * Returns predecessors of a given node.
 * @param node the node to find predecessors for
 * @return set of predecessor nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,advance,com.google.common.graph.EndpointPairIterator:advance(),55,63,"/**
* Advances to the next node in the iteration.
* @return true if successfully advanced, false if no more nodes
*/","* Called after {@link #successorIterator} is exhausted. Advances {@link #node} to the next node
   * and updates {@link #successorIterator} to iterate through the successors of {@link #node}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,successors,com.google.common.graph.ForwardingGraph:successors(java.lang.Object),75,78,"/**
 * Returns the set of successor nodes.
 * @param node current node
 * @return set of successor nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/IncidentEdgeSet.java,size,com.google.common.graph.IncidentEdgeSet:size(),41,50,"/**
* Returns the size of a node in the graph.
* @return number of connections for undirected, or adjusted degree for directed graphs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/IncidentEdgeSet.java,contains,com.google.common.graph.IncidentEdgeSet:contains(java.lang.Object),52,79,"/**
* Checks if the graph contains an edge represented by EndpointPair.
* @param obj object to check, must be an instance of EndpointPair
* @return true if graph contains the edge, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,computeNext,com.google.common.graph.EndpointPairIterator$Undirected:computeNext(),123,145,"/**
* Computes the next endpoint pair in a traversal.
* @return EndpointPair of nodes or null if traversal is complete
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,of,"com.google.common.graph.EndpointPair:of(com.google.common.graph.Graph,java.lang.Object,java.lang.Object)",63,65,"/**
* Creates an endpoint pair from a graph and two nodes.
* @param <N> node type
* @param graph the graph containing the nodes
* @param nodeU first node
* @param nodeV second node
* @return EndpointPair with ordered or unordered nodes based on graph direction
*/",Returns an {@link EndpointPair} representing the endpoints of an edge in {@code graph}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,of,"com.google.common.graph.EndpointPair:of(com.google.common.graph.Network,java.lang.Object,java.lang.Object)",68,70,"/**
* Creates an endpoint pair from a network and two nodes.
* @param network the network to which the nodes belong
* @param nodeU the first node
* @param nodeV the second node
* @return EndpointPair with ordered or unordered nodes based on network direction
*/",Returns an {@link EndpointPair} representing the endpoints of an edge in {@code network}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,computeNext,com.google.common.graph.EndpointPairIterator$Directed:computeNext(),74,85,"/**
* Computes the next endpoint pair.
* @return next EndpointPair or null if no more data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.EndpointPair),292,297,"/**
* Transposes the source and target of an endpoint pair.
* @param <N> type of the endpoint nodes
* @param endpoints original EndpointPair object
* @return new EndpointPair with swapped source and target if ordered, otherwise returns original
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractGraph:edges(),66,99,"/**
* Returns a set of edges in the graph.
* @return Set of EndpointPair representing edges
*/","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractValueGraph:edges(),66,99,"/**
 * Returns a set of all edges in the graph.
 * @return Set of EndpointPair<N> representing edges
 */","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,validateEndpoints,com.google.common.graph.AbstractNetwork:validateEndpoints(com.google.common.graph.EndpointPair),244,247,"/**
* Validates endpoint pair compatibility.
* @param endpoints pair of endpoints to validate
*/","* Throws an IllegalArgumentException if the ordering of {@code endpoints} is not compatible with
   * the directionality of this graph.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,inEdges,com.google.common.graph.AbstractUndirectedNetworkConnections:inEdges(),58,61,"/**
 * Returns incoming edges of the vertex.
 * @return Set of incoming edges
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,outEdges,com.google.common.graph.AbstractUndirectedNetworkConnections:outEdges(),63,66,"/**
 * Returns outgoing edges of the element.
 * @return set of outgoing edges
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,removeInEdge,"com.google.common.graph.AbstractUndirectedNetworkConnections:removeInEdge(java.lang.Object,boolean)",74,80,"/**
* Removes an incoming edge from a node.
* @param edge the edge to be removed
* @param isSelfLoop indicates if the edge is a self-loop
* @return the removed node or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,removeOutEdge,com.google.common.graph.DirectedMultiNetworkConnections:removeOutEdge(java.lang.Object),114,122,"/**
 * Removes an outgoing edge and updates successor references.
 * @param edge the edge to remove
 * @return the removed node or null if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,iterator,com.google.common.graph.EdgesConnecting:iterator(),47,53,"/**
* Returns an iterator over a single element or empty set.
* @return Iterator containing the connecting edge or empty if none exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,size,com.google.common.graph.EdgesConnecting:size(),55,58,"/**
 * Returns the number of connections.
 * @return 1 if connected, otherwise 0
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,contains,com.google.common.graph.EdgesConnecting:contains(java.lang.Object),60,64,"/**
 * Checks if the specified edge is connected.
 * @param edge the edge to check
 * @return true if the edge is connected, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,hashCode,com.google.common.graph.EndpointPair$Ordered:hashCode(),183,186,"/**
 * Generates hash code based on source and target.
 * @return computed hash code
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,toString,com.google.common.graph.EndpointPair$Ordered:toString(),188,191,"/**
* Returns a string representation of the connection.
* @return A formatted string showing source and target.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,equals,com.google.common.graph.EndpointPair$Ordered:equals(java.lang.Object),166,181,"/**
* Compares this EndpointPair to another object for equality.
* @param obj the object to compare with
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,iterator,com.google.common.graph.EndpointPair$Unordered:iterator(),125,128,"/**
* Returns an unmodifiable iterator over nodes U and V.
* @return Iterator containing nodeU and nodeV in that order
*/","Iterates in the order {@link #nodeU()}, {@link #nodeV()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,equals,com.google.common.graph.EndpointPair$Unordered:equals(java.lang.Object),214,241,"/**
* Checks equality of EndpointPair based on nodes and order.
* @param obj the object to compare with
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,nodes,com.google.common.graph.ImmutableGraph:nodes(),31,34,"/**
 * Returns the set of all nodes.
 * Delegates to the underlying implementation.
 * @return Set of nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,isDirected,com.google.common.graph.ImmutableGraph:isDirected(),45,48,"/**
 * Checks if the graph is directed.
 * @return true if the graph is directed, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,allowsSelfLoops,com.google.common.graph.ImmutableGraph:allowsSelfLoops(),50,53,"/**
 * Checks if self-loops are allowed.
 * Delegates to underlying implementation.
 * @return true if self-loops are allowed, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,nodeOrder,com.google.common.graph.ImmutableGraph:nodeOrder(),55,58,"/**
 * Returns the element order of the delegate.
 * @return ElementOrder representing the order of elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,adjacentNodes,com.google.common.graph.ImmutableGraph:adjacentNodes(java.lang.Object),65,68,"/**
 * Retrieves adjacent nodes for a given node.
 * @param node the node to find adjacent nodes for
 * @return set of adjacent nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,incidentEdges,com.google.common.graph.ImmutableGraph:incidentEdges(java.lang.Object),80,83,"/**
 * Returns incident edges of a given node.
 * @param node the node to find incident edges for
 * @return set of incident edge pairs
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,degree,com.google.common.graph.ImmutableGraph:degree(java.lang.Object),85,88,"/**
 * Returns the degree of the specified node.
 * @param node the node to evaluate
 * @return the degree of the node
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,inDegree,com.google.common.graph.ImmutableGraph:inDegree(java.lang.Object),90,93,"/**
 * Returns the number of incoming edges to the specified node.
 * @param node the target node
 * @return the number of incoming edges
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,outDegree,com.google.common.graph.ImmutableGraph:outDegree(java.lang.Object),95,98,"/**
 * Returns the out-degree of a given node.
 * @param node the node to check
 * @return the number of outgoing edges from the node
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,hasEdgeConnecting,"com.google.common.graph.ImmutableGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",100,103,"/**
* Checks if an edge exists between two nodes.
* @param nodeU first node
* @param nodeV second node
* @return true if edge exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,hasEdgeConnecting,com.google.common.graph.ImmutableGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),105,108,"/**
* Checks if an edge connects two endpoints.
* @param endpoints pair of endpoints to check
* @return true if edge exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingValueGraph.java,successors,com.google.common.graph.ForwardingValueGraph:successors(java.lang.Object),78,81,"/**
 * Returns the set of successor nodes for a given node.
 * @param node the node to find successors for
 * @return a set containing successor nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,nodeOrder,com.google.common.graph.GraphBuilder:nodeOrder(com.google.common.graph.ElementOrder),149,153,"/**
* Sets the node order for graph building.
* @param nodeOrder specifies the order of nodes
* @return a new GraphBuilder instance with the specified node order
*/","* Specifies the order of iteration for the elements of {@link Graph#nodes()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,incidentEdgeOrder,com.google.common.graph.GraphBuilder:incidentEdgeOrder(com.google.common.graph.ElementOrder),168,178,"/**
* Sets the order of incident edges.
* @param incidentEdgeOrder edge ordering strategy (must be UNORDERED or STABLE)
* @return updated GraphBuilder instance
*/","* Specifies the order of iteration for the elements of {@link Graph#edges()}, {@link
   * Graph#adjacentNodes(Object)}, {@link Graph#predecessors(Object)}, {@link
   * Graph#successors(Object)} and {@link Graph#incidentEdges(Object)}.
   *
   * <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For
   * immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable()
   * stable} order.
   *
   * @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code
   *     ElementOrder.unordered()} or {@code ElementOrder.stable()}.
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,predecessors,com.google.common.graph.Graphs$TransposedGraph:predecessors(java.lang.Object),313,316,"/**
 * Returns predecessors of a node by using successors from delegate.
 * @param node target node
 * @return set of predecessor nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,successors,com.google.common.graph.Graphs$TransposedGraph:successors(java.lang.Object),318,321,"/**
 * Returns predecessors of a node as successors.
 * @param node the node to find successors for
 * @return set of nodes that are predecessors in the original graph
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inDegree,com.google.common.graph.Graphs$TransposedGraph:inDegree(java.lang.Object),335,338,"/**
 * Returns the in-degree of a node by checking the out-degree of its delegate.
 * @param node the node to check
 * @return the in-degree of the node
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outDegree,com.google.common.graph.Graphs$TransposedGraph:outDegree(java.lang.Object),340,343,"/**
 * Returns the out-degree of a node by checking its in-degree in the transposed graph.
 * @param node the node to check
 * @return the out-degree of the node
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,"com.google.common.graph.Graphs$TransposedGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",345,348,"/**
* Checks if there's an edge between two nodes.
* @param nodeU first node
* @param nodeV second node
* @return true if an edge exists, false otherwise (transposed check)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.Graph),248,258,"/**
* Returns the transpose of a directed graph.
* @param graph the original directed graph
* @return a new Graph object representing the transposed graph
*/","* Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other
   * properties remain intact, and further updates to {@code graph} will be reflected in the view.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.Network),280,290,"/**
* Returns the transpose of a directed network.
* @param network the original directed network
* @return a new Network object representing the transpose
*/","* Returns a view of {@code network} with the direction (if any) of every edge reversed. All other
   * properties remain intact, and further updates to {@code network} will be reflected in the view.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,predecessors,com.google.common.graph.Graphs$TransposedNetwork:predecessors(java.lang.Object),433,436,"/**
 * Returns predecessors of a node by leveraging successors in reverse.
 * @param node the node to find predecessors for
 * @return set of predecessor nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,successors,com.google.common.graph.Graphs$TransposedNetwork:successors(java.lang.Object),438,441,"/**
 * Returns predecessors of a node as successors.
 * @param node the node to find successors for
 * @return set of successor nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inDegree,com.google.common.graph.Graphs$TransposedNetwork:inDegree(java.lang.Object),443,446,"/**
 * Returns the in-degree of a node by checking the out-degree of its delegate.
 * @param node the node to check
 * @return the in-degree of the node
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outDegree,com.google.common.graph.Graphs$TransposedNetwork:outDegree(java.lang.Object),448,451,"/**
 * Returns the out-degree of a node by checking the in-degree of its counterpart.
 * @param node the node to check
 * @return the out-degree of the node
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inEdges,com.google.common.graph.Graphs$TransposedNetwork:inEdges(java.lang.Object),453,456,"/**
 * Returns incoming edges for a given node.
 * @param node source node
 * @return set of incoming edges
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outEdges,com.google.common.graph.Graphs$TransposedNetwork:outEdges(java.lang.Object),458,461,"/**
 * Returns outgoing edges of a node.
 * @param node source node
 * @return set of outgoing edges
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgesConnecting,"com.google.common.graph.Graphs$TransposedNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",469,472,"/**
 * Retrieves edges connecting two nodes in reverse order.
 * @param nodeU first node
 * @param nodeV second node
 * @return Set of edges connecting nodeV to nodeU
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnecting,"com.google.common.graph.Graphs$TransposedNetwork:edgeConnecting(java.lang.Object,java.lang.Object)",479,482,"/**
 * Retrieves an edge connecting two nodes in reverse order.
 * @param nodeU first node
 * @param nodeV second node
 * @return Optional containing the edge or empty if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnectingOrNull,"com.google.common.graph.Graphs$TransposedNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)",489,492,"/**
 * Retrieves an edge connecting two nodes.
 * @param nodeU first node
 * @param nodeV second node
 * @return the edge connecting nodeU and nodeV, or null if none exists (transposed)
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,"com.google.common.graph.Graphs$TransposedNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)",499,502,"/**
 * Checks if there is an edge connecting two nodes in reverse order.
 * @param nodeU first node
 * @param nodeV second node
 * @return true if an edge exists from nodeV to nodeU, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.ValueGraph),264,274,"/**
* Returns the transpose of a directed graph.
* If the graph is undirected, it returns the graph itself.
* @param <N> node type
* @param <V> edge value type
* @param graph the original graph
* @return transposed graph or the same graph if undirected
*/","* Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other
   * properties remain intact, and further updates to {@code graph} will be reflected in the view.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,predecessors,com.google.common.graph.Graphs$TransposedValueGraph:predecessors(java.lang.Object),370,373,"/**
 * Returns predecessors of a node by using successors from delegate.
 * @param node target node
 * @return set of predecessor nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,successors,com.google.common.graph.Graphs$TransposedValueGraph:successors(java.lang.Object),375,378,"/**
 * Returns predecessors of a node as successors.
 * @param node the node to find successors for
 * @return set of predecessor nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inDegree,com.google.common.graph.Graphs$TransposedValueGraph:inDegree(java.lang.Object),380,383,"/**
* Returns the in-degree of a node by checking its out-degree in the transposed graph.
* @param node the node to check
* @return the in-degree of the node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outDegree,com.google.common.graph.Graphs$TransposedValueGraph:outDegree(java.lang.Object),385,388,"/**
 * Returns the out-degree of a node by checking its in-degree in the transposed graph.
 * @param node the node to check
 * @return the out-degree of the node
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,"com.google.common.graph.Graphs$TransposedValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",390,393,"/**
* Checks if an edge connects two nodes in reverse order.
* @param nodeU first node
* @param nodeV second node
* @return true if there's an edge from nodeV to nodeU, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValue,"com.google.common.graph.Graphs$TransposedValueGraph:edgeValue(java.lang.Object,java.lang.Object)",400,403,"/**
* Retrieves edge value between two nodes.
* @param nodeU first node
* @param nodeV second node
* @return Optional containing edge value or empty if no edge exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValueOrDefault,"com.google.common.graph.Graphs$TransposedValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)",410,413,"/**
* Retrieves edge value between nodes in reverse order.
* @param nodeU source node
* @param nodeV target node
* @param defaultValue default value if edge not found
* @return edge value or default if none exists
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,asGraph,com.google.common.graph.ImmutableNetwork:asGraph(),77,80,"/**
 * Returns an immutable graph representation.
 * @return ImmutableGraph object
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,asGraph,com.google.common.graph.ImmutableValueGraph:asGraph(),79,82,"/**
* Returns an immutable graph view of this graph.
* @return ImmutableGraph instance representing this graph
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edgeOrder,com.google.common.graph.ImmutableNetwork:edgeOrder(),125,128,"/**
 * Returns the order of edges.
 * @return ElementOrder object representing edge ordering
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,nodeOrder,com.google.common.graph.ImmutableNetwork:nodeOrder(),120,123,"/**
 * Returns the order of elements in the graph.
 * @return ElementOrder representing the order of nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,allowsSelfLoops,com.google.common.graph.ImmutableNetwork:allowsSelfLoops(),115,118,"/**
 * Checks if self-loops are allowed.
 * @return true if self-loops are permitted, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,allowsParallelEdges,com.google.common.graph.ImmutableNetwork:allowsParallelEdges(),110,113,"/**
 * Checks if parallel edges are allowed.
 * @return true if parallel edges are allowed, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,isDirected,com.google.common.graph.ImmutableNetwork:isDirected(),105,108,"/**
 * Checks if the graph is directed.
 * @return true if the graph is directed, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,nodes,com.google.common.graph.ImmutableNetwork:nodes(),95,98,"/**
 * Returns an unmodifiable set of all nodes.
 * @return Set of nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,nodeOrder,com.google.common.graph.ImmutableValueGraph:nodeOrder(),98,101,"/**
 * Returns the order of nodes.
 * @return ElementOrder object representing node order
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,allowsSelfLoops,com.google.common.graph.ImmutableValueGraph:allowsSelfLoops(),93,96,"/**
 * Checks if self-loops are allowed.
 * @return true if self-loops are permitted, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,isDirected,com.google.common.graph.ImmutableValueGraph:isDirected(),88,91,"/**
 * Checks if the graph is directed.
 * @return true if the graph is directed, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,nodes,com.google.common.graph.ImmutableValueGraph:nodes(),83,86,"/**
 * Returns an unmodifiable set of all nodes.
 * @return Unmodifiable set containing all nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,put,"com.google.common.graph.MapIteratorCache:put(java.lang.Object,java.lang.Object)",62,68,"/**
* Stores a key-value pair in the map.
* @param key unique identifier for the value
* @param value to be stored
* @return previous value associated with the key or null if none
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,remove,com.google.common.graph.MapIteratorCache:remove(java.lang.Object),70,75,"/**
* Removes entry by key and clears cache.
* @param key the key to remove
* @return value associated with the removed key or null if not present
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,clear,com.google.common.graph.MapIteratorCache:clear(),77,80,"/**
 * Clears all entries from cache and underlying map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,clearCache,com.google.common.graph.MapRetrievalCache:clearCache(),83,88,"/**
 * Clears the cache by resetting specific entries.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,containsKey,com.google.common.graph.MapIteratorCache:containsKey(java.lang.Object),98,100,"/**
 * Checks if the map contains a mapping for the specified key.
 * @param key the key to check
 * @return true if the map contains the key, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edges,com.google.common.graph.StandardNetwork:edges(),100,103,"/**
 * Returns an unmodifiable set of all edges.
 * @return Set of edges
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,getIfCached,com.google.common.graph.MapRetrievalCache:getIfCached(java.lang.Object),57,81,"/**
* Retrieves cached value by key if present.
* @param key unique identifier for the cache entry
* @return value associated with the key or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,addToCache,"com.google.common.graph.MapRetrievalCache:addToCache(java.lang.Object,java.lang.Object)",90,92,"/**
 * Adds an entry to the cache.
 * @param key unique identifier for the cache entry
 * @param value data associated with the key
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,nodeOrder,com.google.common.graph.NetworkBuilder:nodeOrder(com.google.common.graph.ElementOrder),176,180,"/**
* Sets the node order for network construction.
* @param nodeOrder specifies the ordering of nodes
* @return updated NetworkBuilder instance with specified node order
*/","* Specifies the order of iteration for the elements of {@link Network#nodes()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,edgeOrder,com.google.common.graph.NetworkBuilder:edgeOrder(com.google.common.graph.ElementOrder),187,191,"/**
* Sets the edge order for the network.
* @param edgeOrder specifies the order of edges
* @return a new NetworkBuilder with updated edge order
*/","* Specifies the order of iteration for the elements of {@link Network#edges()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,newTraversal,com.google.common.graph.Traverser$1:newTraversal(),345,345,"/**
 * Creates a new traversal instance.
 * @return a new Traversal object for node operations
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,<init>,com.google.common.graph.Traverser$Traversal$2:<init>(com.google.common.graph.SuccessorsFunction),364,366,"/**
 * Initializes traversal with a successor function.
 * @param successorFunction defines how to get successors of a node
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,breadthFirst,com.google.common.graph.Traverser$Traversal:breadthFirst(java.util.Iterator),409,411,"/**
* Performs breadth-first traversal.
* @param startNodes initial nodes to start traversal
* @return iterator for breadth-first order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,preOrder,com.google.common.graph.Traverser$Traversal:preOrder(java.util.Iterator),413,415,"/**
* Returns an iterator for preorder traversal.
* @param startNodes initial nodes to start traversal
* @return Iterator for preorder traversal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,predecessors,com.google.common.graph.UndirectedGraphConnections:predecessors(),69,72,"/**
 * Returns predecessors of a node.
 * @return Set of predecessor nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,successors,com.google.common.graph.UndirectedGraphConnections:successors(),74,77,"/**
 * Returns the set of successor nodes.
 * @return Set of adjacent nodes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,removePredecessor,com.google.common.graph.UndirectedGraphConnections:removePredecessor(java.lang.Object),91,95,"/**
* Removes predecessor of a given node.
* @param node the node whose predecessor is to be removed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,addPredecessor,"com.google.common.graph.UndirectedGraphConnections:addPredecessor(java.lang.Object,java.lang.Object)",102,106,"/**
* Adds predecessor to node by using addSuccessor method.
* @param node target node to add predecessor to
* @param value associated value with the node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,removeOutEdge,com.google.common.graph.UndirectedMultiNetworkConnections:removeOutEdge(java.lang.Object),92,100,"/**
* Removes an outgoing edge and updates adjacent nodes.
* @param edge the edge to remove
* @return the removed node or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,nodeOrder,com.google.common.graph.ValueGraphBuilder:nodeOrder(com.google.common.graph.ElementOrder),153,157,"/**
* Sets the node ordering for the graph.
* @param nodeOrder the order in which nodes are iterated
* @return a new builder with the specified node order
*/","* Specifies the order of iteration for the elements of {@link Graph#nodes()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,incidentEdgeOrder,com.google.common.graph.ValueGraphBuilder:incidentEdgeOrder(com.google.common.graph.ElementOrder),172,183,"/**
 * Sets the order of incident edges.
 * @param incidentEdgeOrder order type for incident edges
 * @return updated ValueGraphBuilder instance
 */","* Specifies the order of iteration for the elements of {@link ValueGraph#edges()}, {@link
   * ValueGraph#adjacentNodes(Object)}, {@link ValueGraph#predecessors(Object)}, {@link
   * ValueGraph#successors(Object)} and {@link ValueGraph#incidentEdges(Object)}.
   *
   * <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For
   * immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable()
   * stable} order.
   *
   * @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code
   *     ElementOrder.unordered()} or {@code ElementOrder.stable()}.
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,update,com.google.common.hash.AbstractByteHasher:update(byte[]),41,43,"/**
 * Updates internal state with provided byte array.
 * @param b byte array to update with
 */",Updates this hasher with the given bytes.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,update,com.google.common.hash.AbstractByteHasher:update(java.nio.ByteBuffer),53,62,"/**
* Updates buffer content.
* @param b ByteBuffer to be updated
*/",Updates this hasher with bytes from the given buffer.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,update,com.google.common.hash.AbstractByteHasher:update(int),65,73,"/**
* Updates hasher with specified number of bytes.
* @param bytes number of bytes to process
* @return current Hasher instance
*/",Updates the sink with the given number of bytes from the buffer.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractCompositeHashFunction.java,newHasher,com.google.common.hash.AbstractCompositeHashFunction:newHasher(),53,60,"/**
* Creates a new hasher combining multiple functions.
* @return Combined Hasher instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractCompositeHashFunction.java,newHasher,com.google.common.hash.AbstractCompositeHashFunction:newHasher(int),62,70,"/**
* Creates a new hasher with expected input size.
* @param expectedInputSize estimated size of the input data
* @return Hasher object for combined hashing functions
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putDouble,com.google.common.hash.AbstractHasher:putDouble(double),36,40,"/**
* Adds a double value to the hash.
* @param d the double value to add
* @return this Hasher instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putLong,com.google.common.hash.Hasher:putLong(long),82,84,"/**
 * Adds a long value to the hash.
 * @param l the long value to add
 * @return this Hasher instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putFloat,com.google.common.hash.AbstractHasher:putFloat(float),42,46,"/**
* Adds a float to the hash.
* @param f the float value to add
* @return this hasher instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putUnencodedChars,com.google.common.hash.AbstractHasher:putUnencodedChars(java.lang.CharSequence),48,55,"/**
 * Adds characters from a CharSequence to the hasher.
 * @param charSequence the sequence of characters to add
 * @return the Hasher instance for method chaining
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putChar,com.google.common.hash.Hasher:putChar(char),101,103,"/**
 * Adds a character to the hash.
 * @param c character to add
 * @return this Hasher instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,putBytes,com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:putBytes(java.nio.ByteBuffer),98,102,"/**
 * Writes bytes from ByteBuffer to the underlying stream.
 * @param bytes ByteBuffer containing data to write
 * @return This Hasher instance for chaining
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,hash,com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:hash(),104,107,"/**
 * Generates a hash code for the byte array.
 * @return HashCode object representing the hash of the byte array
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,processRemaining,com.google.common.hash.AbstractStreamingHasher:processRemaining(java.nio.ByteBuffer),81,90,"/**
* Processes remaining bytes in ByteBuffer by padding with zeros and flipping.
* @param bb ByteBuffer to be processed
*/","* This is invoked for the last bytes of the input, which are not enough to fill a whole chunk.
   * The passed {@code ByteBuffer} is guaranteed to be non-empty.
   *
   * <p>This implementation simply pads with zeros and delegates to {@link #process(ByteBuffer)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,munch,com.google.common.hash.AbstractStreamingHasher:munch(),212,220,"/**
* Processes buffer chunks.
* Flips and processes chunks from buffer until no full chunk remains.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,<init>,com.google.common.hash.BloomFilter$SerialForm:<init>(com.google.common.hash.BloomFilter),571,576,"/**
* Constructs a serial form of the BloomFilter.
* @param bf the BloomFilter to serialize
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,equals,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:equals(java.lang.Object),297,305,"/**
* Checks equality with another LockFreeBitArray.
* @param o the object to compare
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,hashCode,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:hashCode(),307,311,"/**
* Generates hash code for the data array.
* @return hash code of the data array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,apply,com.google.common.hash.BloomFilter:apply(java.lang.Object),164,169,"/**
* Checks if input is contained.
* @param input the item to check
* @return true if input is contained, false otherwise
*/","* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #mightContain}
   *     instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,toBloomFilter,"com.google.common.hash.BloomFilter:toBloomFilter(com.google.common.hash.Funnel,long,double)",369,385,"/**
* Creates a Bloom filter collector.
* @param funnel defines how to extract features from elements
* @param expectedInsertions estimated number of insertions
* @param fpp acceptable false positive probability
* @return Collector for creating a BloomFilter
*/","* Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link
   * BloomFilter} with the specified expected false positive probability.
   *
   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the
   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive
   * probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @param fpp the desired false positive probability (must be positive and less than 1.0)
   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements
   * @since 23.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,bitSize,com.google.common.hash.BloomFilter:bitSize(),237,240,"/**
 * Returns the number of bits required to represent the value.
 * @return Number of bits in the value
 */",Returns the number of bits in the underlying bit array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,read,com.google.common.io.ReaderInputStream:read(),122,125,"/**
* Reads a single byte from the input stream.
* @return the unsigned value of the byte or -1 if end of stream is reached
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,saturatedCast,com.google.common.primitives.UnsignedBytes:saturatedCast(long),111,119,"/**
* Casts long to byte, saturating at max/min values.
* @param value the long value to cast
* @return saturated byte value
*/","* Returns the {@code byte} value that, when treated as unsigned, is nearest in value to {@code
   * value}.
   *
   * @param value any {@code long} value
   * @return {@code (byte) 255} if {@code value >= 255}, {@code (byte) 0} if {@code value <= 0}, and
   *     {@code value} cast to {@code byte} otherwise",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,compare,"com.google.common.primitives.UnsignedBytes:compare(byte,byte)",131,133,"/**
 * Compares two bytes as unsigned integers.
 * @param a first byte value
 * @param b second byte value
 * @return negative if a < b, zero if a == b, positive if a > b
 */","* Compares the two specified {@code byte} values, treating them as unsigned values between 0 and
   * 255 inclusive. For example, {@code (byte) -127} is considered greater than {@code (byte) 127}
   * because it is seen as having the value of positive {@code 129}.
   *
   * @param a the first {@code byte} to compare
   * @param b the second {@code byte} to compare
   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is
   *     greater than {@code b}; or zero if they are equal",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,toString,"com.google.common.primitives.UnsignedBytes:toString(byte,int)",194,201,"/**
* Converts a byte to a string representation in the specified radix.
* @param x the byte value to convert
* @param radix the base to use for conversion (must be between Character.MIN_RADIX and Character.MAX_RADIX)
* @return string representation of the byte in the given radix
*/","* Returns a string representation of {@code x} for the given radix, where {@code x} is treated as
   * unsigned.
   *
   * @param x the value to convert to a string.
   * @param radix the radix to use while working with {@code x}
   * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}
   *     and {@link Character#MAX_RADIX}.
   * @since 13.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,putAll,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:putAll(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray),258,267,"/**
 * Copies all bits from another LockFreeBitArray.
 * @param other source bit array with the same length
 */","* Combines the two BitArrays using bitwise OR.
     *
     * <p>NOTE: Because of the use of atomics, if the other LockFreeBitArray is being mutated while
     * this operation is executing, not all of those new 1's may be set in the final state of this
     * LockFreeBitArray. The ONLY guarantee provided is that all the bits that were set in the other
     * LockFreeBitArray at the start of this method will be set in this LockFreeBitArray at the end
     * of this method.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,set,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:set(long),188,209,"/**
* Sets a bit at the specified index to 1.
* @param bitIndex index of the bit to set
* @return true if the bit was changed from 0 to 1, false otherwise
*/",Returns true if the bit changed value.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,equalsSameBits,com.google.common.hash.HashCode$BytesHashCode:equalsSameBits(com.google.common.hash.HashCode),307,320,"/**
 * Compares two hash codes for bitwise equality.
 * @param that the other HashCode to compare with
 * @return true if both have identical byte arrays, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,hashCode,com.google.common.hash.HashCode:hashCode(),383,397,"/**
* Generates a hash code based on the internal byte representation.
* @return int hash code value
*/","* Returns a ""Java hash code"" for this {@code HashCode} instance; this is well-defined (so, for
   * example, you can safely put {@code HashCode} instances into a {@code HashSet}) but is otherwise
   * probably not what you want to use.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,toString,com.google.common.hash.HashCode:toString(),410,418,"/**
* Converts byte array to hexadecimal string.
* @return Hexadecimal representation of the byte array
*/","* Returns a string containing each byte of {@link #asBytes}, in order, as a two-digit unsigned
   * hexadecimal number in lower case.
   *
   * <p>Note that if the output is considered to be a single hexadecimal number, whether this string
   * is big-endian or little-endian depends on the byte order of {@link #asBytes}. This may be
   * surprising for implementations of {@code HashCode} that represent the number in big-endian
   * since everything else in the hashing API uniformly treats multibyte values as little-endian.
   *
   * <p>To create a {@code HashCode} from its string representation, see {@link #fromString}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,fromByteArray,com.google.common.primitives.Longs:fromByteArray(byte[]),308,312,"/**
 * Converts byte array to long.
 * @param bytes 8-byte array
 * @return long value from byte array
 */","* Returns the {@code long} value whose big-endian representation is stored in the first 8 bytes
   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getLong()}. For example, the
   * input byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}} would yield the
   * {@code long} value {@code 0x1213141516171819L}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 8 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,process,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:process(java.nio.ByteBuffer),81,97,"/**
 * Processes input data to update CRC values.
 * @param bb ByteBuffer containing input data
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,processRemaining,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:processRemaining(java.nio.ByteBuffer),99,112,"/**
* Processes remaining data in ByteBuffer for CRC calculation.
* Updates CRC values and marks processing as finished.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,weakHashLength32WithSeeds,"com.google.common.hash.FarmHashFingerprint64:weakHashLength32WithSeeds(byte[],int,long,long,long[])",100,115,"/**
 * Computes a weak hash for a 32-byte segment of input bytes.
 * @param bytes input byte array
 * @param offset starting position in the byte array
 * @param seedA initial seed value A
 * @param seedB initial seed value B
 * @param output array to store the resulting hash values
 */","* Computes intermediate hash of 32 bytes of byte array from the given offset. Results are
   * returned in the output array because when we last measured, this was 12% faster than allocating
   * new arrays every time.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,weakHashLength32WithSeeds,"com.google.common.hash.Fingerprint2011:weakHashLength32WithSeeds(byte[],int,long,long,long[])",95,110,"/**
* Computes a weak hash for 32 bytes with two seeds.
* @param bytes input byte array
* @param offset starting index in the byte array
* @param seedA first initial seed value
* @param seedB second initial seed value
* @param output array to store resulting hash values
*/","* Computes intermediate hash of 32 bytes of byte array from the given offset. Results are
   * returned in the output array - this is 12% faster than allocating new arrays every time.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength17to32,"com.google.common.hash.FarmHashFingerprint64:hashLength17to32(byte[],int,int)",142,150,"/**
* Computes hash for byte array of length 17 to 32.
* @param bytes input byte array
* @param offset starting index in the array
* @param length number of bytes to hash
* @return computed hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength33To64,"com.google.common.hash.FarmHashFingerprint64:hashLength33To64(byte[],int,int)",152,166,"/**
* Computes a 64-bit hash for a byte array segment.
* @param bytes the input byte array
* @param offset starting index of the segment
* @param length length of the segment to hash
* @return 64-bit hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength0to16,"com.google.common.hash.FarmHashFingerprint64:hashLength0to16(byte[],int,int)",117,140,"/**
* Computes hash for byte array of length 0 to 16.
* @param bytes input byte array
* @param offset starting index in the array
* @param length number of bytes to hash
* @return computed hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,hashLength33To64,"com.google.common.hash.Fingerprint2011:hashLength33To64(byte[],int,int)",148,169,"/**
* Computes a hash for a byte array using a length-33 to 64 byte block.
* @param bytes input byte array
* @param offset starting index in the byte array
* @param length number of bytes to include in the hash
* @return computed hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,murmurHash64WithSeed,"com.google.common.hash.Fingerprint2011:murmurHash64WithSeed(byte[],int,int,long)",171,196,"/**
* Computes a 64-bit MurmurHash with a given seed.
* @param bytes input byte array
* @param offset starting index in the array
* @param length number of bytes to hash
* @param seed initial seed value for hashing
* @return computed hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,writeReplace,com.google.common.hash.Funnels$StringCharsetFunnel:writeReplace(),121,123,"/**
 * Returns a proxy object for serialization.
 * @param charset character set used in serialization
 * @return SerializedForm instance representing the object's state
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,<init>,com.google.common.hash.HashCode$BytesHashCode:<init>(byte[]),253,255,"/**
* Constructs a BytesHashCode from a byte array.
* @param bytes input byte array (cannot be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,<init>,com.google.common.hash.HashCode$IntHashCode:<init>(int),121,123,"/**
 * Initializes an IntHashCode with a given hash value.
 * @param hash the integer hash code to store
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,<init>,com.google.common.hash.HashCode$LongHashCode:<init>(long),178,180,"/**
 * Constructs a LongHashCode with the specified hash value.
 * @param hash the long hash value to store
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,asLong,com.google.common.hash.HashCode$BytesHashCode:asLong(),279,286,"/**
 * Converts hash code to a long value.
 * Requires at least 8 bytes; otherwise, throws an exception.
 * @return long representation of the hash code
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,padToLong,com.google.common.hash.HashCode$IntHashCode:padToLong(),145,148,"/**
 * Converts hash to long by padding with zeros.
 * @return Padded long value of the hash
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,longValue,com.google.common.primitives.UnsignedInteger:longValue(),186,189,"/**
 * Converts value to its long representation.
 * @return long value of the object
 */",Returns the value of this {@code UnsignedInteger} as a {@code long}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,divide,"com.google.common.primitives.UnsignedInts:divide(int,int)",286,288,"/**
 * Divides two integers with overflow protection.
 * @param dividend the number to be divided
 * @param divisor the number by which to divide
 * @return the quotient of the division
 */","* Returns dividend / divisor, where the dividend and divisor are treated as unsigned 32-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#divideUnsigned(int, int)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,remainder,"com.google.common.primitives.UnsignedInts:remainder(int,int)",300,302,"/**
* Calculates the remainder of division.
* @param dividend number to be divided
* @param divisor number by which to divide
* @return remainder of the division
*/","* Returns dividend % divisor, where the dividend and divisor are treated as unsigned 32-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#remainderUnsigned(int, int)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,crc32cConstructor,com.google.common.hash.Hashing$Crc32cMethodHandles:crc32cConstructor(),532,555,"/**
* Retrieves MethodHandle for CRC32C constructor.
* @return MethodHandle for CRC32C constructor or throws AssertionError if class not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,murmur3_32,com.google.common.hash.Hashing:murmur3_32(int),111,115,"/**
 * Creates a 32-bit Murmur3 hash function.
 * @param seed initial seed value for the hash function
 * @return HashFunction instance configured with the given seed
 */","* Returns a hash function implementing the <a
   * href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp"">32-bit murmur3
   * algorithm, x86 variant</a> (little-endian variant), using the given seed value, <b>with a known
   * bug</b> as described in the deprecation text.
   *
   * <p>The C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A), which however does not
   * have the bug.
   *
   * @deprecated This implementation produces incorrect hash values from the {@link
   *     HashFunction#hashString} method if the string contains non-BMP characters. Use {@link
   *     #murmur3_32_fixed(int)} instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,murmur3_32_fixed,com.google.common.hash.Hashing:murmur3_32_fixed(int),148,151,"/**
 * Creates a Murmur3-32 hash function with a fixed seed.
 * @param seed initial seed value for the hash function
 * @return HashFunction instance configured with the given seed
 */","* Returns a hash function implementing the <a
   * href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp"">32-bit murmur3
   * algorithm, x86 variant</a> (little-endian variant), using the given seed value.
   *
   * <p>The exact C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A).
   *
   * <p>This method is called {@code murmur3_32_fixed} because it fixes a bug in the {@code
   * HashFunction} returned by the original {@code murmur3_32} method.
   *
   * @since 31.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,murmur3_128,com.google.common.hash.Hashing:murmur3_128(int),177,180,"/**
* Creates a Murmur3-128 hash function.
* @param seed initial seed value for the hash function
* @return HashFunction instance configured with the given seed
*/","* Returns a hash function implementing the <a
   * href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp"">128-bit murmur3
   * algorithm, x64 variant</a> (little-endian variant), using the given seed value.
   *
   * <p>The exact C++ equivalent is the MurmurHash3_x64_128 function (Murmur3F).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,consistentHash,"com.google.common.hash.Hashing:consistentHash(long,int)",672,687,"/**
 * Generates a consistent hash for an input within a specified number of buckets.
 * @param input the input value to hash
 * @param buckets the number of buckets to distribute the input into
 * @return the bucket index for the input
 */","* Assigns to {@code input} a ""bucket"" in the range {@code [0, buckets)}, in a uniform manner that
   * minimizes the need for remapping as {@code buckets} grows. That is, {@code consistentHash(h,
   * n)} equals:
   *
   * <ul>
   *   <li>{@code n - 1}, with approximate probability {@code 1/n}
   *   <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})
   * </ul>
   *
   * <p>This method is suitable for the common use case of dividing work among buckets that meet the
   * following conditions:
   *
   * <ul>
   *   <li>You want to assign the same fraction of inputs to each bucket.
   *   <li>When you reduce the number of buckets, you can accept that the most recently added
   *       buckets will be removed first. More concretely, if you are dividing traffic among tasks,
   *       you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and
   *       {@code consistentHash} will handle it. If, however, you are dividing traffic among
   *       servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to
   *       take each of the servers offline, {@code consistentHash} will be a poor fit: It provides
   *       no way for you to specify which of the three buckets is disappearing. Thus, if your
   *       buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will
   *       assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo}
   *       traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic.
   * </ul>
   *
   * <p>See the <a href=""http://en.wikipedia.org/wiki/Consistent_hashing"">Wikipedia article on
   * consistent hashing</a> for more information.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,newHasher,com.google.common.hash.MacHashFunction:newHasher(),79,89,"/**
 * Creates a new Hasher instance.
 * @return Hasher object for hashing data
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,<init>,"com.google.common.hash.MacHashFunction:<init>(java.lang.String,java.security.Key,java.lang.String)",45,51,"/**
* Initializes a MacHashFunction with the specified algorithm and key.
* @param algorithmName name of the MAC algorithm
* @param key cryptographic key used for hashing
* @param toString string representation of the function
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,newHasher,com.google.common.hash.MessageDigestHashFunction:newHasher(),90,100,"/**
* Creates a new Hasher instance.
* @return Hasher object for hashing operations
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,<init>,"com.google.common.hash.MessageDigestHashFunction:<init>(java.lang.String,java.lang.String)",46,51,"/**
* Initializes a new hash function using the specified algorithm.
* @param algorithmName name of the hashing algorithm
* @param toString string representation of the hash function
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,<init>,"com.google.common.hash.MessageDigestHashFunction:<init>(java.lang.String,int,java.lang.String)",53,61,"/**
* Initializes a MessageDigest-based hash function.
* @param algorithmName name of the hashing algorithm
* @param bytes number of bytes for the digest output (must be >= 4 and <= max digest length)
* @param toString string representation of the hash function
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,bmix64,"com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:bmix64(long,long)",110,122,"/**
* Mixes two long values into hash state.
* @param k1 first key part
* @param k2 second key part
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,processRemaining,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:processRemaining(java.nio.ByteBuffer),124,167,"/**
 * Processes remaining bytes in buffer for hashing.
 * @param bb ByteBuffer containing input data
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,newHasher,com.google.common.hash.Murmur3_32HashFunction:newHasher(),84,87,"/**
 * Creates a new Murmur3-32 hasher with a specified seed.
 * @param seed initial value for the hash function
 * @return Hasher instance using Murmur3-32 algorithm
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putByte,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putByte(byte),295,300,"/**
 * Adds a byte to the hash.
 * @param b byte value to add
 * @return this Hasher instance for chaining
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putInt,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putInt(int),331,336,"/**
* Adds an integer to the hash computation.
* @param i the integer to add
* @return the current Hasher instance for method chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putLong,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putLong(long),338,344,"/**
 * Updates hasher with a long value.
 * @param l the long value to hash
 * @return this Hasher instance for chaining
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putChar,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putChar(char),346,351,"/**
* Adds a character to the hash.
* @param c character to add
* @return this Hasher instance for chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,getIntLittleEndian,"com.google.common.hash.Murmur3_32HashFunction:getIntLittleEndian(byte[],int)",240,242,"/**
 * Converts four bytes from a byte array into an integer using little-endian format.
 * @param input the source byte array
 * @param offset starting index of the byte sequence
 * @return the resulting integer value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,fromByteArray,com.google.common.primitives.Ints:fromByteArray(byte[]),347,350,"/**
 * Converts a byte array to an integer.
 * @param bytes byte array containing at least 4 elements
 * @return integer value represented by the first 4 bytes of the array
 */","* Returns the {@code int} value whose big-endian representation is stored in the first 4 bytes of
   * {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getInt()}. For example, the input
   * byte array {@code {0x12, 0x13, 0x14, 0x15, 0x33}} would yield the {@code int} value {@code
   * 0x12131415}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 4 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,processM,com.google.common.hash.SipHashFunction$SipHasher:processM(long),157,161,"/**
 * Processes input value by XORing and performing SipHash round.
 * @param m input value to process
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,"com.google.common.io.AppendableWriter:write(char[],int,int)",54,60,"/**
* Writes characters to the target appending a new string.
* @param cbuf character buffer containing data to write
* @param off starting offset in the buffer
* @param len number of characters to write
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,com.google.common.io.AppendableWriter:write(int),66,70,"/**
* Writes a single character to the target.
* @param c character to write
* @throws IOException if an I/O error occurs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,com.google.common.io.AppendableWriter:write(java.lang.String),72,77,"/**
 * Writes a string to the target.
 * @param str the string to write
 * @throws IOException if an I/O error occurs
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,"com.google.common.io.AppendableWriter:write(java.lang.String,int,int)",79,85,"/**
 * Writes a portion of a string to the target.
 * @param str source string
 * @param off starting offset in the string
 * @param len number of characters to write
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,flush,com.google.common.io.AppendableWriter:flush(),87,93,"/**
* Flushes the underlying target if it is Flushable.
* Throws IOException if an I/O error occurs.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,append,com.google.common.io.AppendableWriter:append(char),103,108,"/**
* Appends a character to the target.
* @param c character to append
* @return this Writer instance
* @throws IOException if an I/O error occurs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,append,com.google.common.io.AppendableWriter:append(java.lang.CharSequence),110,115,"/**
* Appends a character sequence to the target.
* @param charSeq the character sequence to append
* @return this writer instance
* @throws IOException if an I/O error occurs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,append,"com.google.common.io.AppendableWriter:append(java.lang.CharSequence,int,int)",117,122,"/**
* Appends a subsequence of characters to the target.
* @param charSeq character sequence to append
* @param start starting index of the subsequence
* @param end ending index of the subsequence (exclusive)
* @return this Writer instance for chaining
* @throws IOException if an I/O error occurs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,"com.google.common.io.ByteSource$ByteArrayByteSource:<init>(byte[],int,int)",574,578,"/**
* Initializes with byte array segment.
* @param bytes source byte array
* @param offset starting index of the segment
* @param length length of the segment
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,com.google.common.io.ByteSource$ConcatenatedByteSource:<init>(java.lang.Iterable),677,679,"/**
 * Initializes a ConcatenatedByteSource with multiple ByteSources.
 * @param sources iterable of ByteSource objects to concatenate
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,<init>,com.google.common.io.Files$FileByteSource:<init>(java.io.File),125,127,"/**
 * Initializes a new instance of FileByteSource.
 * @param file the file to be used as the source
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,<init>,com.google.common.io.Resources$UrlByteSource:<init>(java.net.URL),63,65,"/**
 * Initializes a new instance with the specified URL.
 * @param url the URL to be used; must not be null
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decode,com.google.common.io.BaseEncoding$Alphabet:decode(char),531,544,"/**
 * Decodes a single character to its corresponding integer value.
 * @param ch the character to decode
 * @return the decoded integer value
 * @throws DecodingException if the character is unrecognized
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,equals,com.google.common.io.BaseEncoding$StandardBaseEncoding:equals(java.lang.Object),935,943,"/**
 * Checks equality based on alphabet and padding character.
 * @param other object to compare
 * @return true if both objects have the same alphabet and padding character
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,hashCode,com.google.common.io.BaseEncoding$StandardBaseEncoding:hashCode(),945,948,"/**
 * Generates hash code based on alphabet and padding character.
 * @return combined hash code of alphabet and padding character
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$SeparatedBaseEncoding:<init>(com.google.common.io.BaseEncoding,java.lang.String,int)",1145,1151,"/**
* Initializes encoding with a separator.
* @param delegate base encoding to use
* @param separator string to insert between encoded segments
* @param afterEveryChars number of characters after which to insert the separator
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$StandardBaseEncoding:<init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",623,630,"/**
* Initializes a base encoding with an alphabet and optional padding.
* @param alphabet the character set for encoding
* @param paddingChar optional padding character, must not be in alphabet
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$CharSequenceCharSource:<init>(java.lang.CharSequence),541,543,"/**
* Initializes a CharSource with the given sequence.
* @param seq character sequence to wrap
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$ConcatenatedCharSource:<init>(java.lang.Iterable),691,693,"/**
 * Constructs a concatenated character source from an iterable of char sources.
 * @param sources iterable of character sources to concatenate
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,asByteSource,com.google.common.io.ByteSource$AsCharSource:asByteSource(java.nio.charset.Charset),451,457,"/**
* Returns a ByteSource using the specified charset.
* If the charset matches, returns this ByteSource; otherwise, delegates to superclass.
* @param charset character encoding to use
* @return ByteSource with specified charset
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openBufferedStream,com.google.common.io.ByteSource$ByteArrayByteSource:openBufferedStream(),585,588,"/**
 * Opens a buffered input stream.
 * @return Buffered InputStream object
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,asCharSource,com.google.common.io.ByteSource$EmptyByteSource:asCharSource(java.nio.charset.Charset),656,660,"/**
* Returns an empty character source.
* @param charset character set to use (not used in this implementation)
* @return empty CharSource instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,slice,"com.google.common.io.ByteSource$SlicedByteSource:slice(long,long)",529,537,"/**
* Slices a portion of the byte source.
* @param offset starting position for slicing
* @param length number of bytes to slice
* @return sliced ByteSource or empty if out of bounds
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,asCharSource,com.google.common.io.CharSource$AsByteSource:asCharSource(java.nio.charset.Charset),516,522,"/**
 * Returns a CharSource with the specified charset.
 * If the charsets match, returns this instance; otherwise, delegates to superclass.
 * @param charset character set for encoding
 * @return CharSource with the given charset
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,asCharSource,com.google.common.io.MoreFiles$PathByteSource:asCharSource(java.nio.charset.Charset),167,184,"/**
 * Returns a CharSource for reading from the file with specified charset.
 * Uses Files.lines if no OpenOptions are provided; otherwise, delegates to superclass.
 * @param charset character set for reading the file
 * @return CharSource for file content
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,copy,"com.google.common.io.ByteStreams:copy(java.io.InputStream,java.io.OutputStream)",108,123,"/**
* Copies data from an InputStream to an OutputStream.
* @param from source InputStream
* @param to destination OutputStream
* @return number of bytes copied
*/","* Copies all bytes from the input stream to the output stream. Does not close or flush either
   * stream.
   *
   * <p><b>Java 9 users and later:</b> this method should be treated as deprecated; use the
   * equivalent {@link InputStream#transferTo} method instead.
   *
   * @param from the input stream to read from
   * @param to the output stream to write to
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,exhaust,com.google.common.io.ByteStreams:exhaust(java.io.InputStream),289,298,"/**
* Reads and discards all data from the input stream.
* @param in InputStream to exhaust
* @return Total number of bytes read and discarded
*/","* Reads and discards data from the given {@code InputStream} until the end of the stream is
   * reached. Returns the total number of bytes read. Does not close the stream.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,readBytes,"com.google.common.io.ByteStreams:readBytes(java.io.InputStream,com.google.common.io.ByteProcessor)",895,909,"/**
* Reads bytes from InputStream and processes them.
* @param input source of bytes to be read
* @param processor handles byte processing
* @return result from processor or null if not applicable
* @throws IOException on I/O error
*/","* Process the bytes of the given input stream using the given processor.
   *
   * @param input the input stream to process
   * @param processor the object to which to pass the bytes of the stream
   * @return the result of the byte processor
   * @throws IOException if an I/O error occurs
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataInput,com.google.common.io.ByteStreams:newDataInput(java.io.ByteArrayInputStream),329,332,"/**
 * Creates a ByteArrayDataInput from ByteArrayInputStream.
 * @param byteArrayInputStream input stream containing byte data
 * @return ByteArrayDataInput for reading bytes
 */","* Returns a new {@link ByteArrayDataInput} instance to read from the given {@code
   * ByteArrayInputStream}. The given input stream is not reset before being read from by the
   * returned {@code ByteArrayDataInput}.
   *
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataOutput,com.google.common.io.ByteStreams:newDataOutput(java.io.ByteArrayOutputStream),514,517,"/**
* Wraps ByteArrayOutputStream in ByteArrayDataOutput.
* @param byteArrayOutputStream underlying stream to wrap
* @return ByteArrayDataOutput instance
*/","* Returns a new {@link ByteArrayDataOutput} instance which writes to the given {@code
   * ByteArrayOutputStream}. The given output stream is not reset before being written to by the
   * returned {@code ByteArrayDataOutput} and new data will be appended to any existing content.
   *
   * <p>Note that if the given output stream was not empty or is modified after the {@code
   * ByteArrayDataOutput} is created, the contract for {@link ByteArrayDataOutput#toByteArray} will
   * not be honored (the bytes returned in the byte array may not be exactly what was written via
   * calls to {@code ByteArrayDataOutput}).
   *
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,<init>,"com.google.common.io.ReaderInputStream:<init>(java.io.Reader,java.nio.charset.CharsetEncoder,int)",105,115,"/**
 * Initializes a stream that converts character input to bytes.
 * @param reader source of characters
 * @param encoder character-to-byte encoder
 * @param bufferSize size of internal buffers
 */","* Creates a new input stream that will encode the characters from {@code reader} into bytes using
   * the given character set encoder.
   *
   * @param reader input source
   * @param encoder character set encoder used for encoding chars to bytes
   * @param bufferSize size of internal input and output buffers
   * @throws IllegalArgumentException if bufferSize is non-positive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,startDraining,com.google.common.io.ReaderInputStream:startDraining(boolean),242,249,"/**
* Starts draining the buffer, doubling its capacity if overflow is detected.
* @param overflow indicates if buffer overflow has occurred
*/","* Flips the buffer output buffer so we can start reading bytes from it. If we are starting to
   * drain because there was overflow, and there aren't actually any characters to drain, then the
   * overflow must be due to a small output buffer.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,copy,"com.google.common.io.ByteStreams:copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel)",134,162,"/**
 * Copies data from a readable channel to a writable channel.
 * @param from source ReadableByteChannel
 * @param to destination WritableByteChannel
 * @return number of bytes copied
 * @throws IOException if an I/O error occurs
 */","* Copies all bytes from the readable channel to the writable channel. Does not close or flush
   * either channel.
   *
   * @param from the readable channel to read from
   * @param to the writable channel to write to
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineReader.java,readLine,com.google.common.io.LineReader:readLine(),70,84,"/**
 * Reads the next line from the input.
 * @return the next line as a String or null if end of stream is reached
 * @throws IOException if an I/O error occurs
 */","* Reads a line of text. A line is considered to be terminated by any one of a line feed ({@code
   * '\n'}), a carriage return ({@code '\r'}), or a carriage return followed immediately by a
   * linefeed ({@code ""\r\n""}).
   *
   * @return a {@code String} containing the contents of the line, not including any
   *     line-termination characters, or {@code null} if the end of the stream has been reached.
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,skipUpTo,"com.google.common.io.ByteStreams:skipUpTo(java.io.InputStream,long)",843,872,"/**
 * Skips up to n bytes from the input stream.
 * @param in InputStream to skip bytes from
 * @param n maximum number of bytes to skip
 * @return actual number of bytes skipped
 * @throws IOException if an I/O error occurs
 */","* Discards up to {@code n} bytes of data from the input stream. This method will block until
   * either the full amount has been skipped or until the end of the stream is reached, whichever
   * happens first. Returns the total number of bytes skipped.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,ready,com.google.common.io.CharSequenceReader:ready(),123,127,"/**
 * Checks if the stream is open and ready.
 * @return true if ready, false otherwise
 * @throws IOException if an I/O error occurs
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,mark,com.google.common.io.CharSequenceReader:mark(int),134,139,"/**
 * Marks the current position in the stream.
 * @param readAheadLimit limit on the number of bytes that can be read before the mark is invalidated
 * @throws IOException if an I/O error occurs
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,reset,com.google.common.io.CharSequenceReader:reset(),141,145,"/**
 * Resets stream position to last marked point.
 * @throws IOException if an I/O error occurs
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,hasRemaining,com.google.common.io.CharSequenceReader:hasRemaining(),56,58,"/**
 * Checks if there are remaining items.
 * @return true if remaining count is greater than zero, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,skip,com.google.common.io.CharSequenceReader:skip(long),114,121,"/**
* Skips specified number of characters.
* @param n number of characters to skip
* @return actual number of characters skipped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,"com.google.common.io.CharSink:writeLines(java.util.Iterator,java.lang.String)",148,157,"/**
 * Writes lines to a buffered stream with a specified line separator.
 * @param lines iterator of CharSequence objects representing the lines to write
 * @param lineSeparator string used as the line separator
 * @throws IOException if an I/O error occurs while writing
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lines,com.google.common.io.CharSource$CharSequenceCharSource:lines(),592,595,"/**
 * Returns a stream of lines from the source.
 * @return Stream of strings representing lines
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readFirstLine,com.google.common.io.CharSource$CharSequenceCharSource:readFirstLine(),597,601,"/**
* Reads the first line from an iterator.
* @return The first line as a String, or null if no more lines are available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource$CharSequenceCharSource:readLines(com.google.common.io.LineProcessor),608,618,"/**
* Reads lines from input and processes them.
* @param processor LineProcessor to handle each line
* @return Result of processing or null if not applicable
* @throws IOException if an I/O error occurs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lines,com.google.common.io.CharSource:lines(),157,161,"/**
* Returns a stream of lines from the file.
* @return Stream of strings representing file lines
* @throws IOException if an I/O error occurs
*/","* Opens a new {@link Stream} for reading text one line at a time from this source. This method
   * returns a new, independent stream each time it is called.
   *
   * <p>The returned stream is lazy and only reads from the source in the terminal operation. If an
   * I/O error occurs while the stream is reading from the source or when the stream is closed, an
   * {@link UncheckedIOException} is thrown.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * <p>The caller is responsible for ensuring that the returned stream is closed. For example:
   *
   * {@snippet :
   * try (Stream<String> lines = source.lines()) {
   *   lines.map(...)
   *      .filter(...)
   *      .forEach(...);
   * }
   * }
   *
   * @throws IOException if an I/O error occurs while opening the stream
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,exhaust,com.google.common.io.CharStreams:exhaust(java.lang.Readable),237,247,"/**
 * Reads and exhausts the content of a Readable source.
 * @param readable the source to read from
 * @return the total number of characters read
 * @throws IOException if an I/O error occurs
 */","* Reads and discards data from the given {@code Readable} until the end of the stream is reached.
   * Returns the total number of chars read. Does not close the stream.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineReader.java,<init>,com.google.common.io.LineReader:<init>(java.lang.Readable),56,59,"/**
* Initializes a LineReader with a Readable source.
* @param readable the source to read from, must not be null
*/",Creates a new instance that will read lines from the given {@code Readable} object.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closeables.java,closeQuietly,com.google.common.io.Closeables:closeQuietly(java.io.InputStream),112,118,"/**
* Closes an input stream quietly.
* @param inputStream the stream to close
*/","* Closes the given {@link InputStream}, logging any {@code IOException} that's thrown rather than
   * propagating it.
   *
   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an
   * I/O resource, it should generally be safe in the case of a resource that's being used only for
   * reading, such as an {@code InputStream}. Unlike with writable resources, there's no chance that
   * a failure that occurs when closing the stream indicates a meaningful problem such as a failure
   * to flush all bytes to the underlying resource.
   *
   * @param inputStream the input stream to be closed, or {@code null} in which case this method
   *     does nothing
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closeables.java,closeQuietly,com.google.common.io.Closeables:closeQuietly(java.io.Reader),133,139,"/**
* Closes a Reader quietly.
* @param reader the Reader to close
*/","* Closes the given {@link Reader}, logging any {@code IOException} that's thrown rather than
   * propagating it.
   *
   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an
   * I/O resource, it should generally be safe in the case of a resource that's being used only for
   * reading, such as a {@code Reader}. Unlike with writable resources, there's no chance that a
   * failure that occurs when closing the reader indicates a meaningful problem such as a failure to
   * flush all bytes to the underlying resource.
   *
   * @param reader the reader to be closed, or {@code null} in which case this method does nothing
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,openInputStream,com.google.common.io.FileBackedOutputStream:openInputStream(),165,173,"/**
* Opens an InputStream for the file or in-memory data.
* @return InputStream from file or memory buffer
* @throws IOException if file access fails
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,update,com.google.common.io.FileBackedOutputStream:update(int),232,255,"/**
 * Transfers in-memory data to a temporary file if size exceeds threshold.
 * @param len length of new data to be added
 * @throws IOException if an I/O error occurs during transfer
 */","* Checks if writing {@code len} bytes would go over threshold, and switches to file buffering if
   * so.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,reset,com.google.common.io.FileBackedOutputStream:reset(),181,199,"/**
* Resets the output stream, clearing memory and deleting the file.
* @throws IOException if file deletion fails
*/","* Calls {@link #close} if not already closed, and then resets this object back to its initial
   * state, for reuse. If data was buffered to a file, it will be deleted.
   *
   * @throws IOException if an I/O error occurred while deleting the file buffer",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,asCharSource,"com.google.common.io.Files:asCharSource(java.io.File,java.nio.charset.Charset)",209,211,"/**
* Converts a File to a CharSource using specified Charset.
* @param file the file to read from
* @param charset the character set to use for decoding
* @return CharSource representation of the file
*/","* Returns a new {@link CharSource} for reading character data from the given file using the given
   * character set.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Flushables.java,flushQuietly,com.google.common.io.Flushables:flushQuietly(java.io.Flushable),70,77,"/**
* Flushes the given Flushable object quietly.
* @param flushable the object to flush
*/","* Equivalent to calling {@code flush(flushable, true)}, but with no {@code IOException} in the
   * signature.
   *
   * @param flushable the {@code Flushable} object to be flushed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,checkAllowsInsecure,"com.google.common.io.MoreFiles:checkAllowsInsecure(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[])",743,748,"/**
 * Checks if insecure recursive delete is allowed.
 * @param path the file path to be deleted
 * @param options array of RecursiveDeleteOption
 * @throws InsecureRecursiveDeleteException if insecure option is not set
 */","Checks that the given options allow an insecure delete, throwing an exception if not.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,grow,com.google.common.io.ReaderInputStream:grow(java.nio.CharBuffer),194,200,"/**
* Doubles the capacity of a CharBuffer.
* @param buf original CharBuffer to grow
* @return new CharBuffer with doubled capacity
*/","Returns a new CharBuffer identical to buf, except twice the capacity.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineBuffer.java,add,"com.google.common.io.LineBuffer:add(char[],int,int)",52,86,"/**
 * Adds characters to the buffer and processes line endings.
 * @param cbuf character array containing data to add
 * @param off offset within the array to start adding from
 * @param len number of characters to add
 * @throws IOException if an I/O error occurs
 */","* Process additional characters from the stream. When a line separator is found the contents of
   * the line and the line separator itself are passed to the abstract {@link #handleLine} method.
   *
   * @param cbuf the character buffer to process
   * @param off the offset into the buffer
   * @param len the number of characters to process
   * @throws IOException if an I/O error occurs
   * @see #finish",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineBuffer.java,finish,com.google.common.io.LineBuffer:finish(),104,108,"/**
* Completes processing of the current line.
* @throws IOException if an I/O error occurs
*/","* Subclasses must call this method after finishing character processing, in order to ensure that
   * any unterminated line in the buffer is passed to {@link #handleLine}.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readByte,com.google.common.io.LittleEndianDataInputStream:readByte(),210,214,"/**
* Reads and returns a signed byte from the input stream.
* @return the next byte as a signed value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readBoolean,com.google.common.io.LittleEndianDataInputStream:readBoolean(),216,220,"/**
* Reads a boolean value from input.
* @return true if byte is not zero, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readUnsignedShort,com.google.common.io.LittleEndianDataInputStream:readUnsignedShort(),97,104,"/**
* Reads and returns an unsigned short value.
* @return the unsigned short value as an int
* @throws IOException if an I/O error occurs
*/","* Reads an unsigned {@code short} as specified by {@link DataInputStream#readUnsignedShort()},
   * except using little-endian byte order.
   *
   * @return the next two bytes of the input stream, interpreted as an unsigned 16-bit integer in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readInt,com.google.common.io.LittleEndianDataInputStream:readInt(),114,123,"/**
* Reads an integer from the input stream.
* @return the integer value read
*/","* Reads an integer as specified by {@link DataInputStream#readInt()}, except using little-endian
   * byte order.
   *
   * @return the next four bytes of the input stream, interpreted as an {@code int} in little-endian
   *     byte order
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readLong,com.google.common.io.LittleEndianDataInputStream:readLong(),133,146,"/**
* Reads a long value from the input stream.
* @return the long value read
* @throws IOException if an I/O error occurs
*/","* Reads a {@code long} as specified by {@link DataInputStream#readLong()}, except using
   * little-endian byte order.
   *
   * @return the next eight bytes of the input stream, interpreted as a {@code long} in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeChar,com.google.common.io.LittleEndianDataOutputStream:writeChar(int),82,85,"/**
 * Writes a character value as a short.
 * @param v character to be written
 * @throws IOException if an I/O error occurs
 */","* Writes a char as specified by {@link DataOutputStream#writeChar(int)}, except using
   * little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeFloat,com.google.common.io.LittleEndianDataOutputStream:writeFloat(float),117,120,"/**
 * Writes a float value by converting it to an int.
 * @param v the float value to write
 * @throws IOException if an I/O error occurs
 */","* Writes a {@code float} as specified by {@link DataOutputStream#writeFloat(float)}, except using
   * little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeLong,com.google.common.io.LittleEndianDataOutputStream:writeLong(long),142,145,"/**
* Writes a long value with reversed byte order.
* @param v the long value to write
* @throws IOException if an I/O error occurs
*/","* Writes a {@code long} as specified by {@link DataOutputStream#writeLong(long)}, except using
   * little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,size,com.google.common.io.MoreFiles$PathByteSource:size(),145,158,"/**
 * Returns the size of the file in bytes.
 * Throws IOException for directories or symbolic links.
 * @return File size in bytes
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteRecursivelyInsecure,com.google.common.io.MoreFiles:deleteRecursivelyInsecure(java.nio.file.Path),664,683,"/**
 * Recursively deletes a file or directory insecurely.
 * @param path the file or directory to delete
 * @return collection of IOExceptions encountered during deletion
 */","* Insecure recursive delete for file systems that don't support {@code SecureDirectoryStream}.
   * Returns a collection of exceptions that occurred or null if no exceptions were thrown.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteDirectoryContentsSecure,com.google.common.io.MoreFiles:deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream),646,658,"/**
* Deletes contents of a secure directory.
* @param dir SecureDirectoryStream representing the directory to delete
* @return Collection of IOExceptions or null if no exceptions occur
*/","* Secure method for deleting the contents of a directory using {@code SecureDirectoryStream}.
   * Returns a collection of exceptions that occurred or null if no exceptions were thrown.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,advance,com.google.common.io.MultiInputStream:advance(),62,67,"/**
* Advances to the next resource and closes the current one.
* @throws IOException if an I/O error occurs
*/","Closes the current input stream and opens the next one, if any.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,advance,com.google.common.io.MultiReader:advance(),45,50,"/**
* Advances to the next resource stream.
* Closes the current stream and opens the next one if available.
*/","Closes the current reader and opens the next one, if any.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,asCharSource,"com.google.common.io.Resources:asCharSource(java.net.URL,java.nio.charset.Charset)",83,85,"/**
* Converts URL to CharSource using specified charset.
* @param url source URL
* @param charset character encoding
* @return CharSource representation of the URL content
*/","* Returns a {@link CharSource} that reads from the given URL using the given character set.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,roundToDoubleArbitrarily,com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:roundToDoubleArbitrarily(java.math.BigInteger),334,337,"/**
* Converts BigInteger to double.
* @param bigInteger number to convert
* @return double representation of BigInteger
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,divide,"com.google.common.math.IntMath:divide(int,int,java.math.RoundingMode)",312,367,"/**
 * Divides two integers with specified rounding mode.
 * @param p numerator
 * @param q denominator
 * @param mode rounding mode to apply
 * @return result of division according to rounding mode
 * @throws ArithmeticException if q is zero
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,divide,"com.google.common.math.LongMath:divide(long,long,java.math.RoundingMode)",377,430,"/**
* Divides two long numbers with specified rounding mode.
* @param p dividend
* @param q divisor
* @param mode rounding mode to apply
* @return result of division according to rounding mode
*/","* Returns the result of dividing {@code p} by {@code q}, rounding using the specified {@code
   * RoundingMode}. If the {@code RoundingMode} is {@link RoundingMode#DOWN}, then this method is
   * equivalent to regular Java division, {@code p / q}; and if it is {@link RoundingMode#FLOOR},
   * then this method is equivalent to {@link Math#floorDiv(long,long) Math.floorDiv}{@code (p, q)}.
   *
   * @throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a}
   *     is not an integer multiple of {@code b}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,factorial,com.google.common.math.DoubleMath:factorial(int),305,318,"/**
* Computes factorial of a non-negative integer.
* @param n non-negative integer for factorial calculation
* @return factorial value or Double.POSITIVE_INFINITY if n exceeds MAX_FACTORIAL
*/","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if
   * {@code n == 0}, or {@code n!}, or {@link Double#POSITIVE_INFINITY} if {@code n! >
   * Double.MAX_VALUE}.
   *
   * <p>The result is within 1 ulp of the true value.
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,pow,"com.google.common.math.IntMath:pow(int,int)",221,253,"/**
* Computes the power of a base to an exponent.
* @param b base integer
* @param k exponent integer, must be non-negative
* @return result of b raised to the power of k
*/","* Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to
   * {@code BigInteger.valueOf(b).pow(k).intValue()}. This implementation runs in {@code O(log k)}
   * time.
   *
   * <p>Compare {@link #checkedPow}, which throws an {@link ArithmeticException} upon overflow.
   *
   * @throws IllegalArgumentException if {@code k < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,gcd,"com.google.common.math.IntMath:gcd(int,int)",402,445,"/**
 * Computes the greatest common divisor of two non-negative integers using the binary GCD algorithm.
 * @param a first non-negative integer
 * @param b second non-negative integer
 * @return greatest common divisor of a and b
 */","* Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b ==
   * 0}.
   *
   * @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,factorial,com.google.common.math.IntMath:factorial(int),626,629,"/**
* Computes factorial of a non-negative integer.
* @param n non-negative integer
* @return factorial value or Integer.MAX_VALUE if overflow
*/","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if
   * {@code n == 0}, or {@link Integer#MAX_VALUE} if the result does not fit in a {@code int}.
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,binomial,"com.google.common.math.IntMath:binomial(int,int)",653,676,"/**
* Computes binomial coefficient C(n, k).
* @param n total number of items
* @param k number of items to choose
* @return binomial coefficient or Integer.MAX_VALUE if too large
*/","* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
   * {@code k}, or {@link Integer#MAX_VALUE} if the result does not fit in an {@code int}.
   *
   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0} or {@code k > n}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,pow,"com.google.common.math.LongMath:pow(long,int)",262,296,"/**
* Computes b raised to the power of k.
* @param b base number
* @param k exponent, must be non-negative
* @return result of b^k
*/","* Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to
   * {@code BigInteger.valueOf(b).pow(k).longValue()}. This implementation runs in {@code O(log k)}
   * time.
   *
   * @throws IllegalArgumentException if {@code k < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,factorial,com.google.common.math.LongMath:factorial(int),755,759,"/**
* Computes factorial of a non-negative integer.
* @param n non-negative integer
* @return factorial of n or Long.MAX_VALUE if n is too large
*/","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if
   * {@code n == 0}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}.
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,listProduct,com.google.common.math.BigIntegerMath:listProduct(java.util.List),436,438,"/**
 * Computes the product of all elements in a list.
 * @param nums list of BigIntegers to multiply
 * @return product as BigInteger
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,checkFinite,com.google.common.math.DoubleMath:checkFinite(double),524,529,"/**
 * Checks if a double is finite and returns it.
 * @param argument the double to check
 * @return the original argument if finite
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleUtils.java,getSignificand,com.google.common.math.DoubleUtils:getSignificand(double),63,69,"/**
* Extracts the significand of a finite double value.
* @param d finite double value
* @return long representing the significand
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,mapping,"com.google.common.math.LinearTransformation:mapping(double,double)",53,56,"/**
* Initializes a linear transformation with given point.
* @param x1 x-coordinate of the point
* @param y1 y-coordinate of the point
* @return LinearTransformationBuilder instance
*/","* Start building an instance which maps {@code x = x1} to {@code y = y1}. Both arguments must be
   * finite. Call either {@link LinearTransformationBuilder#and} or {@link
   * LinearTransformationBuilder#withSlope} on the returned object to finish building the instance.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,fuzzyEquals,"com.google.common.math.DoubleMath:fuzzyEquals(double,double,double)",363,369,"/**
* Compares two doubles for approximate equality within a tolerance.
* @param a first double value
* @param b second double value
* @param tolerance maximum allowed difference
* @return true if values are approximately equal, false otherwise
*/","* Returns {@code true} if {@code a} and {@code b} are within {@code tolerance} of each other.
   *
   * <p>Technically speaking, this is equivalent to {@code Math.abs(a - b) <= tolerance ||
   * Double.valueOf(a).equals(Double.valueOf(b))}.
   *
   * <p>Notable special cases include:
   *
   * <ul>
   *   <li>All NaNs are fuzzily equal.
   *   <li>If {@code a == b}, then {@code a} and {@code b} are always fuzzily equal.
   *   <li>Positive and negative zero are always fuzzily equal.
   *   <li>If {@code tolerance} is zero, and neither {@code a} nor {@code b} is NaN, then {@code a}
   *       and {@code b} are fuzzily equal if and only if {@code a == b}.
   *   <li>With {@link Double#POSITIVE_INFINITY} tolerance, all non-NaN values are fuzzily equal.
   *   <li>With finite tolerance, {@code Double.POSITIVE_INFINITY} and {@code
   *       Double.NEGATIVE_INFINITY} are fuzzily equal only to themselves.
   * </ul>
   *
   * <p>This is reflexive and symmetric, but <em>not</em> transitive, so it is <em>not</em> an
   * equivalence relation and <em>not</em> suitable for use in {@link Object#equals}
   * implementations.
   *
   * @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN
   * @since 13.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/ToDoubleRounder.java,roundToDouble,"com.google.common.math.ToDoubleRounder:roundToDouble(java.lang.Number,java.math.RoundingMode)",45,151,"/**
 * Rounds a value to the nearest double using specified rounding mode.
 * @param x value to be rounded
 * @param mode rounding mode to apply
 * @return rounded double value
 */",Rounds {@code x} to a {@code double}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,ceilingPowerOfTwo,com.google.common.math.IntMath:ceilingPowerOfTwo(int),63,69,"/**
* Computes the smallest power of two greater than or equal to x.
* @param x positive integer
* @return smallest power of two >= x
*/","* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to
   * {@code checkedPow(2, log2(x, CEILING))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException of the next-higher power of two is not representable as an {@code
   *     int}, i.e. when {@code x > 2^30}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,floorPowerOfTwo,com.google.common.math.IntMath:floorPowerOfTwo(int),78,81,"/**
* Finds the largest power of two less than or equal to x.
* @param x positive integer
* @return highest power of two <= x
*/","* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code
   * checkedPow(2, log2(x, FLOOR))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,log2,"com.google.common.math.IntMath:log2(int,java.math.RoundingMode)",114,141,"/**
* Computes the base-2 logarithm of an integer with specified rounding mode.
* @param x positive integer value
* @param mode RoundingMode to apply
* @return integer result of log2(x) based on rounding mode
*/","* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of two",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,log10Floor,com.google.common.math.IntMath:log10Floor(int),178,192,"/**
* Computes floor(log10(x)) using a lookup table and branch-free logic.
* @param x input integer
* @return floor(log10(x)) or -Infinity if x is non-positive
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,sqrt,"com.google.common.math.IntMath:sqrt(int,java.math.RoundingMode)",262,294,"/**
* Computes integer square root of x with specified rounding mode.
* @param x non-negative integer
* @param mode rounding mode to apply
* @return rounded square root of x
*/","* Returns the square root of {@code x}, rounded with the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x < 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code
   *     sqrt(x)} is not an integer",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedAdd,"com.google.common.math.IntMath:checkedAdd(int,int)",455,458,"/**
* Adds two integers with overflow check.
* @param a first integer
* @param b second integer
* @return sum of a and b
*/","* Returns the sum of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#addExact(int, int)} instead.
   *
   * @throws ArithmeticException if {@code a + b} overflows in signed {@code int} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedSubtract,"com.google.common.math.IntMath:checkedSubtract(int,int)",468,471,"/**
* Subtracts two integers with overflow checking.
* @param a minuend
* @param b subtrahend
* @return difference of a and b
*/","* Returns the difference of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#subtractExact(int, int)} instead.
   *
   * @throws ArithmeticException if {@code a - b} overflows in signed {@code int} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedMultiply,"com.google.common.math.IntMath:checkedMultiply(int,int)",481,484,"/**
* Multiplies two integers with overflow check.
* @param a first integer
* @param b second integer
* @return product of a and b
*/","* Returns the product of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#multiplyExact(int, int)} instead.
   *
   * @throws ArithmeticException if {@code a * b} overflows in signed {@code int} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,"com.google.common.math.LinearTransformation$RegularLinearTransformation:<init>(double,double)",174,178,"/**
* Initializes a linear transformation with given slope and intercept.
* @param slope the slope of the line
* @param yIntercept the y-intercept of the line
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,"com.google.common.math.LinearTransformation$RegularLinearTransformation:<init>(double,double,com.google.common.math.LinearTransformation)",180,184,"/**
* Initializes a linear transformation with slope and intercept.
* @param slope the slope of the line
* @param yIntercept the y-intercept of the line
* @param inverse the inverse transformation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,com.google.common.math.LinearTransformation$VerticalLinearTransformation:<init>(double),232,235,"/**
* Initializes a vertical linear transformation.
* @param x scaling factor
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,"com.google.common.math.LinearTransformation$VerticalLinearTransformation:<init>(double,com.google.common.math.LinearTransformation)",237,240,"/**
 * Constructs a vertical linear transformation.
 * @param x scaling factor
 * @param inverse inverse transformation object
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,testWitness,"com.google.common.math.LongMath$MillerRabinTester:testWitness(long,long)",1184,1207,"/**
* Tests if base is a witness to the compositeness of n using Miller-Rabin primality test.
* @param base potential witness value
* @param n number being tested for primality
* @return false if n is composite, true if n passes this test
*/",Returns true if n is a strong probable prime relative to the specified base.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,ceilingPowerOfTwo,com.google.common.math.LongMath:ceilingPowerOfTwo(long),63,69,"/**
* Computes the smallest power of two greater than or equal to x.
* @param x positive integer
* @return smallest power of two >= x
*/","* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to
   * {@code checkedPow(2, log2(x, CEILING))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException of the next-higher power of two is not representable as a {@code
   *     long}, i.e. when {@code x > 2^62}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,floorPowerOfTwo,com.google.common.math.LongMath:floorPowerOfTwo(long),78,84,"/**
 * Finds the largest power of two less than or equal to x.
 * @param x positive long value
 * @return largest power of two <= x
 */","* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code
   * checkedPow(2, log2(x, FLOOR))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,log2,"com.google.common.math.LongMath:log2(long,java.math.RoundingMode)",116,143,"/**
* Computes the base-2 logarithm of a number with specified rounding mode.
* @param x positive long value
* @param mode rounding mode to apply
* @return integer result of log2(x) based on rounding mode
*/","* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of two",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,log10Floor,com.google.common.math.LongMath:log10Floor(long),181,196,"/**
* Computes floor(log10(x)) using table lookup and branch-free logic.
* @param x input number
* @return floor(log10(x))
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,gcd,"com.google.common.math.LongMath:gcd(long,long)",488,531,"/**
 * Computes the greatest common divisor of two non-negative long integers using the binary GCD algorithm.
 * @param a first non-negative long integer
 * @param b second non-negative long integer
 * @return greatest common divisor of a and b
 */","* Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b ==
   * 0}.
   *
   * @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,mod,"com.google.common.math.LongMath:mod(long,int)",450,454,"/**
 * Computes x modulo m.
 * @param x dividend
 * @param m divisor
 * @return non-negative remainder of x divided by m
 */","* Returns {@code x mod m}, a non-negative value less than {@code m}. This differs from {@code x %
   * m}, which might be negative.
   *
   * <p>For example:
   *
   * {@snippet :
   * mod(7, 4) == 3
   * mod(-7, 4) == 1
   * mod(-1, 4) == 3
   * mod(-8, 4) == 0
   * mod(8, 4) == 0
   * }
   *
   * @throws ArithmeticException if {@code m <= 0}
   * @see <a href=""http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.17.3"">
   *     Remainder Operator</a>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedAdd,"com.google.common.math.LongMath:checkedAdd(long,long)",541,544,"/**
* Adds two long numbers with overflow check.
* @param a first number
* @param b second number
* @return sum of a and b
* @throws ArithmeticException if overflow occurs
*/","* Returns the sum of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#addExact(long, long)} instead.
   *
   * @throws ArithmeticException if {@code a + b} overflows in signed {@code long} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedSubtract,"com.google.common.math.LongMath:checkedSubtract(long,long)",554,557,"/**
* Subtracts two long numbers with overflow check.
* @param a minuend
* @param b subtrahend
* @return difference or throws ArithmeticException if overflow occurs
*/","* Returns the difference of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#subtractExact(long, long)} instead.
   *
   * @throws ArithmeticException if {@code a - b} overflows in signed {@code long} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedMultiply,"com.google.common.math.LongMath:checkedMultiply(long,long)",567,570,"/**
* Multiplies two long numbers with overflow check.
* @param a first multiplicand
* @param b second multiplicand
* @return product of a and b
*/","* Returns the product of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#multiplyExact(long, long)} instead.
   *
   * @throws ArithmeticException if {@code a * b} overflows in signed {@code long} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,saturatedPow,"com.google.common.math.LongMath:saturatedPow(long,int)",698,745,"/**
 * Computes the saturated power of a long base raised to an integer exponent.
 * @param b base value
 * @param k exponent value
 * @return saturated result, clamping at Long.MAX_VALUE or Long.MIN_VALUE if overflow occurs
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,count,com.google.common.math.PairedStats:count(),67,69,"/**
 * Returns the total count of items.
 * @return The number of items counted.
 */",Returns the number of pairs in the dataset.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,equals,com.google.common.math.PairedStats:equals(java.lang.Object),215,227,"/**
* Compares this PairedStats object to another for equality.
* @param obj the object to compare with
* @return true if equal, false otherwise
*/","* {@inheritDoc}
   *
   * <p><b>Note:</b> This tests exact equality of the calculated statistics, including the floating
   * point values. Two instances are guaranteed to be considered equal if one is copied from the
   * other using {@code second = new PairedStatsAccumulator().addAll(first).snapshot()}, if both
   * were obtained by calling {@code snapshot()} on the same {@link PairedStatsAccumulator} without
   * adding any values in between the two calls, or if one is obtained from the other after
   * round-tripping through java serialization. However, floating point rounding errors mean that it
   * may be false for some instances where the statistics are mathematically equal, including
   * instances constructed from the same values in a different order... or (in the general case)
   * even in the same order. (It is guaranteed to return true for instances constructed from the
   * same values in the same order if {@code strictfp} is in effect, or if the system architecture
   * guarantees {@code strictfp}-like semantics.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,<init>,com.google.common.math.PairedStatsAccumulator:<init>(),37,37,"/**
 * Constructs a new instance of PairedStatsAccumulator.
 */",Creates a new accumulator.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,calculateNewMeanNonFinite,"com.google.common.math.StatsAccumulator:calculateNewMeanNonFinite(double,double)",404,429,"/**
* Calculates new mean considering non-finite values.
* @param previousMean current mean value
* @param value new value to include in mean calculation
* @return updated mean, handling infinities and NaN appropriately
*/","* Calculates the new value for the accumulated mean when a value is added, in the case where at
   * least one of the previous mean and the value is non-finite.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,count,com.google.common.math.PairedStatsAccumulator:count(),100,102,"/**
 * Returns the total count of items.
 * @return number of items in the collection
 */",Returns the number of pairs in the dataset.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,ensureInUnitRange,com.google.common.math.PairedStatsAccumulator:ensureInUnitRange(double),241,243,"/**
* Constrains a value to the range [-1.0, 1.0].
* @param value the value to constrain
* @return the constrained value within the specified range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,median,com.google.common.math.Quantiles:median(),142,144,"/**
 * Returns a ScaleAndIndex with scale 2 and index 1.
 * @return ScaleAndIndex object configured with specified values
 */",Specifies the computation of a median (i.e. the 1st 2-quantile).,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,quartiles,com.google.common.math.Quantiles:quartiles(),147,149,"/**
 * Creates a quartile scale.
 * @return Scale with 4 divisions
 */",Specifies the computation of quartiles (i.e. 4-quantiles).,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,percentiles,com.google.common.math.Quantiles:percentiles(),152,154,"/**
 * Creates a scale with 100 percentiles.
 * @return Scale object configured for 100 percentiles
 */",Specifies the computation of percentiles (i.e. 100-quantiles).,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,movePivotToStartOfSlice,"com.google.common.math.Quantiles:movePivotToStartOfSlice(double[],int,int)",603,620,"/**
 * Moves pivot element to start of slice for partitioning.
 * @param array the array to be processed
 * @param from starting index of the slice
 * @param to ending index of the slice
 */","* Selects the pivot to use, namely the median of the values at {@code from}, {@code to}, and
   * halfway between the two (rounded down), from {@code array}, and ensure (by swapping elements if
   * necessary) that that pivot value appears at the start of the slice i.e. at {@code from}.
   * Expects that {@code from} is strictly less than {@code to}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,readFrom,com.google.common.math.Stats:readFrom(java.nio.ByteBuffer),647,660,"/**
* Reads stats from a ByteBuffer.
* @param buffer source ByteBuffer with stats data
* @return Stats object populated from the buffer
*/","* Creates a Stats instance from the byte representation read from the given {@link ByteBuffer}.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.
   *
   * @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as
   *     {@link ByteOrder#LITTLE_ENDIAN}, from which a BYTES-long byte representation of this
   *     instance is read. In the process increases the position of {@link ByteBuffer} by BYTES.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,snapshot,com.google.common.math.StatsAccumulator:snapshot(),220,222,"/**
 * Returns a snapshot of current statistics.
 * @return Stats object containing count, mean, sum of squares of deltas, min, and max
 */",Returns an immutable snapshot of the current statistics.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,getPort,com.google.common.net.HostAndPort:getPort(),111,114,"/**
 * Returns the configured port number.
 * Throws an exception if no port is set.
 * @return the port number
 */","* Get the current port number, failing if no port is defined.
   *
   * @return a validated port number, in the range [0..65535]
   * @throws IllegalStateException if no port is defined. You can use {@link #withDefaultPort(int)}
   *     to prevent this from occurring.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,getPortOrDefault,com.google.common.net.HostAndPort:getPortOrDefault(int),117,119,"/**
 * Returns the port number if available; otherwise, returns the default port.
 * @param defaultPort the default port to use if no specific port is set
 * @return the actual port or the default port
 */","Returns the current port number, with a default if no port is defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,toString,com.google.common.net.HostAndPort:toString(),295,308,"/**
 * Returns a string representation of the host and port.
 * @return formatted string like ""host:port"" or ""[host]:port""
 */","Rebuild the host:port string, including brackets if necessary.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,withDefaultPort,com.google.common.net.HostAndPort:withDefaultPort(int),249,255,"/**
* Returns a HostAndPort with the default port if none is set.
* @param defaultPort the port to use if not already specified
* @return a HostAndPort instance with the specified default port
*/","* Provide a default port if the parsed string contained only a host.
   *
   * <p>You can chain this after {@link #fromString(String)} to include a port in case the port was
   * omitted from the input string. If a port was already provided, then this method is a no-op.
   *
   * @param defaultPort a port number, from [0..65535]
   * @return a HostAndPort instance, guaranteed to have a defined port.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,textToNumericFormatV4,com.google.common.net.InetAddresses:textToNumericFormatV4(java.lang.String),241,264,"/**
 * Converts IPv4 address string to numeric format.
 * @param ipString IPv4 address in dot-decimal notation
 * @return byte array representing the IP address or null if invalid
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,textToNumericFormatV6,com.google.common.net.InetAddresses:textToNumericFormatV6(java.lang.String),266,334,"/**
 * Converts an IPv6 address string to its numeric byte array format.
 * @param ipString the IPv6 address as a string
 * @return byte array representing the IPv6 address or null if invalid
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,toAddrString,com.google.common.net.InetAddresses:toAddrString(java.net.InetAddress),466,481,"/**
* Converts InetAddress to string representation.
* @param ip the IP address to convert
* @return formatted IPv4 or IPv6 address string
*/","* Returns the string representation of an {@link InetAddress}.
   *
   * <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6
   * addresses, the output follows <a href=""http://tools.ietf.org/html/rfc5952"">RFC 5952</a> section
   * 4. The main difference is that this method uses ""::"" for zero compression, while Java's version
   * uses the uncompressed form (except on Android, where the zero compression is also done). The
   * other difference is that this method outputs any scope ID in the format that it was provided at
   * creation time, while Android may always output it as an interface name, even if it was supplied
   * as a numeric ID.
   *
   * <p>This method uses hexadecimal for all IPv6 addresses, including IPv4-mapped IPv6 addresses
   * such as ""::c000:201"".
   *
   * @param ip {@link InetAddress} to be converted to an address string
   * @return {@code String} containing the text-formatted IP address
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,isIsatapAddress,com.google.common.net.InetAddresses:isIsatapAddress(java.net.Inet6Address),857,875,"/**
 * Checks if an IPv6 address is an ISATAP address.
 * @param ip the Inet6Address to check
 * @return true if the address is ISATAP, false otherwise
 */","* Evaluates whether the argument is an ISATAP address.
   *
   * <p>From RFC 5214: ""ISATAP interface identifiers are constructed in Modified EUI-64 format [...]
   * by concatenating the 24-bit IANA OUI (00-00-5E), the 8-bit hexadecimal value 0xFE, and a 32-bit
   * IPv4 address in network byte order [...]""
   *
   * <p>For more on ISATAP addresses see section 6.1 of <a target=""_parent""
   * href=""http://tools.ietf.org/html/rfc5214#section-6.1"">RFC 5214</a>.
   *
   * @param ip {@link Inet6Address} to be examined for ISATAP address format
   * @return {@code true} if the argument is an ISATAP address",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,hasEmbeddedIPv4ClientAddress,com.google.common.net.InetAddresses:hasEmbeddedIPv4ClientAddress(java.net.Inet6Address),902,904,"/**
* Checks if an Inet6Address contains an embedded IPv4 address.
* @param ip the Inet6Address to check
* @return true if the address has an embedded IPv4, false otherwise
*/","* Examines the Inet6Address to determine if it is an IPv6 address of one of the specified address
   * types that contain an embedded IPv4 address.
   *
   * <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial
   * spoofability. With other transition addresses spoofing involves (at least) infection of one's
   * BGP routing table.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 client address
   * @return {@code true} if there is an embedded IPv4 client address
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,previewChar,com.google.common.net.MediaType$Tokenizer:previewChar(),1183,1186,"/**
 * Retrieves the next character in the input without advancing the position.
 * @return the current character
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,<init>,com.google.common.primitives.Booleans$BooleanArrayAsList:<init>(boolean[]),395,397,"/**
 * Constructs a list from the specified boolean array.
 * @param array the boolean array to be converted
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,equals,com.google.common.primitives.Booleans$BooleanArrayAsList:equals(java.lang.Object),471,490,"/**
 * Checks equality with another BooleanArrayAsList.
 * @param object the object to compare
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,toString,com.google.common.primitives.Booleans$BooleanArrayAsList:toString(),501,509,"/**
* Returns a string representation of the boolean array.
* @return A string in the format ""[true, false, ...]"" representing the array elements.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,hashCode,com.google.common.primitives.Booleans$BooleanArrayAsList:hashCode(),492,499,"/**
* Generates hash code based on boolean array segment.
* @return computed hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,toArray,com.google.common.primitives.Booleans:toArray(java.util.Collection),354,367,"/**
* Converts a Collection<Boolean> to a boolean[].
* @param collection the input collection of Boolean objects
* @return a primitive boolean array containing the elements of the collection
*/","* Copies a collection of {@code Boolean} instances into a new array of primitive {@code boolean}
   * values.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * <p><b>Note:</b> consider representing the collection as a {@link java.util.BitSet} instead.
   *
   * @param collection a collection of {@code Boolean} objects
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,indexOf,"com.google.common.primitives.Booleans:indexOf(boolean[],boolean)",162,164,"/**
 * Finds index of target in boolean array.
 * @param array boolean array to search
 * @param target value to find
 * @return index of target or -1 if not found
 */","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead, and
   * using {@link java.util.BitSet#nextSetBit(int)} or {@link java.util.BitSet#nextClearBit(int)}.
   *
   * @param array an array of {@code boolean} values, possibly empty
   * @param target a primitive {@code boolean} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,lastIndexOf,"com.google.common.primitives.Booleans:lastIndexOf(boolean[],boolean)",213,215,"/**
 * Finds the last index of the target value in the array.
 * @param array the boolean array to search
 * @param target the boolean value to find
 * @return the last index of target or -1 if not found
 */","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code boolean} values, possibly empty
   * @param target a primitive {@code boolean} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,<init>,com.google.common.primitives.Bytes$ByteArrayAsList:<init>(byte[]),262,264,"/**
 * Constructs a list from a byte array.
 * @param array source byte array
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,equals,com.google.common.primitives.Bytes$ByteArrayAsList:equals(java.lang.Object),337,356,"/**
* Checks equality with another ByteArrayAsList.
* @param object the object to compare
* @return true if equal, otherwise false
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,toString,com.google.common.primitives.Bytes$ByteArrayAsList:toString(),367,375,"/**
* Overrides toString to provide a string representation of the array elements.
* @return A formatted string of array elements from start to end
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,hashCode,com.google.common.primitives.Bytes$ByteArrayAsList:hashCode(),358,365,"/**
* Generates hash code based on array elements.
* @return computed hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,toArray,com.google.common.primitives.Bytes:toArray(java.util.Collection),220,233,"/**
 * Converts a collection of numbers to a byte array.
 * @param collection the input collection of numbers
 * @return byte array representation of the collection
 */","* Returns an array containing each value of {@code collection}, converted to a {@code byte} value
   * in the manner of {@link Number#byteValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Byte>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,indexOf,"com.google.common.primitives.Bytes:indexOf(byte[],byte)",92,94,"/**
 * Finds index of target byte in byte array.
 * @param array byte array to search
 * @param target byte value to find
 * @return index of first occurrence or -1 if not found
 */","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code byte} values, possibly empty
   * @param target a primitive {@code byte} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,lastIndexOf,"com.google.common.primitives.Bytes:lastIndexOf(byte[],byte)",143,145,"/**
 * Finds the last index of a target byte in an array.
 * @param array the byte array to search
 * @param target the byte value to find
 * @return the last index of the target or -1 if not found
 */","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code byte} values, possibly empty
   * @param target a primitive {@code byte} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,<init>,com.google.common.primitives.Chars$CharArrayAsList:<init>(char[]),582,584,"/**
* Constructs a list from a char array.
* @param array source character array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,equals,com.google.common.primitives.Chars$CharArrayAsList:equals(java.lang.Object),658,677,"/**
* Compares this list to the specified object for equality.
* @param object the object to compare with
* @return true if the lists are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,toString,com.google.common.primitives.Chars$CharArrayAsList:toString(),688,696,"/**
* Converts array elements to a string representation.
* @return comma-separated string of array elements enclosed in brackets
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,hashCode,com.google.common.primitives.Chars$CharArrayAsList:hashCode(),679,686,"/**
* Generates hash code for a character array slice.
* @return computed hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,toArray,com.google.common.primitives.Chars:toArray(java.util.Collection),436,449,"/**
* Converts a Collection of Character to a char array.
* @param collection the input Collection of Character
* @return char array containing elements from the collection
*/","* Copies a collection of {@code Character} instances into a new array of primitive {@code char}
   * values.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Character} objects
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,compare,"com.google.common.primitives.Chars$LexicographicalComparator:compare(char[],char[])",406,416,"/**
* Compares two char arrays lexicographically.
* @param left first character array to compare
* @param right second character array to compare
* @return negative if left is less, positive if greater, 0 if equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,indexOf,"com.google.common.primitives.Chars:indexOf(char[],char)",150,152,"/**
 * Finds index of target character in array.
 * @param array character array to search
 * @param target character to find
 * @return index of first occurrence or -1 if not found
 */","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code char} values, possibly empty
   * @param target a primitive {@code char} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,lastIndexOf,"com.google.common.primitives.Chars:lastIndexOf(char[],char)",201,203,"/**
* Finds the last index of a character in an array.
* @param array the character array to search
* @param target the character to find
* @return the last index of target or -1 if not found
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code char} values, possibly empty
   * @param target a primitive {@code char} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,fromByteArray,com.google.common.primitives.Chars:fromByteArray(byte[]),326,330,"/**
* Converts a byte array to a character.
* @param bytes byte array with at least two elements
* @return character representation of the first two bytes
*/","* Returns the {@code char} value whose big-endian representation is stored in the first 2 bytes
   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getChar()}. For example, the
   * input byte array {@code {0x54, 0x32}} would yield the {@code char} value {@code '\\u5432'}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,<init>,com.google.common.primitives.Doubles$DoubleArrayAsList:<init>(double[]),590,592,"/**
 * Constructs a list backed by the specified double array.
 * @param array the double array to back this list
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,equals,com.google.common.primitives.Doubles$DoubleArrayAsList:equals(java.lang.Object),671,690,"/**
* Checks equality with another object.
* @param object the object to compare with
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,toString,com.google.common.primitives.Doubles$DoubleArrayAsList:toString(),701,709,"/**
* Returns a string representation of the array elements.
* @return A formatted string showing all elements in the array range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,hashCode,com.google.common.primitives.Doubles$DoubleArrayAsList:hashCode(),692,699,"/**
* Computes hash code based on array elements from start to end.
* @return int hash code value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,hashCode,com.google.common.primitives.ImmutableDoubleArray:hashCode(),596,604,"/**
* Generates a hash code based on array elements.
* @return computed hash code
*/",Returns an unspecified hash code for the contents of this immutable array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,toArray,com.google.common.primitives.Doubles:toArray(java.util.Collection),542,555,"/**
* Converts a collection of Numbers to a double array.
* @param collection the input collection of Numbers
* @return a double array containing the values from the collection
*/","* Returns an array containing each value of {@code collection}, converted to a {@code double}
   * value in the manner of {@link Number#doubleValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Double>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,indexOf,"com.google.common.primitives.Doubles:indexOf(double[],double)",134,136,"/**
 * Searches for the index of a target value in a double array.
 * @param array the array to search through
 * @param target the value to find
 * @return the index of the first occurrence of target, or -1 if not found
 */","* Returns the index of the first appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code double} values, possibly empty
   * @param target a primitive {@code double} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,lastIndexOf,"com.google.common.primitives.Doubles:lastIndexOf(double[],double)",188,190,"/**
 * Finds the last index of the target value in the array.
 * @param array the array to search
 * @param target the value to find
 * @return the last index of target or -1 if not found
 */","* Returns the index of the last appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code double} values, possibly empty
   * @param target a primitive {@code double} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,<init>,com.google.common.primitives.Floats$FloatArrayAsList:<init>(float[]),584,586,"/**
 * Constructs a list from a float array.
 * @param array source float array
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,equals,com.google.common.primitives.Floats$FloatArrayAsList:equals(java.lang.Object),659,678,"/**
* Checks equality with another FloatArrayAsList.
* @param object the object to compare
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,toString,com.google.common.primitives.Floats$FloatArrayAsList:toString(),689,697,"/**
* Returns a string representation of the array elements.
* @return formatted string of array elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,hashCode,com.google.common.primitives.Floats$FloatArrayAsList:hashCode(),680,687,"/**
* Generates hash code based on array elements.
* @return computed hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,toArray,com.google.common.primitives.Floats:toArray(java.util.Collection),539,552,"/**
* Converts a collection of numbers to a float array.
* @param collection the input collection of numbers
* @return a float array containing the elements of the collection
*/","* Returns an array containing each value of {@code collection}, converted to a {@code float}
   * value in the manner of {@link Number#floatValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Float>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,indexOf,"com.google.common.primitives.Floats:indexOf(float[],float)",131,133,"/**
 * Finds index of target in array.
 * @param array to search within
 * @param target value to find
 * @return index of target or -1 if not found
 */","* Returns the index of the first appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code float} values, possibly empty
   * @param target a primitive {@code float} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,lastIndexOf,"com.google.common.primitives.Floats:lastIndexOf(float[],float)",185,187,"/**
* Finds the last index of target in the array.
* @param array the array to search
* @param target the value to find
* @return the last index of target or -1 if not found
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code float} values, possibly empty
   * @param target a primitive {@code float} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,size,com.google.common.primitives.ImmutableDoubleArray$AsList:size(),494,497,"/**
* Returns the size of the parent.
* @return length of the parent as an integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,builder,com.google.common.primitives.ImmutableDoubleArray:builder(int),192,195,"/**
* Creates a new Builder with specified initial capacity.
* @param initialCapacity the initial capacity of the builder
* @return a new Builder instance
*/","* Returns a new, empty builder for {@link ImmutableDoubleArray} instances, sized to hold up to
   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number
   * of values that will be added, if that knowledge is readily available. It is better to guess a
   * value slightly too high than slightly too low. If the value is not exact, the {@link
   * ImmutableDoubleArray} that is built will very likely occupy more memory than strictly
   * necessary; to trim memory usage, build using {@code builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,builder,com.google.common.primitives.ImmutableDoubleArray:builder(),205,207,"/**
 * Returns a new Builder instance with an initial capacity of 10.
 * @return Builder object initialized with default capacity
 */","* Returns a new, empty builder for {@link ImmutableDoubleArray} instances, with a default initial
   * capacity. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> The {@link ImmutableDoubleArray} that is built will very likely
   * occupy more memory than necessary; to trim memory usage, build using {@code
   * builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,ensureRoomFor,com.google.common.primitives.ImmutableDoubleArray$Builder:ensureRoomFor(int),302,307,"/**
* Ensures there is room for additional elements in the array.
* @param numberToAdd number of elements to accommodate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,<init>,com.google.common.primitives.ImmutableDoubleArray:<init>(double[]),354,356,"/**
 * Constructs an ImmutableDoubleArray from a double array.
 * @param array source array of doubles
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,indexOf,com.google.common.primitives.ImmutableDoubleArray:indexOf(double),390,397,"/**
* Finds index of target in array slice.
* @param target value to search for
* @return offset index or -1 if not found
*/","* Returns the smallest index for which {@link #get} returns {@code target}, or {@code -1} if no
   * such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code
   * asList().indexOf(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,lastIndexOf,com.google.common.primitives.ImmutableDoubleArray:lastIndexOf(double),404,411,"/**
 * Finds the last index of a target value within a specified range.
 * @param target value to search for
 * @return relative index of the target or -1 if not found
 */","* Returns the largest index for which {@link #get} returns {@code target}, or {@code -1} if no
   * such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code
   * asList().lastIndexOf(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,toString,com.google.common.primitives.ImmutableDoubleArray:toString(),610,623,"/**
 * Returns a string representation of the array.
 * @return String in the format ""[element1, element2, ..., elementN]"" or ""[]"" if empty
 */","* Returns a string representation of this array in the same form as {@link
   * Arrays#toString(double[])}, for example {@code ""[1, 2, 3]""}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,readResolve,com.google.common.primitives.ImmutableDoubleArray:readResolve(),643,645,"/**
 * Returns an empty instance if the current instance is empty; otherwise, returns itself.
 * @return An appropriate instance based on emptiness check
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,size,com.google.common.primitives.ImmutableIntArray$AsList:size(),489,492,"/**
 * Returns the number of elements in the collection.
 * @return Size of the collection as an integer
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,indexOf,com.google.common.primitives.ImmutableIntArray$AsList:indexOf(java.lang.Object),504,507,"/**
* Returns index of target if it's an Integer.
* @param target object to find
* @return index in parent or -1 if not found or not an Integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,contains,com.google.common.primitives.ImmutableIntArray:contains(int),412,414,"/**
 * Checks if the list contains the specified element.
 * @param target element to search for
 * @return true if the element is present, false otherwise
 */","* Returns {@code true} if {@code target} is present at any index in this array. Equivalent to
   * {@code asList().contains(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,lastIndexOf,com.google.common.primitives.ImmutableIntArray$AsList:lastIndexOf(java.lang.Object),509,512,"/**
 * Returns the last index of the specified target.
 * @param target element to search for
 * @return last index or -1 if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,builder,com.google.common.primitives.ImmutableIntArray:builder(int),189,192,"/**
* Creates a new Builder with specified initial capacity.
* @param initialCapacity the initial capacity of the builder
* @return a new Builder instance
*/","* Returns a new, empty builder for {@link ImmutableIntArray} instances, sized to hold up to
   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number
   * of values that will be added, if that knowledge is readily available. It is better to guess a
   * value slightly too high than slightly too low. If the value is not exact, the {@link
   * ImmutableIntArray} that is built will very likely occupy more memory than strictly necessary;
   * to trim memory usage, build using {@code builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,builder,com.google.common.primitives.ImmutableIntArray:builder(),202,204,"/**
 * Creates a new Builder instance with initial capacity.
 * @param initialCapacity starting size for the builder
 * @return Builder object initialized with given capacity
 */","* Returns a new, empty builder for {@link ImmutableIntArray} instances, with a default initial
   * capacity. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> The {@link ImmutableIntArray} that is built will very likely occupy
   * more memory than necessary; to trim memory usage, build using {@code
   * builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,ensureRoomFor,com.google.common.primitives.ImmutableIntArray$Builder:ensureRoomFor(int),299,304,"/**
* Ensures there is room for additional elements.
* @param numberToAdd count of elements to add
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,<init>,com.google.common.primitives.ImmutableIntArray:<init>(int[]),351,353,"/**
 * Constructs an ImmutableIntArray from a given array.
 * @param array source array of integers
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,hashCode,com.google.common.primitives.ImmutableIntArray:hashCode(),586,594,"/**
* Generates a hash code based on array elements within specified range.
* @param start starting index of the range
* @param end ending index of the range (exclusive)
* @return computed hash code
*/",Returns an unspecified hash code for the contents of this immutable array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,hashCode,com.google.common.primitives.Ints$IntArrayAsList:hashCode(),773,780,"/**
* Generates hash code based on array elements within a range.
* @param start starting index of the range (inclusive)
* @param end ending index of the range (exclusive)
* @return computed hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,toString,com.google.common.primitives.ImmutableIntArray:toString(),600,613,"/**
* Returns a string representation of the array slice.
* @return String in ""[element1, element2, ...]"" format or ""[]"" if empty
*/","* Returns a string representation of this array in the same form as {@link
   * Arrays#toString(int[])}, for example {@code ""[1, 2, 3]""}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,readResolve,com.google.common.primitives.ImmutableIntArray:readResolve(),633,635,"/**
 * Returns singleton instance if empty; otherwise returns current instance.
 * @return Singleton EMPTY instance or current instance
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,size,com.google.common.primitives.ImmutableLongArray$AsList:size(),491,494,"/**
 * Returns the size of the parent.
 * @return size as an integer
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,indexOf,com.google.common.primitives.ImmutableLongArray$AsList:indexOf(java.lang.Object),506,509,"/**
 * Returns index of target if it's a Long; otherwise returns -1.
 * @param target object to find in the list
 * @return index of target or -1 if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,contains,com.google.common.primitives.ImmutableLongArray:contains(long),414,416,"/**
 * Checks if the list contains the specified target.
 * @param target value to search for
 * @return true if target is found, false otherwise
 */","* Returns {@code true} if {@code target} is present at any index in this array. Equivalent to
   * {@code asList().contains(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,lastIndexOf,com.google.common.primitives.ImmutableLongArray$AsList:lastIndexOf(java.lang.Object),511,514,"/**
* Returns the last index of the specified target in the parent list.
* @param target the object to search for (must be an instance of Long)
* @return the last index of the target if found, otherwise -1
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,builder,com.google.common.primitives.ImmutableLongArray:builder(int),191,194,"/**
* Creates a new Builder with an initial capacity.
* @param initialCapacity the starting size of the collection
* @return Builder instance initialized with given capacity
*/","* Returns a new, empty builder for {@link ImmutableLongArray} instances, sized to hold up to
   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number
   * of values that will be added, if that knowledge is readily available. It is better to guess a
   * value slightly too high than slightly too low. If the value is not exact, the {@link
   * ImmutableLongArray} that is built will very likely occupy more memory than strictly necessary;
   * to trim memory usage, build using {@code builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,builder,com.google.common.primitives.ImmutableLongArray:builder(),204,206,"/**
 * Creates a new Builder instance with an initial capacity of 10.
 * @return Builder object initialized with default capacity
 */","* Returns a new, empty builder for {@link ImmutableLongArray} instances, with a default initial
   * capacity. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> The {@link ImmutableLongArray} that is built will very likely
   * occupy more memory than necessary; to trim memory usage, build using {@code
   * builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,ensureRoomFor,com.google.common.primitives.ImmutableLongArray$Builder:ensureRoomFor(int),301,306,"/**
* Ensures there is room for additional elements.
* @param numberToAdd count of elements to add
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,<init>,com.google.common.primitives.ImmutableLongArray:<init>(long[]),353,355,"/**
 * Constructs an ImmutableLongArray from a given long array.
 * @param array source array of long values
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,hashCode,com.google.common.primitives.ImmutableLongArray:hashCode(),588,596,"/**
* Generates a hash code for the array segment.
* @return computed hash code
*/",Returns an unspecified hash code for the contents of this immutable array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,hashCode,com.google.common.primitives.Longs$LongArrayAsList:hashCode(),825,832,"/**
* Computes hash code based on array elements.
* @return computed hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,hashCode,com.google.common.primitives.UnsignedLong:hashCode(),237,240,"/**
 * Returns hash code based on value.
 * @return hash code of the long value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,toString,com.google.common.primitives.ImmutableLongArray:toString(),602,615,"/**
* Returns a string representation of the list.
* @return A comma-separated string enclosed in brackets
*/","* Returns a string representation of this array in the same form as {@link
   * Arrays#toString(long[])}, for example {@code ""[1, 2, 3]""}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,readResolve,com.google.common.primitives.ImmutableLongArray:readResolve(),635,637,"/**
 * Returns an empty instance if current instance is empty; otherwise returns itself.
 * @return An appropriate instance based on emptiness check
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,<init>,com.google.common.primitives.Ints$IntArrayAsList:<init>(int[]),672,674,"/**
 * Constructs an IntArrayAsList from an array.
 * @param array source int array
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,equals,com.google.common.primitives.Ints$IntArrayAsList:equals(java.lang.Object),752,771,"/**
* Compares this list to another object for equality.
* @param object the object to compare with
* @return true if the lists are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,toString,com.google.common.primitives.Ints$IntArrayAsList:toString(),782,790,"/**
* Converts array elements to a string.
* @return String representation of the array elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,toArray,com.google.common.primitives.Ints:toArray(java.util.Collection),627,640,"/**
 * Converts a collection of numbers to an int array.
 * @param collection the source collection
 * @return int array containing converted values
 */","* Returns an array containing each value of {@code collection}, converted to a {@code int} value
   * in the manner of {@link Number#intValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Integer>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,indexOf,"com.google.common.primitives.Ints:indexOf(int[],int)",160,162,"/**
 * Finds index of target in array.
 * @param array the array to search
 * @param target the value to find
 * @return index of target or -1 if not found
 */","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code int} values, possibly empty
   * @param target a primitive {@code int} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,lastIndexOf,"com.google.common.primitives.Ints:lastIndexOf(int[],int)",211,213,"/**
* Finds the last index of the target in the array.
* @param array the array to search
* @param target the value to find
* @return the last index of target or -1 if not found
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code int} values, possibly empty
   * @param target a primitive {@code int} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,<init>,com.google.common.primitives.Longs$LongArrayAsList:<init>(long[]),724,726,"/**
 * Constructs a list view of the specified long array.
 * @param array the long array to back this list
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,equals,com.google.common.primitives.Longs$LongArrayAsList:equals(java.lang.Object),804,823,"/**
* Checks equality with another object.
* @param object the object to compare with
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,toString,com.google.common.primitives.Longs$LongArrayAsList:toString(),834,842,"/**
* Returns a string representation of the array elements.
* @return String in the format ""[element1, element2, ...]""
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,toArray,com.google.common.primitives.Longs:toArray(java.util.Collection),679,692,"/**
* Converts a collection of Numbers to a long array.
* @param collection the input collection of Numbers
* @return a long array containing the values from the collection
*/","* Returns an array containing each value of {@code collection}, converted to a {@code long} value
   * in the manner of {@link Number#longValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Long>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,indexOf,"com.google.common.primitives.Longs:indexOf(long[],long)",121,123,"/**
 * Searches for the index of a target value in a long array.
 * @param array the array to search
 * @param target the value to find
 * @return the index of the target or -1 if not found
 */","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code long} values, possibly empty
   * @param target a primitive {@code long} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,lastIndexOf,"com.google.common.primitives.Longs:lastIndexOf(long[],long)",172,174,"/**
* Finds the last index of a target value in an array.
* @param array the array to search
* @param target the value to find
* @return the last index of target or -1 if not found
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code long} values, possibly empty
   * @param target a primitive {@code long} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,tryParse,"com.google.common.primitives.Longs:tryParse(java.lang.String,int)",400,440,"/**
 * Parses a string into a long integer with a specified radix.
 * @param string the string to parse
 * @param radix the base of the number system
 * @return parsed Long value or null if parsing fails
 */","* Parses the specified string as a signed long value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of a long value
   * @param radix the radix to use when parsing
   * @return the long value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as a long value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ParseRequest.java,fromString,com.google.common.primitives.ParseRequest:fromString(java.lang.String),30,54,"/**
 * Parses a string to create a ParseRequest.
 * @param stringValue the input string to parse
 * @return a ParseRequest object with parsed value and radix
 * @throws NumberFormatException if the input string is empty
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isWrapper,com.google.common.reflect.TypeToken:isWrapper(),554,556,"/**
 * Checks if the runtime type is a wrapper class.
 * @return true if runtimeType is a wrapper class, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,compare,"com.google.common.primitives.Shorts$LexicographicalComparator:compare(short[],short[])",456,466,"/**
* Compares two short arrays lexicographically.
* @param left first array to compare
* @param right second array to compare
* @return negative, zero, or positive if left is less than, equal to, or greater than right
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,<init>,com.google.common.primitives.Shorts$ShortArrayAsList:<init>(short[]),633,635,"/**
 * Constructs a list backed by the specified short array.
 * @param array the short array to back the list
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,equals,com.google.common.primitives.Shorts$ShortArrayAsList:equals(java.lang.Object),708,727,"/**
* Compares this list to the specified object for equality.
* @param object the object to compare with
* @return true if objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,toString,com.google.common.primitives.Shorts$ShortArrayAsList:toString(),738,746,"/**
* Converts array elements to a string representation.
* @return String of array elements separated by commas
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,hashCode,com.google.common.primitives.Shorts$ShortArrayAsList:hashCode(),729,736,"/**
* Generates hash code based on array elements from start to end.
* @return computed hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,toArray,com.google.common.primitives.Shorts:toArray(java.util.Collection),591,604,"/**
 * Converts a collection of numbers to a short array.
 * @param collection the input collection of numbers
 * @return a short array containing the values from the collection
 */","* Returns an array containing each value of {@code collection}, converted to a {@code short}
   * value in the manner of {@link Number#shortValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Short>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,indexOf,"com.google.common.primitives.Shorts:indexOf(short[],short)",154,156,"/**
 * Finds index of target in array.
 * @param array the array to search
 * @param target the value to find
 * @return index of target or -1 if not found
 */","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code short} values, possibly empty
   * @param target a primitive {@code short} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,lastIndexOf,"com.google.common.primitives.Shorts:lastIndexOf(short[],short)",205,207,"/**
 * Finds the last index of a target value in a short array.
 * @param array the short array to search
 * @param target the value to find
 * @return the last index of the target or -1 if not found
 */","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code short} values, possibly empty
   * @param target a primitive {@code short} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,fromByteArray,com.google.common.primitives.Shorts:fromByteArray(byte[]),335,339,"/**
* Converts a byte array to a short value.
* @param bytes byte array with at least 2 elements
* @return short value derived from the first two bytes
*/","* Returns the {@code short} value whose big-endian representation is stored in the first 2 bytes
   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getShort()}. For example, the
   * input byte array {@code {0x54, 0x32}} would yield the {@code short} value {@code 0x5432}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,compare,"com.google.common.primitives.SignedBytes$LexicographicalComparator:compare(byte[],byte[])",177,187,"/**
* Compares two byte arrays lexicographically.
* @param left first byte array to compare
* @param right second byte array to compare
* @return negative if left < right, positive if left > right, 0 if equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,getBestComparator,com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder:getBestComparator(),446,466,"/**
* Returns the best byte array comparator available.
* @return Comparator for comparing byte arrays
*/","* Returns the Unsafe-using Comparator, or falls back to the pure-Java implementation if unable
     * to do so.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,fromIntBits,com.google.common.primitives.UnsignedInteger:fromIntBits(int),67,69,"/**
 * Creates an UnsignedInteger from int bits.
 * @param bits integer bits representation
 * @return UnsignedInteger instance
 */","* Returns an {@code UnsignedInteger} corresponding to a given bit representation. The argument is
   * interpreted as an unsigned 32-bit value. Specifically, the sign bit of {@code bits} is
   * interpreted as a normal bit, and all other bits are treated as usual.
   *
   * <p>If the argument is nonnegative, the returned result will be equal to {@code bits},
   * otherwise, the result will be equal to {@code 2^32 + bits}.
   *
   * <p>To represent unsigned decimal constants, consider {@link #valueOf(long)} instead.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,toString,com.google.common.primitives.UnsignedInteger:toString(int),250,252,"/**
 * Converts the integer value to a string representation in the specified radix.
 * @param radix the base to use for conversion (e.g., 2 for binary)
 * @return the string representation of the value in the given radix
 */","* Returns a string representation of the {@code UnsignedInteger} value, in base {@code radix}. If
   * {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code
   * 10} is used.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,toString,com.google.common.primitives.UnsignedInts:toString(int),376,378,"/**
 * Converts an integer to its string representation in base 10.
 * @param x the integer to convert
 * @return string representation of the integer
 */","* Returns a string representation of x, where x is treated as unsigned.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#toUnsignedString(int)} instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,compare,"com.google.common.primitives.UnsignedInts:compare(int,int)",69,72,"/**
* Compares two integers with reversed sign.
* @param a first integer
* @param b second integer
* @return comparison result of flipped integers
*/","* Compares the two specified {@code int} values, treating them as unsigned values between {@code
   * 0} and {@code 2^32 - 1} inclusive.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the
   * equivalent {@link Integer#compareUnsigned(int, int)} method instead.
   *
   * @param a the first unsigned {@code int} to compare
   * @param b the second unsigned {@code int} to compare
   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is
   *     greater than {@code b}; or zero if they are equal",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,fromLongBits,com.google.common.primitives.UnsignedLong:fromLongBits(long),67,70,"/**
* Creates an UnsignedLong from its bit representation.
* @param bits long value representing the unsigned long bits
* @return UnsignedLong instance
*/","* Returns an {@code UnsignedLong} corresponding to a given bit representation. The argument is
   * interpreted as an unsigned 64-bit value. Specifically, the sign bit of {@code bits} is
   * interpreted as a normal bit, and all other bits are treated as usual.
   *
   * <p>If the argument is nonnegative, the returned result will be equal to {@code bits},
   * otherwise, the result will be equal to {@code 2^64 + bits}.
   *
   * <p>To represent decimal constants less than {@code 2^63}, consider {@link #valueOf(long)}
   * instead.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,compare,"com.google.common.primitives.UnsignedLongs:compare(long,long)",77,80,"/**
* Compares two long values.
* @param a first value to compare
* @param b second value to compare
* @return negative if a is less, positive if greater, zero if equal
*/","* Compares the two specified {@code long} values, treating them as unsigned values between {@code
   * 0} and {@code 2^64 - 1} inclusive.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the
   * equivalent {@link Long#compareUnsigned(long, long)} method instead.
   *
   * @param a the first unsigned {@code long} to compare
   * @param b the second unsigned {@code long} to compare
   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is
   *     greater than {@code b}; or zero if they are equal",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,parseUnsignedLong,"com.google.common.primitives.UnsignedLongs:parseUnsignedLong(java.lang.String,int)",339,363,"/**
* Parses a string as an unsigned long in the specified radix.
* @param string the string to parse
* @param radix the base of the number system
* @return parsed unsigned long value
*/","* Returns the unsigned {@code long} value represented by a string with the given radix.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String, int)} instead.
   *
   * @param string the string containing the unsigned {@code long} representation to be parsed.
   * @param radix the radix to use while parsing {@code string}
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long} with
   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link
   *     Character#MAX_RADIX}.
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Long#parseLong(String)})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/AbstractInvocationHandler.java,invoke,"com.google.common.reflect.AbstractInvocationHandler:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",61,87,"/**
* Handles method invocations on a proxy object.
* @param proxy the proxy instance
* @param method the method being invoked
* @param args arguments to the method
* @return result of the method invocation or default behavior
* @throws Throwable if an error occurs during invocation
*/","* {@inheritDoc}
   *
   * <ul>
   *   <li>{@code proxy.hashCode()} delegates to {@link AbstractInvocationHandler#hashCode}
   *   <li>{@code proxy.toString()} delegates to {@link AbstractInvocationHandler#toString}
   *   <li>{@code proxy.equals(argument)} returns true if:
   *       <ul>
   *         <li>{@code proxy} and {@code argument} are of the same type
   *         <li>and {@link AbstractInvocationHandler#equals} returns true for the {@link
   *             InvocationHandler} of {@code argument}
   *       </ul>
   *   <li>other method calls are dispatched to {@link #handleInvocation}.
   * </ul>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getPackageName,com.google.common.reflect.ClassPath$ClassInfo:getPackageName(),317,319,"/**
 * Retrieves the package name of the class.
 * @return Package name as a String
 */","* Returns the package name of the class, without attempting to load the class.
     *
     * <p>Behaves similarly to {@code class.getPackage().}{@link Package#getName() getName()} but
     * does not require the class (or package) to be loaded.
     *
     * <p>But note that this method may behave differently for a class in the default package: For
     * such classes, this method always returns an empty string. But under some version of Java,
     * {@code class.getPackage().getName()} produces a {@code NullPointerException} because {@code
     * class.getPackage()} returns {@code null}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Reflection.java,getPackageName,com.google.common.reflect.Reflection:getPackageName(java.lang.Class),35,37,"/**
 * Retrieves the package name of a given class.
 * @param clazz the Class object to inspect
 * @return the package name as a String
 */","* Returns the package name of {@code clazz} according to the Java Language Specification (section
   * 6.7). Unlike {@link Class#getPackage}, this method only parses the class name, without
   * attempting to define the {@link Package} and hence load files.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,asByteSource,com.google.common.reflect.ClassPath$ResourceInfo:asByteSource(),246,248,"/**
 * Converts URL to ByteSource.
 * @return ByteSource representation of the URL
 */","* Returns a {@link ByteSource} view of the resource from which its bytes can be read.
     *
     * @throws NoSuchElementException if the resource cannot be loaded through the class loader,
     *     despite physically existing in the class path.
     * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.ImmutableTypeToInstanceMap:getInstance(com.google.common.reflect.TypeToken),102,105,"/**
 * Retrieves an instance of a specified type.
 * @param type TypeToken representing the desired type
 * @return Instance of the specified type or null if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericParameterTypes,com.google.common.reflect.Invokable$ConstructorInvokable:getGenericParameterTypes(),454,466,"/**
 * Retrieves generic parameter types of the constructor.
 * Adjusts for a hidden 'this' parameter if necessary.
 * @return Array of Type objects representing generic parameters
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isPublic,com.google.common.reflect.Invokable:isPublic(),150,152,"/**
 * Checks if the class is publicly accessible.
 * @return true if the class is public, false otherwise
 */",Returns true if the element is public.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isProtected,com.google.common.reflect.Invokable:isProtected(),155,157,"/**
 * Checks if the method is protected.
 * @return true if the method is protected, false otherwise
 */",Returns true if the element is protected.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isPrivate,com.google.common.reflect.Invokable:isPrivate(),165,167,"/**
 * Checks if the class is private.
 * @return true if the class is private, false otherwise
 */",Returns true if the element is private.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isStatic,com.google.common.reflect.Invokable:isStatic(),170,172,"/**
 * Checks if the method is static.
 * @return true if the method is static, false otherwise
 */",Returns true if the element is static.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isFinal,com.google.common.reflect.Invokable:isFinal(),181,183,"/**
 * Checks if this class is declared as final.
 * @return true if the class is final, false otherwise
 */","* Returns {@code true} if this method is final, per {@code Modifier.isFinal(getModifiers())}.
   *
   * <p>Note that a method may still be effectively ""final"", or non-overridable when it has no
   * {@code final} keyword. For example, it could be private, or it could be declared by a final
   * class. To tell whether a method is overridable, use {@link Invokable#isOverridable}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isAbstract,com.google.common.reflect.Invokable:isAbstract(),186,188,"/**
 * Checks if the class is abstract.
 * @return true if the class is abstract, false otherwise
 */",Returns true if the method is abstract.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isNative,com.google.common.reflect.Invokable:isNative(),191,193,"/**
 * Checks if the method is native.
 * @return true if the method is native, false otherwise
 */",Returns true if the element is native.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isSynchronized,com.google.common.reflect.Invokable:isSynchronized(),196,198,"/**
 * Checks if the method is synchronized.
 * @return true if the method is synchronized, false otherwise
 */",Returns true if the method is synchronized.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isVolatile,com.google.common.reflect.Invokable:isVolatile(),201,203,"/**
 * Checks if the field is volatile.
 * @return true if the field is volatile, false otherwise
 */",Returns true if the field is volatile.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isTransient,com.google.common.reflect.Invokable:isTransient(),206,208,"/**
 * Checks if the field is marked as transient.
 * @return true if the field is transient, false otherwise
 */",Returns true if the field is transient.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,delegate,com.google.common.collect.ForwardingMapEntry:delegate(),57,58,"/**
 * Returns the delegate entry.
 * @return Entry<K, V> representing the delegate
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.MutableTypeToInstanceMap:getInstance(com.google.common.reflect.TypeToken),50,53,"/**
* Retrieves an instance of a specified type.
* @param type TypeToken representing the desired class type
* @return Instance of the specified type or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,putInstance,"com.google.common.reflect.MutableTypeToInstanceMap:putInstance(com.google.common.reflect.TypeToken,java.lang.Object)",62,67,"/**
* Stores an instance of a specified type.
* @param <T> generic type extending B
* @param type TypeToken representing the type
* @param value instance to store
* @return stored instance or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getAnnotations,com.google.common.reflect.Parameter:getAnnotations(),88,91,"/**
 * Returns all annotations declared on this element.
 * @return array of Annotation objects
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,equals,com.google.common.reflect.TypeResolver$TypeVariableKey:equals(java.lang.Object),563,571,"/**
 * Checks equality with another object.
 * @param obj the object to compare
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,equalsType,com.google.common.reflect.TypeResolver$TypeVariableKey:equalsType(java.lang.reflect.Type),591,597,"/**
* Checks if this type is equal to a given type.
* @param type the type to compare with
* @return true if types are equal, false otherwise
*/","* Returns true if {@code type} is a {@code TypeVariable} with the same name and declared by the
     * same {@code GenericDeclaration}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver$WildcardCapturer:<init>(),453,455,"/**
 * Initializes WildcardCapturer with a new AtomicInteger.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,notForTypeVariable,com.google.common.reflect.TypeResolver$WildcardCapturer:notForTypeVariable(),526,528,"/**
 * Creates and returns a new WildcardCapturer instance.
 * @return WildcardCapturer object initialized with 'id'
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,every,com.google.common.reflect.TypeToken:every(java.lang.reflect.Type[]),1054,1057,"/**
* Creates a Bounds object with specified type bounds and default matching behavior.
* @param bounds array of Type objects representing the bounds
* @return Bounds object initialized with given bounds and set to not match by default
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,any,com.google.common.reflect.TypeToken:any(java.lang.reflect.Type[]),1059,1062,"/**
* Creates a Bounds object that accepts any type.
* @param bounds array of Type objects representing bounds
* @return Bounds object with matchAny set to true
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,readResolve,com.google.common.reflect.TypeToken$ClassSet:readResolve(),800,802,"/**
 * Returns the classes of types.
 * @return array of Class objects representing the types
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,readResolve,com.google.common.reflect.TypeToken$InterfaceSet:readResolve(),753,755,"/**
 * Returns interfaces implemented by types.
 * @return array of Class objects representing interfaces
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,of,com.google.common.reflect.TypeToken:of(java.lang.Class),169,171,"/**
 * Creates a TypeToken instance from a Class.
 * @param type the Class to create a TypeToken for
 * @return a TypeToken representing the specified class
 */",Returns an instance of type token that wraps {@code type}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,of,com.google.common.reflect.TypeToken:of(java.lang.reflect.Type),174,176,"/**
 * Creates a TypeToken instance from a given Type.
 * @param type the Type to be wrapped
 * @return a TypeToken representing the provided Type
 */",Returns an instance of type token that wraps {@code type}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,toString,com.google.common.reflect.TypeToken:toString(),840,843,"/**
 * Returns string representation of runtime type.
 * @return Type name as a string
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,toString,com.google.common.reflect.Types$GenericArrayTypeImpl:toString(),229,232,"/**
 * Returns string representation of array type.
 * @return String in format ""ComponentType[]""
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,typeName,com.google.common.reflect.Types$JavaVersion:typeName(java.lang.reflect.Type),652,654,"/**
 * Converts a Type to its string representation.
 * @param type the Type to convert
 * @return the string name of the Type
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newArrayType,com.google.common.reflect.Types$JavaVersion$1:newArrayType(java.lang.reflect.Type),640,640,"/**
 * Creates a new array type with the specified component type.
 * @param componentType the type of components in the array
 * @return a new array type
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,usedInGenericType,com.google.common.reflect.Types$JavaVersion$1:usedInGenericType(java.lang.reflect.Type),642,642,"/**
 * Determines the generic type usage.
 * @param type the input type to analyze
 * @return the determined generic type
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newArrayType,com.google.common.reflect.Types$JavaVersion$2:newArrayType(java.lang.reflect.Type),640,640,"/**
 * Creates an array type with the specified component type.
 * @param componentType the type of elements in the array
 * @return a new array type based on the component type
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$GenericArrayTypeImpl:equals(java.lang.Object),239,246,"/**
* Checks equality with another object.
* @param obj the object to compare
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$ParameterizedTypeImpl:equals(java.lang.Object),302,311,"/**
 * Checks equality based on raw type, owner type, and actual type arguments.
 * @param other object to compare with
 * @return true if equal, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,toString,com.google.common.util.concurrent.AbstractExecutionThreadService:toString(),151,154,"/**
 * Returns string representation of service.
 * @return Service name and state in format ""ServiceName [State]""
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,<init>,com.google.common.util.concurrent.Futures$InCompletionOrderFuture:<init>(com.google.common.util.concurrent.Futures$InCompletionOrderState),950,952,"/**
 * Constructs an InCompletionOrderFuture with a given state.
 * @param state the initial state of the future
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,isDone,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:isDone(),107,110,"/**
 * Checks if the task is completed.
 * @return true if the task is done, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,isCancelled,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:isCancelled(),112,115,"/**
 * Checks if task execution is cancelled.
 * @return true if task is cancelled, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,getDoneValue,com.google.common.util.concurrent.AbstractFuture:getDoneValue(java.lang.Object),280,304,"/**
* Retrieves the completed value or throws an exception based on object type.
* @param obj the result object to process
* @return the completed value if successful
* @throws ExecutionException if there was a failure during execution
*/",Unboxes {@code obj}. Assumes that obj is not {@code null} or a {@link DelegatingToFuture}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addListener,"com.google.common.util.concurrent.AbstractFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",441,470,"/**
* Adds a listener to be executed upon completion.
* @param listener the Runnable to execute
* @param executor the Executor to run the listener on
*/","* {@inheritDoc}
   *
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,maybePropagateCancellationTo,com.google.common.util.concurrent.AbstractFuture:maybePropagateCancellationTo(java.util.concurrent.Future),829,834,"/**
* Propagates cancellation to a related future if this one is cancelled.
* @param related the future to potentially cancel
*/","* If this future has been cancelled (and possibly interrupted), cancels (and possibly interrupts)
   * the given future (if available).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addDoneString,com.google.common.util.concurrent.AbstractFuture:addDoneString(java.lang.StringBuilder),936,950,"/**
 * Appends success or failure status to StringBuilder.
 * @param builder StringBuilder to append result
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,get,com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier:get(),48,51,"/**
 * Returns a string representation combining service name and state.
 * @return concatenated service name and state
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,toString,com.google.common.util.concurrent.AbstractIdleService:toString(),115,118,"/**
 * Returns string representation of service.
 * @return formatted string with service name and state
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:<init>(java.util.concurrent.ExecutorService),498,500,"/**
 * Initializes a new instance of ListeningDecorator.
 * @param delegate ExecutorService to be decorated
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,submit,com.google.common.util.concurrent.ListeningExecutorService:submit(java.util.concurrent.Callable),51,52,"/**
 * Submits a callable task for execution and returns a future.
 * @param task the callable task to execute
 * @return a ListenableFuture representing the pending result of the task
 */","* @return a {@code ListenableFuture} representing pending completion of the task
   * @throws RejectedExecutionException {@inheritDoc}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,<init>,"com.google.common.util.concurrent.ServiceManager$ServiceListener:<init>(com.google.common.util.concurrent.Service,java.lang.ref.WeakReference)",785,788,"/**
* Initializes a new ServiceListener.
* @param service the Service to listen to
* @param state weak reference to ServiceManagerState
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,schedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)",193,194,"/**
* Schedules a task to be run by a service.
* @param service the service to execute the task
* @param executor the executor service managing the scheduling
* @param runnable the task to be scheduled
* @return Cancellable object to manage the task's lifecycle
*/",Schedules the task to run on the provided executor on behalf of the service.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,schedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)",193,194,"/**
 * Schedules a task to run with a given service and executor.
 * @param service the service to associate with the task
 * @param executor the executor to use for scheduling
 * @param runnable the task to be executed
 * @return Cancellable object to manage the scheduled task
 */",Schedules the task to run on the provided executor on behalf of the service.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,initializeOrUpdateCancellationDelegate,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:initializeOrUpdateCancellationDelegate(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule),650,666,"/**
* Initializes or updates the cancellation delegate for a schedule.
* @param schedule task scheduling details
* @return Cancellable object representing the task
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,invokeAll,"com.google.common.util.concurrent.ListeningExecutorService:invokeAll(java.util.Collection,java.time.Duration)",120,124,"/**
 * Invokes all tasks with a specified timeout.
 * @param tasks collection of callable tasks
 * @param timeout maximum time to wait for task completion
 * @return list of futures representing task results
 * @throws InterruptedException if the current thread is interrupted
 */","* Duration-based overload of {@link #invokeAll(Collection, long, TimeUnit)}.
   *
   * @since 32.1.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,invokeAny,"com.google.common.util.concurrent.ListeningExecutorService:invokeAny(java.util.Collection,java.time.Duration)",131,136,"/**
* Executes any of the given tasks within a specified timeout.
* @param tasks collection of Callable tasks
* @param timeout maximum time to wait for task completion
* @return result of one of the completed tasks
* @throws InterruptedException if interrupted while waiting
* @throws ExecutionException if task execution fails
* @throws TimeoutException if no task completes within timeout
*/","* Duration-based overload of {@link #invokeAny(Collection, long, TimeUnit)}.
   *
   * @since 32.1.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,awaitTermination,com.google.common.util.concurrent.ListeningExecutorService:awaitTermination(java.time.Duration),143,146,"/**
* Awaits termination for a specified duration.
* @param timeout maximum time to wait
* @return true if terminated, false if timed out
* @throws InterruptedException if interrupted while waiting
*/","* Duration-based overload of {@link #awaitTermination(long, TimeUnit)}.
   *
   * @since 32.1.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,schedule,"com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.util.concurrent.Callable,java.time.Duration)",68,72,"/**
* Schedules a task with a specified delay.
* @param callable the task to execute
* @param delay duration until execution
* @return ListenableScheduledFuture for the scheduled task
*/","* Duration-based overload of {@link #schedule(Callable, long, TimeUnit)}.
   *
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,scheduleAtFixedRate,"com.google.common.util.concurrent.ListeningScheduledExecutorService:scheduleAtFixedRate(java.lang.Runnable,java.time.Duration,java.time.Duration)",86,91,"/**
* Schedules a task to run at fixed intervals.
* @param command the task to execute
* @param initialDelay delay before first execution
* @param period interval between subsequent executions
* @return ListenableScheduledFuture representing scheduled task
*/","* Duration-based overload of {@link #scheduleAtFixedRate(Runnable, long, long, TimeUnit)}.
   *
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,scheduleWithFixedDelay,"com.google.common.util.concurrent.ListeningScheduledExecutorService:scheduleWithFixedDelay(java.lang.Runnable,java.time.Duration,java.time.Duration)",105,110,"/**
* Schedules a task with fixed delay.
* @param command the task to execute
* @param initialDelay time before first execution
* @param delay time between subsequent executions
* @return ListenableScheduledFuture representing scheduled task
*/","* Duration-based overload of {@link #scheduleWithFixedDelay(Runnable, long, long, TimeUnit)}.
   *
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Service.java,awaitRunning,com.google.common.util.concurrent.Service:awaitRunning(java.time.Duration),113,115,"/**
* Waits until the service is running within the specified timeout.
* @param timeout maximum time to wait
* @throws TimeoutException if not running within the timeout
*/","* Waits for the {@link Service} to reach the {@linkplain State#RUNNING running state} for no more
   * than the given time.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if the service has not reached the given state within the deadline
   * @throws IllegalStateException if the service reaches a state from which it is not possible to
   *     enter the {@link State#RUNNING RUNNING} state. e.g. if the {@code state} is {@code
   *     State#TERMINATED} when this method is called then this will throw an IllegalStateException.
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Service.java,awaitTerminated,com.google.common.util.concurrent.Service:awaitTerminated(java.time.Duration),149,151,"/**
* Waits for termination within specified timeout.
* @param timeout maximum time to wait
* @throws TimeoutException if not terminated within timeout
*/","* Waits for the {@link Service} to reach a terminal state (either {@link Service.State#TERMINATED
   * terminated} or {@link Service.State#FAILED failed}) for no more than the given time.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if the service has not reached the given state within the deadline
   * @throws IllegalStateException if the service {@linkplain State#FAILED fails}.
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,newProxy,"com.google.common.util.concurrent.TimeLimiter:newProxy(java.lang.Object,java.lang.Class,java.time.Duration)",125,127,"/**
* Creates a new proxy with a specified timeout.
* @param target the original object to proxy
* @param interfaceType the interface type for the proxy
* @param timeout duration before timing out
* @return proxy instance with timeout
*/","* Returns an instance of {@code interfaceType} that delegates all method calls to the {@code
   * target} object, enforcing the specified time limit on each call. This time-limited delegation
   * is also performed for calls to {@link Object#equals}, {@link Object#hashCode}, and {@link
   * Object#toString}.
   *
   * <p>If the target method call finishes before the limit is reached, the return value or
   * exception is propagated to the caller exactly as-is. If, on the other hand, the time limit is
   * reached, the proxy will attempt to abort the call to the target, and will throw an {@link
   * UncheckedTimeoutException} to the caller.
   *
   * <p>It is important to note that the primary purpose of the proxy object is to return control to
   * the caller when the timeout elapses; aborting the target method call is of secondary concern.
   * The particular nature and strength of the guarantees made by the proxy is
   * implementation-dependent. However, it is important that each of the methods on the target
   * object behaves appropriately when its thread is interrupted.
   *
   * <p>For example, to return the value of {@code target.someMethod()}, but substitute {@code
   * DEFAULT_VALUE} if this method call takes over 50 ms, you can use this code:
   *
   * <pre>
   *   TimeLimiter limiter = . . .;
   *   TargetType proxy = limiter.newProxy(target, TargetType.class, Duration.ofMillis(50));
   *   try {
   *     return proxy.someMethod();
   *   } catch (UncheckedTimeoutException e) {
   *     return DEFAULT_VALUE;
   *   }
   * </pre>
   *
   * @param target the object to proxy
   * @param interfaceType the interface you wish the returned proxy to implement
   * @param timeout the maximum length of time that callers are willing to wait on each method call
   *     to the proxy
   * @return a time-limiting proxy
   * @throws IllegalArgumentException if {@code interfaceType} is a regular class, enum, or
   *     annotation type, rather than an interface
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.TimeLimiter:callWithTimeout(java.util.concurrent.Callable,java.time.Duration)",169,174,"/**
 * Executes a task with a specified timeout.
 * @param callable the task to execute
 * @param timeout duration for the timeout
 * @return result of the callable or throws exception if timed out
 */","* Invokes a specified Callable, timing out after the specified time limit. If the target method
   * call finishes before the limit is reached, the return value or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to
   * the target, and throw a {@link TimeoutException} to the caller.
   *
   * @param callable the Callable to execute
   * @param timeout the maximum length of time to wait
   * @return the result returned by the Callable
   * @throws TimeoutException if the time limit is reached
   * @throws InterruptedException if the current thread was interrupted during execution
   * @throws ExecutionException if {@code callable} throws a checked exception
   * @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code callable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,callUninterruptiblyWithTimeout,"com.google.common.util.concurrent.TimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,java.time.Duration)",220,226,"/**
* Executes a callable with a specified timeout.
* @param callable task to execute
* @param timeout maximum time to wait for completion
* @return result of the callable or throws TimeoutException if timed out
*/","* Invokes a specified Callable, timing out after the specified time limit. If the target method
   * call finishes before the limit is reached, the return value or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to
   * the target, and throw a {@link TimeoutException} to the caller.
   *
   * <p>The difference with {@link #callWithTimeout(Callable, Duration)} is that this method will
   * ignore interrupts on the current thread.
   *
   * @param callable the Callable to execute
   * @param timeout the maximum length of time to wait
   * @return the result returned by the Callable
   * @throws TimeoutException if the time limit is reached
   * @throws ExecutionException if {@code callable} throws a checked exception
   * @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code callable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,runWithTimeout,"com.google.common.util.concurrent.TimeLimiter:runWithTimeout(java.lang.Runnable,java.time.Duration)",261,264,"/**
 * Executes a task with a specified timeout.
 * @param runnable the task to execute
 * @param timeout maximum time to wait for task completion
 * @throws TimeoutException if task exceeds timeout
 * @throws InterruptedException if thread is interrupted while waiting
 */","* Invokes a specified Runnable, timing out after the specified time limit. If the target method
   * run finishes before the limit is reached, this method returns or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and
   * throw a {@link TimeoutException} to the caller.
   *
   * @param runnable the Runnable to execute
   * @param timeout the maximum length of time to wait
   * @throws TimeoutException if the time limit is reached
   * @throws InterruptedException if the current thread was interrupted during execution
   * @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code runnable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,runUninterruptiblyWithTimeout,"com.google.common.util.concurrent.TimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,java.time.Duration)",303,306,"/**
 * Executes a task with a specified timeout without interruption.
 * @param runnable the task to execute
 * @param timeout maximum time to wait for task completion
 * @throws TimeoutException if the task exceeds the timeout period
 */","* Invokes a specified Runnable, timing out after the specified time limit. If the target method
   * run finishes before the limit is reached, this method returns or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and
   * throw a {@link TimeoutException} to the caller.
   *
   * <p>The difference with {@link #runWithTimeout(Runnable, Duration)} is that this method will
   * ignore interrupts on the current thread.
   *
   * @param runnable the Runnable to execute
   * @param timeout the maximum length of time to wait
   * @throws TimeoutException if the time limit is reached
   * @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code runnable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,executor,com.google.common.util.concurrent.AbstractScheduledService:executor(),365,394,"/**
* Creates and returns a single-threaded scheduled executor with custom thread naming.
* Adds listeners to shut down the executor on service termination or failure.
* @return ScheduledExecutorService instance
*/","* Returns the {@link ScheduledExecutorService} that will be used to execute the {@link #startUp},
   * {@link #runOneIteration} and {@link #shutDown} methods. If this method is overridden the
   * executor will not be {@linkplain ScheduledExecutorService#shutdown shutdown} when this service
   * {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED
   * fails}. Subclasses may override this method to supply a custom {@link ScheduledExecutorService}
   * instance. This method is guaranteed to only be called once.
   *
   * <p>By default this returns a new {@link ScheduledExecutorService} with a single thread pool
   * that sets the name of the thread to the {@linkplain #serviceName() service name}. Also, the
   * pool will be {@linkplain ScheduledExecutorService#shutdown() shut down} when the service
   * {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED
   * fails}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,toString,com.google.common.util.concurrent.AbstractScheduledService:toString(),406,409,"/**
 * Returns string representation of service.
 * @return formatted string with service name and state
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,state,com.google.common.util.concurrent.AbstractService:state(),494,497,"/**
 * Returns the external state of the snapshot.
 * @return State object representing the current state
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,<init>,"com.google.common.util.concurrent.AggregateFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,boolean)",67,75,"/**
* Constructs an AggregateFuture.
* @param futures collection of ListenableFutures to aggregate
* @param allMustSucceed true if all futures must succeed, false if any can fail
* @param collectsValues true if future results should be collected, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,addInitialException,com.google.common.util.concurrent.AggregateFuture:addInitialException(java.util.Set),251,274,"/**
* Adds initial exception to seen set if not cancelled.
* @param seen set to track exceptions
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,handleException,com.google.common.util.concurrent.AggregateFuture:handleException(java.lang.Throwable),209,241,"/**
* Handles exceptions by setting them as results or logging them if necessary.
* @param throwable the exception to handle
*/","* Fails this future with the given Throwable if {@link #allMustSucceed} is true. Also, logs the
   * throwable if it is an {@link Error} or if {@link #allMustSucceed} is {@code true}, the
   * throwable did not cause this future to fail, and it is the first time we've seen that
   * particular Throwable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,toString,com.google.common.util.concurrent.AtomicDouble:toString(),254,257,"/**
 * Returns string representation of the double value.
 * @return string form of the double value
 */","* Returns the String representation of the current value.
   *
   * @return the String representation of the current value",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,intValue,com.google.common.util.concurrent.AtomicDouble:intValue(),263,266,"/**
 * Returns the integer value of the current setting.
 * @return integer representation of the setting
 */","* Returns the value of this {@code AtomicDouble} as an {@code int} after a narrowing primitive
   * conversion.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,longValue,com.google.common.util.concurrent.AtomicDouble:longValue(),272,275,"/**
 * Returns the long value of the stored number.
 * @return long representation of the number
 */","* Returns the value of this {@code AtomicDouble} as a {@code long} after a narrowing primitive
   * conversion.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,floatValue,com.google.common.util.concurrent.AtomicDouble:floatValue(),281,284,"/**
 * Returns the float value of the underlying data.
 * @return float representation of the data
 */","* Returns the value of this {@code AtomicDouble} as a {@code float} after a narrowing primitive
   * conversion.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,doubleValue,com.google.common.util.concurrent.AtomicDouble:doubleValue(),287,290,"/**
 * Returns the numeric value.
 * @return numeric value as double
 */",Returns the value of this {@code AtomicDouble} as a {@code double}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,writeObject,com.google.common.util.concurrent.AtomicDouble:writeObject(java.io.ObjectOutputStream),297,301,"/**
 * Serializes the object using custom logic.
 * @param s ObjectOutputStream to serialize data
 * @throws IOException if I/O error occurs
 */","* Saves the state to a stream (that is, serializes it).
   *
   * @serialData The current value is emitted (a {@code double}).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,readObject,com.google.common.util.concurrent.AtomicDouble:readObject(java.io.ObjectInputStream),304,308,"/**
 * Reads object from input stream.
 * @param s ObjectInputStream to read from
 * @throws IOException if I/O error occurs
 * @throws ClassNotFoundException if class not found during reading
 */","Reconstitutes the instance from a stream (that is, deserializes it).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,getAndAccumulate,"com.google.common.util.concurrent.AtomicDouble:getAndAccumulate(double,java.util.function.DoubleBinaryOperator)",188,192,"/**
* Retrieves and accumulates the value using a binary operator.
* @param x value to accumulate with
* @param accumulatorFunction function to apply for accumulation
* @return updated value after accumulation
*/","* Atomically updates the current value with the results of applying the given function to the
   * current and given values.
   *
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the previous value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,accumulateAndGet,"com.google.common.util.concurrent.AtomicDouble:accumulateAndGet(double,java.util.function.DoubleBinaryOperator)",203,207,"/**
* Accumulates and gets a new value.
* @param x the value to be accumulated
* @param accumulatorFunction the function that defines the accumulation operation
* @return the updated value after accumulation
*/","* Atomically updates the current value with the results of applying the given function to the
   * current and given values.
   *
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the updated value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,toString,com.google.common.util.concurrent.AtomicDoubleArray:toString(),278,295,"/**
 * Converts the list of long bits to a string representation of double values.
 * @return String representation of double values in brackets, separated by commas
 */","* Returns the String representation of the current values of array.
   *
   * @return the String representation of the current values of array",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,writeObject,com.google.common.util.concurrent.AtomicDoubleArray:writeObject(java.io.ObjectOutputStream),303,314,"/**
* Custom serialization method for writing object state to stream.
* Writes default fields, array length, and all elements in order.
*/","* Saves the state to a stream (that is, serializes it).
   *
   * @serialData The length of the array is emitted (int), followed by all of its elements (each a
   *     {@code double}) in the proper order.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,getAndAccumulate,"com.google.common.util.concurrent.AtomicDoubleArray:getAndAccumulate(int,double,java.util.function.DoubleBinaryOperator)",207,211,"/**
* Atomically accumulates a value at the specified index.
* @param i index of the array element to update
* @param x value to accumulate with
* @param accumulatorFunction function that defines how to accumulate values
* @return updated value after accumulation
*/","* Atomically updates the element at index {@code i} with the results of applying the given
   * function to the current and given values.
   *
   * @param i the index to update
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the previous value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,accumulateAndGet,"com.google.common.util.concurrent.AtomicDoubleArray:accumulateAndGet(int,double,java.util.function.DoubleBinaryOperator)",223,227,"/**
* Updates element at index with accumulated value.
* @param i index of the element to update
* @param x value to accumulate
* @param accumulatorFunction function defining accumulation logic
* @return updated value after accumulation
*/","* Atomically updates the element at index {@code i} with the results of applying the given
   * function to the current and given values.
   *
   * @param i the index to update
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the updated value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,removeIfZero,com.google.common.util.concurrent.AtomicLongMap:removeIfZero(java.lang.Object),246,249,"/**
 * Removes entry if its value is zero.
 * @param key key of the entry to check and potentially remove
 * @return true if an entry was removed, false otherwise
 */","* Atomically remove {@code key} from the map iff its associated value is 0.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,asMap,com.google.common.util.concurrent.AtomicLongMap:asMap(),273,276,"/**
 * Returns the map representation of the counter.
 * @return Map containing keys and their corresponding counts
 */","Returns a live, read-only view of the map backing this {@code AtomicLongMap}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,replace,"com.google.common.util.concurrent.AtomicLongMap:replace(java.lang.Object,long,long)",343,349,"/**
* Replaces value for a key if it matches the expected old value.
* @param key key to replace value for
* @param expectedOldValue expected current value of the key
* @param newValue new value to set
* @return true if successful, false otherwise
*/","* If {@code (key, expectedOldValue)} is currently in the map, this method replaces {@code
   * expectedOldValue} with {@code newValue} and returns true; otherwise, this method returns false.
   *
   * <p>If {@code expectedOldValue} is zero, this method will succeed if {@code (key, zero)} is
   * currently in the map, or if {@code key} is not in the map at all.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,close,com.google.common.util.concurrent.ClosingFuture:close(),1110,1113,"/**
* Closes resources and logs closure.
* Logs a finer level message indicating closure of the current instance.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,finishToFuture,com.google.common.util.concurrent.ClosingFuture:finishToFuture(),1009,1039,"/**
* Completes the operation and returns a future.
* @return FluentFuture representing the completion status
*/","* Marks this step as the last step in the {@code ClosingFuture} pipeline.
   *
   * <p>The returned {@link Future} is completed when the pipeline's computation completes, or when
   * the pipeline is cancelled.
   *
   * <p>All objects the pipeline has captured for closing will begin to be closed asynchronously
   * <b>after</b> the returned {@code Future} is done: the future completes before closing starts,
   * rather than once it has finished.
   *
   * <p>After calling this method, you may not call {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, this method, or any other
   * derivation method on the original {@code ClosingFuture} instance.
   *
   * @return a {@link Future} that represents the final value or exception of the pipeline",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,finishToValueAndCloser,"com.google.common.util.concurrent.ClosingFuture:finishToValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,java.util.concurrent.Executor)",1052,1076,"/**
* Finishes the step by providing a value and closer.
* @param consumer handles the value and closer
* @param executor to run the listener
*/","* Marks this step as the last step in the {@code ClosingFuture} pipeline. When this step is done,
   * {@code receiver} will be called with an object that contains the result of the operation. The
   * receiver can store the {@link ValueAndCloser} outside the receiver for later synchronous use.
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, this method again, or
   * any other derivation method on the original {@code ClosingFuture} instance.
   *
   * @param consumer a callback whose method will be called (using {@code executor}) when this
   *     operation is done",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,checkAndUpdateState,"com.google.common.util.concurrent.ClosingFuture:checkAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State)",2163,2169,"/**
 * Checks and updates the state.
 * @param oldState current state
 * @param newState new state to update to
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,collectOneValue,"com.google.common.util.concurrent.CollectionFuture:collectOneValue(int,java.lang.Object)",60,66,"/**
* Sets a value at the specified index.
* @param index position in the list
* @param returnValue value to be set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,handleAllCompleted,com.google.common.util.concurrent.CombinedFuture:handleAllCompleted(),61,67,"/**
* Executes the combined future task if it exists.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,"com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)",493,507,"/**
* Constructs an example stack trace for lock graph nodes.
* @param node1 first lock graph node
* @param node2 second lock graph node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,<init>,com.google.common.util.concurrent.ListenableFutureTask:<init>(java.util.concurrent.Callable),81,83,"/**
 * Constructs a new ListenableFutureTask with the specified Callable.
 * @param callable the task to execute
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,<init>,"com.google.common.util.concurrent.ListenableFutureTask:<init>(java.lang.Runnable,java.lang.Object)",85,87,"/**
 * Creates a ListenableFutureTask with a given Runnable and result.
 * @param runnable task to execute
 * @param result initial result of the computation
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionList.java,add,"com.google.common.util.concurrent.ExecutionList:add(java.lang.Runnable,java.util.concurrent.Executor)",69,89,"/**
* Adds a Runnable to be executed by an Executor.
* @param runnable task to be executed
* @param executor executes the runnable
*/","* Adds the {@code Runnable} and accompanying {@code Executor} to the list of listeners to
   * execute. If execution has already begun, the listener is executed immediately.
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}
   * documentation.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionList.java,execute,com.google.common.util.concurrent.ExecutionList:execute(),102,134,"/**
 * Executes all pending runnables in reverse order.
 * Ensures thread safety during execution.
 */","* Runs this execution list, executing all existing pairs in the order they were added. However,
   * note that listeners added after this point may be executed before those previously added, and
   * note that the execution order of all listeners is ultimately chosen by the implementations of
   * the supplied executors.
   *
   * <p>This method is idempotent. Calling it several times in parallel is semantically equivalent
   * to calling it exactly once.
   *
   * @since 10.0 (present in 1.0 as {@code run})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,<init>,"com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:<init>(java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionSequencer)",314,318,"/**
* Initializes a new TaskNonReentrantExecutor.
* @param delegate Executor to handle task execution
* @param sequencer Sequencer to manage task sequencing
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,<init>,com.google.common.util.concurrent.ExecutionSequencer:<init>(),91,91,"/**
 * Private constructor to prevent instantiation of ExecutionSequencer.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFluentFuture.java,<init>,com.google.common.util.concurrent.ForwardingFluentFuture:<init>(com.google.common.util.concurrent.ListenableFuture),40,42,"/**
 * Initializes a new ForwardingFluentFuture with the given delegate.
 * @param delegate the ListenableFuture to delegate operations to
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,catchingAsync,"com.google.common.util.concurrent.FluentFuture:catchingAsync(java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)",255,260,"/**
 * Handles exceptions asynchronously.
 * @param <X> type of exception to catch
 * @param exceptionType class of the exception to handle
 * @param fallback function to execute on exception
 * @param executor executor to run the fallback
 * @return FluentFuture with result from fallback or original future
 */","* Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code
   * Future} fails with the given {@code exceptionType}, from the result provided by the {@code
   * fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has failed, so if
   * the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback},
   * an exception is thrown, this exception is used as the result of the output {@code Future}.
   *
   * <p>Usage examples:
   *
   * {@snippet :
   * // Falling back to a zero counter in case an exception happens when processing the RPC to fetch
   * // counters.
   * ListenableFuture<Integer> faultTolerantFuture =
   *     fetchCounters().catchingAsync(
   *         FetchException.class, x -> immediateFuture(0), directExecutor());
   * }
   *
   * <p>The fallback can also choose to propagate the original exception when desired:
   *
   * {@snippet :
   * // Falling back to a zero counter only in case the exception was a
   * // TimeoutException.
   * ListenableFuture<Integer> faultTolerantFuture =
   *     fetchCounters().catchingAsync(
   *         FetchException.class,
   *         e -> {
   *           if (omitDataOnFetchFailure) {
   *             return immediateFuture(0);
   *           }
   *           throw e;
   *         },
   *         directExecutor());
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method. (Specifically,
   * {@code directExecutor} functions should avoid heavyweight operations inside {@code
   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for
   * completing the returned {@code Future}.)
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It
   * can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle}
   * and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link
   * #transform}.
   *
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against the input's exception. ""The input's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws a
   *     different kind of exception, that exception itself. To avoid hiding bugs and other
   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code
   *     Throwable.class} in particular.
   * @param fallback the {@link AsyncFunction} to be called if the input fails with the expected
   *     exception type. The function's argument is the input's exception. ""The input's exception""
   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if
   *     {@code get()} throws a different kind of exception, that exception itself.
   * @param executor the executor that runs {@code fallback} if the input fails",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,transformAsync,"com.google.common.util.concurrent.FluentFuture:transformAsync(com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)",336,339,"/**
* Transforms future result asynchronously.
* @param function async transformation function
* @param executor execution context
* @return new FluentFuture with transformed result
*/","* Returns a new {@code Future} whose result is asynchronously derived from the result of this
   * {@code Future}. If the input {@code Future} fails, the returned {@code Future} fails with the
   * same exception (and the function is not invoked).
   *
   * <p>More precisely, the returned {@code Future} takes its result from a {@code Future} produced
   * by applying the given {@code AsyncFunction} to the result of the original {@code Future}.
   * Example usage:
   *
   * {@snippet :
   * FluentFuture<RowKey> rowKeyFuture = FluentFuture.from(indexService.lookUp(query));
   * ListenableFuture<QueryResult> queryFuture =
   *     rowKeyFuture.transformAsync(dataService::readFuture, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method. (Specifically,
   * {@code directExecutor} functions should avoid heavyweight operations inside {@code
   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for
   * completing the returned {@code Future}.)
   *
   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the
   * input future and that of the future returned by the chain function. That is, if the returned
   * {@code Future} is cancelled, it will attempt to cancel the other two, and if either of the
   * other two is cancelled, the returned {@code Future} will receive a callback in which it will
   * attempt to cancel itself.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenCompose} and
   * {@link java.util.concurrent.CompletableFuture#thenComposeAsync}. It can also serve some of the
   * use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link
   * java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}.
   *
   * @param function A function to transform the result of this future to the result of the output
   *     future
   * @param executor Executor to run the function in.
   * @return A future that holds result of the function (if the input succeeded) or the original
   *     input's failure (if not)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,remainingCapacity,com.google.common.util.concurrent.ForwardingBlockingDeque:remainingCapacity(),59,62,"/**
 * Returns the remaining capacity of the delegate collection.
 * @return int representing the remaining capacity
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,putFirst,com.google.common.util.concurrent.ForwardingBlockingDeque:putFirst(java.lang.Object),64,67,"/**
 * Adds an element to the front of the queue.
 * @param e the element to add
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,putLast,com.google.common.util.concurrent.ForwardingBlockingDeque:putLast(java.lang.Object),69,72,"/**
 * Adds an element to the end of the queue.
 * @param e the element to add
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,offerFirst,"com.google.common.util.concurrent.ForwardingBlockingDeque:offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit)",74,77,"/**
 * Adds an element to the front of the deque with a timeout.
 * @param e the element to add
 * @param timeout the time to wait for space in the deque
 * @param unit the time unit of the timeout parameter
 * @return true if added, false if timed out or interrupted
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,offerLast,"com.google.common.util.concurrent.ForwardingBlockingDeque:offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)",79,82,"/**
* Adds an element to the end of the queue with a timeout.
* @param e element to add
* @param timeout maximum time to wait for space in the queue
* @param unit time unit for the timeout
* @return true if added within timeout, false otherwise
* @throws InterruptedException if interrupted while waiting
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,takeFirst,com.google.common.util.concurrent.ForwardingBlockingDeque:takeFirst(),84,87,"/**
 * Retrieves and removes the first element of this deque.
 * @return the head of this deque
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,takeLast,com.google.common.util.concurrent.ForwardingBlockingDeque:takeLast(),89,92,"/**
 * Retrieves and removes the last element.
 * May block until an element is available.
 * @return the last element of type E
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,pollFirst,"com.google.common.util.concurrent.ForwardingBlockingDeque:pollFirst(long,java.util.concurrent.TimeUnit)",94,97,"/**
* Retrieves and removes the first element, waiting up to a specified time.
* @param timeout maximum time to wait for an element
* @param unit time unit of the timeout
* @return the first element or null if no element is available within the timeout
* @throws InterruptedException if interrupted while waiting
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,pollLast,"com.google.common.util.concurrent.ForwardingBlockingDeque:pollLast(long,java.util.concurrent.TimeUnit)",99,102,"/**
 * Retrieves and removes the last element of this deque within a given time.
 * @param timeout maximum time to wait for an element
 * @param unit time unit of the timeout parameter
 * @return the last element or null if no element becomes available before the timeout expires
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,put,com.google.common.util.concurrent.ForwardingBlockingDeque:put(java.lang.Object),104,107,"/**
 * Adds an element to the collection.
 * @param e the element to add
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,offer,"com.google.common.util.concurrent.ForwardingBlockingDeque:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)",109,112,"/**
* Offers an element to the queue with a timeout.
* @param e the element to add
* @param timeout maximum time to wait for space in the queue
* @param unit time unit of the timeout
* @return true if the element was added, false if timed out
* @throws InterruptedException if interrupted while waiting
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,take,com.google.common.util.concurrent.ForwardingBlockingDeque:take(),114,117,"/**
 * Retrieves and removes an element from the queue.
 * Blocks if necessary until an element is available.
 * @return the head of this queue
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,poll,"com.google.common.util.concurrent.ForwardingBlockingDeque:poll(long,java.util.concurrent.TimeUnit)",119,122,"/**
* Retrieves and removes an element from the queue within a specified timeout.
* @param timeout maximum time to wait for an element
* @param unit time unit of the timeout parameter
* @return head of this queue, or null if no element is available within the timeout
* @throws InterruptedException if interrupted while waiting
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,drainTo,com.google.common.util.concurrent.ForwardingBlockingDeque:drainTo(java.util.Collection),124,127,"/**
 * Transfers all elements from this queue to the given collection.
 * @param c the collection to transfer elements into
 * @return the number of elements transferred
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,drainTo,"com.google.common.util.concurrent.ForwardingBlockingDeque:drainTo(java.util.Collection,int)",129,132,"/**
* Drains up to maxElements from this queue into provided collection.
* @param c target collection
* @param maxElements maximum elements to transfer
* @return number of elements transferred
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,delegate,com.google.common.collect.ForwardingDeque:delegate(),51,52,"/**
 * Provides the underlying deque implementation.
 * @return the Deque instance being used
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,drainTo,"com.google.common.util.concurrent.ForwardingBlockingQueue:drainTo(java.util.Collection,int)",51,55,"/**
* Transfers up to maxElements elements from this queue to the given collection.
* @param c target collection
* @param maxElements maximum number of elements to transfer
* @return number of elements actually transferred
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,drainTo,com.google.common.util.concurrent.ForwardingBlockingQueue:drainTo(java.util.Collection),57,61,"/**
* Transfers elements to the provided collection.
* @param c target collection to transfer elements to
* @return number of elements transferred
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,offer,"com.google.common.util.concurrent.ForwardingBlockingQueue:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)",63,67,"/**
 * Offers an element to the queue with a timeout.
 * @param e the element to add
 * @param timeout maximum time to wait for space in the queue
 * @param unit time unit of the timeout parameter
 * @return true if successful, else false if timed out
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,poll,"com.google.common.util.concurrent.ForwardingBlockingQueue:poll(long,java.util.concurrent.TimeUnit)",69,73,"/**
* Retrieves and removes an element from the queue with a timeout.
* @param timeout maximum time to wait for an element
* @param unit time unit of the timeout parameter
* @return the head of this queue or null if no element becomes available within the given timeout
* @throws InterruptedException if interrupted while waiting
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,put,com.google.common.util.concurrent.ForwardingBlockingQueue:put(java.lang.Object),75,78,"/**
 * Adds an element to the collection.
 * @param e element to add
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,remainingCapacity,com.google.common.util.concurrent.ForwardingBlockingQueue:remainingCapacity(),80,83,"/**
 * Returns the remaining capacity of the delegate collection.
 * @return int representing available space
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,take,com.google.common.util.concurrent.ForwardingBlockingQueue:take(),85,89,"/**
* Retrieves and removes an element from the queue.
* Blocks if necessary until an element becomes available.
* @return the head of the queue
* @throws InterruptedException if interrupted while waiting
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,delegate,com.google.common.util.concurrent.ForwardingListenableFuture:delegate(),39,40,"/**
 * Delegates task execution to an asynchronous operation.
 * @return ListenableFuture representing the result of the operation
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,submit,com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.lang.Runnable),50,53,"/**
 * Submits a runnable task for execution.
 * @param task the task to execute
 * @return a Future representing pending completion of the task
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,submit,"com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.lang.Runnable,java.lang.Object)",55,59,"/**
* Submits a Runnable task with a result.
* @param task the task to execute
* @param result the result to return upon completion
* @return ListenableFuture holding the result
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,recordOutputCancellation,com.google.common.util.concurrent.Futures$InCompletionOrderState:recordOutputCancellation(boolean),1009,1017,"/**
* Marks output as cancelled and records completion.
* @param interruptIfRunning true to interrupt running tasks
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,<init>,com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture:<init>(com.google.common.util.concurrent.ListenableFuture),800,802,"/**
 * Wraps a ListenableFuture to prevent cancellation propagation.
 * @param delegate original future to be wrapped
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,immediateFuture,com.google.common.util.concurrent.Futures:immediateFuture(java.lang.Object),133,142,"/**
* Returns a ListenableFuture that immediately returns the given value.
* @param <V> type of the future's result, which can be null
* @param value the result to be returned by the future
* @return a ListenableFuture with the specified value or NULL if value is null
*/","* Creates a {@code ListenableFuture} which has its value set immediately upon construction. The
   * getters just return the value. This {@code Future} can't be canceled or timed out and its
   * {@code isDone()} method always returns {@code true}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,immediateFailedFuture,com.google.common.util.concurrent.Futures:immediateFailedFuture(java.lang.Throwable),162,166,"/**
* Creates an immediately failed future.
* @param throwable the exception to associate with the failure
* @return a ListenableFuture that is already failed
*/","* Returns a {@code ListenableFuture} which has an exception set immediately upon construction.
   *
   * <p>The returned {@code Future} can't be cancelled, and its {@code isDone()} method always
   * returns {@code true}. Calling {@code get()} will immediately throw the provided {@code
   * Throwable} wrapped in an {@code ExecutionException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,immediateCancelledFuture,com.google.common.util.concurrent.Futures:immediateCancelledFuture(),174,181,"/**
 * Returns an immediately cancelled ListenableFuture.
 * @param <V> the value type of the future
 * @return a cancelled ListenableFuture instance
 */","* Creates a {@code ListenableFuture} which is cancelled immediately upon construction, so that
   * {@code isCancelled()} always returns {@code true}.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getBestValidator,com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder:getBestValidator(),190,201,"/**
* Retrieves the best validator for checked types.
* @return GetCheckedTypeValidator instance or default if class not found
*/","* Returns the ClassValue-using validator, or falls back to the ""weak Set"" implementation if
     * unable to do so.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,newWithCause,"com.google.common.util.concurrent.FuturesGetChecked:newWithCause(java.lang.Class,java.lang.Throwable)",231,249,"/**
* Creates a new exception with the given cause.
* @param exceptionClass class of the exception to create
* @param cause underlying Throwable causing the exception
* @return instance of X initialized with the cause
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ImmediateFuture.java,get,"com.google.common.util.concurrent.ImmediateFuture:get(long,java.util.concurrent.TimeUnit)",74,79,"/**
* Retrieves value with timeout.
* @param timeout time to wait before throwing exception
* @param unit time unit for timeout
* @return value or throws ExecutionException if not ready in time
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/InterruptibleTask.java,toString,com.google.common.util.concurrent.InterruptibleTask$Blocker:toString(),245,248,"/**
 * Returns string representation of the task.
 * @return Task's string representation
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/InterruptibleTask.java,<init>,com.google.common.util.concurrent.InterruptibleTask$Blocker:<init>(com.google.common.util.concurrent.InterruptibleTask),229,231,"/**
* Constructs a new Blocker.
* @param task the InterruptibleTask to be associated with this Blocker
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,afterDone,com.google.common.util.concurrent.TrustedListenableFutureTask:afterDone(),89,101,"/**
* Handles cleanup after task completion.
* @param localTask the task to interrupt if interrupted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,enqueueHelper,"com.google.common.util.concurrent.ListenerCallQueue:enqueueHelper(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object)",103,111,"/**
 * Adds an event to all listener queues.
 * @param event the event to enqueue
 * @param label associated with the event
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,dispatch,com.google.common.util.concurrent.ListenerCallQueue:dispatch(),118,123,"/**
* Notifies all registered listeners.
* Iterates through listeners using index to prevent concurrent modification issues.
*/","* Dispatches all events enqueued prior to this call, serially and in order, for every listener.
   *
   * <p>Note: this method is idempotent and safe to call from any thread",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,<init>,com.google.common.util.concurrent.Monitor:<init>(),348,350,"/**
 * Constructs a new Monitor with default settings.
 * @param active flag indicating whether monitoring is active
 */","* Creates a monitor with a non-fair (but fast) ordering policy. Equivalent to {@code
   * Monitor(false)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterInterruptibly,com.google.common.util.concurrent.Monitor:enterInterruptibly(java.time.Duration),441,443,"/**
* Attempts to acquire semaphore interruptibly within specified duration.
* @param time maximum time to wait
* @return true if acquired, false if timed out
* @throws InterruptedException if interrupted while waiting
*/","* Enters this monitor. Blocks at most the given time, and may be interrupted.
   *
   * @return whether the monitor was entered
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterIfInterruptibly,"com.google.common.util.concurrent.Monitor:enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",759,761,"/**
* Attempts to acquire a permit with interruption support.
* @param guard the condition to wait for
* @param time maximum time to wait
* @return true if acquired, false if timed out
* @throws InterruptedException if interrupted while waiting
*/","* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the
   * lock, but does not wait for the guard to be satisfied, and may be interrupted.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,hasWaiters,com.google.common.util.concurrent.Monitor:hasWaiters(com.google.common.util.concurrent.Monitor$Guard),1006,1008,"/**
 * Checks if there are any waiters in the queue.
 * @param guard the Guard object to check
 * @return true if there are waiters, false otherwise
 */","* Queries whether any threads are waiting for the given guard to become satisfied. Note that
   * because timeouts and interrupts may occur at any time, a {@code true} return does not guarantee
   * that the guard becoming satisfied in the future will awaken any threads. This method is
   * designed primarily for use in monitoring of the system state.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,isSatisfied,com.google.common.util.concurrent.Monitor:isSatisfied(com.google.common.util.concurrent.Monitor$Guard),1122,1131,"/**
 * Checks if the guard condition is satisfied.
 * @param guard the guard object to check
 * @return true if satisfied, false otherwise
 */","* Exactly like guard.isSatisfied(), but in addition signals all waiting threads in the (hopefully
   * unlikely) event that isSatisfied() throws.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask:<init>(java.lang.Runnable),621,623,"/**
 * Initializes a new task with a delegate runnable.
 * @param delegate the Runnable to be executed
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,shutdownAndAwaitTermination,"com.google.common.util.concurrent.MoreExecutors:shutdownAndAwaitTermination(java.util.concurrent.ExecutorService,java.time.Duration)",960,965,"/**
* Shuts down ExecutorService and waits for termination within a timeout.
* @param service the ExecutorService to shut down
* @param timeout maximum time to wait for termination
* @return true if shutdown was successful, false otherwise
*/","* Shuts down the given executor service gradually, first disabling new submissions and later, if
   * necessary, cancelling remaining tasks.
   *
   * <p>The method takes the following steps:
   *
   * <ol>
   *   <li>calls {@link ExecutorService#shutdown()}, disabling acceptance of new submitted tasks.
   *   <li>awaits executor service termination for half of the specified timeout.
   *   <li>if the timeout expires, it calls {@link ExecutorService#shutdownNow()}, cancelling
   *       pending tasks and interrupting running tasks.
   *   <li>awaits executor service termination for the other half of the specified timeout.
   * </ol>
   *
   * <p>If, at any step of the process, the calling thread is interrupted, the method calls {@link
   * ExecutorService#shutdownNow()} and returns.
   *
   * <p>For a version of this method that waits <i>indefinitely</i>, use {@link
   * ExecutorService#close}.
   *
   * @param service the {@code ExecutorService} to shut down
   * @param timeout the maximum time to wait for the {@code ExecutorService} to terminate
   * @return {@code true} if the {@code ExecutorService} was terminated successfully, {@code false}
   *     if the call timed out or was interrupted
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,sleepMicrosUninterruptibly,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:sleepMicrosUninterruptibly(long),472,472,"/**
 * Sleeps for a specified number of microseconds uninterruptibly.
 * @param micros number of microseconds to sleep
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,sleepUninterruptibly,com.google.common.util.concurrent.Uninterruptibles:sleepUninterruptibly(java.time.Duration),386,390,"/**
* Sleeps for the specified duration uninterruptibly.
* @param sleepFor duration to sleep
*/","* Invokes {@code unit.}{@link TimeUnit#sleep(long) sleep(sleepFor)} uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)",134,139,"/**
* Creates a rate limiter with specified permits per second.
* @param permitsPerSecond the number of permits allowed per second
* @param stopwatch the stopwatch to measure time intervals
* @return a configured RateLimiter instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,long,java.util.concurrent.TimeUnit,double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)",200,210,"/**
* Creates a rate limiter with smooth warming up.
* @param permitsPerSecond number of permits issued per second
* @param warmupPeriod duration of the warm-up period
* @param unit time unit for the warm-up period
* @param coldFactor factor affecting the initial rate
* @param stopwatch for controlling sleep behavior
* @return configured RateLimiter instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,setRate,com.google.common.util.concurrent.RateLimiter:setRate(double),256,261,"/**
 * Sets the rate of permits per second.
 * @param permitsPerSecond new rate, must be positive
 */","* Updates the stable rate of this {@code RateLimiter}, that is, the {@code permitsPerSecond}
   * argument provided in the factory method that constructed the {@code RateLimiter}. Currently
   * throttled threads will <b>not</b> be awakened as a result of this invocation, thus they do not
   * observe the new rate; only subsequent requests will.
   *
   * <p>Note though that, since each request repays (by waiting, if necessary) the cost of the
   * <i>previous</i> request, this means that the very next request after an invocation to {@code
   * setRate} will not be affected by the new rate; it will pay the cost of the previous request,
   * which is in terms of the previous rate.
   *
   * <p>The behavior of the {@code RateLimiter} is not modified in any other way, e.g. if the {@code
   * RateLimiter} was configured with a warmup period of 20 seconds, it still has a warmup period of
   * 20 seconds after this method invocation.
   *
   * @param permitsPerSecond the new stable rate of this {@code RateLimiter}
   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,getRate,com.google.common.util.concurrent.RateLimiter:getRate(),271,275,"/**
* Retrieves the rate value.
* @return the current rate as a double
*/","* Returns the stable rate (as {@code permits per seconds}) with which this {@code RateLimiter} is
   * configured with. The initial value of this is the same as the {@code permitsPerSecond} argument
   * passed in the factory method that produced this {@code RateLimiter}, and it is only updated
   * after invocations to {@linkplain #setRate}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SequentialExecutor.java,run,com.google.common.util.concurrent.SequentialExecutor$QueueWorker:run(),180,193,"/**
* Executes tasks from the queue.
* Handles errors by marking worker as idle and rethrowing the error.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SettableFuture.java,create,com.google.common.util.concurrent.SettableFuture:create(),41,43,"/**
 * Creates and returns a new SettableFuture instance.
 * @param <V> the type of value to be set in the future
 * @return a new SettableFuture object
 */",* Creates a new {@code SettableFuture} that can be completed or cancelled by a later method call.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,getUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:getUninterruptibly(java.util.concurrent.Future,java.time.Duration)",277,284,"/**
* Retrieves result from Future without interruption.
* @param future task to wait for completion
* @param timeout maximum time to wait
* @return result of the Future
* @throws ExecutionException if computation threw an exception
* @throws TimeoutException if timed out
*/","* Invokes {@code future.}{@link Future#get(long, TimeUnit) get(timeout, unit)} uninterruptibly.
   *
   * <p>Similar methods:
   *
   * <ul>
   *   <li>To retrieve a result from a {@code Future} that is already done, use {@link
   *       Futures#getDone Futures.getDone}.
   *   <li>To treat {@link InterruptedException} uniformly with other exceptions, use {@link
   *       Futures#getChecked(Future, Class, long, TimeUnit) Futures.getChecked}.
   *   <li>To get uninterruptibility and remove checked exceptions, use {@link
   *       Futures#getUnchecked}.
   * </ul>
   *
   * @throws ExecutionException if the computation threw an exception
   * @throws CancellationException if the computation was cancelled
   * @throws TimeoutException if the wait timed out
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,findInterruptibleMethods,com.google.common.util.concurrent.SimpleTimeLimiter:findInterruptibleMethods(java.lang.Class),241,249,"/**
 * Finds methods in an interface that declare InterruptedException.
 * @param interfaceType the interface to search
 * @return a set of interruptible methods
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,storedPermitsToWaitTime,"com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:storedPermitsToWaitTime(double,double)",244,261,"/**
* Calculates wait time for permits based on stored and threshold permits.
* @param storedPermits current number of stored permits
* @param permitsToTake number of permits requested
* @return wait time in microseconds
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,doSetRate,"com.google.common.util.concurrent.SmoothRateLimiter:doSetRate(double,long)",336,342,"/**
* Sets the rate of permits per second.
* @param permitsPerSecond new rate of permits
* @param nowMicros current time in microseconds
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,reserveEarliestAvailable,"com.google.common.util.concurrent.SmoothRateLimiter:reserveEarliestAvailable(int,long)",356,369,"/**
* Reserves the earliest available time slot for permits.
* @param requiredPermits number of permits to reserve
* @param nowMicros current time in microseconds
* @return timestamp of when reservation is made
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,get,com.google.common.util.concurrent.Striped$PowerOfTwoStriped:get(java.lang.Object),361,364,"/**
 * Retrieves value by key.
 * @param key unique key for lookup
 * @return value associated with key or null if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,newCondition,com.google.common.util.concurrent.Striped$WeakSafeLock:newCondition(),322,325,"/**
 * Creates a new condition.
 * @return Condition object wrapped with WeakSafeCondition
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,readLock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:readLock(),294,297,"/**
 * Returns a read lock with weak safety.
 * @return Lock object with weak safety
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,writeLock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:writeLock(),299,302,"/**
 * Returns a weak-safe write lock.
 * @return WriteLock object wrapped in WeakSafeLock
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,lazyWeakReadWriteLock,com.google.common.util.concurrent.Striped:lazyWeakReadWriteLock(int),278,280,"/**
* Creates a striped read-write lock with weak references.
* @param stripes number of stripes
* @return Striped<ReadWriteLock> instance
*/","* Creates a {@code Striped<ReadWriteLock>} with lazily initialized, weakly referenced read-write
   * locks. Every lock is reentrant.
   *
   * @param stripes the minimum number of stripes (locks) required
   * @return a new {@code Striped<ReadWriteLock>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,lock,com.google.common.util.concurrent.Striped:lock(int),207,209,"/**
 * Creates a striped lock with specified number of stripes.
 * @param stripes number of lock stripes
 * @return Striped<Lock> instance
 */","* Creates a {@code Striped<Lock>} with eagerly initialized, strongly referenced locks. Every lock
   * is reentrant.
   *
   * @param stripes the minimum number of stripes (locks) required
   * @return a new {@code Striped<Lock>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,semaphore,"com.google.common.util.concurrent.Striped:semaphore(int,int)",244,246,"/**
* Creates a striped semaphore with specified number of stripes and permits.
* @param stripes number of stripes for concurrency control
* @param permits number of permits per semaphore
* @return Striped<Semaphore> instance
*/","* Creates a {@code Striped<Semaphore>} with eagerly initialized, strongly referenced semaphores,
   * with the specified number of permits.
   *
   * @param stripes the minimum number of stripes (semaphores) required
   * @param permits the number of permits in each semaphore
   * @return a new {@code Striped<Semaphore>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,readWriteLock,com.google.common.util.concurrent.Striped:readWriteLock(int),267,269,"/**
* Creates a striped ReadWriteLock.
* @param stripes number of lock stripes
* @return Striped instance with specified number of locks
*/","* Creates a {@code Striped<ReadWriteLock>} with eagerly initialized, strongly referenced
   * read-write locks. Every lock is reentrant.
   *
   * @param stripes the minimum number of stripes (locks) required
   * @return a new {@code Striped<ReadWriteLock>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,build,com.google.common.util.concurrent.ThreadFactoryBuilder:build(),158,160,"/**
 * Builds and returns a new ThreadFactory instance.
 * @return configured ThreadFactory object
 */","* Returns a new thread factory using the options supplied during the building process. After
   * building, it is still possible to change the options used to build the ThreadFactory and/or
   * build again. State is not shared amongst built instances.
   *
   * @return the fully constructed {@link ThreadFactory}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeoutFuture.java,<init>,com.google.common.util.concurrent.TimeoutFuture$Fire:<init>(com.google.common.util.concurrent.TimeoutFuture),90,92,"/**
 * Sets the timeout future reference.
 * @param timeoutFuture the TimeoutFuture object to be set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,create,com.google.common.util.concurrent.TrustedListenableFutureTask:create(com.google.common.util.concurrent.AsyncCallable),36,39,"/**
* Creates a TrustedListenableFutureTask from an AsyncCallable.
* @param callable the asynchronous callable task to be executed
* @return a TrustedListenableFutureTask instance wrapping the callable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,create,com.google.common.util.concurrent.TrustedListenableFutureTask:create(java.util.concurrent.Callable),41,43,"/**
* Creates a TrustedListenableFutureTask from a Callable.
* @param callable task to be executed asynchronously
* @return TrustedListenableFutureTask instance wrapping the callable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,create,"com.google.common.util.concurrent.TrustedListenableFutureTask:create(java.lang.Runnable,java.lang.Object)",54,57,"/**
* Creates a TrustedListenableFutureTask from a Runnable and result.
* @param runnable the task to execute
* @param result the result value of the future
* @return a TrustedListenableFutureTask instance
*/","* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code
   * Runnable}, and arrange that {@code get} will return the given result on successful completion.
   *
   * @param runnable the runnable task
   * @param result the result to return on successful completion. If you don't need a particular
   *     result, consider using constructions of the form: {@code ListenableFuture<?> f =
   *     ListenableFutureTask.create(runnable, null)}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.CountDownLatch,java.time.Duration)",81,85,"/**
* Waits for CountDownLatch to count down uninterruptibly.
* @param latch the CountDownLatch to wait on
* @param timeout maximum time to wait
* @return true if countdown completes within timeout, false otherwise
*/","* Invokes {@code latch.}{@link CountDownLatch#await(long, TimeUnit) await(timeout, unit)}
   * uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.locks.Condition,java.time.Duration)",122,126,"/**
 * Awaits a condition for a specified duration without interruption.
 * @param condition the condition to await
 * @param timeout the maximum time to wait
 * @return true if the condition was met, false otherwise
 */","* Invokes {@code condition.}{@link Condition#await(long, TimeUnit) await(timeout, unit)}
   * uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryAcquireUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,long,java.util.concurrent.TimeUnit)",437,443,"/**
* Attempts to acquire a semaphore permit uninterruptibly.
* @param semaphore the semaphore to acquire
* @param timeout maximum time to wait for a permit
* @param unit time unit of the timeout
* @return true if acquired, false if timed out
*/","* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1,
   * timeout, unit)} uninterruptibly.
   *
   * @since 18.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryAcquireUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,java.time.Duration)",451,457,"/**
* Attempts to acquire specified permits from semaphore uninterruptibly within a timeout.
* @param semaphore the semaphore to acquire permits from
* @param permits number of permits to acquire
* @param timeout maximum time to wait for acquisition
* @return true if permits acquired, false otherwise
*/","* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(permits,
   * timeout, unit)} uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryLockUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryLockUninterruptibly(java.util.concurrent.locks.Lock,java.time.Duration)",497,501,"/**
* Attempts to acquire a lock uninterruptibly within a specified timeout.
* @param lock the lock to acquire
* @param timeout maximum time to wait for the lock
* @return true if the lock was acquired, false otherwise
*/","* Invokes {@code lock.}{@link Lock#tryLock(long, TimeUnit) tryLock(timeout, unit)}
   * uninterruptibly.
   *
   * @since 30.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitTerminationUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService,java.time.Duration)",552,557,"/**
* Awaits termination of the given executor within a specified timeout.
* @param executor the ExecutorService to wait for
* @param timeout maximum time to wait
* @return true if the executor terminated, false otherwise
*/","* Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit)
   * awaitTermination(long, TimeUnit)} uninterruptibly.
   *
   * @since 30.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,execute,com.google.common.util.concurrent.WrappingExecutorService:execute(java.lang.Runnable),93,96,"/**
 * Executes a wrapped task using a delegate.
 * @param command the Runnable task to be executed
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,submit,com.google.common.util.concurrent.WrappingExecutorService:submit(java.lang.Runnable),103,106,"/**
 * Submits a Runnable task wrapped by another task.
 * @param task the Runnable to be executed
 * @return a Future representing pending completion of the task
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,submit,"com.google.common.util.concurrent.WrappingExecutorService:submit(java.lang.Runnable,java.lang.Object)",108,112,"/**
* Submits a task with a result.
* @param task the task to execute
* @param result the result to return after execution
* @return Future representing pending completion of the task
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/thirdparty/publicsuffix/PublicSuffixType.java,fromCode,com.google.thirdparty.publicsuffix.PublicSuffixType:fromCode(char),57,64,"/**
 * Retrieves PublicSuffixType by its code.
 * @param code character representing the suffix type
 * @return matching PublicSuffixType or throws IllegalArgumentException if not found
 */",Returns a PublicSuffixType of the right type according to the given code,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,of,com.google.common.base.Optional:of(java.lang.Object),108,110,"/**
 * Wraps a non-null value in an Optional.
 * @param reference value to wrap, must not be null
 * @return Optional containing the reference
 */","* Returns an {@code Optional} instance containing the given non-null reference. To have {@code
   * null} treated as {@link #absent}, use {@link #fromNullable} instead.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> no differences.
   *
   * @throws NullPointerException if {@code reference} is null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,transform,com.google.common.base.Present:transform(com.google.common.base.Function),73,79,"/**
* Transforms the contained value using a given function.
* @param function transformation function to apply
* @return Optional containing transformed value or empty if original is absent
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createUnstarted,com.google.common.base.Stopwatch:createUnstarted(com.google.common.base.Ticker),119,121,"/**
 * Creates an unstarted Stopwatch with a specified Ticker.
 * @param ticker the time source for the stopwatch
 * @return a new, unstarted Stopwatch instance
 */","* Creates (but does not start) a new stopwatch, using the specified time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,indexOf,"com.google.common.collect.Iterables:indexOf(java.lang.Iterable,com.google.common.base.Predicate)",713,716,"/**
 * Finds index of first element matching predicate.
 * @param iterable collection to search
 * @param predicate condition to match elements
 * @return index of matching element or -1 if none found
 */","* Returns the index in {@code iterable} of the first element that satisfies the provided {@code
   * predicate}, or {@code -1} if the Iterable has no such elements.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code
   * predicate.apply(Iterables.get(iterable, i))} returns {@code true}, or {@code -1} if there is no
   * such index.
   *
   * @since 2.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,any,"com.google.common.collect.Iterators:any(java.util.Iterator,com.google.common.base.Predicate)",698,701,"/**
 * Checks if any element in the iterator matches the given predicate.
 * @param iterator the iterator to check
 * @param predicate the condition to test elements against
 * @return true if at least one element matches the predicate, false otherwise
 */","* Returns {@code true} if one or more elements returned by {@code iterator} satisfy the given
   * predicate.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:treeSetValues(),373,376,"/**
* Creates a builder with natural ordering for values.
* @return SortedSetMultimapBuilder configured with natural ordering
*/",Uses a naturally-ordered {@link TreeSet} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,adjacentNodes,com.google.common.graph.AbstractDirectedNetworkConnections:adjacentNodes(),59,62,"/**
 * Returns all adjacent nodes.
 * Combines predecessors and successors into one set.
 * @return Set of N representing adjacent nodes
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,toImmutableTable,"com.google.common.collect.ImmutableTable:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",87,95,"/**
 * Collects elements into an ImmutableTable.
 * @param rowFunction extracts row key from element
 * @param columnFunction extracts column key from element
 * @param valueFunction extracts value from element
 * @param mergeFunction merges values if duplicate keys occur
 * @return ImmutableTable with collected data
 */","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each
   * input element is mapped to one cell in the returned table, with the rows, columns, and values
   * generated by applying the specified functions. If multiple inputs are mapped to the same row
   * and column pair, they will be combined with the specified merging function in encounter order.
   *
   * <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time
   * if the row, column, value, or merging functions return null on any input.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Any:<init>(),1037,1039,"/**
* Constructs a CharMatcher that matches any character.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Ascii:<init>(),1307,1309,"/**
 * Initializes an ASCII character matcher.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$BitSetMatcher:<init>(java.util.BitSet,java.lang.String)",1010,1017,"/**
 * Initializes a BitSetMatcher with a given BitSet and description.
 * @param table BitSet representing the match criteria
 * @param description descriptive name for the matcher
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$JavaIsoControl:<init>(),1471,1473,"/**
 * Private constructor to prevent instantiation.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$None:<init>(),1134,1136,"/**
 * Constructs a CharMatcher that matches no characters.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Whitespace:<init>(),1250,1252,"/**
 * Initializes a CharMatcher for whitespace characters.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/SmallCharMatcher.java,<init>,"com.google.common.base.SmallCharMatcher:<init>(char[],long,boolean,java.lang.String)",35,40,"/**
* Initializes a SmallCharMatcher with specified parameters.
* @param table character array for matching
* @param filter long value used as a filter
* @param containsZero boolean indicating if zero is included
* @param description string describing the matcher
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,equivalentTo,com.google.common.base.Equivalence:equivalentTo(java.lang.Object),308,310,"/**
 * Creates a predicate to check equivalence.
 * @param target object to compare against
 * @return Predicate that checks if input is equivalent to target
 */","* Returns a predicate that evaluates to true if and only if the input is equivalent to {@code
   * target} according to this equivalence relation.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,forMap,"com.google.common.base.Functions:forMap(java.util.Map,java.lang.Object)",147,150,"/**
* Creates a function that returns values from a map with a default.
* @param map the input map
* @param defaultValue value to return if key is not found
* @return Function that maps keys to values or default
*/","* Returns a function which performs a map lookup with a default value. The function created by
   * this method returns {@code defaultValue} for all inputs that do not belong to the map's key
   * set. See also {@link #forMap(Map)}, which throws an exception in this case.
   *
   * <p>Prefer to write the lambda expression {@code k -> map.getOrDefault(k, defaultValue)}
   * instead. Note that it is not serializable unless you explicitly make it {@link Serializable},
   * typically by writing {@code (Function<K, V> & Serializable) k -> map.getOrDefault(k,
   * defaultValue)}.
   *
   * @param map source map that determines the function behavior
   * @param defaultValue the value to return for inputs that aren't map keys
   * @return function that returns {@code map.get(a)} when {@code a} is a key, or {@code
   *     defaultValue} otherwise",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,compose,"com.google.common.base.Functions:compose(com.google.common.base.Function,com.google.common.base.Function)",249,252,"/**
 * Composes two functions into one.
 * @param g function from B to C
 * @param f function from A to B
 * @return composed function from A to C
 */","* Returns the composition of two functions. For {@code f: A->B} and {@code g: B->C}, composition
   * is defined as the function h such that {@code h(a) == g(f(a))} for each {@code a}.
   *
   * <p><b>JRE users and Android users who opt in to library desugaring:</b> use {@code
   * g.compose(f)} or (probably clearer) {@code f.andThen(g)} instead. Note that it is not
   * serializable.
   *
   * @param g the second function to apply
   * @param f the first function to apply
   * @return the composition of {@code f} and {@code g}
   * @see <a href=""//en.wikipedia.org/wiki/Function_composition"">function composition</a>",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,forMap,com.google.common.base.Functions:forMap(java.util.Map),127,130,"/**
* Returns a function that retrieves values from the given map.
* @param map source map to query
* @return Function that maps keys to values in the map
*/","* Returns a function which performs a map lookup. The returned function throws an {@link
   * IllegalArgumentException} if given a key that does not exist in the map. See also {@link
   * #forMap(Map, Object)}, which returns a default value in this case.
   *
   * <p>Note: if {@code map} is a {@link com.google.common.collect.BiMap BiMap} (or can be one), you
   * can use {@link com.google.common.collect.Maps#asConverter Maps.asConverter} instead to get a
   * function that also supports reverse conversion.
   *
   * <p>If you are okay with {@code null} being returned for an unrecognized key (instead of an
   * exception being thrown), you can use the method reference {@code map::get} instead. Note that
   * it is not serializable unless you explicitly make it {@link Serializable}, typically by writing
   * {@code (Function<K, V> & Serializable) map::get}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/JdkPattern.java,matcher,com.google.common.base.JdkPattern:matcher(java.lang.CharSequence),32,35,"/**
 * Returns a matcher for the given input sequence.
 * @param t input character sequence to match against the pattern
 * @return CommonMatcher instance wrapping the JDK Matcher
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,compile,com.google.common.base.Platform$JdkPatternCompiler:compile(java.lang.String),106,109,"/**
 * Compiles a string pattern into a regex pattern.
 * @param pattern regular expression as a string
 * @return CommonPattern object wrapping the compiled pattern
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(java.util.regex.Pattern),207,210,"/**
 * Creates a splitter using a regex pattern.
 * @param separatorPattern regex pattern for splitting strings
 * @return Splitter instance configured with the given pattern
 */","* Returns a splitter that considers any subsequence matching {@code pattern} to be a separator.
   * For example, {@code Splitter.on(Pattern.compile(""\r?\n"")).split(entireFile)} splits a string
   * into lines whether it uses DOS-style or UNIX-style line terminators.
   *
   * @param separatorPattern the pattern that determines whether a subsequence is a separator. This
   *     pattern may not match the empty string.
   * @return a splitter, with default settings, that uses this pattern
   * @throws IllegalArgumentException if {@code separatorPattern} matches the empty string",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,on,com.google.common.base.Joiner:on(java.lang.String),69,71,"/**
 * Creates a Joiner instance with the specified separator.
 * @param separator string used to separate joined elements
 * @return Joiner object configured with the given separator
 */",Returns a joiner which automatically places {@code separator} between consecutive elements.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,on,com.google.common.base.Joiner:on(char),74,76,"/**
 * Creates a Joiner instance with a specified separator.
 * @param separator character used to separate elements
 * @return Joiner object configured with the given separator
 */",Returns a joiner which automatically places {@code separator} between consecutive elements.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,useForNull,com.google.common.base.Joiner$MapJoiner:useForNull(java.lang.String),504,506,"/**
* Sets text to use for null values.
* @param nullText replacement string for nulls
* @return new MapJoiner instance with updated settings
*/","* Returns a map joiner with the same behavior as this one, except automatically substituting
     * {@code nullText} for any provided null keys or values.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CommonPattern.java,compile,com.google.common.base.CommonPattern:compile(java.lang.String),36,38,"/**
 * Compiles a pattern into a CommonPattern.
 * @param pattern the regex pattern to compile
 * @return a CommonPattern object representing the compiled pattern
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,onPattern,com.google.common.base.Splitter:onPattern(java.lang.String),248,251,"/**
* Creates a splitter using regex pattern.
* @param separatorPattern regex defining separators
* @return Splitter instance configured with the pattern
*/","* Returns a splitter that considers any subsequence matching a given pattern (regular expression)
   * to be a separator. For example, {@code Splitter.onPattern(""\r?\n"").split(entireFile)} splits a
   * string into lines whether it uses DOS-style or UNIX-style line terminators. This is equivalent
   * to {@code Splitter.on(Pattern.compile(pattern))}.
   *
   * @param separatorPattern the pattern that determines whether a subsequence is a separator. This
   *     pattern may not match the empty string.
   * @return a splitter, with default settings, that uses this pattern
   * @throws IllegalArgumentException if {@code separatorPattern} matches the empty string or is a
   *     malformed expression",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$ContainsPatternFromStringPredicate:<init>(java.lang.String),782,784,"/**
 * Creates a predicate to check if a string contains a pattern.
 * @param string the pattern to search for
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,contains,com.google.common.base.Predicates:contains(java.util.regex.Pattern),303,306,"/**
 * Creates a predicate to check if a CharSequence contains a regex pattern.
 * @param pattern the regex pattern to search for
 * @return Predicate that returns true if input contains the pattern, false otherwise
 */","* Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested
   * contains any match for the given regular expression pattern. The test used is equivalent to
   * {@code pattern.matcher(arg).find()}
   *
   * @since 3.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,not,com.google.common.base.Predicates:not(com.google.common.base.Predicate),95,97,"/**
 * Returns a predicate that negates the result of the given predicate.
 * @param predicate the original predicate to negate
 * @return a predicate that returns true if the original predicate returns false, and vice versa
 */","* Returns a predicate that evaluates to {@code true} if the given predicate evaluates to {@code
   * false}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code predicate.negate()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,and,com.google.common.base.Predicates:and(java.lang.Iterable),108,111,"/**
* Combines multiple predicates with logical AND.
* @param components iterable of predicates to combine
* @return a predicate that evaluates to true if all components are true
*/","* Returns a predicate that evaluates to {@code true} if each of its components evaluates to
   * {@code true}. The components are evaluated in order, and evaluation will be ""short-circuited""
   * as soon as a false predicate is found. It defensively copies the iterable passed in, so future
   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the
   * returned predicate will always evaluate to {@code true}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.and(second).and(third).and(...)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,or,com.google.common.base.Predicates:or(java.lang.Iterable),148,151,"/**
 * Combines multiple predicates with logical OR.
 * @param components iterable of predicate components
 * @return a predicate that returns true if any component predicate is true
 */","* Returns a predicate that evaluates to {@code true} if any one of its components evaluates to
   * {@code true}. The components are evaluated in order, and evaluation will be ""short-circuited""
   * as soon as a true predicate is found. It defensively copies the iterable passed in, so future
   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the
   * returned predicate will always evaluate to {@code false}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.or(second).or(third).or(...)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,split,com.google.common.base.Splitter$MapSplitter:split(java.lang.CharSequence),498,514,"/**
 * Splits a sequence into a map of key-value pairs.
 * @param sequence input string to split
 * @return unmodifiable map with keys and values
 */","* Splits {@code sequence} into substrings, splits each substring into an entry, and returns an
     * unmodifiable map with each of the entries. For example, {@code
     * Splitter.on(';').trimResults().withKeyValueSeparator(""=>"").split(""a=>b ; c=>b"")} will return
     * a mapping from {@code ""a""} to {@code ""b""} and {@code ""c""} to {@code ""b""}.
     *
     * <p>The returned map preserves the order of the entries from {@code sequence}.
     *
     * @throws IllegalArgumentException if the specified sequence does not split into valid map
     *     entries, or if there are duplicate keys",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,splitToStream,com.google.common.base.Splitter:splitToStream(java.lang.CharSequence),421,424,"/**
* Splits CharSequence into a stream of strings.
* @param sequence input to be split
* @return Stream of substrings
*/","* Splits {@code sequence} into string components and makes them available through an {@link
   * Stream}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use
   * {@link #splitToList(CharSequence)}.
   *
   * @param sequence the sequence of characters to split
   * @return a stream over the segments split from the parameter
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,memoize,com.google.common.base.Suppliers:memoize(com.google.common.base.Supplier),113,121,"/**
 * Memoizes a supplier to cache its result.
 * @param delegate the original supplier
 * @return memoized supplier, same type as input
 */","* Returns a supplier which caches the instance retrieved during the first call to {@code get()}
   * and returns that value on subsequent calls to {@code get()}. See: <a
   * href=""http://en.wikipedia.org/wiki/Memoization"">memoization</a>
   *
   * <p>The returned supplier is thread-safe. The delegate's {@code get()} method will be invoked at
   * most once unless the underlying {@code get()} throws an exception. The supplier's serialized
   * form does not contain the cached value, which will be recalculated when {@code get()} is called
   * on the deserialized instance.
   *
   * <p>When the underlying delegate throws an exception then this memoizing supplier will keep
   * delegating calls until it returns valid data.
   *
   * <p>If {@code delegate} is an instance created by an earlier call to {@code memoize}, it is
   * returned directly.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,compose,"com.google.common.base.Suppliers:compose(com.google.common.base.Function,com.google.common.base.Supplier)",53,56,"/**
* Composes a Supplier by applying a Function to the result of another Supplier.
* @param <F> type of input to the Function
* @param <T> type of output from the Function and Supplier
* @param function to apply to the value from supplier
* @param supplier provides the input value for the function
* @return Supplier that applies function to the result of supplier
*/","* Returns a new supplier which is the composition of the provided function and supplier. In other
   * words, the new supplier's value will be computed by retrieving the value from {@code supplier},
   * and then applying {@code function} to that value. Note that the resulting supplier will not
   * call {@code supplier} or invoke {@code function} until it is called.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,synchronizedSupplier,com.google.common.base.Suppliers:synchronizedSupplier(com.google.common.base.Supplier),399,403,"/**
* Wraps a supplier to ensure thread-safe execution.
* @param delegate original supplier function
* @return synchronized Supplier instance
*/","* Returns a supplier whose {@code get()} method synchronizes on {@code delegate} before calling
   * it, making it thread-safe.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfInstanceOf,"com.google.common.base.Throwables:propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)",100,108,"/**
 * Propagates the exception if it is an instance of the specified type.
 * @param throwable the throwable to check
 * @param declaredType the class of the exception to propagate
 * @throws X if the throwable is an instance of the declared type
 */","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@code
   * declaredType}. Example usage:
   *
   * <pre>
   * try {
   *   someMethodThatCouldThrowAnything();
   * } catch (IKnowWhatToDoWithThisException e) {
   *   handle(e);
   * } catch (Throwable t) {
   *   Throwables.propagateIfInstanceOf(t, IOException.class);
   *   Throwables.propagateIfInstanceOf(t, SQLException.class);
   *   throw Throwables.propagate(t);
   * }
   * </pre>
   *
   * @deprecated Use {@link #throwIfInstanceOf}, which has the same behavior but rejects {@code
   *     null}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfPossible,com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable),146,153,"/**
 * Throws the given exception if it's unchecked; otherwise, suppresses it.
 * @param throwable the exception to handle
 */","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
   * RuntimeException} or {@link Error}.
   *
   * @deprecated Use {@link #throwIfUnchecked}, which has the same behavior but rejects {@code
   *     null}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagate,com.google.common.base.Throwables:propagate(java.lang.Throwable),228,235,"/**
* Throws the given Throwable as a RuntimeException.
* @param throwable the Throwable to throw
*/","* Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or {@link
   * Error}, or else as a last resort, wraps it in a {@code RuntimeException} and then propagates.
   *
   * <p>This method always throws an exception. The {@code RuntimeException} return type allows
   * client code to signal to the compiler that statements after the call are unreachable. Example
   * usage:
   *
   * <pre>
   * T doSomething() {
   *   try {
   *     return someMethodThatCouldThrowAnything();
   *   } catch (IKnowWhatToDoWithThisException e) {
   *     return handle(e);
   *   } catch (Throwable t) {
   *     throw Throwables.propagate(t);
   *   }
   * }
   * </pre>
   *
   * @param throwable the Throwable to propagate
   * @return nothing will ever be returned; this return type is only for your convenience, as
   *     illustrated in the example above
   * @deprecated To preserve behavior, use {@code throw e} or {@code throw new RuntimeException(e)}
   *     directly, or use a combination of {@link #throwIfUnchecked} and {@code throw new
   *     RuntimeException(e)}. But consider whether users would be better off if your API threw a
   *     different type of exception. For background on the deprecation, read <a
   *     href=""https://github.com/google/guava/wiki/Why-we-deprecated-Throwables.propagate"">Why we
   *     deprecated {@code Throwables.propagate}</a>.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getAnnotatedMethods,com.google.common.eventbus.SubscriberRegistry:getAnnotatedMethods(java.lang.Class),167,191,"/**
* Retrieves annotated methods for a class.
* @param clazz the target class
* @return ImmutableList of annotated Method objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,newCrc32c,com.google.common.hash.Hashing$Crc32cMethodHandles:newCrc32c(),522,530,"/**
* Creates a new CRC32-C checksum instance.
* @return Checksum object for CRC32-C calculations
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,lazyStackTrace,com.google.common.base.Throwables:lazyStackTrace(java.lang.Throwable),377,384,"/**
* Returns a lazy-loaded stack trace for the given Throwable.
* @param throwable the exception to get the stack trace from
* @return List of StackTraceElement representing the stack trace
*/","* Returns the stack trace of {@code throwable}, possibly providing slower iteration over the full
   * trace but faster iteration over parts of the trace. Here, ""slower"" and ""faster"" are defined in
   * comparison to the normal way to access the stack trace, {@link Throwable#getStackTrace()
   * throwable.getStackTrace()}. Note, however, that this method's special implementation is not
   * available for all platforms and configurations. If that implementation is unavailable, this
   * method falls back to {@code getStackTrace}. Callers that require the special implementation can
   * check its availability with {@link #lazyStackTraceIsLazy()}.
   *
   * <p>The expected (but not guaranteed) performance of the special implementation differs from
   * {@code getStackTrace} in one main way: The {@code lazyStackTrace} call itself returns quickly
   * by delaying the per-stack-frame work until each element is accessed. Roughly speaking:
   *
   * <ul>
   *   <li>{@code getStackTrace} takes {@code stackSize} time to return but then negligible time to
   *       retrieve each element of the returned list.
   *   <li>{@code lazyStackTrace} takes negligible time to return but then {@code 1/stackSize} time
   *       to retrieve each element of the returned list (probably slightly more than {@code
   *       1/stackSize}).
   * </ul>
   *
   * <p>Note: The special implementation does not respect calls to {@link Throwable#setStackTrace
   * throwable.setStackTrace}. Instead, it always reflects the original stack trace from the
   * exception's creation.
   *
   * @since 19.0
   * @deprecated This method is equivalent to {@link Throwable#getStackTrace()} on JDK versions past
   *     JDK 8 and on all Android versions. Use {@link Throwable#getStackTrace()} directly, or where
   *     possible use the {@code java.lang.StackWalker.walk} method introduced in JDK 9.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache:newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1694,1703,"/**
* Creates a new entry in the specified segment.
* @param key the key for the new entry
* @param hash the hash code of the key
* @param next reference to the next entry
* @return the newly created ReferenceEntry object
*/",* This method is a convenience for testing. Code should call {@link Segment#newEntry} directly.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/RemovalNotification.java,create,"com.google.common.cache.RemovalNotification:create(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause)",48,51,"/**
* Creates a removal notification.
* @param key the removed key
* @param value the removed value
* @param cause the reason for removal
* @return RemovalNotification instance
*/","* Creates a new {@code RemovalNotification} for the given {@code key}/{@code value} pair, with
   * the given {@code cause} for the removal. The {@code key} and/or {@code value} may be {@code
   * null} if they were already garbage collected.
   *
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,forEachEntry,com.google.common.collect.HashMultiset:forEachEntry(java.util.function.ObjIntConsumer),163,167,"/**
 * Iterates over each entry in the multiset.
 * @param action consumer to accept element and its count
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,forEachEntry,com.google.common.collect.LinkedHashMultiset:forEachEntry(java.util.function.ObjIntConsumer),163,167,"/**
 * Iterates over each entry in the map.
 * @param action consumer to accept element and its count
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,<init>,com.google.common.collect.AbstractSortedMultiset:<init>(),42,45,"/**
 * Constructs an empty sorted multiset with natural ordering.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,<init>,"com.google.common.collect.TreeMultiset:<init>(com.google.common.collect.TreeMultiset$Reference,com.google.common.collect.GeneralRange,com.google.common.collect.TreeMultiset$AvlNode)",121,126,"/**
* Initializes a TreeMultiset with specified parameters.
* @param rootReference reference to the root node of the AVL tree
* @param range specifies the range for elements in the multiset
* @param endLink node used as header for linking purposes
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,subMultiset,"com.google.common.collect.TreeMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",102,112,"/**
* Returns a submultiset of elements within specified bounds.
* @param fromElement lower bound element
* @param fromBoundType type of inclusion for the lower bound
* @param toElement upper bound element
* @param toBoundType type of inclusion for the upper bound
* @return SortedMultiset containing elements within the bounds
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,toMultiset,"com.google.common.collect.Multisets:toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier)",88,94,"/**
 * Collects elements into a Multiset.
 * @param elementFunction extracts the element from each input
 * @param countFunction determines the count for each element
 * @param multisetSupplier supplies the Multiset instance
 * @return Collector that groups elements into a Multiset
 */","* Returns a {@code Collector} that accumulates elements into a multiset created via the specified
   * {@code Supplier}, whose elements are the result of applying {@code elementFunction} to the
   * inputs, with counts equal to the result of applying {@code countFunction} to the inputs.
   * Elements are added in encounter order.
   *
   * <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the element
   * will be added more than once, with the count summed over all appearances of the element.
   *
   * <p>Note that {@code stream.collect(toMultiset(function, e -> 1, supplier))} is equivalent to
   * {@code stream.map(function).collect(Collectors.toCollection(supplier))}.
   *
   * <p>To collect to an {@link ImmutableMultiset}, use {@link
   * ImmutableMultiset#toImmutableMultiset}.
   *
   * @since 22.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,toMultimap,"com.google.common.collect.Multimaps:toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",115,125,"/**
 * Collects elements into a Multimap using key and value functions.
 * @param keyFunction extracts the key from each element
 * @param valueFunction extracts the value from each element
 * @param multimapSupplier provides a new Multimap instance
 * @return Collector to group elements by keys into a Multimap
 */","* Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the
   * specified supplier. The keys and values of the entries are the result of applying the provided
   * mapping functions to the input elements, accumulated in the encounter order of the stream.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             toMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1),
   *                  MultimapBuilder.treeKeys().arrayListValues()::build));
   *
   * // is equivalent to
   *
   * static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP;
   *
   * static {
   *     FIRST_LETTER_MULTIMAP = MultimapBuilder.treeKeys().arrayListValues().build();
   *     FIRST_LETTER_MULTIMAP.put('b', ""anana"");
   *     FIRST_LETTER_MULTIMAP.put('a', ""pple"");
   *     FIRST_LETTER_MULTIMAP.put('a', ""sparagus"");
   *     FIRST_LETTER_MULTIMAP.put('c', ""arrot"");
   *     FIRST_LETTER_MULTIMAP.put('c', ""herry"");
   * }
   * }
   *
   * <p>To collect to an {@link ImmutableMultimap}, use either {@link
   * ImmutableSetMultimap#toImmutableSetMultimap} or {@link
   * ImmutableListMultimap#toImmutableListMultimap}.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,flatteningToMultimap,"com.google.common.collect.Multimaps:flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",160,171,"/**
* Collects elements into a Multimap using key and value functions.
* @param keyFunction extracts the key from each element
* @param valueFunction extracts a stream of values for each element
* @param multimapSupplier provides the type of Multimap to use
* @return Collector that collects elements into a Multimap
*/","* Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the
   * specified supplier. Each input element is mapped to a key and a stream of values, each of which
   * are put into the resulting {@code Multimap}, in the encounter order of the stream and the
   * encounter order of the streams of values.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             flatteningToMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c),
   *                  MultimapBuilder.linkedHashKeys().arrayListValues()::build));
   *
   * // is equivalent to
   *
   * static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP;
   *
   * static {
   *     FIRST_LETTER_MULTIMAP = MultimapBuilder.linkedHashKeys().arrayListValues().build();
   *     FIRST_LETTER_MULTIMAP.putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'));
   *     FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('p', 'p', 'l', 'e'));
   *     FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'));
   *     FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'));
   *     FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'));
   * }
   * }
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,valuesSpliterator,com.google.common.collect.AbstractTable:valuesSpliterator(),201,203,"/**
 * Returns a spliterator over the values of the table.
 * @return Spliterator over values
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,spliterator,com.google.common.collect.Collections2$TransformedCollection:spliterator(),289,292,"/**
 * Returns a spliterator for this collection.
 * @return Spliterator over transformed elements of fromCollection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,keySpliterator,com.google.common.collect.ImmutableMap:keySpliterator(),1085,1087,"/**
 * Returns a spliterator over the keys.
 * @return Spliterator of keys from the entry set
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,spliterator,com.google.common.collect.ImmutableMapValues:spliterator(),66,69,"/**
* Returns a spliterator over values of the map.
* @return Spliterator for map values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySpliterator,com.google.common.collect.Maps$NavigableAsMapView:entrySpliterator(),1100,1103,"/**
 * Creates a spliterator over entries transformed by a function.
 * @return Spliterator of transformed Entry objects
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,spliterator,com.google.common.collect.Multimaps$Keys:spliterator(),1761,1764,"/**
 * Returns a spliterator over the keys of the multimap.
 * @return Spliterator for iterating over keys
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellSpliterator,com.google.common.collect.Tables$TransformedTable:cellSpliterator(),490,493,"/**
* Returns a spliterator for cells with transformed values.
* @return Spliterator of Cell objects with modified values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellSpliterator,com.google.common.collect.Tables$TransposeTable:cellSpliterator(),322,325,"/**
 * Returns a spliterator for transposed cells.
 * @return Spliterator of transposed Cell objects
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,spliterator,com.google.common.collect.Collections2$FilteredCollection:spliterator(),179,182,"/**
 * Returns a spliterator that filters elements based on a predicate.
 * @return Spliterator filtering elements of type E
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,removeAll,com.google.common.collect.Collections2$FilteredCollection:removeAll(java.util.Collection),200,203,"/**
 * Removes all elements contained in the specified collection.
 * @param collection the collection of elements to remove
 * @return true if any elements were removed, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,retainAll,com.google.common.collect.Collections2$FilteredCollection:retainAll(java.util.Collection),205,208,"/**
 * Retains only elements in this list present in the specified collection.
 * @param collection the collection of elements to retain
 * @return true if this list was modified as a result of the call
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,transform,"com.google.common.collect.Collections2:transform(java.util.Collection,com.google.common.base.Function)",259,262,"/**
* Transforms elements of a collection using a given function.
* @param fromCollection original collection of elements
* @param function transformation function to apply to each element
* @return new collection with transformed elements
*/","* Returns a collection that applies {@code function} to each element of {@code fromCollection}.
   * The returned collection is a live view of {@code fromCollection}; changes to one affect the
   * other.
   *
   * <p>The returned collection's {@code add()} and {@code addAll()} methods throw an {@link
   * UnsupportedOperationException}. All other collection methods are supported, as long as {@code
   * fromCollection} supports them.
   *
   * <p>The returned collection isn't threadsafe or serializable, even if {@code fromCollection} is.
   *
   * <p>When a live view is <i>not</i> needed, it may be faster to copy the transformed collection
   * and use the copy.
   *
   * <p>If the input {@code Collection} is known to be a {@code List}, consider {@link
   * Lists#transform}. If only an {@code Iterable} is available, use {@link Iterables#transform}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#map Stream.map}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,contains,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:contains(java.lang.Object),1436,1439,"/**
 * Checks if submap entries contain the specified object.
 * @param o the object to check
 * @return true if the object is contained, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,contains,com.google.common.collect.Collections2$FilteredCollection:contains(java.lang.Object),154,162,"/**
 * Checks if the collection contains an element that satisfies the predicate.
 * @param element the element to check
 * @return true if such an element exists, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,contains,"com.google.common.collect.Iterables:contains(java.lang.Iterable,java.lang.Object)",141,147,"/**
* Checks if an iterable contains a specified element.
* @param iterable the iterable to search within
* @param element the element to look for
* @return true if element is found, false otherwise
*/","* Returns {@code true} if {@code iterable} contains any element {@code o} for which {@code
   * Objects.equals(o, element)} would return {@code true}. Otherwise returns {@code false}, even in
   * cases where {@link Collection#contains} might throw {@link NullPointerException} or {@link
   * ClassCastException}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,getOrDefault,"com.google.common.collect.Maps$AsMapView:getOrDefault(java.lang.Object,java.lang.Object)",921,930,"/**
* Retrieves the value for a given key or returns a default value.
* @param key the key to search for
* @param defaultValue the value to return if the key is not found
* @return the value associated with the key, or the default value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,getOrDefault,"com.google.common.collect.Maps$NavigableAsMapView:getOrDefault(java.lang.Object,java.lang.Object)",1079,1088,"/**
* Retrieves value for a given key or returns default if not present.
* @param key the key to look up
* @param defaultValue the value to return if key is not found
* @return the value associated with the key, or default value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$RowMap$EntrySet:contains(java.lang.Object),849,858,"/**
* Checks if the collection contains a specific entry.
* @param obj object to check, must be an Entry
* @return true if entry exists with non-null key and value is a Map, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,com.google.common.collect.ContiguousSet:headSet(java.lang.Object),152,155,"/**
* Returns elements less than the specified element.
* @param toElement upper bound (exclusive)
* @return ContiguousSet of elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,"com.google.common.collect.ContiguousSet:headSet(java.lang.Object,boolean)",160,164,"/**
 * Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive) toElement.
 * @param toElement upper bound element
 * @param inclusive true if the upper bound is inclusive
 * @return ContiguousSet containing elements less than (or equal to) toElement
 */",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,com.google.common.collect.ContiguousSet:tailSet(java.lang.Object),187,190,"/**
* Returns a view of the portion of this set whose elements are greater than or equal to fromElement.
* @param fromElement lower bound (inclusive)
* @return ContiguousSet containing elements >= fromElement
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,"com.google.common.collect.ContiguousSet:tailSet(java.lang.Object,boolean)",195,199,"/**
* Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive) fromElement.
* @param fromElement lower bound element
* @param inclusive true if fromElement is included in the returned set
* @return ContiguousSet containing elements greater than or equal to fromElement
*/",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,offer,com.google.common.collect.EvictingQueue:offer(java.lang.Object),91,95,"/**
* Offers an element to this collection.
* @param e the element to offer
* @return true if the element was added, false otherwise
*/","* Adds the given element to this queue. If the queue is currently full, the element at the head
   * of the queue is evicted to make room.
   *
   * @return {@code true} always",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,<init>,"com.google.common.collect.FilteredEntrySetMultimap:<init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",34,36,"/**
* Creates a filtered entry set multimap.
* @param unfiltered original multimap to filter
* @param predicate criteria for filtering entries
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,<init>,"com.google.common.collect.FilteredKeyListMultimap:<init>(com.google.common.collect.ListMultimap,com.google.common.base.Predicate)",32,34,"/**
* Constructs a filtered multimap based on key predicate.
* @param unfiltered original multimap to filter
* @param keyPredicate predicate for filtering keys
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,<init>,"com.google.common.collect.FilteredKeySetMultimap:<init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",34,36,"/**
 * Filters keys in a multimap based on a predicate.
 * @param unfiltered original multimap to filter
 * @param keyPredicate predicate to determine which keys to include
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,createValues,com.google.common.collect.FilteredEntryMultimap:createValues(),134,137,"/**
 * Creates a collection of values from the multimap.
 * @return Collection of values with filtering applied
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createValues,com.google.common.collect.FilteredKeyMultimap:createValues(),212,215,"/**
 * Creates a collection of values from this multimap.
 * @return a collection of values wrapped in a filtered view
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,forEach,com.google.common.collect.HashBiMap$Inverse:forEach(java.util.function.BiConsumer),739,743,"/**
* Iterates over entries, applying action to each value-key pair.
* @param action consumer that accepts a value and its corresponding key
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,forEach,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:forEach(java.util.function.Consumer),72,75,"/**
 * Applies the given action to each entry in the map.
 * @param action the action to be performed on each entry
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,forEach,com.google.common.collect.ImmutableSortedMap$1EntrySet:forEach(java.util.function.Consumer),416,423,"/**
 * Applies a given action to each element in the collection.
 * @param consumer the action to be performed on each element
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,forEach,com.google.common.collect.JdkBackedImmutableMap:forEach(java.util.function.BiConsumer),111,115,"/**
* Applies given action to each key-value pair.
* @param action consumer for processing entries
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,forEach,com.google.common.collect.RegularImmutableAsList:forEach(java.util.function.Consumer),61,65,"/**
* Applies given action to each element.
* @param action Consumer to apply to each element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,forEach,com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:forEach(java.util.function.Consumer),269,272,"/**
* Applies given action to each entry.
* @param action Consumer function to apply
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,forEach,com.google.common.collect.RegularImmutableSortedSet:forEach(java.util.function.Consumer),85,88,"/**
 * Applies the given action to each element.
 * @param action the action to be performed on each element
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,orderKeysBy,com.google.common.collect.ImmutableListMultimap$Builder:orderKeysBy(java.util.Comparator),317,322,"/**
 * Orders keys using the provided comparator.
 * @param keyComparator comparator for ordering keys
 * @return this builder instance
 */","* {@inheritDoc}
     *
     * @since 8.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,orderKeysBy,com.google.common.collect.ImmutableSetMultimap$Builder:orderKeysBy(java.util.Comparator),368,373,"/**
* Orders keys using provided comparator.
* @param keyComparator comparator for key ordering
* @return this builder instance
*/","* {@inheritDoc}
     *
     * @since 8.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,orderValuesBy,com.google.common.collect.ImmutableListMultimap$Builder:orderValuesBy(java.util.Comparator),329,334,"/**
* Orders entries by values using a comparator.
* @param valueComparator comparator for ordering values
* @return this builder instance
*/","* {@inheritDoc}
     *
     * @since 8.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,orderValuesBy,com.google.common.collect.ImmutableSetMultimap$Builder:orderValuesBy(java.util.Comparator),386,391,"/**
* Orders values by specified comparator.
* @param valueComparator comparator for value ordering
* @return this builder instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,add,com.google.common.collect.ImmutableSortedMultiset$Builder:add(java.lang.Object),472,477,"/**
* Adds an element to the collection.
* @param element the element to add
* @return the current builder instance
*/","* Adds {@code element} to the {@code ImmutableSortedMultiset}.
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,addCopies,"com.google.common.collect.ImmutableSortedMultiset$Builder:addCopies(java.lang.Object,int)",504,509,"/**
* Adds multiple copies of an element to the collection.
* @param element the element to add
* @param occurrences number of times to add the element
* @return this Builder instance
*/","* Adds a number of occurrences of an element to this {@code ImmutableSortedMultiset}.
     *
     * @param element the element to add
     * @param occurrences the number of occurrences of the element to add. May be zero, in which
     *     case no change will be made.
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation
     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,setCount,"com.google.common.collect.ImmutableSortedMultiset$Builder:setCount(java.lang.Object,int)",521,526,"/**
* Sets the count for an element.
* @param element the element to set the count for
* @param count the count to set
* @return the Builder instance
*/","* Adds or removes the necessary occurrences of an element such that the element attains the
     * desired count.
     *
     * @param element the element to add or remove occurrences of
     * @param count the desired count of the element in this multiset
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code count} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,toImmutableSortedMultiset,com.google.common.collect.ImmutableSortedMultiset:toImmutableSortedMultiset(java.util.Comparator),70,73,"/**
* Collects elements into an immutable sorted multiset.
* @param comparator ordering for the elements
* @return ImmutableSortedMultiset with sorted elements
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableMultiset}. Elements are sorted by the specified comparator.
   *
   * <p><b>Warning:</b> {@code comparator} should be <i>consistent with {@code equals}</i> as
   * explained in the {@link Comparator} documentation.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,tailSetImpl,"com.google.common.collect.DescendingImmutableSortedSet:tailSetImpl(java.lang.Object,boolean)",63,66,"/**
* Returns elements greater than or equal to fromElement.
* @param fromElement the lower bound element
* @param inclusive true if the lower bound is inclusive
* @return a descending set of elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,headSet,com.google.common.collect.ImmutableSortedSet:headSet(java.lang.Object),641,644,"/**
* Returns elements less than the specified element.
* @param toElement upper bound (exclusive)
* @return ImmutableSortedSet of elements less than toElement
*/","* {@inheritDoc}
   *
   * <p>This method returns a serializable {@code ImmutableSortedSet}.
   *
   * <p>The {@link SortedSet#headSet} documentation states that a subset of a subset throws an
   * {@link IllegalArgumentException} if passed a {@code toElement} greater than an earlier {@code
   * toElement}. However, this method doesn't throw an exception in that situation, but instead
   * keeps the original {@code toElement}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,headSetImpl,"com.google.common.collect.DescendingImmutableSortedSet:headSetImpl(java.lang.Object,boolean)",52,55,"/**
* Returns elements less than or equal to specified element.
* @param toElement upper bound element
* @param inclusive true if the upper bound is inclusive
* @return ImmutableSortedSet of elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,tailSet,com.google.common.collect.ImmutableSortedSet:tailSet(java.lang.Object),694,697,"/**
 * Returns a view of the portion of this set whose elements are greater than or equal to fromElement.
 * @param fromElement the lower bound (inclusive)
 * @return a subset containing elements greater than or equal to fromElement
 */","* {@inheritDoc}
   *
   * <p>This method returns a serializable {@code ImmutableSortedSet}.
   *
   * <p>The {@link SortedSet#tailSet} documentation states that a subset of a subset throws an
   * {@link IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code
   * fromElement}. However, this method doesn't throw an exception in that situation, but instead
   * keeps the original {@code fromElement}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollFirstEntry,com.google.common.collect.Maps$FilteredEntryNavigableMap:pollFirstEntry(),3325,3328,"/**
* Removes and returns the first entry that matches the predicate.
* @return the matching Entry or null if none found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollLastEntry,com.google.common.collect.Maps$FilteredEntryNavigableMap:pollLastEntry(),3330,3333,"/**
* Removes and returns the last matching entry from the map.
* @return Entry object or null if no match found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,pollFirst,com.google.common.collect.Sets$FilteredNavigableSet:pollFirst(),1376,1379,"/**
 * Removes and returns the first element matching the predicate.
 * @return the removed element or null if no match found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,pollLast,com.google.common.collect.Sets$FilteredNavigableSet:pollLast(),1381,1384,"/**
* Removes and returns the last element matching the predicate.
* @return the removed element or null if no match is found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,cycle,com.google.common.collect.FluentIterable:cycle(),377,379,"/**
 * Creates an infinite iterable that cycles through elements.
 * @return FluentIterable cycling through elements indefinitely
 */","* Returns a fluent iterable whose {@code Iterator} cycles indefinitely over the elements of this
   * fluent iterable.
   *
   * <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code
   * remove()} is called, subsequent cycles omit the removed element, which is no longer in this
   * fluent iterable. The iterator's {@code hasNext()} method returns {@code true} until this fluent
   * iterable is empty.
   *
   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
   * should use an explicit {@code break} or be certain that you will eventually remove all the
   * elements.
   *
   * <p><b>{@code Stream} equivalent:</b> if the source iterable has only a single element {@code
   * e}, use {@code Stream.generate(() -> e)}. Otherwise, collect your stream into a collection and
   * use {@code Stream.generate(() -> collection).flatMap(Collection::stream)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,filter,com.google.common.collect.FluentIterable:filter(com.google.common.base.Predicate),414,416,"/**
* Filters elements using a predicate.
* @param predicate condition to filter elements
* @return FluentIterable of filtered elements
*/","* Returns the elements from this fluent iterable that satisfy a predicate. The resulting fluent
   * iterable's iterator does not support {@code remove()}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#filter} (same).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,filter,"com.google.common.collect.Iterables:filter(java.lang.Iterable,java.lang.Class)",614,620,"/**
 * Filters elements of an iterable by a specified type.
 * @param unfiltered the iterable to filter
 * @param desiredType the class type to filter by
 * @return an iterable containing only elements of the specified type
 */","* Returns a view of {@code unfiltered} containing all elements that are of the type {@code
   * desiredType}. The returned iterable's iterator does not support {@code remove()}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}.
   * This does perform a little more work than necessary, so another option is to insert an
   * unchecked cast at some later point:
   *
   * {@snippet :
   * @SuppressWarnings(""unchecked"") // safe because of ::isInstance check
   * ImmutableList<NewType> result =
   *     (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());
   * }",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,transform,com.google.common.collect.FluentIterable:transform(com.google.common.base.Function),479,482,"/**
* Transforms elements using given function.
* @param function transformation function
* @return FluentIterable of transformed elements
*/","* Returns a fluent iterable that applies {@code function} to each element of this fluent
   * iterable.
   *
   * <p>The returned fluent iterable's iterator supports {@code remove()} if this iterable's
   * iterator does. After a successful {@code remove()} call, this fluent iterable no longer
   * contains the corresponding element.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#map}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,peekingIterator,com.google.common.collect.Iterators:peekingIterator(java.util.Iterator),1263,1273,"/**
 * Wraps an iterator to provide a peeking capability.
 * @param iterator the underlying iterator
 * @return a PeekingIterator instance
 */","* Returns a {@code PeekingIterator} backed by the given iterator.
   *
   * <p>Calls to the {@code peek} method with no intervening calls to {@code next} do not affect the
   * iteration, and hence return the same object each time. A subsequent call to {@code next} is
   * guaranteed to return the same object again. For example:
   *
   * {@snippet :
   * PeekingIterator<String> peekingIterator =
   *     Iterators.peekingIterator(Iterators.forArray(""a"", ""b""));
   * String a1 = peekingIterator.peek(); // returns ""a""
   * String a2 = peekingIterator.peek(); // also returns ""a""
   * String a3 = peekingIterator.next(); // also returns ""a""
   * }
   *
   * <p>Any structural changes to the underlying iteration (aside from those performed by the
   * iterator's own {@link PeekingIterator#remove()} method) will leave the iterator in an undefined
   * state.
   *
   * <p>The returned iterator does not support removal after peeking, as explained by {@link
   * PeekingIterator#remove()}.
   *
   * <p>Note: If the given iterator is already a {@code PeekingIterator}, it <i>might</i> be
   * returned to the caller, although this is neither guaranteed to occur nor required to be
   * consistent. For example, this method <i>might</i> choose to pass through recognized
   * implementations of {@code PeekingIterator} when the behavior of the implementation is known to
   * meet the contract guaranteed by this method.
   *
   * <p>There is no {@link Iterable} equivalent to this method, so use this method to wrap each
   * individual iterator as it is generated.
   *
   * @param iterator the backing iterator. The {@link PeekingIterator} assumes ownership of this
   *     iterator, so users should cease making direct calls to it after calling this method.
   * @return a peeking iterator backed by that iterator. Apart from the additional {@link
   *     PeekingIterator#peek()} method, this iterator behaves exactly the same as {@code iterator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,keyIterator,com.google.common.collect.ImmutableEnumMap:keyIterator(),61,64,"/**
 * Returns an unmodifiable iterator over the keys.
 * @return Iterator of keys from the delegate set
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,iterator,com.google.common.collect.ImmutableEnumSet:iterator(),72,75,"/**
 * Returns an unmodifiable iterator over elements.
 * @return Iterator that does not support modification
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,iterator,com.google.common.collect.Iterables$UnmodifiableIterable:iterator(),105,108,"/**
 * Returns an unmodifiable iterator over the elements.
 * @return Iterator of T objects
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iterator,com.google.common.collect.Multisets$UnmodifiableMultiset:iterator(),170,173,"/**
 * Returns an unmodifiable iterator over the elements.
 * @return Iterator of elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingIterator,com.google.common.collect.Sets$UnmodifiableNavigableSet:descendingIterator(),2037,2040,"/**
 * Returns an unmodifiable descending iterator.
 * @return Iterator in reverse order
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,removeAll,"com.google.common.collect.Iterables:removeAll(java.lang.Iterable,java.util.Collection)",159,164,"/**
* Removes all occurrences of specified elements from the given iterable.
* @param removeFrom iterable to remove elements from
* @param elementsToRemove collection of elements to be removed
* @return true if any element was removed, false otherwise
*/","* Removes, from an iterable, every element that belongs to the provided collection.
   *
   * <p>This method calls {@link Collection#removeAll} if {@code iterable} is a collection, and
   * {@link Iterators#removeAll} otherwise.
   *
   * @param removeFrom the iterable to (potentially) remove elements from
   * @param elementsToRemove the elements to remove
   * @return {@code true} if any element was removed from {@code iterable}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,removeAllImpl,"com.google.common.collect.Sets:removeAllImpl(java.util.Set,java.util.Collection)",2128,2145,"/**
 * Removes all elements of a collection from a set.
 * @param set the set to modify
 * @param collection the collection of elements to remove
 * @return true if any elements were removed
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$ColumnKeySet:removeAll(java.util.Collection),717,734,"/**
 * Removes all entries associated with elements in the specified collection.
 * @param c collection of keys to remove mappings for
 * @return true if any mappings were removed, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:removeAll(java.util.Collection),1039,1044,"/**
 * Removes all elements in the specified collection from this set.
 * @param c collection containing elements to be removed
 * @return true if this set changed as a result of the call
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,removeIf,"com.google.common.collect.Iterables:removeIf(java.lang.Iterable,com.google.common.base.Predicate)",199,206,"/**
 * Removes elements matching the predicate from the iterable.
 * @param removeFrom iterable to remove elements from
 * @param predicate condition for removal
 * @return true if any element was removed, false otherwise
 */","* Removes, from an iterable, every element that satisfies the provided predicate.
   *
   * <p>Removals may or may not happen immediately as each element is tested against the predicate.
   * The behavior of this method is not specified if {@code predicate} is dependent on {@code
   * removeFrom}.
   *
   * <p><b>Java 8+ users:</b> if {@code removeFrom} is a {@link Collection}, use {@code
   * removeFrom.removeIf(predicate)} instead.
   *
   * @param removeFrom the iterable to (potentially) remove elements from
   * @param predicate a predicate that determines whether an element should be removed
   * @return {@code true} if any elements were removed from the iterable
   * @throws UnsupportedOperationException if the iterable does not support {@code remove()}.
   * @since 2.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,retainAll,"com.google.common.collect.Iterables:retainAll(java.lang.Iterable,java.util.Collection)",176,181,"/**
* Retains only the elements in removeFrom that are contained in elementsToRetain.
* @param removeFrom iterable to be modified
* @param elementsToRetain collection of elements to retain
* @return true if removeFrom was modified, false otherwise
*/","* Removes, from an iterable, every element that does not belong to the provided collection.
   *
   * <p>This method calls {@link Collection#retainAll} if {@code iterable} is a collection, and
   * {@link Iterators#retainAll} otherwise.
   *
   * @param removeFrom the iterable to (potentially) remove elements from
   * @param elementsToRetain the elements to retain
   * @return {@code true} if any element was removed from {@code iterable}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,retainAll,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:retainAll(java.util.Collection),1046,1051,"/**
* Retains only elements in this collection that are contained in the specified collection.
* @param c collection containing elements to be retained
* @return true if this collection changed as a result of the call
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,"com.google.common.collect.AbstractMultimap:putAll(java.lang.Object,java.lang.Iterable)",78,91,"/**
* Adds all values to the collection associated with a key.
* @param key the key under which to store values
* @param values iterable of values to add
* @return true if any values were added, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardAddAll,com.google.common.collect.ForwardingCollection:standardAddAll(java.util.Collection),159,161,"/**
 * Adds all elements from the specified collection to this set.
 * @param collection source collection of elements
 * @return true if this set was modified as a result of the call
 */","* A sensible definition of {@link #addAll} in terms of {@link #add}. If you override {@link
   * #add}, you may wish to override {@link #addAll} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,addAll,"com.google.common.collect.Iterables:addAll(java.util.Collection,java.lang.Iterable)",325,333,"/**
 * Adds all elements from the specified iterable to the collection.
 * @param addTo target collection to add elements to
 * @param elementsToAdd iterable of elements to add
 * @return true if any element was added, false otherwise
 */","* Adds all elements in {@code iterable} to {@code collection}.
   *
   * @return {@code true} if {@code collection} was modified as a result of this operation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayList,com.google.common.collect.Lists:newArrayList(java.util.Iterator),147,153,"/**
* Creates an ArrayList from an iterator.
* @param elements iterator of elements to add
* @return ArrayList containing the elements
*/","* Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin
   * shortcut for creating an empty list and then calling {@link Iterators#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableList#copyOf(Iterator)} instead.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newHashSet,com.google.common.collect.Sets:newHashSet(java.util.Iterator),244,249,"/**
* Creates a HashSet from an iterator.
* @param elements iterator of elements to add
* @return HashSet containing the provided elements
*/","* Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin
   * convenience for creating an empty set and then calling {@link Iterators#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableSet#copyOf(Iterator)} instead.
   *
   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, you should create an {@link EnumSet}
   * instead.
   *
   * <p>Overall, this method is not very useful and will likely be deprecated in the future.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$FilteredCollection:iterator(),174,177,"/**
* Returns an iterator that filters elements based on a predicate.
* @return Iterator of filtered elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,filter,"com.google.common.collect.Iterators:filter(java.util.Iterator,java.lang.Class)",688,692,"/**
 * Filters iterator to include only elements of the specified type.
 * @param unfiltered source iterator containing mixed types
 * @param desiredType class type to filter by
 * @return UnmodifiableIterator with elements of desiredType
 */","* Returns a view of {@code unfiltered} containing all elements that are of the type {@code
   * desiredType}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entryIterator,com.google.common.collect.Maps$FilteredEntryNavigableMap:entryIterator(),3270,3273,"/**
* Returns an iterator over filtered entries.
* @return Iterator of Entry<K, V> that satisfy entryPredicate
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingEntryIterator,com.google.common.collect.Maps$FilteredEntryNavigableMap:descendingEntryIterator(),3275,3278,"/**
* Returns an iterator over entries in descending order.
* Filters entries based on a predicate.
* @return Iterator of filtered Map.Entry objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iterator,com.google.common.collect.Multisets$FilteredMultiset:iterator(),338,341,"/**
 * Returns an iterator that filters elements based on a predicate.
 * @return UnmodifiableIterator containing filtered elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingIterator,com.google.common.collect.Sets$FilteredNavigableSet:descendingIterator(),1391,1394,"/**
 * Returns a descending iterator filtered by a predicate.
 * @return Iterator of elements that match the predicate in descending order
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,all,"com.google.common.collect.Iterables:all(java.lang.Iterable,com.google.common.base.Predicate)",638,641,"/**
* Checks if all elements in the iterable satisfy the predicate.
* @param iterable collection of elements to check
* @param predicate condition to test each element against
* @return true if all elements match the predicate, false otherwise
*/","* Returns {@code true} if every element in {@code iterable} satisfies the predicate. If {@code
   * iterable} is empty, {@code true} is returned.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,find,"com.google.common.collect.Iterables:find(java.lang.Iterable,com.google.common.base.Predicate)",652,656,"/**
* Finds first element matching predicate in iterable.
* @param iterable collection to search
* @param predicate condition to match elements
* @return first matching element or null if none found
*/","* Returns the first element in {@code iterable} that satisfies the given predicate; use this
   * method only when such an element is known to exist. If it is possible that <i>no</i> element
   * will match, use {@link #tryFind} or {@link #find(Iterable, Predicate, Object)} instead.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst().get()}
   *
   * @throws NoSuchElementException if no element in {@code iterable} matches the given predicate",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,last,com.google.common.collect.Sets$FilteredNavigableSet:last(),1396,1400,"/**
* Retrieves the last element that matches the predicate.
* @return the last matching element or null if none found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,first,com.google.common.collect.Sets$FilteredSortedSet:first(),1325,1329,"/**
* Returns the first element matching the predicate.
* @return the first matching element or null if none found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,find,"com.google.common.collect.Iterables:find(java.lang.Iterable,com.google.common.base.Predicate,java.lang.Object)",683,686,"/**
 * Finds the first element matching a predicate in an iterable.
 * @param iterable collection to search through
 * @param predicate condition to match elements
 * @param defaultValue value to return if no match is found
 * @return first matching element or default value
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,lower,com.google.common.collect.Sets$FilteredNavigableSet:lower(java.lang.Object),1356,1359,"/**
* Finds the greatest element less than the given element.
* @param e the reference element
* @return the greatest element less than e or null if no such element exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,floor,com.google.common.collect.Sets$FilteredNavigableSet:floor(java.lang.Object),1361,1364,"/**
* Finds the greatest element less than or equal to the given element.
* @param e target element to compare against
* @return greatest element less than or equal to e, or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$TransformedCollection:iterator(),284,287,"/**
 * Returns an iterator that applies a transformation to elements.
 * @return Iterator with transformed elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellIterator,com.google.common.collect.Tables$TransformedTable:cellIterator(),485,488,"/**
* Returns an iterator over cells with transformed values.
* Transforms each value in the original table's cell set using applyToValue method.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellIterator,com.google.common.collect.Tables$TransposeTable:cellIterator(),317,320,"/**
 * Returns an iterator over transposed cells.
 * @return Iterator of transposed Cell objects
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,incidentEdgeIterator,com.google.common.graph.UndirectedGraphConnections:incidentEdgeIterator(java.lang.Object),79,84,"/**
* Returns an iterator over incident edges for a given node.
* @param thisNode the node to find incident edges for
* @return Iterator of EndpointPair representing edges
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,clear,com.google.common.collect.AbstractMapBasedMultimap$AsMap:clear(),1403,1410,"/**
* Clears all entries in the submap.
* If submap is identical to the main map, clears the entire map.
* Otherwise, clears entries using an iterator.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,clear,com.google.common.collect.AbstractMapBasedMultimap$KeySet:clear(),994,997,"/**
 * Clears all elements from the collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,removeAllNodes,com.google.common.collect.LinkedListMultimap:removeAllNodes(java.lang.Object),298,300,"/**
 * Removes all nodes associated with the given key.
 * @param key unique identifier for nodes to be removed
 */",Removes all nodes for the specified key.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$IteratorBasedAbstractMap:clear(),3787,3790,"/**
 * Clears all entries in the collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,clear,com.google.common.collect.TreeMultiset:clear(),349,371,"/**
* Clears all entries in the AVL tree.
* Resets node fields and updates references efficiently.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$RandomAccessListWrapper:<init>(java.util.List),1210,1212,"/**
 * Wraps a list to provide random access capabilities.
 * @param backingList the original list to wrap
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,listIteratorImpl,"com.google.common.collect.Lists:listIteratorImpl(java.util.List,int)",1130,1132,"/**
 * Returns a list iterator over the specified list starting at the given index.
 * @param list the list to iterate over
 * @param index the starting index for iteration
 * @return ListIterator for the provided list
 */",Returns an implementation of {@link List#listIterator(int)}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,asList,"com.google.common.collect.Lists:asList(java.lang.Object,java.lang.Object[])",310,312,"/**
 * Creates a list from the given element and array.
 * @param first the first element of the list
 * @param rest additional elements in array form
 * @return a List containing the first element and all elements in rest
 */","* Returns an unmodifiable list containing the specified first element and backed by the specified
   * array of additional elements. Changes to the {@code rest} array will be reflected in the
   * returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable.
   *
   * <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo,
   * Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum argument count.
   *
   * <p>The returned list is serializable and implements {@link RandomAccess}.
   *
   * @param first the first element
   * @param rest an array of additional elements, possibly empty
   * @return an unmodifiable list containing the specified elements",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$RandomAccessReverseList:<init>(java.util.List),1008,1010,"/**
 * Constructs a reverse list from a given forward list.
 * @param forwardList the original list to be reversed
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,transform,"com.google.common.collect.Lists:transform(java.util.List,com.google.common.base.Function)",551,556,"/**
* Transforms elements of a list using a given function.
* @param fromList original list to transform
* @param function transformation function for each element
* @return new list with transformed elements
*/","* Returns a list that applies {@code function} to each element of {@code fromList}. The returned
   * list is a transformed view of {@code fromList}; changes to {@code fromList} will be reflected
   * in the returned list and vice versa.
   *
   * <p>Since functions are not reversible, the transform is one-way and new items cannot be stored
   * in the returned list. The {@code add}, {@code addAll} and {@code set} methods are unsupported
   * in the returned list.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned list
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link List#contains} and {@link List#hashCode}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned list doesn't need to be a
   * view, copy the returned list into a new list of your choosing.
   *
   * <p>If {@code fromList} implements {@link RandomAccess}, so will the returned list. The returned
   * list is threadsafe if the supplied list and function are.
   *
   * <p>If only a {@code Collection} or {@code Iterable} input is available, use {@link
   * Collections2#transform} or {@link Iterables#transform}.
   *
   * <p><b>Note:</b> serializing the returned list is implemented by serializing {@code fromList},
   * its contents, and {@code function} -- <i>not</i> by serializing the transformed values. This
   * can lead to surprising behavior, so serializing the returned list is <b>not recommended</b>.
   * Instead, copy the list using {@link ImmutableList#copyOf(Collection)} (for example), then
   * serialize the copy. Other methods similar to this do not implement serialization at all for
   * this reason.
   *
   * <p><b>Java 8+ users:</b> many use cases for this method are better addressed by {@link
   * java.util.stream.Stream#map}. This method is not being deprecated, but we gently encourage you
   * to migrate to streams.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,asList,"com.google.common.collect.Lists:asList(java.lang.Object,java.lang.Object,java.lang.Object[])",330,333,"/**
* Creates a list from the given elements.
* @param first first element of the list
* @param second second element of the list
* @param rest array of remaining elements
* @return List containing all provided elements
*/","* Returns an unmodifiable list containing the specified first and second element, and backed by
   * the specified array of additional elements. Changes to the {@code rest} array will be reflected
   * in the returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable.
   *
   * <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo,
   * Foo secondFoo, Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum
   * argument count.
   *
   * <p>The returned list is serializable and implements {@link RandomAccess}.
   *
   * @param first the first element
   * @param second the second element
   * @param rest an array of additional elements, possibly empty
   * @return an unmodifiable list containing the specified elements",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$SortedAsMapView:<init>(java.util.SortedSet,com.google.common.base.Function)",986,988,"/**
* Constructs a SortedAsMapView from a sorted set and a value mapping function.
* @param set sorted key set
* @param function maps keys to values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asMap,"com.google.common.collect.Maps:asMap(java.util.Set,com.google.common.base.Function)",819,822,"/**
* Converts a set to a map using a mapping function.
* @param set the source set of keys
* @param function maps each key to its corresponding value
* @return a Map view backed by the set and function
*/","* Returns a live {@link Map} view whose keys are the contents of {@code set} and whose values are
   * computed on demand using {@code function}. To get an immutable <i>copy</i> instead, use {@link
   * #toMap(Iterable, Function)}.
   *
   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping
   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code
   * entrySet} views of the returned map iterate in the same order as the backing set.
   *
   * <p>Modifications to the backing set are read through to the returned map. The returned map
   * supports removal operations if the backing set does. Removal operations write through to the
   * backing set. The returned map does not support put operations.
   *
   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the
   * set does not contain {@code null}, because the view cannot stop {@code null} from being added
   * to the set.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},
   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for
   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when
   * calling methods on the resulting map view.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$SortedKeySet:<init>(java.util.SortedMap),3978,3980,"/**
 * Constructs a SortedKeySet from a given SortedMap.
 * @param map the SortedMap to extract keys from
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createKeySet,com.google.common.collect.Maps$ViewCachingAbstractMap:createKeySet(),3728,3730,"/**
 * Creates a set of keys.
 * @return Set containing keys from this collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asMap,"com.google.common.collect.Maps:asMap(java.util.NavigableSet,com.google.common.base.Function)",875,879,"/**
* Creates a navigable map from a set using a function to generate values.
* @param set the source navigable set of keys
* @param function the function mapping keys to values
* @return a navigable map view of the set
*/","* Returns a view of the navigable set as a map, mapping keys from the set according to the
   * specified function.
   *
   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping
   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code
   * entrySet} views of the returned map iterate in the same order as the backing set.
   *
   * <p>Modifications to the backing set are read through to the returned map. The returned map
   * supports removal operations if the backing set does. Removal operations write through to the
   * backing set. The returned map does not support put operations.
   *
   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the
   * set does not contain {@code null}, because the view cannot stop {@code null} from being added
   * to the set.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},
   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for
   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when
   * calling methods on the resulting map view.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$TransformedEntriesSortedMap:<init>(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)",2227,2230,"/**
* Constructs a TransformedEntriesSortedMap.
* @param fromMap the source sorted map
* @param transformer the entry transformer to apply
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntries,"com.google.common.collect.Maps:transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer)",1959,1964,"/**
* Transforms entries of a map using a given transformer.
* @param fromMap original map with keys of type K and values of type V1
* @param transformer function to transform entries from V1 to V2
* @return new map with transformed values of type V2
*/","* Returns a view of a map whose values are derived from the original map's entries. In contrast
   * to {@link #transformValues}, this method's entry-transformation logic may depend on the key as
   * well as the value.
   *
   * <p>All other properties of the transformed map, such as iteration order, are left intact. For
   * example, the code:
   *
   * {@snippet :
   * Map<String, Boolean> options =
   *     ImmutableMap.of(""verbose"", true, ""sort"", false);
   * EntryTransformer<String, Boolean, String> flagPrefixer =
   *     new EntryTransformer<String, Boolean, String>() {
   *       public String transformEntry(String key, Boolean value) {
   *         return value ? key : ""no"" + key;
   *       }
   *     };
   * Map<String, String> transformed =
   *     Maps.transformEntries(options, flagPrefixer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {verbose=verbose, sort=nosort}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys and null values provided that
   * the transformer is capable of accepting null inputs. The transformed map might contain null
   * values if the transformer sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * map to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map
   * doesn't need to be a view, copy the returned map into a new map of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed map.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$DescendingMap:values(),4459,4462,"/**
 * Returns a collection of all values in the map.
 * @return Collection containing all values
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredMapValues:<init>(java.util.Map,java.util.Map,com.google.common.base.Predicate)",2910,2915,"/**
 * Initializes a new FilteredMapValues with the given maps and predicate.
 * @param filteredMap map containing filtered entries
 * @param unfiltered full map of entries
 * @param predicate criteria to filter entries
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$TransformedEntriesMap:values(),2213,2216,"/**
 * Returns a collection of values from this map.
 * @return Collection containing all values in the map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createValues,com.google.common.collect.Maps$ViewCachingAbstractMap:createValues(),3740,3742,"/**
 * Creates a collection of values.
 * @return Collection containing values from this instance
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,entrySpliterator,com.google.common.collect.ImmutableEnumMap:entrySpliterator(),102,105,"/**
* Returns an unmodifiable spliterator of entries.
* @return Spliterator of unmodifiable Map.Entry objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableOrNull,com.google.common.collect.Maps:unmodifiableOrNull(java.util.Map$Entry),3445,3448,"/**
 * Returns an unmodifiable view of the given entry or null if the entry is null.
 * @param entry the entry to be processed
 * @return an unmodifiable Entry object or null
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsEntryImpl,"com.google.common.collect.Maps:containsEntryImpl(java.util.Collection,java.lang.Object)",3854,3860,"/**
 * Checks if the collection contains a specific entry.
 * @param c collection of entries to check
 * @param o object to check for equality with an entry in the collection
 * @return true if the collection contains the specified entry, false otherwise
 */","* Implements {@code Collection.contains} safely for forwarding collections of map entries. If
   * {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to
   * protect against a possible nefarious equals method.
   *
   * <p>Note that {@code c} is the backing (delegate) collection, rather than the forwarding
   * collection.
   *
   * @param c the delegate (unwrapped) collection of map entries
   * @param o the object that might be contained in {@code c}
   * @return {@code true} if {@code c} contains {@code o}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeEntryImpl,"com.google.common.collect.Maps:removeEntryImpl(java.util.Collection,java.lang.Object)",3873,3879,"/**
 * Removes an entry from a collection.
 * @param c collection of entries
 * @param o object to remove, must be an instance of Entry
 * @return true if the entry was removed, false otherwise
 */","* Implements {@code Collection.remove} safely for forwarding collections of map entries. If
   * {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to
   * protect against a possible nefarious equals method.
   *
   * <p>Note that {@code c} is backing (delegate) collection, rather than the forwarding collection.
   *
   * @param c the delegate (unwrapped) collection of map entries
   * @param o the object to remove from {@code c}
   * @return {@code true} if {@code c} was changed",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:transformEntry(java.util.Map$Entry),2385,2387,"/**
* Transforms an entry using a given transformer.
* @param entry the entry to transform or null
* @return transformed entry or null if input is null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entryIterator,com.google.common.collect.Maps$TransformedEntriesMap:entryIterator(),2194,2198,"/**
* Returns an iterator over transformed entries.
* @return Iterator of Entry<K, V2> objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySpliterator,com.google.common.collect.Maps$TransformedEntriesMap:entrySpliterator(),2200,2204,"/**
* Returns a spliterator for transformed map entries.
* @return Spliterator of Entry<K, V2>
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,entryIterator,com.google.common.collect.Multimaps$TransformedEntriesMultimap:entryIterator(),1541,1545,"/**
 * Returns an iterator over transformed entries.
 * @return Iterator of Entry<K, V2>
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,get,com.google.common.collect.AbstractMapBasedMultimap$AsMap:get(java.lang.Object),1353,1362,"/**
* Retrieves a collection of values by key.
* @param key the key to search for
* @return Collection of values or null if key not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,count,com.google.common.collect.AbstractMapBasedMultiset:count(java.lang.Object),250,254,"/**
* Counts occurrences of an element.
* @param element the element to count
* @return number of times the element occurs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,contains,com.google.common.collect.AbstractTable$CellSet:contains(java.lang.Object),134,144,"/**
* Checks if the map contains a specific cell.
* @param o object to check, expected to be an instance of Cell
* @return true if the cell is found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,remove,com.google.common.collect.AbstractTable$CellSet:remove(java.lang.Object),146,156,"/**
 * Removes a Cell from the map.
 * @param o object to remove, must be an instance of Cell
 * @return true if removed, false if not found or not a Cell
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,get,"com.google.common.collect.AbstractTable:get(java.lang.Object,java.lang.Object)",79,83,"/**
* Retrieves value by row and column keys.
* @param rowKey key for the row
* @param columnKey key for the column
* @return value associated with the keys or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,count,com.google.common.collect.ConcurrentHashMultiset:count(java.lang.Object),142,146,"/**
* Counts occurrences of an element.
* @param element the element to count
* @return number of times the element occurs
*/","* Returns the number of occurrences of {@code element} in this multiset.
   *
   * @param element the element to look for
   * @return the nonnegative number of occurrences of the element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,removeExactly,"com.google.common.collect.ConcurrentHashMultiset:removeExactly(java.lang.Object,int)",314,340,"/**
 * Removes a specified number of occurrences of an element from the collection.
 * @param element the element to remove
 * @param occurrences the number of times to remove the element
 * @return true if successful, false if not enough occurrences were found
 */","* Removes exactly the specified number of occurrences of {@code element}, or makes no change if
   * this is not possible.
   *
   * <p>This method, in contrast to {@link #remove(Object, int)}, has no effect when the element
   * count is smaller than {@code occurrences}.
   *
   * @param element the element to remove
   * @param occurrences the number of occurrences of {@code element} to remove
   * @return {@code true} if the removal was possible (including if {@code occurrences} is zero)
   * @throws IllegalArgumentException if {@code occurrences} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,setCount,"com.google.common.collect.ConcurrentHashMultiset:setCount(java.lang.Object,int)",349,393,"/**
 * Sets the count for an element in the map.
 * @param element the element to set the count for
 * @param count the new count value
 * @return the old count value or 0 if no entry existed
 */","* Adds or removes occurrences of {@code element} such that the {@link #count} of the element
   * becomes {@code count}.
   *
   * @return the count of {@code element} in the multiset before this call
   * @throws IllegalArgumentException if {@code count} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,setCount,"com.google.common.collect.ConcurrentHashMultiset:setCount(java.lang.Object,int,int)",405,447,"/**
* Updates element's count atomically if old count matches expected value.
* @param element the element to update
* @param expectedOldCount the expected current count
* @param newCount the new count to set
* @return true if update successful, false otherwise
*/","* Sets the number of occurrences of {@code element} to {@code newCount}, but only if the count is
   * currently {@code expectedOldCount}. If {@code element} does not appear in the multiset exactly
   * {@code expectedOldCount} times, no changes will be made.
   *
   * @return {@code true} if the change was successful. This usually indicates that the multiset has
   *     been modified, but not always: in the case that {@code expectedOldCount == newCount}, the
   *     method will return {@code true} if the condition was met.
   * @throws IllegalArgumentException if {@code expectedOldCount} or {@code newCount} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,contains,com.google.common.collect.Maps$EntrySet:contains(java.lang.Object),4211,4220,"/**
 * Checks if the map contains a specified entry.
 * @param o the object to check for presence in the map
 * @return true if the map contains the entry, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,count,com.google.common.collect.Multimaps$Keys:count(java.lang.Object),1792,1796,"/**
* Counts occurrences of an element in the multimap.
* @param element key to search for in the multimap
* @return number of times the element appears as a key
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,"com.google.common.collect.StandardTable:remove(java.lang.Object,java.lang.Object)",158,173,"/**
* Removes a value by row and column keys.
* @param rowKey key for the row
* @param columnKey key for the column
* @return removed value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,containsKey,com.google.common.collect.AbstractMapBasedMultimap$AsMap:containsKey(java.lang.Object),1348,1351,"/**
 * Checks if the map contains the specified key.
 * @param key key whose presence in this map is to be tested
 * @return true if this map contains a mapping for the specified key
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsRow,com.google.common.collect.AbstractTable:containsRow(java.lang.Object),43,46,"/**
 * Checks if a row with the given key exists.
 * @param rowKey the key to check
 * @return true if the row exists, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsColumn,com.google.common.collect.AbstractTable:containsColumn(java.lang.Object),48,51,"/**
* Checks if the specified column key is present in the column map.
* @param columnKey the key to check for presence
* @return true if the column key exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,contains,"com.google.common.collect.AbstractTable:contains(java.lang.Object,java.lang.Object)",73,77,"/**
* Checks if a value exists at the specified row and column keys.
* @param rowKey key for the row
* @param columnKey key for the column
* @return true if a value exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsColumn,com.google.common.collect.StandardTable:containsColumn(java.lang.Object),91,102,"/**
* Checks if a column exists in any of the maps.
* @param columnKey key to search for
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsRow,com.google.common.collect.StandardTable:containsRow(java.lang.Object),104,107,"/**
* Checks if backing map contains specified row key.
* @param rowKey key to check in the backing map
* @return true if row key is present and not null; false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeValuesForKey,com.google.common.collect.AbstractMapBasedMultimap:removeValuesForKey(java.lang.Object),1148,1156,"/**
 * Removes all values associated with a given key.
 * @param key the key whose values are to be removed
 */",Removes all values for the provided key.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,remove,"com.google.common.collect.AbstractTable:remove(java.lang.Object,java.lang.Object)",95,100,"/**
* Removes value by row and column keys.
* @param rowKey key identifying the row
* @param columnKey key identifying the column
* @return removed value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,forEach,com.google.common.collect.Multimaps$UnmodifiableMultimap:forEach(java.util.function.BiConsumer),722,725,"/**
 * Applies a given action to each entry in this map.
 * @param consumer action to be performed on each entry
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeKeys,com.google.common.collect.MultimapBuilder:treeKeys(),134,137,"/**
* Creates a builder for a multimap with natural ordering of keys.
* @return Builder configured to use natural key ordering
*/","* Uses a naturally-ordered {@link TreeMap} to map keys to value collections.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in sorted order.
   *
   * <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be
   * safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be
   * cast to a {@link java.util.SortedMap}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,createAsMap,com.google.common.collect.LinkedListMultimap:createAsMap(),833,836,"/**
* Creates a map view of the multimap.
* @return Map where each key is associated with a collection of values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createAsMap,com.google.common.collect.Multimaps$MapMultimap:createAsMap(),1280,1283,"/**
 * Creates a map view of the multimap.
 * @return a new AsMap instance representing the map view
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,forMap,com.google.common.collect.Multimaps:forMap(java.util.Map),1131,1134,"/**
* Creates a SetMultimap from a given map.
* @param map the input map to convert
* @return a SetMultimap containing key-value pairs from the map
*/","* Returns a multimap view of the specified map. The multimap is backed by the map, so changes to
   * the map are reflected in the multimap, and vice versa. If the map is modified while an
   * iteration over one of the multimap's collection views is in progress (except through the
   * iterator's own {@code remove} operation, or through the {@code setValue} operation on a map
   * entry returned by the iterator), the results of the iteration are undefined.
   *
   * <p>The multimap supports mapping removal, which removes the corresponding mapping from the map.
   * It does not support any operations which might add mappings, such as {@code put}, {@code
   * putAll} or {@code replaceValues}.
   *
   * <p>The returned multimap will be serializable if the specified map is serializable.
   *
   * @param map the backing map for the returned multimap view",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$TransformedEntriesListMultimap:<init>(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer)",1616,1619,"/**
* Constructs a multimap with transformed entries.
* @param fromMultimap original multimap to transform
* @param transformer function to apply to each entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformEntries,"com.google.common.collect.Multimaps:transformEntries(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer)",1438,1443,"/**
 * Transforms entries of a multimap.
 * @param fromMap original multimap with keys and values
 * @param transformer function to transform values
 * @return new multimap with transformed values
 */","* Returns a view of a multimap whose values are derived from the original multimap's entries. In
   * contrast to {@link #transformValues}, this method's entry-transformation logic may depend on
   * the key as well as the value.
   *
   * <p>All other properties of the transformed multimap, such as iteration order, are left intact.
   * For example, the code:
   *
   * {@snippet :
   * SetMultimap<String, Integer> multimap =
   *     ImmutableSetMultimap.of(""a"", 1, ""a"", 4, ""b"", -6);
   * EntryTransformer<String, Integer, String> transformer =
   *     new EntryTransformer<String, Integer, String>() {
   *       public String transformEntry(String key, Integer value) {
   *          return (value >= 0) ? key : ""no"" + key;
   *       }
   *     };
   * Multimap<String, String> transformed =
   *     Multimaps.transformEntries(multimap, transformer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=[a, a], b=[nob]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys and null values provided
   * that the transformer is capable of accepting null inputs. The transformed multimap might
   * contain null values if the transformer sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless,
   * since there is not a definition of {@code equals} or {@code hashCode} for general collections,
   * and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a
   * {@code Set}.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap
   * doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed multimap.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,addAll,com.google.common.collect.ImmutableMultiset$Builder:addAll(java.lang.Iterable),559,569,"/**
* Adds all elements from the given iterable.
* @param elements iterable containing elements to add
* @return this builder instance
*/","* Adds each element of {@code elements} to the {@code ImmutableMultiset}.
     *
     * @param elements the {@code Iterable} to add to the {@code ImmutableMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,addAllImpl,"com.google.common.collect.Multisets:addAllImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",911,918,"/**
* Adds all elements from another multiset to this one.
* @param self the target multiset
* @param elements the source multiset containing elements to add
* @return true if any element was added, false if the source is empty
*/",A specialization of {@code addAllImpl} for when {@code elements} is itself a Multiset.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,retainOccurrences,"com.google.common.collect.Multisets:retainOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",716,720,"/**
* Retains only the elements in multisetToModify that are also in multisetToRetain.
* @param multisetToModify the multiset to modify
* @param multisetToRetain the multiset of elements to retain
* @return true if any elements were removed, false otherwise
*/","* Modifies {@code multisetToModify} so that its count for an element {@code e} is at most {@code
   * multisetToRetain.count(e)}.
   *
   * <p>To be precise, {@code multisetToModify.count(e)} is set to {@code
   * Math.min(multisetToModify.count(e), multisetToRetain.count(e))}. This is similar to {@link
   * #intersection(Multiset, Multiset) intersection} {@code (multisetToModify, multisetToRetain)},
   * but mutates {@code multisetToModify} instead of returning a view.
   *
   * <p>In contrast, {@code multisetToModify.retainAll(multisetToRetain)} keeps all occurrences of
   * elements that appear at all in {@code multisetToRetain}, and deletes all occurrences of all
   * other elements.
   *
   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,removeOccurrences,"com.google.common.collect.Multisets:removeOccurrences(com.google.common.collect.Multiset,java.lang.Iterable)",767,781,"/**
* Removes all occurrences of elements in one collection from another.
* @param multisetToModify the multiset to modify
* @param occurrencesToRemove the iterable containing elements to remove
* @return true if any element was removed, false otherwise
*/","* For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one
   * occurrence of {@code e} in {@code multisetToModify}.
   *
   * <p>Equivalently, this method modifies {@code multisetToModify} so that {@code
   * multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) -
   * Iterables.frequency(occurrencesToRemove, e))}.
   *
   * <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll
   * removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear
   * in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit
   * sometimes more efficient than, the following:
   *
   * {@snippet :
   * for (E e : occurrencesToRemove) {
   *   multisetToModify.remove(e);
   * }
   * }
   *
   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation
   * @since 18.0 (present in 10.0 with a requirement that the second parameter be a {@code
   *     Multiset})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,retainAll,com.google.common.collect.AbstractMultiset:retainAll(java.util.Collection),117,121,"/**
* Retains only the elements in this set that are contained in the specified collection.
* @param elementsToRetain collection of elements to retain
* @return true if this set was modified as a result of the call
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardRetainAll,com.google.common.collect.ForwardingMultiset:standardRetainAll(java.util.Collection),202,205,"/**
* Retains only the specified elements in this multiset.
* @param elementsToRetain collection of elements to retain
* @return true if this multiset was modified as a result of the call
*/","* A sensible definition of {@link #retainAll} in terms of the {@code retainAll} method of {@link
   * #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #retainAll}
   * to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drain,"com.google.common.collect.Queues:drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration)",291,299,"/**
* Transfers elements from queue to collection with a timeout.
* @param q source queue
* @param buffer destination collection
* @param numElements max number of elements to transfer
* @param timeout maximum time to wait
* @return number of elements transferred
* @throws InterruptedException if interrupted while waiting
*/","* Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code
   * numElements} elements are not available, it will wait for them up to the specified timeout.
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up
   * @return the number of elements transferred
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drainUninterruptibly,"com.google.common.collect.Queues:drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration)",361,368,"/**
 * Drains elements from a queue into a collection uninterruptibly.
 * @param q source BlockingQueue to drain elements from
 * @param buffer destination Collection to add drained elements
 * @param numElements max number of elements to transfer
 * @param timeout maximum time to wait for elements
 * @return number of elements actually transferred
 */","* Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, Duration)}, but with a
   * different behavior in case it is interrupted while waiting. In that case, the operation will
   * continue as usual, and in the end the thread's interruption status will be set (no {@code
   * InterruptedException} is thrown).
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up
   * @return the number of elements transferred
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,apply,com.google.common.collect.Range:apply(java.lang.Comparable),417,422,"/**
* Checks if collection contains specified element.
* @param input element to check
* @return true if element is present, false otherwise
*/","* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains}
   *     instead.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,containsAll,com.google.common.collect.Range:containsAll(java.lang.Iterable),440,460,"/**
 * Checks if all elements in the given iterable are contained.
 * @param values iterable of elements to check
 * @return true if all elements are present, false otherwise
 */","* Returns {@code true} if every element in {@code values} is {@linkplain #contains contained} in
   * this range.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,contains,com.google.common.collect.RegularContiguousSet:contains(java.lang.Object),171,183,"/**
* Checks if the collection contains a specified element.
* @param object the element to check for containment
* @return true if the element is contained, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,contains,com.google.common.collect.TreeRangeMap$RangeMapEntry:contains(java.lang.Comparable),107,109,"/**
 * Checks if the key contains the specified value.
 * @param value the value to check for
 * @return true if the key contains the value, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,forEach,com.google.common.collect.RegularImmutableBiMap$Inverse:forEach(java.util.function.BiConsumer),216,220,"/**
 * Applies a given action to each entry in the map with values and keys swapped.
 * @param action the action to be performed on each entry
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,lower,com.google.common.collect.RegularImmutableSortedSet:lower(java.lang.Object),223,227,"/**
 * Finds the greatest element less than the given element.
 * @param element the reference element
 * @return the greatest element less than the given element or null if none exists
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,floor,com.google.common.collect.RegularImmutableSortedSet:floor(java.lang.Object),229,233,"/**
* Finds the greatest element less than or equal to the given element.
* @param element the element to compare against
* @return the floor element or null if no such element exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,ceiling,com.google.common.collect.RegularImmutableSortedSet:ceiling(java.lang.Object),235,239,"/**
* Finds the smallest element greater than or equal to the given element.
* @param element the element to compare with
* @return the ceiling element or null if none exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,higher,com.google.common.collect.RegularImmutableSortedSet:higher(java.lang.Object),241,245,"/**
* Returns the least element greater than the given element.
* @param element the reference element
* @return the next greater element or null if none exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,forEachPair,"com.google.common.collect.Streams:forEachPair(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiConsumer)",395,409,"/**
* Applies a BiConsumer to each pair of elements from two streams.
* @param streamA first stream of elements
* @param streamB second stream of elements
* @param consumer action to perform on each pair of elements
*/","* Invokes {@code consumer} once for each pair of <i>corresponding</i> elements in {@code streamA}
   * and {@code streamB}. If one stream is longer than the other, the extra elements are silently
   * ignored. Elements passed to the consumer are guaranteed to come from the same position in their
   * respective source streams. For example:
   *
   * {@snippet :
   * Streams.forEachPair(
   *   Stream.of(""foo1"", ""foo2"", ""foo3""),
   *   Stream.of(""bar1"", ""bar2""),
   *   (arg1, arg2) -> System.out.println(arg1 + "":"" + arg2)
   * }
   *
   * <p>will print:
   *
   * {@snippet :
   * foo1:bar1
   * foo2:bar2
   * }
   *
   * <p><b>Warning:</b> If either supplied stream is a parallel stream, the same correspondence
   * between elements will be made, but the order in which those pairs of elements are passed to the
   * consumer is <i>not</i> defined.
   *
   * <p>Note that many usages of this method can be replaced with simpler calls to {@link #zip}.
   * This method behaves equivalently to {@linkplain #zip zipping} the stream elements into
   * temporary pair objects and then using {@link Stream#forEach} on that stream.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedCollection:<init>(java.util.Collection,java.lang.Object)",127,129,"/**
 * Constructs a synchronized collection.
 * @param delegate underlying collection to wrap
 * @param mutex object used as lock; if null, uses delegate itself
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedEntry:<init>(java.util.Map$Entry,java.lang.Object)",1793,1795,"/**
 * Wraps an entry with synchronization using a mutex.
 * @param delegate original map entry to wrap
 * @param mutex object used for locking
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedMap:<init>(java.util.Map,java.lang.Object)",1068,1070,"/**
 * Constructs a synchronized map.
 * @param delegate underlying map to be wrapped
 * @param mutex object used as the lock; if null, uses delegate itself
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedMultimap:<init>(com.google.common.collect.Multimap,java.lang.Object)",608,610,"/**
 * Constructs a synchronized multimap.
 * @param delegate backing multimap
 * @param mutex synchronization object (null uses delegate)
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedTable:<init>(com.google.common.collect.Table,java.lang.Object)",2042,2044,"/**
 * Initializes a synchronized table with a delegate and an optional mutex.
 * @param delegate the underlying table to synchronize access to
 * @param mutex object used for locking; if null, uses the table itself
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toTable,"com.google.common.collect.TableCollectors:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",81,100,"/**
 * Collects elements into a table.
 * @param rowFunction extracts the row key from an element
 * @param columnFunction extracts the column key from an element
 * @param valueFunction extracts the value from an element
 * @param tableSupplier provides a new table instance
 * @return Table containing collected elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,toTable,"com.google.common.collect.Tables:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)",100,114,"/**
 * Collects elements into a table.
 * @param rowFunction extracts row key from element
 * @param columnFunction extracts column key from element
 * @param valueFunction extracts value from element
 * @param mergeFunction merges values if there are conflicts
 * @param tableSupplier provides the table implementation
 * @return Table with collected elements
 */","* Returns a {@link Collector} that accumulates elements into a {@code Table} created using the
   * specified supplier, whose cells are generated by applying the provided mapping functions to the
   * input elements. Cells are inserted into the generated {@code Table} in encounter order.
   *
   * <p>If multiple input elements map to the same row and column, the specified merging function is
   * used to combine the values. Like {@link
   * java.util.stream.Collectors#toMap(java.util.function.Function, java.util.function.Function,
   * BinaryOperator, java.util.function.Supplier)}, this Collector throws a {@code
   * NullPointerException} on null values returned from {@code valueFunction}, and treats nulls
   * returned from {@code mergeFunction} as removals of that row/column pair.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,transformValues,"com.google.common.collect.Tables:transformValues(com.google.common.collect.Table,com.google.common.base.Function)",401,409,"/**
* Transforms values in a table using a specified function.
* @param fromTable original table with values to transform
* @param function transformation function for values
* @return new Table with transformed values
*/","* Returns a view of a table where each value is transformed by a function. All other properties
   * of the table, such as iteration order, are left intact.
   *
   * <p>Changes in the underlying table are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying table.
   *
   * <p>It's acceptable for the underlying table to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed table might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned table is not thread-safe or serializable, even if the underlying table is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned
   * table to be a view, but it means that the function will be applied many times for bulk
   * operations like {@link Table#containsValue} and {@code Table.toString()}. For this to perform
   * well, {@code function} should be fast. To avoid lazy evaluation when the returned table doesn't
   * need to be a view, copy the returned table into a new table of your choosing.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,transpose,com.google.common.collect.Tables:transpose(com.google.common.collect.Table),213,218,"/**
 * Transposes a given table.
 * @param table input Table to be transposed
 * @return transposed Table with rows and columns swapped
 */","* Creates a transposed view of a given table that flips its row and column keys. In other words,
   * calling {@code get(columnKey, rowKey)} on the generated table always returns the same value as
   * calling {@code get(rowKey, columnKey)} on the original table. Updating the original table
   * changes the contents of the transposed table and vice versa.
   *
   * <p>The returned table supports update operations as long as the input table supports the
   * analogous operation with swapped rows and columns. For example, in a {@link HashBasedTable}
   * instance, {@code rowKeySet().iterator()} supports {@code remove()} but {@code
   * columnKeySet().iterator()} doesn't. With a transposed {@link HashBasedTable}, it's the other
   * way around.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,<init>,com.google.common.collect.TransformedListIterator:<init>(java.util.ListIterator),33,35,"/**
 * Wraps a backing iterator.
 * @param backingIterator the original iterator to wrap
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,expand,com.google.common.collect.TreeTraverser$PostOrderIterator:expand(java.lang.Object),243,245,"/**
 * Creates a new PostOrderNode with given value and children iterator.
 * @param t node value
 * @return PostOrderNode instance
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedEscaperMap.java,create,com.google.common.escape.ArrayBasedEscaperMap:create(java.util.Map),46,48,"/**
* Creates an ArrayBasedEscaperMap from character replacements.
* @param replacements map of characters to their replacement strings
* @return ArrayBasedEscaperMap instance
*/","* Returns a new ArrayBasedEscaperMap for creating ArrayBasedCharEscaper or
   * ArrayBasedUnicodeEscaper instances.
   *
   * @param replacements a map of characters to their escaped representations",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,addEscapes,"com.google.common.escape.CharEscaperBuilder:addEscapes(char[],java.lang.String)",94,101,"/**
* Adds escape sequences for specified characters.
* @param cs array of characters to escape
* @param r replacement string for escapes
* @return CharEscaperBuilder instance for method chaining
*/",Add multiple mappings at once for a particular index.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,nextEscapeIndex,"com.google.common.escape.UnicodeEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)",130,140,"/**
* Finds the next index to escape in a CharSequence.
* @param csq the CharSequence to search
* @param start starting index for the search
* @param end ending index for the search
* @return index of the next character to escape, or end if none found
*/","* Scans a sub-sequence of characters from a given {@link CharSequence}, returning the index of
   * the next character that requires escaping.
   *
   * <p><b>Note:</b> When implementing an escaper, it is a good idea to override this method for
   * efficiency. The base class implementation determines successive Unicode code points and invokes
   * {@link #escape(int)} for each of them. If the semantics of your escaper are such that code
   * points in the supplementary range are either all escaped or all unescaped, this method can be
   * implemented more efficiently using {@link CharSequence#charAt(int)}.
   *
   * <p>Note however that if your escaper does not escape characters in the supplementary range, you
   * should either continue to validate the correctness of any surrogate characters encountered or
   * provide a clear warning to users that your escaper does not validate its input.
   *
   * <p>See {@link com.google.common.net.PercentEscaper} for an example.
   *
   * @param csq a sequence of characters
   * @param start the index of the first character to be scanned
   * @param end the index immediately after the last character to be scanned
   * @throws IllegalArgumentException if the scanned sub-sequence of {@code csq} contains invalid
   *     surrogate pairs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,invokeSubscriberMethod,com.google.common.eventbus.Subscriber$SynchronizedSubscriber:invokeSubscriberMethod(java.lang.Object),138,143,"/**
* Invokes subscriber method with synchronization.
* @param event the event object to pass to the subscriber method
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,context,com.google.common.eventbus.Subscriber:context(java.lang.Object),98,100,"/**
 * Creates an exception context for a subscriber.
 * @param event the event causing the exception
 * @return SubscriberExceptionContext object
 */",Gets the context for the given event.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,"com.google.common.graph.AbstractGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",157,162,"/**
* Checks if there is an edge connecting two nodes.
* @param nodeU first node
* @param nodeV second node
* @return true if an edge exists between nodeU and nodeV, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,"com.google.common.graph.AbstractValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",157,162,"/**
* Checks if there is an edge connecting two nodes.
* @param nodeU source node
* @param nodeV target node
* @return true if edge exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,hasEdgeConnecting,com.google.common.graph.AbstractNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair),231,238,"/**
* Checks if there's an edge connecting the given endpoints.
* @param endpoints pair of nodes to check connection between
* @return true if an edge exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,<init>,com.google.common.graph.UndirectedMultiNetworkConnections:<init>(java.util.Map),45,47,"/**
 * Constructs an undirected multi-network with given incident edges.
 * @param incidentEdges map of elements to their associated network connections
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,<init>,com.google.common.graph.UndirectedNetworkConnections:<init>(java.util.Map),37,39,"/**
 * Constructs an undirected network connection.
 * @param incidentEdgeMap map of elements to their incident edges
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,com.google.common.graph.DirectedGraphConnections$NodeConnection$Pred:<init>(java.lang.Object),80,82,"/**
 * Constructs a predicate with the given node.
 * @param node the node to be used in the predicate
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,com.google.common.graph.DirectedGraphConnections$NodeConnection$Succ:<init>(java.lang.Object),101,103,"/**
 * Constructs a Succ instance with the given node.
 * @param node the N node to be associated with this Succ instance
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,edgesConnecting,com.google.common.graph.DirectedNetworkConnections:edgesConnecting(java.lang.Object),62,65,"/**
 * Returns edges connecting to the specified node.
 * @param node target node
 * @return set of edges connected to the node
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,edgesConnecting,com.google.common.graph.UndirectedNetworkConnections:edgesConnecting(java.lang.Object),54,57,"/**
* Returns edges connected to a given node.
* @param node the node to find connecting edges for
* @return a set of edges connected to the specified node
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,<init>,com.google.common.graph.MapRetrievalCache:<init>(java.util.Map),35,37,"/**
 * Constructs a cache using the provided backing map.
 * @param backingMap the underlying map to store cached data
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,get,com.google.common.graph.MapIteratorCache:get(java.lang.Object),82,91,"/**
* Retrieves the value associated with the given key.
* @param key unique identifier for the value
* @return value associated with the key or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,of,com.google.common.graph.UndirectedGraphConnections:of(com.google.common.graph.ElementOrder),47,58,"/**
* Creates an UndirectedGraphConnections instance with specified edge order.
* @param incidentEdgeOrder type of edge ordering (UNORDERED or STABLE)
* @return UndirectedGraphConnections object based on edge order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,sequentialFunnel,com.google.common.hash.Funnels:sequentialFunnel(com.google.common.hash.Funnel),173,176,"/**
* Creates a funnel for processing iterables sequentially.
* @param elementFunnel funnel for individual elements
* @return SequentialFunnel instance
*/","* Returns a funnel that processes an {@code Iterable} by funneling its elements in iteration
   * order with the specified funnel. No separators are added between the elements.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,asOutputStream,com.google.common.hash.Funnels:asOutputStream(com.google.common.hash.PrimitiveSink),246,248,"/**
 * Converts a PrimitiveSink to an OutputStream.
 * @param sink the PrimitiveSink to wrap
 * @return OutputStream wrapping the given sink
 */","* Wraps a {@code PrimitiveSink} as an {@link OutputStream}, so it is easy to {@link Funnel#funnel
   * funnel} an object to a {@code PrimitiveSink} if there is already a way to write the contents of
   * the object to an {@code OutputStream}.
   *
   * <p>The {@code close} and {@code flush} methods of the returned {@code OutputStream} do nothing,
   * and no method throws {@code IOException}.
   *
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,stringFunnel,com.google.common.hash.Funnels:stringFunnel(java.nio.charset.Charset),86,88,"/**
* Creates a funnel for CharSequences using specified charset.
* @param charset character set to use
* @return Funnel object for CharSequence
*/","* Returns a funnel that encodes the characters of a {@code CharSequence} with the specified
   * {@code Charset}.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,asWriter,com.google.common.io.CharStreams:asWriter(java.lang.Appendable),346,351,"/**
 * Converts an Appendable to a Writer.
 * @param target the Appendable to convert
 * @return a Writer instance, either the original or wrapped in AppendableWriter
 */","* Returns a Writer that sends all output to the given {@link Appendable} target. Closing the
   * writer will close the target if it is {@link Closeable}, and flushing the writer will flush the
   * target if it is {@link java.io.Flushable}.
   *
   * @param target the object to which output will be sent
   * @return a new Writer object, unless target is a Writer, in which case the target is returned",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,canDecode,com.google.common.io.BaseEncoding$StandardBaseEncoding:canDecode(java.lang.CharSequence),738,751,"/**
 * Checks if the input characters can be decoded.
 * @param chars sequence of characters to decode
 * @return true if all characters are valid for decoding, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,trimTrailingPadding,com.google.common.io.BaseEncoding$SeparatedBaseEncoding:trimTrailingPadding(java.lang.CharSequence),1153,1156,"/**
 * Trims trailing padding from the given character sequence.
 * @param chars input character sequence
 * @return trimmed character sequence
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeChecked,com.google.common.io.BaseEncoding:decodeChecked(java.lang.CharSequence),230,236,"/**
 * Decodes a CharSequence to a byte array.
 * @param chars input characters to decode
 * @return decoded byte array
 * @throws DecodingException if decoding fails
 */","* Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the
   * inverse operation to {@link #encode(byte[])}.
   *
   * @throws DecodingException if the input is not a valid encoded string according to this
   *     encoding.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,openStream,com.google.common.io.CharSource$CharSequenceCharSource:openStream(),545,548,"/**
 * Opens a character stream from the sequence.
 * @return Reader object for reading from the sequence
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,create,com.google.common.io.Closer:create(),85,87,"/**
 * Creates a new Closer instance with suppressing suppressor.
 * @return Closer object configured to suppress exceptions
 */",Creates a new {@link Closer}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/PatternFilenameFilter.java,<init>,com.google.common.io.PatternFilenameFilter:<init>(java.lang.String),44,46,"/**
 * Constructs a filter using a regex pattern.
 * @param patternStr regular expression string to match filenames
 */","* Constructs a pattern file name filter object.
   *
   * @param patternStr the pattern string on which to filter file names
   * @throws PatternSyntaxException if pattern compilation fails (runtime)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,log2,"com.google.common.math.BigIntegerMath:log2(java.math.BigInteger,java.math.RoundingMode)",84,121,"/**
* Computes the base-2 logarithm of a BigInteger with specified rounding mode.
* @param x the BigInteger to compute the log for, must be positive
* @param mode the RoundingMode to apply
* @return the computed logarithm as an integer
*/","* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of two",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,cast,"com.google.common.collect.ImmutableClassToInstanceMap$Builder:cast(java.lang.Class,java.lang.Object)",128,130,"/**
* Casts an object to a specified type.
* @param type target class type
* @param value object to be cast
* @return object cast to the specified type
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,cast,"com.google.common.collect.MutableClassToInstanceMap:cast(java.lang.Class,java.lang.Object)",181,184,"/**
* Casts an object to a specified type.
* @param type target class type
* @param value object to be cast
* @return casted object or null if incompatible
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,parseUnsignedByte,com.google.common.primitives.UnsignedBytes:parseUnsignedByte(java.lang.String),212,215,"/**
* Parses an unsigned byte from a string.
* @param string the string to parse
* @return parsed unsigned byte value
*/","* Returns the unsigned {@code byte} value represented by the given decimal string.
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte}
   *     value
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Byte#parseByte(String)})
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,parseUnsignedInt,com.google.common.primitives.UnsignedInts:parseUnsignedInt(java.lang.String),342,345,"/**
* Parses a string as an unsigned decimal integer.
* @param s string to be parsed
* @return parsed integer value
*/","* Returns the unsigned {@code int} value represented by the given decimal string.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String)} instead.
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value
   * @throws NullPointerException if {@code s} is null (in contrast to {@link
   *     Integer#parseInt(String)})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,<init>,"com.google.common.reflect.ClassPath$ClassInfo:<init>(java.io.File,java.lang.String,java.lang.ClassLoader)",301,304,"/**
* Constructs a new ClassInfo instance.
* @param file the File object representing the class
* @param resourceName the name of the resource
* @param loader the ClassLoader to use for loading
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,<init>,com.google.common.reflect.Invokable$ConstructorInvokable:<init>(java.lang.reflect.Constructor),424,427,"/**
 * Initializes with a specified constructor.
 * @param constructor the constructor to be used
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,<init>,com.google.common.reflect.Invokable$MethodInvokable:<init>(java.lang.reflect.Method),360,363,"/**
 * Constructs a MethodInvokable instance.
 * @param method the Method to be invoked
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,forLookup,com.google.common.reflect.TypeResolver$TypeVariableKey:forLookup(java.lang.reflect.Type),579,585,"/**
* Creates a TypeVariableKey for lookup.
* @param t the type to check
* @return TypeVariableKey if t is a TypeVariable, otherwise null
*/",Wraps {@code t} in a {@code TypeVariableKey} if it's a type variable.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,<init>,"com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction)",197,202,"/**
* Wraps a future with error handling and fallback.
* @param input original future to wrap
* @param exceptionType type of exceptions to catch
* @param fallback function to execute on caught exception
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,<init>,"com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function)",228,233,"/**
 * Constructs a CatchingFuture.
 * @param input the original ListenableFuture to wrap
 * @param exceptionType the type of exception to catch
 * @param fallback function to compute a result from the caught exception
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,getFutureValue,com.google.common.util.concurrent.AbstractFuture:getFutureValue(com.google.common.util.concurrent.ListenableFuture),611,684,"/**
 * Retrieves the value from a ListenableFuture.
 * Handles different types of futures and exceptions.
 * @param future the future to retrieve the value from
 * @return the result or a wrapped exception if failed
 */","* Returns a value that satisfies the contract of the {@link #value} field based on the state of
   * given future.
   *
   * <p>This is approximately the inverse of {@link #getDoneValue(Object)}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,<init>,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:<init>(java.time.Duration),751,753,"/**
 * Constructs a schedule with a specified delay.
 * @param delay duration of the delay before execution
 */","* @param delay the time from now to delay execution
       * @since 31.1 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,<init>,"com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)",217,220,"/**
 * Wraps an input future with an asynchronous transformation function.
 * @param inputFuture the future to transform
 * @param function the transformation function to apply asynchronously
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,<init>,"com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)",247,250,"/**
 * Transforms an input future using a specified function.
 * @param inputFuture the original future to transform
 * @param function the transformation function to apply
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,afterDone,com.google.common.util.concurrent.AggregateFuture:afterDone(),77,95,"/**
* Cancels futures and releases resources after task completion.
* @param localFutures collection of futures to cancel
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,releaseResources,com.google.common.util.concurrent.CollectionFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason),76,80,"/**
 * Releases resources based on the given reason.
 * @param reason the reason for releasing resources
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,releaseResources,com.google.common.util.concurrent.CombinedFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason),69,82,"/**
 * Releases resources based on the reason for release.
 * @param reason the reason for releasing resources
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,create,com.google.common.util.concurrent.AtomicLongMap:create(),69,71,"/**
 * Creates an AtomicLongMap with a ConcurrentHashMap.
 * @return AtomicLongMap instance backed by ConcurrentHashMap
 */",Creates an {@code AtomicLongMap}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,accumulateAndGet,"com.google.common.util.concurrent.AtomicLongMap:accumulateAndGet(java.lang.Object,long,java.util.function.LongBinaryOperator)",184,188,"/**
* Accumulates value for a key using the provided function.
* @param key key with which the accumulated value is to be associated
* @param x value to be accumulated
* @param accumulatorFunction function that defines how to accumulate values
* @return updated value after accumulation
*/","* Updates the value currently associated with {@code key} by combining it with {@code x} via the
   * specified accumulator function, returning the new value. The previous value associated with
   * {@code key} (or zero, if there is none) is passed as the first argument to {@code
   * accumulatorFunction}, and {@code x} is passed as the second argument.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndAccumulate,"com.google.common.util.concurrent.AtomicLongMap:getAndAccumulate(java.lang.Object,long,java.util.function.LongBinaryOperator)",198,202,"/**
* Atomically accumulates a value for the given key.
* @param key key with which the specified value is to be associated
* @param x value to accumulate
* @param accumulatorFunction function defining how to accumulate values
* @return updated value after accumulation
*/","* Updates the value currently associated with {@code key} by combining it with {@code x} via the
   * specified accumulator function, returning the old value. The previous value associated with
   * {@code key} (or zero, if there is none) is passed as the first argument to {@code
   * accumulatorFunction}, and {@code x} is passed as the second argument.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,put,"com.google.common.util.concurrent.AtomicLongMap:put(java.lang.Object,long)",208,211,"/**
 * Updates the value associated with the given key.
 * @param key the key to update
 * @param newValue the new value to set
 * @return the previous value associated with the key
 */","* Associates {@code newValue} with {@code key} in this map, and returns the value previously
   * associated with {@code key}, or zero if there was no such value.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,applyAsyncClosingFunction,"com.google.common.util.concurrent.ClosingFuture$CloseableList:applyAsyncClosingFunction(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.lang.Object)",2195,2208,"/**
 * Applies an asynchronous transformation function.
 * @param transformation the transformation function to apply
 * @param input the input value for the transformation
 * @return a FluentFuture containing the transformed result
 * @throws Exception if an error occurs during transformation
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,eventuallyClose,"com.google.common.util.concurrent.ClosingFuture$DeferredCloser:eventuallyClose(java.lang.Object,java.util.concurrent.Executor)",232,241,"/**
* Schedules a closable resource to be closed by an executor.
* @param closeable the resource to close
* @param closingExecutor executor to perform the closure
* @return the original closeable resource
*/","* Captures an object to be closed when a {@link ClosingFuture} pipeline is done.
     *
     * <p>For users of the {@code -jre} flavor of Guava, the object can be any {@code
     * AutoCloseable}. For users of the {@code -android} flavor, the object must be a {@code
     * Closeable}. (For more about the flavors, see <a
     * href=""https://github.com/google/guava#adding-guava-to-your-build"">Adding Guava to your
     * build</a>.)
     *
     * <p>Be careful when targeting an older SDK than you are building against (most commonly when
     * building for Android): Ensure that any object you pass implements the interface not just in
     * your current SDK version but also at the oldest version you support. For example, <a
     * href=""https://developer.android.com/sdk/api_diff/16/"">API Level 16</a> is the first version
     * in which {@code Cursor} is {@code Closeable}. To support older versions, pass a wrapper
     * {@code Closeable} with a method reference like {@code cursor::close}.
     *
     * <p>Note that this method is still binary-compatible between flavors because the erasure of
     * its parameter type is {@code Object}, not {@code AutoCloseable} or {@code Closeable}.
     *
     * @param closeable the object to be closed (see notes above)
     * @param closingExecutor the object will be closed on this executor
     * @return the first argument",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,call,"com.google.common.util.concurrent.ClosingFuture$Peeker:call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)",1159,1170,"/**
* Executes a combining callable and manages resources.
* @param combiner the callable to execute
* @param closeables list of resources to close
* @return result of the combining callable
* @throws Exception if execution fails
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,callAsync,"com.google.common.util.concurrent.ClosingFuture$Peeker:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)",1172,1184,"/**
* Executes an asynchronous callable and manages resources.
* @param combiner the callable to execute asynchronously
* @param closeables list of resources to manage
* @return FluentFuture representing the result of the async call
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,provideValueAndCloser,"com.google.common.util.concurrent.ClosingFuture:provideValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,com.google.common.util.concurrent.ClosingFuture)",1078,1081,"/**
 * Provides a value and closer to the consumer.
 * @param consumer accepts ValueAndCloser object
 * @param closingFuture future for closing resources
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newInstance,com.google.common.util.concurrent.CycleDetectingLockFactory:newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy),231,233,"/**
* Creates a new instance of CycleDetectingLockFactory.
* @param policy locking policy to be applied
* @return CycleDetectingLockFactory with the specified policy
*/",Creates a new factory with the specified policy.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,doStart,com.google.common.util.concurrent.AbstractIdleService$DelegateService:doStart(),59,72,"/**
* Starts the component with a renaming decorator.
* Executes startup logic and notifies of success or failure.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,doStop,com.google.common.util.concurrent.AbstractIdleService$DelegateService:doStop(),74,87,"/**
* Stops the service, shuts it down, and handles exceptions.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,run,com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task:run(),218,250,"/**
 * Executes a scheduled task with error handling and cleanup.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",54,71,"/**
* Executes a callable with a specified timeout.
* @param callable the task to execute
* @param timeoutDuration the maximum time to wait for execution
* @param timeoutUnit the unit of time for the timeout
* @return the result of the callable or throws an exception if timed out or interrupted
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/InterruptibleTask.java,run,com.google.common.util.concurrent.InterruptibleTask:run(),56,93,"/**
 * Executes task in a thread, ensuring proper interruption handling.
 * Sets the runner thread before checking if done to prevent race conditions.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,<init>,com.google.common.util.concurrent.SmoothRateLimiter:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch),332,334,"/**
 * Initializes a SmoothRateLimiter with a given stopwatch.
 * @param stopwatch to manage time intervals
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,newSequentialExecutor,com.google.common.util.concurrent.MoreExecutors:newSequentialExecutor(java.util.concurrent.Executor),441,444,"/**
 * Creates a sequential executor using a delegate.
 * @param delegate the underlying executor to use
 * @return a SequentialExecutor instance
 */","* Returns an {@link Executor} that runs each task executed sequentially, such that no two tasks
   * are running concurrently.
   *
   * <p>{@linkplain Executor#execute executed} tasks have a happens-before order as defined in the
   * Java Language Specification. Tasks execute with the same happens-before order that the function
   * calls to {@link Executor#execute execute()} that submitted those tasks had.
   *
   * <p>The executor uses {@code delegate} in order to {@link Executor#execute execute} each task in
   * turn, and does not create any threads of its own.
   *
   * <p>After execution begins on a thread from the {@code delegate} {@link Executor}, tasks are
   * polled and executed from a task queue until there are no more tasks. The thread will not be
   * released until there are no more tasks to run.
   *
   * <p>If a task is submitted while a thread is executing tasks from the task queue, the thread
   * will not be released until that submitted task is also complete.
   *
   * <p>If a task is {@linkplain Thread#interrupt interrupted} while a task is running:
   *
   * <ol>
   *   <li>execution will not stop until the task queue is empty.
   *   <li>tasks will begin execution with the thread marked as not interrupted - any interruption
   *       applies only to the task that was running at the point of interruption.
   *   <li>if the thread was interrupted before the SequentialExecutor's worker begins execution,
   *       the interrupt will be restored to the thread after it completes so that its {@code
   *       delegate} Executor may process the interrupt.
   *   <li>subtasks are run with the thread uninterrupted and interrupts received during execution
   *       of a task are ignored.
   * </ol>
   *
   * <p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking.
   * If an {@code Error} is thrown, the error will propagate and execution will stop until the next
   * time a task is submitted.
   *
   * <p>When an {@code Error} is thrown by an executed task, previously submitted tasks may never
   * run. An attempt will be made to restart execution on the next call to {@code execute}. If the
   * {@code delegate} has begun to reject execution, the previously submitted tasks may never run,
   * despite not throwing a RejectedExecutionException synchronously with the call to {@code
   * execute}. If this behaviour is problematic, use an Executor with a single thread (e.g. {@link
   * Executors#newSingleThreadExecutor}).
   *
   * @since 23.3 (since 23.1 as {@code sequentialExecutor})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,create,com.google.common.util.concurrent.SimpleTimeLimiter:create(java.util.concurrent.ExecutorService),71,73,"/**
 * Creates a SimpleTimeLimiter with the given ExecutorService.
 * @param executor the ExecutorService to use
 * @return a new SimpleTimeLimiter instance
 */","* Creates a TimeLimiter instance using the given executor service to execute method calls.
   *
   * <p><b>Warning:</b> using a bounded executor may be counterproductive! If the thread pool fills
   * up, any time callers spend waiting for a thread may count toward their time limit, and in this
   * case the call may even time out before the target method is ever invoked.
   *
   * @param executor the ExecutorService that will execute the method calls on the target objects;
   *     for example, a {@link Executors#newCachedThreadPool()}.
   * @since 22.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,joinUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread,java.time.Duration)",185,189,"/**
* Waits for thread completion with a timeout.
* @param toJoin the thread to wait for
* @param timeout maximum time to wait
*/","* Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)}
   * uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingScheduledExecutorService.java,<init>,com.google.common.util.concurrent.WrappingScheduledExecutorService:<init>(java.util.concurrent.ScheduledExecutorService),39,42,"/**
 * Initializes WrappingScheduledExecutorService with a delegate.
 * @param delegate ScheduledExecutorService to be wrapped
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,addOutEdge,"com.google.common.graph.DirectedMultiNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",133,140,"/**
* Adds an outgoing edge and updates the successor set.
* @param edge the edge to add
* @param node the target node of the edge
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,addInEdge,"com.google.common.graph.AbstractUndirectedNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",89,94,"/**
* Adds an incoming edge to the node.
* @param edge the edge to be added
* @param node the target node of the edge
* @param isSelfLoop indicates if the edge is a self-loop
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,addOutEdge,"com.google.common.graph.UndirectedMultiNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",109,116,"/**
 * Adds an outgoing edge and updates adjacent nodes.
 * @param edge the edge to add
 * @param node the target node of the edge
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,unordered,com.google.common.graph.ElementOrder:unordered(),80,82,"/**
 * Returns an unordered element order.
 * @return ElementOrder instance with unordered type and null comparator
 */",Returns an instance which specifies that no ordering is guaranteed.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,stable,com.google.common.graph.ElementOrder:stable(),120,122,"/**
 * Returns a stable element order.
 * @return ElementOrder instance with stable ordering
 */","* Returns an instance which specifies that ordering is guaranteed to be always be the same across
   * iterations, and across releases. Some methods may have stronger guarantees.
   *
   * <p>This instance is only useful in combination with {@code incidentEdgeOrder}, e.g. {@code
   * graphBuilder.incidentEdgeOrder(ElementOrder.stable())}.
   *
   * <h3>In combination with {@code incidentEdgeOrder}</h3>
   *
   * <p>{@code incidentEdgeOrder(ElementOrder.stable())} guarantees the ordering of the returned
   * collections of the following methods:
   *
   * <ul>
   *   <li>For {@link Graph} and {@link ValueGraph}:
   *       <ul>
   *         <li>{@code edges()}: Stable order
   *         <li>{@code adjacentNodes(node)}: Connecting edge insertion order
   *         <li>{@code predecessors(node)}: Connecting edge insertion order
   *         <li>{@code successors(node)}: Connecting edge insertion order
   *         <li>{@code incidentEdges(node)}: Edge insertion order
   *       </ul>
   *   <li>For {@link Network}:
   *       <ul>
   *         <li>{@code adjacentNodes(node)}: Stable order
   *         <li>{@code predecessors(node)}: Connecting edge insertion order
   *         <li>{@code successors(node)}: Connecting edge insertion order
   *         <li>{@code incidentEdges(node)}: Stable order
   *         <li>{@code inEdges(node)}: Edge insertion order
   *         <li>{@code outEdges(node)}: Edge insertion order
   *         <li>{@code adjacentEdges(edge)}: Stable order
   *         <li>{@code edgesConnecting(nodeU, nodeV)}: Edge insertion order
   *       </ul>
   * </ul>
   *
   * @since 29.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,insertion,com.google.common.graph.ElementOrder:insertion(),125,127,"/**
* Creates an ElementOrder with INSERTION type.
* @return ElementOrder instance configured for insertion ordering
*/",Returns an instance which specifies that insertion ordering is guaranteed.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,natural,com.google.common.graph.ElementOrder:natural(),132,134,"/**
* Returns an ElementOrder with natural ordering.
* @param <S> type of elements, must be comparable
* @return ElementOrder configured for natural sorting
*/",* Returns an instance which specifies that the natural ordering of the elements is guaranteed.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,sorted,com.google.common.graph.ElementOrder:sorted(java.util.Comparator),140,142,"/**
* Creates a sorted element order with a given comparator.
* @param comparator used to sort elements
* @return ElementOrder object configured for sorting
*/","* Returns an instance which specifies that the ordering of the elements is guaranteed to be
   * determined by {@code comparator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,whenClosedCountDown,com.google.common.util.concurrent.ClosingFuture:whenClosedCountDown(),2265,2268,"/**
 * Returns a countdown latch that triggers when the resource is closed.
 * @return CountDownLatch instance
 */","* Returns an object that can be used to wait until this objects' deferred closeables have all had
   * {@link Runnable}s that close them submitted to each one's closing {@link Executor}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,<init>,"com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:<init>(java.lang.Object,java.util.concurrent.Executor)",145,148,"/**
* Constructs a PerListenerQueue with a listener and an executor.
* @param listener the listener to handle events
* @param executor the executor to run tasks asynchronously
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/AbstractIterator.java,next,com.google.common.base.AbstractIterator:next(),76,87,"/**
 * Returns the next element in the iteration.
 * @return the next element
 * @throws NoSuchElementException if no more elements are available
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoForward,com.google.common.base.Converter:correctedDoForward(java.lang.Object),200,207,"/**
* Forwards request and handles nulls based on configuration.
* @param a input object that may be null
* @return result of forwarding or null if input is null and handling is enabled
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoBackward,com.google.common.base.Converter:correctedDoBackward(java.lang.Object),209,216,"/**
* Performs backward operation.
* @param b input parameter
* @return result of the backward operation or null if handleNullAutomatically is true and b is null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeWord,com.google.common.base.CaseFormat$1:normalizeWord(java.lang.String),210,210,"/**
 * Normalizes a given word.
 * @param word the input word to be normalized
 * @return the normalized form of the word
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeWord,com.google.common.base.CaseFormat$2:normalizeWord(java.lang.String),210,210,"/**
 * Normalizes a given word to standard form.
 * @param word the original word to be normalized
 * @return the normalized version of the word
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeFirstWord,com.google.common.base.CaseFormat$3:normalizeFirstWord(java.lang.String),212,214,"/**
 * Normalizes the first word.
 * @param word the input word to be normalized
 * @return the normalized version of the word
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,normalizeToken,com.google.common.net.MediaType:normalizeToken(java.lang.String),1083,1087,"/**
 * Normalizes a token by converting it to lowercase.
 * @param token input string to be normalized
 * @return normalized lowercase token
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,normalizeParameterValue,"com.google.common.net.MediaType:normalizeParameterValue(java.lang.String,java.lang.String)",1089,1093,"/**
* Normalizes parameter value to lowercase if it's the charset attribute.
* @param attribute parameter name
* @param value parameter value to normalize
* @return normalized value or original if not charset attribute
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toLowerCase,com.google.common.base.Ascii:toLowerCase(java.lang.CharSequence),431,440,"/**
* Converts CharSequence to lowercase.
* @param chars input character sequence
* @return lowercase string representation
*/","* Returns a copy of the input character sequence in which all {@linkplain #isUpperCase(char)
   * uppercase ASCII characters} have been converted to lowercase. All other characters are copied
   * without modification.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeWord,com.google.common.base.CaseFormat$5:normalizeWord(java.lang.String),210,210,"/**
 * Normalizes a given word to a standard format.
 * @param word the input string to be normalized
 * @return the normalized form of the word
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toUpperCase,com.google.common.base.Ascii:toUpperCase(java.lang.CharSequence),479,488,"/**
* Converts CharSequence to uppercase.
* @param chars input character sequence
* @return uppercase string representation
*/","* Returns a copy of the input character sequence in which all {@linkplain #isLowerCase(char)
   * lowercase ASCII characters} have been converted to uppercase. All other characters are copied
   * without modification.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,firstCharOnlyToUpper,com.google.common.base.CaseFormat:firstCharOnlyToUpper(java.lang.String),216,220,"/**
* Capitalizes the first character of a string.
* @param word input string to be capitalized
* @return modified string with only the first character uppercased
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,toString,com.google.common.io.CharSource$CharSequenceCharSource:toString(),620,623,"/**
* Returns a string representation of the character source.
* @return Truncated string with max 30 characters and ellipsis if longer
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,toByteArray,com.google.common.math.PairedStats:toByteArray(),289,295,"/**
* Converts object data to byte array.
* @return byte array representation of the object's fields
*/","* Gets a byte array representation of this instance.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,toByteArray,com.google.common.math.Stats:toByteArray(),589,593,"/**
* Converts object to byte array in little-endian format.
* @return byte array representation of the object
*/","* Gets a byte array representation of this instance.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,init,com.google.common.collect.CompactHashMap:init(int),254,259,"/**
* Initializes the data structure with an expected size.
* @param expectedSize estimated number of elements to store
*/",Pseudoconstructor for serialization support.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,init,com.google.common.collect.CompactHashSet:init(int),219,224,"/**
* Initializes the data structure with an expected size.
* @param expectedSize the anticipated number of elements
*/",Pseudoconstructor for serialization support.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,and,com.google.common.base.CharMatcher:and(com.google.common.base.CharMatcher),381,383,"/**
 * Returns a matcher that matches characters accepted by both this and another matcher.
 * @param other the second matcher to combine with
 * @return a new CharMatcher that accepts only characters matching both matchers
 */",* Returns a matcher that matches any character matched by both this matcher and {@code other}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,forPredicate,com.google.common.base.CharMatcher:forPredicate(com.google.common.base.Predicate),352,354,"/**
* Creates a CharMatcher from a Predicate.
* @param predicate character matching condition
* @return CharMatcher instance
*/","* Returns a matcher with identical behavior to the given {@link Character}-based predicate, but
   * which operates on primitive {@code char} instances instead.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$NegatedFastMatcher:<init>(com.google.common.base.CharMatcher),994,996,"/**
 * Creates a negated version of the given character matcher.
 * @param original the original CharMatcher to negate
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher:negate(),373,376,"/**
* Returns a matcher that negates this one.
* @return CharMatcher matching characters not matched by this
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,or,com.google.common.base.CharMatcher:or(com.google.common.base.CharMatcher),388,390,"/**
 * Returns a CharMatcher that matches any character matched by either this or another matcher.
 * @param other the other CharMatcher to combine with
 * @return a new CharMatcher representing the union of both matchers
 */",* Returns a matcher that matches any character matched by either this matcher or {@code other}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,inRange,"com.google.common.base.CharMatcher:inRange(char,char)",344,346,"/**
* Creates a matcher that matches characters within a specified range.
* @param startInclusive the inclusive lower bound of the range
* @param endInclusive the inclusive upper bound of the range
* @return CharMatcher for the character range
*/","* Returns a {@code char} matcher that matches any character in a given BMP range (both endpoints
   * are inclusive). For example, to match any lowercase letter of the English alphabet, use {@code
   * CharMatcher.inRange('a', 'z')}.
   *
   * @throws IllegalArgumentException if {@code endInclusive < startInclusive}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Digit:<init>(),1381,1383,"/**
* Constructs a CharMatcher for digits.
* Initializes with ranges from '0' to '9'.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Invisible:<init>(),1496,1498,"/**
 * Constructs an invisible character matcher.
 * Initializes with specified range starts and ends.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$SingleWidth:<init>(),1506,1511,"/**
* Initializes a CharMatcher for single-width characters.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,snapshot,com.google.common.cache.AbstractCache$SimpleStatsCounter:snapshot(),255,264,"/**
* Returns a snapshot of cache statistics.
* Converts any negative counts to maximum value.
* @return CacheStats object with aggregated metrics
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,minus,com.google.common.cache.CacheStats:minus(com.google.common.cache.CacheStats),243,251,"/**
* Subtracts another CacheStats from this one.
* @param other CacheStats to subtract
* @return new CacheStats with results of subtraction
*/","* Returns a new {@code CacheStats} representing the difference between this {@code CacheStats}
   * and {@code other}. Negative values, which aren't supported by {@code CacheStats} will be
   * rounded up to zero.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,plus,com.google.common.cache.CacheStats:plus(com.google.common.cache.CacheStats),263,271,"/**
* Combines statistics from another CacheStats instance.
* @param other the CacheStats to add
* @return new CacheStats with combined values
*/","* Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and {@code
   * other}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   *
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,<init>,com.google.common.collect.AbstractListMultimap:<init>(java.util.Map),47,49,"/**
 * Constructs an AbstractListMultimap with the given backing map.
 * @param map the backing map to store key-value pairs
 */","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,<init>,com.google.common.collect.AbstractSetMultimap:<init>(java.util.Map),47,49,"/**
 * Constructs an AbstractSetMultimap with the specified backing map.
 * @param map the backing map to use
 */","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",220,223,"/**
 * Constructs a custom multimap with a specified backing map and collection factory.
 * @param map the backing map to use
 * @param factory supplier for creating new collections
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,<init>,com.google.common.collect.HashMultiset:<init>(),68,70,"/**
 * Constructs an empty HashMultiset.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,<init>,com.google.common.collect.LinkedHashMultiset:<init>(),76,78,"/**
 * Constructs a new LinkedHashMultiset with insertion order preservation.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,indexed,"com.google.common.collect.CollectSpliterators:indexed(int,int,java.util.function.IntFunction)",43,46,"/**
* Creates an indexed spliterator with specified size and characteristics.
* @param size number of elements in the spliterator
* @param extraCharacteristics additional spliterator characteristics
* @param function function to generate elements by index
* @return Spliterator for iterating over generated elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Object,java.lang.Object)",166,172,"/**
* Returns a subset of elements from fromElement (inclusive) to toElement (exclusive).
* @param fromElement the lower bound element
* @param toElement the upper bound element
* @return ContiguousSet containing elements in the specified range
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",177,185,"/**
 * Returns a view of the portion of this set whose elements range from fromElement to toElement.
 * @param fromElement lower bound (inclusive)
 * @param fromInclusive true if the fromElement is included in the subSet
 * @param toElement upper bound (exclusive)
 * @param toInclusive true if the toElement is included in the subSet
 * @return a ContiguousSet containing elements within the specified range
 */",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,create,com.google.common.collect.EnumMultiset:create(java.lang.Class),54,56,"/**
* Creates an EnumMultiset for the specified enum type.
* @param type the Class object of the enum type
* @return a new EnumMultiset instance for the given enum type
*/",Creates an empty {@code EnumMultiset}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,subSetImpl,"com.google.common.collect.DescendingImmutableSortedSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",57,61,"/**
 * Returns a descending subset of elements.
 * @param fromElement lower bound of the range (inclusive if fromInclusive is true)
 * @param fromInclusive whether the lower bound is inclusive
 * @param toElement upper bound of the range (inclusive if toInclusive is true)
 * @param toInclusive whether the upper bound is inclusive
 * @return descending subset within the specified range
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,subSet,"com.google.common.collect.ImmutableSortedSet:subSet(java.lang.Object,java.lang.Object)",666,669,"/**
 * Returns a subset of elements from `fromElement` (inclusive) to `toElement` (exclusive).
 * @param fromElement the lower bound element (inclusive)
 * @param toElement the upper bound element (exclusive)
 * @return ImmutableSortedSet containing elements in the specified range
 */","* {@inheritDoc}
   *
   * <p>This method returns a serializable {@code ImmutableSortedSet}.
   *
   * <p>The {@link SortedSet#subSet} documentation states that a subset of a subset throws an {@link
   * IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code
   * fromElement}. However, this method doesn't throw an exception in that situation, but instead
   * keeps the original {@code fromElement}. Similarly, this method keeps the original {@code
   * toElement}, instead of throwing an exception, if passed a {@code toElement} greater than an
   * earlier {@code toElement}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,partition,"com.google.common.collect.Iterators:partition(java.util.Iterator,int)",602,605,"/**
* Partitions an iterator into lists of a given size.
* @param iterator source iterator to partition
* @param size maximum size of each list
* @return UnmodifiableIterator of lists containing elements from the iterator
*/","* Divides an iterator into unmodifiable sublists of the given size (the final list may be
   * smaller). For example, partitioning an iterator containing {@code [a, b, c, d, e]} with a
   * partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterator containing two
   * inner lists of three and two elements, all in the original order.
   *
   * <p>The returned lists implement {@link java.util.RandomAccess}.
   *
   * <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements.
   * As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link
   * OutOfMemoryError}.
   *
   * @param iterator the iterator to return a partitioned view of
   * @param size the desired size of each partition (the last may be smaller)
   * @return an iterator of immutable lists containing the elements of {@code iterator} divided into
   *     partitions
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,paddedPartition,"com.google.common.collect.Iterators:paddedPartition(java.util.Iterator,int)",621,624,"/**
* Partitions an iterator into fixed-size lists, padding the last list if necessary.
* @param iterator source iterator of elements
* @param size     desired size of each partition
* @return UnmodifiableIterator of Lists containing partitioned elements
*/","* Divides an iterator into unmodifiable sublists of the given size, padding the final iterator
   * with null values if necessary. For example, partitioning an iterator containing {@code [a, b,
   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer
   * iterator containing two inner lists of three elements each, all in the original order.
   *
   * <p>The returned lists implement {@link java.util.RandomAccess}.
   *
   * @param iterator the iterator to return a partitioned view of
   * @param size the desired size of each partition
   * @return an iterator of immutable lists containing the elements of {@code iterator} divided into
   *     partitions (the final iterable may have trailing null elements)
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,expectedSize,com.google.common.collect.MinMaxPriorityQueue:expectedSize(int),141,144,"/**
* Creates a builder with an expected size.
* @param expectedSize the anticipated number of elements
* @return Builder instance configured for Comparable types
*/","* Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances
   * sized appropriately to hold {@code expectedSize} elements.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,maximumSize,com.google.common.collect.MinMaxPriorityQueue:maximumSize(int),152,155,"/**
* Creates a builder with natural ordering and a specified maximum size.
* @param maximumSize the maximum number of elements allowed
* @return Builder configured for Comparable types
*/","* Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances
   * that are limited to {@code maximumSize} elements. Each time a queue grows beyond this bound, it
   * immediately removes its greatest element (according to its comparator), which might be the
   * element that was just added.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,addRightChild,"com.google.common.collect.TreeMultiset$AvlNode:addRightChild(java.lang.Object,int)",655,663,"/**
 * Adds a right child node to the AVL tree.
 * @param e element to be added
 * @param count number of occurrences
 * @return current node after adding the right child
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,addLeftChild,"com.google.common.collect.TreeMultiset$AvlNode:addLeftChild(java.lang.Object,int)",665,673,"/**
* Adds a left child to the current node.
* @param e element to add
* @param count frequency of the element
* @return updated current node
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,newHasher,com.google.common.hash.AbstractNonStreamingHashFunction:newHasher(),34,37,"/**
 * Creates a new Hasher instance with default capacity.
 * @return Hasher object initialized with a capacity of 32
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,hashBytes,com.google.common.hash.AbstractNonStreamingHashFunction:hashBytes(java.nio.ByteBuffer),73,76,"/**
 * Generates a hash code from a ByteBuffer.
 * @param input ByteBuffer containing data to hash
 * @return HashCode object representing the computed hash
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,<init>,com.google.common.hash.AbstractStreamingHasher:<init>(int),48,50,"/**
 * Initializes hasher with specified chunk size.
 * @param chunkSize size of data chunks to process
 */","* Constructor for use by subclasses. This hasher instance will process chunks of the specified
   * size.
   *
   * @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation;
   *     must be at least 4",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,separatingWriter,"com.google.common.io.BaseEncoding:separatingWriter(java.io.Writer,java.lang.String,int)",1113,1138,"/**
 * Creates a writer that inserts a separator after every specified number of characters.
 * @param delegate the underlying Writer to which data is written
 * @param separator the string to insert as a separator
 * @param afterEveryChars the number of characters after which to insert the separator
 * @return a new Writer with the specified separation behavior
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,populationVariance,com.google.common.math.Stats:populationVariance(),290,299,"/**
 * Calculates population variance.
 * @return variance value or NaN if sum of squares is not a number
 */","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Population_variance"">population
   * variance</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,sampleVariance,com.google.common.math.Stats:sampleVariance(),337,343,"/**
* Calculates the sample variance of the dataset.
* @return sample variance as a double, or NaN if data is insufficient
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Sample_variance"">unbiased sample
   * variance</a> of the values. If this dataset is a sample drawn from a population, this is an
   * unbiased estimator of the population variance of the population. The count must be greater than
   * one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,populationVariance,com.google.common.math.StatsAccumulator:populationVariance(),283,292,"/**
* Calculates population variance.
* @return population variance as a double
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Population_variance"">population
   * variance</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,sampleVariance,com.google.common.math.StatsAccumulator:sampleVariance(),330,336,"/**
* Calculates the sample variance of the dataset.
* @return sample variance as a double, or NaN if not calculable
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Sample_variance"">unbiased sample
   * variance</a> of the values. If this dataset is a sample drawn from a population, this is an
   * unbiased estimator of the population variance of the population. The count must be greater than
   * one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,anyOf,com.google.common.base.CharMatcher:anyOf(java.lang.CharSequence),314,327,"/**
* Returns a CharMatcher that matches any character in the given sequence.
* @param sequence characters to match
* @return CharMatcher object matching any character in sequence
*/","* Returns a {@code char} matcher that matches any BMP character present in the given character
   * sequence. Returns a bogus matcher if the sequence contains supplementary characters.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,trimAndCollapseFrom,"com.google.common.base.CharMatcher:trimAndCollapseFrom(java.lang.CharSequence,char)",864,882,"/**
 * Trims and collapses a character sequence.
 * @param sequence the input character sequence to process
 * @param replacement the character used to replace trimmed characters
 * @return processed string with leading/trailing matching characters replaced
 */","* Collapses groups of matching characters exactly as {@link #collapseFrom} does, except that
   * groups of matching BMP characters at the start or end of the sequence are removed without
   * replacement.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,<init>,"com.google.common.base.CaseFormat$StringConverter:<init>(com.google.common.base.CaseFormat,com.google.common.base.CaseFormat)",173,176,"/**
* Initializes a StringConverter with specified case formats.
* @param sourceFormat original string format
* @param targetFormat desired converted string format
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,"com.google.common.base.Converter$ConverterComposition:<init>(com.google.common.base.Converter,com.google.common.base.Converter)",390,393,"/**
* Composes two converters.
* @param first converter from A to B
* @param second converter from B to C
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,"com.google.common.base.Converter$FunctionBasedConverter:<init>(com.google.common.base.Function,com.google.common.base.Function)",515,520,"/**
* Initializes a converter with forward and backward functions.
* @param forwardFunction function to convert from A to B
* @param backwardFunction function to convert from B to A
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,com.google.common.base.Converter$ReverseConverter:<init>(com.google.common.base.Converter),311,313,"/**
 * Initializes a ReverseConverter with the given original converter.
 * @param original the original Converter instance to reverse
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,<init>,com.google.common.base.Enums$StringConverter:<init>(java.lang.Class),114,116,"/**
 * Initializes a StringConverter with an enum class.
 * @param enumClass the enum class to convert strings to
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$BiMapConverter:<init>(com.google.common.collect.BiMap),1606,1608,"/**
 * Initializes the converter with a bidirectional map.
 * @param bimap the bidirectional map to use for conversion
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,onResultOf,com.google.common.base.Equivalence:onResultOf(com.google.common.base.Function),177,179,"/**
* Creates an equivalence based on a transformation function.
* @param function the transformation function to apply
* @return a new Equivalence instance using the transformed values
*/","* Returns a new equivalence relation for {@code F} which evaluates equivalence by first applying
   * {@code function} to the argument, then evaluating using {@code this}. That is, for any pair of
   * non-null objects {@code x} and {@code y}, {@code equivalence.onResultOf(function).equivalent(a,
   * b)} is true if and only if {@code equivalence.equivalent(function.apply(a), function.apply(b))}
   * is true.
   *
   * <p>For example:
   *
   * {@snippet :
   * Equivalence<Person> SAME_AGE = Equivalence.equals().onResultOf(GET_PERSON_AGE);
   * }
   *
   * <p>{@code function} will never be invoked with a null value.
   *
   * <p>Note that {@code function} must be consistent according to {@code this} equivalence
   * relation. That is, invoking {@link Function#apply} multiple times for a given value must return
   * equivalent results. For example, {@code
   * Equivalence.identity().onResultOf(Functions.toStringFunction())} is broken because it's not
   * guaranteed that {@link Object#toString}) always returns the same string instance.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,pairwise,com.google.common.base.Equivalence:pairwise(),296,300,"/**
 * Returns an equivalence relation over iterables of elements.
 * @param <S> subtype of T, where nullability is preserved
 * @return Equivalence object for pairwise comparison of iterables
 */","* Returns an equivalence over iterables based on the equivalence of their elements. More
   * specifically, two iterables are considered equivalent if they both contain the same number of
   * elements, and each pair of corresponding elements is equivalent according to {@code this}. Null
   * iterables are equivalent to one another.
   *
   * <p>Note that this method performs a similar function for equivalences as {@link
   * com.google.common.collect.Ordering#lexicographical} does for orderings.
   *
   * <p>The returned object is serializable if this object is serializable.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,reclaimValue,com.google.common.collect.MapMakerInternalMap:reclaimValue(com.google.common.collect.MapMakerInternalMap$WeakValueReference),1113,1117,"/**
 * Reclaims a value associated with a weak reference.
 * @param valueReference the weak reference to reclaim
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,elementsEqual,"com.google.common.collect.Iterables:elementsEqual(java.lang.Iterable,java.lang.Iterable)",229,238,"/**
* Checks if two iterables have equal elements in the same order.
* @param iterable1 first iterable to compare
* @param iterable2 second iterable to compare
* @return true if elements are equal, false otherwise
*/","* Determines whether two iterables contain equal elements in the same order. More specifically,
   * this method returns {@code true} if {@code iterable1} and {@code iterable2} contain the same
   * number of elements and every element of {@code iterable1} is equal to the corresponding element
   * of {@code iterable2}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,equalsImpl,"com.google.common.collect.Lists:equalsImpl(java.util.List,java.lang.Object)",1027,1050,"/**
 * Compares two lists for equality.
 * @param thisList the first list to compare
 * @param other the object to compare with the first list
 * @return true if both lists are equal, false otherwise
 */",An implementation of {@link List#equals(Object)}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,create,com.google.common.collect.ConcurrentHashMultiset:create(),89,94,"/**
* Creates a new ConcurrentHashMultiset using ConcurrentHashMap.
* @return ConcurrentHashMultiset instance
*/","* Creates a new, empty {@code ConcurrentHashMultiset} using the default initial capacity, load
   * factor, and concurrency settings.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,create,com.google.common.collect.ConcurrentHashMultiset:create(java.util.concurrent.ConcurrentMap),124,126,"/**
* Creates a ConcurrentHashMultiset from a given count map.
* @param countMap map with elements as keys and their counts as values
* @return ConcurrentHashMultiset instance initialized with the provided map
*/","* Creates a new, empty {@code ConcurrentHashMultiset} using {@code countMap} as the internal
   * backing map.
   *
   * <p>This instance will assume ownership of {@code countMap}, and other code should not maintain
   * references to the map or modify it in any way.
   *
   * <p>The returned multiset is serializable if the input map is.
   *
   * @param countMap backing map for storing the elements in the multiset and their counts. It must
   *     be empty.
   * @throws IllegalArgumentException if {@code countMap} is not empty
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,doForward,com.google.common.collect.Maps$BiMapConverter:doForward(java.lang.Object),1610,1613,"/**
 * Converts input A to output B using bimap.
 * @param a input object of type A
 * @return converted object of type B
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,doBackward,com.google.common.collect.Maps$BiMapConverter:doBackward(java.lang.Object),1615,1618,"/**
 * Converts B to A using inverse bimap.
 * @param b input of type B
 * @return converted object of type A or null if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdges,com.google.common.graph.AbstractGraph:incidentEdges(java.lang.Object),106,134,"/**
 * Returns incident edges for a given node.
 * @param node the node to find incident edges for
 * @return set of endpoint pairs representing incident edges
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdges,com.google.common.graph.AbstractValueGraph:incidentEdges(java.lang.Object),106,134,"/**
 * Returns incident edges for a given node.
 * @param node the node to find incident edges for
 * @return set of incident edges as EndpointPairs
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.lang.Iterable)",92,95,"/**
 * Appends elements from an iterable to an appendable.
 * @param appendable destination for appended content
 * @param parts iterable containing elements to append
 * @return the appendable with appended content
 * @throws IOException if an I/O error occurs
 */","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code appendable}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.util.Iterator)",153,161,"/**
* Appends elements from iterator to StringBuilder.
* @param builder target StringBuilder to append to
* @param parts iterator of elements to append
* @return the modified StringBuilder
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,
   * Iterable)}, except that it does not throw {@link IOException}.
   *
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.util.Map)",400,403,"/**
* Appends map entries to StringBuilder.
* @param builder target StringBuilder
* @param map source map with key-value pairs
* @return the modified StringBuilder instance
*/","* Appends the string representation of each entry of {@code map}, using the previously
     * configured separator and key-value separator, to {@code builder}. Identical to {@link
     * #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner$MapJoiner:join(java.lang.Iterable),486,488,"/**
 * Joins entries into a single string.
 * @param entries iterable collection of entries to join
 * @return concatenated string of entry values
 */","* Returns a string containing the string representation of each entry in {@code entries}, using
     * the previously configured separator and key-value separator.
     *
     * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(java.lang.Object),268,271,"/**
 * Adds a value to the string representation.
 * @param value object to be added
 * @return this ToStringHelper instance
 */","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, Object)} instead and give value a
     * readable name.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,java.lang.Object)",197,200,"/**
 * Adds a named field with its value to the string representation.
 * @param name the field name
 * @param value the field value, can be null
 * @return this ToStringHelper instance for chaining
 */","* Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value}
     * is {@code null}, the string {@code ""null""} is used, unless {@link #omitNullValues()} is
     * called, in which case this name/value pair will not be added.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(boolean),281,284,"/**
 * Adds a boolean value to the string representation.
 * @param value the boolean value to add
 * @return this ToStringHelper instance for chaining
 */","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, boolean)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(char),294,297,"/**
 * Adds a character value to the string representation.
 * @param value character to be added
 * @return this instance for chaining
 */","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, char)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(double),307,310,"/**
 * Adds a double value to the string representation.
 * @param value the double value to add
 * @return this ToStringHelper instance for chaining
 */","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, double)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(float),320,323,"/**
 * Adds a float value to the string representation.
 * @param value the float value to be added
 * @return this ToStringHelper instance for method chaining
 */","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, float)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(int),333,336,"/**
 * Adds an integer value to the string representation.
 * @param value the integer to be added
 * @return this ToStringHelper instance for chaining
 */","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, int)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(long),346,349,"/**
 * Adds a long value to the string representation.
 * @param value the long value to add
 * @return this ToStringHelper instance for chaining
 */","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, long)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,boolean)",207,210,"/**
 * Adds a boolean value to the string representation.
 * @param name key for the value
 * @param value boolean value to be added
 * @return this ToStringHelper instance for method chaining
 */","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,char)",217,220,"/**
 * Adds a character value to the string representation.
 * @param name key for the value
 * @param value character to be added
 * @return this ToStringHelper instance
 */","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,double)",227,230,"/**
 * Adds a named double value to the string representation.
 * @param name key for the value
 * @param value numeric value to be added
 * @return this ToStringHelper instance
 */","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,float)",237,240,"/**
* Adds a named float value to the string representation.
* @param name key for the value
* @param value float value to be added
* @return this ToStringHelper instance for chaining
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,int)",247,250,"/**
* Adds an integer property to the string representation.
* @param name property name
* @param value integer value
* @return this ToStringHelper instance
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,long)",257,260,"/**
* Adds a named long value to the string representation.
* @param name key for the value
* @param value long value to be added
* @return this object for method chaining
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getKeyEquivalence,com.google.common.cache.CacheBuilder:getKeyEquivalence(),374,376,"/**
 * Returns the key equivalence strategy.
 * @return KeyEquivalence instance, using default if none set
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getValueEquivalence,com.google.common.cache.CacheBuilder:getValueEquivalence(),396,398,"/**
* Returns the value equivalence strategy.
* @return Equivalence object for values, default if none set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,getKeyEquivalence,com.google.common.collect.MapMaker:getKeyEquivalence(),130,132,"/**
 * Returns the key equivalence strategy.
 * @return KeyEquivalence object, defaulting to strength-based if null
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,transform,com.google.common.base.Absent:transform(com.google.common.base.Function),75,79,"/**
* Transforms the current value using the provided function.
* @param function transformation function to apply
* @return Optional containing transformed value or absent if none present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,fromNullable,com.google.common.base.Optional:fromNullable(java.lang.Object),119,121,"/**
 * Creates an Optional instance from a nullable reference.
 * @param nullableReference the value to wrap, may be null
 * @return Optional containing the value if non-null, otherwise absent
 */","* If {@code nullableReference} is non-null, returns an {@code Optional} instance containing that
   * reference; otherwise returns {@link Optional#absent}.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's
   * {@code Optional.ofNullable}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,<init>,com.google.common.collect.FluentIterable:<init>(),120,122,"/**
* Initializes an empty FluentIterable.
* @param iterableDelegate optional delegate iterable
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource:sizeIfKnown(),181,183,"/**
 * Returns an absent Optional indicating unknown size.
 * @return Optional containing the size if known, otherwise absent
 */","* Returns the size of this source in bytes, if the size can be easily determined without actually
   * opening the data stream.
   *
   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a file,
   * may return a non-absent value. Note that in such cases, it is <i>possible</i> that this method
   * will return a different number of bytes than would be returned by reading all of the bytes (for
   * example, some special files may return a size of 0 despite actually having content when read).
   *
   * <p>Additionally, for mutable sources such as files, a subsequent read may return a different
   * number of bytes if the contents are changed.
   *
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lengthIfKnown,com.google.common.io.CharSource:lengthIfKnown(),190,192,"/**
 * Returns an absent Optional indicating unknown length.
 * @return Optional containing length if known, otherwise absent
 */","* Returns the size of this source in chars, if the size can be easily determined without actually
   * opening the data stream.
   *
   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a {@code
   * CharSequence}, may return a non-absent value. Note that in such cases, it is <i>possible</i>
   * that this method will return a different number of chars than would be returned by reading all
   * of the chars.
   *
   * <p>Additionally, for mutable sources such as {@code StringBuilder}s, a subsequent read may
   * return a different number of chars if the contents are changed.
   *
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createConstant,"com.google.common.net.MediaType:createConstant(java.lang.String,java.lang.String)",108,113,"/**
* Creates a constant MediaType with no parameters.
* @param type primary media type
* @param subtype secondary media type
* @return MediaType object with absent charset
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,emptyToNull,com.google.common.base.Strings:emptyToNull(java.lang.String),55,57,"/**
 * Converts an empty string to null.
 * @param string input string
 * @return original string if not empty, otherwise null
 */","* Returns the given string if it is nonempty; {@code null} otherwise.
   *
   * @param string the string to test and possibly return
   * @return {@code string} itself if it is nonempty; {@code null} if it is empty or null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$DurationParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",424,456,"/**
 * Parses a cache duration value.
 * @param spec CacheBuilderSpec configuration
 * @param key Configuration key
 * @param value Duration value with unit (e.g., ""10m"")
 * @throws IllegalArgumentException if value is null/empty or invalid
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$IntegerParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",295,306,"/**
* Parses a cache configuration value.
* @param spec CacheBuilderSpec object
* @param key configuration key
* @param value configuration value as string, must not be null or empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$LongParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",313,324,"/**
 * Parses a long value from the given string.
 * @param spec cache builder specification
 * @param key configuration key
 * @param value string representation of the long value
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,fromString,com.google.common.net.HostAndPort:fromString(java.lang.String),167,201,"/**
 * Parses a string to create a HostAndPort object.
 * @param hostPortString the string in ""host:port"" format
 * @return HostAndPort object representing the parsed host and port
 */","* Split a freeform string into a host and port, without strict validation.
   *
   * <p>Note that the host-only formats will leave the port field undefined. You can use {@link
   * #withDefaultPort(int)} to patch in a default value.
   *
   * @param hostPortString the input string to parse.
   * @return if parsing was successful, a populated HostAndPort object.
   * @throws IllegalArgumentException if nothing meaningful could be parsed.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,skip,com.google.common.collect.FluentIterable:skip(int),581,583,"/**
* Skips a specified number of elements in the iterable.
* @param numberToSkip number of elements to skip
* @return a new FluentIterable with skipped elements
*/","* Returns a view of this fluent iterable that skips its first {@code numberToSkip} elements. If
   * this fluent iterable contains fewer than {@code numberToSkip} elements, the returned fluent
   * iterable skips all of its elements.
   *
   * <p>Modifications to this fluent iterable before a call to {@code iterator()} are reflected in
   * the returned fluent iterable. That is, the iterator skips the first {@code numberToSkip}
   * elements that exist when the iterator is created, not when {@code skip()} is called.
   *
   * <p>The returned fluent iterable's iterator supports {@code remove()} if the {@code Iterator} of
   * this fluent iterable supports it. Note that it is <i>not</i> possible to delete the last
   * skipped element by immediately calling {@code remove()} on the returned fluent iterable's
   * iterator, as the {@code Iterator} contract states that a call to {@code * remove()} before a
   * call to {@code next()} will throw an {@link IllegalStateException}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#skip} (same).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,limit,com.google.common.collect.FluentIterable:limit(int),596,598,"/**
 * Limits the size of the iterable.
 * @param maxSize maximum number of elements to include
 * @return new FluentIterable with limited size
 */","* Creates a fluent iterable with the first {@code size} elements of this fluent iterable. If this
   * fluent iterable does not contain that many elements, the returned fluent iterable will have the
   * same behavior as this fluent iterable. The returned fluent iterable's iterator supports {@code
   * remove()} if this fluent iterable's iterator does.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#limit} (same).
   *
   * @param maxSize the maximum number of elements in the returned fluent iterable
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,get,"com.google.common.collect.Iterables:get(java.lang.Iterable,int,java.lang.Object)",788,801,"/**
* Retrieves an element from the iterable at the specified position.
* @param iterable source of elements
* @param position index of the element to retrieve
* @param defaultValue value to return if position is out of bounds
* @return element at the specified position or default value
*/","* Returns the element at the specified position in an iterable or a default value otherwise.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code
   * stream.skip(position).findFirst().orElse(defaultValue)} (returns the default value if the index
   * is out of bounds)
   *
   * @param position position of the element to return
   * @param defaultValue the default value to return if {@code position} is greater than or equal to
   *     the size of the iterable
   * @return the element at the specified position in {@code iterable} or {@code defaultValue} if
   *     {@code iterable} contains fewer than {@code position + 1} elements.
   * @throws IndexOutOfBoundsException if {@code position} is negative
   * @since 4.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,get,"com.google.common.collect.Iterators:get(java.util.Iterator,int)",842,855,"/**
 * Retrieves an element from an iterator at a specified position.
 * @param iterator source of elements
 * @param position index of the desired element, starting from 0
 * @return element at the specified position
 * @throws IndexOutOfBoundsException if position is out of range
 */","* Advances {@code iterator} {@code position + 1} times, returning the element at the {@code
   * position}th position.
   *
   * @param position position of the element to return
   * @return the element at the specified position in {@code iterator}
   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to
   *     the number of elements remaining in {@code iterator}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,get,"com.google.common.collect.Iterators:get(java.util.Iterator,int,java.lang.Object)",869,875,"/**
 * Retrieves an element from the iterator at a specified position.
 * @param iterator source of elements
 * @param position index of the desired element (0-based)
 * @param defaultValue value to return if position is out of bounds
 * @return element at the given position or default value
 */","* Advances {@code iterator} {@code position + 1} times, returning the element at the {@code
   * position}th position or {@code defaultValue} otherwise.
   *
   * @param position position of the element to return
   * @param defaultValue the default value to return if the iterator is empty or if {@code position}
   *     is greater than the number of elements remaining in {@code iterator}
   * @return the element at the specified position in {@code iterator} or {@code defaultValue} if
   *     {@code iterator} produces fewer than {@code position + 1} elements.
   * @throws IndexOutOfBoundsException if {@code position} is negative
   * @since 4.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,fileTraverser,com.google.common.io.Files:fileTraverser(),842,844,"/**
 * Returns a traverser for the file tree.
 * @return Traverser object for FILE_TREE
 */","* Returns a {@link Traverser} instance for the file and directory tree. The returned traverser
   * starts from a {@link File} and will return all files and directories it encounters.
   *
   * <p><b>Warning:</b> {@code File} provides no support for symbolic links, and as such there is no
   * way to ensure that a symbolic link to a directory is not followed when traversing the tree. In
   * this case, iterables created by this traverser could contain files that are outside of the
   * given directory or even be infinite if there is a symbolic link loop.
   *
   * <p>If available, consider using {@link MoreFiles#fileTraverser()} instead. It behaves the same
   * except that it doesn't follow symbolic links and returns {@code Path} instances.
   *
   * <p>If the {@link File} passed to one of the {@link Traverser} methods does not exist or is not
   * a directory, no exception will be thrown and the returned {@link Iterable} will contain a
   * single element: that file.
   *
   * <p>Example: {@code Files.fileTraverser().depthFirstPreOrder(new File(""/""))} may return files
   * with the following paths: {@code [""/"", ""/etc"", ""/etc/config.txt"", ""/etc/fonts"", ""/home"",
   * ""/home/alice"", ...]}
   *
   * @since 23.5",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,readResolve,com.google.common.hash.BloomFilter$SerialForm:readResolve(),578,580,"/**
* Replaces deserialized object with a new instance.
* @return new BloomFilter initialized with deserialized data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,copy,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:copy(),245,247,"/**
 * Creates a copy of the current bit array.
 * @return A new LockFreeBitArray instance with the same data
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,limit,"com.google.common.io.ByteStreams:limit(java.io.InputStream,long)",709,712,"/**
* Limits the input stream to a specified number of bytes.
* @param in original input stream
* @param limit maximum number of bytes to read
* @return new InputStream with limited size
*/","* Wraps a {@link InputStream}, limiting the number of bytes which can be read.
   *
   * @param in the input stream to be wrapped
   * @param limit the maximum number of bytes to be read
   * @return a length-limited {@link InputStream}
   * @since 14.0 (since 1.0 as com.google.common.io.LimitInputStream)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromIPv4BigInteger,com.google.common.net.InetAddresses:fromIPv4BigInteger(java.math.BigInteger),1094,1096,"/**
* Converts BigInteger to Inet4Address.
* @param address IPv4 address as BigInteger
* @return Inet4Address representation of the IP
*/","* Returns the {@code Inet4Address} corresponding to a given {@code BigInteger}.
   *
   * @param address BigInteger representing the IPv4 address
   * @return Inet4Address representation of the given BigInteger
   * @throws IllegalArgumentException if the BigInteger is not between 0 and 2^32-1
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromIPv6BigInteger,com.google.common.net.InetAddresses:fromIPv6BigInteger(java.math.BigInteger),1106,1108,"/**
* Converts BigInteger to Inet6Address.
* @param address IPv6 address as BigInteger
* @return Inet6Address object representing the IP
*/","* Returns the {@code Inet6Address} corresponding to a given {@code BigInteger}.
   *
   * @param address BigInteger representing the IPv6 address
   * @return Inet6Address representation of the given BigInteger
   * @throws IllegalArgumentException if the BigInteger is not between 0 and 2^128-1
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,"com.google.common.util.concurrent.Striped$CompactStriped:<init>(int,com.google.common.base.Supplier)",375,383,"/**
 * Initializes a CompactStriped with a given number of stripes.
 * @param stripes number of stripes to initialize
 * @param supplier function to create new elements for each stripe
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,"com.google.common.util.concurrent.Striped$SmallLazyStriped:<init>(int,com.google.common.base.Supplier)",409,414,"/**
* Initializes a SmallLazyStriped with the specified number of stripes and a supplier.
* @param stripes number of stripes to use
* @param supplier provides instances for each stripe
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,<init>,"com.google.common.graph.AbstractDirectedNetworkConnections:<init>(java.util.Map,java.util.Map,int)",52,57,"/**
 * Initializes directed network connections.
 * @param inEdgeMap map of incoming edges to nodes
 * @param outEdgeMap map of outgoing edges to nodes
 * @param selfLoopCount number of self-loops in the network
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,removeInEdge,"com.google.common.graph.AbstractDirectedNetworkConnections:removeInEdge(java.lang.Object,boolean)",106,114,"/**
* Removes an incoming edge from the node and updates self-loop count if applicable.
* @param edge the edge to be removed
* @param isSelfLoop true if the edge is a self-loop
* @return the previous node connected by the edge
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,"com.google.common.graph.DirectedGraphConnections:<init>(java.util.Map,java.util.List,int,int)",141,153,"/**
 * Initializes directed graph connections.
 * @param adjacentNodeValues map of adjacent nodes and their values
 * @param orderedNodeConnections list of node connections in order (nullable)
 * @param predecessorCount number of predecessors
 * @param successorCount number of successors
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,addInEdge,"com.google.common.graph.AbstractDirectedNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",123,133,"/**
* Adds an incoming edge to a node.
* @param edge the edge to add
* @param node the target node
* @param isSelfLoop true if adding a self-loop
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashUnencodedChars,com.google.common.hash.AbstractHashFunction:hashUnencodedChars(java.lang.CharSequence),38,42,"/**
* Generates a hash code for unencoded characters in the input.
* @param input the character sequence to hash
* @return HashCode object representing the hash of the input
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashInt,com.google.common.hash.AbstractHashFunction:hashInt(int),49,52,"/**
* Generates a hash code from an integer.
* @param input the integer to hash
* @return HashCode object representing the hash of the input
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashBytes,com.google.common.hash.AbstractHashFunction:hashBytes(java.nio.ByteBuffer),70,73,"/**
* Computes hash code for bytes in ByteBuffer.
* @param input ByteBuffer containing data to hash
* @return HashCode representing the hash of input bytes
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,sipHash24,"com.google.common.hash.Hashing:sipHash24(long,long)",210,212,"/**
* Creates a SipHash-2-4 function instance.
* @param k0 first key part
* @param k1 second key part
* @return SipHashFunction configured with keys k0 and k1
*/","* Returns a hash function implementing the <a href=""https://131002.net/siphash/"">64-bit
   * SipHash-2-4 algorithm</a> using the given seed.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,<init>,com.google.common.io.FileBackedOutputStream:<init>(int),106,108,"/**
 * Constructs a new FileBackedOutputStream with the specified threshold.
 * @param fileThreshold size in bytes after which data is written to a file
 */","* Creates a new instance that uses the given file threshold, and does not reset the data when the
   * {@link ByteSource} returned by {@link #asByteSource} is finalized.
   *
   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file
   * @throws IllegalArgumentException if {@code fileThreshold} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromInteger,com.google.common.net.InetAddresses:fromInteger(int),1082,1084,"/**
 * Converts an integer to an Inet4Address.
 * @param address integer representation of IPv4 address
 * @return Inet4Address object
 */","* Returns an Inet4Address having the integer value specified by the argument.
   *
   * @param address {@code int}, the 32bit integer address to be converted
   * @return {@link Inet4Address} equivalent of the argument",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,reserve,com.google.common.util.concurrent.RateLimiter:reserve(int),315,320,"/**
* Reserves permits and returns wait length.
* @param permits number of permits to reserve
* @return wait time in microseconds
*/","* Reserves the given number of permits from this {@code RateLimiter} for future use, returning
   * the number of microseconds until the reservation can be consumed.
   *
   * @return time in microseconds to wait until the resource can be acquired, never negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,"com.google.common.util.concurrent.RateLimiter:tryAcquire(int,long,java.util.concurrent.TimeUnit)",408,423,"/**
 * Attempts to acquire a specified number of permits within a given timeout.
 * @param permits the number of permits to acquire
 * @param timeout the maximum time to wait for acquisition
 * @param unit the time unit of the timeout parameter
 * @return true if permits are acquired, false otherwise
 */","* Acquires the given number of permits from this {@code RateLimiter} if it can be obtained
   * without exceeding the specified {@code timeout}, or returns {@code false} immediately (without
   * waiting) if the permits would not have been granted before the timeout expired.
   *
   * @param permits the number of permits to acquire
   * @param timeout the maximum time to wait for the permits. Negative values are treated as zero.
   * @param unit the time unit of the timeout argument
   * @return {@code true} if the permits were acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain$IntegerDomain:offset(java.lang.Integer,long)",83,87,"/**
* Calculates new offset by adding distance to origin.
* @param origin starting point
* @param distance amount to add
* @return new offset as Integer
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,writeTo,com.google.common.hash.BloomFilter:writeTo(java.io.OutputStream),592,605,"/**
 * Writes Bloom filter data to an output stream.
 * @param out OutputStream to write data to
 * @throws IOException if an I/O error occurs
 */","* Writes this {@code BloomFilter} to an output stream, with a custom format (not Java
   * serialization). This has been measured to save at least 400 bytes compared to regular
   * serialization.
   *
   * <p>Use {@linkplain #readFrom(InputStream, Funnel)} to reconstruct the written BloomFilter.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedDelaySchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedDelaySchedule(java.time.Duration,java.time.Duration)",129,132,"/**
* Creates a fixed-delay scheduler.
* @param initialDelay initial delay before first execution
* @param delay fixed delay between subsequent executions
* @return Scheduler instance
*/","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleWithFixedDelay} method.
     *
     * @param initialDelay the time to delay first execution
     * @param delay the delay between the termination of one execution and the commencement of the
     *     next
     * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedRateSchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedRateSchedule(java.time.Duration,java.time.Duration)",165,168,"/**
* Creates a fixed-rate scheduler.
* @param initialDelay delay before first execution
* @param period interval between subsequent executions
* @return Scheduler instance
*/","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleAtFixedRate} method.
     *
     * @param initialDelay the time to delay first execution
     * @param period the period between successive executions of the task
     * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,toSafeNanos,"com.google.common.util.concurrent.Monitor:toSafeNanos(long,java.util.concurrent.TimeUnit)",1033,1036,"/**
* Converts and constrains a given time to safe nanoseconds.
* @param time the time value
* @param unit the time unit of the input time
* @return constrained time in nanoseconds, within safe range
*/","* Returns unit.toNanos(time), additionally ensuring the returned value is not at risk of
   * overflowing or underflowing, by bounding the value between 0 and (Long.MAX_VALUE / 4) * 3.
   * Actually waiting for more than 219 years is not supported!",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,<init>,com.google.common.util.concurrent.AbstractService$StateSnapshot:<init>(com.google.common.util.concurrent.Service$State),605,607,"/**
 * Constructs a new StateSnapshot.
 * @param internalState the current state to snapshot
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createStarted,com.google.common.base.Stopwatch:createStarted(com.google.common.base.Ticker),137,139,"/**
* Creates and starts a new Stopwatch.
* @param ticker provides time source
* @return started Stopwatch instance
*/","* Creates (and starts) a new stopwatch, using the specified time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:remove(),231,247,"/**
 * Removes the current element from the iterator.
 * @throws ConcurrentModificationException if frequency is less than or equal to zero
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,remove,com.google.common.collect.EnumMultiset$Itr:remove(),241,250,"/**
* Removes the current element from the iterator.
* Decreases distinct element count and total size if applicable.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,remove,com.google.common.collect.Iterators$EmptyModifiableIterator:remove(),112,115,"/**
 * Removes the current element from the iterator.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,remove,com.google.common.collect.Multisets$MultisetIteratorImpl:remove(),1107,1121,"/**
* Removes the last element returned by the iterator.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,orderEntriesByValue,com.google.common.collect.ImmutableBiMap$Builder:orderEntriesByValue(java.util.Comparator),412,417,"/**
 * Orders entries by their values using a comparator.
 * @param valueComparator comparator to define the ordering of values
 * @return this builder instance for method chaining
 */","* Configures this {@code Builder} to order entries by value according to the specified
     * comparator.
     *
     * <p>The sort order is stable, that is, if two entries have values that compare as equivalent,
     * the entry that was inserted first will be first in the built map's iteration order.
     *
     * @throws IllegalStateException if this method was already called
     * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,heapForIndex,com.google.common.collect.MinMaxPriorityQueue:heapForIndex(int),484,486,"/**
 * Returns the appropriate heap based on the index level.
 * @param i index of the element in the heap structure
 * @return minHeap if the level is even, otherwise maxHeap
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,com.google.common.hash.MacHashFunction$MacHasher:update(byte),105,109,"/**
 * Updates MAC with a single byte.
 * @param b byte to be added to MAC
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,com.google.common.hash.MacHashFunction$MacHasher:update(byte[]),111,115,"/**
 * Updates MAC with provided byte array.
 * @param b byte array to be processed
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,"com.google.common.hash.MacHashFunction$MacHasher:update(byte[],int,int)",117,121,"/**
* Updates MAC with specified byte array segment.
* @param b byte array containing data to update
* @param off starting offset in the byte array
* @param len length of data to update
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,com.google.common.hash.MacHashFunction$MacHasher:update(java.nio.ByteBuffer),123,128,"/**
 * Updates MAC with provided bytes.
 * @param bytes data to update MAC with
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,update,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(byte),139,143,"/**
 * Updates the digest with a single byte.
 * @param b byte to be added to the digest
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,update,"com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(byte[],int,int)",145,149,"/**
 * Updates the message digest with the specified byte array.
 * @param b the input byte array
 * @param off the offset to start from in the byte array
 * @param len the number of bytes to use
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,update,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(java.nio.ByteBuffer),151,155,"/**
 * Updates the digest with provided byte buffer.
 * @param bytes data to be added to the digest
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,concurrencyLevel,com.google.common.collect.Interners$InternerBuilder:concurrencyLevel(int),79,83,"/**
* Sets the concurrency level for the map.
* @param concurrencyLevel expected number of concurrent threads accessing the map
* @return this builder instance
*/","* Sets the concurrency level that will be used by the to-be-built {@link Interner}.
     *
     * @see MapMaker#concurrencyLevel(int)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterWrite,com.google.common.cache.CacheBuilder:expireAfterWrite(java.time.Duration),723,729,"/**
* Sets cache expiration time after write.
* @param duration the duration after which entries should expire
* @return this CacheBuilder instance
*/","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, or the most recent replacement of its value.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * @param duration the length of time after an entry is created that it should be automatically
   *     removed
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterWrite} was already set
   * @throws ArithmeticException for durations greater than +/- approximately 292 years
   * @since 25.0 (but only since 33.3.0 in the Android <a
   *     href=""https://github.com/google/guava#guava-google-core-libraries-for-java"">flavor</a>)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterAccess,com.google.common.cache.CacheBuilder:expireAfterAccess(java.time.Duration),796,802,"/**
* Sets cache expiration after access.
* @param duration time duration for expiration
* @return CacheBuilder instance with updated settings
*/","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, the most recent replacement of its value, or its last
   * access. Access time is reset by all cache read and write operations (including {@code
   * Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code
   * containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}}. So,
   * for example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for
   * the entries you retrieve.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * @param duration the length of time after an entry is last accessed that it should be
   *     automatically removed
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterAccess} was already set
   * @throws ArithmeticException for durations greater than +/- approximately 292 years
   * @since 25.0 (but only since 33.3.0 in the Android <a
   *     href=""https://github.com/google/guava#guava-google-core-libraries-for-java"">flavor</a>)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,refreshAfterWrite,com.google.common.cache.CacheBuilder:refreshAfterWrite(java.time.Duration),878,884,"/**
* Sets cache entries to expire after a fixed duration.
* @param duration the time after which an entry should be refreshed
* @return this CacheBuilder instance
*/","* Specifies that active entries are eligible for automatic refresh once a fixed duration has
   * elapsed after the entry's creation, or the most recent replacement of its value. The semantics
   * of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link
   * CacheLoader#reload}.
   *
   * <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is
   * recommended that users of this method override {@link CacheLoader#reload} with an asynchronous
   * implementation; otherwise refreshes will be performed during unrelated cache read and write
   * operations.
   *
   * <p>Currently automatic refreshes are performed when the first stale request for an entry
   * occurs. The request triggering refresh will make a synchronous call to {@link
   * CacheLoader#reload}
   * to obtain a future of the new value. If the returned future is already complete, it is returned
   * immediately. Otherwise, the old value is returned.
   *
   * <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>.
   *
   * @param duration the length of time after an entry is created that it should be considered
   *     stale, and thus eligible for refresh
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #refreshAfterWrite} was already set
   * @throws ArithmeticException for durations greater than +/- approximately 292 years
   * @since 25.0 (but only since 33.3.0 in the Android <a
   *     href=""https://github.com/google/guava#guava-google-core-libraries-for-java"">flavor</a>)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,weakKeys,com.google.common.cache.CacheBuilder:weakKeys(),625,629,"/**
* Configures cache to use weak keys.
* @return updated CacheBuilder instance with weak key strength
*/","* Specifies that each key (not value) stored in the cache should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p><b>Warning:</b> when this method is used, the resulting cache will use identity ({@code ==})
   * comparison to determine equality of keys. Its {@link Cache#asMap} view will therefore
   * technically violate the {@link Map} specification (in the same way that {@link IdentityHashMap}
   * does).
   *
   * <p>Entries with keys that have been garbage collected may be counted in {@link Cache#size}, but
   * will never be visible to read or write operations; such entries are cleaned up as part of the
   * routine maintenance described in the class javadoc.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if the key strength was already set",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,weakValues,com.google.common.cache.CacheBuilder:weakValues(),659,663,"/**
* Configures cache to use weak values.
* @return CacheBuilder instance with weak value strength
*/","* Specifies that each value (not key) stored in the cache should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor
   * candidate for caching; consider {@link #softValues} instead.
   *
   * <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==})
   * comparison to determine equality of values.
   *
   * <p>Entries with values that have been garbage collected may be counted in {@link Cache#size},
   * but will never be visible to read or write operations; such entries are cleaned up as part of
   * the routine maintenance described in the class javadoc.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if the value strength was already set",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,softValues,com.google.common.cache.CacheBuilder:softValues(),685,689,"/**
* Configures cache to use soft references for values.
* @return updated CacheBuilder instance
*/","* Specifies that each value (not key) stored in the cache should be wrapped in a {@link
   * SoftReference} (by default, strong references are used). Softly-referenced objects will be
   * garbage-collected in a <i>globally</i> least-recently-used manner, in response to memory
   * demand.
   *
   * <p><b>Warning:</b> in most circumstances it is better to set a per-cache {@linkplain
   * #maximumSize(long) maximum size} instead of using soft references. You should only use this
   * method if you are well familiar with the practical consequences of soft references.
   *
   * <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==})
   * comparison to determine equality of values.
   *
   * <p>Entries with values that have been garbage collected may be counted in {@link Cache#size},
   * but will never be visible to read or write operations; such entries are cleaned up as part of
   * the routine maintenance described in the class javadoc.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if the value strength was already set",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,weakKeys,com.google.common.collect.MapMaker:weakKeys(),204,208,"/**
* Configures map to use weak keys.
* @return this MapMaker instance with weak key strength
*/","* Specifies that each key (not value) stored in the map should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==})
   * comparison to determine equality of keys, which is a technical violation of the {@link Map}
   * specification, and may not be what you expect.
   *
   * @throws IllegalStateException if the key strength was already set
   * @see WeakReference",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,weakValues,com.google.common.collect.MapMaker:weakValues(),241,245,"/**
* Enables weak values in the map.
* @return updated MapMaker instance with weak value strength
*/","* Specifies that each value (not key) stored in the map should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor
   * candidate for caching.
   *
   * <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==})
   * comparison to determine equality of values. This technically violates the specifications of the
   * methods {@link Map#containsValue containsValue}, {@link ConcurrentMap#remove(Object, Object)
   * remove(Object, Object)} and {@link ConcurrentMap#replace(Object, Object, Object) replace(K, V,
   * V)}, and may not be what you expect.
   *
   * @throws IllegalStateException if the value strength was already set
   * @see WeakReference",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,readMapMaker,com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:readMapMaker(java.io.ObjectInputStream),2851,2860,"/**
 * Reads a MapMaker configuration from an input stream.
 * @param in the ObjectInputStream to read from
 * @return configured MapMaker instance
 * @throws IOException if reading fails
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,failureCause,com.google.common.util.concurrent.AbstractService:failureCause(),502,505,"/**
 * Returns the failure cause of the snapshot.
 * @return Throwable representing the failure cause or null if none
 */",* @since 14.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkElementIndex,"com.google.common.base.Preconditions:checkElementIndex(int,int)",1349,1352,"/**
* Checks if an index is within valid range.
* @param index the index to check
* @param size the size of the collection
* @return the original index if valid
*/","* Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size
   * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.
   *
   * @param index a user-supplied index identifying an element of an array, list or string
   * @param size the size of that array, list or string
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkPositionIndex,"com.google.common.base.Preconditions:checkPositionIndex(int,int)",1398,1401,"/**
* Checks if index is valid for given size.
* @param index position to check
* @param size total number of elements
* @return the index if valid
*/","* Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of
   * size {@code size}. A position index may range from zero to {@code size}, inclusive.
   *
   * <p><b>Java 9 users:</b> consider using {@link java.util.Objects#checkIndex(index, size)}
   * instead. However, note that {@code checkIndex()} throws {@code IndexOutOfBoundsException} when
   * {@code size} is negative, while this method throws {@code IllegalArgumentException}.
   *
   * @param index a user-supplied index identifying a position in an array, list or string
   * @param size the size of that array, list or string
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkPositionIndexes,"com.google.common.base.Preconditions:checkPositionIndexes(int,int,int)",1445,1450,"/**
* Validates that start and end indexes are within bounds.
* @param start starting index (inclusive)
* @param end ending index (exclusive)
* @param size total size of the collection
* @throws IndexOutOfBoundsException if indexes are invalid
*/","* Ensures that {@code start} and {@code end} specify valid <i>positions</i> in an array, list or
   * string of size {@code size}, and are in order. A position index may range from zero to {@code
   * size}, inclusive.
   *
   * @param start a user-supplied index identifying a starting position in an array, list or string
   * @param end a user-supplied index identifying an ending position in an array, list or string
   * @param size the size of that array, list or string
   * @throws IndexOutOfBoundsException if either index is negative or is greater than {@code size},
   *     or if {@code end} is less than {@code start}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,equalTo,com.google.common.base.Predicates:equalTo(java.lang.Object),187,191,"/**
* Creates a predicate that checks if an object is equal to the target.
* @param target the object to compare against
* @return Predicate that returns true if input equals target, false otherwise
*/","* Returns a predicate that evaluates to {@code true} if the object being tested {@code equals()}
   * the given target or both are null.
   *
   * <p><b>Discouraged:</b> Prefer using {@code x -> Objects.equals(x, target)}, but note that
   * lambdas do not have human-readable {@link #toString()} representations and are not
   * serializable.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,createCombined,com.google.common.collect.Collections2$FilteredCollection:createCombined(com.google.common.base.Predicate),131,133,"/**
* Creates a combined filtered collection with an additional predicate.
* @param newPredicate additional filtering condition to apply
* @return new FilteredCollection with both original and new predicates
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterFiltered,"com.google.common.collect.Multimaps:filterFiltered(com.google.common.collect.FilteredMultimap,com.google.common.base.Predicate)",2221,2227,"/**
 * Filters a multimap based on combined predicates.
 * @param multimap the original filtered multimap
 * @param entryPredicate additional predicate for entries
 * @return a new filtered multimap with combined conditions
 */","* Support removal operations when filtering a filtered multimap. Since a filtered multimap has
   * iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would
   * lead to a multimap whose removal operations would fail. This method combines the predicates to
   * avoid that problem.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,filter,"com.google.common.collect.Multisets:filter(com.google.common.collect.Multiset,com.google.common.base.Predicate)",317,327,"/**
* Filters elements of a multiset based on a predicate.
* @param unfiltered the original multiset to filter
* @param predicate the condition to apply for filtering
* @return a new multiset containing only elements that match the predicate
*/","* Returns a view of the elements of {@code unfiltered} that satisfy a predicate. The returned
   * multiset is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting multiset's iterators, and those of its {@code entrySet()} and {@code
   * elementSet()}, do not support {@code remove()}. However, all other multiset methods supported
   * by {@code unfiltered} are supported by the returned multiset. When given an element that
   * doesn't satisfy the predicate, the multiset's {@code add()} and {@code addAll()} methods throw
   * an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code
   * clear()} are called on the filtered multiset, only elements that satisfy the filter will be
   * removed from the underlying multiset.
   *
   * <p>The returned multiset isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multiset's methods, such as {@code size()}, iterate across every
   * element in the underlying multiset and determine which elements satisfy the filter. When a live
   * view is <i>not</i> needed, it may be faster to copy the returned multiset and use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(com.google.common.base.CharMatcher),140,156,"/**
* Creates a Splitter using a character matcher as the separator.
* @param separatorMatcher defines characters to split on
* @return Splitter instance configured with the given matcher
*/","* Returns a splitter that considers any single character matched by the given {@code CharMatcher}
   * to be a separator. For example, {@code
   * Splitter.on(CharMatcher.anyOf("";,"")).split(""foo,;bar,quux"")} returns an iterable containing
   * {@code [""foo"", """", ""bar"", ""quux""]}.
   *
   * @param separatorMatcher a {@link CharMatcher} that determines whether a character is a
   *     separator
   * @return a splitter, with default settings, that uses this matcher",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,fixedLength,com.google.common.base.Splitter:fixedLength(int),271,288,"/**
* Creates a splitter that divides strings into fixed-length chunks.
* @param length the size of each chunk
* @return a Splitter object configured for fixed-length splitting
*/","* Returns a splitter that divides strings into pieces of the given length. For example, {@code
   * Splitter.fixedLength(2).split(""abcde"")} returns an iterable containing {@code [""ab"", ""cd"",
   * ""e""]}. The last piece can be smaller than {@code length} but will never be empty.
   *
   * <p><b>Note:</b> if {@link #fixedLength} is used in conjunction with {@link #limit}, the final
   * split piece <i>may be longer than the specified fixed length</i>. This is because the splitter
   * will <i>stop splitting when the limit is reached</i>, and just return the final piece as-is.
   *
   * <p><b>Exception:</b> for consistency with separator-based splitters, {@code split("""")} does not
   * yield an empty iterable, but an iterable containing {@code """"}. This is the only case in which
   * {@code Iterables.size(split(input))} does not equal {@code IntMath.divide(input.length(),
   * length, CEILING)}. To avoid this behavior, use {@code omitEmptyStrings}.
   *
   * @param length the desired length of pieces after splitting, a positive integer
   * @return a splitter, with default settings, that can split into fixed sized pieces
   * @throws IllegalArgumentException if {@code length} is zero or negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,trimResults,com.google.common.base.Splitter:trimResults(),340,342,"/**
 * Trims results using whitespace matcher.
 * @return Splitter configured to trim with whitespace
 */","* Returns a splitter that behaves equivalently to {@code this} splitter, but automatically
   * removes leading and trailing {@linkplain CharMatcher#whitespace whitespace} from each returned
   * substring; equivalent to {@code trimResults(CharMatcher.whitespace())}. For example, {@code
   * Splitter.on(',').trimResults().split("" a, b ,c "")} returns an iterable containing {@code [""a"",
   * ""b"", ""c""]}.
   *
   * @return a splitter with the desired configuration",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createUnstarted,com.google.common.base.Stopwatch:createUnstarted(),110,112,"/**
 * Creates an unstarted Stopwatch instance.
 * @return Stopwatch object ready to start
 */","* Creates (but does not start) a new stopwatch using {@link System#nanoTime} as its time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createStarted,com.google.common.base.Stopwatch:createStarted(),128,130,"/**
 * Creates and starts a new stopwatch.
 * @return a running Stopwatch instance
 */","* Creates (and starts) a new stopwatch using {@link System#nanoTime} as its time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,elapsedNanos,com.google.common.cache.LocalCache$LoadingValueReference:elapsedNanos(),3597,3599,"/**
 * Returns the elapsed time in nanoseconds.
 * @return Elapsed time in nanoseconds
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,readMicros,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:readMicros(),470,470,"/**
 * Reads the current time in microseconds.
 * @return The current time in microseconds
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,encodedLength,com.google.common.base.Utf8:encodedLength(java.lang.CharSequence),48,76,"/**
* Calculates the encoded UTF-8 length of a CharSequence.
* @param sequence input character sequence
* @return length of the sequence when encoded in UTF-8
*/","* Returns the number of bytes in the UTF-8-encoded form of {@code sequence}. For a string, this
   * method is equivalent to {@code string.getBytes(UTF_8).length}, but is more efficient in both
   * time and space.
   *
   * @throws IllegalArgumentException if {@code sequence} contains ill-formed UTF-16 (unpaired
   *     surrogates)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitTerminationUninterruptibly,com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService),539,544,"/**
* Waits indefinitely for the executor service to terminate without interruption.
* @param executor ExecutorService to wait for termination
*/","* Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit)
   * awaitTermination(long, TimeUnit)} uninterruptibly with no timeout.
   *
   * @since 30.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,run,com.google.common.base.internal.Finalizer:run(),139,151,"/**
* Continuously processes and cleans up items from a queue.
* @param queue the queue to process items from
*/","Loops continuously, pulling references off the queue and cleaning them up.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,<init>,com.google.common.collect.ImmutableMultimap$Builder:<init>(),176,176,"/**
 * Initializes a new Builder instance.
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableMultimap#builder}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,apply,com.google.common.cache.AbstractLoadingCache:apply(java.lang.Object),69,72,"/**
 * Applies a function to the given key.
 * @param key input key
 * @return value associated with the key or throws an exception if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recreateCacheBuilder,com.google.common.cache.LocalCache$ManualSerializationProxy:recreateCacheBuilder(),4733,4763,"/**
* Recreates a CacheBuilder with specified configurations.
* @return Configured CacheBuilder instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,from,com.google.common.cache.CacheLoader:from(com.google.common.base.Function),140,142,"/**
* Converts a Function to a CacheLoader.
* @param function mapping from key to value
* @return CacheLoader that uses the provided function
*/","* Returns a cache loader that uses {@code function} to load keys, without supporting either
   * reloading or bulk loading. This allows creating a cache loader using a lambda expression.
   *
   * <p>The returned object is serializable if {@code function} is serializable.
   *
   * @param function the function to be used for loading values; must never return {@code null}
   * @return a cache loader that loads values by passing each key to {@code function}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,from,com.google.common.cache.CacheLoader:from(com.google.common.base.Supplier),155,157,"/**
 * Converts a Supplier to a CacheLoader.
 * @param supplier provides values to load into cache
 * @return CacheLoader instance wrapping the supplier
 */","* Returns a cache loader based on an <i>existing</i> supplier instance. Note that there's no need
   * to create a <i>new</i> supplier just to pass it in here; just subclass {@code CacheLoader} and
   * implement {@link #load load} instead.
   *
   * <p>The returned object is serializable if {@code supplier} is serializable.
   *
   * @param supplier the supplier to be used for loading values; must never return {@code null}
   * @return a cache loader that loads values by calling {@link Supplier#get}, irrespective of the
   *     key",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,loadAll,com.google.common.cache.CacheLoader$1:loadAll(java.lang.Iterable),125,129,"/**
* Throws an exception as batch loading is not supported.
* @param keys iterable of keys to load
* @throws Exception if operation is unsupported
*/","* Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link
   * LoadingCache#getAll}.
   *
   * <p>If the returned map doesn't contain all requested {@code keys} then the entries it does
   * contain will be cached, but {@code getAll} will throw an exception. If the returned map
   * contains extra keys not present in {@code keys} then all returned entries will be cached, but
   * only the entries for {@code keys} will be returned from {@code getAll}.
   *
   * <p>This method should be overridden when bulk retrieval is significantly more efficient than
   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls
   * to {@link LoadingCache#get} if this method is not overridden.
   *
   * @param keys the unique, non-null keys whose values should be loaded
   * @return a map from each key in {@code keys} to the value associated with that key; <b>may not
   *     contain null values</b>
   * @throws Exception if unable to load the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,hitRate,com.google.common.cache.CacheStats:hitRate(),123,126,"/**
* Calculates the cache hit rate.
* @return ratio of successful hits to total requests, or 1.0 if no requests
*/","* Returns the ratio of cache requests which were hits. This is defined as {@code hitCount /
   * requestCount}, or {@code 1.0} when {@code requestCount == 0}. Note that {@code hitRate +
   * missRate =~ 1.0}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,missRate,com.google.common.cache.CacheStats:missRate(),147,150,"/**
* Calculates the cache miss rate.
* @return The ratio of misses to total requests as a percentage.
*/","* Returns the ratio of cache requests which were misses. This is defined as {@code missCount /
   * requestCount}, or {@code 0.0} when {@code requestCount == 0}. Note that {@code hitRate +
   * missRate =~ 1.0}. Cache misses include all requests which weren't cache hits, including
   * requests which resulted in either successful or failed loading attempts, and requests which
   * waited for other threads to finish loading. It is thus the case that {@code missCount >=
   * loadSuccessCount + loadExceptionCount}. Multiple concurrent misses for the same key will result
   * in a single load operation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,<init>,com.google.common.cache.ForwardingCache$SimpleForwardingCache:<init>(com.google.common.cache.Cache),136,138,"/**
 * Initializes a new cache with a delegate.
 * @param delegate the backing cache to use
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,<init>,com.google.common.cache.ForwardingLoadingCache:<init>(),39,39,"/**
 * Constructs a new instance of ForwardingLoadingCache.
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$ManualSerializationProxy:<init>(com.google.common.cache.LocalCache$Strength,com.google.common.cache.LocalCache$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,long,long,long,com.google.common.cache.Weigher,int,com.google.common.cache.RemovalListener,com.google.common.base.Ticker,com.google.common.cache.CacheLoader)",4706,4731,"/**
 * Initializes a new ManualSerializationProxy with specified cache parameters.
 * @param keyStrength strength of keys
 * @param valueStrength strength of values
 * @param keyEquivalence equivalence for keys
 * @param valueEquivalence equivalence for values
 * @param expireAfterWriteNanos expiration time after write in nanoseconds
 * @param expireAfterAccessNanos expiration time after access in nanoseconds
 * @param maxWeight maximum weight of cache entries
 * @param weigher weigher for cache entries
 * @param concurrencyLevel expected number of concurrent threads accessing the cache
 * @param removalListener listener for cache entry removals
 * @param ticker ticker for measuring time
 * @param loader cache loader for loading values
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,<init>,com.google.common.collect.ForwardingList:<init>(),58,58,"/**
 * Constructs a new instance of ForwardingList.
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,<init>,com.google.common.collect.ForwardingMultiset:<init>(),54,54,"/**
 * Constructs a new, empty ForwardingMultiset instance.
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,<init>,com.google.common.collect.ForwardingQueue:<init>(),52,52,"/**
 * Constructs a new instance of ForwardingQueue.
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,<init>,com.google.common.collect.ForwardingSet:<init>(),54,54,/** Constructs a new instance of ForwardingSet. */,Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$UnmodifiableEntries:<init>(java.util.Collection),1535,1537,"/**
 * Initializes the collection of unmodifiable entries.
 * @param entries the collection of entries to be wrapped as unmodifiable
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$CartesianSet:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.CartesianList)",1582,1585,"/**
* Constructs a CartesianSet with specified axes and delegate.
* @param axes immutable list of immutable sets representing the axes
* @param delegate backing CartesianList for operations
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListIterator.java,<init>,com.google.common.collect.ForwardingListIterator:<init>(),44,44,"/**
 * Constructs a new ForwardingListIterator.
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,<init>,"com.google.common.collect.AbstractBiMap:<init>(java.util.Map,com.google.common.collect.AbstractBiMap)",69,72,"/**
 * Initializes a bidirectional map with given maps.
 * @param backward map from keys to values
 * @param forward map from values to keys
 */",Private constructor for inverse bimap.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,<init>,com.google.common.collect.ForwardingConcurrentMap:<init>(),44,44,"/**
* Constructor for ForwardingConcurrentMap.
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,<init>,com.google.common.collect.ForwardingSortedMap:<init>(),63,63,"/**
 * Constructs an empty ForwardingSortedMap.
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,<init>,com.google.common.collect.ImmutableClassToInstanceMap:<init>(com.google.common.collect.ImmutableMap),173,175,"/**
 * Constructs an ImmutableClassToInstanceMap from an ImmutableMap.
 * @param delegate backing map with class keys and instance values
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$UnmodifiableBiMap:<init>(com.google.common.collect.BiMap,com.google.common.collect.BiMap)",1711,1715,"/**
* Creates an unmodifiable view of a given BiMap.
* @param delegate the original BiMap to wrap
* @param inverse the inverse BiMap, if available
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,<init>,com.google.common.collect.MutableClassToInstanceMap:<init>(java.util.Map),75,77,"/**
* Initializes with a delegate map.
* @param delegate backing map for class-to-instance associations
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,<init>,com.google.common.reflect.ImmutableTypeToInstanceMap:<init>(com.google.common.collect.ImmutableMap),98,100,"/**
* Constructs an ImmutableTypeToInstanceMap with a given delegate map.
* @param delegate immutable map of TypeToken to instances
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,<init>,com.google.common.reflect.MutableTypeToInstanceMap:<init>(),41,41,"/**
 * Constructs a new instance of MutableTypeToInstanceMap.
 */",Creates a new map.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,<init>,com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:<init>(java.util.Map$Entry),161,163,"/**
 * Constructs an unmodifiable entry from another entry.
 * @param delegate the underlying entry to wrap
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,<init>,com.google.common.collect.ForwardingListMultimap:<init>(),41,41,"/**
 * Constructs an empty ForwardingListMultimap.
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,<init>,com.google.common.collect.ForwardingSetMultimap:<init>(),41,41,"/**
 * Constructs an empty ForwardingSetMultimap instance.
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableMultimap:<init>(com.google.common.collect.Multimap),687,689,"/**
 * Constructs an unmodifiable multimap from a given delegate.
 * @param delegate the underlying multimap to wrap
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,com.google.common.collect.Tables$UnmodifiableTable:<init>(com.google.common.collect.Table),544,546,"/**
 * Wraps a table to make it unmodifiable.
 * @param delegate original table to wrap
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,<init>,com.google.common.util.concurrent.ForwardingListeningExecutorService:<init>(),40,40,"/**
 * Initializes a new instance of ForwardingListeningExecutorService.
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,<init>,com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture:<init>(java.util.concurrent.Future),88,90,"/**
 * Initializes a new forwarding future with a delegate.
 * @param delegate the original future to delegate calls to
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,<init>,com.google.common.util.concurrent.ForwardingListenableFuture:<init>(),37,37,"/**
 * Constructs an instance of ForwardingListenableFuture.
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,<init>,"com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:<init>(java.util.concurrent.Future,java.util.concurrent.Executor)",128,131,"/**
* Adapts a Future to a ListenableFuture using an executor.
* @param delegate the original Future to adapt
* @param adapterExecutor the executor to use for adaptation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,get,com.google.common.cache.ForwardingLoadingCache:get(java.lang.Object),44,48,"/**
 * Retrieves value by key.
 * @param key unique identifier for the value
 * @return value associated with the key or null if not found
 * @throws ExecutionException if an error occurs during retrieval
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,getUnchecked,com.google.common.cache.ForwardingLoadingCache:getUnchecked(java.lang.Object),50,54,"/**
* Retrieves value by key without checked exceptions.
* @param key the key to look up
* @return the value associated with the key
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,getAll,com.google.common.cache.ForwardingLoadingCache:getAll(java.lang.Iterable),56,60,"/**
 * Retrieves all entries for the given keys.
 * @param keys iterable of keys to fetch
 * @return map of key-value pairs or empty if none found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,apply,com.google.common.cache.ForwardingLoadingCache:apply(java.lang.Object),62,65,"/**
 * Applies the function to the given key.
 * @param key input key
 * @return result of applying the function
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,refresh,com.google.common.cache.ForwardingLoadingCache:refresh(java.lang.Object),67,70,"/**
 * Refreshes the entry associated with the given key.
 * @param key the key whose entry is to be refreshed
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,delegate,com.google.common.cache.ForwardingCache:delegate(),41,42,"/**
 * Provides the delegate cache instance.
 * @return Cache instance to be used as a delegate
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,entrySet,com.google.common.collect.ImmutableMultiset:entrySet(),359,363,"/**
* Returns an immutable set of entries.
* Caches the result for future calls.
* @return ImmutableSet of Entry objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getNextEvictable,com.google.common.cache.LocalCache$Segment:getNextEvictable(),2669,2678,"/**
* Retrieves the next evictable entry from the access queue.
* @return ReferenceEntry with positive weight or throws AssertionError if none found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache:copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",1709,1714,"/**
 * Copies a reference entry to a new next entry.
 * @param original the original entry to copy
 * @param newNext the new next entry in the chain
 * @return the copied entry
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,put,"com.google.common.collect.Maps$AbstractFilteredMap:put(java.lang.Object,java.lang.Object)",2863,2867,"/**
* Adds a key-value pair to the map if it satisfies the filter condition.
* @param key the key to be added
* @param value the value to be associated with the key
* @return the previous value associated with the key, or null if none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,putAll,com.google.common.collect.Maps$AbstractFilteredMap:putAll(java.util.Map),2869,2875,"/**
* Adds all entries from the specified map, applying a filter.
* @param map the map to add entries from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsKey,com.google.common.collect.Maps$AbstractFilteredMap:containsKey(java.lang.Object),2877,2880,"/**
 * Checks if the map contains a specified key with a value that passes the filter.
 * @param key the key to check
 * @return true if the key exists and its value is filtered; false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$AbstractFilteredMap:get(java.lang.Object),2882,2886,"/**
* Retrieves value by key if it satisfies a condition.
* @param key the key to look up
* @return the value associated with the key or null if not found or condition fails
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,clear,com.google.common.collect.StandardTable$Column$EntrySet:clear(),534,537,"/**
 * Clears all elements from the column.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$1:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new reference entry.
* @param segment the segment to associate with the entry
* @param key the entry's key
* @param hash the hash of the key
* @param next the next entry in the chain
* @return a new ReferenceEntry instance
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongAccessEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1011,1013,"/**
 * Constructs a StrongAccessEntry with the specified key, hash, and next entry.
 * @param key the entry's key
 * @param hash the entry's hash code
 * @param next reference to the next entry in the chain
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongAccessWriteEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1103,1105,"/**
* Constructs a StrongAccessWriteEntry with a specified key, hash, and next entry.
* @param key the key for this entry
* @param hash the hash code of the key
* @param next reference to the next entry in the chain
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongWriteEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1057,1059,"/**
* Constructs a new StrongWriteEntry.
* @param key entry key
* @param hash entry hash code
* @param next reference to the next entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$5:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new entry in the given segment.
* @param segment the segment to add the entry to
* @param key the key for the new entry
* @param hash the hash of the key
* @param next reference to the next entry
* @return the newly created ReferenceEntry object
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakAccessEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1298,1300,"/**
* Constructs a new WeakAccessEntry.
* @param queue reference queue for cleared entries
* @param key entry key
* @param hash entry hash code
* @param next next entry in the chain
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakAccessWriteEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1390,1393,"/**
* Constructs a new WeakAccessWriteEntry.
* @param queue reference queue for cleanup
* @param key entry key
* @param hash hash code of the key
* @param next next entry in the chain
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakWriteEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1344,1346,"/**
* Constructs a weak write entry.
* @param queue reference queue for enqueuing discarded entries
* @param key entry key (weakly referenced)
* @param hash key hash code
* @param next next entry in the chain
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,notifyNewValue,com.google.common.cache.LocalCache$LoadingValueReference:notifyNewValue(java.lang.Object),3533,3545,"/**
* Notifies of a new value or nullifies the old one.
* @param newValue the new value to set, or null to unset
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,compute,"com.google.common.cache.LocalCache$LoadingValueReference:compute(java.lang.Object,java.util.function.BiFunction)",3577,3595,"/**
* Computes a new value for the given key using the provided function.
* @param key the key to compute the value for
* @param function the function to compute the new value
* @return the newly computed value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,run,com.google.common.util.concurrent.AbstractCatchingFuture:run(),77,147,"/**
 * Executes the fallback logic if an exception occurs.
 * @param inputFuture future to check for exceptions
 * @param exceptionType type of exception to handle
 * @param fallback fallback function to execute
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,run,com.google.common.util.concurrent.AbstractTransformFuture:run(),67,173,"/**
* Executes transformation on input future result.
* Handles cancellation, exceptions, and errors gracefully.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,get,com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:get(),346,349,"/**
 * Retrieves the result of the computation.
 * @throws ExecutionException if an exception was thrown during computation
 */","* Returns the final value of the associated {@link ClosingFuture}, or throws an exception as
     * {@link Future#get()} would.
     *
     * <p>Because the asynchronous operation has already completed, this method is synchronous and
     * returns immediately.
     *
     * @throws CancellationException if the computation was cancelled
     * @throws ExecutionException if the computation threw an exception",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,run,com.google.common.util.concurrent.Futures$CallbackListener:run(),1111,1133,"/**
 * Handles future completion by invoking callbacks on success or failure.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,runUninterruptiblyWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",95,99,"/**
* Executes a task with a specified timeout.
* @param runnable the task to execute
* @param timeoutDuration timeout duration
* @param timeoutUnit unit of timeout
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",135,156,"/**
* Executes a callable with a specified timeout.
* @param callable the task to execute
* @param timeoutDuration the maximum time to wait for completion
* @param timeoutUnit the time unit of the timeout duration
* @return result of the callable if completed within timeout
* @throws TimeoutException if execution times out
* @throws InterruptedException if interrupted while waiting
* @throws ExecutionException if task throws an exception
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,callUninterruptiblyWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",158,179,"/**
 * Executes a callable with a timeout, returning the result or throwing exceptions.
 * @param callable task to execute
 * @param timeoutDuration time limit for execution
 * @param timeoutUnit unit of time for timeout
 * @return result of the callable
 * @throws TimeoutException if execution exceeds timeout
 * @throws ExecutionException if task throws an exception
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,runWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",181,199,"/**
 * Executes a task with a specified timeout.
 * @param runnable the task to execute
 * @param timeoutDuration the maximum time to wait for completion
 * @param timeoutUnit the unit of time for the timeout
 * @throws TimeoutException if the task does not complete within the timeout
 * @throws InterruptedException if the current thread is interrupted while waiting
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,runUninterruptiblyWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",201,219,"/**
 * Executes a task with a timeout, interrupting it if necessary.
 * @param runnable the task to execute
 * @param timeoutDuration the maximum time to wait for the task
 * @param timeoutUnit the unit of time for the timeout
 * @throws TimeoutException if the task times out
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,postWriteCleanup,com.google.common.cache.LocalCache$Segment:postWriteCleanup(),3459,3461,"/**
 * Performs cleanup operations without locking.
 */",Performs routine cleanup following a write.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,referenceValue,"com.google.common.cache.LocalCache$Strength$2:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)",436,437,"/**
* Creates a value reference for a cache entry.
* @param segment cache segment containing the entry
* @param entry cache entry to reference
* @param value value associated with the entry
* @param weight weight of the value
* @return ValueReference object encapsulating the value
*/",Creates a reference for the given value according to this value strength.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$WeightedSoftValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1649,1653,"/**
* Creates a weighted soft reference for a value.
* @param queue the reference queue to enqueue upon garbage collection
* @param value the referent of the new reference
* @param entry the associated reference entry
* @return a WeightedSoftValueReference instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,referenceValue,"com.google.common.cache.LocalCache$Strength$1:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)",436,437,"/**
* Creates a value reference.
* @param segment memory segment
* @param entry reference entry
* @param value associated value
* @param weight weight of the value
* @return ValueReference object
*/",Creates a reference for the given value according to this value strength.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,referenceValue,"com.google.common.cache.LocalCache$Strength$3:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)",436,437,"/**
 * Creates a value reference.
 * @param segment memory segment containing entries
 * @param entry reference entry for the value
 * @param value actual value to be referenced
 * @param weight weight of the value
 * @return ValueReference object
 */",Creates a reference for the given value according to this value strength.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$WeightedWeakValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1627,1631,"/**
* Creates a weighted weak value reference.
* @param queue reference queue to enqueue upon garbage collection
* @param value the referent object
* @param entry associated reference entry
* @return a new WeightedWeakValueReference instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$AccessQueue:remove(java.lang.Object),3859,3870,"/**
* Removes an entry from the access queue.
* @param o the entry to remove
* @return true if removal was successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$AccessQueue:clear(),3895,3906,"/**
* Clears the access order queue.
* Resets all entries to initial state.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyAccessEntry,"com.google.common.cache.LocalCache$EntryFactory:copyAccessEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",630,639,"/**
 * Copies access entry details from original to new entry.
 * @param original the source ReferenceEntry
 * @param newEntry the destination ReferenceEntry
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyWriteEntry,"com.google.common.cache.LocalCache$EntryFactory:copyWriteEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",642,651,"/**
 * Copies write order from original entry to new entry.
 * @param original the source entry
 * @param newEntry the destination entry
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$WriteQueue:remove(java.lang.Object),3719,3730,"/**
 * Removes an entry from the write queue.
 * @param o the entry to remove
 * @return true if the entry was not the last in the queue
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$WriteQueue:clear(),3755,3766,"/**
 * Clears all entries in the write queue.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesWriteEntries,com.google.common.cache.LocalCache:usesWriteEntries(),368,370,"/**
 * Checks if write entries are used.
 * @return true if either write queue is used or writes are recorded, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$Segment:<init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)",1964,1984,"/**
* Initializes a Segment with specified parameters.
* @param map local cache to associate with this segment
* @param initialCapacity starting capacity for the segment's table
* @param maxSegmentWeight maximum weight for the segment
* @param statsCounter counter for tracking statistics
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordRead,"com.google.common.cache.LocalCache$Segment:recordRead(com.google.common.cache.ReferenceEntry,long)",2530,2535,"/**
 * Records access time and adds entry to recency queue.
 * @param entry the ReferenceEntry to record
 * @param now current timestamp
 */","* Records the relative order in which this read was performed by adding {@code entry} to the
     * recency queue. At write-time, or when the queue is full past the threshold, the queue will be
     * drained and the entries therein processed.
     *
     * <p>Note: locked reads should use {@link #recordLockedRead}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordLockedRead,"com.google.common.cache.LocalCache$Segment:recordLockedRead(com.google.common.cache.ReferenceEntry,long)",2544,2550,"/**
* Records a locked read operation for an entry.
* Updates access time and adds to access queue.
* @param entry the ReferenceEntry being accessed
* @param now current timestamp
*/","* Updates the eviction metadata that {@code entry} was just read. This currently amounts to
     * adding {@code entry} to relevant eviction lists.
     *
     * <p>Note: this method should only be called under lock, as it directly manipulates the
     * eviction queues. Unlocked reads should use {@link #recordRead}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordWrite,"com.google.common.cache.LocalCache$Segment:recordWrite(com.google.common.cache.ReferenceEntry,int,long)",2556,2570,"/**
* Records a write operation for an entry.
* @param entry the ReferenceEntry to record
* @param weight the weight of the entry
* @param now the current time in milliseconds
*/","* Updates eviction metadata that {@code entry} was just written. This currently amounts to
     * adding {@code entry} to relevant eviction lists.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordsTime,com.google.common.cache.LocalCache:recordsTime(),364,366,"/**
 * Checks if time recording is enabled.
 * @return true if either write or access recording is enabled
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesAccessEntries,com.google.common.cache.LocalCache:usesAccessEntries(),372,374,"/**
 * Checks if access entries are used.
 * @return true if either access queue or records access is used
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getLiveValue,"com.google.common.cache.LocalCache:getLiveValue(com.google.common.cache.ReferenceEntry,long)",1773,1786,"/**
* Retrieves the live value from a cache entry.
* @param entry the cache entry to retrieve from
* @param now current timestamp in milliseconds
* @return the live value or null if expired or not found
*/","* Gets the value from an entry. Returns null if the entry is invalid, partially-collected,
   * loading, or expired. Unlike {@link Segment#getLiveValue} this method does not attempt to clean
   * up stale entries. As such it should only be called outside a segment context, such as during
   * iteration.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache$AbstractCacheSet:size(),4538,4541,"/**
 * Returns the number of entries in the cache.
 * @return size of the cache
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache$Values:size(),4590,4593,"/**
 * Returns the number of entries in the cache.
 * @return the number of cached entries
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,size,com.google.common.collect.HashMultiset:size(),185,188,"/**
 * Returns the size of the collection.
 * @return the number of elements in the collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,size,com.google.common.collect.LinkedHashMultiset:size(),185,188,"/**
 * Returns the size of the collection.
 * @return Size as an integer, saturated if necessary
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,size,com.google.common.collect.Iterables:size(java.lang.Iterable),129,133,"/**
 * Returns the size of an Iterable.
 * @param iterable the Iterable to measure
 * @return size of the Iterable
 */",Returns the number of elements in {@code iterable}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap$EntrySet:size(),2771,2774,"/**
 * Returns the number of key-value pairs in the map.
 * @return the size of the map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap$KeySet:size(),2683,2686,"/**
 * Returns the number of entries in the map.
 * @return Size of the map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap$Values:size(),2717,2720,"/**
 * Returns the number of key-value pairs in the map.
 * @return size of the map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardSize,com.google.common.collect.ForwardingMultiset:standardSize(),274,276,"/**
 * Calculates the size of the multiset using linear time complexity.
 * @return The size of the multiset
 */","* A sensible, albeit inefficient, definition of {@link #size} in terms of {@link #entrySet}. If
   * you override {@link #entrySet}, you may wish to override {@link #size} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,size,com.google.common.collect.Multisets$ViewMultiset:size(),1173,1176,"/**
 * Returns the size of the collection.
 * @return number of elements in the collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,size,com.google.common.collect.Lists$OnePlusArrayList:size(),348,351,"/**
 * Returns the size of the collection.
 * Uses saturated addition to prevent overflow.
 * @return size of the collection as an integer
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,size,com.google.common.collect.Lists$TwoPlusArrayList:size(),379,382,"/**
 * Returns the total number of elements.
 * @return sum of rest length and 2, saturated to avoid overflow
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractBaseGraph:degree(java.lang.Object),136,145,"/**
* Calculates the degree of a node.
* @param node the node to calculate the degree for
* @return the degree of the node, considering self-loops if allowed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,toByteArrayInternal,"com.google.common.io.ByteStreams:toByteArrayInternal(java.io.InputStream,java.util.Queue,int)",175,209,"/**
 * Reads input stream into a byte array.
 * @param in input stream to read from
 * @param bufs queue to store intermediate buffers
 * @param totalLen current total length of data read
 * @return byte array containing all data from the input stream
 * @throws IOException if an I/O error occurs
 */","* Returns a byte array containing the bytes from the buffers already in {@code bufs} (which have
   * a total combined length of {@code totalLen} bytes) followed by all bytes remaining in the given
   * input stream.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedPow,"com.google.common.math.IntMath:saturatedPow(int,int)",571,616,"/**
* Computes the saturated power of an integer.
* @param b base integer
* @param k exponent, must be non-negative
* @return saturated result of b raised to the power of k
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,setDelegates,"com.google.common.collect.AbstractBiMap:setDelegates(java.util.Map,java.util.Map)",97,105,"/**
* Sets delegates and inverses for mapping.
* @param forward map from K to V
* @param backward map from V to K
*/","* Specifies the delegate maps going in each direction. Called by the constructor and by
   * subclasses during deserialization.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,all,com.google.common.collect.GeneralRange:all(java.util.Comparator),60,62,"/**
* Creates an open-ended range with no lower or upper bounds.
* @param <T> the type of elements in the range
* @param comparator the comparator for element comparison
* @return a GeneralRange object representing all values
*/",Returns the whole range relative to the specified comparator.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,downTo,"com.google.common.collect.GeneralRange:downTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)",68,71,"/**
 * Creates a range from the given endpoint downwards.
 * @param <T> type of elements in the range
 * @param comparator for comparing elements
 * @param endpoint upper limit of the range
 * @param boundType type of inclusion for the endpoint
 * @return GeneralRange object representing the range
 */","* Returns everything above the endpoint relative to the specified comparator, with the specified
   * endpoint behavior.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,upTo,"com.google.common.collect.GeneralRange:upTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)",77,80,"/**
* Creates a range up to a specified endpoint.
* @param <T> type of the elements in the range
* @param comparator for comparing range elements
* @param endpoint upper limit of the range
* @param boundType type of inclusion for the endpoint (open or closed)
* @return GeneralRange object representing the range
*/","* Returns everything below the endpoint relative to the specified comparator, with the specified
   * endpoint behavior.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,range,"com.google.common.collect.GeneralRange:range(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",86,93,"/**
* Creates a range with specified bounds.
* @param comparator for comparing range elements
* @param lower the lower bound value
* @param lowerType type of lower bound (inclusive/exclusive)
* @param upper the upper bound value
* @param upperType type of upper bound (inclusive/exclusive)
* @return GeneralRange object representing the specified bounds
*/","* Returns everything between the endpoints relative to the specified comparator, with the
   * specified endpoint behavior.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,intersect,com.google.common.collect.GeneralRange:intersect(com.google.common.collect.GeneralRange),193,239,"/**
* Intersects two ranges with the same comparator.
* @param other the range to intersect with
* @return a new range representing the intersection or an empty range if disjoint
*/","* Returns the intersection of the two ranges, or an empty range if their intersection is empty.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$TransformedEntriesMap:get(java.lang.Object),2157,2160,"/**
 * Retrieves value by key.
 * @param key object used as key
 * @return value associated with key or null if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,getElement,com.google.common.collect.TreeMultiset$1:getElement(),1031,1035,"/**
 * Retrieves an element from the collection.
 * @return the element or null if not present
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,count,"com.google.common.collect.TreeMultiset$AvlNode:count(java.util.Comparator,java.lang.Object)",644,653,"/**
* Counts elements matching comparator and value.
* @param comparator for comparing elements
* @param e element to compare against
* @return count of matching elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,ceiling,"com.google.common.collect.TreeMultiset$AvlNode:ceiling(java.util.Comparator,java.lang.Object)",1008,1018,"/**
 * Finds the smallest element greater than or equal to the given element.
 * @param comparator comparator for element comparison
 * @param e element to compare against
 * @return AvlNode with the ceiling element or null if none exists
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,floor,"com.google.common.collect.TreeMultiset$AvlNode:floor(java.util.Comparator,java.lang.Object)",1020,1029,"/**
* Finds the largest node less than or equal to given element.
* @param comparator comparator for element comparison
* @param e target element
* @return AvlNode with largest element <= e or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putInBothMaps,"com.google.common.collect.AbstractBiMap:putInBothMaps(java.lang.Object,java.lang.Object,boolean)",136,152,"/**
 * Puts a key-value pair in both maps.
 * @param key the key to insert
 * @param value the value to associate with the key
 * @param force whether to overwrite existing value
 * @return old value associated with the key or null if none
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,remove,com.google.common.collect.AbstractBiMap:remove(java.lang.Object),166,170,"/**
* Removes entry by key from both maps.
* @param key key to be removed
* @return value associated with the key or null if not present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,com.google.common.collect.Collections2$PermutationIterator:<init>(java.util.List),636,644,"/**
* Initializes a PermutationIterator with the given list.
* @param list elements to iterate over permutations
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConsumingQueueIterator.java,<init>,com.google.common.collect.ConsumingQueueIterator:<init>(java.util.Queue),31,33,"/**
 * Initializes an iterator with the given queue.
 * @param queue the queue to iterate over; must not be null
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,<init>,com.google.common.graph.EndpointPairIterator:<init>(com.google.common.graph.BaseGraph),46,49,"/**
* Initializes an iterator for endpoint pairs in a graph.
* @param graph the graph to iterate over
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,next,com.google.common.collect.AbstractIterator:next(),149,161,"/**
* Returns the next element in the iteration.
* @throws NoSuchElementException if no more elements are available
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,peek,com.google.common.collect.AbstractIterator:peek(),170,177,"/**
* Retrieves the next element without removing it.
* @throws NoSuchElementException if no elements remain
*/","* Returns the next element in the iteration without advancing the iteration, according to the
   * contract of {@link PeekingIterator#peek()}.
   *
   * <p>Implementations of {@code AbstractIterator} that wish to expose this functionality should
   * implement {@code PeekingIterator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,spliterator,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:spliterator(),1429,1432,"/**
* Returns a spliterator over the entries in the map.
* @return Spliterator for entries with wrapped values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,next,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:next(),1463,1468,"/**
* Returns the next entry from the iterator.
* @return wrapped Entry object containing key and collection of values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lowerEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lowerEntry(java.lang.Object),1551,1555,"/**
* Retrieves the greatest entry less than the specified key.
* @param key the key to compare against
* @return wrapped Entry object or null if no such entry exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lowerKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lowerKey(java.lang.Object),1557,1560,"/**
* Finds the greatest key less than the specified key.
* @param key the reference key
* @return the greatest key less than key, or null if no such key exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floorEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:floorEntry(java.lang.Object),1562,1566,"/**
* Retrieves the greatest entry less than or equal to the specified key.
* @param key the key to search for
* @return wrapped Entry object or null if no such entry exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floorKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:floorKey(java.lang.Object),1568,1571,"/**
* Returns the greatest key less than or equal to the specified key.
* @param key the key to search for
* @return the greatest key less than or equal to key, or null if no such key exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceilingEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:ceilingEntry(java.lang.Object),1573,1577,"/**
* Returns the smallest entry greater than or equal to the specified key.
* @param key the key to search for
* @return Entry with the smallest key >= the specified key, or null if no such entry exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceilingKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:ceilingKey(java.lang.Object),1579,1582,"/**
 * Returns the least key greater than or equal to the specified key.
 * @param key the key to search for
 * @return the least key greater than or equal to the specified key, or null if no such key exists
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higherEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:higherEntry(java.lang.Object),1584,1588,"/**
* Returns the least entry greater than the specified key.
* @param key the key to search for
* @return an Entry or null if no such entry exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higherKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:higherKey(java.lang.Object),1590,1593,"/**
* Returns the least key greater than the specified key.
* @param key the reference key
* @return the least key greater than key, or null if no such key exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,firstEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:firstEntry(),1595,1599,"/**
* Retrieves the first entry from the sorted map.
* @return wrapped Entry object or null if the map is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lastEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lastEntry(),1601,1605,"/**
* Returns the last entry in the sorted map.
* @return wrapped Entry object or null if map is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:descendingMap(),1629,1632,"/**
* Returns a navigable map with elements in reverse order.
* @return NavigableMap with keys and values sorted in descending order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createKeySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:createKeySet(),1639,1642,"/**
* Creates a navigable key set from the sorted map.
* @return NavigableSet of keys from the sorted map
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",1660,1667,"/**
* Returns a submap with keys in the specified range.
* @param fromKey lower bound of the range
* @param fromInclusive true if the fromKey is inclusive
* @param toKey upper bound of the range
* @param toInclusive true if the toKey is inclusive
* @return NavigableMap containing the specified range of keys and their values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:headMap(java.lang.Object,boolean)",1674,1677,"/**
* Returns a navigable map containing entries up to the specified key.
* @param toKey the upper bound key (inclusive if true)
* @param inclusive whether to include the toKey in the result
* @return NavigableMap with entries up to the specified key
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:tailMap(java.lang.Object,boolean)",1684,1688,"/**
* Returns a navigable map containing entries with keys greater than or equal to the specified key.
* @param fromKey the lower bound of the keys in the returned map
* @param inclusive true if the fromKey is included in the returned map
* @return NavigableMap with entries having keys >= fromKey
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,keySet,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:keySet(),1528,1532,"/**
 * Returns a sorted set of keys.
 * @return SortedSet containing all keys in the map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollFirstEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollFirstEntry(),1607,1610,"/**
 * Retrieves and removes the first entry from the map.
 * @return the first Entry or null if the map is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeAll,com.google.common.collect.AbstractMapBasedMultimap:removeAll(java.lang.Object),254,268,"/**
* Removes all values associated with a key.
* @param key the key to remove
* @return an unmodifiable collection of removed values or empty if none found
*/","* {@inheritDoc}
   *
   * <p>The returned collection is immutable.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lower,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:lower(java.lang.Object),1070,1073,"/**
* Returns the greatest key less than the specified key.
* @param k the key to search for
* @return the greatest key less than k, or null if no such key exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floor,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:floor(java.lang.Object),1075,1078,"/**
 * Returns the greatest key less than or equal to the specified key.
 * @param k the key to search for
 * @return the greatest key less than or equal to k, or null if no such key exists
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceiling,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:ceiling(java.lang.Object),1080,1083,"/**
* Finds the smallest key greater than or equal to the given key.
* @param k the key to search for
* @return the least key greater than or equal to k, or null if no such key exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higher,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:higher(java.lang.Object),1085,1088,"/**
 * Finds the least key greater than the given key.
 * @param k the key to search for
 * @return the least key greater than k, or null if no such key exists
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingSet,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:descendingSet(),1100,1103,"/**
* Returns a descending view of the keys.
* @return NavigableSet containing keys in descending order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:headSet(java.lang.Object,boolean)",1115,1118,"/**
* Returns a navigable set of keys less than or equal to the specified element.
* @param toElement the upper bound element
* @param inclusive true if the upper bound is inclusive
* @return NavigableSet containing keys up to the specified element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",1126,1134,"/**
* Returns a subset of keys within a specified range.
* @param fromElement start of the key range (inclusive if fromInclusive is true)
* @param fromInclusive whether to include the fromElement in the range
* @param toElement end of the key range (inclusive if toInclusive is true)
* @param toInclusive whether to include the toElement in the range
* @return NavigableSet containing keys within the specified range
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:tailSet(java.lang.Object,boolean)",1141,1144,"/**
 * Returns a navigable set of keys greater than or equal to the specified element.
 * @param fromElement the lower bound (inclusive) for the returned set
 * @param inclusive true if the lower bound is inclusive
 * @return NavigableSet containing keys from the sorted map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,validateIterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:validateIterator(),464,469,"/**
* Validates iterator state.
* Throws ConcurrentModificationException if delegate has changed.
*/","* If the delegate changed since the iterator was created, the iterator is no longer valid.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,size,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:size(),398,402,"/**
 * Returns the size of the collection.
 * Refreshes the collection if it's empty.
 * @return number of elements in the collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,equals,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:equals(java.lang.Object),404,418,"/**
* Checks equality with another object. Uses delegate for comparison.
* @param object the object to compare
* @return true if equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,hashCode,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:hashCode(),420,424,"/**
 * Generates hash code based on delegate's content.
 * Refreshes delegate if it's empty.
 * @return hash code of delegate
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,toString,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:toString(),426,430,"/**
 * Returns string representation of the delegate.
 * Refreshes data if empty.
 * @return delegate's string representation
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,iterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:iterator(),436,440,"/**
 * Returns an iterator over values.
 * Refreshes data if empty.
 * @return Iterator over values
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,spliterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:spliterator(),442,446,"/**
 * Returns a spliterator for the collection.
 * Refreshes the collection if it's empty.
 * @return Spliterator over elements of type V
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,add,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:add(java.lang.Object),497,509,"/**
 * Adds a value to the collection.
 * @param value the value to be added
 * @return true if the collection was modified, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,contains,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:contains(java.lang.Object),534,538,"/**
 * Checks if the collection contains the specified element.
 * Refreshes the collection if it's empty.
 * @param o element to be checked
 * @return true if the collection contains the element, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,containsAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:containsAll(java.util.Collection),540,544,"/**
 * Checks if this collection contains all elements of another collection.
 * Refreshes data if empty before checking.
 * @param c the collection to check for containment
 * @return true if all elements are contained, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:remove(java.lang.Object),557,566,"/**
* Removes an object from the collection.
* @param o object to be removed
* @return true if the object was removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lower,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:lower(java.lang.Object),702,705,"/**
* Retrieves the greatest element less than the specified value.
* @param v value to compare against
* @return greatest element less than v, or null if no such element exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floor,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:floor(java.lang.Object),707,710,"/**
* Returns greatest element less than or equal to given value.
* @param v value to compare against
* @return greatest element <= v, or null if no such element exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceiling,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:ceiling(java.lang.Object),712,715,"/**
* Returns the least element greater than or equal to the specified value.
* @param v value to search for
* @return the least element greater than or equal to v, or null if no such element exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higher,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:higher(java.lang.Object),717,720,"/**
 * Returns the least element greater than the given element.
 * @param v the value to match
 * @return the least element greater than v, or null if no such element exists
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:descendingSet(),736,739,"/**
* Returns a descending view of the sorted set.
* @return NavigableSet with elements in reverse order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingIterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:descendingIterator(),741,744,"/**
 * Returns an iterator over elements in reverse order.
 * @return Iterator over elements in descending order
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",746,754,"/**
* Returns a subset of the navigable set.
* @param fromElement lower bound element
* @param fromInclusive true if the lower bound is inclusive
* @param toElement upper bound element
* @param toInclusive true if the upper bound is inclusive
* @return NavigableSet containing elements within the specified range
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:headSet(java.lang.Object,boolean)",756,759,"/**
* Returns a navigable set containing elements less than or equal to the specified element.
* @param toElement upper bound of the returned set
* @param inclusive true if the upper bound is inclusive
* @return NavigableSet with elements up to the specified element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:tailSet(java.lang.Object,boolean)",761,764,"/**
* Returns a view of the portion of this set whose elements are greater than or equal to fromElement.
* @param fromElement lower bound element
* @param inclusive true if the lower bound is inclusive
* @return NavigableSet containing elements greater than or equal to fromElement
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,put,"com.google.common.collect.AbstractListMultimap:put(java.lang.Object,java.lang.Object)",118,122,"/**
* Adds or updates an entry in the map.
* @param key the key to associate with the value
* @param value the value to be associated with the key
* @return true if the put operation added a new mapping, false if it replaced an existing one
*/","* Stores a key-value pair in the multimap.
   *
   * @param key key to store in the multimap
   * @param value value to store in the multimap
   * @return {@code true} always",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,put,"com.google.common.collect.AbstractSetMultimap:put(java.lang.Object,java.lang.Object)",139,143,"/**
* Inserts or updates a key-value pair.
* @param key the key to insert or update
* @param value the value associated with the key
* @return true if the operation was successful, false otherwise
*/","* Stores a key-value pair in the multimap.
   *
   * @param key key to store in the multimap
   * @param value value to store in the multimap
   * @return {@code true} if the method increased the size of the multimap, or {@code false} if the
   *     multimap already contained the key-value pair",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,get,com.google.common.collect.AbstractListMultimap:get(java.lang.Object),80,83,"/**
* Retrieves list of values by key.
* @param key unique identifier
* @return List of values or empty list if not found
*/","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,get,com.google.common.collect.AbstractSetMultimap:get(java.lang.Object),78,81,"/**
* Retrieves the set of values associated with the given key.
* @param key the key whose associated values are to be returned
* @return a set of values or null if the key is not present
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,containsValue,com.google.common.collect.LinkedListMultimap:containsValue(java.lang.Object),590,593,"/**
 * Checks if the map contains the specified value.
 * @param value the value to search for
 * @return true if a mapping with the specified value exists, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,entries,com.google.common.collect.AbstractSetMultimap:entries(),89,92,"/**
* Returns a set of map entries.
* @return Set of Entry objects representing key-value pairs
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,iterator,com.google.common.collect.AbstractMultimap$Values:iterator(),192,195,"/**
 * Returns an iterator over the values.
 * @return Iterator of values
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,valueSpliterator,com.google.common.collect.AbstractMultimap:valueSpliterator(),222,224,"/**
 * Returns a spliterator over values.
 * @return Spliterator of values
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,writeObject,com.google.common.collect.LinkedListMultimap:writeObject(java.io.ObjectOutputStream),843,852,"/**
* Writes object state to the specified output stream.
* @param stream ObjectOutputStream to write to
* @throws IOException if I/O error occurs
*/","* @serialData the number of distinct keys, and then for each distinct key: the first key, the
   *     number of values for that key, and the key's values, followed by successive keys and values
   *     from the entries() ordering",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,setCount,"com.google.common.collect.AbstractMapBasedMultiset:setCount(java.lang.Object,int)",314,335,"/**
* Sets the count for an element.
* @param element the element to set count for
* @param count the new count value
* @return the previous count of the element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,clear,com.google.common.collect.HashMultiset:clear(),169,176,"/**
* Resets all counts to zero and clears the map.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,clear,com.google.common.collect.LinkedHashMultiset:clear(),169,176,"/**
 * Clears all entries and resets their counts to zero.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,toStringImpl,com.google.common.collect.Collections2:toStringImpl(java.util.Collection),333,348,"/**
 * Converts a collection to a string representation.
 * @param collection the collection to convert
 * @return string representation of the collection
 */",An implementation of {@link Collection#toString()}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toStringImpl,com.google.common.collect.Maps:toStringImpl(java.util.Map),3893,3904,"/**
 * Converts a map to a string representation.
 * @param map the map to convert
 * @return string representation of the map
 */",An implementation of {@link Map#toString}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayListWithExpectedSize,com.google.common.collect.Lists:newArrayListWithExpectedSize(int),200,204,"/**
* Creates an ArrayList with an initial capacity based on the expected size.
* @param estimatedSize expected number of elements in the list
* @return ArrayList instance with precomputed capacity
*/","* Creates an {@code ArrayList} instance to hold {@code estimatedSize} elements, <i>plus</i> an
   * unspecified amount of padding; you almost certainly mean to call {@link
   * #newArrayListWithCapacity} (see that method for further advice on usage).
   *
   * <p><b>Note:</b> This method will soon be deprecated. Even in the rare case that you do want
   * some amount of padding, it's best if you choose your desired amount explicitly.
   *
   * @param estimatedSize an estimate of the eventual {@link List#size()} of the new list
   * @return a new, empty {@code ArrayList}, sized appropriately to hold the estimated number of
   *     elements
   * @throws IllegalArgumentException if {@code estimatedSize} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,combine,com.google.common.util.concurrent.CollectionFuture$ListFuture:combine(java.util.List),94,101,"/**
* Combines Present objects into a list of values.
* @param values list of Present objects
* @return immutable list of extracted values or nulls
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,newHashMapWithExpectedSize,com.google.common.collect.Maps:newHashMapWithExpectedSize(int),276,280,"/**
* Creates a HashMap with an initial capacity based on expected size.
* @param expectedSize the estimated number of entries
* @return a HashMap instance with optimized capacity
*/","* Creates a {@code HashMap} instance, with a high enough ""initial capacity"" that it <i>should</i>
   * hold {@code expectedSize} elements without growth. This behavior cannot be broadly guaranteed,
   * but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method
   * isn't inadvertently <i>oversizing</i> the returned map.
   *
   * @param expectedSize the number of entries you expect to add to the returned map
   * @return a new, empty {@code HashMap} with enough capacity to hold {@code expectedSize} entries
   *     without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,newLinkedHashMapWithExpectedSize,com.google.common.collect.Maps:newLinkedHashMapWithExpectedSize(int),359,363,"/**
* Creates a LinkedHashMap with an estimated capacity.
* @param expectedSize the expected number of entries
* @return a new LinkedHashMap instance
*/","* Creates a {@code LinkedHashMap} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be
   * broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed
   * that the method isn't inadvertently <i>oversizing</i> the returned map.
   *
   * @param expectedSize the number of entries you expect to add to the returned map
   * @return a new, empty {@code LinkedHashMap} with enough capacity to hold {@code expectedSize}
   *     entries without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newHashSetWithExpectedSize,com.google.common.collect.Sets:newHashSetWithExpectedSize(int),263,267,"/**
* Creates a HashSet with an initial capacity based on the expected size.
* @param expectedSize estimated number of elements
* @return HashSet instance with adjusted capacity
*/","* Returns a new hash set using the smallest initial table size that can hold {@code expectedSize}
   * elements without resizing. Note that this is not what {@link HashSet#HashSet(int)} does, but it
   * is what most users want and expect it to do.
   *
   * <p>This behavior can't be broadly guaranteed, but has been tested with OpenJDK 1.7 and 1.8.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty hash set with enough capacity to hold {@code expectedSize} elements
   *     without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newLinkedHashSetWithExpectedSize,com.google.common.collect.Sets:newLinkedHashSetWithExpectedSize(int),360,364,"/**
* Creates a LinkedHashSet with the specified expected size.
* @param expectedSize the expected number of elements in the set
* @return a LinkedHashSet initialized with the appropriate capacity
*/","* Creates a {@code LinkedHashSet} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be
   * broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed
   * that the method isn't inadvertently <i>oversizing</i> the returned set.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code LinkedHashSet} with enough capacity to hold {@code expectedSize}
   *     elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,arrayListValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:arrayListValues(),285,287,"/**
* Creates an ArrayList-based multimap builder.
* @return ListMultimapBuilder configured with default expected values per key
*/",Uses an {@link ArrayList} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:hashSetValues(),327,329,"/**
* Creates a builder with hash set values.
* @return SetMultimapBuilder configured with hash sets
*/",Uses a hash-based {@code Set} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedHashSetValues(),350,352,"/**
 * Creates a builder with linked hash set values.
 * @return LinkedHashSetValuesMultimapBuilder instance
 */",Uses an insertion-ordered hash-based {@code Set} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashKeys,com.google.common.collect.MultimapBuilder:hashKeys(),73,75,"/**
 * Creates a builder for a multimap with hash keys.
 * @return MultimapBuilderWithKeys configured with default expected keys
 */",Uses a hash table to map keys to value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashKeys,com.google.common.collect.MultimapBuilder:linkedHashKeys(),101,103,"/**
* Creates a builder with linked hash keys.
* @return Builder configured with default expected keys
*/","* Uses a hash table to map keys to value collections.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in the order that they were first added to the
   * multimap, save that if all values associated with a key are removed and then the key is added
   * back into the multimap, that key will come last in the key iteration order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,immutableEntry,"com.google.common.collect.Multisets:immutableEntry(java.lang.Object,int)",258,261,"/**
* Creates an immutable entry with a specified element and count.
* @param e the element to be stored in the entry
* @param n the count of the element
* @return an ImmutableEntry containing the element and its count
*/","* Returns an immutable multiset entry with the specified element and count. The entry will be
   * serializable if {@code e} is.
   *
   * @param e the element to be associated with the returned entry
   * @param n the count to be associated with the returned entry
   * @throws IllegalArgumentException if {@code n} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,<init>,"com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry:<init>(java.lang.Object,int,com.google.common.collect.Multisets$ImmutableEntry)",142,145,"/**
* Constructs a NonTerminalEntry with an element, count, and reference to the next entry.
* @param element the element stored in the entry
* @param count the frequency of the element
* @param nextInBucket reference to the next entry in the bucket
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,setCount,"com.google.common.collect.AbstractMultiset:setCount(java.lang.Object,int)",85,89,"/**
* Sets the count of an element in this collection.
* @param element the element whose count to set
* @param count the new count value
* @return the old count of the element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardSetCount,"com.google.common.collect.ForwardingMultiset:standardSetCount(java.lang.Object,int)",215,217,"/**
* Sets the count of an element in this multiset.
* @param element the element to set the count for
* @param count the new count of the element
* @return the previous count of the element
*/","* A sensible definition of {@link #setCount(Object, int)} in terms of {@link #count(Object)},
   * {@link #add(Object, int)}, and {@link #remove(Object, int)}. {@link #entrySet()}. If you
   * override any of these methods, you may wish to override {@link #setCount(Object, int)} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,setCount,"com.google.common.collect.AbstractMultiset:setCount(java.lang.Object,int,int)",91,95,"/**
* Updates count of an element.
* @param element the element to update
* @param oldCount current count of the element
* @param newCount new count to set for the element
* @return true if update is successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardSetCount,"com.google.common.collect.ForwardingMultiset:standardSetCount(java.lang.Object,int,int)",226,228,"/**
* Sets the count of an element in a multiset.
* @param element the element to set the count for
* @param oldCount current count of the element
* @param newCount new count to be set
* @return true if successful, false otherwise
*/","* A sensible definition of {@link #setCount(Object, int, int)} in terms of {@link #count(Object)}
   * and {@link #setCount(Object, int)}. If you override either of these methods, you may wish to
   * override {@link #setCount(Object, int, int)} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,equals,com.google.common.collect.ImmutableSet:equals(java.lang.Object),284,296,"/**
 * Checks equality with another set.
 * @param object the object to compare
 * @return true if equal, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,hashCode,com.google.common.collect.Sets$PowerSet:hashCode(),1768,1776,"/**
* Computes hash code based on input set's key set.
* @return int representing computed hash code
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,contains,com.google.common.collect.AbstractMultimap$Values:contains(java.lang.Object),207,210,"/**
 * Checks if the multimap contains the specified value.
 * @param o the value to check for presence
 * @return true if the value is present, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,containsEntry,"com.google.common.collect.LinkedListMultimap:containsEntry(java.lang.Object,java.lang.Object)",59,63,"/**
* Checks if map contains entry with specified key and value.
* @param key the key to search for
* @param value the value associated with the key
* @return true if entry exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,remove,"com.google.common.collect.LinkedListMultimap:remove(java.lang.Object,java.lang.Object)",65,70,"/**
* Removes a value from the collection associated with a key.
* @param key the key to identify the collection
* @param value the value to remove from the collection
* @return true if the value was present and removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,hashCode,com.google.common.collect.LinkedListMultimap:hashCode(),251,254,"/**
 * Returns hash code based on map representation.
 * @return hash code of the map
 */","* Returns the hash code for this multimap.
   *
   * <p>The hash code of a multimap is defined as the hash code of the map view, as returned by
   * {@link Multimap#asMap}.
   *
   * @see Map#hashCode",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,toString,com.google.common.collect.LinkedListMultimap:toString(),262,265,"/**
* Returns string representation of the map.
* @return String in map format
*/","* Returns a string representation of the multimap, generated by calling {@code toString} on the
   * map returned by {@link Multimap#asMap}.
   *
   * @return a string representation of the multimap",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,com.google.common.collect.LinkedListMultimap:putAll(com.google.common.collect.Multimap),93,101,"/**
 * Adds all entries from the specified multimap.
 * @param multimap source of entries to add
 * @return true if any changes were made, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,equals,com.google.common.collect.LinkedListMultimap:equals(java.lang.Object),238,241,"/**
 * Checks equality with another object using Multimaps' implementation.
 * @param object the object to compare with
 * @return true if equal, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,elementSet,com.google.common.collect.AbstractSortedMultiset:elementSet(),51,54,"/**
 * Returns a navigable set view of the elements in this collection.
 * @return NavigableSet containing all elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,elementSet,com.google.common.collect.ConcurrentHashMultiset:elementSet(),130,137,"/**
 * Returns a set of elements.
 * Initializes the set if not already created.
 * @return Set of elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,elementSet,com.google.common.collect.EnumMultiset:elementSet(),130,137,"/**
* Returns a set of elements.
* Initializes the set if not already created.
* @return Set of elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,entrySet,com.google.common.collect.AbstractMapBasedMultiset:entrySet(),83,86,"/**
 * Returns the set of entries in the multiset.
 * @return Set of Multiset.Entry objects representing elements and their counts
 */","* {@inheritDoc}
   *
   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the
   * current count of that element in the multiset, as opposed to the count at the time the entry
   * was retrieved.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,isEmpty,com.google.common.collect.AbstractMultiset:isEmpty(),49,52,"/**
 * Checks if the map is empty.
 * @return true if no entries are present, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,hashCode,com.google.common.collect.AbstractMultiset:hashCode(),217,220,"/**
 * Returns the hash code of this map's entry set.
 * @return hash code value for the entry set
 */","* {@inheritDoc}
   *
   * <p>This implementation returns the hash code of {@link Multiset#entrySet()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,toString,com.google.common.collect.AbstractMultiset:toString(),228,231,"/**
 * Returns string representation of map entries.
 * @return formatted string of key-value pairs
 */","* {@inheritDoc}
   *
   * <p>This implementation returns the result of invoking {@code toString} on {@link
   * Multiset#entrySet()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,entrySet,com.google.common.collect.ConcurrentHashMultiset:entrySet(),164,171,"/**
* Returns a set of entries in the map.
* @return Set of Entry objects representing key-value pairs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,entrySet,com.google.common.collect.EnumMultiset:entrySet(),164,171,"/**
* Returns a set of entries.
* @return Set of Entry objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,firstKey,com.google.common.collect.AbstractNavigableMap:firstKey(),61,70,"/**
* Returns the first key in the sorted map.
* @throws NoSuchElementException if the map is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,lastKey,com.google.common.collect.AbstractNavigableMap:lastKey(),72,81,"/**
 * Retrieves the last key in the map.
 * @return The last key or throws NoSuchElementException if the map is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFirstEntry,com.google.common.collect.ForwardingNavigableMap:standardFirstEntry(),188,190,"/**
 * Retrieves the first entry from the set.
 * @return the first Entry or null if the set is empty
 */","* A sensible definition of {@link #firstEntry} in terms of the {@code iterator()} of {@link
   * #entrySet}. If you override {@code entrySet}, you may wish to override {@code firstEntry} to
   * forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,ceiling,com.google.common.collect.ImmutableSortedSet:ceiling(java.lang.Object),738,741,"/**
* Returns the least element greater than or equal to the specified element.
* @param e the element to find the ceiling for
* @return the ceiling element or null if none exists
*/",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,higher,com.google.common.collect.ImmutableSortedSet:higher(java.lang.Object),746,750,"/**
 * Finds the least element greater than the specified element.
 * @param e the reference element
 * @return the next greater element or null if no such element exists
 */",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,create,com.google.common.collect.TreeRangeSet:create(),50,52,"/**
* Creates an empty TreeRangeSet.
* @return A new TreeRangeSet instance initialized with a TreeMap
*/",Creates an empty {@code TreeRangeSet} instance.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,contains,com.google.common.collect.ImmutableRangeSet$AsSet:contains(java.lang.Object),664,676,"/**
* Checks if the set contains the specified element.
* @param o element to check for presence in the set
* @return true if the set contains the element, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,contains,com.google.common.collect.TreeRangeSet$Complement:contains(java.lang.Comparable),30,33,"/**
 * Checks if the range contains the given value.
 * @param value the value to check
 * @return true if the value is contained, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,contains,com.google.common.collect.TreeRangeSet$SubRangeSet:contains(java.lang.Comparable),407,411,"/**
* Checks if the range contains a given value.
* @param value the value to check
* @return true if the value is within the range, false otherwise
*/","* Returns {@code true} if {@code value} is within the bounds of this range. For example, on the
   * range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)}
   * returns {@code false}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,clear,com.google.common.collect.ImmutableRangeSet:clear(),53,56,"/**
 * Clears all elements from the collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,clear,com.google.common.collect.TreeRangeSet:clear(),53,56,"/**
 * Clears all elements in the collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:<init>(java.util.NavigableMap,com.google.common.collect.Range)",465,470,"/**
* Initializes ComplementRangesByLowerBound with ranges and a window.
* @param positiveRangesByLowerBound map of positive ranges by lower bound
* @param window range defining the complement window
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:<init>(com.google.common.collect.Range,com.google.common.collect.Range,java.util.NavigableMap)",694,702,"/**
* Initializes SubRangeSet with bounds and restrictions.
* @param lowerBoundWindow range defining the lower bound window
* @param restriction range defining the restriction
* @param rangesByLowerBound map of ranges indexed by lower bound
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedKeySortedSetMultimap.java,asMap,com.google.common.collect.AbstractSortedKeySortedSetMultimap:asMap(),43,46,"/**
* Returns the map view of this multimap.
* @return SortedMap where keys are mapped to collections of values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedIterables.java,hasSameComparator,"com.google.common.collect.SortedIterables:hasSameComparator(java.util.Comparator,java.lang.Iterable)",37,49,"/**
* Checks if the given comparator matches the comparator of the iterable.
* @param comparator the comparator to check against
* @param elements the iterable to check
* @return true if comparators match, false otherwise
*/","* Returns {@code true} if {@code elements} is a sorted collection using an ordering equivalent to
   * {@code comparator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,descendingMultiset,com.google.common.collect.TreeMultiset:descendingMultiset(),122,126,"/**
* Returns a descending multiset view.
* @return SortedMultiset with elements in reverse order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsValue,com.google.common.collect.HashBasedTable:containsValue(java.lang.Object),109,112,"/**
 * Checks if the map contains a specified value.
 * @param value the value to check for presence
 * @return true if the map contains the value, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,putAll,com.google.common.collect.ArrayTable:putAll(com.google.common.collect.Table),484,487,"/**
 * Adds all entries from another table to this one.
 * @param table source table with entries to add
 */","* {@inheritDoc}
   *
   * <p>If {@code table} is an {@code ArrayTable}, its null values will be stored in this table,
   * possibly replacing values that were previously non-null.
   *
   * @throws NullPointerException if {@code table} has a null key
   * @throws IllegalArgumentException if any of the provided table's row keys or column keys is not
   *     in {@link #rowKeySet()} or {@link #columnKeySet()}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,clear,com.google.common.collect.AbstractTable:clear(),90,93,"/**
 * Clears all cells in the table.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,valuesIterator,com.google.common.collect.AbstractTable:valuesIterator(),191,199,"/**
 * Returns an iterator over the values in the cell set.
 * @return Iterator of values from cells
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,hashCode,com.google.common.collect.AbstractTable:hashCode(),238,241,"/**
 * Returns the hash code of the cell set.
 * @return int representing the hash code
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,cellSet,com.google.common.collect.ArrayTable:cellSet(),544,547,"/**
 * Returns the set of all cells in the table.
 * @return Set of Cell objects representing table entries
 */","* Returns an unmodifiable set of all row key / column key / value triplets. Changes to the table
   * will update the returned set.
   *
   * <p>The returned set's iterator traverses the mappings with the first row key, the mappings with
   * the second row key, and so on.
   *
   * <p>The value in the returned cells may change if the table subsequently changes.
   *
   * @return set of table cells consisting of row key / column key / value triplets",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,cellSet,com.google.common.collect.ImmutableTable:cellSet(),300,303,"/**
 * Returns an immutable set of all cells in the table.
 * @return ImmutableSet of Cell objects representing table entries
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,cellSet,com.google.common.collect.StandardTable:cellSet(),235,238,"/**
 * Returns the set of cells in this table.
 * @return Set of Cell objects representing table entries
 */","* {@inheritDoc}
   *
   * <p>The set's iterator traverses the mappings for the first row, the mappings for the second
   * row, and so on.
   *
   * <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the
   * time the cell is returned by a method call to the set or its iterator.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,values,com.google.common.collect.ArrayTable:values(),786,789,"/**
 * Returns a collection of all values in this map.
 * Values may be null.
 * @return Collection containing map values
 */","* Returns an unmodifiable collection of all values, which may contain duplicates. Changes to the
   * table will update the returned collection.
   *
   * <p>The returned collection's iterator traverses the values of the first row key, the values of
   * the second row key, and so on.
   *
   * @return collection of values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,values,com.google.common.collect.ImmutableTable:values(),318,321,"/**
 * Returns an immutable collection of all values.
 * @return ImmutableCollection containing all values in the map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,values,com.google.common.collect.StandardTable:values(),795,798,"/**
 * Returns all values from the map.
 * @return A collection of values
 */","* {@inheritDoc}
   *
   * <p>The collection's iterator traverses the values for the first row, the values for the second
   * row, and so on.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,equals,com.google.common.collect.ArrayTable:equals(java.lang.Object),233,236,"/**
 * Checks equality with another object.
 * @param obj the object to compare with
 * @return true if objects are equal, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,equals,com.google.common.collect.ImmutableTable:equals(java.lang.Object),233,236,"/**
 * Checks equality with another object.
 * @param obj the object to compare with
 * @return true if equal, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,onResultOf,com.google.common.collect.Ordering:onResultOf(com.google.common.base.Function),459,461,"/**
* Creates an ordering based on a function's result.
* @param function to extract comparison key from input
* @return Ordering using the transformed keys
*/","* Returns a new ordering on {@code F} which orders elements by first applying a function to them,
   * then comparing those results using {@code this}. For example, to compare objects by their
   * string forms, in a case-insensitive manner, use:
   *
   * {@snippet :
   * Ordering.from(String.CASE_INSENSITIVE_ORDER)
   *     .onResultOf(Functions.toStringFunction())
   * }
   *
   * <p><b>Java 8+ users:</b> Use {@code Comparator.comparing(function, thisComparator)} instead
   * (you can omit the comparator if it is the natural order).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,from,com.google.common.collect.Ordering:from(java.util.Comparator),192,196,"/**
* Creates an Ordering from a Comparator.
* @param comparator the comparator to use for ordering
* @return an Ordering instance based on the given comparator
*/","* Returns an ordering based on an <i>existing</i> comparator instance. Note that it is
   * unnecessary to create a <i>new</i> anonymous inner class implementing {@code Comparator} just
   * to pass it in here. Instead, simply subclass {@code Ordering} and implement its {@code compare}
   * method directly.
   *
   * <p>The returned object is serializable if {@code comparator} is serializable.
   *
   * <p><b>Java 8+ users:</b> this class is now obsolete as explained in the class documentation, so
   * there is no need to use this method.
   *
   * @param comparator the comparator that defines the order
   * @return comparator itself if it is already an {@code Ordering}; otherwise an ordering that
   *     wraps that comparator",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,compound,com.google.common.collect.Ordering:compound(java.util.Comparator),483,485,"/**
* Combines this ordering with another comparator.
* @param secondaryComparator additional comparator to use
* @return a new CompoundOrdering object combining both comparators
*/","* Returns an ordering which first uses the ordering {@code this}, but which in the event of a
   * ""tie"", then delegates to {@code secondaryComparator}. For example, to sort a bug list first by
   * status and second by priority, you might use {@code byStatus.compound(byPriority)}. For a
   * compound ordering with three or more components, simply chain multiple calls to this method.
   *
   * <p>An ordering produced by this method, or a chain of calls to this method, is equivalent to
   * one created using {@link Ordering#compound(Iterable)} on the same component comparators.
   *
   * <p>The returned object is serializable if this object and {@code secondaryComparator} are both
   * serializable.
   *
   * <p><b>Java 8+ users:</b> Use {@code thisComparator.thenComparing(secondaryComparator)} instead.
   * Depending on what {@code secondaryComparator} is, one of the other overloads of {@code
   * thenComparing} may be even more useful.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,lexicographical,com.google.common.collect.Comparators:lexicographical(java.util.Comparator),63,66,"/**
 * Creates a lexicographical comparator for iterables.
 * @param comparator element comparator
 * @return comparator for iterables of elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,lexicographical,com.google.common.collect.Ordering:lexicographical(),531,540,"/**
* Returns lexicographical ordering for iterables.
* @param <S> type extending T
* @return Ordering capable of comparing Iterable<S>
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,nullsFirst,com.google.common.collect.Ordering:nullsFirst(),428,430,"/**
* Creates an ordering that sorts nulls first.
* @param <S> type of elements being ordered, must extend T
* @return Ordering object with nulls sorted first
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,nullsLast,com.google.common.collect.Ordering:nullsLast(),442,444,"/**
* Returns an ordering that treats nulls as greater than non-nulls.
* @param <S> type extending T
* @return NullsLastOrdering instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,reverse,com.google.common.collect.Ordering:reverse(),414,416,"/**
 * Returns a new ordering that is the reverse of this one.
 * @return ReverseOrdering instance with reversed order
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,readObject,com.google.common.collect.TreeMultimap:readObject(java.io.ObjectInputStream),217,226,"/**
 * Reads object state from input stream.
 * @param stream source of serialized data
 * @throws IOException if I/O error occurs
 * @throws ClassNotFoundException if class not found during deserialization
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,immutableCell,"com.google.common.collect.Tables:immutableCell(java.lang.Object,java.lang.Object,java.lang.Object)",125,131,"/**
* Creates an immutable cell with specified row, column, and value.
* @param rowKey key for the row
* @param columnKey key for the column
* @param value data stored in the cell
* @return ImmutableCell object
*/","* Returns an immutable cell with the specified row key, column key, and value.
   *
   * <p>The returned cell is serializable.
   *
   * @param rowKey the row key to be associated with the returned cell
   * @param columnKey the column key to be associated with the returned cell
   * @param value the value to be associated with the returned cell",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,elementSet,com.google.common.collect.ImmutableMultimap$Keys:elementSet(),743,746,"/**
 * Returns an immutable set of keys.
 * @return ImmutableSet containing all keys
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,contains,"com.google.common.collect.ArrayTable:contains(java.lang.Object,java.lang.Object)",401,404,"/**
* Checks if both row and column keys are present.
* @param rowKey key for the row
* @param columnKey key for the column
* @return true if both keys exist, false otherwise
*/","* Returns {@code true} if the provided keys are among the keys provided when the table was
   * constructed.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,contains,com.google.common.collect.ImmutableMultimap$Keys:contains(java.lang.Object),732,735,"/**
 * Checks if the map contains the specified key.
 * @param object the key to check
 * @return true if the map contains the key, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver:<init>(),58,60,"/**
 * Initializes a new TypeResolver with an empty TypeTable.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,entryOf,"com.google.common.collect.ImmutableMap:entryOf(java.lang.Object,java.lang.Object)",344,346,"/**
* Creates an immutable map entry.
* @param key the key of the entry
* @param value the value of the entry
* @return an ImmutableMapEntry object containing the key-value pair
*/","* Verifies that {@code key} and {@code value} are non-null, and returns a new immutable entry
   * with those values.
   *
   * <p>A call to {@link Entry#setValue} on the returned entry will always throw {@link
   * UnsupportedOperationException}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntry.java,<init>,"com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry)",102,106,"/**
* Creates a non-terminal immutable map entry.
* @param key the key of the entry
* @param value the value associated with the key
* @param nextInKeyBucket the next entry in the same key bucket or null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,makeImmutable,"com.google.common.collect.RegularImmutableMap:makeImmutable(java.util.Map$Entry,java.lang.Object,java.lang.Object)",206,210,"/**
 * Creates an immutable map entry.
 * @param entry existing map entry to check for reusability
 * @param key   key of the entry
 * @param value value of the entry
 * @return ImmutableMapEntry instance
 */",Makes an entry usable internally by a new ImmutableMap without rereading its contents.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,put,"com.google.common.collect.ImmutableListMultimap$Builder:put(java.lang.Object,java.lang.Object)",253,258,"/**
* Adds a key-value pair to the builder.
* @param key unique identifier for the value
* @param value associated with the key
* @return this Builder instance for chaining
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,put,com.google.common.collect.ImmutableMultimap$Builder:put(java.util.Map$Entry),255,258,"/**
* Adds an entry to the builder.
* @param entry key-value pair to add
* @return this Builder instance
*/","* Adds an entry to the built multimap.
     *
     * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,put,"com.google.common.collect.ImmutableSetMultimap$Builder:put(java.lang.Object,java.lang.Object)",302,307,"/**
* Adds a key-value pair to the map.
* @param key the key to add
* @param value the value associated with the key
* @return this Builder instance for chaining
*/",Adds a key-value mapping to the built multimap if it is not already present.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive:trySplit(),376,399,"/**
 * Tries to split the spliterator.
 * @return a new spliterator or null if splitting is not possible
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,valueSpliterator,com.google.common.collect.AbstractMapBasedMultimap:valueSpliterator(),1235,1239,"/**
* Returns a spliterator over values in the map.
* @return Spliterator for map values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,entrySpliterator,com.google.common.collect.AbstractMapBasedMultimap:entrySpliterator(),1293,1305,"/**
 * Returns a spliterator for entries combining keys with their values.
 * @return Spliterator over Entry<K, V> objects
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,entrySpliterator,com.google.common.collect.ImmutableMultimap:entrySpliterator(),692,704,"/**
 * Returns a spliterator over the entries of this multimap.
 * @return Spliterator for iterating over key-value pairs
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,spliteratorImpl,com.google.common.collect.Multisets:spliteratorImpl(com.google.common.collect.Multiset),1124,1133,"/**
 * Creates a spliterator for elements in a multiset.
 * @param multiset the input multiset
 * @return spliterator over elements, with duplicates
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,cellSpliterator,com.google.common.collect.StandardTable:cellSpliterator(),299,310,"/**
 * Returns a spliterator for cells in the matrix.
 * @return Spliterator of Cell objects
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$FilteredSortedSet:<init>(java.util.SortedSet,com.google.common.base.Predicate)",1300,1302,"/**
* Constructor for FilteredSortedSet.
* @param unfiltered original sorted set to filter
* @param predicate condition to filter elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,iterator,com.google.common.collect.CompactHashMap$KeySetView:iterator(),737,740,"/**
 * Returns an iterator over the keys.
 * @return Iterator of keys
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,iterator,com.google.common.collect.CompactHashMap$EntrySetView:iterator(),813,816,"/**
 * Returns an iterator over the map entries.
 * @return Iterator of Entry<K, V> objects
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,updateLastKnownIndex,com.google.common.collect.CompactHashMap$MapEntry:updateLastKnownIndex(),903,909,"/**
* Updates the last known index of a key in the list.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,isEmpty,com.google.common.collect.CompactHashMap:isEmpty(),959,962,"/**
 * Checks if the collection is empty.
 * @return true if no elements are present, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,clear,com.google.common.collect.CompactHashMap:clear(),1092,1112,"/**
* Clears all entries from the map.
* Invalidates iterators and resets internal state.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,writeObject,com.google.common.collect.CompactHashMap:writeObject(java.io.ObjectOutputStream),1114,1124,"/**
* Custom serialization method.
* Writes object state and entries to the output stream.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,iterator,com.google.common.collect.CompactHashMap$ValuesView:iterator(),995,998,"/**
 * Returns an iterator over the values of the map.
 * @return Iterator over values
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,resizeTable,"com.google.common.collect.CompactHashMap:resizeTable(int,int,int,int)",432,477,"/**
* Resizes the hash table to a new capacity.
* @param oldMask mask of the old table size
* @param newCapacity new table capacity
* @param targetHash hash of the target entry
* @param targetEntryIndex index of the target entry
* @return new mask for the resized table
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,resizeTable,"com.google.common.collect.CompactHashSet:resizeTable(int,int,int,int)",383,418,"/**
 * Resizes the hash table to a new capacity.
 * @param oldMask current mask value of the old table
 * @param newCapacity new size for the hash table
 * @param targetHash hash of the entry to be added first
 * @param targetEntryIndex index of the target entry or UNSET if none
 * @return new mask value after resizing
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,resizeMeMaybe,com.google.common.collect.CompactHashMap:resizeMeMaybe(int),411,420,"/**
 * Resizes the internal array if needed.
 * @param newSize desired size to potentially resize to
 */",Resizes the entries storage if necessary.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,resizeEntries,com.google.common.collect.CompactLinkedHashMap:resizeEntries(int),214,218,"/**
 * Resizes internal arrays to accommodate new capacity.
 * @param newCapacity desired new capacity
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,containsValue,com.google.common.collect.CompactHashMap:containsValue(java.lang.Object),964,976,"/**
* Checks if the map contains a specified value.
* @param value value to search for
* @return true if value is found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,insertEntry,"com.google.common.collect.CompactHashMap:insertEntry(int,java.lang.Object,java.lang.Object,int,int)",403,408,"/**
* Inserts an entry into the hash table.
* @param entryIndex index where to insert the entry
* @param key key for the new entry
* @param value value for the new entry
* @param hash computed hash of the key
* @param mask bit mask for hash collision resolution
*/",* Creates a fresh entry with the specified object at the specified position in the entry arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,replaceAll,com.google.common.collect.CompactHashMap:replaceAll(java.util.function.BiFunction),672,683,"/**
* Replaces each entry's value with the result of applying a function.
* @param function mapping function applied to each key-value pair
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,isEmpty,com.google.common.collect.CompactHashSet:isEmpty(),621,624,"/**
 * Checks if the collection is empty.
 * @return true if no elements are present, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,clear,com.google.common.collect.CompactHashSet:clear(),677,696,"/**
* Clears all elements from the set.
* @implNote Invalidates iterators and resets internal state.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,writeObject,com.google.common.collect.CompactHashSet:writeObject(java.io.ObjectOutputStream),698,705,"/**
 * Custom serialization logic for the collection.
 * Writes size and elements to the output stream.
 * @param stream ObjectOutputStream to write data to
 * @throws IOException if I/O error occurs
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,resizeMeMaybe,com.google.common.collect.CompactHashSet:resizeMeMaybe(int),363,372,"/**
 * Resizes the internal array if newSize exceeds current capacity.
 * @param newSize desired new size
 */",Resizes the entries storage if necessary.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,resizeEntries,com.google.common.collect.CompactLinkedHashSet:resizeEntries(int),214,219,"/**
 * Resizes internal arrays to accommodate new capacity.
 * @param newCapacity the new size for internal arrays
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,insertEntry,"com.google.common.collect.CompactHashSet:insertEntry(int,java.lang.Object,int,int)",357,360,"/**
 * Inserts an entry at the specified index with a given object and hash.
 * @param entryIndex index where the entry is inserted
 * @param object the object to be stored
 * @param hash the hash value of the object
 * @param mask bitmask for hash manipulation
 */",* Creates a fresh entry with the specified object at the specified position in the entry arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,allocArrays,com.google.common.collect.CompactHashMap:allocArrays(),267,281,"/**
* Allocates arrays for hash table and entries.
* @return size of allocated arrays
*/",Handle lazy allocation of arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,allocArrays,com.google.common.collect.CompactHashSet:allocArrays(),232,245,"/**
* Allocates arrays for hash table and entries.
* @return Size of allocated arrays
*/",Handle lazy allocation of arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,getPredecessor,com.google.common.collect.CompactLinkedHashMap:getPredecessor(int),148,150,"/**
 * Retrieves the predecessor index of an entry.
 * @param entry index of the current entry
 * @return index of the predecessor entry or -1 if none exists
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,getSuccessor,com.google.common.collect.CompactLinkedHashMap:getSuccessor(int),152,155,"/**
 * Retrieves the successor index of the given entry.
 * @param entry current entry index
 * @return successor index or adjusted value if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setSuccessor,"com.google.common.collect.CompactLinkedHashMap:setSuccessor(int,int)",157,160,"/**
 * Sets the successor for a given entry.
 * @param entry index of the entry to update
 * @param succ new successor value
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setPredecessor,"com.google.common.collect.CompactLinkedHashMap:setPredecessor(int,int)",162,165,"/**
* Sets the predecessor for a given entry.
* @param entry index of the entry to update
* @param pred predecessor value to set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,setSucceeds,"com.google.common.collect.CompactLinkedHashSet:setSucceeds(int,int)",179,191,"/**
* Updates successor and predecessor for given entries.
* @param pred index of the predecessor entry
* @param succ index of the successor entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,<init>,com.google.common.collect.EmptyContiguousSet:<init>(com.google.common.collect.DiscreteDomain),36,38,"/**
 * Constructs an empty contiguous set within the specified discrete domain.
 * @param domain the discrete domain to define the set's range
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,<init>,"com.google.common.collect.RegularContiguousSet:<init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)",42,45,"/**
* Constructs a set from a specified range and domain.
* @param range defines the bounds of the set
* @param domain specifies the discrete values within the range
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,asRanges,com.google.common.collect.ImmutableRangeSet:asRanges(),303,309,"/**
* Returns the ranges as an immutable set.
* @return ImmutableSet of Range objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,emptySet,com.google.common.collect.ImmutableSortedSet:emptySet(java.util.Comparator),86,95,"/**
* Returns an empty immutable sorted set with the given comparator.
* @param comparator ordering for the elements
* @return empty ImmutableSortedSet instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withLowerBoundType,"com.google.common.collect.Cut$BelowValue:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",333,343,"/**
* Adjusts the cut with a specified lower bound type.
* @param boundType type of bound (CLOSED or OPEN)
* @param domain discrete domain for value manipulation
* @return adjusted Cut object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withUpperBoundType,"com.google.common.collect.Cut$BelowValue:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",345,355,"/**
* Adjusts the cut with a specified upper bound type.
* @param boundType type of bound (CLOSED or OPEN)
* @param domain discrete domain for value retrieval
* @return new Cut with adjusted bounds
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,aboveValue,com.google.common.collect.Cut:aboveValue(java.lang.Comparable),390,392,"/**
 * Creates a cut for values above a specified endpoint.
 * @param endpoint the upper bound value
 * @return a Cut object representing values greater than the endpoint
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,belowValue,com.google.common.collect.Cut:belowValue(java.lang.Comparable),309,311,"/**
* Creates a cut below the specified value.
* @param endpoint the upper bound value (exclusive)
* @return a Cut object representing values less than the endpoint
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,equals,com.google.common.collect.Cut:equals(java.lang.Object),91,105,"/**
 * Checks equality with another Cut object.
 * @param obj the object to compare
 * @return true if equal, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,<init>,"com.google.common.collect.Range:<init>(com.google.common.collect.Cut,com.google.common.collect.Cut)",327,335,"/**
* Constructs a Range with specified lower and upper bounds.
* @param lowerBound the inclusive lower bound of the range
* @param upperBound the exclusive upper bound of the range
* @throws IllegalArgumentException if bounds are invalid or out of order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,encloses,com.google.common.collect.Range:encloses(com.google.common.collect.Range),485,488,"/**
* Checks if this range fully contains another range.
* @param other the range to check
* @return true if this range encloses 'other', false otherwise
*/","* Returns {@code true} if the bounds of {@code other} do not extend outside the bounds of this
   * range. Examples:
   *
   * <ul>
   *   <li>{@code [3..6]} encloses {@code [4..5]}
   *   <li>{@code (3..6)} encloses {@code (3..6)}
   *   <li>{@code [3..6]} encloses {@code [4..4)} (even though the latter is empty)
   *   <li>{@code (3..6]} does not enclose {@code [3..6]}
   *   <li>{@code [4..5]} does not enclose {@code (3..6)} (even though it contains every value
   *       contained by the latter range)
   *   <li>{@code [3..6]} does not enclose {@code (1..1]} (even though it contains every value
   *       contained by the latter range)
   * </ul>
   *
   * <p>Note that if {@code a.encloses(b)}, then {@code b.contains(v)} implies {@code
   * a.contains(v)}, but as the last two examples illustrate, the converse is not always true.
   *
   * <p>Being reflexive, antisymmetric and transitive, the {@code encloses} relation defines a
   * <i>partial order</i> over ranges. There exists a unique {@linkplain Range#all maximal} range
   * according to this relation, and also numerous {@linkplain #isEmpty minimal} ranges. Enclosure
   * also implies {@linkplain #isConnected connectedness}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,isConnected,com.google.common.collect.Range:isConnected(com.google.common.collect.Range),515,518,"/**
* Checks if two ranges overlap.
* @param other Range to compare with
* @return true if ranges overlap, false otherwise
*/","* Returns {@code true} if there exists a (possibly empty) range which is {@linkplain #encloses
   * enclosed} by both this range and {@code other}.
   *
   * <p>For example,
   *
   * <ul>
   *   <li>{@code [2, 4)} and {@code [5, 7)} are not connected
   *   <li>{@code [2, 4)} and {@code [3, 5)} are connected, because both enclose {@code [3, 4)}
   *   <li>{@code [2, 4)} and {@code [4, 6)} are connected, because both enclose the empty range
   *       {@code [4, 4)}
   * </ul>
   *
   * <p>Note that this range and {@code other} have a well-defined {@linkplain #span union} and
   * {@linkplain #intersection intersection} (as a single, possibly-empty range) if and only if this
   * method returns {@code true}.
   *
   * <p>The connectedness relation is both reflexive and symmetric, but does not form an {@linkplain
   * Equivalence equivalence relation} as it is not transitive.
   *
   * <p>Note that certain discrete ranges are not considered connected, even though there are no
   * elements ""between them."" For example, {@code [3, 5]} is not considered connected to {@code [6,
   * 10]}. In these cases, it may be desirable for both input ranges to be preprocessed with {@link
   * #canonical(DiscreteDomain)} before testing for connectedness.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,writeObject,com.google.common.collect.ImmutableSetMultimap:writeObject(java.io.ObjectOutputStream),665,671,"/**
* Writes object state to output stream.
* @param stream ObjectOutputStream for writing
* @throws IOException if I/O error occurs
*/","* @serialData number of distinct keys, and then for each distinct key: the key, the number of
   *     values for that key, and the key's values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,subMultiset,"com.google.common.collect.ImmutableSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",385,394,"/**
* Returns a subset of elements within specified bounds.
* @param lowerBound lower bound of the subset
* @param lowerBoundType type of lower bound (inclusive or exclusive)
* @param upperBound upper bound of the subset
* @param upperBoundType type of upper bound (inclusive or exclusive)
* @return ImmutableSortedMultiset containing elements within bounds
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,toString,com.google.common.collect.DescendingMultiset:toString(),159,162,"/**
 * Returns string representation of this map's entries.
 * @return A string containing all key-value pairs in the map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,remove,"com.google.common.collect.EnumMultiset:remove(java.lang.Object,int)",162,187,"/**
* Removes a specified number of occurrences of an element.
* @param element the element to remove (must be non-null and of valid type)
* @param occurrences the number of times to remove the element
* @return the actual number of occurrences removed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,compare,"com.google.common.collect.ExplicitOrdering:compare(java.lang.Object,java.lang.Object)",39,42,"/**
 * Compares two elements based on their ranks.
 * @param left first element to compare
 * @param right second element to compare
 * @return negative if left < right, positive if left > right, zero if equal
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,builder,com.google.common.collect.ImmutableRangeMap:builder(),101,103,"/**
 * Creates a new Builder instance.
 * @return Builder object for constructing key-value pairs
 */",Returns a new builder for an immutable range map.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,builder,com.google.common.collect.ImmutableRangeSet:builder(),748,750,"/**
 * Creates a new Builder instance.
 * @param <C> type parameter extending Comparable
 * @return Builder instance
 */",Returns a new builder for an immutable range set.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,builder,com.google.common.collect.ImmutableTable:builder(),149,151,"/**
 * Creates a new Builder instance.
 * @param <R> type of the result
 * @param <C> type of the context
 * @param <V> type of the value
 * @return Builder object for constructing instances
 */","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder#Builder() ImmutableTable.Builder()} constructor.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,removeAll,com.google.common.collect.FilteredEntrySetMultimap:removeAll(java.lang.Object),48,51,"/**
 * Removes all values associated with a given key.
 * @param key the key to remove values for
 * @return a set of removed values, or an empty set if none were removed
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,add,"com.google.common.collect.ForwardingList:add(int,java.lang.Object)",63,66,"/**
 * Adds an element at a specified index.
 * @param index position where the element is to be inserted
 * @param element the element to insert
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,addAll,"com.google.common.collect.ForwardingList:addAll(int,java.util.Collection)",68,72,"/**
* Inserts all elements from the specified collection at the given index.
* @param index position at which to insert the elements
* @param elements collection of elements to be inserted
* @return true if this list changed as a result of the call
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,get,com.google.common.collect.ForwardingList:get(int),74,78,"/**
 * Retrieves element at specified index.
 * @param index position of the element to retrieve
 * @return element at the given index, possibly null
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,indexOf,com.google.common.collect.ForwardingList:indexOf(java.lang.Object),80,83,"/**
 * Returns the index of the specified element in the delegate list.
 * @param element the element to search for
 * @return the index of the element, or -1 if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,lastIndexOf,com.google.common.collect.ForwardingList:lastIndexOf(java.lang.Object),85,88,"/**
 * Returns the last index of the specified element.
 * @param element the element to search for
 * @return the last index or -1 if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,listIterator,com.google.common.collect.ForwardingList:listIterator(),90,93,"/**
 * Returns a list iterator over the elements in this collection.
 * Delegates the call to the underlying collection.
 * @return a ListIterator over the elements in this collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,listIterator,com.google.common.collect.ForwardingList:listIterator(int),95,98,"/**
 * Returns a list iterator over the elements in this list starting at the specified position.
 * @param index index of the first element to be returned from the list iterator (by a call to next)
 * @return a ListIterator of the elements in this list starting at the specified position
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,remove,com.google.common.collect.ForwardingList:remove(int),100,105,"/**
* Removes element at specified index.
* @param index position of the element to remove
* @return removed element or null if not present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,set,"com.google.common.collect.ForwardingList:set(int,java.lang.Object)",107,112,"/**
* Sets element at specified index.
* @param index position to update
* @param element new value for the index
* @return previously held element at index
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,subList,"com.google.common.collect.ForwardingList:subList(int,int)",114,117,"/**
* Returns a sublist of elements.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return sublist from fromIndex to toIndex
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,equals,com.google.common.collect.ForwardingList:equals(java.lang.Object),119,122,"/**
 * Checks equality with another object.
 * @param object the object to compare
 * @return true if equal, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,hashCode,com.google.common.collect.ForwardingList:hashCode(),124,127,"/**
 * Returns the hash code of the delegate object.
 * @return hash code value of the delegate
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,removeAll,com.google.common.collect.FilteredKeyListMultimap:removeAll(java.lang.Object),46,49,"/**
 * Removes all values associated with the specified key.
 * @param key key whose mappings are to be removed
 * @return a list of removed values, or an empty list if no mappings were found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,removeAll,com.google.common.collect.FilteredKeySetMultimap:removeAll(java.lang.Object),48,51,"/**
 * Removes all values associated with a key.
 * @param key the key whose values are to be removed
 * @return a set of removed values, or an empty set if none were present
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,iterator,com.google.common.graph.AbstractDirectedNetworkConnections$1:iterator(),732,733,"/**
 * Returns an unmodifiable iterator over elements.
 * @return UnmodifiableIterator providing access to elements
 */","* Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view.
     *
     * @since 20.0 (present with return type {@link Iterator} since 2.0)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,frequency,"com.google.common.collect.Iterables:frequency(java.lang.Iterable,java.lang.Object)",346,353,"/**
* Counts occurrences of an element in an iterable.
* @param iterable the collection to search through
* @param element the element to count
* @return number of times the element appears in the iterable
*/","* Returns the number of elements in the specified iterable that equal the specified object. This
   * implementation avoids a full iteration when the iterable is a {@link Multiset} or {@link Set}.
   *
   * <p><b>Java 8+ users:</b> In most cases, the {@code Stream} equivalent of this method is {@code
   * stream.filter(element::equals).count()}. If {@code element} might be null, use {@code
   * stream.filter(Predicate.isEqual(element)).count()} instead.
   *
   * @see java.util.Collections#frequency(Collection, Object) Collections.frequency(Collection,
   *     Object)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardContainsKey,com.google.common.collect.ForwardingMap:standardContainsKey(java.lang.Object),207,209,"/**
 * Checks if the map contains a mapping for the specified key.
 * @param key the key to check
 * @return true if this map contains a mapping for the specified key, false otherwise
 */","* A sensible, albeit inefficient, definition of {@link #containsKey} in terms of the {@code
   * iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to
   * override {@link #containsKey} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardContainsValue,com.google.common.collect.ForwardingMap:standardContainsValue(java.lang.Object),234,236,"/**
 * Checks if the map contains the specified value.
 * @param value the value to check for presence
 * @return true if the value is present, false otherwise
 */","* A sensible definition of {@link #containsValue} in terms of the {@code iterator} method of
   * {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link
   * #containsValue} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,equals,com.google.common.collect.ExplicitOrdering:equals(java.lang.Object),52,59,"/**
* Checks equality based on rankMap.
* @param object the object to compare with
* @return true if equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLowerKey,com.google.common.collect.ForwardingNavigableMap:standardLowerKey(java.lang.Object),90,92,"/**
 * Finds the greatest key less than or equal to the given key.
 * @param key the key to search for
 * @return the greatest key less than or equal to the given key, or null if none found
 */","* A sensible definition of {@link #lowerKey} in terms of {@code lowerEntry}. If you override
   * {@link #lowerEntry}, you may wish to override {@code lowerKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFloorKey,com.google.common.collect.ForwardingNavigableMap:standardFloorKey(java.lang.Object),118,120,"/**
 * Returns the greatest key less than or equal to the specified key.
 * @param key the key to search for
 * @return the greatest key less than or equal to the specified key, or null if no such key exists
 */","* A sensible definition of {@link #floorKey} in terms of {@code floorEntry}. If you override
   * {@code floorEntry}, you may wish to override {@code floorKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardCeilingKey,com.google.common.collect.ForwardingNavigableMap:standardCeilingKey(java.lang.Object),146,148,"/**
* Returns the smallest key greater than or equal to the given key.
* @param key the reference key
* @return the ceiling key or null if none exists
*/","* A sensible definition of {@link #ceilingKey} in terms of {@code ceilingEntry}. If you override
   * {@code ceilingEntry}, you may wish to override {@code ceilingKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardHigherKey,com.google.common.collect.ForwardingNavigableMap:standardHigherKey(java.lang.Object),174,176,"/**
 * Finds the smallest key greater than the given key.
 * @param key the reference key
 * @return the next higher key or null if none exists
 */","* A sensible definition of {@link #higherKey} in terms of {@code higherEntry}. If you override
   * {@code higherEntry}, you may wish to override {@code higherKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFirstKey,com.google.common.collect.ForwardingNavigableMap:standardFirstKey(),197,204,"/**
* Retrieves the first key in the map.
* @return the first key or throws NoSuchElementException if empty
*/","* A sensible definition of {@link #firstKey} in terms of {@code firstEntry}. If you override
   * {@code firstEntry}, you may wish to override {@code firstKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLastKey,com.google.common.collect.ForwardingNavigableMap:standardLastKey(),224,231,"/**
* Retrieves the key of the last entry in the map.
* @return the key of the last entry
* @throws NoSuchElementException if the map is empty
*/","* A sensible definition of {@link #lastKey} in terms of {@code lastEntry}. If you override {@code
   * lastEntry}, you may wish to override {@code lastKey} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLastEntry,com.google.common.collect.ForwardingNavigableMap:standardLastEntry(),216,218,"/**
* Returns the last entry in descending order.
* @return Entry object or null if map is empty
*/","* A sensible definition of {@link #lastEntry} in terms of the {@code iterator()} of the {@link
   * #entrySet} of {@link #descendingMap}. If you override {@code descendingMap}, you may wish to
   * override {@code lastEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardPollLastEntry,com.google.common.collect.ForwardingNavigableMap:standardPollLastEntry(),257,259,"/**
 * Retrieves and removes the last entry from the map.
 * @return the last Entry or null if the map is empty
 */","* A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of the {@code
   * entrySet} of {@code descendingMap}. If you override {@code descendingMap}, you may wish to
   * override {@code pollFirstEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardDescendingKeySet,com.google.common.collect.ForwardingNavigableMap:standardDescendingKeySet(),359,361,"/**
 * Returns a navigable set of keys in descending order.
 * @return NavigableSet containing keys in reverse order
 */","* A sensible definition of {@link #descendingKeySet} as the {@code navigableKeySet} of {@link
   * #descendingMap}. (The {@link StandardDescendingMap} implementation implements {@code
   * navigableKeySet} on its own, so as not to cause an infinite loop.) If you override {@code
   * descendingMap}, you may wish to override {@code descendingKeySet} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardSubMap,"com.google.common.collect.ForwardingNavigableMap:standardSubMap(java.lang.Object,java.lang.Object)",368,372,"/**
* Returns a submap with keys from fromKey (inclusive) to toKey (exclusive).
* @param fromKey starting key of the range
* @param toKey ending key of the range
* @return SortedMap containing the specified range of keys and values
*/","* A sensible definition of {@link #subMap(Object, Object)} in terms of {@link #subMap(Object,
   * boolean, Object, boolean)}. If you override {@code subMap(K, boolean, K, boolean)}, you may
   * wish to override {@code subMap} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLowerEntry,com.google.common.collect.ForwardingNavigableMap:standardLowerEntry(java.lang.Object),76,78,"/**
 * Returns the greatest entry less than the specified key.
 * @param key the key to compare against
 * @return an Entry with the greatest key less than the specified key, or null if no such entry exists
 */","* A sensible definition of {@link #lowerEntry} in terms of the {@code lastEntry()} of {@link
   * #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code
   * lowerEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFloorEntry,com.google.common.collect.ForwardingNavigableMap:standardFloorEntry(java.lang.Object),104,106,"/**
 * Finds the greatest entry less than or equal to the specified key.
 * @param key the key to search for
 * @return Entry with the greatest key less than or equal to the specified key, or null if no such entry exists
 */","* A sensible definition of {@link #floorEntry} in terms of the {@code lastEntry()} of {@link
   * #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code
   * floorEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardHeadMap,com.google.common.collect.ForwardingNavigableMap:standardHeadMap(java.lang.Object),398,400,"/**
* Returns a view of the portion of this map whose keys are strictly less than toKey.
* @param toKey upper bound key (exclusive)
* @return SortedMap containing keys less than toKey
*/","* A sensible definition of {@link #headMap(Object)} in terms of {@link #headMap(Object,
   * boolean)}. If you override {@code headMap(K, boolean)}, you may wish to override {@code
   * headMap} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardCeilingEntry,com.google.common.collect.ForwardingNavigableMap:standardCeilingEntry(java.lang.Object),132,134,"/**
* Finds the smallest entry greater than or equal to the specified key.
* @param key the key to search for
* @return the Entry with the least key greater than or equal to the given key, or null if no such entry exists
*/","* A sensible definition of {@link #ceilingEntry} in terms of the {@code firstEntry()} of {@link
   * #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code
   * ceilingEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardHigherEntry,com.google.common.collect.ForwardingNavigableMap:standardHigherEntry(java.lang.Object),160,162,"/**
 * Returns the least entry greater than the given key.
 * @param key key to compare against
 * @return Entry with the smallest key greater than the provided key or null if none exists
 */","* A sensible definition of {@link #higherEntry} in terms of the {@code firstEntry()} of {@link
   * #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code
   * higherEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardTailMap,com.google.common.collect.ForwardingNavigableMap:standardTailMap(java.lang.Object),407,409,"/**
 * Returns a view of the portion of this map whose keys are greater than or equal to `fromKey`.
 * @param fromKey the lower bound key (inclusive)
 * @return a SortedMap containing the specified range
 */","* A sensible definition of {@link #tailMap(Object)} in terms of {@link #tailMap(Object,
   * boolean)}. If you override {@code tailMap(K, boolean)}, you may wish to override {@code
   * tailMap} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardSubMultiset,"com.google.common.collect.ForwardingSortedMultiset:standardSubMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",219,225,"/**
* Creates a submultiset within specified bounds.
* @param lowerBound the lower bound element
* @param lowerBoundType type of inclusion for lower bound (closed or open)
* @param upperBound the upper bound element
* @param upperBoundType type of inclusion for upper bound (closed or open)
* @return a SortedMultiset containing elements within bounds
*/","* A sensible definition of {@link #subMultiset(Object, BoundType, Object, BoundType)} in terms of
   * {@link #headMultiset(Object, BoundType) headMultiset} and {@link #tailMultiset(Object,
   * BoundType) tailMultiset}.
   *
   * <p>If you override either of these methods, you may wish to override {@link
   * #subMultiset(Object, BoundType, Object, BoundType)} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,get,com.google.common.collect.ForwardingSetMultimap:get(java.lang.Object),51,54,"/**
 * Retrieves values associated with the specified key.
 * @param key the key whose associated values are to be returned
 * @return a set of values or an empty set if no mapping exists for the key
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,delegate,com.google.common.collect.ForwardingMultimap:delegate(),46,47,"/**
 * Returns the delegate multimap.
 * @return delegate Multimap instance
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,isEmpty,com.google.common.collect.GeneralRange:isEmpty(),160,164,"/**
 * Checks if bounds are exceeded.
 * @return true if upper or lower bound is exceeded, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,contains,com.google.common.collect.GeneralRange:contains(java.lang.Object),186,188,"/**
 * Checks if an element is within bounds.
 * @param t element to check
 * @return true if element is not too low or high, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,create,com.google.common.collect.HashBasedTable:create(),69,71,"/**
* Creates a new empty HashBasedTable.
* @param <R> row type
* @param <C> column type
* @param <V> value type
* @return an empty HashBasedTable with LinkedHashMap for rows and Factory for values
*/",Creates an empty {@code HashBasedTable}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,<init>,"com.google.common.collect.TreeBasedTable:<init>(java.util.Comparator,java.util.Comparator)",131,134,"/**
* Constructs a TreeBasedTable with custom row and column comparators.
* @param rowComparator comparator for row keys
* @param columnComparator comparator for column keys
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,replaceAll,com.google.common.collect.HashBiMap$Inverse:replaceAll(java.util.function.BiFunction),745,753,"/**
* Replaces all keys using a transformation function.
* @param function transforms value and key to new key
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,<init>,com.google.common.collect.HashBiMap:<init>(int),135,137,"/**
 * Initializes a HashBiMap with the specified expected size.
 * @param expectedSize the approximate number of entries
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,readObject,com.google.common.collect.HashBiMap:readObject(java.io.ObjectInputStream),790,797,"/**
 * Reads object from input stream.
 * @param stream source of the serialized object
 * @throws IOException if I/O error occurs
 * @throws ClassNotFoundException if class not found during deserialization
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,readObject,com.google.common.collect.EnumBiMap:readObject(java.io.ObjectInputStream),150,159,"/**
 * Reads object state from input stream.
 * @param stream source of serialized data
 * @throws IOException if I/O error occurs
 * @throws ClassNotFoundException if class not found during deserialization
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,readObject,com.google.common.collect.EnumHashBiMap:readObject(java.io.ObjectInputStream),124,136,"/**
* Reads object state from input stream.
* @param stream ObjectInputStream to read from
* @throws IOException if I/O error occurs
* @throws ClassNotFoundException if class of serialized object cannot be found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,readObject,com.google.common.collect.EnumMultiset:readObject(java.io.ObjectInputStream),309,318,"/**
 * Reads object state from input stream.
 * @param stream source of deserialized data
 * @throws IOException if I/O error occurs
 * @throws ClassNotFoundException if class not found during deserialization
 */","* @serialData the {@code Class<E>} for the enum type, the number of distinct elements, the first
   *     element, its count, the second element, its count, and so on",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,indexOf,com.google.common.collect.CompactHashMap:indexOf(java.lang.Object),479,500,"/**
* Finds the index of the specified key in the table.
* @param key the key to search for
* @return the index of the key or -1 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,moveLastEntry,"com.google.common.collect.CompactHashMap:moveLastEntry(int,int)",564,606,"/**
 * Moves the last entry to a specified index and updates references.
 * @param dstIndex destination index for the moved entry
 * @param mask hash mask for table operations
 */","* Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,contains,com.google.common.collect.CompactHashSet:contains(java.lang.Object),420,446,"/**
 * Checks if the set contains the specified object.
 * @param object the object to check for presence
 * @return true if the object is present, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,moveLastEntry,"com.google.common.collect.CompactHashSet:moveLastEntry(int,int)",482,520,"/**
 * Moves the last entry to a specified index and updates pointers.
 * @param dstIndex destination index for the moved entry
 * @param mask hash table mask value
 */","* Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashing.java,remove,"com.google.common.collect.CompactHashing:remove(java.lang.Object,java.lang.Object,int,java.lang.Object,int[],java.lang.Object[],java.lang.Object[])",159,196,"/**
 * Removes an entry from a hash table.
 * @param key the key to remove
 * @param value the value to match for removal
 * @param mask hash mask
 * @param table hash table array
 * @param entries array of entries
 * @param keys array of keys
 * @param values array of values
 * @return index of removed entry or -1 if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap$Inverse$InverseKeySet:remove(java.lang.Object),663,672,"/**
* Removes an entry by value.
* @param o the value to remove
* @return true if removed, false if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,get,com.google.common.collect.HashBiMap$Inverse:get(java.lang.Object),619,622,"/**
* Retrieves key by value using hash.
* @param value object to search for
* @return associated key or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap$Inverse:remove(java.lang.Object),635,646,"/**
* Removes and returns the key associated with a given value.
* @param value the value to be removed
* @return the key associated with the value, or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap$KeySet:remove(java.lang.Object),498,509,"/**
* Removes an entry by key.
* @param o the key to remove
* @return true if removed, false if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,containsKey,com.google.common.collect.HashBiMap:containsKey(java.lang.Object),263,266,"/**
* Checks if map contains key.
* @param key key to check
* @return true if key is present, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,containsValue,com.google.common.collect.HashBiMap:containsValue(java.lang.Object),278,281,"/**
 * Checks if the map contains the specified value.
 * @param value the value to check for presence in the map
 * @return true if the map contains the value, false otherwise
 */","* Returns {@code true} if this BiMap contains an entry whose value is equal to {@code value} (or,
   * equivalently, if this inverse view contains a key that is equal to {@code value}).
   *
   * <p>Due to the property that values in a BiMap are unique, this will tend to execute in
   * faster-than-linear time.
   *
   * @param value the object to search for in the values of this BiMap
   * @return true if a mapping exists from a key to the specified value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,get,com.google.common.collect.HashBiMap:get(java.lang.Object),283,286,"/**
* Retrieves value by key using hash.
* @param key unique identifier for the value
* @return associated value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,put,"com.google.common.collect.HashBiMap:put(java.lang.Object,java.lang.Object,boolean)",294,326,"/**
 * Inserts or updates a key-value pair.
 * @param key the key to store
 * @param value the value to store
 * @param force whether to overwrite existing values
 * @return old value if replaced, otherwise null
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,putInverse,"com.google.common.collect.HashBiMap:putInverse(java.lang.Object,java.lang.Object,boolean)",334,378,"/**
 * Puts a key-value pair in the inverse map.
 * @param value the value to be associated with the key
 * @param key the key to be associated with the value
 * @param force whether to overwrite existing entries
 * @return the old key if replaced, otherwise null
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap:remove(java.lang.Object),404,416,"/**
 * Removes an entry by key.
 * @param key the key to remove
 * @return the value associated with the removed key, or null if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,contains,com.google.common.collect.LinkedHashMultimap$ValueSet:contains(java.lang.Object),467,478,"/**
* Checks if the map contains a value.
* @param o value to check for presence
* @return true if value is found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,remove,com.google.common.collect.LinkedHashMultimap$ValueSet:remove(java.lang.Object),521,545,"/**
* Removes an entry by value.
* @param o value to remove
* @return true if removed, false if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,count,com.google.common.collect.RegularImmutableMultiset:count(java.lang.Object),158,174,"/**
 * Counts occurrences of an element in the table.
 * @param element the element to count
 * @return number of times the element appears, or 0 if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSet.java,contains,com.google.common.collect.RegularImmutableSet:contains(java.lang.Object),55,70,"/**
* Checks if the target object is present in the set.
* @param target object to search for
* @return true if found, otherwise false
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,makeBuilder,com.google.common.collect.ImmutableBiMap$SerializedForm:makeBuilder(int),627,630,"/**
 * Creates a builder instance with specified initial capacity.
 * @param size initial capacity of the builder
 * @return Builder instance initialized with given size
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,builderWithExpectedSize,com.google.common.collect.ImmutableBiMap:builderWithExpectedSize(int),306,309,"/**
* Creates a builder with an initial capacity.
* @param expectedSize the expected number of entries
* @return Builder instance with specified capacity
*/","* Returns a new builder, expecting the specified number of entries to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link
   * Builder#build} is called, the builder is likely to perform better than an unsized {@link
   * #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of entries added to the builder.
   *
   * @since 23.1",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,<init>,com.google.common.collect.ImmutableBiMap$Builder:<init>(),345,345,"/**
 * Initializes a new instance of the Builder class.
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableBiMap#builder}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,builder,com.google.common.collect.ImmutableMap:builder(),352,354,"/**
 * Creates a new builder instance.
 * @param <K> key type
 * @param <V> value type
 * @return Builder object for constructing instances
 */","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,<init>,com.google.common.collect.ImmutableSortedMap$Builder:<init>(java.util.Comparator),619,621,"/**
 * Initializes a builder with a specified comparator.
 * @param comparator the comparator to use for ordering keys
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableSortedMap#orderedBy}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$Column$Values:removeAll(java.util.Collection),653,656,"/**
* Removes all elements in the specified collection from this set.
* @param c collection containing elements to be removed
* @return true if any element was removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,inverse,com.google.common.collect.JdkBackedImmutableBiMap:inverse(),73,84,"/**
 * Returns the inverse of the current bi-map.
 * @return ImmutableBiMap with keys and values swapped
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,of,"com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object)",82,84,"/**
* Creates an immutable bimap from a single key-value pair.
* @param k1 the first key
* @param v1 the first value
* @return an ImmutableBiMap containing the key-value pair
*/",Returns an immutable bimap containing a single entry.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,inverse,com.google.common.collect.SingletonImmutableBiMap:inverse(),100,113,"/**
 * Returns the inverse of this bi-map.
 * @return ImmutableBiMap with keys and values swapped
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,combine,com.google.common.collect.ImmutableMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder),520,527,"/**
 * Combines entries from another builder.
 * @param other the builder to combine with
 * @return this builder with combined entries
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,addDedupedElement,com.google.common.collect.ImmutableSet$SetBuilderImpl:addDedupedElement(java.lang.Object),612,615,"/**
* Adds a unique element to the array.
* @param e element to be added
*/",Adds e to the insertion-order array of deduplicated elements. Calls ensureCapacity.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList$Builder:<init>(),810,812,"/**
 * Constructs a new builder with default initial capacity.
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableList#builder}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,builderWithExpectedSize,com.google.common.collect.ImmutableList:builderWithExpectedSize(int),775,778,"/**
* Creates a builder with an initial capacity.
* @param expectedSize the expected number of elements
* @return ImmutableList.Builder instance
*/","* Returns a new builder, expecting the specified number of elements to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of elements added to the builder before {@link
   * Builder#build} is called, the builder is likely to perform better than an unsized {@link
   * #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of elements added to the builder.
   *
   * @since 23.1",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,<init>,com.google.common.collect.ImmutableSortedSet$Builder:<init>(java.util.Comparator),451,453,"/**
 * Initializes a Builder with a specified comparator and default capacity.
 * @param comparator the comparator to use for ordering elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,addAll,com.google.common.collect.ImmutableSortedSet$Builder:addAll(java.lang.Iterable),549,554,"/**
 * Adds all elements from the specified iterable to this builder.
 * @param elements iterable containing elements to add
 * @return this builder instance for method chaining
 */","* Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate
     * elements (only the first duplicate element is added).
     *
     * @param elements the elements to add to the {@code ImmutableSortedSet}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,addAll,com.google.common.collect.ImmutableSortedMultiset$Builder:addAll(java.util.Iterator),549,554,"/**
* Adds all elements from iterator to builder.
* @param elements iterator of elements to add
* @return current Builder instance
*/","* Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}.
     *
     * @param elements the elements to add to the {@code ImmutableSortedMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,addAll,com.google.common.collect.ImmutableSortedSet$Builder:addAll(java.util.Iterator),564,569,"/**
* Adds all elements from iterator to builder.
* @param elements iterator of elements to add
* @return current Builder instance
*/","* Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate
     * elements (only the first duplicate element is added).
     *
     * @param elements the elements to add to the {@code ImmutableSortedSet}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList$ReverseImmutableList:<init>(com.google.common.collect.ImmutableList),640,642,"/**
 * Constructs a reverse view of an immutable list.
 * @param backingList the original immutable list to wrap
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$StringAsImmutableList:<init>(java.lang.String),771,773,"/**
 * Constructs an immutable list from a string.
 * @param string input string to convert
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableList.java,<init>,com.google.common.collect.RegularImmutableList:<init>(java.lang.Object[]),41,43,"/**
 * Constructs an immutable list from the given array.
 * @param array source array of elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,<init>,com.google.common.collect.RegularImmutableMap$Values:<init>(com.google.common.collect.RegularImmutableMap),380,382,"/**
 * Constructs a new instance with the provided map.
 * @param map the RegularImmutableMap to be used
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,<init>,com.google.common.collect.SingletonImmutableList:<init>(java.lang.Object),40,42,"/**
 * Constructs a singleton immutable list with one element.
 * @param element the single element to include in the list; must not be null
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,createValues,com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createValues(),785,788,"/**
 * Creates an immutable collection of values.
 * @return ImmutableCollection containing all values from this map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,createValues,com.google.common.collect.JdkBackedImmutableMap:createValues(),122,125,"/**
 * Creates an immutable collection of values.
 * @return ImmutableCollection containing all values from this map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,createEntries,com.google.common.collect.ImmutableMultimap:createEntries(),615,618,"/**
 * Creates an immutable collection of entries.
 * @return ImmutableCollection containing all entries from this map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,createValues,com.google.common.collect.ImmutableMultimap:createValues(),801,804,"/**
 * Creates an immutable collection of values.
 * @return ImmutableCollection containing all values
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,<init>,com.google.common.collect.ImmutableEnumSet:<init>(java.util.EnumSet),63,65,"/**
 * Constructs an ImmutableEnumSet from an existing EnumSet.
 * @param delegate the EnumSet to wrap and make immutable
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,<init>,com.google.common.collect.ImmutableSetMultimap$EntrySet:<init>(com.google.common.collect.ImmutableSetMultimap),603,605,"/**
 * Constructs an EntrySet from an ImmutableSetMultimap.
 * @param multimap source ImmutableSetMultimap
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableSet.java,<init>,com.google.common.collect.SingletonImmutableSet:<init>(java.lang.Object),41,43,"/**
 * Constructs an immutable set containing one non-null element.
 * @param element the single element to be included in the set
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList$ReverseImmutableList:listIterator(),401,404,"/**
 * Returns an unmodifiable list iterator starting from index 0.
 * @return UnmodifiableListIterator over the elements of the list
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList$SubList:listIterator(),401,404,"/**
* Returns an unmodifiable list iterator starting from index 0.
* @return UnmodifiableListIterator over the elements of the list
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,iterator,com.google.common.collect.ImmutableList:iterator(),396,399,"/**
 * Returns an unmodifiable iterator over elements.
 * @return UnmodifiableIterator of elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyImmutableListMultimap.java,<init>,com.google.common.collect.EmptyImmutableListMultimap:<init>(),33,35,"/**
 * Constructs an empty immutable list multimap.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,createEntrySet,com.google.common.collect.JdkBackedImmutableBiMap:createEntrySet(),118,121,"/**
* Creates an immutable entry set.
* @return ImmutableSet of map entries
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,createEntrySet,com.google.common.collect.JdkBackedImmutableMap:createEntrySet(),106,109,"/**
* Creates an immutable entry set from map entries.
* @return Immutable set of map entries
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,createKeySet,com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:createKeySet(),110,113,"/**
* Creates an immutable set of keys.
* Returns the key set if full, otherwise delegates to superclass.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,<init>,com.google.common.collect.ImmutableBiMap$SerializedForm:<init>(com.google.common.collect.ImmutableBiMap),623,625,"/**
 * Constructs a serialized form of an immutable bi-map.
 * @param bimap the ImmutableBiMap to serialize
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,writeReplace,com.google.common.collect.ImmutableMap:writeReplace(),1311,1314,"/**
 * Returns a serialized form of the object.
 * @return SerializedForm instance representing the object's state
 */","* Returns a serializable form of this object. Non-public subclasses should not override this
   * method. Publicly-accessible subclasses must override this method and should return a subclass
   * of SerializedForm whose readResolve() method returns objects of the subclass type.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,iterator,com.google.common.collect.ImmutableMapKeySet:iterator(),48,51,"/**
 * Returns an unmodifiable iterator over the keys.
 * @return Iterator of keys in the map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,hashCode,com.google.common.collect.ExplicitOrdering:hashCode(),61,64,"/**
 * Generates hash code based on rankMap.
 * @return hash code of rankMap
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,hashCode,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:hashCode(),1157,1161,"/**
* Returns hash code using ImmutableMap's hash code.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,hashCode,com.google.common.collect.ImmutableMapEntrySet:hashCode(),122,125,"/**
 * Generates hash code based on the map representation.
 * @return hash code of the map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,createAsList,com.google.common.collect.RegularImmutableSortedSet:createAsList(),314,317,"/**
* Creates an immutable list from the sorted set.
* @return ImmutableList containing all elements in sorted order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$Builder:<init>(int),485,491,"/**
* Initializes a set builder with specified capacity.
* @param capacity the initial capacity of the set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copy,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:copy(),782,785,"/**
 * Creates a copy of the current set builder.
 * @return a new instance of RegularSetBuilderImpl with the same state as this
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,comparator,com.google.common.collect.ImmutableSortedAsList:comparator(),43,46,"/**
 * Returns the comparator used by the delegate collection.
 * @return Comparator object or null if natural ordering is used
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,indexOf,com.google.common.collect.ImmutableSortedAsList:indexOf(java.lang.Object),50,62,"/**
* Returns the index of the specified target in this set.
* @param target object to search for
* @return index of target or -1 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,asMapOfRanges,com.google.common.collect.ImmutableRangeMap:asMapOfRanges(),307,315,"/**
* Returns an immutable map of ranges to values.
* @return ImmutableMap where keys are Ranges and values are V
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,<init>,com.google.common.collect.ImmutableSortedMap$SerializedForm:<init>(com.google.common.collect.ImmutableSortedMap),1147,1150,"/**
 * Constructs a serialized form of an immutable sorted map.
 * @param sortedMap the ImmutableSortedMap to serialize
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,combine,com.google.common.collect.ImmutableSortedSet$Builder:combine(com.google.common.collect.ImmutableSet$Builder),571,580,"/**
 * Combines elements from another ImmutableSet.Builder.
 * @param builder the builder to combine with
 * @return this Builder instance
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,of,"com.google.common.collect.ImmutableTable:of(java.lang.Object,java.lang.Object,java.lang.Object)",108,110,"/**
* Creates an immutable table with a single cell.
* @param rowKey key for the row
* @param columnKey key for the column
* @param value value to store in the table
* @return ImmutableTable containing one entry
*/",Returns an immutable table containing a single cell.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,<init>,com.google.common.collect.SingletonImmutableTable:<init>(com.google.common.collect.Table$Cell),43,45,"/**
 * Constructs an immutable table entry from a cell.
 * @param cell source cell providing row, column, and value
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toString,com.google.common.collect.FluentIterable:toString(),336,339,"/**
 * Returns a string representation of the delegate.
 * @return string representation of the delegate
 */","* Returns a string representation of this fluent iterable, with the format {@code [e1, e2, ...,
   * en]}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.joining("", "", ""["", ""]""))}
   * or (less efficiently) {@code stream.collect(Collectors.toList()).toString()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,putAll,"com.google.common.collect.ImmutableMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)",279,301,"/**
* Adds multiple values for a key.
* @param key the key to associate with values
* @param values iterable of values to add
* @return this builder instance
*/","* Stores a collection of values with the same key in the built multimap.
     *
     * @throws NullPointerException if {@code key}, {@code values}, or any element in {@code values}
     *     is null. The builder is left in an invalid state.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,pathNotFound,"com.google.common.io.MoreFiles:pathNotFound(java.nio.file.Path,java.util.Collection)",806,853,"/**
 * Checks if the given path not found exception matches the specified path.
 * @param path file path to check
 * @param exceptions collection of IO exceptions
 * @return NoSuchFileException if matched, otherwise null
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getOnlyElement,"com.google.common.collect.Iterables:getOnlyElement(java.lang.Iterable,java.lang.Object)",274,278,"/**
* Retrieves the single element from an iterable or returns a default value.
* @param iterable collection of elements
* @param defaultValue value to return if iterable is empty
* @return single element or default value if iterable is empty
*/","* Returns the single element contained in {@code iterable}, or {@code defaultValue} if the
   * iterable is empty.
   *
   * <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code
   * stream.collect(MoreCollectors.toOptional()).orElse(defaultValue)}.
   *
   * @throws IllegalArgumentException if the iterator contains multiple elements",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,throwCause,"com.google.common.util.concurrent.SimpleTimeLimiter:throwCause(java.lang.Exception,boolean)",221,239,"/**
 * Throws the underlying cause of an exception, optionally combining stack traces.
 * @param e the original exception
 * @param combineStackTraces whether to merge stack traces
 * @throws Exception or Error based on the cause type
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getLast,"com.google.common.collect.Iterables:getLast(java.lang.Iterable,java.lang.Object)",873,886,"/**
 * Retrieves the last element of an iterable or returns a default value.
 * @param iterable the iterable to retrieve the last element from
 * @param defaultValue the value to return if the iterable is empty
 * @return the last element or the default value if the iterable is empty
 */","* Returns the last element of {@code iterable} or {@code defaultValue} if the iterable is empty.
   * If {@code iterable} is a {@link List} with {@link RandomAccess} support, then this operation is
   * guaranteed to be {@code O(1)}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code Streams.findLast(stream).orElse(defaultValue)}
   *
   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),
   * consider using {@code collection.getLast()} instead. Note that if the collection is empty,
   * {@code getLast()} throws a {@code NoSuchElementException}, while this method returns the
   * default value.
   *
   * @param defaultValue the value to return if {@code iterable} is empty
   * @return the last element of {@code iterable} or the default value
   * @since 3.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,next,com.google.common.collect.Iterators$ConcatenatedIterator:next(),1432,1441,"/**
 * Returns the next element in the iteration.
 * Throws NoSuchElementException if no more elements are present.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,iterator,com.google.common.collect.EmptyContiguousSet:iterator(),97,100,"/**
 * Returns an empty unmodifiable iterator.
 * @return UnmodifiableIterator with no elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,descendingIterator,com.google.common.collect.EmptyContiguousSet:descendingIterator(),102,106,"/**
* Returns an empty iterator that does not support removal.
* @return UnmodifiableIterator with no elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,<init>,com.google.common.collect.Iterators$ConcatenatedIterator:<init>(java.util.Iterator),1377,1380,"/**
 * Initializes a ConcatenatedIterator with a meta-iterator.
 * @param metaIterator an iterator of iterators to concatenate
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,add,com.google.common.collect.LinkedHashMultimap$ValueSet:add(java.lang.Object),480,501,"/**
* Adds a value to the set if not already present.
* @param value the value to add
* @return true if added, false if already present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,deleteFromMultimap,com.google.common.collect.LinkedHashMultimap:deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry),153,156,"/**
 * Adjusts multimap links after deleting an entry.
 * @param entry the entry to be deleted
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,clear,com.google.common.collect.LinkedHashMultimap:clear(),608,612,"/**
 * Clears the map and removes entries from the multimap.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,valueSpliterator,com.google.common.collect.LinkedHashMultimap:valueSpliterator(),603,606,"/**
* Returns a spliterator over values.
* @return Spliterator of values from entries
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,put,"com.google.common.collect.LinkedListMultimap:put(java.lang.Object,java.lang.Object)",604,609,"/**
* Adds or updates a node with the given key and value.
* @param key unique identifier for the node
* @param value data to store in the node
* @return always returns true indicating success
*/","* Stores a key-value pair in the multimap.
   *
   * @param key key to store in the multimap
   * @param value value to store in the multimap
   * @return {@code true} always",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,partition,"com.google.common.collect.Lists:partition(java.util.List,int)",701,707,"/**
 * Partitions a list into sublists of a specified size.
 * @param list the list to partition
 * @param size the size of each sublist
 * @return a list of sublists
 */","* Returns consecutive {@linkplain List#subList(int, int) sublists} of a list, each of the same
   * size (the final list may be smaller). For example, partitioning a list containing {@code [a, b,
   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer list
   * containing two inner lists of three and two elements, all in the original order.
   *
   * <p>The outer list is unmodifiable, but reflects the latest state of the source list. The inner
   * lists are sublist views of the original list, produced on demand using {@link List#subList(int,
   * int)}, and are subject to all the usual caveats about modification as explained in that API.
   *
   * @param list the list to return consecutive sublists of
   * @param size the desired size of each sublist (the last may be smaller)
   * @return a list of consecutive sublists
   * @throws IllegalArgumentException if {@code partitionSize} is nonpositive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardIndexOf,com.google.common.collect.ForwardingList:standardIndexOf(java.lang.Object),159,161,"/**
 * Returns the index of the first occurrence of the specified element.
 * @param element the element to search for
 * @return index of the element or -1 if not found
 */","* A sensible default implementation of {@link #indexOf}, in terms of {@link #listIterator()}. If
   * you override {@link #listIterator()}, you may wish to override {@link #indexOf} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,indexOf,com.google.common.collect.ImmutableList:indexOf(java.lang.Object),425,428,"/**
* Returns index of specified element.
* @param object element to find
* @return index or -1 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardLastIndexOf,com.google.common.collect.ForwardingList:standardLastIndexOf(java.lang.Object),170,172,"/**
 * Finds the last occurrence of an element in the list.
 * @param element the object to search for
 * @return index of the last occurrence or -1 if not found
 */","* A sensible default implementation of {@link #lastIndexOf}, in terms of {@link
   * #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override
   * {@link #lastIndexOf} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,lastIndexOf,com.google.common.collect.ImmutableList:lastIndexOf(java.lang.Object),430,433,"/**
 * Returns the index of the last occurrence of an element.
 * @param object the element to search for
 * @return the last index of the element or -1 if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,putIfAbsent,"com.google.common.collect.ForwardingConcurrentMap:putIfAbsent(java.lang.Object,java.lang.Object)",49,53,"/**
* Puts key-value pair if absent.
* @param key unique key
* @param value value to put
* @return existing value or null if not present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,remove,"com.google.common.collect.ForwardingConcurrentMap:remove(java.lang.Object,java.lang.Object)",55,59,"/**
* Removes entry with specified key and value.
* @param key key to be removed
* @param value value associated with the key
* @return true if removal was successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,replace,"com.google.common.collect.ForwardingConcurrentMap:replace(java.lang.Object,java.lang.Object)",61,65,"/**
* Replaces the value for a given key.
* @param key key with which the specified value is to be associated
* @param value value to be associated with the specified key
* @return old value if present, otherwise null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,replace,"com.google.common.collect.ForwardingConcurrentMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)",67,72,"/**
 * Replaces the entry for a key only if currently mapped to a given value.
 * @param key key with which the specified value is associated
 * @param oldValue value expected to be associated with the specified key
 * @param newValue value to be associated with the specified key
 * @return true if the value was replaced, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,contains,com.google.common.collect.MapMakerInternalMap$Values:contains(java.lang.Object),2727,2730,"/**
 * Checks if the map contains the specified value.
 * @param o the value to check
 * @return true if the map contains the value, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,advance,com.google.common.collect.MapMakerInternalMap$HashIterator:advance(),2541,2562,"/**
* Advances to the next entry in a data structure.
* Updates internal pointers to the next available element.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2111,2116,"/**
* Constructs a new segment for a StrongKeyDummyValueMap.
* @param map the backing map
* @param initialCapacity the initial capacity of the segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2022,2028,"/**
* Constructs a segment for a strong key and value map.
* @param map the backing map
* @param initialCapacity initial capacity of the segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2048,2053,"/**
* Initializes a segment with strong keys and weak values.
* @param map the internal map configuration
* @param initialCapacity initial capacity of the segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2245,2249,"/**
* Constructs a WeakKeyDummyValueSegment.
* @param map the internal map instance
* @param initialCapacity the initial capacity of the segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2135,2140,"/**
* Constructs a segment for a weak key and strong value map.
* @param map the backing map
* @param initialCapacity the initial capacity of the segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2175,2179,"/**
 * Constructs a segment with weak keys and values.
 * @param map the parent map
 * @param initialCapacity initial capacity of the segment
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getEntry,"com.google.common.collect.MapMakerInternalMap$Segment:getEntry(java.lang.Object,int)",1413,1433,"/**
* Retrieves an entry by key and hash.
* @param key the key to search for
* @param hash the hash code of the key
* @return the entry if found, otherwise null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,preWriteCleanup,com.google.common.collect.MapMakerInternalMap$Segment:preWriteCleanup(),1998,2001,"/**
 * Performs cleanup operations before writing.
 * Calls runLockedCleanup under lock.
 */","* Performs routine cleanup prior to executing a write. This should be called every time a write
     * thread acquires the segment lock, immediately after acquiring the lock.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,runCleanup,com.google.common.collect.MapMakerInternalMap$Segment:runCleanup(),2003,2005,"/**
 * Executes cleanup tasks with synchronization.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap:clear(),2489,2494,"/**
* Clears all entries in each segment.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)",640,646,"/**
* Copies an entry with a new next pointer.
* @param segment the segment containing the entry
* @param entry the original entry to copy
* @param newNext the new next entry or null
* @return a new StrongKeyDummyValueEntry with updated next
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)",448,457,"/**
 * Copies an entry with a new next reference.
 * @param segment the segment containing the entry
 * @param entry the original entry to copy
 * @param newNext the new next entry in the chain, can be null
 * @return a new entry with the same key and value as the original
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)",545,556,"/**
 * Copies a segment entry.
 * @param segment the source segment
 * @param entry the entry to copy
 * @param newNext the new next entry or null
 * @return copied entry or null if collected
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$LinkedWeakKeyWeakValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)",900,904,"/**
 * Constructs a new weak-key and weak-value entry.
 * @param queue reference queue to register with
 * @param key the key for this entry
 * @param hash the hash code of the key
 * @param next the next entry in the chain
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$SortedAsMapView:comparator(),995,998,"/**
 * Returns the comparator used by the backing set.
 * @return Comparator or null if natural ordering is used
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$SortedAsMapView:keySet(),1000,1003,"/**
 * Returns a sorted set of keys that only supports removal.
 * @return SortedSet containing all keys from the backing set
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstKey,com.google.common.collect.Maps$SortedAsMapView:firstKey(),1020,1024,"/**
 * Returns the first key in the set.
 * @return the first key or null if the set is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastKey,com.google.common.collect.Maps$SortedAsMapView:lastKey(),1026,1030,"/**
 * Returns the last key in the sorted set.
 * @return the last key or null if the set is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,last,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:last(),3174,3178,"/**
 * Retrieves the last key in the collection.
 * @return the last key or null if the collection is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,first,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:first(),3168,3172,"/**
 * Returns the first key in the map.
 * @return the first key or null if the map is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$KeySet:remove(java.lang.Object),3953,3960,"/**
* Removes an object from the collection.
* @param o the object to be removed
* @return true if the object was present and removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$SortedKeySet:comparator(),3987,3990,"/**
 * Returns the comparator used to order keys.
 * @return Comparator or null if natural ordering is used
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,first,com.google.common.collect.Maps$SortedKeySet:first(),4007,4011,"/**
 * Retrieves the first key from the map.
 * @return the first key or null if the map is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,last,com.google.common.collect.Maps$SortedKeySet:last(),4013,4017,"/**
 * Retrieves the last key from the map.
 * @return the last key or null if the map is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMapDifference.java,entriesOnlyOnLeft,com.google.common.collect.SortedMapDifference:entriesOnlyOnLeft(),33,34,"/**
 * Returns entries present only in the left map.
 * @return SortedMap containing unique entries from the left map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMapDifference.java,entriesDiffering,com.google.common.collect.SortedMapDifference:entriesDiffering(),42,43,"/**
 * Returns a map of entries that differ between this and another map.
 * @return SortedMap with keys from both maps and ValueDifference objects indicating differences
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingIterator,com.google.common.collect.Maps$NavigableKeySet:descendingIterator(),4067,4070,"/**
 * Returns an iterator over the elements in reverse order.
 * @return Iterator over elements in descending order
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$NavigableKeySet:subSet(java.lang.Object,java.lang.Object)",4081,4084,"/**
* Returns a view of the portion of this set whose elements range from fromElement to toElement.
* @param fromElement low endpoint (inclusive)
* @param toElement high endpoint (exclusive)
* @return SortedSet containing elements in specified range
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,com.google.common.collect.Maps$NavigableKeySet:headSet(java.lang.Object),4091,4094,"/**
* Returns a view of the portion of this set whose elements are less than the specified element.
* @param toElement upper bound (exclusive)
* @return SortedSet containing elements less than toElement
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,com.google.common.collect.Maps$NavigableKeySet:tailSet(java.lang.Object),4101,4104,"/**
* Returns a view of the portion of this set whose elements are greater than or equal to fromElement.
* @param fromElement lower bound (inclusive)
* @return SortedSet containing elements greater than or equal to fromElement
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,ceilingKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:ceilingKey(java.lang.Object),2280,2283,"/**
* Returns the least key greater than or equal to the given key.
* @param key the key to search for
* @return the least key greater than or equal to key, or null if no such key exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingKeySet,com.google.common.collect.Maps$TransformedEntriesNavigableMap:descendingKeySet(),2285,2288,"/**
 * Returns a descending key set of the map.
 * @return NavigableSet containing keys in descending order
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,floorKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:floorKey(java.lang.Object),2305,2308,"/**
* Returns the greatest key less than or equal to the specified key.
* @param key the key to search for
* @return the greatest key <= key, or null if no such key exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,higherKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:higherKey(java.lang.Object),2325,2328,"/**
* Returns the least key greater than the specified key.
* @param key the key to search for
* @return the least key greater than the specified key, or null if no such key exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lowerKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:lowerKey(java.lang.Object),2340,2343,"/**
* Returns the greatest key less than the specified key.
* @param key the reference key
* @return the greatest key less than key, or null if no such key exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,navigableKeySet,com.google.common.collect.Maps$TransformedEntriesNavigableMap:navigableKeySet(),2345,2348,"/**
* Returns a navigable set of keys.
* @return NavigableSet containing all keys in the map
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,comparator,com.google.common.collect.ForwardingSortedMap:comparator(),68,71,"/**
 * Returns the comparator used to order elements.
 * @return Comparator or null if natural ordering is used
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,firstKey,com.google.common.collect.ForwardingSortedMap:firstKey(),73,77,"/**
 * Returns the first key in the map.
 * @return the first key or null if the map is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,headMap,com.google.common.collect.ForwardingSortedMap:headMap(java.lang.Object),79,82,"/**
* Returns a view of the portion of this map whose keys are strictly less than toKey.
* @param toKey key up to which entries should be included
* @return SortedMap with entries less than toKey
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,lastKey,com.google.common.collect.ForwardingSortedMap:lastKey(),84,88,"/**
 * Retrieves the last key in the map.
 * @return The last key or null if the map is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,subMap,"com.google.common.collect.ForwardingSortedMap:subMap(java.lang.Object,java.lang.Object)",90,93,"/**
* Returns a view of the portion of this map whose keys range from fromKey to toKey.
* @param fromKey low endpoint (inclusive)
* @param toKey high endpoint (exclusive)
* @return SortedMap containing the specified range
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,tailMap,com.google.common.collect.ForwardingSortedMap:tailMap(java.lang.Object),95,98,"/**
 * Returns a view of the portion of this map whose keys are greater than or equal to `fromKey`.
 * @param fromKey the lower bound key (inclusive)
 * @return a SortedMap containing the specified range of keys and values
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,delegate,com.google.common.collect.ForwardingMap:delegate(),64,65,"/**
 * Provides the delegate map for operations.
 * @return Map instance used for delegation
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,doDifference,"com.google.common.collect.Maps:doDifference(java.util.Map,java.util.Map,com.google.common.base.Equivalence,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",575,607,"/**
 * Compares two maps and categorizes their differences.
 * @param left first map to compare
 * @param right second map to compare
 * @param valueEquivalence equivalence relation for values
 * @param onlyOnLeft entries unique to the left map
 * @param onlyOnRight entries unique to the right map
 * @param onBoth entries present in both maps with equivalent values
 * @param differences entries present in both maps but with different values
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,"com.google.common.eventbus.EventBus:<init>(java.lang.String,java.util.concurrent.Executor,com.google.common.eventbus.Dispatcher,com.google.common.eventbus.SubscriberExceptionHandler)",190,199,"/**
* Initializes an EventBus with required components.
* @param identifier unique event bus identifier
* @param executor thread pool for handling events
* @param dispatcher dispatches events to subscribers
* @param exceptionHandler handles exceptions from subscribers
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,create,com.google.common.collect.TreeRangeMap:create(),63,65,"/**
* Creates an empty TreeRangeMap.
* @param <K> key type that extends Comparable
* @param <V> value type
* @return a new TreeRangeMap instance
*/","Returns a new, empty {@link TreeRangeMap}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,entryPredicate,com.google.common.collect.FilteredKeyMultimap:entryPredicate(),55,58,"/**
* Returns a predicate that tests if an entry's key matches the given key predicate.
* @return Predicate testing entries based on key criteria
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,findMin,"com.google.common.collect.MinMaxPriorityQueue$Heap:findMin(int,int)",601,614,"/**
* Finds the index of the minimum element within a specified range.
* @param index starting index for search
* @param len length of the range to search
* @return index of the minimum element or -1 if out of bounds
*/","* Returns the index of minimum value between {@code index} and {@code index + len}, or {@code
     * -1} if {@code index} is greater than {@code size}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,getMaxElementIndex,com.google.common.collect.MinMaxPriorityQueue:getMaxElementIndex(),324,335,"/**
* Returns index of the maximum element in a priority queue.
* @return Index of the max element
*/",Returns the index of the max element.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,peekFirst,com.google.common.collect.MinMaxPriorityQueue:peekFirst(),360,362,"/**
 * Returns the first element without removing it.
 * @return the first element or null if empty
 */","* Retrieves, but does not remove, the least element of this queue, or returns {@code null} if the
   * queue is empty.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,bubbleUpAlternatingLevels,"com.google.common.collect.MinMaxPriorityQueue$Heap:bubbleUpAlternatingLevels(int,java.lang.Object)",582,595,"/**
* Bubbles up an element at a given index by alternating levels.
* @param index starting position of the element to bubble up
* @param x the element to be bubbled up
* @return final index after bubbling up
*/","* Bubbles a value from {@code index} up the levels of this heap, and returns the index the
     * element ended up at.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,verifyIndex,com.google.common.collect.MinMaxPriorityQueue$Heap:verifyIndex(int),730,744,"/**
 * Verifies if the element at index i satisfies heap properties.
 * @param i index of the element to verify
 * @return true if valid, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,hasNext,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:hasNext(),781,786,"/**
* Checks if there are more elements to iterate over.
* @return true if more elements exist, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,next,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:next(),788,805,"/**
 * Returns the next element in the iteration.
 * @throws NoSuchElementException if no more elements are available
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,build,com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:build(com.google.common.collect.Multimap),479,483,"/**
* Builds a sorted set multimap from a given multimap.
* @param multimap input multimap to be converted
* @return SortedSetMultimap with the same entries as the input
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$UnmodifiableListMultimap:get(java.lang.Object),804,807,"/**
* Retrieves a list of values by key.
* @param key unique identifier for the values
* @return unmodifiable list of values associated with the key
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:get(java.lang.Object),834,841,"/**
* Retrieves values associated with the specified key.
* @param key the key to look up
* @return an unmodifiable set of values or empty set if key not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,delegate,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:delegate(),868,871,"/**
* Returns the sorted set multimap delegate.
* @return SortedSetMultimap instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,descendingIterator,com.google.common.collect.AbstractSortedMultiset:descendingIterator(),116,118,"/**
 * Returns an iterator over elements in descending order.
 * @return Iterator for elements in descending order
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,iterator,com.google.common.collect.ConcurrentHashMultiset:iterator(),553,556,"/**
 * Returns an iterator over the elements of this multiset.
 * @return Iterator over the elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,iterator,com.google.common.collect.DescendingMultiset:iterator(),143,146,"/**
 * Returns an iterator over the elements in this multiset.
 * @return Iterator of elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,iterator,com.google.common.collect.EnumMultiset:iterator(),293,296,"/**
 * Returns an iterator over the elements of this multiset.
 * @return Iterator over elements, allowing duplicates
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardIterator,com.google.common.collect.ForwardingMultiset:standardIterator(),263,265,"/**
 * Returns an iterator over the elements of this multiset.
 * @return Iterator over elements
 */","* A sensible definition of {@link #iterator} in terms of {@link #entrySet} and {@link
   * #remove(Object)}. If you override either of these methods, you may wish to override {@link
   * #iterator} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iterator,com.google.common.collect.Multisets$ViewMultiset:iterator(),1183,1186,"/**
 * Returns an iterator over the elements.
 * @return Iterator for traversing elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,iterator,com.google.common.collect.TreeMultiset:iterator(),542,545,"/**
 * Returns an iterator over the elements of this multiset.
 * @return Iterator over the elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,elementSet,com.google.common.collect.UnmodifiableSortedMultiset:elementSet(),59,62,"/**
* Returns a navigable set view of the elements in this collection.
* @return NavigableSet containing all elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,comparator,com.google.common.collect.UnmodifiableSortedMultiset:comparator(),49,52,"/**
 * Returns the comparator used to order elements.
 * @return Comparator object or natural ordering if none
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,firstEntry,com.google.common.collect.UnmodifiableSortedMultiset:firstEntry(),77,80,"/**
 * Returns the first entry in the sorted map.
 * @return the first Entry or null if the map is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,lastEntry,com.google.common.collect.UnmodifiableSortedMultiset:lastEntry(),82,85,"/**
 * Returns the last entry in the map.
 * @return the last Entry or null if the map is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,count,com.google.common.collect.ForwardingMultiset:count(java.lang.Object),59,62,"/**
 * Counts occurrences of an element in the collection.
 * @param element the element to count
 * @return number of times the element appears
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,add,"com.google.common.collect.ForwardingMultiset:add(java.lang.Object,int)",64,68,"/**
* Adds an element with specified occurrences to the collection.
* @param element the element to be added
* @param occurrences number of times the element should be added
* @return the total number of elements in the collection after addition
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,remove,"com.google.common.collect.ForwardingMultiset:remove(java.lang.Object,int)",70,74,"/**
* Removes specified number of occurrences of an element.
* @param element the element to remove
* @param occurrences number of times to remove the element
* @return actual number of removed occurrences
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,elementSet,com.google.common.collect.ForwardingMultiset:elementSet(),76,79,"/**
 * Returns the set of elements in this collection.
 * @return a Set containing all the elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,entrySet,com.google.common.collect.ForwardingMultiset:entrySet(),81,84,"/**
 * Returns the set of entries in the map.
 * @return Set of Entry objects representing key-value pairs
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,equals,com.google.common.collect.ForwardingMultiset:equals(java.lang.Object),86,89,"/**
 * Checks equality with another object.
 * @param object the object to compare
 * @return true if equal, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,hashCode,com.google.common.collect.ForwardingMultiset:hashCode(),91,94,"/**
 * Returns the hash code of the delegate object.
 * @return hash code value of the delegate
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,setCount,"com.google.common.collect.ForwardingMultiset:setCount(java.lang.Object,int)",96,100,"/**
* Sets the count of an element.
* @param element the element to update
* @param count new count value
* @return updated count
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,setCount,"com.google.common.collect.ForwardingMultiset:setCount(java.lang.Object,int,int)",102,106,"/**
* Sets count for an element.
* @param element the element to update
* @param oldCount current count of the element
* @param newCount new count to set for the element
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,toArray,com.google.common.collect.ImmutableCollection:toArray(java.lang.Object[]),199,229,"/**
* Converts collection to array.
* @param other target array or new array if insufficient capacity
* @return array containing collection elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,concat,"com.google.common.collect.ObjectArrays:concat(java.lang.Object,java.lang.Object[])",89,94,"/**
 * Concatenates an element to the start of an array.
 * @param element element to add
 * @param array original array
 * @return new array with element at the start
 */","* Returns a new array that prepends {@code element} to {@code array}.
   *
   * @param element the element to prepend to the front of {@code array}
   * @param array the array of elements to append
   * @return an array whose size is one larger than {@code array}, with {@code element} occupying
   *     the first position, and the elements of {@code array} occupying the remaining elements.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,toArrayImpl,"com.google.common.collect.ObjectArrays:toArrayImpl(java.util.Collection,java.lang.Object[])",131,142,"/**
 * Converts a collection to an array.
 * @param c the collection to convert
 * @param array the target array or empty array of T type
 * @return an array containing all elements from the collection
 */","* Returns an array containing all of the elements in the specified collection; the runtime type
   * of the returned array is that of the specified array. If the collection fits in the specified
   * array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the
   * specified array and the size of the specified collection.
   *
   * <p>If the collection fits in the specified array with room to spare (i.e., the array has more
   * elements than the collection), the element in the array immediately following the end of the
   * collection is set to {@code null}. This is useful in determining the length of the collection
   * <i>only</i> if the caller knows that the collection does not contain any null elements.
   *
   * <p>This method returns the elements in the order they are returned by the collection's
   * iterator.
   *
   * <p>TODO(kevinb): support concurrently modified collections?
   *
   * @param c the collection for which to return an array of elements
   * @param array the array in which to place the collection elements
   * @throws ArrayStoreException if the runtime type of the specified array is not a supertype of
   *     the runtime type of every element in the specified collection",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,toArray,com.google.common.collect.CompactLinkedHashSet:toArray(),231,234,"/**
 * Converts collection to array.
 * @return Object array containing all elements of the collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:toArray(),987,998,"/**
* Converts collection to array.
* @return Object array containing all elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,min,com.google.common.collect.Ordering:min(java.lang.Iterable),587,590,"/**
* Finds the minimum element in an iterable.
* @param iterable collection of elements to compare
* @return minimum element or null if iterable is empty
*/","* Returns the least of the specified values according to this ordering. If there are multiple
   * least values, the first of those is returned.
   *
   * <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code
   * Collections.min(collection, thisComparator)} instead. Otherwise, use {@code
   * Streams.stream(iterable).min(thisComparator).get()} instead. Note that these alternatives do
   * not guarantee which tied minimum element is returned.
   *
   * @param iterable the iterable whose minimum element is to be determined
   * @throws NoSuchElementException if {@code iterable} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,max,com.google.common.collect.ReverseOrdering:max(java.util.Iterator),83,86,"/**
* Finds maximum element in iterator using natural ordering.
* @param iterator input iterator of elements
* @return maximum element or null if iterator is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,max,com.google.common.collect.Ordering:max(java.lang.Iterable),678,681,"/**
* Finds maximum element in an iterable.
* @param iterable collection of elements to compare
* @return maximum element or null if iterable is empty
*/","* Returns the greatest of the specified values according to this ordering. If there are multiple
   * greatest values, the first of those is returned.
   *
   * <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code
   * Collections.max(collection, thisComparator)} instead. Otherwise, use {@code
   * Streams.stream(iterable).max(thisComparator).get()} instead. Note that these alternatives do
   * not guarantee which tied maximum element is returned.
   *
   * @param iterable the iterable whose maximum element is to be determined
   * @throws NoSuchElementException if {@code iterable} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,min,com.google.common.collect.ReverseOrdering:min(java.util.Iterator),62,65,"/**
* Finds minimum element in iterator using reverse order.
* @param iterator source of elements to compare
* @return minimum element or null if iterator is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFutureState.java,getOrInitSeenExceptions,com.google.common.util.concurrent.AggregateFutureState:getOrInitSeenExceptions(),84,141,"/**
* Initializes and returns a set of seen exceptions, ensuring thread-safe population.
* @return Set containing all seen exceptions
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,toString,com.google.common.collect.ContiguousSet:toString(),250,253,"/**
 * Returns string representation of the range.
 * @return string representation of the range object
 */","Returns a shorthand representation of the contents such as {@code ""[1..100]""}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,entryIterator,com.google.common.collect.TreeRangeSet$RangesByUpperBound:entryIterator(),362,400,"/**
 * Returns an iterator over ranges within the upper bound window.
 * @return Iterator of Entry<Cut<C>, Range<C>> objects
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,from,com.google.common.collect.GeneralRange:from(com.google.common.collect.Range),42,57,"/**
* Converts a Range to a GeneralRange.
* @param range the input Range object
* @return a GeneralRange object representing the same bounds as the input
*/",Converts a Range to a GeneralRange.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps:subMap(java.util.NavigableMap,com.google.common.collect.Range)",4496,4519,"/**
* Returns a submap of the given NavigableMap within the specified Range.
* @param map the original NavigableMap
* @param range the range defining the bounds for the submap
* @return a submap within the specified range
*/","* Returns a view of the portion of {@code map} whose keys are contained by {@code range}.
   *
   * <p>This method delegates to the appropriate methods of {@link NavigableMap} (namely {@link
   * NavigableMap#subMap(Object, boolean, Object, boolean) subMap()}, {@link
   * NavigableMap#tailMap(Object, boolean) tailMap()}, and {@link NavigableMap#headMap(Object,
   * boolean) headMap()}) to actually construct the view. Consult these methods for a full
   * description of the returned view's behavior.
   *
   * <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural
   * ordering. {@code NavigableMap} on the other hand can specify a custom ordering via a {@link
   * Comparator}, which can violate the natural ordering. Using this method (or in general using
   * {@code Range}) with unnaturally-ordered maps can lead to unexpected and undefined behavior.
   *
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets:subSet(java.util.NavigableSet,com.google.common.collect.Range)",2300,2323,"/**
 * Returns a subset of the given NavigableSet within the specified Range.
 * @param set the original NavigableSet
 * @param range the range defining the subset bounds
 * @return a NavigableSet representing the subset
 */","* Returns a view of the portion of {@code set} whose elements are contained by {@code range}.
   *
   * <p>This method delegates to the appropriate methods of {@link NavigableSet} (namely {@link
   * NavigableSet#subSet(Object, boolean, Object, boolean) subSet()}, {@link
   * NavigableSet#tailSet(Object, boolean) tailSet()}, and {@link NavigableSet#headSet(Object,
   * boolean) headSet()}) to actually construct the view. Consult these methods for a full
   * description of the returned view's behavior.
   *
   * <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural
   * ordering. {@code NavigableSet} on the other hand can specify a custom ordering via a {@link
   * Comparator}, which can violate the natural ordering. Using this method (or in general using
   * {@code Range}) with unnaturally-ordered sets can lead to unexpected and undefined behavior.
   *
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,get,com.google.common.collect.RegularImmutableBiMap:get(java.lang.Object),148,151,"/**
* Retrieves value by key.
* @param key object to look up
* @return associated value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,get,com.google.common.collect.RegularImmutableMap:get(java.lang.Object),260,263,"/**
 * Retrieves value by key.
 * @param key key to search for
 * @return value associated with key or null if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,contains,com.google.common.collect.RegularImmutableSortedSet:contains(java.lang.Object),95,102,"/**
 * Checks if the collection contains the specified element.
 * @param o element to be checked for presence in the collection
 * @return true if the collection contains the element, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,get,com.google.common.collect.ImmutableSortedMap:get(java.lang.Object),791,795,"/**
* Retrieves value by key.
* @param key key to search for
* @return associated value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,count,com.google.common.collect.RegularImmutableSortedMultiset:count(java.lang.Object),89,93,"/**
* Counts occurrences of an element in the set.
* @param element the object to count
* @return number of times the element appears, or 0 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,lower,com.google.common.collect.ForwardingNavigableSet:lower(java.lang.Object),61,64,"/**
 * Returns the greatest element less than the specified element.
 * @param e the element to compare with
 * @return the greatest element less than e, or null if no such element exists
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,floor,com.google.common.collect.ForwardingNavigableSet:floor(java.lang.Object),75,78,"/**
 * Finds the greatest element less than or equal to the specified element.
 * @param e the element to compare with
 * @return the greatest element less than or equal to e, or null if no such element exists
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,ceiling,com.google.common.collect.ForwardingNavigableSet:ceiling(java.lang.Object),89,92,"/**
* Returns the least element greater than or equal to the specified element.
* @param e element to find ceiling for
* @return least element greater than or equal to e, or null if none found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,higher,com.google.common.collect.ForwardingNavigableSet:higher(java.lang.Object),103,106,"/**
 * Returns the least element greater than the given element.
 * @param e element to compare with
 * @return the next higher element or null if no such element exists
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,pollFirst,com.google.common.collect.ForwardingNavigableSet:pollFirst(),117,120,"/**
 * Retrieves and removes the first element from the deque.
 * @return the head of this deque, or null if this deque is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,pollLast,com.google.common.collect.ForwardingNavigableSet:pollLast(),131,134,"/**
 * Removes and returns the last element of the deque.
 * @return the last element or null if the deque is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,descendingSet,com.google.common.collect.ForwardingNavigableSet:descendingSet(),155,158,"/**
 * Returns a reverse-ordered view of the elements.
 * @return NavigableSet with elements in descending order
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,descendingIterator,com.google.common.collect.ForwardingNavigableSet:descendingIterator(),176,179,"/**
 * Returns an iterator over elements in reverse order.
 * @return Iterator over elements in descending order
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,subSet,"com.google.common.collect.ForwardingNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",181,188,"/**
* Returns a subset of elements within a specified range.
* @param fromElement the lower bound element
* @param fromInclusive true if the fromElement is inclusive
* @param toElement the upper bound element
* @param toInclusive true if the toElement is inclusive
* @return NavigableSet containing elements within the range
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,headSet,"com.google.common.collect.ForwardingNavigableSet:headSet(java.lang.Object,boolean)",215,218,"/**
* Returns elements less than or equal to specified element.
* @param toElement the upper bound element
* @param inclusive true if the upper bound is inclusive
* @return a navigable set of elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,tailSet,"com.google.common.collect.ForwardingNavigableSet:tailSet(java.lang.Object,boolean)",229,232,"/**
 * Returns a navigable set of elements greater than or equal to the specified element.
 * @param fromElement the lower bound element
 * @param inclusive true if the lower bound is inclusive
 * @return NavigableSet containing elements greater than or equal to fromElement
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,delegate,com.google.common.collect.ForwardingSortedSet:delegate(),67,68,"/**
 * Provides the delegate SortedSet implementation.
 * @return SortedSet instance to be used by the class
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,createElementSet,com.google.common.collect.AbstractSortedMultiset:createElementSet(),56,59,"/**
* Creates a navigable set of elements.
* @return NavigableSet containing all elements in sorted order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,elementSet,com.google.common.collect.DescendingMultiset:elementSet(),52,59,"/**
* Returns a navigable set of elements.
* @return NavigableSet containing all unique elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,descendingSet,com.google.common.collect.SortedMultisets$NavigableElementSet:descendingSet(),123,126,"/**
* Returns a descending view of the elements in this set.
* @return NavigableSet with elements in reverse order
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,subSet,"com.google.common.collect.SortedMultisets$NavigableElementSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",143,154,"/**
* Returns a navigable subset of elements within the specified range.
* @param fromElement lower bound element
* @param fromInclusive true if lower bound is inclusive
* @param toElement upper bound element
* @param toInclusive true if upper bound is inclusive
* @return NavigableSet containing elements in the specified range
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,headSet,"com.google.common.collect.SortedMultisets$NavigableElementSet:headSet(java.lang.Object,boolean)",156,160,"/**
* Returns elements less than or equal to the specified element.
* @param toElement upper bound of the range
* @param inclusive true if the end element is included
* @return NavigableSet containing elements up to toElement
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,tailSet,"com.google.common.collect.SortedMultisets$NavigableElementSet:tailSet(java.lang.Object,boolean)",162,166,"/**
 * Returns a navigable set of elements greater than or equal to the specified element.
 * @param fromElement the lower bound (inclusive if inclusive is true)
 * @param inclusive whether the lower bound is inclusive
 * @return NavigableSet containing elements >= fromElement
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.StandardTable$ColumnKeySet:size(),693,696,"/**
 * Returns the number of elements in the collection.
 * @return size of the collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,maintainEmptyInvariant,com.google.common.collect.StandardTable$Row:maintainEmptyInvariant(),337,343,"/**
* Maintains invariant by removing empty row maps.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$Row:containsKey(java.lang.Object),345,349,"/**
* Checks if map contains the specified key.
* @param key key to check
* @return true if key is present and not null, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$Row:get(java.lang.Object),351,355,"/**
* Retrieves value by key from the map.
* Updates backing row map field before retrieval.
* @param key the key to search for
* @return the value associated with the key or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.StandardTable$Row:size(),387,391,"/**
* Returns the size of the backing row map.
* Updates the backing row map field before returning its size.
* @return number of entries in the backing row map
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,entryIterator,com.google.common.collect.StandardTable$Row:entryIterator(),393,417,"/**
 * Returns an iterator over entries in the map.
 * Updates backing row map and wraps entries for custom behavior.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,entrySpliterator,com.google.common.collect.StandardTable$Row:entrySpliterator(),419,426,"/**
* Returns a spliterator over the entries of the map.
* Updates backing row map and wraps entries if necessary.
* @return Spliterator for map entries or empty if no backing map
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.HashBasedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",149,156,"/**
* Puts a value into the map for a given row and column key.
* @param rowKey key identifying the row
* @param columnKey key identifying the column within the row
* @param value value to be stored
* @return previous value associated with the key, or null if none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.StandardTable$Column:put(java.lang.Object,java.lang.Object)",466,469,"/**
 * Inserts or updates a value in the table.
 * @param key row key
 * @param value value to be inserted
 * @return previous value associated with the key, or null if none
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.StandardTable$Row:put(java.lang.Object,java.lang.Object)",357,365,"/**
 * Puts a key-value pair in the map.
 * @param key unique key
 * @param value associated value
 * @return previous value or null if not present
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowMap,com.google.common.collect.HashBasedTable:rowMap(),802,806,"/**
* Returns the row map, creating it if necessary.
* @return Map of rows to columns with values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowMap,com.google.common.collect.StandardRowSortedTable:rowMap(),85,88,"/**
* Returns a sorted map view of the table's rows.
* @return SortedMap where key is row key and value is column map
*/","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link
   * Table} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowKeySet,com.google.common.collect.StandardTable:rowKeySet(),665,668,"/**
 * Returns the set of all row keys.
 * @return Set containing all row keys
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedAsMap:containsValue(java.lang.Object),1430,1436,"/**
 * Checks if the map contains a specific value.
 * @param o the value to check for presence in the map
 * @return true if the map contains the value, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entrySet,com.google.common.collect.Synchronized$SynchronizedAsMap:entrySet(),1410,1418,"/**
 * Returns a synchronized set of entries.
 * @return Synchronized set of map entries
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:<init>(java.util.NavigableSet,java.lang.Object)",1465,1467,"/**
 * Creates a synchronized navigable set.
 * @param delegate the underlying navigable set
 * @param mutex the object to use as the lock; if null, this set itself is used
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sortedSet,"com.google.common.collect.Synchronized:sortedSet(java.util.SortedSet,java.lang.Object)",302,305,"/**
* Wraps a SortedSet with synchronization.
* @param set the SortedSet to wrap
* @param mutex object used for mutual exclusion
* @return synchronized SortedSet instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,add,com.google.common.collect.Synchronized$SynchronizedCollection:add(java.lang.Object),137,142,"/**
* Adds an element to the collection.
* @param e element to be added
* @return true if the element was successfully added, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addAll,com.google.common.collect.Synchronized$SynchronizedCollection:addAll(java.util.Collection),144,149,"/**
* Adds all elements from the specified collection.
* @param c collection containing elements to be added
* @return true if this collection changed as a result of the call
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedCollection:clear(),151,156,"/**
 * Clears all elements from the collection.
 * Synchronizes access using a mutex to ensure thread safety.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,contains,com.google.common.collect.Synchronized$SynchronizedCollection:contains(java.lang.Object),158,163,"/**
* Checks if the collection contains the specified element.
* @param o element to check for presence
* @return true if the element is present, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsAll,com.google.common.collect.Synchronized$SynchronizedCollection:containsAll(java.util.Collection),165,170,"/**
* Checks if this collection contains all elements of the specified collection.
* @param c collection to be checked for containment in this collection
* @return true if this collection contains all elements of the specified collection, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedCollection:isEmpty(),172,177,"/**
 * Checks if the collection is empty.
 * @return true if the collection has no elements, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,iterator,com.google.common.collect.Synchronized$SynchronizedCollection:iterator(),179,182,"/**
 * Returns an iterator over the elements of this collection.
 * Synchronization is handled manually.
 * @return Iterator over elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,spliterator,com.google.common.collect.Synchronized$SynchronizedCollection:spliterator(),184,189,"/**
 * Returns a thread-safe spliterator for the collection.
 * @return Spliterator object for the collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,stream,com.google.common.collect.Synchronized$SynchronizedCollection:stream(),191,196,"/**
 * Returns a stream of elements from the delegate collection.
 * Synchronized to ensure thread safety.
 * @return Stream of elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,parallelStream,com.google.common.collect.Synchronized$SynchronizedCollection:parallelStream(),198,203,"/**
* Returns a parallel stream of elements.
* Synchronized to ensure thread safety.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forEach,com.google.common.collect.Synchronized$SynchronizedCollection:forEach(java.util.function.Consumer),205,210,"/**
* Executes an action on each element.
* @param action consumer to perform on each element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedCollection:remove(java.lang.Object),212,217,"/**
* Removes an object from the collection.
* @param o object to be removed
* @return true if the object was present and removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedCollection:removeAll(java.util.Collection),219,224,"/**
* Removes all elements in the specified collection.
* @param c collection of elements to be removed
* @return true if any element was removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,retainAll,com.google.common.collect.Synchronized$SynchronizedCollection:retainAll(java.util.Collection),226,231,"/**
* Retains only elements contained in the specified collection.
* @param c collection containing elements to be retained
* @return true if this list changed as a result of the call
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeIf,com.google.common.collect.Synchronized$SynchronizedCollection:removeIf(java.util.function.Predicate),233,238,"/**
 * Removes elements matching the given predicate.
 * @param filter condition to identify elements to remove
 * @return true if any elements were removed
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedCollection:size(),240,245,"/**
 * Returns the size of the collection.
 * Synchronized to ensure thread safety.
 * @return number of elements in the collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedCollection:toArray(),247,252,"/**
* Returns an array containing all elements.
* Synchronizes on mutex to ensure thread safety.
* @return array of elements or empty array if none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedCollection:toArray(java.lang.Object[]),254,260,"/**
* Converts the collection to an array.
* @param a target array or null for a new array
* @return array containing all elements of the collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedList:delegate(),375,378,"/**
 * Delegates to superclass and casts result to generic list.
 * @return List of elements of type E
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedMultiset:delegate(),506,509,"/**
 * Returns the delegate multiset.
 * @return the delegate Multiset object
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedQueue:delegate(),1852,1855,"/**
 * Returns the delegate queue.
 * @return the underlying queue implementation
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSet:delegate(),277,280,"/**
 * Delegates to the superclass for set operations.
 * @return Set of elements from the superclass
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedEntry:equals(java.lang.Object),1803,1808,"/**
* Checks equality with another object.
* @param obj object to compare
* @return true if equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedEntry:hashCode(),1810,1815,"/**
 * Returns the hash code of the delegate.
 * Synchronized to ensure thread safety.
 * @return int hash code
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getKey,com.google.common.collect.Synchronized$SynchronizedEntry:getKey(),1817,1822,"/**
 * Retrieves the key from the delegate.
 * Synchronized to ensure thread safety.
 * @return the key object
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getValue,com.google.common.collect.Synchronized$SynchronizedEntry:getValue(),1824,1829,"/**
 * Retrieves value safely with synchronization.
 * @return the current value from the delegate
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setValue,com.google.common.collect.Synchronized$SynchronizedEntry:setValue(java.lang.Object),1831,1836,"/**
* Sets the value of this entry.
* @param value new value to be set
* @return old value associated with the entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedBiMap:delegate(),1358,1361,"/**
 * Returns the delegate map.
 * @return BiMap instance representing the delegate
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedMap:clear(),1078,1083,"/**
 * Clears all elements from the collection.
 * Synchronized to ensure thread safety.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsKey,com.google.common.collect.Synchronized$SynchronizedMap:containsKey(java.lang.Object),1085,1090,"/**
* Checks if map contains specified key.
* @param key key to check
* @return true if key is present, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedMap:containsValue(java.lang.Object),1092,1097,"/**
 * Checks if the map contains the specified value.
 * @param value the value to check for presence in the map
 * @return true if the map contains the value, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entrySet,com.google.common.collect.Synchronized$SynchronizedMap:entrySet(),1099,1107,"/**
* Returns a synchronized set view of the map's entries.
* @return Set of Map.Entry objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forEach,com.google.common.collect.Synchronized$SynchronizedMap:forEach(java.util.function.BiConsumer),1109,1114,"/**
* Executes an action on each key-value pair in the map.
* @param action the action to be performed on each entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedMap:get(java.lang.Object),1116,1121,"/**
 * Retrieves value by key.
 * @param key unique identifier for the value
 * @return value associated with the key or null if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getOrDefault,"com.google.common.collect.Synchronized$SynchronizedMap:getOrDefault(java.lang.Object,java.lang.Object)",1123,1128,"/**
* Retrieves value for given key or returns default if not found.
* @param key the key whose associated value is to be returned
* @param defaultValue the value to return if no mapping of the key exists
* @return the value associated with the key, or the default value if not present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedMap:isEmpty(),1130,1135,"/**
 * Checks if the collection is empty.
 * @return true if no elements present, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keySet,com.google.common.collect.Synchronized$SynchronizedMap:keySet(),1137,1145,"/**
* Returns a thread-safe set of keys.
* @return Set of keys from the delegate collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,put,"com.google.common.collect.Synchronized$SynchronizedMap:put(java.lang.Object,java.lang.Object)",1147,1152,"/**
* Puts a key-value pair into the map.
* @param key unique key for the entry
* @param value value to be associated with the key
* @return previous value associated with the key or null if none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putIfAbsent,"com.google.common.collect.Synchronized$SynchronizedMap:putIfAbsent(java.lang.Object,java.lang.Object)",1154,1159,"/**
 * Puts a value if absent.
 * @param key key with which the specified value is to be associated
 * @param value value to be associated with the specified key
 * @return existing value or null if put was successful
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replace,"com.google.common.collect.Synchronized$SynchronizedMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)",1161,1166,"/**
* Atomically replaces value if current value matches old value.
* @param key key with which the specified value is associated
* @param oldValue expected to be replaced value
* @param newValue new value to associate with the specified key
* @return true if value was replaced, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replace,"com.google.common.collect.Synchronized$SynchronizedMap:replace(java.lang.Object,java.lang.Object)",1168,1173,"/**
 * Replaces the value for a specified key.
 * @param key   the key whose associated value is to be replaced
 * @param value the new value to associate with the key
 * @return the old value if replaced, or null if not present
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,computeIfAbsent,"com.google.common.collect.Synchronized$SynchronizedMap:computeIfAbsent(java.lang.Object,java.util.function.Function)",1175,1180,"/**
 * Computes value for key if absent.
 * @param key key with which the specified value is to be associated
 * @param mappingFunction function computing value if key is not present
 * @return computed value or existing value
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,computeIfPresent,"com.google.common.collect.Synchronized$SynchronizedMap:computeIfPresent(java.lang.Object,java.util.function.BiFunction)",1182,1189,"/**
* Computes a new value for the specified key if it is present.
* @param key the key to compute a value for
* @param remappingFunction the function to compute a new value
* @return the updated value or null if no such key exists
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,compute,"com.google.common.collect.Synchronized$SynchronizedMap:compute(java.lang.Object,java.util.function.BiFunction)",1191,1198,"/**
 * Computes a value for the given key using the provided function.
 * @param key the key to compute the value for
 * @param remappingFunction the function to apply to the key and current value
 * @return the new value associated with the key, or null if none
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,merge,"com.google.common.collect.Synchronized$SynchronizedMap:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)",1200,1210,"/**
 * Merges a key-value pair using a remapping function.
 * @param key the key to merge
 * @param value the non-null value to merge
 * @param remappingFunction function to resolve conflicts
 * @return merged value or null if no mapping exists
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,com.google.common.collect.Synchronized$SynchronizedMap:putAll(java.util.Map),1212,1217,"/**
* Adds all entries from the specified map to this map.
* @param map the map whose entries are to be added
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceAll,com.google.common.collect.Synchronized$SynchronizedMap:replaceAll(java.util.function.BiFunction),1219,1224,"/**
 * Replaces each value in this map with the result of applying a given function.
 * @param function a mapping function to apply to each key-value pair
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedMap:remove(java.lang.Object),1226,1231,"/**
* Removes an entry by key.
* @param key the key to remove
* @return the removed value, or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedMap:remove(java.lang.Object,java.lang.Object)",1233,1238,"/**
* Removes entry by key and value if present.
* @param key   key of the entry to remove
* @param value value of the entry to remove
* @return true if removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedMap:size(),1240,1245,"/**
 * Returns the size of the collection.
 * Synchronized to ensure thread safety.
 * @return number of elements in the collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedMap:values(),1247,1255,"/**
 * Returns a collection of all values in the map.
 * Synchronizes on a mutex to ensure thread safety.
 * @return Collection containing all values
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedMap:equals(java.lang.Object),1257,1265,"/**
* Checks equality with another object.
* @param o the object to compare with
* @return true if equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedMap:hashCode(),1267,1272,"/**
 * Returns the hash code of the delegate object.
 * Synchronized to ensure thread safety.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSortedMap:delegate(),1289,1292,"/**
 * Returns the sorted map delegate.
 * @return SortedMap instance
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedListMultimap:delegate(),797,800,"/**
 * Returns the delegate ListMultimap.
 * @return The delegate ListMultimap instance
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedMultimap:size(),612,617,"/**
 * Returns the number of elements in the collection.
 * Synchronized to ensure thread safety.
 * @return size of the collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedMultimap:isEmpty(),619,624,"/**
 * Checks if the collection is empty.
 * @return true if no elements present, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsKey,com.google.common.collect.Synchronized$SynchronizedMultimap:containsKey(java.lang.Object),626,631,"/**
 * Checks if the map contains the specified key.
 * @param key key to be checked
 * @return true if the map contains the key, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedMultimap:containsValue(java.lang.Object),633,638,"/**
* Checks if map contains specified value.
* @param value to search for in the map
* @return true if value is found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsEntry,"com.google.common.collect.Synchronized$SynchronizedMultimap:containsEntry(java.lang.Object,java.lang.Object)",640,645,"/**
* Checks if map contains entry with specified key and value.
* @param key the key to search for
* @param value the value to search for
* @return true if entry exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedMultimap:get(java.lang.Object),647,652,"/**
* Retrieves values associated with a key.
* @param key the key to look up
* @return collection of values or empty if key not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,put,"com.google.common.collect.Synchronized$SynchronizedMultimap:put(java.lang.Object,java.lang.Object)",654,659,"/**
* Adds or updates an entry in the map.
* @param key the key to store the value under
* @param value the value to be stored
* @return true if the value was added or updated, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,"com.google.common.collect.Synchronized$SynchronizedMultimap:putAll(java.lang.Object,java.lang.Iterable)",661,666,"/**
 * Adds all values to the specified key.
 * @param key key to associate with values
 * @param values iterable of values to add
 * @return true if this map was modified as a result
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,com.google.common.collect.Synchronized$SynchronizedMultimap:putAll(com.google.common.collect.Multimap),668,673,"/**
 * Adds all entries from the given multimap.
 * @param multimap source of entries to add
 * @return true if any modifications were made, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",675,680,"/**
* Replaces all values for a given key with new values.
* @param key the key whose associated values are to be replaced
* @param values the iterable of new values to associate with the key
* @return the previous collection of values associated with the key
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedMultimap:remove(java.lang.Object,java.lang.Object)",682,687,"/**
 * Removes entry by key and value.
 * @param key key of the entry to be removed
 * @param value value of the entry to be removed
 * @return true if removal was successful, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedMultimap:removeAll(java.lang.Object),689,694,"/**
* Removes all values associated with the specified key.
* @param key the key to remove values for
* @return a collection of removed values or empty if none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedMultimap:clear(),696,701,"/**
 * Clears all elements from the collection.
 * Synchronizes access using a mutex to ensure thread safety.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keySet,com.google.common.collect.Synchronized$SynchronizedMultimap:keySet(),703,711,"/**
 * Returns a set of keys.
 * @return Set of keys from the delegate
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedMultimap:values(),713,721,"/**
 * Returns a collection of values.
 * @return Collection containing all values in the map
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entries,com.google.common.collect.Synchronized$SynchronizedMultimap:entries(),723,731,"/**
* Returns a collection of map entries.
* @return Collection of Map.Entry objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forEach,com.google.common.collect.Synchronized$SynchronizedMultimap:forEach(java.util.function.BiConsumer),733,738,"/**
* Executes an action for each key-value pair in the map.
* @param action BiConsumer that defines the action to be performed on each entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedMultimap:equals(java.lang.Object),760,770,"/**
* Checks equality with another object.
* @param o the object to compare with
* @return true if equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedMultimap:hashCode(),772,777,"/**
 * Returns the hash code of the delegate object.
 * Synchronized to ensure thread safety.
 * @return hash code of the delegate
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSetMultimap:delegate(),842,845,"/**
* Returns the delegate multimap.
* @return SetMultimap instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,contains,"com.google.common.collect.Synchronized$SynchronizedTable:contains(java.lang.Object,java.lang.Object)",2052,2057,"/**
* Checks if the table contains a specific cell.
* @param rowKey key of the row to check
* @param columnKey key of the column to check
* @return true if the cell exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsRow,com.google.common.collect.Synchronized$SynchronizedTable:containsRow(java.lang.Object),2059,2064,"/**
* Checks if the table contains a row with the specified key.
* @param rowKey the key of the row to check
* @return true if the row exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsColumn,com.google.common.collect.Synchronized$SynchronizedTable:containsColumn(java.lang.Object),2066,2071,"/**
 * Checks if the specified column is present.
 * @param columnKey key of the column to check
 * @return true if column exists, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedTable:containsValue(java.lang.Object),2073,2078,"/**
* Checks if the map contains a specific value.
* @param value the value to search for
* @return true if the value is found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,"com.google.common.collect.Synchronized$SynchronizedTable:get(java.lang.Object,java.lang.Object)",2080,2085,"/**
 * Retrieves value by row and column keys.
 * @param rowKey key for the row
 * @param columnKey key for the column
 * @return value associated with the keys or null if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedTable:isEmpty(),2087,2092,"/**
 * Checks if the collection is empty.
 * @return true if no elements are present, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedTable:size(),2094,2099,"/**
 * Returns the size of the collection.
 * Synchronized to ensure thread safety.
 * @return size of the collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedTable:clear(),2101,2106,"/**
 * Clears all elements from the collection.
 * Synchronized to ensure thread safety.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,put,"com.google.common.collect.Synchronized$SynchronizedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",2108,2116,"/**
 * Puts a value in the map for the specified keys.
 * @param rowKey key identifying the row
 * @param columnKey key identifying the column
 * @param value value to be stored
 * @return previous value associated with the keys or null if none
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,com.google.common.collect.Synchronized$SynchronizedTable:putAll(com.google.common.collect.Table),2118,2123,"/**
 * Adds all entries from the specified table to this table.
 * Synchronized on mutex for thread safety.
 * @param table the table whose mappings are to be added
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedTable:remove(java.lang.Object,java.lang.Object)",2125,2130,"/**
* Removes and returns the value associated with the specified keys.
* @param rowKey key identifying the row
* @param columnKey key identifying the column
* @return removed value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,cellSet,com.google.common.collect.Synchronized$SynchronizedTable:cellSet(),2146,2151,"/**
* Returns a thread-safe set of cells.
* @return Set of Cell objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,rowKeySet,com.google.common.collect.Synchronized$SynchronizedTable:rowKeySet(),2153,2158,"/**
* Returns a synchronized set of row keys.
* @return Synchronized set containing all row keys
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,columnKeySet,com.google.common.collect.Synchronized$SynchronizedTable:columnKeySet(),2160,2165,"/**
* Returns a synchronized set of column keys.
* @return Set containing column keys
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedTable:values(),2167,2172,"/**
* Returns a synchronized collection of values.
* @return Synchronized Collection of values from delegate
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedTable:hashCode(),2188,2193,"/**
 * Returns hash code of the delegate object.
 * Synchronized to ensure thread safety.
 * @return int hash code value
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedTable:equals(java.lang.Object),2195,2203,"/**
* Compares this object with another for equality.
* @param obj the reference object with which to compare
* @return true if objects are equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,deque,"com.google.common.collect.Synchronized:deque(java.util.Deque,java.lang.Object)",1895,1897,"/**
 * Wraps a deque with synchronization.
 * @param deque the original deque to wrap
 * @param mutex object used for locking (can be null)
 * @return synchronized Deque instance
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,synchronizedQueue,com.google.common.collect.Queues:synchronizedQueue(java.util.Queue),456,459,"/**
* Wraps a queue to make it thread-safe.
* @param queue the original queue to wrap
* @return a synchronized version of the queue
*/","* Returns a synchronized (thread-safe) queue backed by the specified queue. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing queue is accomplished
   * through the returned queue.
   *
   * <p>It is imperative that the user manually synchronize on the returned queue when accessing the
   * queue's iterator:
   *
   * {@snippet :
   * Queue<E> queue = Queues.synchronizedQueue(MinMaxPriorityQueue.<E>create());
   * ...
   * queue.add(element);  // Needn't be in synchronized block
   * ...
   * synchronized (queue) {  // Must synchronize on queue!
   *   Iterator<E> i = queue.iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned queue will be serializable if the specified queue is serializable.
   *
   * @param queue the queue to be wrapped in a synchronized view
   * @return a synchronized view of the specified queue
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,list,"com.google.common.collect.Synchronized:list(java.util.List,java.lang.Object)",363,367,"/**
* Wraps a list with synchronization.
* @param list the list to be wrapped
* @param mutex object used for locking
* @return synchronized List instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keys,com.google.common.collect.Synchronized$SynchronizedMultimap:keys(),750,758,"/**
* Returns a synchronized multiset of keys.
* @return Synchronized Multiset of keys
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowKeySet,com.google.common.collect.Tables$UnmodifiableRowSortedMap:rowKeySet(),662,665,"/**
 * Returns an unmodifiable view of the row key set.
 * @return SortedSet containing all row keys
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,compare,"com.google.common.collect.TreeBasedTable$TreeRow:compare(java.lang.Object,java.lang.Object)",212,217,"/**
 * Compares two objects using a predefined comparator.
 * @param a first object to compare
 * @param b second object to compare
 * @return comparison result as an integer
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,recompute,com.google.common.collect.TreeMultiset$AvlNode:recompute(),945,948,"/**
 * Recomputes multiset and height.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,aggregateBelowRange,"com.google.common.collect.TreeMultiset:aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)",178,201,"/**
* Aggregates values below the specified range.
* @param aggr Aggregate object for calculations
* @param node current node in the AVL tree
* @return aggregated value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,aggregateAboveRange,"com.google.common.collect.TreeMultiset:aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)",203,226,"/**
 * Aggregates values above a specified range.
 * @param aggr Aggregate object for performing aggregation
 * @param node Current AVL tree node to process
 * @return Aggregated value from nodes above the range
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedCharEscaper.java,<init>,"com.google.common.escape.ArrayBasedCharEscaper:<init>(com.google.common.escape.ArrayBasedEscaperMap,char,char)",84,97,"/**
* Initializes escaper with given map and safe character range.
* @param escaperMap mapping of characters to their replacements
* @param safeMin minimum safe character in the range
* @param safeMax maximum safe character in the range
*/","* Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe
   * range. If {@code safeMax < safeMin} then no characters are considered safe. This initializer is
   * useful when explicit instances of ArrayBasedEscaperMap are used to allow the sharing of large
   * replacement mappings.
   *
   * <p>If a character has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param escaperMap the mapping of characters to be escaped
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,<init>,com.google.common.escape.CharEscaperBuilder$CharArrayDecorator:<init>(char[][]),45,48,"/**
* Initializes decorator with character array replacements.
* @param replacements 2D array of characters to replace
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,<init>,com.google.common.escape.Escapers$1:<init>(),34,34,"/**
 * Private constructor to prevent instantiation of utility class.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedUnicodeEscaper.java,<init>,"com.google.common.escape.ArrayBasedUnicodeEscaper:<init>(com.google.common.escape.ArrayBasedEscaperMap,int,int,java.lang.String)",95,136,"/**
* Initializes a Unicode escaper based on a given map and safety range.
* @param escaperMap mapping of characters to their replacements
* @param safeMin minimum code point considered safe
* @param safeMax maximum code point considered safe
* @param unsafeReplacement default replacement for unsafe characters
*/","* Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified
   * safe range. If {@code safeMax < safeMin} then no code points are considered safe. This
   * initializer is useful when explicit instances of ArrayBasedEscaperMap are used to allow the
   * sharing of large replacement mappings.
   *
   * <p>If a code point has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param escaperMap the map of replacements
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range
   * @param unsafeReplacement the default replacement for unsafe characters or null if no default
   *     replacement is required",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/PercentEscaper.java,<init>,"com.google.common.net.PercentEscaper:<init>(java.lang.String,boolean)",85,103,"/**
* Constructs a PercentEscaper with specified safe characters and space handling.
* @param safeChars characters to be considered safe
* @param plusForSpace whether to encode spaces as '+'
*/","* Constructs a percent escaper with the specified safe characters and optional handling of the
   * space character.
   *
   * <p>Not that it is allowed, but not necessarily desirable to specify {@code %} as a safe
   * character. This has the effect of creating an escaper which has no well-defined inverse but it
   * can be useful when escaping additional characters.
   *
   * @param safeChars a non-null string specifying additional safe characters for this escaper (the
   *     ranges 0..9, a..z and A..Z are always safe and should not be specified here)
   * @param plusForSpace true if ASCII space should be escaped to {@code +} rather than {@code %20}
   * @throws IllegalArgumentException if any of the parameters were invalid",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaper.java,escape,com.google.common.escape.CharEscaper:escape(java.lang.String),55,66,"/**
* Escapes special characters in a string.
* @param string input string to be escaped
* @return escaped string or original if no escaping is needed
*/","* Returns the escaped form of a given literal string.
   *
   * @param string the literal string to be escaped
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,handleException,"com.google.common.eventbus.EventBus$LoggingHandler:handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext)",278,284,"/**
* Logs severe exceptions with context.
* @param exception the Throwable to log
* @param context provides additional information about the exception
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,create,"com.google.common.eventbus.Subscriber:create(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)",38,42,"/**
* Creates a subscriber based on thread safety.
* @param bus event bus instance
* @param listener object listening to events
* @param method method to handle events
* @return Subscriber or SynchronizedSubscriber based on method's thread safety
*/",Creates a {@code Subscriber} for {@code method} on {@code listener}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,com.google.common.graph.AbstractGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),164,173,"/**
* Checks if an edge exists between two nodes.
* @param endpoints pair of nodes to check connection between
* @return true if edge exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,com.google.common.graph.AbstractValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),164,173,"/**
* Checks if there's an edge connecting two nodes.
* @param endpoints pair of nodes to check connection between
* @return true if edge exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,predecessors,com.google.common.graph.ImmutableGraph:predecessors(java.lang.Object),70,73,"/**
 * Returns predecessors of a given node.
 * @param node the node to find predecessors for
 * @return set of predecessor nodes
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,successors,com.google.common.graph.ImmutableGraph:successors(java.lang.Object),75,78,"/**
 * Retrieves successors of a given node.
 * @param node the current node
 * @return set of successor nodes
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,incidentNodes,com.google.common.graph.Graphs$TransposedNetwork:incidentNodes(java.lang.Object),463,467,"/**
 * Returns the nodes connected by an edge in a transposed network.
 * @param edge the edge connecting the nodes
 * @return EndpointPair of nodes with reversed order
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,com.google.common.graph.Graphs$TransposedGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),350,353,"/**
* Checks if there's an edge connecting two endpoints.
* @param endpoints pair of endpoints to check
* @return true if an edge exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgesConnecting,com.google.common.graph.Graphs$TransposedNetwork:edgesConnecting(com.google.common.graph.EndpointPair),474,477,"/**
* Retrieves edges connecting given endpoints.
* @param endpoints pair of nodes defining the connection
* @return set of edges between the specified endpoints
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnecting,com.google.common.graph.Graphs$TransposedNetwork:edgeConnecting(com.google.common.graph.EndpointPair),484,487,"/**
 * Retrieves an edge connecting two nodes.
 * @param endpoints pair of nodes defining the edge
 * @return Optional containing the edge or empty if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnectingOrNull,com.google.common.graph.Graphs$TransposedNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair),494,497,"/**
* Retrieves an edge connecting the given endpoints or returns null.
* @param endpoints pair of nodes defining the edge
* @return the edge object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,com.google.common.graph.Graphs$TransposedNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair),504,507,"/**
* Checks if there's an edge connecting the given endpoints.
* @param endpoints pair of nodes to check connection between
* @return true if an edge exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,com.google.common.graph.Graphs$TransposedValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),395,398,"/**
* Checks if an edge connects the given endpoints.
* @param endpoints pair of nodes to check connection between
* @return true if an edge exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValue,com.google.common.graph.Graphs$TransposedValueGraph:edgeValue(com.google.common.graph.EndpointPair),405,408,"/**
* Retrieves edge value for given endpoints.
* @param endpoints pair of nodes defining an edge
* @return Optional containing edge value or empty if not present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValueOrDefault,"com.google.common.graph.Graphs$TransposedValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)",415,418,"/**
 * Retrieves edge value by transposed endpoints.
 * @param endpoints the original endpoint pair
 * @param defaultValue default value if edge not found
 * @return edge value or default value
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraph.java,equals,com.google.common.graph.AbstractGraph:equals(java.lang.Object),35,48,"/**
 * Compares this graph to another for equality.
 * @param obj the object to compare with
 * @return true if equal, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraph.java,hashCode,com.google.common.graph.AbstractGraph:hashCode(),50,53,"/**
 * Returns hash code based on edges.
 * @return hash code of edges collection
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraph.java,toString,com.google.common.graph.AbstractGraph:toString(),56,66,"/**
* Returns a string representation of the graph.
* @return String containing graph properties and elements
*/",Returns a string representation of this graph.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractNetwork$1:edges(),66,99,"/**
* Returns a set of edges in the graph.
* @return Set of EndpointPair representing edges
*/","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractValueGraph$1:edges(),66,99,"/**
 * Returns a set of edges in the graph.
 * @return Set of EndpointPair representing edges
 */","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,containsEdge,com.google.common.graph.StandardNetwork:containsEdge(java.lang.Object),200,202,"/**
 * Checks if an edge exists in the graph.
 * @param edge the edge to check
 * @return true if the edge is present, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edges,com.google.common.graph.ImmutableNetwork:edges(),100,103,"/**
 * Returns an unmodifiable set of all edges.
 * @return Set of edges
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,get,com.google.common.graph.MapRetrievalCache:get(java.lang.Object),39,53,"/**
 * Retrieves value by key, caching result for future access.
 * @param key unique identifier for the value
 * @return value associated with the key or null if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,inTree,com.google.common.graph.Traverser$Traversal:inTree(com.google.common.graph.SuccessorsFunction),395,407,"/**
* Creates a traversal for a tree structure.
* @param tree function to get successors of a node
* @return Traversal object for the tree
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,removeInEdge,"com.google.common.graph.UndirectedMultiNetworkConnections:removeInEdge(java.lang.Object,boolean)",84,90,"/**
* Removes an incoming edge.
* @param edge the edge to remove
* @param isSelfLoop true if edge is a self-loop
* @return removed node or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putBytes,com.google.common.hash.AbstractByteHasher:putBytes(byte[]),82,88,"/**
 * Adds byte array to hash computation.
 * @param bytes input byte array
 * @return current Hasher instance for chaining
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putBytes,com.google.common.hash.AbstractByteHasher:putBytes(java.nio.ByteBuffer),98,103,"/**
* Updates hasher with byte buffer content.
* @param bytes ByteBuffer containing data to hash
* @return current Hasher instance for chaining
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putShort,com.google.common.hash.AbstractByteHasher:putShort(short),105,110,"/**
 * Adds a short value to the hash.
 * @param s short value to add
 * @return this Hasher instance for chaining
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putInt,com.google.common.hash.AbstractByteHasher:putInt(int),112,117,"/**
* Adds an integer to the hash computation.
* @param i the integer to add
* @return this Hasher instance for method chaining
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putLong,com.google.common.hash.AbstractByteHasher:putLong(long),119,124,"/**
 * Adds a long value to the hash.
 * @param l the long value to add
 * @return this Hasher instance
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putChar,com.google.common.hash.AbstractByteHasher:putChar(char),126,131,"/**
 * Adds a character to the hash.
 * @param c character to add
 * @return this hasher instance
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putDouble,com.google.common.hash.Hasher:putDouble(double),92,94,"/**
 * Adds a double value to the hash.
 * @param d the double value to add
 * @return this Hasher instance
 */",Equivalent to {@code putLong(Double.doubleToRawLongBits(d))}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putLong,com.google.common.hash.AbstractCompositeHashFunction$1:putLong(long),82,84,"/**
 * Adds a long value to the hash.
 * @param l the long value to add
 * @return this Hasher instance
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashLong,com.google.common.hash.AbstractHashFunction:hashLong(long),54,57,"/**
* Generates a hash code for a long value.
* @param input the long value to hash
* @return HashCode object representing the hash
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putChar,com.google.common.hash.AbstractCompositeHashFunction$1:putChar(char),101,103,"/**
 * Adds a character to the hash.
 * @param c character to be added
 * @return this Hasher instance
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,hash,com.google.common.hash.AbstractStreamingHasher:hash(),186,195,"/**
* Generates a hash code using the current state of the buffer.
* @return HashCode object representing the computed hash
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,munchIfFull,com.google.common.hash.AbstractStreamingHasher:munchIfFull(),205,210,"/**
 * Processes the buffer if it's nearly full.
 * @param none
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,writeReplace,com.google.common.hash.BloomFilter:writeReplace(),557,559,"/**
 * Replaces this object with a Serialized form during serialization.
 * @return SerialForm instance representing this object
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,equals,com.google.common.hash.BloomFilter:equals(java.lang.Object),301,314,"/**
* Checks equality with another BloomFilter.
* @param object the object to compare
* @return true if equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,toBloomFilter,"com.google.common.hash.BloomFilter:toBloomFilter(com.google.common.hash.Funnel,long)",342,345,"/**
* Creates a Bloom filter collector.
* @param funnel defines how objects are converted to byte arrays
* @param expectedInsertions estimated number of insertions
* @return Collector for creating a BloomFilter
*/","* Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link
   * BloomFilter} with false positive probability 3%.
   *
   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the
   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive
   * probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements
   * @since 23.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,expectedFpp,com.google.common.hash.BloomFilter:expectedFpp(),210,212,"/**
* Calculates expected false positive probability.
* @return Probability of a false positive
*/","* Returns the probability that {@linkplain #mightContain(Object)} will erroneously return {@code
   * true} for an object that has not actually been put in the {@code BloomFilter}.
   *
   * <p>Ideally, this number should be close to the {@code fpp} parameter passed in {@linkplain
   * #create(Funnel, int, double)}, or smaller. If it is significantly higher, it is usually the
   * case that too many elements (more than expected) have been put in the {@code BloomFilter},
   * degenerating it.
   *
   * @since 14.0 (since 11.0 as expectedFalsePositiveProbability())",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,isCompatible,com.google.common.hash.BloomFilter:isCompatible(com.google.common.hash.BloomFilter),257,264,"/**
 * Checks if two BloomFilters are compatible.
 * @param that the other BloomFilter to compare with
 * @return true if they have the same number of hash functions, bit size, strategy, and funnel
 */","* Determines whether a given Bloom filter is compatible with this Bloom filter. For two Bloom
   * filters to be compatible, they must:
   *
   * <ul>
   *   <li>not be the same instance
   *   <li>have the same number of hash functions
   *   <li>have the same bit size
   *   <li>have the same strategy
   *   <li>have equal funnels
   * </ul>
   *
   * @param that The Bloom filter to check for compatibility.
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,compare,"com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator:compare(byte[],byte[])",424,434,"/**
* Compares two byte arrays lexicographically.
* @param left first byte array to compare
* @param right second byte array to compare
* @return negative if left is less, positive if greater, zero if equal
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,toString,com.google.common.primitives.UnsignedBytes:toString(byte),180,182,"/**
 * Converts a byte to its string representation in base 10.
 * @param x the byte value to convert
 * @return string representation of the byte
 */","* Returns a string representation of x, where x is treated as unsigned.
   *
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,putAll,com.google.common.hash.BloomFilter:putAll(com.google.common.hash.BloomFilter),275,299,"/**
 * Merges another BloomFilter into this one.
 * @param that the other BloomFilter to merge
 */","* Combines this Bloom filter with another Bloom filter by performing a bitwise OR of the
   * underlying data. The mutations happen to <b>this</b> instance. Callers must ensure the Bloom
   * filters are appropriately sized to avoid saturating them.
   *
   * @param that The Bloom filter to combine this Bloom filter with. It is not mutated.
   * @throws IllegalArgumentException if {@code isCompatible(that) == false}
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength65Plus,"com.google.common.hash.FarmHashFingerprint64:hashLength65Plus(byte[],int,int)",171,215,"/**
* Computes a hash for byte array of length > 64.
* @param bytes input byte array
* @param offset starting index in the byte array
* @param length number of bytes to process
* @return 64-bit hash value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,fullFingerprint,"com.google.common.hash.Fingerprint2011:fullFingerprint(byte[],int,int)",115,146,"/**
* Computes a full fingerprint for a byte array.
* @param bytes input data
* @param offset starting index in the byte array
* @param length number of bytes to process
* @return long hash value representing the fingerprint
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromBytesNoCopy,com.google.common.hash.HashCode:fromBytesNoCopy(byte[]),246,248,"/**
 * Creates a HashCode instance from byte array without copying.
 * @param bytes source byte array
 * @return HashCode object using provided bytes
 */","* Creates a {@code HashCode} from a byte array. The array is <i>not</i> copied defensively, so it
   * must be handed-off so as to preserve the immutability contract of {@code HashCode}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromInt,com.google.common.hash.HashCode:fromInt(int),114,116,"/**
 * Creates a HashCode object from an integer.
 * @param hash the integer value to convert
 * @return a HashCode instance representing the given integer
 */","* Creates a 32-bit {@code HashCode} representation of the given int value. The underlying bytes
   * are interpreted in little endian order.
   *
   * @since 15.0 (since 12.0 in HashCodes)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromLong,com.google.common.hash.HashCode:fromLong(long),171,173,"/**
 * Creates a HashCode instance from a long value.
 * @param hash long integer to be converted into a HashCode
 * @return HashCode object representing the given long value
 */","* Creates a 64-bit {@code HashCode} representation of the given long value. The underlying bytes
   * are interpreted in little endian order.
   *
   * @since 15.0 (since 12.0 in HashCodes)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,floatValue,com.google.common.primitives.UnsignedInteger:floatValue(),195,198,"/**
 * Returns the float value of the number.
 * @return float representation of the number
 */","* Returns the value of this {@code UnsignedInteger} as a {@code float}, analogous to a widening
   * primitive conversion from {@code int} to {@code float}, and correctly rounded.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,doubleValue,com.google.common.primitives.UnsignedInteger:doubleValue(),204,207,"/**
 * Returns the numeric value of this BigDecimal as a double.
 * @return the numeric value represented by this BigDecimal as a double
 */","* Returns the value of this {@code UnsignedInteger} as a {@code double}, analogous to a widening
   * primitive conversion from {@code int} to {@code double}, and correctly rounded.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,bigIntegerValue,com.google.common.primitives.UnsignedInteger:bigIntegerValue(),210,212,"/**
 * Converts the value to a BigInteger.
 * @return BigInteger representation of the value
 */",Returns the value of this {@code UnsignedInteger} as a {@link BigInteger}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,goodFastHash,com.google.common.hash.Hashing:goodFastHash(int),69,89,"/**
* Generates a fast hash function with specified minimum bits.
* @param minimumBits the desired bit length of the hash
* @return HashFunction instance capable of generating the required bit length
*/","* Returns a general-purpose, <b>temporary-use</b>, non-cryptographic hash function. The algorithm
   * the returned function implements is unspecified and subject to change without notice.
   *
   * <p><b>Warning:</b> a new random seed for these functions is chosen each time the {@code
   * Hashing} class is loaded. <b>Do not use this method</b> if hash codes may escape the current
   * process in any way, for example being sent over RPC, or saved to disk. For a general-purpose,
   * non-cryptographic hash function that will never change behavior, we suggest {@link
   * #murmur3_128}.
   *
   * <p>Repeated calls to this method on the same loaded {@code Hashing} class, using the same value
   * for {@code minimumBits}, will return identically-behaving {@link HashFunction} instances.
   *
   * @param minimumBits a positive integer. This can be arbitrarily large. The returned {@link
   *     HashFunction} instance may use memory proportional to this integer.
   * @return a hash function, described above, that produces hash codes of length {@code
   *     minimumBits} or greater",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,consistentHash,"com.google.common.hash.Hashing:consistentHash(com.google.common.hash.HashCode,int)",638,640,"/**
 * Computes consistent hash value for given hash code and number of buckets.
 * @param hashCode input hash code
 * @param buckets number of buckets to distribute into
 * @return index of the bucket
 */","* Assigns to {@code hashCode} a ""bucket"" in the range {@code [0, buckets)}, in a uniform manner
   * that minimizes the need for remapping as {@code buckets} grows. That is, {@code
   * consistentHash(h, n)} equals:
   *
   * <ul>
   *   <li>{@code n - 1}, with approximate probability {@code 1/n}
   *   <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})
   * </ul>
   *
   * <p>This method is suitable for the common use case of dividing work among buckets that meet the
   * following conditions:
   *
   * <ul>
   *   <li>You want to assign the same fraction of inputs to each bucket.
   *   <li>When you reduce the number of buckets, you can accept that the most recently added
   *       buckets will be removed first. More concretely, if you are dividing traffic among tasks,
   *       you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and
   *       {@code consistentHash} will handle it. If, however, you are dividing traffic among
   *       servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to
   *       take each of the servers offline, {@code consistentHash} will be a poor fit: It provides
   *       no way for you to specify which of the three buckets is disappearing. Thus, if your
   *       buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will
   *       assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo}
   *       traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic.
   * </ul>
   *
   * <p>See the <a href=""http://en.wikipedia.org/wiki/Consistent_hashing"">Wikipedia article on
   * consistent hashing</a> for more information.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacMd5,com.google.common.hash.Hashing:hmacMd5(java.security.Key),302,304,"/**
* Creates an HMAC MD5 hash function.
* @param key secret key for HMAC
* @return HashFunction instance using HMAC MD5 algorithm
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * MD5 (128 hash bits) hash function and the given secret key.
   *
   * <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other
   * future-proof algorithms <a
   * href=""https://datatracker.ietf.org/doc/html/rfc6151#section-2.3"">over {@code hmacMd5}</a>.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha1,com.google.common.hash.Hashing:hmacSha1(java.security.Key),330,332,"/**
* Creates an HMAC-SHA1 hash function.
* @param key secret key for HMAC computation
* @return HashFunction instance configured with HmacSHA1 algorithm
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-1 (160 hash bits) hash function and the given secret key.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha256,com.google.common.hash.Hashing:hmacSha256(java.security.Key),354,356,"/**
* Creates an HMAC-SHA256 hash function.
* @param key secret key for HMAC calculation
* @return HashFunction instance using HMAC-SHA256 algorithm
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-256 (256 hash bits) hash function and the given secret key.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha512,com.google.common.hash.Hashing:hmacSha512(java.security.Key),378,380,"/**
* Creates an HMAC-SHA-512 hash function.
* @param key secret key for HMAC
* @return HashFunction instance using HMAC-SHA-512
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-512 (512 hash bits) hash function and the given secret key.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,readResolve,com.google.common.hash.MessageDigestHashFunction$SerializedForm:readResolve(),113,115,"/**
 * Replaces deserialized instance with a new one.
 * @return new MessageDigestHashFunction instance
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,process,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:process(java.nio.ByteBuffer),102,108,"/**
 * Processes a chunk of data from ByteBuffer.
 * Reads two longs and mixes them using bmix64.
 * Increments length by CHUNK_SIZE.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putBytes,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putBytes(java.nio.ByteBuffer),316,329,"/**
 * Puts bytes from ByteBuffer into the hash.
 * @param buffer source ByteBuffer with data to hash
 * @return current Hasher instance for chaining
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,process,com.google.common.hash.SipHashFunction$SipHasher:process(java.nio.ByteBuffer),131,135,"/**
 * Processes a chunk of data from the buffer.
 * @param buffer input ByteBuffer containing data
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,com.google.common.io.ByteSource$ByteArrayByteSource:<init>(byte[]),569,571,"/**
 * Constructor initializes with byte array.
 * @param bytes source byte array
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,slice,"com.google.common.io.ByteSource$ByteArrayByteSource:slice(long,long)",629,638,"/**
 * Slices the byte source from a specified offset and length.
 * @param offset starting position for slicing
 * @param length number of bytes to slice
 * @return ByteSource representing the sliced data
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,concat,com.google.common.io.ByteSource:concat(java.lang.Iterable),374,376,"/**
* Combines multiple ByteSources into one.
* @param sources iterable collection of ByteSource objects
* @return a single ByteSource containing all input data concatenated
*/","* Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * @param sources the sources to concatenate
   * @return a {@code ByteSource} containing the concatenated data
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeTo,"com.google.common.io.BaseEncoding$Base16Encoding:decodeTo(byte[],java.lang.CharSequence)",978,990,"/**
 * Decodes a CharSequence to a byte array.
 * @param target byte array to store the decoded data
 * @param chars input character sequence to decode
 * @return number of bytes written to target
 * @throws DecodingException if input length is odd or invalid characters are found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeTo,"com.google.common.io.BaseEncoding$Base64Encoding:decodeTo(byte[],java.lang.CharSequence)",1025,1047,"/**
 * Decodes a CharSequence to a byte array using a specified alphabet.
 * @param target the target byte array for decoded data
 * @param chars the input CharSequence to decode
 * @return number of bytes written to the target array
 * @throws DecodingException if input is invalid or decoding fails
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeTo,"com.google.common.io.BaseEncoding$StandardBaseEncoding:decodeTo(byte[],java.lang.CharSequence)",753,776,"/**
 * Decodes a CharSequence to a byte array.
 * @param target destination byte array
 * @param chars input character sequence to decode
 * @return number of bytes written to the target array
 * @throws DecodingException if decoding fails due to invalid input length or characters
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,withSeparator,"com.google.common.io.BaseEncoding$StandardBaseEncoding:withSeparator(java.lang.String,int)",866,881,"/**
* Returns a new encoding with a specified separator.
* @param separator string to insert between encoded groups
* @param afterEveryChars number of characters after which to insert the separator
* @return new BaseEncoding instance with separator
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,com.google.common.io.BaseEncoding$Base16Encoding:<init>(com.google.common.io.BaseEncoding$Alphabet),958,965,"/**
 * Initializes Base16Encoding with a specified alphabet.
 * @param alphabet the character set for encoding
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Base64Encoding:<init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",1003,1006,"/**
 * Initializes Base64 encoding with specified alphabet and padding character.
 * @param alphabet the base64 character set
 * @param paddingChar optional padding character for encoding
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,newInstance,"com.google.common.io.BaseEncoding$StandardBaseEncoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",917,919,"/**
* Creates a new instance of BaseEncoding.
* @param alphabet character set used for encoding
* @param paddingChar optional padding character
* @return new BaseEncoding instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$StringCharSource:<init>(java.lang.String),642,644,"/**
 * Constructs a new StringCharSource from a given sequence.
 * @param seq the input string sequence
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,concat,com.google.common.io.CharSource:concat(java.lang.Iterable),443,445,"/**
 * Combines multiple CharSources into one.
 * @param sources iterable of CharSource objects
 * @return a single CharSource that concatenates all inputs
 */","* Concatenates multiple {@link CharSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * @param sources the sources to concatenate
   * @return a {@code CharSource} containing the concatenated data
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataInput,com.google.common.io.ByteStreams:newDataInput(byte[]),304,307,"/**
* Creates a ByteArrayDataInput from byte array.
* @param bytes input data as byte array
* @return ByteArrayDataInput for reading data
*/","* Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array from the
   * beginning.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataOutput,com.google.common.io.ByteStreams:newDataOutput(),481,484,"/**
 * Creates a new ByteArrayDataOutput instance.
 * @return ByteArrayDataOutput object using a ByteArrayOutputStream
 */",Returns a new {@link ByteArrayDataOutput} instance with a default size.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataOutput,com.google.common.io.ByteStreams:newDataOutput(int),492,500,"/**
* Creates a ByteArrayDataOutput for writing bytes.
* @param size initial buffer size
* @return ByteArrayDataOutput instance
*/","* Returns a new {@link ByteArrayDataOutput} instance sized to hold {@code size} bytes before
   * resizing.
   *
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,<init>,"com.google.common.io.ReaderInputStream:<init>(java.io.Reader,java.nio.charset.Charset,int)",86,94,"/**
* Constructs an InputStream from a Reader using specified charset and buffer size.
* @param reader source of characters to read
* @param charset character encoding for the input stream
* @param bufferSize size of the internal buffer
*/","* Creates a new input stream that will encode the characters from {@code reader} into bytes using
   * the given character set. Malformed input and unmappable characters will be replaced.
   *
   * @param reader input source
   * @param charset character set used for encoding chars to bytes
   * @param bufferSize size of internal input and output buffers
   * @throws IllegalArgumentException if bufferSize is non-positive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,countBySkipping,com.google.common.io.ByteSource:countBySkipping(java.io.InputStream),232,239,"/**
* Counts total bytes skipped from input stream.
* @param in InputStream to read from
* @return Total bytes skipped
*/",Counts the bytes in the given input stream using skip if possible.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,skipFully,"com.google.common.io.ByteStreams:skipFully(java.io.InputStream,long)",830,836,"/**
* Skips exactly n bytes in the input stream.
* @param in InputStream to skip bytes from
* @param n number of bytes to skip
* @throws IOException if an I/O error occurs or end of stream is reached before skipping all bytes
*/","* Discards {@code n} bytes of data from the input stream. This method will block until the full
   * amount has been skipped. Does not close the stream.
   *
   * @param in the input stream to read from
   * @param n the number of bytes to skip
   * @throws EOFException if this stream reaches the end before skipping all the bytes
   * @throws IOException if an I/O error occurs, or the stream does not support skipping",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,read,com.google.common.io.CharSequenceReader:read(java.nio.CharBuffer),77,90,"/**
* Reads characters into a CharBuffer.
* @param target buffer to read characters into
* @return number of characters read, or -1 if no more characters are available
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,read,com.google.common.io.CharSequenceReader:read(),92,97,"/**
* Reads next character from a sequence.
* @return the next character or -1 if no more characters are available
* @throws IOException if I/O error occurs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,"com.google.common.io.CharSink:writeLines(java.lang.Iterable,java.lang.String)",119,122,"/**
 * Writes multiple lines to an output stream.
 * @param lines iterable collection of character sequences to write
 * @param lineSeparator separator to use between lines
 * @throws IOException if an I/O error occurs
 */","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the given line separator.
   *
   * @throws IOException if an I/O error occurs while writing to this sink",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,"com.google.common.io.CharSink:writeLines(java.util.stream.Stream,java.lang.String)",143,146,"/**
 * Writes lines from a stream to an output source.
 * @param lines stream of character sequences representing lines
 * @param lineSeparator separator to use between lines
 * @throws IOException if an I/O error occurs
 */","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the given line separator.
   *
   * @throws IOException if an I/O error occurs while writing to this sink
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,forEachLine,com.google.common.io.CharSource:forEachLine(java.util.function.Consumer),395,402,"/**
* Processes each line of the file.
* @param action Consumer to process each line
* @throws IOException if an I/O error occurs
*/","* Reads all lines of text from this source, running the given {@code action} for each line as it
   * is read.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source or if {@code action}
   *     throws an {@code UncheckedIOException}
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,readLines,com.google.common.io.CharStreams:readLines(java.lang.Readable),195,203,"/**
* Reads all lines from a Readable source.
* @param r the Readable object to read from
* @return List of strings representing each line
* @throws IOException if an I/O error occurs
*/","* Reads all of the lines from a {@link Readable} object. The lines do not include
   * line-termination characters, but do include other leading and trailing whitespace.
   *
   * <p>Does not close the {@code Readable}. If reading files or resources you should use the {@link
   * Files#readLines} and {@link Resources#readLines} methods.
   *
   * @param r the object to read from
   * @return a mutable {@link List} containing all the lines
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,readLines,"com.google.common.io.CharStreams:readLines(java.lang.Readable,com.google.common.io.LineProcessor)",214,229,"/**
* Reads lines from a Readable and processes them using a LineProcessor.
* @param readable source of lines to read
* @param processor processes each line; returns false to stop reading
* @return result from the processor or null if not applicable
* @throws IOException if an I/O error occurs
*/","* Streams lines from a {@link Readable} object, stopping when the processor returns {@code false}
   * or all lines have been read and returning the result produced by the processor. Does not close
   * {@code readable}. Note that this method may not fully consume the contents of {@code readable}
   * if the processor stops processing early.
   *
   * @throws IOException if an I/O error occurs
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,write,com.google.common.io.FileBackedOutputStream:write(int),201,205,"/**
 * Writes a single byte to the output stream.
 * @param b byte to be written
 * @throws IOException if an I/O error occurs
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,write,"com.google.common.io.FileBackedOutputStream:write(byte[],int,int)",212,216,"/**
* Writes bytes to output stream and updates length.
* @param b byte array containing data to write
* @param off starting offset in the byte array
* @param len number of bytes to write
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,readMoreChars,com.google.common.io.ReaderInputStream:readMoreChars(),203,230,"/**
 * Reads more characters into the buffer.
 * Adjusts buffer size or shifts existing data as needed.
 * @throws IOException if an I/O error occurs
 */",Handle the case of underflow caused by needing more input characters.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readShort,com.google.common.io.LittleEndianDataInputStream:readShort(),190,194,"/**
* Reads a short value from input.
* @return short value read from input stream
* @throws IOException if an I/O error occurs
*/","* Reads a {@code short} as specified by {@link DataInputStream#readShort()}, except using
   * little-endian byte order.
   *
   * @return the next two bytes of the input stream, interpreted as a {@code short} in little-endian
   *     byte order.
   * @throws IOException if an I/O error occurs.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readChar,com.google.common.io.LittleEndianDataInputStream:readChar(),204,208,"/**
* Reads and returns the next character from input.
* @return character value read
* @throws IOException if an I/O error occurs
*/","* Reads a char as specified by {@link DataInputStream#readChar()}, except using little-endian
   * byte order.
   *
   * @return the next two bytes of the input stream, interpreted as a {@code char} in little-endian
   *     byte order
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readFloat,com.google.common.io.LittleEndianDataInputStream:readFloat(),156,160,"/**
* Reads a float value from the input stream.
* Converts an integer read from the stream to a float.
* @return the float value read from the stream
* @throws IOException if an I/O error occurs
*/","* Reads a {@code float} as specified by {@link DataInputStream#readFloat()}, except using
   * little-endian byte order.
   *
   * @return the next four bytes of the input stream, interpreted as a {@code float} in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readDouble,com.google.common.io.LittleEndianDataInputStream:readDouble(),170,174,"/**
* Reads a double value from input.
* @return the double value read
* @throws IOException if an I/O error occurs
*/","* Reads a {@code double} as specified by {@link DataInputStream#readDouble()}, except using
   * little-endian byte order.
   *
   * @return the next eight bytes of the input stream, interpreted as a {@code double} in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeChars,com.google.common.io.LittleEndianDataOutputStream:writeChars(java.lang.String),93,98,"/**
* Writes each character of the string to the output stream.
* @param s the string to be written
* @throws IOException if an I/O error occurs
*/","* Writes a {@code String} as specified by {@link DataOutputStream#writeChars(String)}, except
   * each character is written using little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeDouble,com.google.common.io.LittleEndianDataOutputStream:writeDouble(double),106,109,"/**
 * Writes a double value as a long.
 * @param v double value to write
 * @throws IOException if an I/O error occurs
 */","* Writes a {@code double} as specified by {@link DataOutputStream#writeDouble(double)}, except
   * using little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteDirectoryContentsInsecure,com.google.common.io.MoreFiles:deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream),690,702,"/**
* Deletes contents of a directory insecurely.
* @param dir DirectoryStream containing paths to delete
* @return Collection of IOExceptions encountered or null if none
*/","* Simple, insecure method for deleting the contents of a directory for file systems that don't
   * support {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null
   * if no exceptions were thrown.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteRecursivelySecure,"com.google.common.io.MoreFiles:deleteRecursivelySecure(java.nio.file.SecureDirectoryStream,java.nio.file.Path)",618,640,"/**
 * Recursively deletes a directory or file securely.
 * @param dir secure directory stream for deletion operations
 * @param path path of the directory or file to delete
 * @return collection of IOExceptions encountered during deletion or null if successful
 */","* Secure recursive delete using {@code SecureDirectoryStream}. Returns a collection of exceptions
   * that occurred or null if no exceptions were thrown.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,<init>,com.google.common.io.MultiInputStream:<init>(java.util.Iterator),45,48,"/**
* Initializes a MultiInputStream with an iterator of ByteSources.
* @param it Iterator over ByteSource objects
* @throws IOException if there is an error advancing to the first source
*/","* Creates a new instance.
   *
   * @param it an iterator of I/O suppliers that will provide each substream",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,read,com.google.common.io.MultiInputStream:read(),82,92,"/**
 * Reads the next byte of data from the input stream.
 * @return the next byte as an integer, or -1 if no more bytes are available
 * @throws IOException if an I/O error occurs
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,read,"com.google.common.io.MultiInputStream:read(byte[],int,int)",94,105,"/**
 * Reads bytes from the input stream into a buffer.
 * @param b destination byte array
 * @param off offset in the byte array to start writing
 * @param len maximum number of bytes to read
 * @return number of bytes read, or -1 if end of stream
 * @throws IOException if an I/O error occurs
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,<init>,com.google.common.io.MultiReader:<init>(java.util.Iterator),39,42,"/**
 * Initializes a MultiReader with an iterator of CharSources.
 * @param readers iterator of character sources to read from
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,read,"com.google.common.io.MultiReader:read(char[],int,int)",52,64,"/**
 * Reads characters into a buffer.
 * @param cbuf character array to store the read data
 * @param off starting offset in the buffer
 * @param len maximum number of characters to read
 * @return number of characters actually read, or -1 if end of stream
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,skip,com.google.common.io.MultiReader:skip(long),66,79,"/**
* Skips n bytes in the input stream.
* @param n number of bytes to skip
* @return actual number of bytes skipped
* @throws IOException if an I/O error occurs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,asCharSource,com.google.common.reflect.ClassPath$ResourceInfo:asCharSource(java.nio.charset.Charset),258,260,"/**
 * Converts URL to CharSource using specified charset.
 * @param charset character set for decoding
 * @return CharSource representation of URL content
 */","* Returns a {@link CharSource} view of the resource from which its bytes can be read as
     * characters decoded with the given {@code charset}.
     *
     * @throws NoSuchElementException if the resource cannot be loaded through the class loader,
     *     despite physically existing in the class path.
     * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,size,com.google.common.collect.Lists$Partition:size(),726,729,"/**
* Returns the number of elements per partition.
* @return integer count of elements per partition
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,maxEncodedSize,com.google.common.io.BaseEncoding$SeparatedBaseEncoding:maxEncodedSize(int),1158,1163,"/**
* Calculates the maximum encoded size with separators.
* @param bytes input byte count
* @return maximum encoded size including separators
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,maxEncodedSize,com.google.common.io.BaseEncoding$StandardBaseEncoding:maxEncodedSize(int),632,635,"/**
* Calculates maximum encoded size.
* @param bytes input byte count
* @return maximum encoded size in characters
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,<init>,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:<init>(long),166,173,"/**
* Constructs a LockFreeBitArray with the specified number of bits.
* @param bits total number of bits to manage
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,size,com.google.common.collect.Collections2$PermutationCollection:size(),600,603,"/**
* Returns factorial of input list size.
* @return factorial of the number of elements in inputList
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,calculateSize,"com.google.common.collect.Collections2$OrderedPermutationCollection:calculateSize(java.util.List,java.util.Comparator)",454,473,"/**
* Calculates permutations of distinct elements in a sorted list.
* @param sortedInputList list of sorted elements
* @param comparator comparator for element comparison
* @return number of permutations or Integer.MAX_VALUE if overflow
*/","* The number of permutations with repeated elements is calculated as follows:
     *
     * <ul>
     *   <li>For an empty list, it is 1 (base case).
     *   <li>When r numbers are added to a list of n-r elements, the number of permutations is
     *       increased by a factor of (n choose r).
     * </ul>",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,mean,com.google.common.math.DoubleMath:mean(java.util.Iterator),508,522,"/**
* Computes the mean of a sequence of numbers.
* @param values iterator over Number objects
* @return calculated mean value as double
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of
   * {@code values}.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * @param values a nonempty series of values, which will be converted to {@code double} values
   *     (this may cause loss of precision)
   * @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value
   * @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite
   *     values.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,isPowerOfTwo,com.google.common.math.DoubleMath:isPowerOfTwo(double),201,208,"/**
* Checks if a double value is a power of two.
* @param x the number to check
* @return true if x is a power of two, false otherwise
*/","* Returns {@code true} if {@code x} is exactly equal to {@code 2^k} for some finite integer
   * {@code k}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,isMathematicalInteger,com.google.common.math.DoubleMath:isMathematicalInteger(double),289,294,"/**
* Checks if a double value is a mathematical integer.
* @param x the double value to check
* @return true if x is a mathematical integer, false otherwise
*/","* Returns {@code true} if {@code x} represents a mathematical integer.
   *
   * <p>This is equivalent to, but not necessarily implemented as, the expression {@code
   * !Double.isNaN(x) && !Double.isInfinite(x) && x == Math.rint(x)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,roundToDouble,"com.google.common.math.LongMath:roundToDouble(long,java.math.RoundingMode)",1226,1327,"/**
 * Rounds a long value to a double using specified rounding mode.
 * @param x the long value to round
 * @param mode the RoundingMode to use
 * @return the rounded double value
 */","* Returns {@code x}, rounded to a {@code double} with the specified rounding mode. If {@code x}
   * is precisely representable as a {@code double}, its {@code double} value will be returned;
   * otherwise, the rounding will choose between the two nearest representable values with {@code
   * mode}.
   *
   * <p>For the case of {@link RoundingMode#HALF_EVEN}, this implementation uses the IEEE 754
   * default rounding mode: if the two nearest representable values are equally near, the one with
   * the least significant bit zero is chosen. (In such cases, both of the nearest representable
   * values are even integers; this method returns the one that is a multiple of a greater power of
   * two.)
   *
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not precisely representable as a {@code double}
   * @since 30.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,fuzzyCompare,"com.google.common.math.DoubleMath:fuzzyCompare(double,double,double)",384,394,"/**
 * Compares two doubles with a tolerance.
 * @param a first double value
 * @param b second double value
 * @param tolerance comparison tolerance
 * @return 0 if values are fuzzy equal, -1 if a < b, 1 if a > b, NaN handling included
 */","* Compares {@code a} and {@code b} ""fuzzily,"" with a tolerance for nearly-equal values.
   *
   * <p>This method is equivalent to {@code fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a,
   * b)}. In particular, like {@link Double#compare(double, double)}, it treats all NaN values as
   * equal and greater than all other values (including {@link Double#POSITIVE_INFINITY}).
   *
   * <p>This is <em>not</em> a total ordering and is <em>not</em> suitable for use in {@link
   * Comparable#compareTo} implementations. In particular, it is not transitive.
   *
   * @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,maxRunBeforeFallback,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:maxRunBeforeFallback(int),932,934,"/**
* Calculates max run before fallback.
* @param tableSize size of the table
* @return calculated max run value
*/","* If more than this many consecutive positions are filled in a table of the specified size,
     * report probable hash flooding. ({@link #hashFloodingDetected} may also report hash flooding
     * if fewer consecutive positions are filled; see that method for details.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,trim,com.google.common.collect.TopKSelector:trim(),165,207,"/**
 * Trims the buffer to keep only the top k elements based on comparator.
 */","* Quickselects the top k elements from the 2k elements in the buffer. O(k) expected time, O(k log
   * k) worst case.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Alphabet:<init>(java.lang.String,char[],byte[],boolean)",449,479,"/**
* Initializes an Alphabet with specified parameters.
* @param name unique identifier for the alphabet
* @param chars array of characters in the alphabet
* @param decodabet decoding table
* @param ignoreCase flag to ignore case sensitivity
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,ceilToPowerOfTwo,com.google.common.util.concurrent.Striped:ceilToPowerOfTwo(int),510,512,"/**
 * Rounds up to the nearest power of two.
 * @param x integer to round up
 * @return smallest power of two greater than or equal to x
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,log10,"com.google.common.math.IntMath:log10(int,java.math.RoundingMode)",153,176,"/**
* Computes the base-10 logarithm of an integer.
* @param x the integer to compute the logarithm for
* @param mode rounding mode to apply
* @return the rounded base-10 logarithm
*/","* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of ten",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,sqrt,"com.google.common.math.LongMath:sqrt(long,java.math.RoundingMode)",305,366,"/**
* Computes the integer square root of a non-negative long value with specified rounding mode.
* @param x non-negative long value to compute the square root of
* @param mode rounding mode to apply if the result is not exact
* @return integer square root of x, rounded according to mode
*/","* Returns the square root of {@code x}, rounded with the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x < 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code
   *     sqrt(x)} is not an integer",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,<init>,com.google.common.collect.CartesianList:<init>(com.google.common.collect.ImmutableList),52,65,"/**
* Initializes CartesianList with given axes.
* @param axes list of lists representing dimensions
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,calculateNewCapacity,com.google.common.collect.MinMaxPriorityQueue:calculateNewCapacity(),968,973,"/**
* Calculates new capacity for the queue.
* @return adjusted new capacity considering current size and max size constraints
*/",Returns ~2x the old capacity if small; ~1.5x otherwise.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,<init>,"com.google.common.collect.TopKSelector:<init>(java.util.Comparator,int)",123,132,"/**
 * Initializes a TopKSelector with a comparator and capacity.
 * @param comparator the comparator to order elements
 * @param k the maximum number of top elements to track
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedPow,"com.google.common.math.IntMath:checkedPow(int,int)",495,532,"/**
* Computes b^k with overflow checks.
* @param b base integer
* @param k non-negative exponent integer
* @return result of b raised to the power of k, throws if overflow occurs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,horizontal,com.google.common.math.LinearTransformation:horizontal(double),121,125,"/**
* Creates a horizontal linear transformation.
* @param y y-intercept of the line
* @return LinearTransformation with zero slope and given y-intercept
*/","* Builds an instance representing a horizontal transformation with a constant value of {@code y}.
   * (The inverse of this will be a vertical transformation.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,createInverse,com.google.common.math.LinearTransformation$VerticalLinearTransformation:createInverse(),273,275,"/**
 * Creates an inverse linear transformation.
 * @return Inverse LinearTransformation object
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,withSlope,com.google.common.math.LinearTransformation$LinearTransformationBuilder:withSlope(double),97,105,"/**
* Creates a new LinearTransformation with the specified slope.
* @param slope the slope of the linear transformation
* @return a new LinearTransformation instance
*/","* Finish building an instance with the given slope, i.e. the rate of change of {@code y} with
     * respect to {@code x}. The slope must not be {@code NaN}. It may be infinite, in which case
     * the transformation is vertical. (If it is zero, the transformation is horizontal.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,vertical,com.google.common.math.LinearTransformation:vertical(double),112,115,"/**
 * Creates a vertical linear transformation.
 * @param x constant value for the transformation
 * @return LinearTransformation representing the vertical shift
 */","* Builds an instance representing a vertical transformation with a constant value of {@code x}.
   * (The inverse of this will be a horizontal transformation.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,createInverse,com.google.common.math.LinearTransformation$RegularLinearTransformation:createInverse(),217,223,"/**
* Creates the inverse of a linear transformation.
* @return Inverse LinearTransformation object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,test,"com.google.common.math.LongMath$MillerRabinTester:test(long,long)",1159,1163,"/**
 * Tests primality using a witness method.
 * @param base the base number to test
 * @param n the number to check for primality
 * @return true if n is prime, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,factorial,com.google.common.math.BigIntegerMath:factorial(int),381,434,"/**
 * Computes factorial of a non-negative integer using BigInteger.
 * @param n non-negative integer to compute factorial for
 * @return BigInteger representing the factorial of n
 */","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, or {@code 1}
   * if {@code n == 0}.
   *
   * <p><b>Warning:</b> the result takes <i>O(n log n)</i> space, so use cautiously.
   *
   * <p>This uses an efficient binary recursive algorithm to compute the factorial with balanced
   * multiplies. It also removes all the 2s from the intermediate products (shifting them back in at
   * the end).
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,log10,"com.google.common.math.LongMath:log10(long,java.math.RoundingMode)",155,179,"/**
* Computes the base-10 logarithm of a number with specified rounding mode.
* @param x positive long integer
* @param mode rounding mode to apply
* @return rounded base-10 logarithm
*/","* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of ten",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,multiplyFraction,"com.google.common.math.LongMath:multiplyFraction(long,long,long)",852,862,"/**
* Multiplies a fraction by an integer.
* @param x multiplier
* @param numerator fraction's numerator
* @param denominator fraction's denominator
* @return result of the multiplication as a long
*/","Returns (x * numerator / denominator), which is assumed to come out to an integral value.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedPow,"com.google.common.math.LongMath:checkedPow(long,int)",578,620,"/**
* Computes b^k with overflow checking.
* @param b base number
* @param k exponent, must be non-negative
* @return b raised to the power of k
* @throws ArithmeticException if overflow occurs
*/","* Returns the {@code b} to the {@code k}th power, provided it does not overflow.
   *
   * @throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed {@code
   *     long} arithmetic",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,populationCovariance,com.google.common.math.PairedStats:populationCovariance(),95,98,"/**
* Calculates population covariance.
* @return covariance value or throws IllegalStateException if count is zero
*/","* Returns the population covariance of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It
   * is not guaranteed to return zero when the dataset consists of the same pair of values multiple
   * times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,sampleCovariance,com.google.common.math.PairedStats:sampleCovariance(),113,116,"/**
* Calculates the sample covariance.
* @return double value representing sample covariance
*/","* Returns the sample covariance of the values. The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same pair of values
   * multiple times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,pearsonsCorrelationCoefficient,com.google.common.math.PairedStats:pearsonsCorrelationCoefficient(),134,148,"/**
* Calculates Pearson's correlation coefficient.
* @return double value representing the correlation coefficient
*/","* Returns the <a href=""http://mathworld.wolfram.com/CorrelationCoefficient.html"">Pearson's or
   * product-moment correlation coefficient</a> of the values. The count must greater than one, and
   * the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not
   * guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to
   * numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1].
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     either the {@code x} and {@code y} dataset has zero population variance",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,meanOf,com.google.common.math.Stats:meanOf(java.util.Iterator),488,503,"/**
 * Calculates the mean of a sequence of numbers.
 * @param values iterator over numeric values
 * @return calculated mean as a double
 */","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>The definition of the mean is the same as {@link Stats#mean}.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)
   * @throws IllegalArgumentException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,add,com.google.common.math.StatsAccumulator:add(double),53,76,"/**
* Adds a new value to the dataset.
* Updates count, mean, min, max, and sum of squares of deltas.
* Handles finite and non-finite values appropriately.
*/",Adds the given value to the dataset.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,merge,"com.google.common.math.StatsAccumulator:merge(long,double,double,double,double)",191,217,"/**
* Merges statistics from another dataset.
* @param otherCount count of elements in the other dataset
* @param otherMean mean value of the other dataset
* @param otherSumOfSquaresOfDeltas sum of squares of deltas for the other dataset
* @param otherMin minimum value of the other dataset
* @param otherMax maximum value of the other dataset
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,populationCovariance,com.google.common.math.PairedStatsAccumulator:populationCovariance(),128,131,"/**
* Calculates the population covariance.
* @return population covariance value
*/","* Returns the population covariance of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It
   * is not guaranteed to return zero when the dataset consists of the same pair of values multiple
   * times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,sampleCovariance,com.google.common.math.PairedStatsAccumulator:sampleCovariance(),146,149,"/**
* Calculates the sample covariance.
* @return calculated sample covariance value
*/","* Returns the sample covariance of the values. The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same pair of values
   * multiple times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,pearsonsCorrelationCoefficient,com.google.common.math.PairedStatsAccumulator:pearsonsCorrelationCoefficient(),167,181,"/**
* Computes Pearson's correlation coefficient between two datasets.
* @return double value representing the correlation coefficient
*/","* Returns the <a href=""http://mathworld.wolfram.com/CorrelationCoefficient.html"">Pearson's or
   * product-moment correlation coefficient</a> of the values. The count must greater than one, and
   * the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not
   * guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to
   * numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1].
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     either the {@code x} and {@code y} dataset has zero population variance",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,partition,"com.google.common.math.Quantiles:partition(double[],int,int)",575,595,"/**
* Partitions an array segment around a pivot.
* @param array the array to partition
* @param from start index of the segment (inclusive)
* @param to end index of the segment (exclusive)
* @return index of the pivot after partitioning
*/","* Performs a partition operation on the slice of {@code array} with elements in the range [{@code
   * from}, {@code to}]. Uses the median of {@code from}, {@code to}, and the midpoint between them
   * as a pivot. Returns the index which the slice is partitioned around, i.e. if it returns {@code
   * ret} then we know that the values with indexes in [{@code from}, {@code ret}) are less than or
   * equal to the value at {@code ret} and the values with indexes in ({@code ret}, {@code to}] are
   * greater than or equal to that.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,fromByteArray,com.google.common.math.PairedStats:fromByteArray(byte[]),304,316,"/**
 * Creates a PairedStats object from a byte array.
 * @param byteArray serialized PairedStats data
 * @return PairedStats instance or throws IllegalArgumentException if input is invalid
 */","* Creates a {@link PairedStats} instance from the given byte representation which was obtained by
   * {@link #toByteArray}.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,fromByteArray,com.google.common.math.Stats:fromByteArray(byte[]),627,635,"/**
* Converts byte array to Stats object.
* @param byteArray input byte array representing stats data
* @return Stats object constructed from the byte array
*/","* Creates a Stats instance from the given byte representation which was obtained by {@link
   * #toByteArray}.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,snapshot,com.google.common.math.PairedStatsAccumulator:snapshot(),95,97,"/**
* Creates a snapshot of paired statistics.
* @return PairedStats object containing snapshots of x and y stats, and sum of products of deltas
*/",Returns an immutable snapshot of the current statistics.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,xStats,com.google.common.math.PairedStatsAccumulator:xStats(),105,107,"/**
 * Returns a snapshot of current statistics.
 * @return Snapshot of Stats object
 */",Returns an immutable snapshot of the statistics on the {@code x} values alone.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,yStats,com.google.common.math.PairedStatsAccumulator:yStats(),110,112,"/**
 * Returns a snapshot of current statistics.
 * @return Stats object representing the current state
 */",Returns an immutable snapshot of the statistics on the {@code y} values alone.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,toStats,com.google.common.math.Stats:toStats(),216,226,"/**
* Collects numbers into statistics.
* @return Collector that aggregates numbers into Stats object
*/","* Returns a {@link Collector} which accumulates statistics from a {@link java.util.stream.Stream}
   * of any type of boxed {@link Number} into a {@link Stats}. Use by calling {@code
   * boxedNumericStream.collect(toStats())}. The numbers will be converted to {@code double} values
   * (which may cause loss of precision).
   *
   * <p>If you have any of the primitive streams {@code DoubleStream}, {@code IntStream}, or {@code
   * LongStream}, you should use the factory method {@link #of} instead.
   *
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,convertDottedQuadToHex,com.google.common.net.InetAddresses:convertDottedQuadToHex(java.lang.String),336,347,"/**
* Converts IPv4 address from dotted-quad to hex format.
* @param ipString IP address in dotted-quad format
* @return Hexadecimal representation of the IP or null if invalid
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,toUriString,com.google.common.net.InetAddresses:toUriString(java.net.InetAddress),580,585,"/**
 * Converts an InetAddress to a URI string.
 * @param ip the IP address to convert
 * @return the URI representation of the IP address
 */","* Returns the string representation of an {@link InetAddress} suitable for inclusion in a URI.
   *
   * <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6
   * addresses it compresses zeroes and surrounds the text with square brackets; for example {@code
   * ""[2001:db8::1]""}.
   *
   * <p>Per section 3.2.2 of <a target=""_parent""
   * href=""http://tools.ietf.org/html/rfc3986#section-3.2.2"">RFC 3986</a>, a URI containing an IPv6
   * string literal is of the form {@code ""http://[2001:db8::1]:8888/index.html""}.
   *
   * <p>Use of either {@link InetAddresses#toAddrString}, {@link InetAddress#getHostAddress()}, or
   * this method is recommended over {@link InetAddress#toString()} when an IP address string
   * literal is desired. This is because {@link InetAddress#toString()} prints the hostname and the
   * IP address string joined by a ""/"".
   *
   * @param ip {@link InetAddress} to be converted to URI string literal
   * @return {@code String} containing URI-safe string literal",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getCompatIPv4Address,com.google.common.net.InetAddresses:getCompatIPv4Address(java.net.Inet6Address),702,707,"/**
* Converts an IPv4-compatible IPv6 address to its IPv4 equivalent.
* @param ip IPv6 address that must be IPv4-compatible
* @return Inet4Address representing the IPv4 part of the address
*/","* Returns the IPv4 address embedded in an IPv4 compatible address.
   *
   * @param ip {@link Inet6Address} to be examined for an embedded IPv4 address
   * @return {@link Inet4Address} of the embedded IPv4 address
   * @throws IllegalArgumentException if the argument is not a valid IPv4 compatible address",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,get6to4IPv4Address,com.google.common.net.InetAddresses:get6to4IPv4Address(java.net.Inet6Address),733,737,"/**
 * Extracts the IPv4 address from a 6to4 IPv6 address.
 * @param ip 6to4 IPv6 address
 * @return extracted IPv4 address as Inet4Address
 */","* Returns the IPv4 address embedded in a 6to4 address.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 in 6to4 address
   * @return {@link Inet4Address} of embedded IPv4 in 6to4 address
   * @throws IllegalArgumentException if the argument is not a valid IPv6 6to4 address",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getIsatapIPv4Address,com.google.common.net.InetAddresses:getIsatapIPv4Address(java.net.Inet6Address),884,888,"/**
 * Extracts IPv4 address from an ISATAP address.
 * @param ip ISATAP IPv6 address
 * @return extracted Inet4Address or null if invalid
 */","* Returns the IPv4 address embedded in an ISATAP address.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 in ISATAP address
   * @return {@link Inet4Address} of embedded IPv4 in an ISATAP address
   * @throws IllegalArgumentException if the argument is not a valid IPv6 ISATAP address",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeCharacter,com.google.common.net.MediaType$Tokenizer:consumeCharacter(com.google.common.base.CharMatcher),1167,1173,"/**
 * Consumes and returns the next character if it matches the given matcher.
 * @param matcher defines the condition for a matching character
 * @return the consumed character
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeCharacter,com.google.common.net.MediaType$Tokenizer:consumeCharacter(char),1175,1181,"/**
* Consumes and returns the current character if it matches the input.
* @param c character to match
* @return consumed character
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,hashCode,com.google.common.primitives.ImmutableDoubleArray$AsList:hashCode(),555,558,"/**
 * Returns hash code of the parent object.
 * @return hash code value of the parent
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,compute,com.google.common.math.Quantiles$ScaleAndIndex:compute(java.util.Collection),242,244,"/**
 * Computes the result from a collection of numbers.
 * @param dataset collection of numeric values
 * @return computed result as a double
 */","* Computes the quantile value of the given dataset.
     *
     * @param dataset the dataset to do the calculation on, which must be non-empty, which will be
     *     cast to doubles (with any associated lost of precision), and which will not be mutated by
     *     this call (it is copied instead)
     * @return the quantile value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,compute,com.google.common.math.Quantiles$ScaleAndIndexes:compute(java.util.Collection),347,349,"/**
 * Computes statistics on a dataset.
 * @param dataset collection of numeric data points
 * @return map with computed statistics
 */","* Computes the quantile values of the given dataset.
     *
     * @param dataset the dataset to do the calculation on, which must be non-empty, which will be
     *     cast to doubles (with any associated lost of precision), and which will not be mutated by
     *     this call (it is copied instead)
     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile
     *     indexes, and the values the corresponding quantile values. When iterating, entries in the
     *     map are ordered by quantile index in the same order they were passed to the {@code
     *     indexes} method.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,add,com.google.common.primitives.ImmutableDoubleArray$Builder:add(double),225,231,"/**
* Adds a double value to the array.
* @param value the double value to add
* @return the Builder instance for method chaining
*/","* Appends {@code value} to the end of the values the built {@link ImmutableDoubleArray} will
     * contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(double[]),237,243,"/**
* Adds all elements from a double array to the builder.
* @param values array of double values to add
* @return the Builder instance for method chaining
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.util.Collection),264,271,"/**
 * Adds all double values from a collection to the builder.
 * @param values collection of double values to add
 * @return the Builder instance for method chaining
 */","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(com.google.common.primitives.ImmutableDoubleArray),294,300,"/**
 * Adds all elements from an ImmutableDoubleArray to the builder.
 * @param values array of double values to add
 * @return current Builder instance
 */","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,com.google.common.primitives.ImmutableDoubleArray:of(double),97,99,"/**
 * Creates an immutable array with a single element.
 * @param e0 the only element in the array
 * @return an ImmutableDoubleArray containing the specified element
 */",Returns an immutable array containing a single value.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double)",102,104,"/**
* Creates an ImmutableDoubleArray with two elements.
* @param e0 first element value
* @param e1 second element value
* @return ImmutableDoubleArray containing e0 and e1
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double)",107,109,"/**
* Creates an ImmutableDoubleArray from three doubles.
* @param e0 first element
* @param e1 second element
* @param e2 third element
* @return ImmutableDoubleArray containing the provided elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double)",112,114,"/**
* Creates an immutable array from four doubles.
* @param e0 first element
* @param e1 second element
* @param e2 third element
* @param e3 fourth element
* @return ImmutableDoubleArray containing the elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double,double)",117,119,"/**
* Creates an ImmutableDoubleArray from five double values.
* @param e0 to e4 the five double elements of the array
* @return an ImmutableDoubleArray containing the specified elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double,double,double)",122,125,"/**
* Creates an immutable array of six doubles.
* @param e0 to e5 the elements of the array
* @return ImmutableDoubleArray containing the specified elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(double[]),146,150,"/**
* Creates an immutable double array from a given array.
* @param values the source double array to copy
* @return an ImmutableDoubleArray instance containing the copied values
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(java.util.Collection),153,155,"/**
* Creates an immutable double array from a collection of Double.
* @param values collection of Double values
* @return ImmutableDoubleArray containing the elements of values
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(java.util.stream.DoubleStream),176,180,"/**
* Creates an ImmutableDoubleArray from a DoubleStream.
* @param stream source of double values
* @return ImmutableDoubleArray containing the stream's elements
*/","* Returns an immutable array containing all the values from {@code stream}, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,trimmed,com.google.common.primitives.ImmutableDoubleArray:trimmed(),631,633,"/**
 * Returns a trimmed version of the array.
 * @return ImmutableDoubleArray with trimmed values or current instance if not a partial view
 */","* Returns an immutable array containing the same values as {@code this} array. This is logically
   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance
   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range
   * of values, resulting in an equivalent array with a smaller memory footprint.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,indexOf,com.google.common.primitives.ImmutableDoubleArray$AsList:indexOf(java.lang.Object),509,512,"/**
* Returns index of target if it's a Double.
* @param target object to search for
* @return index in parent list or -1 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,contains,com.google.common.primitives.ImmutableDoubleArray:contains(double),417,419,"/**
 * Checks if the list contains the specified element.
 * @param target the element to search for
 * @return true if the element is found, false otherwise
 */","* Returns {@code true} if {@code target} is present at any index in this array. Values are
   * compared as if by {@link Double#equals}. Equivalent to {@code asList().contains(target)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,lastIndexOf,com.google.common.primitives.ImmutableDoubleArray$AsList:lastIndexOf(java.lang.Object),514,517,"/**
 * Finds the last index of the specified target in the parent list.
 * @param target the object to search for, can be null
 * @return the last index of the target if it's a Double, otherwise -1
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,toString,com.google.common.primitives.ImmutableDoubleArray$AsList:toString(),560,563,"/**
 * Returns the string representation of the parent object.
 * @return String representation of the parent
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,contains,com.google.common.primitives.ImmutableIntArray$AsList:contains(java.lang.Object),499,502,"/**
 * Checks if the collection contains the specified element.
 * @param target element to search for
 * @return true if the element is present, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,add,com.google.common.primitives.ImmutableIntArray$Builder:add(int),222,228,"/**
* Adds an integer to the array.
* @param value integer to be added
* @return current Builder instance
*/","* Appends {@code value} to the end of the values the built {@link ImmutableIntArray} will
     * contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(int[]),234,240,"/**
* Adds all elements from an array to the builder.
* @param values array of integers to add
* @return the Builder instance for method chaining
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.util.Collection),261,268,"/**
* Adds all integers from a collection to the builder.
* @param values collection of integer values to add
* @return current Builder instance
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(com.google.common.primitives.ImmutableIntArray),291,297,"/**
* Adds all elements from an ImmutableIntArray to the builder.
* @param values ImmutableIntArray containing elements to add
* @return this Builder instance for method chaining
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,com.google.common.primitives.ImmutableIntArray:of(int),97,99,"/**
 * Creates an immutable array with one element.
 * @param e0 the single element in the array
 * @return ImmutableIntArray containing the specified element
 */",Returns an immutable array containing a single value.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int)",102,104,"/**
* Creates an immutable array with two elements.
* @param e0 first element
* @param e1 second element
* @return ImmutableIntArray containing the two elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int)",107,109,"/**
* Creates an ImmutableIntArray from three integers.
* @param e0 first integer element
* @param e1 second integer element
* @param e2 third integer element
* @return ImmutableIntArray containing the three elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int,int)",112,114,"/**
* Creates an immutable array from four integers.
* @param e0 first integer element
* @param e1 second integer element
* @param e2 third integer element
* @param e3 fourth integer element
* @return ImmutableIntArray containing the specified elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int,int,int)",117,119,"/**
* Creates an ImmutableIntArray with five elements.
* @param e0 to e4 the integer elements of the array
* @return ImmutableIntArray containing the specified elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int,int,int,int)",122,124,"/**
* Creates an immutable array from six integers.
* @param e0 to e5 the six integer elements of the array
* @return an ImmutableIntArray containing the specified elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(int[]),145,147,"/**
* Creates an immutable copy of the given int array.
* @param values array to be copied
* @return ImmutableIntArray containing the copied values
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(java.util.stream.IntStream),173,177,"/**
 * Creates an ImmutableIntArray from an IntStream.
 * @param stream source of integers
 * @return ImmutableIntArray containing elements from the stream
 */","* Returns an immutable array containing all the values from {@code stream}, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,trimmed,com.google.common.primitives.ImmutableIntArray:trimmed(),621,623,"/**
 * Returns an immutable array with trimmed elements.
 * @return ImmutableIntArray with trimmed values or current instance if already trimmed
 */","* Returns an immutable array containing the same values as {@code this} array. This is logically
   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance
   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range
   * of values, resulting in an equivalent array with a smaller memory footprint.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,hashCode,com.google.common.primitives.ImmutableIntArray$AsList:hashCode(),550,553,"/**
 * Returns hash code of the parent object.
 * @return hash code value of the parent
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,toString,com.google.common.primitives.ImmutableIntArray$AsList:toString(),555,558,"/**
 * Returns the string representation of the parent.
 * @return string representation of the parent object
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,contains,com.google.common.primitives.ImmutableLongArray$AsList:contains(java.lang.Object),501,504,"/**
* Checks if the collection contains the specified element.
* @param target element to search for
* @return true if the element is found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,add,com.google.common.primitives.ImmutableLongArray$Builder:add(long),224,230,"/**
* Adds a long value to the builder.
* @param value the long value to add
* @return the Builder instance for method chaining
*/","* Appends {@code value} to the end of the values the built {@link ImmutableLongArray} will
     * contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(long[]),236,242,"/**
* Adds all elements from a long array to the builder.
* @param values array of long integers to add
* @return the Builder instance for method chaining
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.util.Collection),263,270,"/**
* Adds all Long values to the array.
* @param values collection of Long values to add
* @return the Builder instance
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(com.google.common.primitives.ImmutableLongArray),293,299,"/**
* Adds all elements from an ImmutableLongArray to the builder.
* @param values the ImmutableLongArray to add
* @return the Builder instance for method chaining
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,com.google.common.primitives.ImmutableLongArray:of(long),97,99,"/**
 * Creates an ImmutableLongArray with a single element.
 * @param e0 the initial element
 * @return an ImmutableLongArray containing the specified element
 */",Returns an immutable array containing a single value.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long)",102,104,"/**
* Creates an immutable array containing two long elements.
* @param e0 first element
* @param e1 second element
* @return ImmutableLongArray with the specified elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long)",107,109,"/**
* Creates an immutable array with three long elements.
* @param e0 first element
* @param e1 second element
* @param e2 third element
* @return ImmutableLongArray containing the specified elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long,long)",112,114,"/**
* Creates an ImmutableLongArray from four long values.
* @param e0 first element
* @param e1 second element
* @param e2 third element
* @param e3 fourth element
* @return ImmutableLongArray containing the specified elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long,long,long)",117,119,"/**
* Creates an ImmutableLongArray from five long elements.
* @param e0 to e4 the elements of the array
* @return ImmutableLongArray containing the provided elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long,long,long,long)",122,124,"/**
* Creates an ImmutableLongArray from six long elements.
* @param e0 to e5 the elements of the array
* @return ImmutableLongArray containing the specified elements
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(long[]),145,149,"/**
* Creates an immutable long array from a given array.
* @param values source array of longs
* @return ImmutableLongArray containing the copied values
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(java.util.stream.LongStream),175,179,"/**
 * Creates an immutable long array from a LongStream.
 * @param stream source of long values
 * @return ImmutableLongArray containing the elements of the stream
 */","* Returns an immutable array containing all the values from {@code stream}, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,trimmed,com.google.common.primitives.ImmutableLongArray:trimmed(),623,625,"/**
 * Returns a trimmed immutable long array.
 * @return new ImmutableLongArray if partial view, otherwise current instance
 */","* Returns an immutable array containing the same values as {@code this} array. This is logically
   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance
   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range
   * of values, resulting in an equivalent array with a smaller memory footprint.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,hashCode,com.google.common.primitives.ImmutableLongArray$AsList:hashCode(),552,555,"/**
* Returns hash code based on parent's hash code.
* @return hash code of the parent object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,toString,com.google.common.primitives.ImmutableLongArray$AsList:toString(),557,560,"/**
 * Returns the string representation of the parent object.
 * @return String representation of the parent
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,indexes,com.google.common.math.Quantiles$Scale:indexes(java.util.Collection),212,214,"/**
 * Creates a ScaleAndIndexes object with given indexes.
 * @param indexes collection of integer indexes
 * @return ScaleAndIndexes instance initialized with scale and converted indexes array
 */","* Specifies multiple quantile indexes to be calculated, each index being the k in the kth
     * q-quantile.
     *
     * @param indexes the quantile indexes, each of which must be in the inclusive range [0, q] for
     *     q-quantiles; the order of the indexes is unimportant, duplicates will be ignored, and the
     *     set will be snapshotted when this method is called
     * @throws IllegalArgumentException if {@code indexes} is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(java.util.Collection),150,152,"/**
* Creates an immutable array from a collection of integers.
* @param values collection of Integer objects
* @return ImmutableIntArray containing the elements of the input collection
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(java.util.Collection),152,154,"/**
* Creates an immutable long array from a collection of Longs.
* @param values collection of Long objects
* @return ImmutableLongArray containing the elements or an empty array if input is empty
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,tryParse,"com.google.common.primitives.Ints:tryParse(java.lang.String,int)",840,847,"/**
* Parses a string to an integer with a specified radix.
* @param string the string to parse
* @param radix the numerical base used for parsing
* @return parsed Integer or null if out of int range
*/","* Parses the specified string as a signed integer value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of an integer value
   * @param radix the radix to use when parsing
   * @return the integer value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as an integer value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,tryParse,com.google.common.primitives.Longs:tryParse(java.lang.String),376,378,"/**
 * Parses a string to a long using base 10.
 * @param string the string to parse
 * @return parsed long value or null if parsing fails
 */","* Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} (
   * <code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing
   * an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns
   * {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of a long value
   * @return the long value represented by {@code string}, or {@code null} if {@code string} has a
   *     length of zero or cannot be parsed as a long value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,decode,com.google.common.primitives.UnsignedInts:decode(java.lang.String),319,331,"/**
 * Decodes a string to an unsigned integer.
 * @param stringValue the string to decode
 * @return the decoded unsigned integer value
 * @throws NumberFormatException if decoding fails
 */","* Returns the unsigned {@code int} value represented by the given string.
   *
   * <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:
   *
   * <ul>
   *   <li>{@code 0x}<i>HexDigits</i>
   *   <li>{@code 0X}<i>HexDigits</i>
   *   <li>{@code #}<i>HexDigits</i>
   *   <li>{@code 0}<i>OctalDigits</i>
   * </ul>
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,com.google.common.primitives.UnsignedInteger:valueOf(long),75,81,"/**
 * Converts a long value to an UnsignedInteger.
 * @param value the long value to convert
 * @return UnsignedInteger representation of the value
 */","* Returns an {@code UnsignedInteger} that is equal to {@code value}, if possible. The inverse
   * operation of {@link #longValue()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,com.google.common.primitives.UnsignedInteger:valueOf(java.math.BigInteger),89,96,"/**
 * Converts a BigInteger to an UnsignedInteger.
 * @param value non-negative BigInteger with bit length <= 32
 * @return UnsignedInteger representation of the BigInteger
 */","* Returns a {@code UnsignedInteger} representing the same value as the specified {@link
   * BigInteger}. This is the inverse operation of {@link #bigIntegerValue()}.
   *
   * @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^32}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,"com.google.common.primitives.UnsignedInteger:valueOf(java.lang.String,int)",116,118,"/**
 * Parses a string into an UnsignedInteger using a specified radix.
 * @param string the string to parse
 * @param radix the base of the number in the string
 * @return an UnsignedInteger object representing the parsed value
 */","* Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as
   * an unsigned {@code int} value in the specified radix.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}
   *     value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,plus,com.google.common.primitives.UnsignedInteger:plus(com.google.common.primitives.UnsignedInteger),126,128,"/**
 * Adds this unsigned integer to another.
 * @param val the unsigned integer to add
 * @return sum as a new UnsignedInteger
 */","* Returns the result of adding this and {@code val}. If the result would have more than 32 bits,
   * returns the low 32 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,minus,com.google.common.primitives.UnsignedInteger:minus(com.google.common.primitives.UnsignedInteger),136,138,"/**
 * Subtracts another unsigned integer from this one.
 * @param val the unsigned integer to subtract
 * @return result of the subtraction as a new UnsignedInteger
 */","* Returns the result of subtracting this and {@code val}. If the result would be negative,
   * returns the low 32 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,times,com.google.common.primitives.UnsignedInteger:times(com.google.common.primitives.UnsignedInteger),146,151,"/**
* Multiplies two unsigned integers.
* @param val the UnsignedInteger to multiply with
* @return the product as an UnsignedInteger
*/","* Returns the result of multiplying this and {@code val}. If the result would have more than 32
   * bits, returns the low 32 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,dividedBy,com.google.common.primitives.UnsignedInteger:dividedBy(com.google.common.primitives.UnsignedInteger),159,161,"/**
 * Divides this unsigned integer by another.
 * @param val divisor as an UnsignedInteger
 * @return result of division as UnsignedInteger
 */","* Returns the result of dividing this by {@code val}.
   *
   * @throws ArithmeticException if {@code val} is zero
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,mod,com.google.common.primitives.UnsignedInteger:mod(com.google.common.primitives.UnsignedInteger),169,171,"/**
 * Computes modulus of this unsigned integer with another.
 * @param val the divisor as an UnsignedInteger
 * @return result of the modulus operation as an UnsignedInteger
 */","* Returns this mod {@code val}.
   *
   * @throws ArithmeticException if {@code val} is zero
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,toString,com.google.common.primitives.UnsignedInteger:toString(),240,243,"/**
 * Returns string representation with default depth.
 * @return formatted string
 */","Returns a string representation of the {@code UnsignedInteger} value, in base 10.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,compareTo,com.google.common.primitives.UnsignedInteger:compareTo(com.google.common.primitives.UnsignedInteger),219,223,"/**
 * Compares this unsigned integer with another.
 * @param other the UnsignedInteger to compare with
 * @return negative if less, zero if equal, positive if greater
 */","* Compares this unsigned integer to another unsigned integer. Returns {@code 0} if they are
   * equal, a negative number if {@code this < other}, and a positive number if {@code this >
   * other}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,compare,"com.google.common.primitives.UnsignedInts$LexicographicalComparator:compare(int[],int[])",200,211,"/**
 * Compares two integer arrays lexicographically.
 * @param left first array to compare
 * @param right second array to compare
 * @return negative if left is less, positive if left is greater, zero if equal
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,com.google.common.primitives.UnsignedLong:valueOf(long),78,82,"/**
* Converts a long to an unsigned long.
* @param value long value to convert
* @return UnsignedLong representation of the input value
*/","* Returns an {@code UnsignedLong} representing the same value as the specified {@code long}.
   *
   * @throws IllegalArgumentException if {@code value} is negative
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,com.google.common.primitives.UnsignedLong:valueOf(java.math.BigInteger),90,98,"/**
* Converts BigInteger to UnsignedLong.
* @param value non-negative BigInteger
* @return UnsignedLong representation of the BigInteger
*/","* Returns a {@code UnsignedLong} representing the same value as the specified {@code BigInteger}.
   * This is the inverse operation of {@link #bigIntegerValue()}.
   *
   * @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^64}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,plus,com.google.common.primitives.UnsignedLong:plus(com.google.common.primitives.UnsignedLong),131,133,"/**
 * Adds two unsigned long values.
 * @param val the value to add
 * @return sum of this and val as UnsignedLong
 */","* Returns the result of adding this and {@code val}. If the result would have more than 64 bits,
   * returns the low 64 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,minus,com.google.common.primitives.UnsignedLong:minus(com.google.common.primitives.UnsignedLong),141,143,"/**
 * Subtracts another UnsignedLong from this instance.
 * @param val UnsignedLong to subtract
 * @return result of subtraction as a new UnsignedLong
 */","* Returns the result of subtracting this and {@code val}. If the result would have more than 64
   * bits, returns the low 64 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,times,com.google.common.primitives.UnsignedLong:times(com.google.common.primitives.UnsignedLong),151,153,"/**
* Multiplies this unsigned long by another.
* @param val the other unsigned long value to multiply
* @return product of the two unsigned longs as a new UnsignedLong instance
*/","* Returns the result of multiplying this and {@code val}. If the result would have more than 64
   * bits, returns the low 64 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,compare,"com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator:compare(byte[],byte[])",374,413,"/**
* Compares two byte arrays lexicographically.
* @param left first byte array to compare
* @param right second byte array to compare
* @return negative if left is less, positive if left is greater, zero if equal
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,compareTo,com.google.common.primitives.UnsignedLong:compareTo(com.google.common.primitives.UnsignedLong),231,235,"/**
* Compares this unsigned long with another.
* @param o the other UnsignedLong to compare
* @return negative if less, zero if equal, positive if greater
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,compare,"com.google.common.primitives.UnsignedLongs$LexicographicalComparator:compare(long[],long[])",166,175,"/**
* Compares two long arrays lexicographically.
* @param left first array to compare
* @param right second array to compare
* @return negative if left is less, positive if greater, zero if equal
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,divide,"com.google.common.primitives.UnsignedLongs:divide(long,long)",250,273,"/**
* Divides two long integers with specific handling for edge cases.
* @param dividend the number to be divided
* @param divisor the number by which to divide
* @return the quotient of the division
*/","* Returns dividend / divisor, where the dividend and divisor are treated as unsigned 64-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#divideUnsigned(long, long)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,remainder,"com.google.common.primitives.UnsignedLongs:remainder(long,long)",286,309,"/**
* Computes the remainder of a division operation.
* @param dividend the number to be divided
* @param divisor the number by which to divide
* @return the remainder of the division
*/","* Returns dividend % divisor, where the dividend and divisor are treated as unsigned 64-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#remainderUnsigned(long, long)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,"com.google.common.primitives.UnsignedLong:valueOf(java.lang.String,int)",120,123,"/**
* Converts a string to an unsigned long using a specified radix.
* @param string the string representation of the number
* @param radix the base of the numeral system (e.g., 2 for binary)
* @return UnsignedLong object representing the parsed value
*/","* Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an
   * unsigned {@code long} value in the specified radix.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code long}
   *     value, or {@code radix} is not between {@link Character#MIN_RADIX} and {@link
   *     Character#MAX_RADIX}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,parseUnsignedLong,com.google.common.primitives.UnsignedLongs:parseUnsignedLong(java.lang.String),321,324,"/**
 * Parses an unsigned long from a string.
 * @param string the string to parse
 * @return parsed unsigned long value
 */","* Returns the unsigned {@code long} value represented by the given decimal string.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String)} instead.
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}
   *     value
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Long#parseLong(String)})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,decode,com.google.common.primitives.UnsignedLongs:decode(java.lang.String),381,393,"/**
 * Decodes a string to a long integer.
 * @param stringValue the string representation of the number
 * @return the decoded long value
 * @throws NumberFormatException if the string is not a valid number
 */","* Returns the unsigned {@code long} value represented by the given string.
   *
   * <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:
   *
   * <ul>
   *   <li>{@code 0x}<i>HexDigits</i>
   *   <li>{@code 0X}<i>HexDigits</i>
   *   <li>{@code #}<i>HexDigits</i>
   *   <li>{@code 0}<i>OctalDigits</i>
   * </ul>
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}
   *     value
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isPackagePrivate,com.google.common.reflect.Invokable:isPackagePrivate(),160,162,"/**
 * Checks if access level is package-private.
 * @return true if access level is package-private, false otherwise
 */",Returns true if the element is package-private.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,getKey,com.google.common.collect.ForwardingMapEntry:getKey(),60,64,"/**
 * Returns the key of the entry.
 * @return the key associated with this entry
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,getValue,com.google.common.collect.ForwardingMapEntry:getValue(),66,70,"/**
* Retrieves value from delegate.
* @return value of type V or null if not present
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.ForwardingMapEntry:setValue(java.lang.Object),72,77,"/**
* Sets the value of this entry.
* @param value new value to set
* @return old value of this entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,equals,com.google.common.collect.ForwardingMapEntry:equals(java.lang.Object),79,82,"/**
 * Checks equality with another object using delegation.
 * @param object the object to compare
 * @return true if equal, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,hashCode,com.google.common.collect.ForwardingMapEntry:hashCode(),84,87,"/**
 * Returns the hash code of the delegate object.
 * @return hash code of the delegate
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.ImmutableTypeToInstanceMap:getInstance(java.lang.Class),107,110,"/**
 * Retrieves an instance of the specified type.
 * @param type Class object representing the desired type
 * @return Instance of T or null if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getOwnerType,com.google.common.reflect.Invokable:getOwnerType(),330,333,"/**
 * Returns the owner type as a TypeToken.
 * @return TypeToken representing the declaring class
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.MutableTypeToInstanceMap:getInstance(java.lang.Class),45,48,"/**
 * Retrieves an instance of the specified type.
 * @param type Class object representing the desired type
 * @return Instance of T or null if not available
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,putInstance,"com.google.common.reflect.MutableTypeToInstanceMap:putInstance(java.lang.Class,java.lang.Object)",55,60,"/**
* Stores an instance of a specified type.
* @param type class representing the type of the instance
* @param value the instance to be stored
* @return the stored instance or null if ignored
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,wrap,com.google.common.reflect.TypeToken:wrap(),545,552,"/**
* Wraps the current type in its corresponding wrapper class if it's primitive.
* @return TypeToken with wrapped type or original if not primitive
*/","* Returns the corresponding wrapper type if this is a primitive type; otherwise returns {@code
   * this} itself. Idempotent.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,unwrap,com.google.common.reflect.TypeToken:unwrap(),564,571,"/**
 * Unwraps the current TypeToken if it's a wrapper.
 * @return unwrapped TypeToken or itself if not a wrapper
 */","* Returns the corresponding primitive type if this is a wrapper type; otherwise returns {@code
   * this} itself. Idempotent.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getReturnType,com.google.common.reflect.Invokable:getReturnType(),261,264,"/**
* Retrieves the generic return type.
* @return TypeToken representing the generic return type
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOf,com.google.common.reflect.TypeToken$Bounds:isSubtypeOf(java.lang.reflect.Type),1073,1080,"/**
* Checks if the type is a subtype of the specified supertype.
* @param supertype the type to check against
* @return true if this type is a subtype, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOf,com.google.common.reflect.TypeToken$Bounds:isSupertypeOf(java.lang.reflect.Type),1082,1090,"/**
 * Checks if the current type is a supertype of the given subtype.
 * @param subtype the type to check against
 * @return true if this type is a supertype, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getComponentType,com.google.common.reflect.TypeToken:getComponentType(),577,583,"/**
 * Retrieves the component type of a generic runtime type.
 * @return TypeToken representing the component type, or null if none exists
 */","* Returns the array component type if this type represents an array ({@code int[]}, {@code T[]},
   * {@code <? extends Map<String, Integer>[]>} etc.), or else {@code null} is returned.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOfArrayType,com.google.common.reflect.TypeToken:isSubtypeOfArrayType(java.lang.reflect.GenericArrayType),919,933,"/**
 * Checks if the current type is a subtype of an array type.
 * @param supertype the array type to check against
 * @return true if the current type is a subtype, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOfArray,com.google.common.reflect.TypeToken:isSupertypeOfArray(java.lang.reflect.GenericArrayType),935,948,"/**
* Checks if the current type is a supertype of an array.
* @param subtype the array type to check against
* @return true if this type is a supertype, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSubtypeFromLowerBounds,"com.google.common.reflect.TypeToken:getSubtypeFromLowerBounds(java.lang.Class,java.lang.reflect.Type[])",1216,1224,"/**
 * Retrieves subtype from lower bounds.
 * @param subclass the subclass to check
 * @param lowerBounds array of lower bounds
 * @return TypeToken of the subtype or throws exception if not found
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,typeName,com.google.common.reflect.Types$JavaVersion$4:typeName(java.lang.reflect.Type),652,654,"/**
 * Converts a Type to its string representation.
 * @param type the Type to convert
 * @return the string name of the Type
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,toString,com.google.common.util.concurrent.AbstractExecutionThreadService$1:toString(),151,154,"/**
 * Returns string representation of service with its state.
 * @return formatted string combining service name and state
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,com.google.common.util.concurrent.AbstractFuture:get(),249,254,"/**
 * Retrieves the value from this future.
 * @throws InterruptedException if interrupted while waiting
 * @throws ExecutionException if computation threw an exception
 */","* {@inheritDoc}
   *
   * <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the
   * current thread is interrupted during the call, even if the value is already available.
   *
   * @throws CancellationException {@inheritDoc}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addListener,"com.google.common.util.concurrent.AbstractFuture$TrustedFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",117,120,"/**
 * Adds a listener with an associated executor.
 * @param listener task to be executed asynchronously
 * @param executor executes the listener
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,toString,com.google.common.util.concurrent.AbstractIdleService$DelegateService:toString(),89,92,"/**
 * Returns the string representation of this service.
 * Delegates to the superclass implementation.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:<init>(java.util.concurrent.ScheduledExecutorService),544,547,"/**
 * Constructs a ScheduledListeningDecorator.
 * @param delegate the ScheduledExecutorService to decorate
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,submit,com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.util.concurrent.Callable),45,48,"/**
* Submits a callable task to be executed.
* @param task the callable task to execute
* @return ListenableFuture representing the pending result of the task
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,submitAndAddQueueListener,"com.google.common.util.concurrent.MoreExecutors:submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)",764,771,"/**
* Submits a callable task to an executor and adds a listener to enqueue the result.
* @param executorService the service to execute the task
* @param task the callable task to submit
* @param queue the blocking queue to add the future to upon completion
* @return ListenableFuture representing the submitted task
*/",* Submits the task and adds a listener that adds the future to {@code queue} when it completes.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,awaitRunning,com.google.common.util.concurrent.AbstractExecutionThreadService:awaitRunning(java.time.Duration),213,216,"/**
* Waits for service to start running within given timeout.
* @param timeout maximum time to wait
* @throws TimeoutException if service does not start in time
*/",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,awaitRunning,com.google.common.util.concurrent.AbstractIdleService:awaitRunning(java.time.Duration),177,180,"/**
 * Waits for the service to become running within a specified timeout.
 * @param timeout maximum time to wait
 * @throws TimeoutException if the service does not start in time
 */",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,awaitRunning,com.google.common.util.concurrent.AbstractScheduledService:awaitRunning(java.time.Duration),468,471,"/**
 * Waits for the service to reach running state within a specified timeout.
 * @param timeout maximum time to wait
 * @throws TimeoutException if the service does not start within the timeout
 */",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitRunning,com.google.common.util.concurrent.AbstractService:awaitRunning(java.time.Duration),316,319,"/**
 * Waits for the service to be running within a specified timeout.
 * @param timeout maximum time to wait
 * @throws TimeoutException if the service does not start in time
 */",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,awaitTerminated,com.google.common.util.concurrent.AbstractExecutionThreadService:awaitTerminated(java.time.Duration),237,240,"/**
 * Waits for service termination with a specified timeout.
 * @param timeout maximum time to wait
 * @throws TimeoutException if the service does not terminate within the timeout
 */",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,awaitTerminated,com.google.common.util.concurrent.AbstractIdleService:awaitTerminated(java.time.Duration),201,204,"/**
 * Waits for service termination within a specified timeout.
 * @param timeout maximum time to wait
 * @throws TimeoutException if not terminated in time
 */",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,awaitTerminated,com.google.common.util.concurrent.AbstractScheduledService:awaitTerminated(java.time.Duration),492,495,"/**
 * Waits for service termination within a specified timeout.
 * @param timeout maximum time to wait
 * @throws TimeoutException if the service does not terminate in time
 */",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitTerminated,com.google.common.util.concurrent.AbstractService:awaitTerminated(java.time.Duration),351,354,"/**
 * Waits for service to terminate within specified timeout.
 * @param timeout maximum time to wait
 * @throws TimeoutException if termination does not occur in time
 */",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,doStart,com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:doStart(),255,282,"/**
 * Starts service execution with a named executor and handles exceptions.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,toString,com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:toString(),314,317,"/**
 * Returns string representation of the service.
 * @return Service description as a string
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard:isSatisfied(),160,163,"/**
 * Checks if the current state is at least RUNNING.
 * @return true if state is RUNNING or beyond, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$IsStartableGuard:isSatisfied(),132,135,"/**
 * Checks if the current state is NEW.
 * @return true if state is NEW, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$IsStoppableGuard:isSatisfied(),146,149,"/**
 * Checks if the current state is less than or equal to RUNNING.
 * @return true if satisfied, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$IsStoppedGuard:isSatisfied(),174,177,"/**
* Checks if the current state is terminated or later.
* @return true if state is terminated or beyond, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isRunning,com.google.common.util.concurrent.AbstractService:isRunning(),489,492,"/**
 * Checks if the service is currently running.
 * @return true if the service is running, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,toString,com.google.common.util.concurrent.AbstractService:toString(),515,518,"/**
 * Returns string representation of the object.
 * @return Concatenated class name and state
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,<init>,"com.google.common.util.concurrent.CollectionFuture:<init>(com.google.common.collect.ImmutableCollection,boolean)",41,58,"/**
 * Constructs a CollectionFuture with a collection of ListenableFutures.
 * @param futures collection of ListenableFutures to wait on
 * @param allMustSucceed true if all futures must succeed, false if any failure is acceptable
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,<init>,"com.google.common.util.concurrent.CombinedFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,com.google.common.util.concurrent.AsyncCallable)",38,46,"/**
* Initializes a CombinedFuture with given futures and callable.
* @param futures collection of ListenableFutures to combine
* @param allMustSucceed whether all futures must succeed
* @param listenerExecutor executor for listeners
* @param callable the AsyncCallable to execute upon completion
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,<init>,"com.google.common.util.concurrent.CombinedFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,java.util.concurrent.Callable)",48,56,"/**
 * Initializes a CombinedFuture with given futures and task.
 * @param futures collection of ListenableFutures to combine
 * @param allMustSucceed if true, all futures must succeed; otherwise, at least one success is sufficient
 * @param listenerExecutor executor for listeners
 * @param callable the callable to execute upon future completion
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,collectValueFromNonCancelledFuture,"com.google.common.util.concurrent.AggregateFuture:collectValueFromNonCancelledFuture(int,java.util.concurrent.Future)",280,290,"/**
 * Collects value from a completed future.
 * @param index position of the future in the collection
 * @param future asynchronous computation result
 */","* Collects the result (success or failure) of one input future. The input must not have been
   * cancelled. For details on when this is called, see {@link #collectOneValue}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,getAndAdd,com.google.common.util.concurrent.AtomicDouble:getAndAdd(double),163,166,"/**
* Atomically adds a delta to the current value.
* @param delta value to add
* @return old value before addition
*/","* Atomically adds the given value to the current value.
   *
   * @param delta the value to add
   * @return the previous value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,addAndGet,com.google.common.util.concurrent.AtomicDouble:addAndGet(double),174,177,"/**
 * Adds a value to the current and returns the result.
 * @param delta value to add
 * @return updated sum after addition
 */","* Atomically adds the given value to the current value.
   *
   * @param delta the value to add
   * @return the updated value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,getAndAdd,"com.google.common.util.concurrent.AtomicDoubleArray:getAndAdd(int,double)",180,183,"/**
 * Atomically adds a value to an element at a specific index.
 * @param i the index of the element
 * @param delta the value to add
 * @return the previous value at the specified index
 */","* Atomically adds the given value to the element at index {@code i}.
   *
   * @param i the index
   * @param delta the value to add
   * @return the previous value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,addAndGet,"com.google.common.util.concurrent.AtomicDoubleArray:addAndGet(int,double)",192,195,"/**
 * Adds a delta to the value at index i and returns the new sum.
 * @param i index of the value to update
 * @param delta amount to add
 * @return updated sum after addition
 */","* Atomically adds the given value to the element at index {@code i}.
   *
   * @param i the index
   * @param delta the value to add
   * @return the updated value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,cancel,com.google.common.util.concurrent.ClosingFuture:cancel(boolean),1099,1108,"/**
* Cancels the task execution.
* @param mayInterruptIfRunning true to interrupt running tasks
* @return true if cancellation was successful
*/","* Attempts to cancel execution of this step. This attempt will fail if the step has already
   * completed, has already been cancelled, or could not be cancelled for some other reason. If
   * successful, and this step has not started when {@code cancel} is called, this step should never
   * run.
   *
   * <p>If successful, causes the objects captured by this step (if already started) and its input
   * step(s) for later closing to be closed on their respective {@link Executor}s. If any such calls
   * specified {@link MoreExecutors#directExecutor()}, those objects will be closed synchronously.
   *
   * @param mayInterruptIfRunning {@code true} if the thread executing this task should be
   *     interrupted; otherwise, in-progress tasks are allowed to complete, but the step will be
   *     cancelled regardless
   * @return {@code false} if the step could not be cancelled, typically because it has already
   *     completed normally; {@code true} otherwise",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,finalize,com.google.common.util.concurrent.ClosingFuture:finalize(),2119,2126,"/**
* Closes the future if it is still open.
* Logs a severe warning if an open future leaks.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,becomeSubsumedInto,com.google.common.util.concurrent.ClosingFuture:becomeSubsumedInto(com.google.common.util.concurrent.ClosingFuture$CloseableList),1121,1124,"/**
* Transfers resources to another CloseableList and marks this list as subsumed.
* @param otherCloseables the target CloseableList to transfer resources to
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,findPathTo,"com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,java.util.Set)",684,707,"/**
* Finds a path to the specified node in the lock graph.
* @param node target node to find a path to
* @param seen set of nodes already traversed
* @return ExampleStackTrace representing the path or null if not found
*/","* Performs a depth-first traversal of the graph edges defined by each node's {@code
     * allowedPriorLocks} to find a path between {@code this} and the specified {@code lock}.
     *
     * @return If a path was found, a chained {@link ExampleStackTrace} illustrating the path to the
     *     {@code lock}, or {@code null} if no path was found.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,"com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace)",534,539,"/**
* Constructs a deadlock exception with conflicting lock nodes and stack trace.
* @param node1 first lock graph node involved in the conflict
* @param node2 second lock graph node involved in the conflict
* @param conflictingStackTrace stack trace of the conflicting situation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,create,com.google.common.util.concurrent.ListenableFutureTask:create(java.util.concurrent.Callable),62,64,"/**
* Creates a ListenableFutureTask from a Callable.
* @param callable task to be executed asynchronously
* @return ListenableFutureTask instance wrapping the callable
*/","* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code
   * Callable}.
   *
   * @param callable the callable task
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,create,"com.google.common.util.concurrent.ListenableFutureTask:create(java.lang.Runnable,java.lang.Object)",76,79,"/**
* Creates a ListenableFutureTask with a given Runnable and result.
* @param runnable task to execute asynchronously
* @param result value to be returned after task completion
* @return ListenableFutureTask instance
*/","* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code
   * Runnable}, and arrange that {@code get} will return the given result on successful completion.
   *
   * @param runnable the runnable task
   * @param result the result to return on successful completion. If you don't need a particular
   *     result, consider using constructions of the form: {@code ListenableFuture<?> f =
   *     ListenableFutureTask.create(runnable, null)}
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,addListener,"com.google.common.util.concurrent.ListenableFutureTask:addListener(java.lang.Runnable,java.util.concurrent.Executor)",89,92,"/**
 * Adds a listener with an executor to the execution list.
 * @param listener Runnable task to be executed
 * @param exec Executor to run the listener
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,addListener,"com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:addListener(java.lang.Runnable,java.util.concurrent.Executor)",138,171,"/**
* Adds a listener to be executed after task completion.
* @param listener the task to execute upon completion
* @param exec executor for running the listener
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,done,com.google.common.util.concurrent.ListenableFutureTask:done(),110,113,"/**
 * Executes tasks in the execution list upon completion.
 */",Internal implementation detail used to invoke the listeners.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,create,com.google.common.util.concurrent.ExecutionSequencer:create(),94,96,"/**
 * Creates and returns a new ExecutionSequencer instance.
 * @return ExecutionSequencer object
 */",Creates a new instance.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,from,com.google.common.util.concurrent.FluentFuture:from(com.google.common.util.concurrent.ListenableFuture),133,137,"/**
 * Converts a ListenableFuture to a FluentFuture.
 * @param future the ListenableFuture to convert
 * @return a FluentFuture representing the same computation
 */","* Converts the given {@code ListenableFuture} to an equivalent {@code FluentFuture}.
   *
   * <p>If the given {@code ListenableFuture} is already a {@code FluentFuture}, it is returned
   * directly. If not, it is wrapped in a {@code FluentFuture} that delegates all calls to the
   * original {@code ListenableFuture}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,addFirst,com.google.common.collect.ForwardingDeque:addFirst(java.lang.Object),54,57,"/**
 * Adds an element to the front of the list.
 * @param e the element to add
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,addLast,com.google.common.collect.ForwardingDeque:addLast(java.lang.Object),59,62,"/**
 * Adds an element to the end of the list.
 * @param e the element to be added
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,descendingIterator,com.google.common.collect.ForwardingDeque:descendingIterator(),64,67,"/**
 * Returns an iterator over elements in reverse order.
 * @return Iterator<E> iterating from last to first element
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,getFirst,com.google.common.collect.ForwardingDeque:getFirst(),69,73,"/**
 * Retrieves the first element from the collection.
 * @return the first element or null if the collection is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,getLast,com.google.common.collect.ForwardingDeque:getLast(),75,79,"/**
 * Retrieves the last element from the collection.
 * @return The last element or null if the collection is empty.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,offerFirst,com.google.common.collect.ForwardingDeque:offerFirst(java.lang.Object),81,85,"/**
 * Adds an element to the front of the deque.
 * @param e element to add
 * @return true if the operation succeeded, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,offerLast,com.google.common.collect.ForwardingDeque:offerLast(java.lang.Object),87,91,"/**
* Adds an element to the end of the deque.
* @param e the element to add
* @return true if the element was added, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,peekFirst,com.google.common.collect.ForwardingDeque:peekFirst(),93,96,"/**
 * Retrieves the first element without removing it.
 * @return the first element or null if empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,peekLast,com.google.common.collect.ForwardingDeque:peekLast(),98,101,"/**
* Retrieves last element without removing it.
* @return Last element or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,pollFirst,com.google.common.collect.ForwardingDeque:pollFirst(),103,107,"/**
* Retrieves and removes the first element.
* @return the first element or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,pollLast,com.google.common.collect.ForwardingDeque:pollLast(),109,113,"/**
 * Removes and returns the last element of the deque.
 * @return the last element, or null if the deque is empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,pop,com.google.common.collect.ForwardingDeque:pop(),115,120,"/**
 * Removes and returns the top element from the stack.
 * @return the top element of the stack, or null if empty
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,push,com.google.common.collect.ForwardingDeque:push(java.lang.Object),122,125,"/**
 * Pushes an element onto the stack.
 * @param e the element to be pushed
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeFirst,com.google.common.collect.ForwardingDeque:removeFirst(),127,132,"/**
* Removes and returns the first element.
* @return the first element or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeLast,com.google.common.collect.ForwardingDeque:removeLast(),134,139,"/**
* Removes and returns the last element.
* @return removed element or null if list is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeFirstOccurrence,com.google.common.collect.ForwardingDeque:removeFirstOccurrence(java.lang.Object),141,145,"/**
 * Removes the first occurrence of the specified element.
 * @param o element to be removed
 * @return true if an element was removed, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeLastOccurrence,com.google.common.collect.ForwardingDeque:removeLastOccurrence(java.lang.Object),147,151,"/**
* Removes the last occurrence of an element.
* @param o element to be removed
* @return true if the element was found and removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,delegate,com.google.common.collect.ForwardingQueue:delegate(),54,55,"/**
 * Returns the delegate queue instance.
 * @return Queue implementation to be used
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,addListener,"com.google.common.util.concurrent.ForwardingListenableFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",42,45,"/**
 * Adds a listener with an executor.
 * @param listener task to be executed asynchronously
 * @param exec executor to run the listener
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,delegate,com.google.common.util.concurrent.ForwardingFuture:delegate(),43,44,"/**
 * Delegates task execution to a future.
 * @return Future representing pending completion of task
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,nonCancellationPropagating,com.google.common.util.concurrent.Futures:nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture),785,793,"/**
* Wraps a future to prevent cancellation from propagating.
* @param future the original ListenableFuture
* @return a wrapped ListenableFuture that does not propagate cancellation
*/","* Returns a {@code ListenableFuture} whose result is set from the supplied future when it
   * completes. Cancelling the supplied future will also cancel the returned future, but cancelling
   * the returned future will have no effect on the supplied future.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,reload,"com.google.common.cache.CacheLoader:reload(java.lang.Object,java.lang.Object)",96,101,"/**
* Reloads value by key if it matches the old value.
* @param key unique identifier for the value
* @param oldValue expected current value
* @return ListenableFuture with new loaded value
*/","* Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This
   * method is called when an existing cache entry is refreshed by {@link
   * CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}.
   *
   * <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be
   * overridden with an asynchronous implementation when using {@link
   * CacheBuilder#refreshAfterWrite}.
   *
   * <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>.
   *
   * @param key the non-null key whose value should be loaded
   * @param oldValue the non-null old value corresponding to {@code key}
   * @return the future new value associated with {@code key}; <b>must not be null, must not return
   *     null</b>
   * @throws Exception if unable to reload the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,applyClosingFunction,"com.google.common.util.concurrent.ClosingFuture$CloseableList:applyClosingFunction(com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.lang.Object)",2182,2193,"/**
* Applies a transformation function to an input and ensures resources are closed.
* @param transformation function that performs the operation and may require closing
* @param input data to be transformed
* @return ListenableFuture of the transformed result
* @throws Exception if transformation fails
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,fullyFailedFuture,com.google.common.cache.LocalCache$LoadingValueReference:fullyFailedFuture(java.lang.Throwable),3529,3531,"/**
 * Creates an immediately failed future.
 * @param t the exception causing the failure
 * @return a ListenableFuture that is already failed with the given exception
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,wrapAndThrowExceptionOrError,"com.google.common.util.concurrent.FuturesGetChecked:wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class)",205,214,"/**
 * Wraps and throws an exception or error.
 * @param cause the original throwable
 * @param exceptionClass the class of the exception to wrap with
 * @throws X the wrapped exception
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,hasConstructorUsableByGetChecked,com.google.common.util.concurrent.FuturesGetChecked:hasConstructorUsableByGetChecked(java.lang.Class),221,229,"/**
 * Checks if the given exception class has a constructor usable by getChecked.
 * @param exceptionClass the exception class to check
 * @return true if constructor is usable, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,enqueue,com.google.common.util.concurrent.ListenerCallQueue:enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event),89,91,"/**
 * Adds an event to the queue.
 * @param event the event to be enqueued
 */","* Enqueues an event to be run on currently known listeners.
   *
   * <p>The {@code toString} method of the Event itself will be used to describe the event in the
   * case of an error.
   *
   * @param event the callback to execute on {@link #dispatch}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,enqueue,"com.google.common.util.concurrent.ListenerCallQueue:enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.String)",99,101,"/**
 * Adds an event to the queue with a label.
 * @param event the event to be enqueued
 * @param label identifier for the event
 */","* Enqueues an event to be run on currently known listeners, with a label.
   *
   * @param event the callback to execute on {@link #dispatch}
   * @param label a description of the event to use in the case of an error",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,dispatchListenerEvents,com.google.common.util.concurrent.AbstractService:dispatchListenerEvents(),524,528,"/**
 * Dispatches listener events if monitor is not occupied by current thread.
 */","* Attempts to execute all the listeners in {@link #listeners} while not holding the {@link
   * #monitor}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,dispatchListenerEvents,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:dispatchListenerEvents(),752,757,"/**
 * Dispatches pending listener events.
 * Ensures the monitor is not held by the current thread.
 */",Attempts to execute all the listeners in {@link #listeners}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,signalNextWaiter,com.google.common.util.concurrent.Monitor:signalNextWaiter(),1090,1098,"/**
 * Signals the next waiter whose condition is satisfied.
 * Iterates through active guards and signals the first one that meets the criteria.
 */","* Signals some other thread waiting on a satisfied guard, if one exists.
   *
   * <p>We manage calls to this method carefully, to signal only when necessary, but never losing a
   * signal, which is the classic problem of this kind of concurrency construct. We must signal if
   * the current thread is about to relinquish the lock and may have changed the state protected by
   * the monitor, thereby causing some guard to be satisfied.
   *
   * <p>In addition, any thread that has been signalled when its guard was satisfied acquires the
   * responsibility of signalling the next thread when it again relinquishes the lock. Unlike a
   * normal Condition, there is no guarantee that an interrupted thread has not been signalled,
   * since the concurrency control must manage multiple Conditions. So this method must generally be
   * called when waits are interrupted.
   *
   * <p>On the other hand, if a signalled thread wakes up to discover that its guard is still not
   * satisfied, it does *not* need to call this method before returning to wait. This can only
   * happen due to spurious wakeup (ignorable) or another thread acquiring the lock before the
   * current thread can and returning the guard to the unsatisfied state. In the latter case the
   * other thread (last thread modifying the state protected by the monitor) takes over the
   * responsibility of signalling the next waiter.
   *
   * <p>This method must not be called from within a beginWaitingFor/endWaitingFor block, or else
   * the current thread's guard might be mistakenly signalled, leading to a lost signal.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,toString,com.google.common.util.concurrent.RateLimiter:toString(),456,459,"/**
* Returns string representation of RateLimiter.
* @return formatted string showing stable rate in qps
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,newProxy,"com.google.common.util.concurrent.SimpleTimeLimiter:newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit)",75,100,"/**
 * Creates a proxy with timeout handling.
 * @param target the object to be proxied
 * @param interfaceType the interface type of the proxy
 * @param timeoutDuration the duration of the timeout
 * @param timeoutUnit the time unit for the timeout
 * @return a new proxy instance implementing the specified interface
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,useDaemonThreadFactory,com.google.common.util.concurrent.MoreExecutors:useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor),291,299,"/**
 * Configures the ThreadPoolExecutor to use daemon threads.
 * @param executor the ThreadPoolExecutor to configure
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeoutFuture.java,create,"com.google.common.util.concurrent.TimeoutFuture:create(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",43,53,"/**
* Creates a future with a timeout.
* @param delegate the original future to wrap
* @param time duration before timing out
* @param unit time unit for the timeout
* @param scheduledExecutor executor for scheduling the timeout
* @return ListenableFuture that times out after specified duration
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,submitAsync,"com.google.common.util.concurrent.Futures:submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)",216,221,"/**
* Submits an asynchronous callable for execution.
* @param callable the task to execute asynchronously
* @param executor the executor to run the task
* @return ListenableFuture representing the pending result
*/","* Executes {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 23.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,scheduleAsync,"com.google.common.util.concurrent.Futures:scheduleAsync(com.google.common.util.concurrent.AsyncCallable,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",243,260,"/**
* Schedules an asynchronous callable with a delay using a provided executor service.
* @param callable the callable to execute asynchronously
* @param delay time to wait before execution
* @param timeUnit unit of time for the delay
* @param executorService the executor service to use for scheduling
* @return ListenableFuture representing the scheduled task
*/","* Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 23.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractListeningExecutorService.java,newTaskFor,com.google.common.util.concurrent.AbstractListeningExecutorService:newTaskFor(java.util.concurrent.Callable),56,60,"/**
* Creates a new task for the given callable.
* @param callable the callable to execute
* @return a RunnableFuture object representing the task
*/",* @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0),,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,submit,"com.google.common.util.concurrent.Futures:submit(java.util.concurrent.Callable,java.util.concurrent.Executor)",189,194,"/**
* Submits a callable task to an executor and returns a ListenableFuture.
* @param callable the task to execute
* @param executor the executor to run the task
* @return ListenableFuture for the task result
*/","* Executes {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractListeningExecutorService.java,newTaskFor,"com.google.common.util.concurrent.AbstractListeningExecutorService:newTaskFor(java.lang.Runnable,java.lang.Object)",46,51,"/**
* Creates a new task for the given runnable and value.
* @param runnable task to execute
* @param value result of the task
* @return RunnableFuture object representing the task
*/",* @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0),,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,submit,"com.google.common.util.concurrent.Futures:submit(java.lang.Runnable,java.util.concurrent.Executor)",203,208,"/**
* Submits a Runnable task to an Executor.
* @param runnable the task to execute
* @param executor the execution environment
* @return ListenableFuture representing the task's completion
*/","* Executes {@code runnable} on the specified {@code executor}, returning a {@code Future} that
   * will complete after execution.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryAcquireUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,java.time.Duration)",425,429,"/**
* Attempts to acquire a semaphore permit uninterruptibly within a specified timeout.
* @param semaphore the semaphore to acquire
* @param timeout maximum time to wait for a permit
* @return true if acquired, false otherwise
*/","* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1,
   * timeout, unit)} uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,getEnumIfPresent,"com.google.common.base.Platform:getEnumIfPresent(java.lang.Class,java.lang.String)",41,54,"/**
* Retrieves an enum constant by its name if present.
* @param enumClass the class of the enum type
* @param value the name of the enum constant
* @return Optional containing the enum constant or absent if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,<init>,com.google.common.collect.FluentIterable:<init>(java.lang.Iterable),124,126,"/**
 * Wraps an Iterable with optional handling.
 * @param iterable the Iterable to wrap
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,first,com.google.common.collect.FluentIterable:first(),512,516,"/**
 * Retrieves the first element from the collection.
 * @return Optional containing the first element or absent if empty
 */","* Returns an {@link Optional} containing the first element in this fluent iterable. If the
   * iterable is empty, {@code Optional.absent()} is returned.
   *
   * <p><b>{@code Stream} equivalent:</b> if the goal is to obtain any element, {@link
   * Stream#findAny}; if it must specifically be the <i>first</i> element, {@code Stream#findFirst}.
   *
   * @throws NullPointerException if the first element is null; if this is a possibility, use {@code
   *     iterator().next()} or {@link Iterables#getFirst} instead.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,last,com.google.common.collect.FluentIterable:last(),529,562,"/**
* Returns the last element of the iterable.
* @return Optional containing the last element or absent if empty
*/","* Returns an {@link Optional} containing the last element in this fluent iterable. If the
   * iterable is empty, {@code Optional.absent()} is returned. If the underlying {@code iterable} is
   * a {@link List} with {@link java.util.RandomAccess} support, then this operation is guaranteed
   * to be {@code O(1)}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.reduce((a, b) -> b)}.
   *
   * @throws NullPointerException if the last element is null; if this is a possibility, use {@link
   *     Iterables#getLast} instead.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,tryFind,"com.google.common.collect.Iterators:tryFind(java.util.Iterator,com.google.common.base.Predicate)",775,785,"/**
* Searches for an element in the iterator that matches the predicate.
* @param iterator source of elements to search through
* @param predicate condition to match elements against
* @return Optional containing the first matching element, or absent if none found
*/","* Returns an {@link Optional} containing the first element in {@code iterator} that satisfies the
   * given predicate, if such an element exists. If no such element is found, an empty {@link
   * Optional} will be returned from this method and the iterator will be left exhausted: its {@code
   * hasNext()} method will return {@code false}.
   *
   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}
   * is matched in {@code iterator}, a NullPointerException will be thrown.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,expectedNodeCount,com.google.common.graph.GraphBuilder:expectedNodeCount(int),138,142,"/**
* Sets the expected node count.
* @param expectedNodeCount the expected number of nodes, must be non-negative
* @return this GraphBuilder instance for method chaining
*/","* Specifies the expected number of nodes in the graph.
   *
   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,expectedNodeCount,com.google.common.graph.NetworkBuilder:expectedNodeCount(int),154,158,"/**
* Sets the expected number of nodes.
* @param expectedNodeCount non-negative integer representing expected node count
* @return NetworkBuilder instance with updated expected node count
*/","* Specifies the expected number of nodes in the network.
   *
   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,expectedEdgeCount,com.google.common.graph.NetworkBuilder:expectedEdgeCount(int),165,169,"/**
* Sets the expected edge count.
* @param expectedEdgeCount non-negative integer representing expected edges
* @return NetworkBuilder instance for method chaining
*/","* Specifies the expected number of edges in the network.
   *
   * @throws IllegalArgumentException if {@code expectedEdgeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,expectedNodeCount,com.google.common.graph.ValueGraphBuilder:expectedNodeCount(int),142,146,"/**
* Sets the expected node count.
* @param expectedNodeCount estimated number of nodes
* @return this builder instance
*/","* Specifies the expected number of nodes in the graph.
   *
   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource$ByteArrayByteSource:sizeIfKnown(),600,603,"/**
 * Returns the known size as an Optional.
 * @return Optional containing the size if known, otherwise empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lengthIfKnown,com.google.common.io.CharSource$CharSequenceCharSource:lengthIfKnown(),565,568,"/**
 * Returns the length of the sequence if known.
 * @return Optional containing the length as Long, or empty if not known
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,sizeIfKnown,com.google.common.io.Files$FileByteSource:sizeIfKnown(),134,141,"/**
* Returns file size if known.
* @return Optional containing file length or absent if not a file
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,sizeIfKnown,com.google.common.io.MoreFiles$PathByteSource:sizeIfKnown(),126,143,"/**
 * Returns file size if known.
 * @return Optional containing file size in bytes, or absent if not applicable
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createConstantUtf8,"com.google.common.net.MediaType:createConstantUtf8(java.lang.String,java.lang.String)",115,119,"/**
 * Creates a constant UTF-8 MediaType.
 * @param type the main type of the media
 * @param subtype the subtype of the media
 * @return a MediaType with UTF-8 charset
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,any,"com.google.common.collect.Iterables:any(java.lang.Iterable,com.google.common.base.Predicate)",627,630,"/**
* Checks if any element in the iterable matches the given predicate.
* @param iterable collection of elements to check
* @param predicate condition to evaluate each element against
* @return true if any element matches, false otherwise
*/","* Returns {@code true} if any element in {@code iterable} satisfies the predicate.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/SmallCharMatcher.java,from,"com.google.common.base.SmallCharMatcher:from(java.util.BitSet,java.lang.String)",86,109,"/**
* Creates a CharMatcher from a BitSet of characters.
* @param chars BitSet representing the set of characters to match
* @param description description of the character matcher
* @return CharMatcher instance based on the provided BitSet and description
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,containsPattern,com.google.common.base.Predicates:containsPattern(java.lang.String),291,294,"/**
* Creates a predicate to check if a CharSequence contains a given pattern.
* @param pattern the pattern to search for
* @return Predicate checking for pattern presence
*/","* Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested
   * contains any match for the given regular expression pattern. The test used is equivalent to
   * {@code Pattern.compile(pattern).matcher(arg).find()}
   *
   * @throws IllegalArgumentException if the pattern is invalid
   * @since 3.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$Column$EntrySet:retainAll(java.util.Collection),557,560,"/**
 * Retains only elements contained in the specified collection.
 * @param c collection of elements to retain
 * @return true if this collection changed as a result
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$Column$KeySet:retainAll(java.util.Collection),631,634,"/**
* Retains only elements in this set that are contained in the specified collection.
* @param c collection containing elements to be retained
* @return true if this set changed as a result of the call
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$Column$Values:retainAll(java.util.Collection),658,661,"/**
* Retains only elements in this set that are contained in the specified collection.
* @param c collection containing elements to be retained
* @return true if this set changed as a result of the call
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfPossible,"com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable,java.lang.Class)",167,174,"/**
 * Propagates the given throwable if it is an instance of the specified type.
 * @param throwable the throwable to check and possibly throw
 * @param declaredType the type to check against
 * @throws X if throwable is an instance of declaredType
 */","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
   * RuntimeException}, {@link Error}, or {@code declaredType}.
   *
   * <p><b>Discouraged</b> in favor of calling {@link #throwIfInstanceOf} and {@link
   * #throwIfUnchecked}.
   *
   * @param throwable the Throwable to possibly propagate
   * @param declaredType the single checked exception type declared by the calling method
   * @deprecated Use a combination of {@link #throwIfInstanceOf} and {@link #throwIfUnchecked},
   *     which togther provide the same behavior except that they reject {@code null}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,flattenHierarchy,com.google.common.eventbus.SubscriberRegistry:flattenHierarchy(java.lang.Class),240,243,"/**
* Retrieves flattened class hierarchy from cache.
* @param concreteClass starting class to flatten
* @return ImmutableSet of classes in the hierarchy
*/","* Flattens a class's type hierarchy into a set of {@code Class} objects including all
   * superclasses (transitively) and all interfaces implemented by these superclasses.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,platformThreadFactory,com.google.common.util.concurrent.MoreExecutors:platformThreadFactory(),783,800,"/**
 * Provides a platform-specific thread factory.
 * Returns the default thread factory unless running on Google App Engine.
 * @return ThreadFactory instance suitable for the current environment
 */","* Returns a default thread factory used to create new threads.
   *
   * <p>When running on AppEngine with access to <a
   * href=""https://cloud.google.com/appengine/docs/standard/java/javadoc/"">AppEngine legacy
   * APIs</a>, this method returns {@code ThreadManager.currentRequestThreadFactory()}. Otherwise,
   * it returns {@link Executors#defaultThreadFactory()}.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,enqueueNotification,"com.google.common.cache.LocalCache$Segment:enqueueNotification(java.lang.Object,int,java.lang.Object,int,com.google.common.cache.RemovalCause)",2625,2636,"/**
* Enqueues a removal notification for a cache entry.
* @param key the key of the removed entry, may be null
* @param hash the hash code of the key
* @param value the value of the removed entry, may be null
* @param weight the weight of the removed entry
* @param cause the reason for removal
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,spliterator,com.google.common.collect.AbstractTable$Values:spliterator(),212,215,"/**
 * Returns a spliterator over the values.
 * @return Spliterator for iterating over values
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,spliterator,com.google.common.collect.ImmutableMapKeySet:spliterator(),53,56,"/**
 * Returns a spliterator for the keys of this map.
 * @return Spliterator over the keys
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createValues,com.google.common.collect.Maps$AsMapView:createValues(),901,904,"/**
 * Transforms set elements using function.
 * @return Collection of transformed values
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createValues,com.google.common.collect.Multimaps$TransformedEntriesMultimap:createValues(),1604,1609,"/**
* Transforms multimap entries into V2 values.
* @return Collection of transformed V2 objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,createValues,com.google.common.collect.Tables$TransformedTable:createValues(),505,508,"/**
 * Transforms values from source table using provided function.
 * @return Collection of transformed V2 objects
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:remove(java.lang.Object),1441,1450,"/**
* Removes entry by key from map if present.
* @param o object to be removed, expected to be an Entry
* @return true if the entry was removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,remove,com.google.common.collect.Collections2$FilteredCollection:remove(java.lang.Object),195,198,"/**
 * Removes an element from the collection.
 * @param element the element to be removed
 * @return true if the element was present and removed, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,contains,com.google.common.collect.FluentIterable:contains(java.lang.Object),356,358,"/**
 * Checks if the delegate iterable contains the specified target.
 * @param target object to search for in the delegate
 * @return true if target is found, false otherwise
 */","* Returns {@code true} if this fluent iterable contains any object for which {@code
   * equals(target)} is true.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.anyMatch(Predicate.isEqual(target))}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$AsMapView:get(java.lang.Object),916,919,"/**
 * Retrieves value by key.
 * @param key key to search for
 * @return associated value or null if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$NavigableAsMapView:get(java.lang.Object),1074,1077,"/**
 * Retrieves value by key.
 * @param key unique identifier for the value
 * @return associated value or null if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterFiltered,"com.google.common.collect.Multimaps:filterFiltered(com.google.common.collect.FilteredSetMultimap,com.google.common.base.Predicate)",2235,2241,"/**
 * Filters a multimap based on combined predicates.
 * @param multimap the original filtered multimap
 * @param entryPredicate additional predicate for entries
 * @return a new FilteredEntrySetMultimap with combined filtering
 */","* Support removal operations when filtering a filtered multimap. Since a filtered multimap has
   * iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would
   * lead to a multimap whose removal operations would fail. This method combines the predicates to
   * avoid that problem.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterKeys,"com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.ListMultimap,com.google.common.base.Predicate)",2067,2077,"/**
 * Filters keys in a ListMultimap based on a predicate.
 * @param unfiltered the original ListMultimap to filter
 * @param keyPredicate the predicate to test keys against
 * @return a new ListMultimap with filtered keys
 */","* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,filter,com.google.common.collect.FluentIterable:filter(java.lang.Class),431,434,"/**
* Filters elements by class type.
* @param type class to filter elements by
* @return FluentIterable of filtered elements
*/","* Returns the elements from this fluent iterable that are instances of class {@code type}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}.
   * This does perform a little more work than necessary, so another option is to insert an
   * unchecked cast at some later point:
   *
   * {@snippet :
   * @SuppressWarnings(""unchecked"") // safe because of ::isInstance check
   * ImmutableList<NewType> result =
   *     (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());
   * }",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,<init>,"com.google.common.collect.Iterators$MergingIterator:<init>(java.lang.Iterable,java.util.Comparator)",1323,1338,"/**
* Initializes a MergingIterator with multiple iterators and a comparator.
* @param iterators collection of iterators to merge
* @param itemComparator comparator for elements within the iterators
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,entryIterator,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:entryIterator(),505,558,"/**
* Returns an iterator over complement ranges.
* @return Iterator of Entry objects representing complement ranges
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,descendingEntryIterator,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:descendingEntryIterator(),560,620,"/**
 * Returns an iterator over entries in descending order.
 * @return Iterator of Map.Entry objects representing ranges
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,descendingEntryIterator,com.google.common.collect.TreeRangeSet$RangesByUpperBound:descendingEntryIterator(),402,431,"/**
 * Returns an iterator for entries in descending order based on the upper bound.
 * @return Iterator of Map.Entry with Cut and Range
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedSet:removeAll(java.util.Collection),611,628,"/**
 * Removes all elements in the specified collection from this set.
 * @param c collection containing elements to be removed
 * @return true if any element was removed, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,standardRemoveAll,com.google.common.collect.ForwardingSet:standardRemoveAll(java.util.Collection),76,79,"/**
* Removes all elements in the specified collection from this set.
* @param collection elements to be removed
* @return true if any element was removed
*/","* A sensible definition of {@link #removeAll} in terms of {@link #iterator} and {@link #remove}.
   * If you override {@code iterator} or {@code remove}, you may wish to override {@link #removeAll}
   * to forward to this implementation.
   *
   * @since 7.0 (this version overrides the {@code ForwardingCollection} version as of 12.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,removeAll,com.google.common.collect.Sets$ImprovedAbstractSet:removeAll(java.util.Collection),84,87,"/**
 * Removes all elements in the specified collection from this set.
 * @param c collection containing elements to be removed
 * @return true if any elements were removed
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,clear,com.google.common.collect.Collections2$FilteredCollection:clear(),149,152,"/**
 * Removes elements from unfiltered that match the predicate.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,removeAll,com.google.common.collect.FilteredMultimapValues:removeAll(java.util.Collection),76,81,"/**
* Removes all entries with values in the specified collection.
* @param c collection of values to remove
* @return true if any elements were removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,retainAll,com.google.common.collect.FilteredMultimapValues:retainAll(java.util.Collection),83,88,"/**
* Retains only entries whose values are in the specified collection.
* @param c collection of values to retain
* @return true if this collection changed as a result of the call
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,replaceValues,"com.google.common.collect.AbstractMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",103,110,"/**
* Replaces the value associated with a key.
* @param key the key to replace values for
* @param values the new values to associate with the key
* @return the previous collection of values or null if none existed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,"com.google.common.collect.LinkedListMultimap:putAll(java.lang.Object,java.lang.Iterable)",78,91,"/**
 * Adds all values to the collection associated with the specified key.
 * @param key the key under which to store the values
 * @param values an iterable of values to be added
 * @return true if any values were added, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,create,com.google.common.collect.EnumMultiset:create(java.lang.Iterable),66,72,"/**
* Creates an EnumMultiset from an iterable of enums.
* @param elements iterable containing enum elements
* @return EnumMultiset with counts of each enum element
*/","* Creates a new {@code EnumMultiset} containing the specified elements.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain
   * @throws IllegalArgumentException if {@code elements} is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,addAll,com.google.common.collect.EvictingQueue:addAll(java.util.Collection),117,126,"/**
 * Adds all elements from a collection to this set.
 * If the collection size exceeds maxSize, clears the set and adds the remaining elements.
 * @param collection elements to add
 * @return true if any element was added, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newLinkedList,com.google.common.collect.Lists:newLinkedList(java.lang.Iterable),250,256,"/**
* Creates a new LinkedList from an iterable of elements.
* @param elements the iterable containing elements to add
* @return a LinkedList containing the elements
*/","* Creates a <i>mutable</i> {@code LinkedList} instance containing the given elements; a very thin
   * shortcut for creating an empty list then calling {@link Iterables#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link
   * FluentIterable} and call {@code elements.toList()}.)
   *
   * <p><b>Performance note:</b> {@link ArrayList} and {@link java.util.ArrayDeque} consistently
   * outperform {@code LinkedList} except in certain rare and specific situations. Unless you have
   * spent a lot of time benchmarking your specific needs, use one of those instead.
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use
   * the {@code LinkedList} {@linkplain LinkedList#LinkedList(Collection) constructor} directly,
   * taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newArrayDeque,com.google.common.collect.Queues:newArrayDeque(java.lang.Iterable),80,87,"/**
* Creates a new ArrayDeque from an Iterable.
* @param elements the source iterable of elements
* @return a new ArrayDeque containing the elements
*/","* Creates an {@code ArrayDeque} containing the elements of the specified iterable, in the order
   * they are returned by the iterable's iterator.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newConcurrentLinkedQueue,com.google.common.collect.Queues:newConcurrentLinkedQueue(java.lang.Iterable),102,112,"/**
* Creates a ConcurrentLinkedQueue from an Iterable.
* @param elements the source of elements to add to the queue
* @return a new ConcurrentLinkedQueue containing the specified elements
*/","* Creates a {@code ConcurrentLinkedQueue} containing the elements of the specified iterable, in
   * the order they are returned by the iterable's iterator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newLinkedBlockingDeque,com.google.common.collect.Queues:newLinkedBlockingDeque(java.lang.Iterable),146,155,"/**
* Creates a LinkedBlockingDeque from an Iterable.
* @param elements the source of elements for the deque
* @return a new LinkedBlockingDeque containing the elements
*/","* Creates a {@code LinkedBlockingDeque} with a capacity of {@link Integer#MAX_VALUE}, containing
   * the elements of the specified iterable, in the order they are returned by the iterable's
   * iterator.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newLinkedBlockingQueue,com.google.common.collect.Queues:newLinkedBlockingQueue(java.lang.Iterable),185,194,"/**
* Creates a LinkedBlockingQueue from an Iterable.
* @param elements the elements to add to the queue
* @return a LinkedBlockingQueue containing the specified elements
*/","* Creates a {@code LinkedBlockingQueue} with a capacity of {@link Integer#MAX_VALUE}, containing
   * the elements of the specified iterable, in the order they are returned by the iterable's
   * iterator.
   *
   * @param elements the elements that the queue should contain, in order
   * @return a new {@code LinkedBlockingQueue} containing those elements",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newPriorityBlockingQueue,com.google.common.collect.Queues:newPriorityBlockingQueue(java.lang.Iterable),223,234,"/**
* Creates a PriorityBlockingQueue from an iterable of comparable elements.
* @param elements the source iterable containing elements to be added to the queue
* @return a PriorityBlockingQueue containing all elements from the iterable
*/","* Creates a {@code PriorityBlockingQueue} containing the given elements.
   *
   * <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue},
   * this priority queue will be ordered according to the same ordering.
   *
   * @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable}
   *     in 15.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newPriorityQueue,com.google.common.collect.Queues:newPriorityQueue(java.lang.Iterable),259,268,"/**
* Creates a priority queue from an iterable of comparable elements.
* @param elements the source iterable containing elements to add
* @return a PriorityQueue with the specified elements
*/","* Creates a {@code PriorityQueue} containing the given elements.
   *
   * <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue},
   * this priority queue will be ordered according to the same ordering.
   *
   * @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable}
   *     in 15.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newEnumSet,"com.google.common.collect.Sets:newEnumSet(java.lang.Iterable,java.lang.Class)",159,164,"/**
* Creates an EnumSet from an iterable.
* @param iterable collection of enum elements
* @param elementType class of the enum type
* @return EnumSet containing elements from iterable
*/","* Returns a new, <i>mutable</i> {@code EnumSet} instance containing the given elements in their
   * natural order. This method behaves identically to {@link EnumSet#copyOf(Collection)}, but also
   * accepts non-{@code Collection} iterables and empty iterables.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newConcurrentHashSet,com.google.common.collect.Sets:newConcurrentHashSet(java.lang.Iterable),296,300,"/**
* Creates a concurrent hash set from an iterable.
* @param elements the iterable providing initial elements
* @return a new ConcurrentHashSet containing all elements
*/","* Creates a thread-safe set backed by a hash map and containing the given elements. The set is
   * backed by a {@link ConcurrentHashMap} instance, and thus carries the same concurrency
   * guarantees.
   *
   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The
   * set is serializable.
   *
   * @param elements the elements that the set should contain
   * @return a new thread-safe set containing those elements (minus duplicates)
   * @throws NullPointerException if {@code elements} or any of its contents is null
   * @since 15.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newLinkedHashSet,com.google.common.collect.Sets:newLinkedHashSet(java.lang.Iterable),337,346,"/**
* Creates a LinkedHashSet from an iterable.
* @param elements the iterable of elements to add
* @return a LinkedHashSet containing the elements
*/","* Creates a <i>mutable</i> {@code LinkedHashSet} instance containing the given elements in order.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableSet#copyOf(Iterable)} instead.
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method.
   * Instead, use the {@code LinkedHashSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.
   *
   * <p>Overall, this method is not very useful and will likely be deprecated in the future.
   *
   * @param elements the elements that the set should contain, in order
   * @return a new {@code LinkedHashSet} containing those elements (minus duplicates)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newTreeSet,com.google.common.collect.Sets:newTreeSet(java.lang.Iterable),411,419,"/**
* Creates a TreeSet from an iterable of comparable elements.
* @param elements the iterable containing elements to add
* @return a TreeSet containing the provided elements
*/","* Creates a <i>mutable</i> {@code TreeSet} instance containing the given elements sorted by their
   * natural ordering.
   *
   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableSortedSet#copyOf(Iterable)}
   * instead.
   *
   * <p><b>Note:</b> If {@code elements} is a {@code SortedSet} with an explicit comparator, this
   * method has different behavior than {@link TreeSet#TreeSet(SortedSet)}, which returns a {@code
   * TreeSet} with that comparator.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,
   * use the {@code TreeSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.
   *
   * <p>This method is just a small convenience for creating an empty set and then calling {@link
   * Iterables#addAll}. This method is not very useful and will likely be deprecated in the future.
   *
   * @param elements the elements that the set should contain
   * @return a new {@code TreeSet} containing those elements (minus duplicates)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,next,com.google.common.collect.TreeTraverser$BreadthFirstIterator:next(),288,293,"/**
 * Retrieves and removes the next element from the queue.
 * Adds all children of the removed element to the queue.
 * @return the next element in the iteration
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,castOrCopyToCollection,com.google.common.collect.Iterables:castOrCopyToCollection(java.lang.Iterable),313,318,"/**
* Converts an Iterable to a Collection, casting if possible.
* @param iterable the source Iterable
* @return a Collection representation of the input Iterable
*/","* Converts an iterable into a collection. If the iterable is already a collection, it is
   * returned. Otherwise, an {@link java.util.ArrayList} is created with the contents of the
   * iterable in the same iteration order.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,getCopy,com.google.common.collect.LinkedListMultimap:getCopy(java.lang.Object),648,650,"/**
* Returns an unmodifiable list of values for a given key.
* @param key the key to look up values for
* @return an unmodifiable list of values associated with the key
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayList,com.google.common.collect.Lists:newArrayList(java.lang.Iterable),130,138,"/**
 * Creates a new ArrayList from an iterable.
 * @param elements the iterable source of elements
 * @return a new ArrayList containing the elements
 */","* Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin
   * shortcut for creating an empty list then calling {@link Iterables#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link
   * FluentIterable} and call {@code elements.toList()}.)
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use
   * the {@code ArrayList} {@linkplain ArrayList#ArrayList(Collection) constructor} directly, taking
   * advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredEntryMap$KeySet:toArray(),3108,3112,"/**
* Converts collection to array.
* @return Object array containing all elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredEntryMap$KeySet:toArray(java.lang.Object[]),3114,3118,"/**
* Converts the collection to an array.
* @param array target array or null for a new one
* @return array containing the elements of this collection
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredMapValues:toArray(),2958,2962,"/**
 * Converts collection to array.
 * @return array containing all elements
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredMapValues:toArray(java.lang.Object[]),2964,2968,"/**
* Converts this collection to an array.
* @param array target array to hold the elements
* @return array containing all elements of this collection
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:retainAll(java.util.Collection),967,978,"/**
* Retains only the specified columns.
* @param c collection of entries to retain
* @return true if this map was modified as a result
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:removeAll(java.util.Collection),998,1009,"/**
* Removes all columns contained in the specified collection.
* @param c collection of column keys to be removed
* @return true if any columns were removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:retainAll(java.util.Collection),1011,1022,"/**
* Retains only the columns present in the specified collection.
* @param c collection of column keys to retain
* @return true if any columns were removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newHashSet,com.google.common.collect.Sets:newHashSet(java.lang.Iterable),225,230,"/**
* Creates a HashSet from an Iterable.
* @param elements the iterable source of elements
* @return a new HashSet containing the elements
*/","* Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin
   * convenience for creating an empty set then calling {@link Collection#addAll} or {@link
   * Iterables#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableSet#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link
   * FluentIterable} and call {@code elements.toSet()}.)
   *
   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, use {@link #newEnumSet(Iterable, Class)}
   * instead.
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method.
   * Instead, use the {@code HashSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.
   *
   * <p>Overall, this method is not very useful and will likely be deprecated in the future.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,toArray,com.google.common.collect.Collections2$FilteredCollection:toArray(),227,231,"/**
* Converts iterator to array.
* @return Object array containing all elements from iterator
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,toArray,com.google.common.collect.Collections2$FilteredCollection:toArray(java.lang.Object[]),233,237,"/**
* Converts collection to an array.
* @param array target array to hold the elements
* @return array containing the elements of this collection
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,allMatch,com.google.common.collect.FluentIterable:allMatch(com.google.common.base.Predicate),451,453,"/**
 * Checks if all elements match the given predicate.
 * @param predicate condition to test each element
 * @return true if all elements match, false otherwise
 */","* Returns {@code true} if every element in this fluent iterable satisfies the predicate. If this
   * fluent iterable is empty, {@code true} is returned.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch} (same).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,ceiling,com.google.common.collect.Sets$FilteredNavigableSet:ceiling(java.lang.Object),1366,1369,"/**
* Finds the smallest element greater than or equal to given element.
* @param e element to compare against
* @return the ceiling element or null if none found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,higher,com.google.common.collect.Sets$FilteredNavigableSet:higher(java.lang.Object),1371,1374,"/**
 * Finds the next element greater than the given element.
 * @param e the reference element
 * @return the next element or null if none exists
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardListIterator,com.google.common.collect.ForwardingList:standardListIterator(int),204,206,"/**
 * Returns a list iterator over elements starting from the specified index.
 * @param start initial index of the iterator
 * @return ListIterator for traversing the list from the given start index
 */","* A sensible default implementation of {@link #listIterator(int)}, in terms of {@link #size},
   * {@link #get(int)}, {@link #set(int, Object)}, {@link #add(int, Object)}, and {@link
   * #remove(int)}. If you override any of these methods, you may wish to override {@link
   * #listIterator(int)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transform,"com.google.common.collect.Multimaps$TransformedEntriesListMultimap:transform(java.lang.Object,java.util.Collection)",1621,1624,"/**
* Transforms a collection of V1 to a list of V2 using a key.
* @param key unique identifier for transformation
* @param values collection of items to transform
* @return list of transformed items
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transform,"com.google.common.collect.Multimaps$TransformedEntriesMultimap:transform(java.lang.Object,java.util.Collection)",1512,1519,"/**
* Transforms a collection of V1 objects to V2 using a key.
* @param key the key used for transformation
* @param values the collection of V1 objects to transform
* @return a collection of transformed V2 objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asMap,"com.google.common.collect.Maps:asMap(java.util.SortedSet,com.google.common.base.Function)",847,850,"/**
* Creates a sorted map from a set using a transformation function.
* @param set the input sorted set of keys
* @param function the mapping function to apply to each key
* @return a SortedMap with keys from the set and values transformed by the function
*/","* Returns a view of the sorted set as a map, mapping keys from the set according to the specified
   * function.
   *
   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping
   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code
   * entrySet} views of the returned map iterate in the same order as the backing set.
   *
   * <p>Modifications to the backing set are read through to the returned map. The returned map
   * supports removal operations if the backing set does. Removal operations write through to the
   * backing set. The returned map does not support put operations.
   *
   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the
   * set does not contain {@code null}, because the view cannot stop {@code null} from being added
   * to the set.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},
   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for
   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when
   * calling methods on the resulting map view.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeIncidentNodesMap,com.google.common.graph.AbstractNetwork:edgeIncidentNodesMap(com.google.common.graph.Network),323,325,"/**
* Creates a map of edges to their incident nodes.
* @param network the input Network object
* @return a Map where each edge maps to its incident nodes
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,edgeValueMap,com.google.common.graph.AbstractValueGraph:edgeValueMap(com.google.common.graph.ValueGraph),154,160,"/**
* Creates a map of edges to their values in the given graph.
* @param <N> node type
* @param <V> value type
* @param graph input graph with nodes and edges
* @return Map from EndpointPair of nodes to edge values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$NavigableKeySet:<init>(java.util.NavigableMap),4023,4025,"/**
 * Constructs a navigable key set from a given navigable map.
 * @param map the source navigable map
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$SortedKeySet:subSet(java.lang.Object,java.lang.Object)",3992,3995,"/**
* Returns a subset of keys within the specified range.
* @param fromElement inclusive lower bound of the range
* @param toElement exclusive upper bound of the range
* @return SortedSet containing keys in the specified range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,com.google.common.collect.Maps$SortedKeySet:headSet(java.lang.Object),3997,4000,"/**
* Returns a subset of keys less than specified element.
* @param toElement upper bound (exclusive)
* @return SortedSet of keys
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,com.google.common.collect.Maps$SortedKeySet:tailSet(java.lang.Object),4002,4005,"/**
* Returns a view of the portion of this set whose elements are greater than or equal to the specified element.
* @param fromElement lower bound (inclusive)
* @return SortedSet containing elements greater than or equal to fromElement
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,createKeySet,com.google.common.collect.StandardRowSortedTable$RowSortedMap:createKeySet(),102,105,"/**
 * Creates a sorted key set from this map.
 * @return SortedSet containing all keys in ascending order
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,keySet,com.google.common.collect.TreeBasedTable$TreeRow:keySet(),202,205,"/**
 * Returns a sorted set of keys.
 * @return SortedSet containing all keys in this map
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$ViewCachingAbstractMap:keySet(),3722,3726,"/**
* Returns the set of keys.
* Lazily initializes if not already created.
* @return Set of keys
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$NavigableAsMapView:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",1050,1057,"/**
* Returns a submap containing keys within a specified range.
* @param fromKey the lower bound of the range
* @param fromInclusive true if the fromKey is inclusive
* @param toKey the upper bound of the range
* @param toInclusive true if the toKey is inclusive
* @return NavigableMap with keys in the specified range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$NavigableAsMapView:headMap(java.lang.Object,boolean)",1059,1062,"/**
* Returns navigable map up to a specified key.
* @param toKey upper bound key
* @param inclusive true if the upper bound is inclusive
* @return NavigableMap with entries less than or equal to toKey
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$NavigableAsMapView:tailMap(java.lang.Object,boolean)",1064,1067,"/**
* Returns a navigable map containing entries greater than or equal to the specified key.
* @param fromKey the lower bound of the keys in the returned map
* @param inclusive true if the lower bound is inclusive
* @return NavigableMap with entries starting from fromKey
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$NavigableAsMapView:descendingMap(),1125,1128,"/**
* Returns a navigable map with entries in reverse order.
* @return NavigableMap with keys in descending order
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:<init>(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)",2270,2273,"/**
 * Constructs a navigable map with transformed entries.
 * @param fromMap the source navigable map
 * @param transformer the entry transformer to apply
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntries,"com.google.common.collect.Maps:transformEntries(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)",2013,2018,"/**
 * Transforms entries of a sorted map.
 * @param fromMap original sorted map
 * @param transformer function to transform values
 * @return new sorted map with transformed values
 */","* Returns a view of a sorted map whose values are derived from the original sorted map's entries.
   * In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on
   * the key as well as the value.
   *
   * <p>All other properties of the transformed map, such as iteration order, are left intact. For
   * example, the code:
   *
   * {@snippet :
   * Map<String, Boolean> options =
   *     ImmutableSortedMap.of(""verbose"", true, ""sort"", false);
   * EntryTransformer<String, Boolean, String> flagPrefixer =
   *     new EntryTransformer<String, Boolean, String>() {
   *       public String transformEntry(String key, Boolean value) {
   *         return value ? key : ""yes"" + key;
   *       }
   *     };
   * SortedMap<String, String> transformed =
   *     Maps.transformEntries(options, flagPrefixer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {sort=yessort, verbose=verbose}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys and null values provided that
   * the transformer is capable of accepting null inputs. The transformed map might contain null
   * values if the transformer sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * map to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map
   * doesn't need to be a view, copy the returned map into a new map of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed map.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformValues,"com.google.common.collect.Maps:transformValues(java.util.Map,com.google.common.base.Function)",1824,1829,"/**
 * Transforms values in a map using a given function.
 * @param fromMap original map with keys of type K and values of type V1
 * @param function transformation function to apply to each value
 * @return new map with transformed values of type V2
 */","* Returns a view of a map where each value is transformed by a function. All other properties of
   * the map, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * Map<String, Integer> map = ImmutableMap.of(""a"", 4, ""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * Map<String, Double> transformed = Maps.transformValues(map, sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=2.0, b=3.0}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed map might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
   * view, copy the returned map into a new map of your choosing.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createAsMap,com.google.common.collect.Multimaps$TransformedEntriesMultimap:createAsMap(),1521,1524,"/**
* Transforms and returns entries from multimap as a map.
* @return Map with keys from multimap and transformed values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createValues,com.google.common.collect.Maps$AbstractFilteredMap:createValues(),2898,2901,"/**
* Creates filtered values collection.
* @return Collection of filtered values based on predicate
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$FilteredEntryNavigableMap:values(),3265,3268,"/**
* Returns filtered collection of map values.
* @return Collection of filtered values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$ViewCachingAbstractMap:values(),3734,3738,"/**
* Returns a collection of all values in the map.
* Initializes the collection if not already created.
* @return Collection of values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,contains,com.google.common.collect.AbstractBiMap$EntrySet:contains(java.lang.Object),437,440,"/**
 * Checks if the map contains a specified key-value pair.
 * @param o the key-value pair to check
 * @return true if the map contains the pair, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,contains,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:contains(java.lang.Object),1008,1013,"/**
* Checks if the collection contains the specified element.
* @param o element to check for presence
* @return true if the element is present, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:remove(java.lang.Object),1032,1037,"/**
* Removes an entry from the map.
* @param o object to be removed
* @return true if the object was present and removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,ceilingEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:ceilingEntry(java.lang.Object),2275,2278,"/**
* Returns the least entry greater than or equal to the specified key.
* @param key the key to search for
* @return an Entry with the least key greater than or equal to the specified key, or null if no such entry exists
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:firstEntry(),2295,2298,"/**
 * Returns the first entry from the transformed map.
 * @return the first Entry or null if the map is empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,floorEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:floorEntry(java.lang.Object),2300,2303,"/**
* Returns the greatest entry less than or equal to the specified key.
* @param key the key to search for
* @return an Entry with the greatest key less than or equal to the specified key, or null if no such entry exists
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,higherEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:higherEntry(java.lang.Object),2320,2323,"/**
* Returns the entry with the least key greater than the given key.
* @param key the key to compare against
* @return an Entry or null if no such entry exists
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:lastEntry(),2330,2333,"/**
* Returns the last entry in the map.
* @return last Entry object or null if the map is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lowerEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:lowerEntry(java.lang.Object),2335,2338,"/**
* Returns the greatest entry less than the specified key.
* @param key the key to compare against
* @return an Entry with a key less than the specified key, or null if no such entry exists
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollFirstEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:pollFirstEntry(),2350,2353,"/**
* Removes and returns the first entry from the map.
* @return transformed Entry object or null if the map is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollLastEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:pollLastEntry(),2355,2358,"/**
* Removes and returns the last entry from the map.
* @return transformed Entry object or null if map is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,add,"com.google.common.collect.AbstractMapBasedMultiset:add(java.lang.Object,int)",264,284,"/**
* Adds a specified number of occurrences of an element to the multiset.
* @param element the element to add
* @param occurrences the number of times to add the element, must be non-negative
* @return the count of the element before adding occurrences
*/","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if the call would result in more than {@link
   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,"com.google.common.collect.AbstractMapBasedMultiset:remove(java.lang.Object,int)",286,311,"/**
 * Removes a specified number of occurrences of an element.
 * @param element the element to remove
 * @param occurrences the number of occurrences to remove
 * @return the count of the element before removal
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,count,com.google.common.collect.HashMultiset:count(java.lang.Object),250,254,"/**
* Counts occurrences of an element in a collection.
* @param element the element to count
* @return number of times the element appears
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,count,com.google.common.collect.LinkedHashMultiset:count(java.lang.Object),250,254,"/**
* Counts occurrences of an element.
* @param element to count in the backing map
* @return number of times the element occurs, defaulting to 0 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,get,"com.google.common.collect.ImmutableTable:get(java.lang.Object,java.lang.Object)",79,83,"/**
* Retrieves value by row and column keys.
* @param rowKey key for the row
* @param columnKey key for the column
* @return value associated with the keys or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,"com.google.common.collect.StandardTable:get(java.lang.Object,java.lang.Object)",114,117,"/**
 * Retrieves value by row and column keys.
 * @param rowKey key identifying the row
 * @param columnKey key identifying the column
 * @return value associated with the keys or null if either key is null
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,add,"com.google.common.collect.ConcurrentHashMultiset:add(java.lang.Object,int)",205,252,"/**
* Adds occurrences of an element to the multiset.
* @param element the element to add
* @param occurrences number of occurrences to add
* @return previous count of the element or 0 if not present
*/","* Adds a number of occurrences of the specified element to this multiset.
   *
   * @param element the element to add
   * @param occurrences the number of occurrences to add
   * @return the previous count of the element before the operation; possibly zero
   * @throws IllegalArgumentException if {@code occurrences} is negative, or if the resulting amount
   *     would exceed {@link Integer#MAX_VALUE}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,remove,"com.google.common.collect.ConcurrentHashMultiset:remove(java.lang.Object,int)",272,300,"/**
 * Removes occurrences of an element from the multiset.
 * @param element the element to remove
 * @param occurrences number of times to remove the element
 * @return the count of the element before removal
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$EntrySet:remove(java.lang.Object),4227,4238,"/**
* Removes an entry from the map by key.
* @param o object to remove, must be an instance of Entry
* @return true if removed successfully, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,"com.google.common.collect.Multimaps$Keys:remove(java.lang.Object,int)",1798,1822,"/**
 * Removes specified number of occurrences of an element.
 * @param element the element to remove
 * @param occurrences number of times to remove the element
 * @return count of elements removed
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,"com.google.common.collect.HashBasedTable:remove(java.lang.Object,java.lang.Object)",158,173,"/**
* Removes a value from the table using row and column keys.
* @param rowKey key for the row
* @param columnKey key for the column
* @return removed value or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Column$KeySet:remove(java.lang.Object),626,629,"/**
* Removes an object from the table.
* @param obj the object to remove
* @return true if the object was removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Column:remove(java.lang.Object),481,484,"/**
* Removes entry by key.
* @param key unique key identifying the entry
* @return value associated with the removed key or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsRow,com.google.common.collect.ImmutableTable:containsRow(java.lang.Object),43,46,"/**
* Checks if a row with the given key exists.
* @param rowKey unique identifier of the row
* @return true if row exists, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsColumn,com.google.common.collect.ImmutableTable:containsColumn(java.lang.Object),48,51,"/**
 * Checks if the specified column key is present in the map.
 * @param columnKey the column key to check
 * @return true if the column key exists, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,"com.google.common.collect.StandardTable:contains(java.lang.Object,java.lang.Object)",86,89,"/**
* Checks if the specified row and column keys exist in the map.
* @param rowKey key for the row
* @param columnKey key for the column
* @return true if both keys are non-null and exist in the map, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsColumn,com.google.common.collect.HashBasedTable:containsColumn(java.lang.Object),91,102,"/**
* Checks if a column key exists in any of the maps.
* @param columnKey the key to check for existence
* @return true if the column key is found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,isEmpty,com.google.common.collect.StandardTable$Column$EntrySet:isEmpty(),529,532,"/**
 * Checks if the column with the specified key is empty.
 * @param columnKey unique identifier of the column
 * @return true if the column does not exist or is empty, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$ColumnKeySet:contains(java.lang.Object),753,756,"/**
 * Checks if the collection contains the specified column.
 * @param obj the object to check for presence
 * @return true if the column is present, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$ColumnMap:get(java.lang.Object),885,890,"/**
 * Retrieves a map by key if it exists in the column family.
 * @param key unique identifier for the column
 * @return Map associated with the key or null if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$ColumnMap:containsKey(java.lang.Object),892,895,"/**
 * Checks if the map contains the specified column key.
 * @param key the column key to check
 * @return true if the map contains the key, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$ColumnMap:remove(java.lang.Object),897,900,"/**
 * Removes and returns the map associated with the given key.
 * @param key the key whose mapped value is to be removed
 * @return the removed Map or null if no mapping exists for the key
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsRow,com.google.common.collect.HashBasedTable:containsRow(java.lang.Object),104,107,"/**
 * Checks if the map contains a row with the specified key.
 * @param rowKey key to check in the map
 * @return true if the row exists, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$RowMap:containsKey(java.lang.Object),814,817,"/**
 * Checks if the map contains a mapping for the specified key.
 * @param key key whose presence in this map is to be tested
 * @return true if this map contains a mapping for the specified key, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$RowMap:get(java.lang.Object),820,825,"/**
* Retrieves a map associated with the given key if it exists.
* @param key the key to look up in the cache
* @return Map of type C to V or null if the key is not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformEntries,"com.google.common.collect.Multimaps:transformEntries(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer)",1493,1498,"/**
* Transforms entries in a ListMultimap using a specified transformer.
* @param fromMap original ListMultimap with keys of type K and values of type V1
* @param transformer function to transform entries from V1 to V2
* @return new ListMultimap with transformed values of type V2
*/","* Returns a view of a {@code ListMultimap} whose values are derived from the original multimap's
   * entries. In contrast to {@link #transformValues(ListMultimap, Function)}, this method's
   * entry-transformation logic may depend on the key as well as the value.
   *
   * <p>All other properties of the transformed multimap, such as iteration order, are left intact.
   * For example, the code:
   *
   * {@snippet :
   * Multimap<String, Integer> multimap =
   *     ImmutableMultimap.of(""a"", 1, ""a"", 4, ""b"", 6);
   * EntryTransformer<String, Integer, String> transformer =
   *     new EntryTransformer<String, Integer, String>() {
   *       public String transformEntry(String key, Integer value) {
   *         return key + value;
   *       }
   *     };
   * Multimap<String, String> transformed =
   *     Multimaps.transformEntries(multimap, transformer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {""a""=[""a1"", ""a4""], ""b""=[""b6""]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys and null values provided
   * that the transformer is capable of accepting null inputs. The transformed multimap might
   * contain null values if the transformer sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap
   * doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed multimap.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformValues,"com.google.common.collect.Multimaps:transformValues(com.google.common.collect.Multimap,com.google.common.base.Function)",1334,1341,"/**
* Transforms values in a multimap using a given function.
* @param fromMultimap original multimap with K keys and V1 values
* @param function transformation function from V1 to V2
* @return new multimap with transformed V2 values
*/","* Returns a view of a multimap where each value is transformed by a function. All other
   * properties of the multimap, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * Multimap<String, Integer> multimap =
   *     ImmutableSetMultimap.of(""a"", 2, ""b"", -3, ""b"", -3, ""a"", 4, ""c"", 6);
   * Function<Integer, String> square = new Function<Integer, String>() {
   *     public String apply(Integer in) {
   *       return Integer.toString(in * in);
   *     }
   * };
   * Multimap<String, String> transformed =
   *     Multimaps.transformValues(multimap, square);
   *   System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=[4, 16], b=[9, 9], c=[36]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys, and even null values
   * provided that the function is capable of accepting null input. The transformed multimap might
   * contain null values, if the function sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless,
   * since there is not a definition of {@code equals} or {@code hashCode} for general collections,
   * and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a
   * {@code Set}.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the function will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to
   * perform well, {@code function} should be fast. To avoid lazy evaluation when the returned
   * multimap doesn't need to be a view, copy the returned multimap into a new multimap of your
   * choosing.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,addAll,com.google.common.collect.ImmutableSortedMultiset$Builder:addAll(java.lang.Iterable),535,540,"/**
 * Adds all elements from the given iterable to the builder.
 * @param elements iterable containing elements to add
 * @return this builder instance for method chaining
 */","* Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}.
     *
     * @param elements the {@code Iterable} to add to the {@code ImmutableSortedMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,addAllImpl,"com.google.common.collect.Multisets:addAllImpl(com.google.common.collect.Multiset,java.util.Collection)",897,908,"/**
 * Adds all elements from the collection to the multiset.
 * @param self target multiset to add elements to
 * @param elements collection of elements to be added
 * @return true if any element was added, false otherwise
 */",An implementation of {@link Multiset#addAll}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,apply,com.google.common.collect.Range:apply(java.lang.Object),417,422,"/**
* Checks if input is contained.
* @param input element to check
* @return true if input is contained, false otherwise
*/","* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains}
   *     instead.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,indexOf,com.google.common.collect.RegularContiguousSet:indexOf(java.lang.Object),77,88,"/**
 * Finds index of target in collection.
 * @param target element to find
 * @return index or -1 if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,nullableSynchronizedEntry,"com.google.common.collect.Synchronized:nullableSynchronizedEntry(java.util.Map$Entry,java.lang.Object)",1779,1787,"/**
 * Wraps a map entry with synchronization.
 * @param entry the original map entry
 * @param mutex object to synchronize on
 * @return synchronized entry or null if input is null
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedAsMap:<init>(java.util.Map,java.lang.Object)",1398,1400,"/**
 * Constructs a synchronized map from a given delegate.
 * @param delegate backing map to be wrapped
 * @param mutex object used for synchronization; if null, uses the delegate itself
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedBiMap:<init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap)",1352,1356,"/**
* Initializes a synchronized bi-map.
* @param delegate underlying bi-map implementation
* @param mutex object for synchronization or null if not used
* @param inverse inverse bi-map or null if not provided
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSortedMap:<init>(java.util.SortedMap,java.lang.Object)",1285,1287,"/**
 * Wraps a SortedMap with synchronization.
 * @param delegate the underlying SortedMap to wrap
 * @param mutex the object to use as a lock; if null, this instance is used
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,map,"com.google.common.collect.Synchronized:map(java.util.Map,java.lang.Object)",1056,1060,"/**
 * Returns a synchronized (thread-safe) map backed by the specified map.
 * @param map the map to be wrapped in a synchronized view
 * @param mutex object on which to synchronize; null means use the map itself
 * @return a synchronized map
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedListMultimap:<init>(com.google.common.collect.ListMultimap,java.lang.Object)",793,795,"/**
 * Constructs a synchronized list multimap.
 * @param delegate backing list multimap
 * @param mutex synchronization lock; if null, uses delegate as lock
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSetMultimap:<init>(com.google.common.collect.SetMultimap,java.lang.Object)",838,840,"/**
* Wraps a SetMultimap with synchronization.
* @param delegate underlying multimap to wrap
* @param mutex object used for locking; if null, uses this instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,multimap,"com.google.common.collect.Synchronized:multimap(com.google.common.collect.Multimap,java.lang.Object)",586,592,"/**
* Wraps a Multimap with synchronization.
* @param multimap the original Multimap to wrap
* @param mutex object used for locking (optional)
* @return synchronized version of the input Multimap
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,table,"com.google.common.collect.Synchronized:table(com.google.common.collect.Table,java.lang.Object)",2033,2036,"/**
 * Wraps a table with synchronization.
 * @param <R> row key type
 * @param <C> column key type
 * @param <V> value type
 * @param table original table to be wrapped
 * @param mutex object for locking (may be null)
 * @return synchronized version of the table
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,toTable,"com.google.common.collect.Tables:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",71,84,"/**
 * Collects elements into a table.
 * @param rowFunction extracts the row key from an element
 * @param columnFunction extracts the column key from an element
 * @param valueFunction extracts the value from an element
 * @param tableSupplier supplies the table instance to collect into
 * @return a Collector that accumulates elements into a Table
 */","* Returns a {@link Collector} that accumulates elements into a {@code Table} created using the
   * specified supplier, whose cells are generated by applying the provided mapping functions to the
   * input elements. Cells are inserted into the generated {@code Table} in encounter order.
   *
   * <p>If multiple input elements map to the same row and column, an {@code IllegalStateException}
   * is thrown when the collection operation is performed.
   *
   * <p>To collect to an {@link ImmutableTable}, use {@link ImmutableTable#toImmutableTable}.
   *
   * @since 21.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,putAll,com.google.common.collect.Tables$TransposeTable:putAll(com.google.common.collect.Table),282,285,"/**
* Adds all entries from the given table after transposing it.
* @param table source table to add entries from
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,computeNext,com.google.common.collect.TreeTraverser$PostOrderIterator:computeNext(),228,241,"/**
* Computes the next node in a post-order traversal.
* @return The next node or null if traversal is complete
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,escapeSlow,"com.google.common.escape.UnicodeEscaper:escapeSlow(java.lang.String,int)",157,212,"/**
 * Escapes special characters in a string.
 * @param s the input string to escape
 * @param index starting index for escaping
 * @return escaped string
 */","* Returns the escaped form of a given literal string, starting at the given index. This method is
   * called by the {@link #escape(String)} method when it discovers that escaping is required. It is
   * protected to allow subclasses to override the fastpath escaping function to inline their
   * escaping test. See {@link CharEscaperBuilder} for an example usage.
   *
   * <p>This method is not reentrant and may only be invoked by the top level {@link
   * #escape(String)} method.
   *
   * @param s the literal string to be escaped
   * @param index the index to start escaping from
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null
   * @throws IllegalArgumentException if invalid surrogate characters are encountered",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,of,com.google.common.graph.UndirectedMultiNetworkConnections:of(),49,52,"/**
* Creates an empty undirected multi-network connections instance.
* @param <N> node type
* @param <E> edge type
* @return new instance with default capacity and load factor
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,removePredecessor,com.google.common.graph.DirectedGraphConnections:removePredecessor(java.lang.Object),427,451,"/**
 * Removes a predecessor from the node.
 * @param node the node to remove the predecessor from
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,addPredecessor,"com.google.common.graph.DirectedGraphConnections:addPredecessor(java.lang.Object,java.lang.Object)",488,514,"/**
 * Adds a predecessor to the node.
 * @param node the node to add a predecessor to
 * @param unused not used in this method
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,removeSuccessor,com.google.common.graph.DirectedGraphConnections:removeSuccessor(java.lang.Object),453,486,"/**
* Removes successor node and returns its value.
* @param node the node whose successor is to be removed
* @return value of the removed successor or null if none exists
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,addSuccessor,"com.google.common.graph.DirectedGraphConnections:addSuccessor(java.lang.Object,java.lang.Object)",516,544,"/**
* Adds a successor node with a value.
* @param node the node to add as a successor
* @param value the value associated with the successor node
* @return the previous successor's value or null if none exists
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,<init>,"com.google.common.graph.StandardNetwork:<init>(com.google.common.graph.NetworkBuilder,java.util.Map,java.util.Map)",77,93,"/**
* Initializes a StandardNetwork with specified builder and connection maps.
* @param builder configuration for network properties
* @param nodeConnections map of nodes to their connections
* @param edgeToReferenceNode map of edges to reference nodes
*/","* Constructs a graph with the properties specified in {@code builder}, initialized with the given
   * node and edge maps.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,<init>,"com.google.common.graph.StandardValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder,java.util.Map,long)",68,81,"/**
* Constructs a StandardValueGraph with specified builder and connections.
* @param builder graph configuration settings
* @param nodeConnections map of nodes to their connections
* @param edgeCount total number of edges in the graph
*/","* Constructs a graph with the properties specified in {@code builder}, initialized with the given
   * node map.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,removeEdge,com.google.common.graph.StandardMutableNetwork:removeEdge(java.lang.Object),146,164,"/**
* Removes an edge from the network.
* @param edge the edge to remove
* @return true if the edge was removed, false if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,removeNode,com.google.common.graph.StandardMutableValueGraph:removeNode(java.lang.Object),119,158,"/**
 * Removes a node from the graph.
 * @param node the node to remove
 * @return true if the node was removed, false if it was not present
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,removeEdge,"com.google.common.graph.StandardMutableValueGraph:removeEdge(java.lang.Object,java.lang.Object)",160,178,"/**
* Removes an edge between two nodes.
* @param nodeU source node
* @param nodeV target node
* @return the value associated with the removed edge, or null if no edge exists
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,checkedReferenceNode,com.google.common.graph.StandardNetwork:checkedReferenceNode(java.lang.Object),187,194,"/**
* Retrieves the node associated with an edge.
* @param edge the edge to find the node for
* @return the associated node or throws if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,readResolve,com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm:readResolve(),136,138,"/**
 * Returns a StringFunnel instance using the specified charset.
 * @return StringFunnel object initialized with the charset
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,copy,"com.google.common.io.CharStreams:copy(java.lang.Readable,java.lang.Appendable)",68,92,"/**
 * Copies data from a Readable source to an Appendable destination.
 * @param from the source Readable object (e.g., Reader)
 * @param to the destination Appendable object (e.g., Writer, StringBuilder)
 * @return the number of characters copied
 * @throws IOException if an I/O error occurs during copying
 */","* Copies all characters between the {@link Readable} and {@link Appendable} objects. Does not
   * close or flush either object.
   *
   * @param from the object to read from
   * @param to the object to write to
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decode,com.google.common.io.BaseEncoding:decode(java.lang.CharSequence),215,221,"/**
 * Decodes a CharSequence to a byte array.
 * @param chars the input character sequence
 * @return the decoded byte array
 * @throws IllegalArgumentException if decoding fails
 */","* Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the
   * inverse operation to {@link #encode(byte[])}.
   *
   * @throws IllegalArgumentException if the input is not a valid encoded string according to this
   *     encoding.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,ceilingPowerOfTwo,com.google.common.math.BigIntegerMath:ceilingPowerOfTwo(java.math.BigInteger),56,58,"/**
 * Computes the smallest power of two greater than or equal to x.
 * @param x input number
 * @return smallest power of two >= x
 */","* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to
   * {@code BigInteger.valueOf(2).pow(log2(x, CEILING))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,floorPowerOfTwo,com.google.common.math.BigIntegerMath:floorPowerOfTwo(java.math.BigInteger),67,69,"/**
* Returns the largest power of two less than or equal to x.
* @param x the input number
* @return largest power of two <= x
*/","* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code
   * BigInteger.valueOf(2).pow(log2(x, FLOOR))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,getInstance,com.google.common.collect.MutableClassToInstanceMap:getInstance(java.lang.Class),176,179,"/**
 * Retrieves an instance of the specified type.
 * @param type class of the desired instance
 * @return instance of type T or null if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,of,"com.google.common.reflect.ClassPath$ResourceInfo:of(java.io.File,java.lang.String,java.lang.ClassLoader)",209,215,"/**
* Creates a ResourceInfo object for the given file and resource name.
* @param file the file associated with the resource
* @param resourceName the name of the resource
* @param loader the ClassLoader to use
* @return ClassInfo if resource is a class file, otherwise ResourceInfo
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,from,com.google.common.reflect.Invokable:from(java.lang.reflect.Constructor),80,82,"/**
 * Creates an Invokable from a Constructor.
 * @param constructor the Constructor to use
 * @return Invokable that can invoke the Constructor
 */",Returns {@link Invokable} of {@code constructor}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,from,com.google.common.reflect.Invokable:from(java.lang.reflect.Method),75,77,"/**
 * Creates an Invokable instance from a Method.
 * @param method the Method to be wrapped
 * @return Invokable object representing the method
 */",Returns {@link Invokable} of {@code method}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,map,"com.google.common.reflect.TypeResolver$TypeMappingIntrospector:map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type)",416,437,"/**
 * Maps a type variable to an argument, avoiding cycles and duplicates.
 * @param var the type variable key
 * @param arg the argument type
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,create,"com.google.common.util.concurrent.AbstractCatchingFuture:create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)",42,50,"/**
* Creates a ListenableFuture with error handling.
* @param input future to wrap
* @param exceptionType type of exceptions to catch
* @param fallback function to provide fallback value on exception
* @param executor executor for asynchronous operations
* @return ListenableFuture with error handling
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,complete,"com.google.common.util.concurrent.AbstractFuture:complete(com.google.common.util.concurrent.AbstractFuture,boolean)",710,772,"/**
* Completes a future by releasing waiters, interrupting tasks, and executing listeners.
* @param param the AbstractFuture to complete
* @param callInterruptTask whether to interrupt the task associated with the future
*/",Unblocks all threads and runs all listeners.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,create,"com.google.common.util.concurrent.AbstractTransformFuture:create(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)",48,53,"/**
* Transforms a future's result using a given function.
* @param input future to transform
* @param function transformation function
* @param executor executor for asynchronous execution
* @return ListenableFuture with transformed result
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,addAndGet,"com.google.common.util.concurrent.AtomicLongMap:addAndGet(java.lang.Object,long)",108,111,"/**
* Adds a delta to the current value associated with the key.
* @param key the key with which the resulting value is to be associated
* @param delta the value to add
* @return the updated value
*/","* Adds {@code delta} to the value currently associated with {@code key}, and returns the new
   * value.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndAdd,"com.google.common.util.concurrent.AtomicLongMap:getAndAdd(java.lang.Object,long)",133,136,"/**
* Atomically adds a delta to the current value for a key.
* @param key the key with which the associated value is to be updated
* @param delta the value to add
* @return the previous value before addition
*/","* Adds {@code delta} to the value currently associated with {@code key}, and returns the old
   * value.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,putAll,com.google.common.util.concurrent.AtomicLongMap:putAll(java.util.Map),219,221,"/**
 * Adds all entries from the specified map to this map.
 * @param m the map whose entries are to be added
 */","* Copies all of the mappings from the specified map to this map. The effect of this call is
   * equivalent to that of calling {@code put(k, v)} on this map once for each mapping from key
   * {@code k} to value {@code v} in the specified map. The behavior of this operation is undefined
   * if the specified map is modified while the operation is in progress.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,callUninterruptiblyWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",73,79,"/**
* Calls a task with a specified timeout.
* @param callable the task to execute
* @param timeoutDuration timeout duration
* @param timeoutUnit timeout time unit
* @return result of the callable or throws ExecutionException on failure
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,run,com.google.common.util.concurrent.TrustedListenableFutureTask:run(),76,87,"/**
* Executes the assigned task and clears the task reference.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,addInEdge,"com.google.common.graph.UndirectedMultiNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",102,107,"/**
* Adds an incoming edge to a node.
* @param edge the edge to be added
* @param node the target node of the edge
* @param isSelfLoop indicates if the edge is a self-loop
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractBaseGraph:incidentEdgeOrder(),101,104,"/**
 * Returns unordered edge order.
 * @return ElementOrder indicating edges are unordered
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,incidentEdgeOrder,com.google.common.graph.ImmutableGraph:incidentEdgeOrder(),79,82,"/**
* Returns stable element order for incident edges.
* @return stable ElementOrder instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,incidentEdgeOrder,com.google.common.graph.ImmutableValueGraph:incidentEdgeOrder(),74,77,"/**
 * Returns stable element order for incident edges.
 * @return ElementOrder indicating stable ordering
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraphBuilder.java,<init>,com.google.common.graph.AbstractGraphBuilder:<init>(boolean),40,42,"/**
 * Initializes a graph builder with directionality.
 * @param directed true if the graph is directed, false otherwise
 */","* Creates a new instance with the specified edge directionality.
   *
   * @param directed if true, creates an instance for graphs whose edges are each directed; if
   *     false, creates an instance for graphs whose edges are each undirected.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,addListener,"com.google.common.util.concurrent.ListenerCallQueue:addListener(java.lang.Object,java.util.concurrent.Executor)",75,79,"/**
 * Adds a listener with an associated executor.
 * @param listener the listener to be added
 * @param executor the executor for handling events
 */","* Adds a listener that will be called using the given executor when events are later {@link
   * #enqueue enqueued} and {@link #dispatch dispatched}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoForward,com.google.common.base.Converter$ConverterComposition:correctedDoForward(java.lang.Object),412,415,"/**
 * Forwards request through two handlers.
 * @param a input parameter to be processed
 * @return result after processing by both handlers, or null if any handler returns null
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoBackward,com.google.common.base.Converter$ReverseConverter:correctedDoBackward(java.lang.Object),337,340,"/**
 * Corrects and processes input in reverse.
 * @param a input data to process
 * @return processed result or null if input is null
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,convert,com.google.common.base.Converter:convert(java.lang.Object),196,198,"/**
 * Converts object A to B.
 * @param a source object, may be null
 * @return converted object B or null if conversion fails
 */","* Returns a representation of {@code a} as an instance of type {@code B}.
   *
   * @return the converted value; is null <i>if and only if</i> {@code a} is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoBackward,com.google.common.base.Converter$ConverterComposition:correctedDoBackward(java.lang.Object),417,420,"/**
* Applies backward correction to input.
* @param c input object
* @return corrected object or null if input is null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoForward,com.google.common.base.Converter$ReverseConverter:correctedDoForward(java.lang.Object),332,335,"/**
 * Forwards request to the original handler.
 * @param b input parameter for handling
 * @return result from the original handler or null if not applicable
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,<init>,com.google.common.collect.CompactHashMap:<init>(),240,242,"/**
* Initializes a new CompactHashMap with default size.
*/",Constructs a new empty instance of {@code CompactHashMap}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,<init>,com.google.common.collect.CompactHashMap:<init>(int),249,251,"/**
 * Initializes a CompactHashMap with an expected size.
 * @param expectedSize approximate number of entries to store
 */","* Constructs a new instance of {@code CompactHashMap} with the specified capacity.
   *
   * @param expectedSize the initial capacity of this {@code CompactHashMap}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,init,com.google.common.collect.CompactLinkedHashMap:init(int),115,120,"/**
* Initializes the container with an expected size.
* Sets first and last entries to the endpoint.
* @param expectedSize initial capacity hint for the container
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,<init>,com.google.common.collect.CompactHashSet:<init>(),205,207,"/**
* Initializes a new CompactHashSet with default size.
*/",Constructs a new empty instance of {@code CompactHashSet}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,<init>,com.google.common.collect.CompactHashSet:<init>(int),214,216,"/**
 * Initializes a new CompactHashSet with the specified expected size.
 * @param expectedSize the approximate number of elements to store
 */","* Constructs a new instance of {@code CompactHashSet} with the specified capacity.
   *
   * @param expectedSize the initial capacity of this {@code CompactHashSet}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,init,com.google.common.collect.CompactLinkedHashSet:init(int),132,137,"/**
* Initializes data structure with expected size.
* Sets first and last entries to ENDPOINT.
* @param expectedSize estimated number of elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$FastMatcher:negate(),970,973,"/**
* Returns a negated version of this matcher.
* @return CharMatcher that matches characters not matched by this matcher
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$AnyOf:negate(),373,376,"/**
 * Returns a matcher that negates this matcher.
 * @return a new CharMatcher that matches characters not matched by this one
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$JavaLetter:negate(),373,376,"/**
 * Returns a matcher that matches any character not matched by this matcher.
 * @return A new CharMatcher representing the negation of this matcher.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$JavaUpperCase:negate(),373,376,"/**
 * Returns a negated version of this matcher.
 * @return CharMatcher that matches characters not matched by this matcher
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$Or:negate(),373,376,"/**
 * Returns a negated version of this matcher.
 * @return CharMatcher that matches characters not matched by this one
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$RangesMatcher:negate(),373,376,"/**
 * Returns a CharMatcher that matches any character not matched by this matcher.
 * @return A negated CharMatcher instance
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getSimpleName,com.google.common.reflect.ClassPath$ClassInfo:getSimpleName(),330,345,"/**
* Returns the simple name of the class without package or enclosing class names.
* @return Simple class name as String
*/","* Returns the simple name of the underlying class as given in the source code.
     *
     * <p>Behaves similarly to {@link Class#getSimpleName()} but does not require the class to be
     * loaded.
     *
     * <p>But note that this class uses heuristics to identify the simple name. See a related
     * discussion in <a href=""https://github.com/google/guava/issues/3349"">issue 3349</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,stats,com.google.common.cache.LocalCache$LocalManualCache:stats(),4907,4915,"/**
* Aggregates and returns cache statistics.
* @return CacheStats object containing aggregated stats
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomListMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",341,344,"/**
 * Initializes a new CustomListMultimap.
 * @param map initial backing map with keys and collections of values
 * @param factory supplier for creating new lists to hold multimap values
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,<init>,com.google.common.collect.AbstractSortedSetMultimap:<init>(java.util.Map),47,49,"/**
 * Constructs an AbstractSortedSetMultimap using the provided map.
 * @param map backing map to store multimap data
 */","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomSetMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",427,430,"/**
* Constructs a CustomSetMultimap with a backing map and set factory.
* @param map the backing map to use
* @param factory supplier for creating sets of values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newMultimap,"com.google.common.collect.Multimaps:newMultimap(java.util.Map,com.google.common.base.Supplier)",211,214,"/**
 * Creates a new Multimap from a given map and collection factory.
 * @param map the backing map to use for storing keys and values
 * @param factory supplier for creating collections to hold values
 * @return a new Multimap instance
 */","* Creates a new {@code Multimap} backed by {@code map}, whose internal value collections are
   * generated by {@code factory}. Most users should prefer {@link MultimapBuilder}, though a small
   * number of users will need this method to cover map or collection types that {@link
   * MultimapBuilder} does not support.
   *
   * <p><b>Warning: do not use</b> this method when the collections returned by {@code factory}
   * implement either {@link List} or {@code Set}! Use the more specific method {@link
   * #newListMultimap}, {@link #newSetMultimap} or {@link #newSortedSetMultimap} instead, to avoid
   * very surprising behavior from {@link Multimap#equals}.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}
   * method returns instances of a different class than {@code factory.get()} does.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the collections generated by
   * {@code factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()}, {@link
   * HashMultimap#create()}, {@link LinkedHashMultimap#create()}, {@link
   * LinkedListMultimap#create()}, {@link TreeMultimap#create()}, and {@link
   * TreeMultimap#create(Comparator, Comparator)} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the collections
   * returned by {@code factory}. Those objects should not be manually updated and they should not
   * use soft, weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty collections that will each hold all values for a given
   *     key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,create,com.google.common.collect.HashMultiset:create(),39,41,"/**
 * Creates a new empty HashMultiset.
 * @return an empty HashMultiset instance
 */","Creates a new, empty {@code HashMultiset} using the default initial capacity.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,create,com.google.common.collect.LinkedHashMultiset:create(),47,49,"/**
* Creates a new empty LinkedHashMultiset.
* @param <E> element type, can be null
* @return an empty LinkedHashMultiset instance
*/","Creates a new, empty {@code LinkedHashMultiset} using the default initial capacity.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,cellSpliterator,com.google.common.collect.ArrayTable:cellSpliterator(),559,563,"/**
 * Returns a spliterator for the cells in the collection.
 * @return spliterator over indexed cells with ordered, non-null, and distinct characteristics
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,spliterator,com.google.common.collect.CompactHashMap$EntrySetView:spliterator(),818,825,"/**
 * Returns a spliterator for the entries in this map.
 * @return Spliterator over Entry<K, V> objects
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,spliterator,com.google.common.collect.ImmutableList:spliterator(),611,614,"/**
* Returns a spliterator for elements of the collection.
* @return Spliterator over the collection's elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,spliterator,com.google.common.collect.ImmutableSet$Indexed:spliterator(),343,346,"/**
* Returns a spliterator for elements in the collection.
* @return Spliterator over the collection elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,spliterator,com.google.common.collect.IndexedImmutableSet:spliterator(),37,40,"/**
* Returns a spliterator for elements in the collection.
* @return Spliterator over the collection's elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,create,"com.google.common.collect.EnumMultiset:create(java.lang.Iterable,java.lang.Class)",80,84,"/**
* Creates an EnumMultiset from an iterable of enum elements.
* @param elements the iterable containing enum values
* @param type the class of the enum type
* @return a new EnumMultiset with the specified elements
*/","* Returns a new {@code EnumMultiset} instance containing the given elements. Unlike {@link
   * EnumMultiset#create(Iterable)}, this method does not produce an exception on an empty iterable.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,<init>,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:<init>(),58,60,"/**
* Initializes CRC-32C hasher with 16-byte buffer size.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,<init>,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:<init>(int),95,100,"/**
 * Initializes a Murmur3 128-bit hasher with a given seed.
 * @param seed initial value for both hash functions
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,<init>,"com.google.common.hash.SipHashFunction$SipHasher:<init>(int,int,long,long)",121,129,"/**
* Initializes SipHasher with given parameters.
* @param c compression rounds
* @param d finalization rounds
* @param k0 first half of key
* @param k1 second half of key
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,populationStandardDeviation,com.google.common.math.Stats:populationStandardDeviation(),317,319,"/**
 * Calculates the population standard deviation.
 * @return the standard deviation as a double
 */","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values"">
   * population standard deviation</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,sampleStandardDeviation,com.google.common.math.Stats:sampleStandardDeviation(),363,365,"/**
 * Calculates the sample standard deviation.
 * @return the calculated standard deviation as a double
 */","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation"">
   * corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a
   * population, this is an estimator of the population standard deviation of the population which
   * is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on
   * the distribution). The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,populationStandardDeviation,com.google.common.math.StatsAccumulator:populationStandardDeviation(),310,312,"/**
 * Calculates the population standard deviation.
 * @return the population standard deviation as a double
 */","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values"">
   * population standard deviation</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,sampleStandardDeviation,com.google.common.math.StatsAccumulator:sampleStandardDeviation(),356,358,"/**
 * Calculates the sample standard deviation.
 * @return the sample standard deviation as a double
 */","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation"">
   * corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a
   * population, this is an estimator of the population standard deviation of the population which
   * is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on
   * the distribution). The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,noneOf,com.google.common.base.CharMatcher:noneOf(java.lang.CharSequence),333,335,"/**
 * Returns a matcher that matches none of the characters in the given sequence.
 * @param sequence the characters to exclude
 * @return CharMatcher object that excludes all characters in sequence
 */","* Returns a {@code char} matcher that matches any BMP character not present in the given
   * character sequence. Returns a bogus matcher if the sequence contains supplementary characters.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,converterTo,com.google.common.base.CaseFormat:converterTo(com.google.common.base.CaseFormat),163,165,"/**
 * Creates a string converter to the specified case format.
 * @param targetFormat the desired case format
 * @return a Converter instance for converting strings
 */","* Returns a serializable {@code Converter} that converts strings from this format to {@code
   * targetFormat}.
   *
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,doAndThen,com.google.common.base.Converter:doAndThen(com.google.common.base.Converter),381,383,"/**
* Composes this converter with another.
* @param secondConverter to apply after this one
* @return composed Converter from A to C
*/",Package-private non-final implementation of andThen() so only we can override it.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,reverse,com.google.common.base.Converter:reverse(),301,305,"/**
 * Returns a converter that reverses this conversion.
 * @return Converter from B to A
 */","* Returns the reversed view of this converter, which converts {@code this.convert(a)} back to a
   * value roughly equivalent to {@code a}.
   *
   * <p>The returned converter is serializable if {@code this} converter is.
   *
   * <p><b>Note:</b> you should not override this method. It is non-final for legacy reasons.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,stringConverter,com.google.common.base.Enums:stringConverter(java.lang.Class),105,107,"/**
* Creates a converter from String to Enum.
* @param enumClass Class of the Enum type
* @return Converter instance for the specified Enum class
*/","* Returns a serializable converter that converts between strings and {@code enum} values of type
   * {@code enumClass} using {@link Enum#valueOf(Class, String)} and {@link Enum#name()}. The
   * converter will throw an {@code IllegalArgumentException} if the argument is not the name of any
   * enum constant in the specified enum.
   *
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asConverter,com.google.common.collect.Maps:asConverter(com.google.common.collect.BiMap),1599,1601,"/**
 * Creates a converter from a bidirectional map.
 * @param bimap bidirectional map to convert
 * @return Converter instance for the given bimap
 */","* Returns a {@link Converter} that converts values using {@link BiMap#get bimap.get()}, and whose
   * inverse view converts values using {@link BiMap#inverse bimap.inverse()}{@code .get()}.
   *
   * <p>To use a plain {@link Map} as a {@link Function}, see {@link
   * com.google.common.base.Functions#forMap(Map)} or {@link
   * com.google.common.base.Functions#forMap(Map, Object)}.
   *
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,drainValueReferenceQueue,com.google.common.collect.MapMakerInternalMap$Segment:drainValueReferenceQueue(java.lang.ref.ReferenceQueue),1386,1398,"/**
* Drains the reference queue and reclaims values.
* @param valueReferenceQueue queue of references to be processed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardEquals,com.google.common.collect.ForwardingList:standardEquals(java.lang.Object),225,227,"/**
 * Checks equality with another object using standard equals implementation.
 * @param object the object to compare with
 * @return true if equal, false otherwise
 */","* A sensible definition of {@link #equals(Object)} in terms of {@link #size} and {@link
   * #iterator}. If you override either of those methods, you may wish to override {@link
   * #equals(Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,equals,com.google.common.collect.ImmutableList:equals(java.lang.Object),706,709,"/**
 * Checks equality with another object.
 * @param obj the object to compare
 * @return true if equal, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,create,com.google.common.collect.ConcurrentHashMultiset:create(java.lang.Iterable),104,108,"/**
* Creates a ConcurrentHashMultiset from an iterable of elements.
* @param elements the source iterable containing elements to add
* @return a new ConcurrentHashMultiset with the specified elements
*/","* Creates a new {@code ConcurrentHashMultiset} containing the specified elements, using the
   * default initial capacity, load factor, and concurrency settings.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.lang.Object[])",120,126,"/**
* Appends array of objects to an Appendable.
* @param appendable destination for appending
* @param parts array of objects to append
* @return the same Appendable instance
* @throws IOException if an I/O error occurs
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code appendable}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.lang.Iterable)",141,144,"/**
* Appends elements from iterable to StringBuilder.
* @param builder target StringBuilder
* @param parts iterable source of elements
* @return the modified StringBuilder
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,
   * Iterable)}, except that it does not throw {@link IOException}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner:join(java.util.Iterator),249,251,"/**
 * Joins elements from an iterator into a single string.
 * @param parts iterator of objects to join
 * @return concatenated string of all elements
 */","* Returns a string containing the string representation of each of {@code parts}, using the
   * previously configured separator between each.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner$MapJoiner:join(java.util.Map),476,478,"/**
 * Joins map entries into a string.
 * @param map input map with key-value pairs
 * @return concatenated string of map entries
 */","* Returns a string containing the string representation of each entry of {@code map}, using the
     * previously configured separator and key-value separator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,toString,com.google.common.cache.CacheBuilderSpec:toString(),236,239,"/**
* Returns string representation of object.
* Uses helper to add parsable string value.
*/","* Returns a string representation for this CacheBuilderSpec instance. The form of this
   * representation is not guaranteed.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,toString,com.google.common.eventbus.EventBus:toString(),269,272,"/**
 * Returns string representation of the object.
 * @return formatted string with identifier
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,toString,com.google.common.util.concurrent.Futures$CallbackListener:toString(),1135,1138,"/**
 * Returns string representation of the object.
 * @return formatted string with callback information
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/DeadEvent.java,toString,com.google.common.eventbus.DeadEvent:toString(),66,69,"/**
 * Generates a string representation of the object.
 * @return A string with class name and field values
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,toString,com.google.common.graph.ElementOrder:toString(),179,186,"/**
* Generates a string representation of the object.
* @return formatted string with type and optional comparator
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,toString,com.google.common.util.concurrent.ClosingFuture:toString(),2113,2117,"/**
* Generates a string representation of the object.
* @return formatted string with state and future details
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,toString,com.google.common.base.Predicates$ContainsPatternPredicate:toString(),763,771,"/**
* Returns string representation of the pattern.
* @return formatted string with pattern details
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,toString,com.google.common.collect.MapMaker:toString(),294,313,"/**
* Generates a string representation of the object.
* Includes non-default field values in lowercase for strength attributes.
* @return formatted string with object's fields
*/","* Returns a string representation for this MapMaker instance. The exact form of the returned
   * string is not specified.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,toString,com.google.common.cache.CacheBuilder:toString(),1076,1113,"/**
* Generates a string representation of the cache configuration.
* @return String describing cache settings
*/","* Returns a string representation for this CacheBuilder instance. The exact form of the returned
   * string is not specified.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,toString,com.google.common.cache.CacheStats:toString(),293,303,"/**
* Generates a string representation of the cache statistics.
* @return formatted string with hit, miss, and other count metrics
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap:<init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper)",168,202,"/**
* Initializes a MapMakerInternalMap with specified builder settings.
* @param builder configuration options for the map
* @param entryHelper helper for managing entries
*/","* Creates a new, empty map with the specified strategy, initial capacity and concurrency level.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,fromJavaUtil,com.google.common.base.Optional:fromJavaUtil(java.util.Optional),129,133,"/**
* Converts a Java Util Optional to a Guava Optional.
* @param javaUtilOptional the Java Util Optional to convert
* @return Guava Optional or null if input is null
*/","* Returns the equivalent {@code com.google.common.base.Optional} value to the given {@code
   * java.util.Optional}, or {@code null} if the argument is null.
   *
   * @since 21.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,<init>,com.google.common.collect.FluentIterable$2:<init>(java.lang.Iterable),124,126,"/**
 * Wraps an iterable in an Optional.
 * @param iterable source collection to wrap
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,<init>,com.google.common.collect.Iterables$UnmodifiableIterable:<init>(java.lang.Iterable),101,103,"/**
 * Wraps an Iterable to make it unmodifiable.
 * @param iterable the original Iterable to wrap
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource$ConcatenatedByteSource:sizeIfKnown(),696,723,"/**
 * Returns the total size of all sources if known.
 * @return Optional containing total size or absent if any source size is unknown
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource$SlicedByteSource:sizeIfKnown(),544,553,"/**
* Returns the size if known, adjusted for offset and length.
* @return Optional<Long> representing the adjusted size or absent if unknown
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lengthIfKnown,com.google.common.io.CharSource$ConcatenatedCharSource:lengthIfKnown(),710,721,"/**
 * Calculates total length of all known character sources.
 * @return Optional containing total length or absent if any source length is unknown
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addPendingString,com.google.common.util.concurrent.AbstractFuture:addPendingString(java.lang.StringBuilder),893,934,"/**
 * Appends pending status to StringBuilder.
 * Handles exceptions and checks for future completion.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,fromParts,"com.google.common.net.HostAndPort:fromParts(java.lang.String,int)",133,138,"/**
* Creates a HostAndPort instance from host and port.
* @param host hostname or IP address
* @param port port number
* @return HostAndPort object with specified host and port
*/","* Build a HostAndPort instance from separate host and port values.
   *
   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to
   * prohibit these.
   *
   * @param host the host string to parse. Must not contain a port number.
   * @param port a port number from [0..65535]
   * @return if parsing was successful, a populated HostAndPort object.
   * @throws IllegalArgumentException if {@code host} contains a port number, or {@code port} is out
   *     of range.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,fromHost,com.google.common.net.HostAndPort:fromHost(java.lang.String),151,155,"/**
* Creates HostAndPort from host string without port.
* @param host hostname string
* @return HostAndPort object without port
*/","* Build a HostAndPort instance from a host only.
   *
   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to
   * prohibit these.
   *
   * @param host the host-only string to parse. Must not contain a port number.
   * @return if parsing was successful, a populated HostAndPort object.
   * @throws IllegalArgumentException if {@code host} contains a port number.
   * @since 17.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,get,"com.google.common.collect.Iterables:get(java.lang.Iterable,int)",765,771,"/**
 * Retrieves an element from the iterable at the specified position.
 * @param iterable the collection of elements
 * @param position the index of the element to retrieve
 * @return the element at the given position or throws IndexOutOfBoundsException if out of bounds
 */","* Returns the element at the specified position in an iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (throws
   * {@code NoSuchElementException} if out of bounds)
   *
   * @param position position of the element to return
   * @return the element at the specified position in {@code iterable}
   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to
   *     the size of {@code iterable}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,copy,com.google.common.hash.BloomFilter:copy(),148,150,"/**
 * Creates a copy of the Bloom filter.
 * @return A new BloomFilter instance with the same configuration and data
 */","* Creates a new {@code BloomFilter} that's a copy of this instance. The new instance is equal to
   * this instance but shares no mutable state.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,<init>,"com.google.common.graph.DirectedMultiNetworkConnections:<init>(java.util.Map,java.util.Map,int)",44,47,"/**
 * Initializes directed multi-network connections.
 * @param inEdges map of incoming edges to nodes
 * @param outEdges map of outgoing edges to nodes
 * @param selfLoopCount count of self-loops in the network
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,<init>,"com.google.common.graph.DirectedNetworkConnections:<init>(java.util.Map,java.util.Map,int)",37,39,"/**
* Initializes directed network connections.
* @param inEdgeMap map of incoming edges to nodes
* @param outEdgeMap map of outgoing edges from nodes
* @param selfLoopCount number of self-loops in the network
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,removeInEdge,"com.google.common.graph.DirectedMultiNetworkConnections:removeInEdge(java.lang.Object,boolean)",104,112,"/**
* Removes an incoming edge from a node.
* @param edge the edge to remove
* @param isSelfLoop indicates if the edge forms a self-loop
* @return the node from which the edge was removed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,of,com.google.common.graph.DirectedGraphConnections:of(com.google.common.graph.ElementOrder),155,176,"/**
* Creates a directed graph connections object with specified edge order.
* @param incidentEdgeOrder type of edge ordering
* @return DirectedGraphConnections instance initialized with appropriate settings
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,addInEdge,"com.google.common.graph.DirectedMultiNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",124,131,"/**
 * Adds an incoming edge to a node.
 * @param edge the edge to add
 * @param node the target node
 * @param isSelfLoop true if the edge is a self-loop
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,acquire,com.google.common.util.concurrent.RateLimiter:acquire(int),302,307,"/**
* Acquires a specified number of permits and waits if necessary.
* @param permits number of permits to acquire
* @return time waited in seconds
*/","* Acquires the given number of permits from this {@code RateLimiter}, blocking until the request
   * can be granted. Tells the amount of time slept, if any.
   *
   * @param permits the number of permits to acquire
   * @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 16.0 (present in 13.0 with {@code void} return type})",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,com.google.common.util.concurrent.RateLimiter:tryAcquire(java.time.Duration),334,336,"/**
* Attempts to acquire permit within specified timeout.
* @param timeout maximum time to wait
* @return true if acquired, false otherwise
*/","* Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the
   * specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit
   * would not have been granted before the timeout expired.
   *
   * <p>This method is equivalent to {@code tryAcquire(1, timeout)}.
   *
   * @param timeout the maximum time to wait for the permit. Negative values are treated as zero.
   * @return {@code true} if the permit was acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,"com.google.common.util.concurrent.RateLimiter:tryAcquire(long,java.util.concurrent.TimeUnit)",350,353,"/**
* Attempts to acquire permit within specified time.
* @param timeout maximum time to wait for acquisition
* @param unit time unit of the timeout parameter
* @return true if acquired, false otherwise
*/","* Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the
   * specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit
   * would not have been granted before the timeout expired.
   *
   * <p>This method is equivalent to {@code tryAcquire(1, timeout, unit)}.
   *
   * @param timeout the maximum time to wait for the permit. Negative values are treated as zero.
   * @param unit the time unit of the timeout argument
   * @return {@code true} if the permit was acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,com.google.common.util.concurrent.RateLimiter:tryAcquire(int),365,367,"/**
 * Attempts to acquire specified number of permits without waiting.
 * @param permits number of permits to acquire
 * @return true if acquired, false otherwise
 */","* Acquires permits from this {@link RateLimiter} if it can be acquired immediately without delay.
   *
   * <p>This method is equivalent to {@code tryAcquire(permits, 0, anyUnit)}.
   *
   * @param permits the number of permits to acquire
   * @return {@code true} if the permits were acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,com.google.common.util.concurrent.RateLimiter:tryAcquire(),378,380,"/**
 * Attempts to acquire permit immediately.
 * @return true if acquired, false otherwise
 */","* Acquires a permit from this {@link RateLimiter} if it can be acquired immediately without
   * delay.
   *
   * <p>This method is equivalent to {@code tryAcquire(1)}.
   *
   * @return {@code true} if the permit was acquired, {@code false} otherwise
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,"com.google.common.util.concurrent.RateLimiter:tryAcquire(int,java.time.Duration)",393,395,"/**
* Attempts to acquire specified permits with timeout.
* @param permits number of permits to acquire
* @param timeout maximum time to wait for permits
* @return true if permits acquired, false otherwise
*/","* Acquires the given number of permits from this {@code RateLimiter} if it can be obtained
   * without exceeding the specified {@code timeout}, or returns {@code false} immediately (without
   * waiting) if the permits would not have been granted before the timeout expired.
   *
   * @param permits the number of permits to acquire
   * @param timeout the maximum time to wait for the permits. Negative values are treated as zero.
   * @return {@code true} if the permits were acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enter,"com.google.common.util.concurrent.Monitor:enter(long,java.util.concurrent.TimeUnit)",400,423,"/**
* Attempts to acquire lock with a specified timeout.
* @param time duration of the timeout
* @param unit time unit for the timeout
* @return true if lock acquired, false otherwise
*/","* Enters this monitor. Blocks at most the given time.
   *
   * @return whether the monitor was entered",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,<init>,com.google.common.util.concurrent.AbstractService:<init>(),195,195,"/**
 * Protected constructor for AbstractService.
 */",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,isIntact,com.google.common.collect.MinMaxPriorityQueue:isIntact(),503,511,"/**
* Checks if the heap structure is intact.
* @return true if all elements verify their index, false otherwise
*/","* Returns {@code true} if the MinMax heap structure holds. This is only used in testing.
   *
   * <p>TODO(kevinb): move to the test class?",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,toCacheBuilder,com.google.common.cache.CacheBuilderSpec:toCacheBuilder(),172,221,"/**
* Configures and returns a CacheBuilder with specified settings.
*/",Returns a CacheBuilder configured according to this instance's specification.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,build,com.google.common.collect.Interners$InternerBuilder:build(),85,90,"/**
* Builds and returns an Interner instance.
* @param strong flag indicating whether keys should be strongly referenced
* @return Interner object configured with specified key strength
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,tryWeakKeys,com.google.common.collect.Platform:tryWeakKeys(com.google.common.collect.MapMaker),135,138,"/**
 * Configures the MapMaker to use weak keys.
 * @param mapMaker the original MapMaker instance
 * @return the configured MapMaker with weak keys enabled
 */","* Configures the given map maker to use weak keys, if possible; does nothing otherwise (i.e., in
   * GWT). This is sometimes acceptable, when only server-side code could generate enough volume
   * that reclamation becomes important.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,checkCurrentState,com.google.common.util.concurrent.AbstractService:checkCurrentState(com.google.common.util.concurrent.Service$State),379,392,"/**
 * Checks if the current state matches the expected state.
 * Throws an exception if the states do not match, with a specific message for FAILED state.
 * @param expected the expected state of the service
 */",Checks that the current state is equal to the expected state.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getEntry,com.google.common.collect.ArrayTable$ArrayMap:getEntry(int),224,244,"/**
* Retrieves entry at specified index.
* @param index position of the entry in the map
* @return Entry object representing key-value pair
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,at,"com.google.common.collect.ArrayTable:at(int,int)",327,332,"/**
* Retrieves element at specified row and column indices.
* @param rowIndex index of the row
* @param columnIndex index of the column
* @return value at the specified position or null if out of bounds
*/","* Returns the value corresponding to the specified row and column indices. The same value is
   * returned by {@code get(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex))}, but this
   * method runs more quickly.
   *
   * @param rowIndex position of the row key in {@link #rowKeyList()}
   * @param columnIndex position of the row key in {@link #columnKeyList()}
   * @return the value with the specified row and column
   * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than
   *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal
   *     to the number of allowed column keys",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,set,"com.google.common.collect.ArrayTable:set(int,int,java.lang.Object)",347,355,"/**
* Sets a value at specified row and column.
* @param rowIndex index of the row
* @param columnIndex index of the column
* @param value new value to set, can be null
* @return old value at the specified position
*/","* Associates {@code value} with the specified row and column indices. The logic {@code
   * put(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex), value)} has the same
   * behavior, but this method runs more quickly.
   *
   * @param rowIndex position of the row key in {@link #rowKeyList()}
   * @param columnIndex position of the row key in {@link #columnKeyList()}
   * @param value value to store in the table
   * @return the previous value with the specified row and column
   * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than
   *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal
   *     to the number of allowed column keys",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,get,com.google.common.collect.CartesianList$1:get(int),115,146,"/**
* Retrieves an immutable list at a specified index.
* @param index the position of the list to retrieve
* @return an ImmutableList object representing the list at the given index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,get,com.google.common.collect.CartesianList:get(int),115,146,"/**
* Retrieves an immutable list at the specified index.
* @param index position of the list to retrieve
* @return ImmutableList containing elements from the specified axis
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,get,com.google.common.collect.ImmutableList$ReverseImmutableList:get(int),680,684,"/**
* Retrieves element at specified index.
* @param index position of the element to retrieve
* @return element at given index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,get,com.google.common.collect.ImmutableList$SubList:get(int),490,494,"/**
* Retrieves element at specified index.
* @param index position of the element to retrieve
* @return element at given index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$CharSequenceAsList:get(int),824,828,"/**
 * Retrieves character at specified index.
 * @param index position of character in the sequence
 * @return character at given index
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,reverseIndex,com.google.common.collect.Lists$ReverseList:reverseIndex(int),874,878,"/**
 * Calculates the reverse index of an element in a list.
 * @param index the original index of the element
 * @return the reverse index of the element
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$StringAsImmutableList:get(int),796,800,"/**
* Returns character at specified index.
* @param index position of character in the string
* @return character at given index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,get,com.google.common.collect.SingletonImmutableList:get(int),44,48,"/**
 * Retrieves an element by index.
 * @param index position of the element to retrieve (0-based)
 * @return the element at the specified index
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,get,com.google.common.primitives.Booleans$BooleanArrayAsList:get(int),415,419,"/**
* Retrieves element at specified index.
* @param index position of the element
* @return element at given index or throws exception if invalid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,set,"com.google.common.primitives.Booleans$BooleanArrayAsList:set(int,java.lang.Boolean)",452,459,"/**
* Sets the element at the specified index.
* @param index position to update
* @param element new boolean value
* @return old value at the index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,get,com.google.common.primitives.Bytes$ByteArrayAsList:get(int),282,286,"/**
* Retrieves an element at the specified index.
* @param index position of the element to retrieve
* @return Byte value at the given index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,set,"com.google.common.primitives.Bytes$ByteArrayAsList:set(int,java.lang.Byte)",318,325,"/**
* Sets the element at the specified index.
* @param index position of the element to set
* @param element new value to store at the index
* @return old value at the specified index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,get,com.google.common.primitives.Chars$CharArrayAsList:get(int),602,606,"/**
* Retrieves character at specified index.
* @param index position of character to retrieve
* @return character at given index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,set,"com.google.common.primitives.Chars$CharArrayAsList:set(int,java.lang.Character)",639,646,"/**
* Sets the element at the specified index.
* @param index position to set
* @param element new character value
* @return old character at the index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,get,com.google.common.primitives.Doubles$DoubleArrayAsList:get(int),610,614,"/**
 * Retrieves element at specified index.
 * @param index position of the element to retrieve
 * @return element at the given index
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,set,"com.google.common.primitives.Doubles$DoubleArrayAsList:set(int,java.lang.Double)",652,659,"/**
* Sets the element at the specified index.
* @param index position to set the element
* @param element new value to store
* @return old value at the specified index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,get,com.google.common.primitives.Floats$FloatArrayAsList:get(int),604,608,"/**
* Retrieves element at specified index.
* @param index position of the element to retrieve
* @return element at the given index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,set,"com.google.common.primitives.Floats$FloatArrayAsList:set(int,java.lang.Float)",640,647,"/**
* Sets the element at the specified index.
* @param index position of the element to set
* @param element new value to be stored at the index
* @return old value at the specified index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,get,com.google.common.primitives.ImmutableDoubleArray:get(int),380,383,"/**
 * Retrieves element at specified index.
 * @param index position of the element to retrieve
 * @return element at the given index
 */","* Returns the {@code double} value present at the given index.
   *
   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to
   *     {@link #length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,get,com.google.common.primitives.ImmutableIntArray:get(int),377,380,"/**
 * Retrieves element at specified index.
 * @param index position of the element to retrieve
 * @return element at the given index
 */","* Returns the {@code int} value present at the given index.
   *
   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to
   *     {@link #length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,get,com.google.common.primitives.ImmutableLongArray:get(int),379,382,"/**
 * Retrieves element at specified index.
 * @param index position of the element to retrieve
 * @return element at the given index
 */","* Returns the {@code long} value present at the given index.
   *
   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to
   *     {@link #length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,get,com.google.common.primitives.Ints$IntArrayAsList:get(int),692,696,"/**
* Retrieves element at specified index.
* @param index position of the element to retrieve
* @return element at the given index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,set,"com.google.common.primitives.Ints$IntArrayAsList:set(int,java.lang.Integer)",733,740,"/**
* Sets element at specified index.
* @param index position to update
* @param element new value to set
* @return old value at the index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,get,com.google.common.primitives.Longs$LongArrayAsList:get(int),744,748,"/**
 * Retrieves element at specified index.
 * @param index position of the element to retrieve
 * @return element at the given index
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,set,"com.google.common.primitives.Longs$LongArrayAsList:set(int,java.lang.Long)",785,792,"/**
* Sets the element at the specified index.
* @param index position to set element
* @param element new value to be stored
* @return old element at the specified index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,get,com.google.common.primitives.Shorts$ShortArrayAsList:get(int),653,657,"/**
* Retrieves element at specified index.
* @param index position of the element to retrieve
* @return the element at the given index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,set,"com.google.common.primitives.Shorts$ShortArrayAsList:set(int,java.lang.Short)",689,696,"/**
* Sets the element at the specified index.
* @param index position of the element to set
* @param element new value to be stored
* @return old value at the specified index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,getAt,com.google.common.util.concurrent.Striped$LargeLazyStriped:getAt(int),487,499,"/**
* Retrieves or creates a lock at the specified index.
* @param index position in the list
* @return lock object at the given index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,getAt,com.google.common.util.concurrent.Striped$SmallLazyStriped:getAt(int),416,438,"/**
* Retrieves or creates an element at the specified index.
* @param index position in the array-like structure
* @return element at the given index, creating it if necessary
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,"com.google.common.base.CharMatcher$Any:indexIn(java.lang.CharSequence,int)",1051,1056,"/**
* Finds the index of the first character in the sequence starting from 'start'.
* @param sequence the CharSequence to search within
* @param start the starting index for the search
* @return the index if found, otherwise -1
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,"com.google.common.base.CharMatcher$None:indexIn(java.lang.CharSequence,int)",1149,1154,"/**
 * Searches for this character sequence within another.
 * @param sequence the CharSequence to search within
 * @param start the starting index for the search
 * @return always returns -1 (not found)
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,"com.google.common.base.CharMatcher:indexIn(java.lang.CharSequence,int)",563,572,"/**
* Finds index of first matching character in sequence starting from given position.
* @param sequence the CharSequence to search within
* @param start the starting index for the search
* @return index of first match or -1 if no match found
*/","* Returns the index of the first matching BMP character in a character sequence, starting from a
   * given position, or {@code -1} if no character matches after that position.
   *
   * <p>The default implementation iterates over the sequence in forward order, beginning at {@code
   * start}, calling {@link #matches} for each character.
   *
   * @param sequence the character sequence to examine
   * @param start the first index to examine; must be nonnegative and no greater than {@code
   *     sequence.length()}
   * @return the index of the first matching character, guaranteed to be no less than {@code start},
   *     or {@code -1} if no character matches
   * @throws IndexOutOfBoundsException if start is negative or greater than {@code
   *     sequence.length()}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,<init>,"com.google.common.collect.AbstractIndexedListIterator:<init>(int,int)",64,68,"/**
* Initializes an iterator with given size and position.
* @param size total number of elements in the list
* @param position current index position of the iterator
*/","* Constructs an iterator across a sequence of the given size with the given initial position.
   * That is, the first call to {@link #nextIndex()} will return {@code position}, and the first
   * call to {@link #next()} will return the element at that index, if available. Calls to {@link
   * #previous()} can retrieve the preceding {@code position} elements.
   *
   * @throws IndexOutOfBoundsException if {@code position} is negative or is greater than {@code
   *     size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,add,"com.google.common.collect.FilteredKeyMultimap$AddRejectingList:add(int,java.lang.Object)",153,157,"/**
* Adds an element at a specified index.
* @param index position to insert the element
* @param element the element to be added
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,addAll,"com.google.common.collect.FilteredKeyMultimap$AddRejectingList:addAll(int,java.util.Collection)",165,171,"/**
 * Adds all elements from the specified collection at the given index.
 * @param index position to insert elements
 * @param elements collection of elements to add
 * @return true if this list changed as a result of the call
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,reversePosition,com.google.common.collect.Lists$ReverseList:reversePosition(int),880,884,"/**
 * Reverses the position of an index within a list.
 * @param index current position in the list
 * @return reversed position in the list
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataInput,"com.google.common.io.ByteStreams:newDataInput(byte[],int)",316,320,"/**
* Creates a new ByteArrayDataInput starting from a given position.
* @param bytes source byte array
* @param start starting index in the byte array
* @return ByteArrayDataInput for reading data
*/","* Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array,
   * starting at the given position.
   *
   * @throws IndexOutOfBoundsException if {@code start} is negative or greater than the length of
   *     the array",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,isWellFormed,"com.google.common.base.Utf8:isWellFormed(byte[],int,int)",123,133,"/**
* Checks if byte array is well-formed.
* @param bytes the byte array to check
* @param off the starting offset in the array
* @param len the length of the section to check
* @return true if well-formed, false otherwise
*/","* Returns whether the given byte array slice is a well-formed UTF-8 byte sequence, as defined by
   * {@link #isWellFormed(byte[])}. Note that this can be false even when {@code
   * isWellFormed(bytes)} is true.
   *
   * @param bytes the input buffer
   * @param off the offset in the buffer of the first byte to read
   * @param len the number of bytes to read from the buffer",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,toArrayImpl,"com.google.common.collect.ObjectArrays:toArrayImpl(java.lang.Object[],int,int,java.lang.Object[])",155,166,"/**
 * Copies elements from source array to destination array.
 * @param src source array containing elements
 * @param offset starting index in source array
 * @param len number of elements to copy
 * @param dst destination array for copied elements
 * @return the destination array with copied elements
 */","* Implementation of {@link Collection#toArray(Object[])} for collections backed by an object
   * array. the runtime type of the returned array is that of the specified array. If the collection
   * fits in the specified array, it is returned therein. Otherwise, a new array is allocated with
   * the runtime type of the specified array and the size of the specified collection.
   *
   * <p>If the collection fits in the specified array with room to spare (i.e., the array has more
   * elements than the collection), the element in the array immediately following the end of the
   * collection is set to {@code null}. This is useful in determining the length of the collection
   * <i>only</i> if the caller knows that the collection does not contain any null elements.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,copyAsObjectArray,"com.google.common.collect.ObjectArrays:copyAsObjectArray(java.lang.Object[],int,int)",188,196,"/**
 * Copies a portion of an object array to a new array.
 * @param elements source array
 * @param offset starting index in the source array
 * @param length number of elements to copy
 * @return new Object array containing copied elements or empty if length is 0
 */","* Returns a copy of the specified subrange of the specified array that is literally an Object[],
   * and not e.g. a {@code String[]}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,subList,"com.google.common.collect.SingletonImmutableList:subList(int,int)",65,69,"/**
* Returns a sublist of elements from the specified range.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
* @return sublist of elements or empty list if indices are equal
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putBytes,"com.google.common.hash.AbstractByteHasher:putBytes(byte[],int,int)",90,96,"/**
* Adds a byte array to the hash.
* @param bytes source byte array
* @param off starting offset in the array
* @param len number of bytes to add
* @return this Hasher instance for chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putBytes,"com.google.common.hash.AbstractHasher:putBytes(byte[],int,int)",69,77,"/**
 * Adds a byte array to the hash.
 * @param bytes source byte array
 * @param off starting index in the byte array
 * @param len number of bytes to add
 * @return this Hasher instance
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,writeBytesTo,"com.google.common.hash.HashCode:writeBytesTo(byte[],int,int)",83,89,"/**
 * Writes byte array to destination.
 * @param dest target byte array
 * @param offset starting position in the array
 * @param maxLength maximum bytes to write
 * @return number of bytes written
 */","* Copies bytes from this hash code into {@code dest}.
   *
   * @param dest the byte array into which the hash code will be written
   * @param offset the start offset in the data
   * @param maxLength the maximum number of bytes to write
   * @return the number of bytes written to {@code dest}
   * @throws IndexOutOfBoundsException if there is not enough room in {@code dest}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putBytes,"com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putBytes(byte[],int,int)",302,314,"/**
 * Updates the hash with bytes from the specified array.
 * @param bytes source byte array
 * @param off offset to start reading bytes
 * @param len number of bytes to read
 * @return this Hasher instance
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeTo,"com.google.common.io.BaseEncoding$Base16Encoding:encodeTo(java.lang.Appendable,byte[],int,int)",967,976,"/**
 * Encodes a byte array to an Appendable.
 * @param target destination for encoded characters
 * @param bytes source byte array
 * @param off starting offset in the byte array
 * @param len number of bytes to encode
 * @throws IOException if an I/O error occurs
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeTo,"com.google.common.io.BaseEncoding$Base64Encoding:encodeTo(java.lang.Appendable,byte[],int,int)",1008,1023,"/**
* Encodes byte array to Base64.
* @param target Appendable to write encoded data
* @param bytes source byte array
* @param off starting index in bytes
* @param len number of bytes to encode
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeChunkTo,"com.google.common.io.BaseEncoding$StandardBaseEncoding:encodeChunkTo(java.lang.Appendable,byte[],int,int)",692,715,"/**
* Encodes a byte array chunk to an Appendable.
* @param target where encoded characters are appended
* @param bytes source byte array
* @param off offset in the byte array
* @param len length of the chunk to encode
* @throws IOException if writing to target fails
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encode,"com.google.common.io.BaseEncoding:encode(byte[],int,int)",154,163,"/**
* Encodes a byte array segment into a string.
* @param bytes source byte array
* @param off starting offset in the byte array
* @param len number of bytes to encode
* @return encoded string representation
*/","* Encodes the specified range of the specified byte array, and returns the encoded {@code
   * String}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,read,"com.google.common.io.ByteStreams:read(java.io.InputStream,byte[],int,int)",935,954,"/**
* Reads bytes from an input stream into a byte array.
* @param in the InputStream to read from
* @param b the destination buffer
* @param off the offset in the buffer where reading starts
* @param len the maximum number of bytes to read
* @return the total number of bytes read, or -1 if no more bytes are available
*/","* Reads some bytes from an input stream and stores them into the buffer array {@code b}. This
   * method blocks until {@code len} bytes of input data have been read into the array, or end of
   * file is detected. The number of bytes read is returned, possibly zero. Does not close the
   * stream.
   *
   * <p>A caller can detect EOF if the number of bytes read is less than {@code len}. All subsequent
   * calls on the same stream will return zero.
   *
   * <p>If {@code b} is null, a {@code NullPointerException} is thrown. If {@code off} is negative,
   * or {@code len} is negative, or {@code off+len} is greater than the length of the array {@code
   * b}, then an {@code IndexOutOfBoundsException} is thrown. If {@code len} is zero, then no bytes
   * are read. Otherwise, the first byte read is stored into element {@code b[off]}, the next one
   * into {@code b[off+1]}, and so on. The number of bytes read is, at most, equal to {@code len}.
   *
   * @param in the input stream to read from
   * @param b the buffer into which the data is read
   * @param off an int specifying the offset into the data
   * @param len an int specifying the number of bytes to read
   * @return the number of bytes read
   * @throws IOException if an I/O error occurs
   * @throws IndexOutOfBoundsException if {@code off} is negative, if {@code len} is negative, or if
   *     {@code off + len} is greater than {@code b.length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,read,"com.google.common.io.CharSequenceReader:read(char[],int,int)",99,112,"/**
 * Reads characters into a buffer from the sequence.
 * @param cbuf character array to store read data
 * @param off starting offset in the buffer
 * @param len maximum number of characters to read
 * @return actual number of characters read or -1 if end reached
 * @throws IOException if an I/O error occurs
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,"com.google.common.io.CharStreams$NullWriter:write(char[],int,int)",295,298,"/**
 * Writes characters to the output stream.
 * @param cbuf character buffer containing data to write
 * @param off starting index in the buffer
 * @param len number of characters to write
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,"com.google.common.io.CharStreams$NullWriter:write(java.lang.String,int,int)",305,308,"/**
 * Writes a substring of the specified string.
 * Validates offset and length before writing.
 * @param str the source string
 * @param off the starting index in the string
 * @param len the number of characters to write
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,append,"com.google.common.io.CharStreams$NullWriter:append(java.lang.CharSequence,int,int)",315,319,"/**
* Appends a subsequence of the given character sequence.
* @param csq the character sequence to append, may be null
* @param start the starting index, inclusive
* @param end the ending index, exclusive
* @return this Writer instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,subList,"com.google.common.primitives.Booleans$BooleanArrayAsList:subList(int,int)",461,469,"/**
 * Returns a sublist of Boolean values.
 * @param fromIndex starting index (inclusive)
 * @param toIndex ending index (exclusive)
 * @return List containing the specified range of elements
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,reverse,"com.google.common.primitives.Booleans:reverse(boolean[],int,int)",554,562,"/**
* Reverses elements in a boolean array between specified indices.
* @param array the boolean array to reverse
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Booleans.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,subList,"com.google.common.primitives.Bytes$ByteArrayAsList:subList(int,int)",327,335,"/**
* Returns a sublist of bytes.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List of Byte objects from fromIndex to toIndex
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,reverse,"com.google.common.primitives.Bytes:reverse(byte[],int,int)",405,413,"/**
* Reverses elements in a byte array between specified indices.
* @param array the byte array to reverse
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Bytes.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,subList,"com.google.common.primitives.Chars$CharArrayAsList:subList(int,int)",648,656,"/**
* Returns a sub-list of characters.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List containing the specified range of characters
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,reverse,"com.google.common.primitives.Chars:reverse(char[],int,int)",495,503,"/**
* Reverses a portion of a character array.
* @param array the character array to reverse
* @param fromIndex the starting index (inclusive)
* @param toIndex the ending index (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Chars.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,subList,"com.google.common.primitives.Doubles$DoubleArrayAsList:subList(int,int)",661,669,"/**
* Returns a sublist of this list.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return sublist containing elements from fromIndex to toIndex
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,reverse,"com.google.common.primitives.Doubles:reverse(double[],int,int)",469,477,"/**
 * Reverses elements in a double array between specified indices.
 * @param array the array to reverse
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Doubles.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,subList,"com.google.common.primitives.Floats$FloatArrayAsList:subList(int,int)",649,657,"/**
 * Returns a sublist of floats.
 * @param fromIndex starting index (inclusive)
 * @param toIndex ending index (exclusive)
 * @return List of floats between fromIndex and toIndex
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,reverse,"com.google.common.primitives.Floats:reverse(float[],int,int)",466,474,"/**
* Reverses elements in a float array between two indices.
* @param array the array to be reversed
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Floats.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,subArray,"com.google.common.primitives.ImmutableDoubleArray:subArray(int,int)",454,459,"/**
* Returns a subarray from startIndex to endIndex.
* @param startIndex inclusive starting index
* @param endIndex exclusive ending index
* @return ImmutableDoubleArray representing the subarray
*/","* Returns a new immutable array containing the values in the specified range.
   *
   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one
   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,
   * end).trimmed()}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,subArray,"com.google.common.primitives.ImmutableIntArray:subArray(int,int)",449,454,"/**
* Returns a subarray from startIndex to endIndex.
* @param startIndex starting index (inclusive)
* @param endIndex ending index (exclusive)
* @return ImmutableIntArray representing the subarray
*/","* Returns a new immutable array containing the values in the specified range.
   *
   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one
   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,
   * end).trimmed()}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,subArray,"com.google.common.primitives.ImmutableLongArray:subArray(int,int)",451,456,"/**
* Returns a subarray from startIndex to endIndex.
* @param startIndex inclusive starting index
* @param endIndex exclusive ending index
* @return ImmutableLongArray containing the specified range
*/","* Returns a new immutable array containing the values in the specified range.
   *
   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one
   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,
   * end).trimmed()}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,subList,"com.google.common.primitives.Ints$IntArrayAsList:subList(int,int)",742,750,"/**
* Returns a sublist of integers.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List containing elements between fromIndex and toIndex
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,reverse,"com.google.common.primitives.Ints:reverse(int[],int,int)",528,536,"/**
* Reverses elements in the given array between specified indices.
* @param array the array to reverse
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Ints.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,subList,"com.google.common.primitives.Longs$LongArrayAsList:subList(int,int)",794,802,"/**
* Returns a sublist of this list.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return sublist containing elements from fromIndex to toIndex
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,reverse,"com.google.common.primitives.Longs:reverse(long[],int,int)",606,614,"/**
* Reverses elements in a portion of the array.
* @param array array to reverse
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Longs.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,subList,"com.google.common.primitives.Shorts$ShortArrayAsList:subList(int,int)",698,706,"/**
 * Returns a sublist of this list.
 * @param fromIndex the starting index (inclusive)
 * @param toIndex the ending index (exclusive)
 * @return a sublist containing elements from fromIndex to toIndex
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,reverse,"com.google.common.primitives.Shorts:reverse(short[],int,int)",518,526,"/**
* Reverses elements in a short array between given indices.
* @param array the array to reverse
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Shorts.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sort,"com.google.common.primitives.UnsignedBytes:sort(byte[],int,int)",527,537,"/**
* Sorts a subarray of bytes in ascending order.
* @param array the byte array to sort
* @param fromIndex the start index (inclusive)
* @param toIndex the end index (exclusive)
*/","* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its
   * elements as unsigned bytes.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sortDescending,"com.google.common.primitives.UnsignedBytes:sortDescending(byte[],int,int)",556,566,"/**
* Sorts a subarray in descending order.
* @param array the byte array to sort
* @param fromIndex the start index of the subarray (inclusive)
* @param toIndex the end index of the subarray (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order, interpreting them as unsigned 8-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sort,"com.google.common.primitives.UnsignedInts:sort(int[],int,int)",235,245,"/**
* Sorts a subarray in ascending order.
* @param array the array to be sorted
* @param fromIndex the starting index of the subarray (inclusive)
* @param toIndex the ending index of the subarray (exclusive)
*/","* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its
   * elements as unsigned 32-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sortDescending,"com.google.common.primitives.UnsignedInts:sortDescending(int[],int,int)",264,274,"/**
* Sorts a portion of an array in descending order.
* @param array the array to sort
* @param fromIndex the start index (inclusive)
* @param toIndex the end index (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order, interpreting them as unsigned 32-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sort,"com.google.common.primitives.UnsignedLongs:sort(long[],int,int)",199,209,"/**
* Sorts a portion of an array in ascending order.
* @param array the array to be sorted
* @param fromIndex the starting index (inclusive)
* @param toIndex the ending index (exclusive)
*/","* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its
   * elements as unsigned 64-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sortDescending,"com.google.common.primitives.UnsignedLongs:sortDescending(long[],int,int)",228,238,"/**
 * Sorts a portion of the array in descending order.
 * @param array the array to be sorted
 * @param fromIndex the start index, inclusive
 * @param toIndex the end index, exclusive
 */","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order, interpreting them as unsigned 64-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Column$Values:remove(java.lang.Object),648,651,"/**
* Removes entries with specified value.
* @param obj value to be removed
* @return true if removal successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,filterUpperBounds,com.google.common.reflect.Types:filterUpperBounds(java.lang.Iterable),521,523,"/**
 * Filters out Object class from type bounds.
 * @param bounds iterable collection of type bounds
 * @return filtered iterable without Object class
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,filter,"com.google.common.collect.Collections2:filter(java.util.Collection,com.google.common.base.Predicate)",85,94,"/**
* Filters elements of a collection based on a predicate.
* @param unfiltered original collection to filter
* @param predicate condition to apply for filtering
* @return filtered collection supporting additional operations
*/","* Returns the elements of {@code unfiltered} that satisfy a predicate. The returned collection is
   * a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting collection's iterator does not support {@code remove()}, but all other
   * collection methods are supported. When given an element that doesn't satisfy the predicate, the
   * collection's {@code add()} and {@code addAll()} methods throw an {@link
   * IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are
   * called on the filtered collection, only elements that satisfy the filter will be removed from
   * the underlying collection.
   *
   * <p>The returned collection isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered collection's methods, such as {@code size()}, iterate across every
   * element in the underlying collection and determine which elements satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered,
   * predicate)} and use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#filter Stream.filter}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createKeys,com.google.common.collect.FilteredKeyMultimap:createKeys(),222,225,"/**
 * Creates a filtered multiset of keys based on a predicate.
 * @return Multiset containing only keys that match the predicate
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(char),126,128,"/**
* Creates a Splitter using a specified character separator.
* @param separator the character used to split strings
* @return a Splitter instance configured with the given separator
*/","* Returns a splitter that uses the given single-character separator. For example, {@code
   * Splitter.on(',').split(""foo,,bar"")} returns an iterable containing {@code [""foo"", """", ""bar""]}.
   *
   * @param separator the character to recognize as a separator
   * @return a splitter, with default settings, that recognizes that separator",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LoadingValueReference:<init>(com.google.common.cache.LocalCache$ValueReference),3500,3502,"/**
* Initializes with an old value reference.
* @param oldValue existing value reference or null if none
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,<init>,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:<init>(),463,463,"/**
* Protected constructor for SleepingStopwatch.
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,<init>,"com.google.common.base.internal.Finalizer:<init>(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference)",126,136,"/**
 * Initializes a Finalizer with reference class, queue, and phantom reference.
 * @param finalizableReferenceClass Class of objects being finalized
 * @param queue ReferenceQueue for tracking finalized objects
 * @param frqReference PhantomReference that initiated the finalization process
 */",Constructs a new finalizer thread.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,<init>,com.google.common.collect.ImmutableListMultimap$Builder:<init>(),234,234,"/**
 * Constructs a new Builder instance.
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableListMultimap#builder}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,builder,com.google.common.collect.ImmutableMultimap:builder(),129,131,"/**
 * Creates a new Builder instance.
 * @param <K> key type
 * @param <V> value type
 * @return Builder object for constructing instances
 */","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,<init>,com.google.common.collect.ImmutableSetMultimap$Builder:<init>(),262,262,"/**
* Constructs a new Builder instance.
*/","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableSetMultimap#builder}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,<init>,com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache:<init>(com.google.common.cache.LoadingCache),82,84,"/**
 * Initializes a new forwarding cache.
 * @param delegate the underlying cache to forward operations to
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$ManualSerializationProxy:<init>(com.google.common.cache.LocalCache),4690,4704,"/**
 * Constructs a serialization proxy for the given LocalCache.
 * @param cache the LocalCache instance to serialize
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,<init>,com.google.common.collect.FilteredKeyMultimap$AddRejectingList:<init>(java.lang.Object),143,145,"/**
 * Adds a key to the rejecting list.
 * @param key the key to be added
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,<init>,com.google.common.collect.ForwardingSortedMultiset:<init>(),49,49,"/**
 * Initializes an empty ForwardingSortedMultiset.
 */",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,<init>,com.google.common.collect.Multisets$UnmodifiableMultiset:<init>(com.google.common.collect.Multiset),134,136,"/**
 * Creates an unmodifiable multiset backed by the specified delegate.
 * @param delegate the backing multiset to wrap
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,<init>,com.google.common.collect.EvictingQueue:<init>(int),54,58,"/**
* Constructs an EvictingQueue with a specified maximum size.
* @param maxSize the maximum number of elements to hold in the queue
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,<init>,com.google.common.collect.ForwardingDeque:<init>(),49,49,"/**
* Constructs an empty ForwardingDeque instance.
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,<init>,com.google.common.util.concurrent.ForwardingBlockingQueue:<init>(),46,46,"/**
 * Constructs a new instance of ForwardingBlockingQueue.
 */",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,<init>,com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:<init>(java.lang.Object),118,120,"/**
 * Adds a key to the rejecting set.
 * @param key the key to add
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,<init>,com.google.common.collect.ForwardingSortedSet:<init>(),65,65,"/**
 * Initializes an empty ForwardingSortedSet.
 */",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$UnmodifiableEntrySet:<init>(java.util.Set),1572,1574,"/**
 * Creates an unmodifiable entry set from a given set of entries.
 * @param entries the set of entries to wrap
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:<init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)",2822,2835,"/**
* Initializes a new serialization proxy for concurrent maps.
* @param keyStrength determines the strength of keys (e.g., strong, weak)
* @param valueStrength determines the strength of values (e.g., strong, weak)
* @param keyEquivalence equivalence strategy for keys
* @param valueEquivalence equivalence strategy for values
* @param concurrencyLevel expected number of concurrent threads accessing map
* @param delegate the underlying ConcurrentMap to be proxied
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,<init>,com.google.common.collect.ForwardingNavigableMap:<init>(),61,61,"/**
 * Constructs a new ForwardingNavigableMap instance.
 */",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$UnmodifiableNavigableMap:<init>(java.util.NavigableMap),3455,3457,"/**
 * Wraps a NavigableMap to make it unmodifiable.
 * @param delegate the original NavigableMap to wrap
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$UnmodifiableNavigableMap:<init>(java.util.NavigableMap,com.google.common.collect.Maps$UnmodifiableNavigableMap)",3459,3463,"/**
* Constructs an unmodifiable navigable map.
* @param delegate the underlying modifiable map
* @param descendingMap the unmodifiable descending view of the map
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,inverse,com.google.common.collect.Maps$UnmodifiableBiMap:inverse(),1779,1785,"/**
* Returns the inverse of the bi-map.
* @return a new UnmodifiableBiMap representing the inverse
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableBiMap,com.google.common.collect.Maps:unmodifiableBiMap(com.google.common.collect.BiMap),1695,1698,"/**
* Returns an unmodifiable view of the specified bi-map.
* @param bimap the bi-map to wrap
* @return an unmodifiable BiMap instance
*/","* Returns an unmodifiable view of the specified bimap. This method allows modules to provide
   * users with ""read-only"" access to internal bimaps. Query operations on the returned bimap ""read
   * through"" to the specified bimap, and attempts to modify the returned map, whether direct or via
   * its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned bimap will be serializable if the specified bimap is serializable.
   *
   * @param bimap the bimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified bimap",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,create,com.google.common.collect.MutableClassToInstanceMap:create(),59,61,"/**
* Creates a mutable map that associates classes with instances.
* @param <B> type of objects to be stored in the map
* @return a new MutableClassToInstanceMap instance
*/","* Returns a new {@code MutableClassToInstanceMap} instance backed by a {@link HashMap} using the
   * default initial capacity and load factor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,create,com.google.common.collect.MutableClassToInstanceMap:create(java.util.Map),68,71,"/**
* Creates a MutableClassToInstanceMap from a given map.
* @param backingMap the initial map to back the instance
* @return a new MutableClassToInstanceMap instance
*/","* Returns a new {@code MutableClassToInstanceMap} instance backed by a given empty {@code
   * backingMap}. The caller surrenders control of the backing map, and thus should not allow any
   * direct references to it to remain accessible.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,of,com.google.common.reflect.ImmutableTypeToInstanceMap:of(),35,37,"/**
* Creates an empty ImmutableTypeToInstanceMap.
* @return an empty map with no key-value pairs
*/",Returns an empty type to instance map.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,transformEntries,com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:transformEntries(java.util.Iterator),156,159,"/**
* Transforms entries to unmodifiable.
* @param entries iterator of map entries
* @return iterator of unmodifiable entries
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,<init>,com.google.common.collect.ForwardingSortedSetMultimap:<init>(),42,42,"/**
* Constructs a new empty ForwardingSortedSetMultimap.
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableListMultimap:<init>(com.google.common.collect.ListMultimap),795,797,"/**
 * Wraps a ListMultimap to make it unmodifiable.
 * @param delegate original ListMultimap to wrap
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:<init>(com.google.common.collect.SetMultimap),825,827,"/**
 * Constructs an unmodifiable set multimap from another set multimap.
 * @param delegate the original set multimap to wrap
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableMultimap,com.google.common.collect.Multimaps:unmodifiableMultimap(com.google.common.collect.Multimap),656,662,"/**
* Returns an unmodifiable view of the specified multimap.
* @param delegate the original multimap to wrap
* @return an unmodifiable Multimap instance
*/","* Returns an unmodifiable view of the specified multimap. Query operations on the returned
   * multimap ""read through"" to the specified multimap, and attempts to modify the returned
   * multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,com.google.common.collect.Tables$UnmodifiableRowSortedMap:<init>(com.google.common.collect.RowSortedTable),647,649,"/**
* Constructs an unmodifiable view of a RowSortedTable.
* @param delegate the original table to wrap
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,unmodifiableTable,com.google.common.collect.Tables:unmodifiableTable(com.google.common.collect.Table),534,537,"/**
 * Returns an unmodifiable view of the specified table.
 * @param table the table to wrap
 * @return an unmodifiable Table instance
 */","* Returns an unmodifiable view of the specified table. This method allows modules to provide
   * users with ""read-only"" access to internal tables. Query operations on the returned table ""read
   * through"" to the specified table, and attempts to modify the returned table, whether direct or
   * via its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned table will be serializable if the specified table is serializable.
   *
   * <p>Consider using an {@link ImmutableTable}, which is guaranteed never to change.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,<init>,com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture:<init>(com.google.common.util.concurrent.ListenableFuture),58,60,"/**
 * Constructs a SimpleForwardingListenableFuture with a given delegate.
 * @param delegate the ListenableFuture to delegate to
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,<init>,com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:<init>(java.util.concurrent.Future),124,126,"/**
 * Constructs a ListenableFutureAdapter with a default executor.
 * @param delegate the original Future to adapt
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,listenInPoolThread,"com.google.common.util.concurrent.JdkFutureAdapters:listenInPoolThread(java.util.concurrent.Future,java.util.concurrent.Executor)",84,91,"/**
 * Wraps a given future to execute callbacks in a specified thread pool.
 * @param future the original Future object
 * @param executor Executor to run listeners
 * @return ListenableFuture with callbacks executed in the provided executor
 */","* Submits a blocking task for the given {@link Future} to provide {@link ListenableFuture}
   * functionality.
   *
   * <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the
   * returned future will emulate {@link ListenableFuture#addListener} by submitting a task to the
   * given executor at the first call to {@code addListener}. The task must be started by the
   * executor promptly, or else the returned {@code ListenableFuture} may fail to work. The task's
   * execution consists of blocking until the input future is {@linkplain Future#isDone() done}, so
   * each call to this method may claim and hold a thread for an arbitrary length of time. Use of
   * bounded executors or other executors that may fail to execute a task promptly may result in
   * deadlocks.
   *
   * <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link
   * MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link
   * ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code
   * Future} instances to be upgraded to {@code ListenableFuture} after the fact.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,getIfPresent,com.google.common.cache.ForwardingCache:getIfPresent(java.lang.Object),47,50,"/**
 * Retrieves value associated with key if present.
 * @param key key to search for
 * @return value or null if not found
 */",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,get,"com.google.common.cache.ForwardingCache:get(java.lang.Object,java.util.concurrent.Callable)",55,58,"/**
* Retrieves value by key using a loader if not present.
* @param key unique identifier for the value
* @param valueLoader function to load value if missing
* @return loaded or cached value
* @throws ExecutionException if loading fails
*/",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,getAllPresent,com.google.common.cache.ForwardingCache:getAllPresent(java.lang.Iterable),63,70,"/**
* Retrieves all present entries for the given keys.
* @param keys iterable of key objects
* @return ImmutableMap containing present key-value pairs
*/",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,put,"com.google.common.cache.ForwardingCache:put(java.lang.Object,java.lang.Object)",75,78,"/**
 * Stores a key-value pair in the underlying data structure.
 * @param key unique identifier for the value
 * @param value object to be stored
 */",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,putAll,com.google.common.cache.ForwardingCache:putAll(java.util.Map),83,86,"/**
 * Adds all entries from the specified map to this map.
 * @param m the map whose mappings are to be added
 */",* @since 12.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,invalidate,com.google.common.cache.ForwardingCache:invalidate(java.lang.Object),88,91,"/**
 * Invalidates an entry by key in the cache.
 * @param key the key of the entry to invalidate
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,invalidateAll,com.google.common.cache.ForwardingCache:invalidateAll(java.lang.Iterable),96,100,"/**
* Invalidates all entries for given keys.
* @param keys iterable collection of keys to invalidate
*/",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,invalidateAll,com.google.common.cache.ForwardingCache:invalidateAll(),102,105,"/**
 * Invalidates all cached data.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,size,com.google.common.cache.ForwardingCache:size(),107,110,"/**
 * Returns the size of the underlying collection.
 * @return number of elements in the collection
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,stats,com.google.common.cache.ForwardingCache:stats(),112,115,"/**
 * Retrieves statistics from the cache.
 * @return CacheStats object containing cache performance metrics
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,asMap,com.google.common.cache.ForwardingCache:asMap(),117,120,"/**
 * Returns the underlying map as a ConcurrentMap.
 * @return ConcurrentMap representation of the delegate map
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,cleanUp,com.google.common.cache.ForwardingCache:cleanUp(),122,125,"/**
 * Delegates cleanup to the underlying implementation.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,readResolve,com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm:readResolve(),431,433,"/**
 * Returns the entry set of the multiset.
 * @return Set view of the multiset entries
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,iterator,com.google.common.collect.ImmutableMultiset:iterator(),228,255,"/**
* Returns an unmodifiable iterator over the elements in this collection.
* @return UnmodifiableIterator of elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyIntoArray,"com.google.common.collect.ImmutableMultiset:copyIntoArray(java.lang.Object[],int)",326,334,"/**
* Copies entries into an array.
* @param dst destination array
* @param offset starting index in the array
* @return new offset after copying elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,hashCode,com.google.common.collect.ImmutableMultiset:hashCode(),341,344,"/**
 * Generates hash code based on entry set.
 * @return hash code value
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,toString,com.google.common.collect.ImmutableMultiset:toString(),346,349,"/**
 * Returns string representation of map entries.
 * @return String in the format of entry set
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$AbstractFilteredMap:remove(java.lang.Object),2893,2896,"/**
* Removes and returns the value associated with the specified key.
* @param key key whose mapping is to be removed
* @return the removed value, or null if no mapping for the key exists
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$2:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new reference entry.
* @param segment the segment for this entry
* @param key the key of the entry
* @param hash the hash code of the key
* @param next the next entry in the chain
* @return a new ReferenceEntry instance
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$4:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
 * Creates a new entry for a specified segment and key.
 * @param segment the segment to which the entry belongs
 * @param key the key of the new entry
 * @param hash the hash code of the key
 * @param next reference to the next entry in the chain
 * @return the newly created ReferenceEntry object
 */","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$3:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new entry in a segment.
* @param segment the segment to add the entry to
* @param key the key for the entry
* @param hash the hash code of the key
* @param next the next entry in the chain
* @return the newly created ReferenceEntry object
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$6:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new entry in a segment.
* @param segment target segment for the entry
* @param key entry key
* @param hash hash code of the key
* @param next reference to the next entry
* @return newly created ReferenceEntry object
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$8:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Creates a new entry in the specified segment.
* @param segment the segment to add the entry to
* @param key the key for the new entry
* @param hash the hash code of the key
* @param next reference to the next entry in the chain
* @return the newly created ReferenceEntry object
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$7:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
 * Creates a new entry for a segment.
 * @param segment the segment to add the entry to
 * @param key the key of the entry
 * @param hash the hash code of the key
 * @param next the next entry in the chain
 * @return the newly created ReferenceEntry
 */","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,<init>,"com.google.common.util.concurrent.Futures$CallbackListener:<init>(java.util.concurrent.Future,com.google.common.util.concurrent.FutureCallback)",1106,1109,"/**
 * Initializes a callback listener with a future and a callback.
 * @param future the future task to listen on
 * @param callback the callback to execute upon completion
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,poll,com.google.common.cache.LocalCache$AccessQueue:poll(),3848,3857,"/**
* Removes and returns the first entry in the access queue.
* @return the removed entry or null if the queue is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,poll,com.google.common.cache.LocalCache$WriteQueue:poll(),3708,3717,"/**
* Removes and returns the first entry from the write queue.
* @return the removed entry or null if the queue is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,createSegment,"com.google.common.cache.LocalCache:createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter)",1762,1765,"/**
* Creates a new segment with specified capacity and weight.
* @param initialCapacity initial size of the segment
* @param maxSegmentWeight maximum weight for the segment
* @param statsCounter statistics counter for tracking metrics
* @return newly created Segment object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,waitForLoadingValue,"com.google.common.cache.LocalCache$Segment:waitForLoadingValue(com.google.common.cache.ReferenceEntry,java.lang.Object,com.google.common.cache.LocalCache$ValueReference)",2189,2209,"/**
 * Waits for and returns the loaded value for a given entry.
 * @param e ReferenceEntry to load the value from
 * @param key key associated with the entry
 * @param valueReference ValueReference of the entry
 * @return Loaded value or throws exception if loading fails
 * @throws ExecutionException if an error occurs during loading
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,setValue,"com.google.common.cache.LocalCache$Segment:setValue(com.google.common.cache.ReferenceEntry,java.lang.Object,java.lang.Object,long)",2030,2041,"/**
* Updates the value of a cache entry.
* @param entry the cache entry to update
* @param key the key associated with the entry
* @param value the new value for the entry
* @param now the current timestamp
*/",Sets a new value of an entry. Adds newly created entries at the end of the access queue.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,size,com.google.common.collect.FluentIterable:size(),346,348,"/**
 * Returns the number of elements in the delegate collection.
 * @return size of the collection
 */","* Returns the number of elements in this fluent iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$OnePlusArrayList:get(int),353,359,"/**
* Retrieves element at specified index.
* @param index position of the element to retrieve
* @return element at given index or throws IndexOutOfBoundsException if invalid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$TwoPlusArrayList:get(int),384,397,"/**
 * Retrieves element by index.
 * @param index position of the element to retrieve
 * @return element at specified index or throws IndexOutOfBoundsException if out of range
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edgeCount,com.google.common.graph.AbstractBaseGraph:edgeCount(),52,60,"/**
* Calculates total edge count by summing node degrees.
* @return Total number of edges in the graph
*/","* Returns the number of edges in this graph; used to calculate the size of {@link Graph#edges()}.
   * This implementation requires O(|N|) time. Classes extending this one may manually keep track of
   * the number of edges as the graph is updated, and override this method for better performance.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractBaseGraph:inDegree(java.lang.Object),147,150,"/**
* Returns the in-degree of a node.
* @param node the node to check
* @return number of incoming edges, or total degree for undirected graphs
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractBaseGraph:outDegree(java.lang.Object),152,155,"/**
* Returns the out-degree of a node in a directed graph.
* For undirected graphs, returns the total degree.
* @param node the node to evaluate
* @return number of outgoing edges for directed, or total edges for undirected
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractGraph:degree(java.lang.Object),136,145,"/**
 * Calculates the degree of a node.
 * @param node the node to calculate the degree for
 * @return the degree of the node
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractValueGraph:degree(java.lang.Object),136,145,"/**
 * Calculates the degree of a node.
 * @param node the node to calculate the degree for
 * @return the degree of the node
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,toByteArray,com.google.common.io.ByteStreams:toByteArray(java.io.InputStream),240,243,"/**
 * Converts an InputStream to a byte array.
 * @param in input stream to read from
 * @return byte array containing the data from the input stream
 * @throws IOException if an I/O error occurs
 */","* Reads all bytes from an input stream into a byte array. Does not close the stream.
   *
   * <p><b>Java 9+ users:</b> use {@code in#readAllBytes()} instead.
   *
   * @param in the input stream to read from
   * @return a byte array containing all the bytes from the stream
   * @throws IOException if an I/O error occurs",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,toByteArray,"com.google.common.io.ByteStreams:toByteArray(java.io.InputStream,long)",250,281,"/**
 * Reads input stream into a byte array with expected size.
 * @param in input stream to read from
 * @param expectedSize expected number of bytes to read
 * @return byte array containing data read from the stream
 * @throws IOException if an I/O error occurs
 */","* Reads all bytes from an input stream into a byte array. The given expected size is used to
   * create an initial byte array, but if the actual number of bytes read from the stream differs,
   * the correct result will be returned anyway.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,<init>,"com.google.common.collect.AbstractBiMap:<init>(java.util.Map,java.util.Map)",64,66,"/**
 * Initializes an AbstractBiMap with specified forward and backward maps.
 * @param forward map from keys to values
 * @param backward map from values to keys
 */",Package-private constructor for creating a map-backed bimap.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,<init>,com.google.common.collect.TreeMultiset:<init>(java.util.Comparator),128,134,"/**
* Constructs a TreeMultiset with a custom comparator.
* @param comparator the comparator that defines the order of elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,readObject,com.google.common.collect.TreeMultiset:readObject(java.io.ObjectInputStream),1076,1092,"/**
* Reads object state from input stream.
* @param stream source of serialized data
* @throws IOException if I/O error occurs
* @throws ClassNotFoundException if class not found during deserialization
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,headMultiset,"com.google.common.collect.TreeMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",547,553,"/**
* Returns a multiset view with elements less than or equal to the specified upper bound.
* @param upperBound the upper bound for element inclusion
* @param boundType specifies if the upper bound is inclusive or exclusive
* @return SortedMultiset containing elements up to the specified bound
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,tailMultiset,"com.google.common.collect.TreeMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",555,561,"/**
* Returns a multiset of elements greater than or equal to the specified lower bound.
* @param lowerBound the lower bound element
* @param boundType specifies if the lower bound is inclusive or exclusive
* @return SortedMultiset containing elements meeting the criteria
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,put,"com.google.common.collect.AbstractBiMap:put(java.lang.Object,java.lang.Object)",124,128,"/**
* Puts a key-value pair in the map.
* @param key the key to insert or update
* @param value the value to associate with the key
* @return the previous value associated with the key, or null if none
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,forcePut,"com.google.common.collect.AbstractBiMap:forcePut(java.lang.Object,java.lang.Object)",130,134,"/**
 * Forces insertion of a key-value pair into the map.
 * @param key the key to insert
 * @param value the value to associate with the key
 * @return the previous value associated with the key, or null if none
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,remove,com.google.common.collect.EnumBiMap:remove(java.lang.Object),166,170,"/**
* Removes entry by key from both maps.
* @param key key of the entry to remove
* @return value associated with the key or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,remove,com.google.common.collect.EnumHashBiMap:remove(java.lang.Object),166,170,"/**
 * Removes an entry by key from both maps.
 * @param key the key to remove
 * @return the value associated with the removed key, or null if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$PermutationCollection:iterator(),610,613,"/**
 * Returns an iterator over permutations of the input list.
 * @return Iterator of List<E> representing permutations
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollLastEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollLastEntry(),1612,1615,"/**
* Removes and returns the last entry in descending order.
* @return Entry with key K and value as Collection<V> or null if map is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingKeySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:descendingKeySet(),1649,1652,"/**
 * Returns a navigable set of keys in descending order.
 * @return NavigableSet containing keys in reverse order
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:subMap(java.lang.Object,java.lang.Object)",1654,1658,"/**
* Returns a view of the portion of this map whose keys range from fromKey to toKey.
* @param fromKey low endpoint (inclusive)
* @param toKey high endpoint (exclusive)
* @return NavigableMap containing the specified range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:headMap(java.lang.Object),1669,1672,"/**
* Returns entries with keys less than specified key.
* @param toKey upper bound of the keys (exclusive)
* @return submap with keys less than toKey
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:tailMap(java.lang.Object),1679,1682,"/**
* Returns a navigable map containing entries greater than or equal to fromKey.
* @param fromKey the lower bound key (inclusive)
* @return NavigableMap with entries >= fromKey
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,keySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:keySet(),1634,1637,"/**
* Returns a navigable set view of the keys.
* @return NavigableSet containing all keys in the map
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,removeAll,com.google.common.collect.AbstractListMultimap:removeAll(java.lang.Object),92,96,"/**
 * Removes all values associated with the given key.
 * @param key the key whose values are to be removed
 * @return a list of removed values, or an empty list if none were present
 */","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,replaceValues,"com.google.common.collect.AbstractMapBasedMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",225,247,"/**
 * Replaces values for a given key.
 * @param key the key to replace values for
 * @param values new values to associate with the key
 * @return unmodifiable collection of old values
 */","* {@inheritDoc}
   *
   * <p>The returned collection is immutable.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,removeAll,com.google.common.collect.AbstractSetMultimap:removeAll(java.lang.Object),100,104,"/**
* Removes all values associated with the specified key.
* @param key key whose mappings are to be removed
* @return a set of values that were removed, or an empty set if no mappings were present for this key
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingIterator,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:descendingIterator(),1105,1108,"/**
 * Returns an iterator over the keys in descending order.
 * @return Iterator of keys in reverse order
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:headSet(java.lang.Object),1110,1113,"/**
* Returns elements less than the specified element.
* @param toElement upper bound (exclusive)
* @return subset of elements less than toElement
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:subSet(java.lang.Object,java.lang.Object)",1120,1124,"/**
* Returns a subset of entries between two keys.
* @param fromElement the start key (inclusive)
* @param toElement the end key (exclusive)
* @return NavigableSet containing the specified range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:tailSet(java.lang.Object),1136,1139,"/**
* Returns a view of the portion of this set whose elements are greater than or equal to fromElement.
* @param fromElement lower bound (inclusive)
* @return NavigableSet containing elements >= fromElement
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,hasNext,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:hasNext(),471,475,"/**
 * Checks if there are more elements to iterate over.
 * Validates iterator and delegates check to underlying iterator.
 * @return true if more elements exist, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,next,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:next(),477,482,"/**
 * Returns the next element in the iteration.
 * Validates iterator before proceeding.
 * @return next element of type V
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,getDelegateIterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:getDelegateIterator(),491,494,"/**
 * Returns the delegate iterator.
 * Validates the iterator before returning.
 * @return Iterator object
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,addAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:addAll(java.util.Collection),517,532,"/**
* Adds all elements from the specified collection.
* @param collection the collection of elements to add
* @return true if this collection was modified, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,clear,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:clear(),546,555,"/**
* Clears all elements from the collection.
* Updates size and checks for empty state.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:removeAll(java.util.Collection),568,581,"/**
* Removes all elements from the collection.
* @param c collection of elements to be removed
* @return true if any element was removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,retainAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:retainAll(java.util.Collection),583,594,"/**
* Retains only elements contained in the specified collection.
* @param c collection of elements to retain
* @return true if this set was modified as a result
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollLast,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:pollLast(),727,730,"/**
 * Removes and returns the last element of the deque.
 * @return the last element or null if the deque is empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,get,com.google.common.collect.AbstractSortedSetMultimap:get(java.lang.Object),90,93,"/**
* Retrieves sorted set of values by key.
* @param key the key to look up
* @return SortedSet of values or empty set if key not found
*/","* Returns a collection view of all values associated with a key. If no mappings in the multimap
   * have the provided key, an empty collection is returned.
   *
   * <p>Changes to the returned collection will update the underlying multimap, and vice versa.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,spliterator,com.google.common.collect.AbstractMultimap$Values:spliterator(),197,200,"/**
 * Returns a spliterator for values.
 * @return Spliterator over values
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,setCount,"com.google.common.collect.HashMultiset:setCount(java.lang.Object,int)",314,335,"/**
* Sets the count for a given element.
* @param element the element to set the count for
* @param count the new count value
* @return the old count value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,setCount,"com.google.common.collect.LinkedHashMultiset:setCount(java.lang.Object,int)",314,335,"/**
* Sets the count for a given element.
* @param element the element to set the count for
* @param count the new count value
* @return the previous count of the element
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardToString,com.google.common.collect.ForwardingCollection:standardToString(),232,234,"/**
 * Converts object to string representation.
 * @return string representation of the object
 */","* A sensible definition of {@link #toString} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #toString} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardToString,com.google.common.collect.ForwardingMap:standardToString(),297,299,"/**
 * Converts object to string using standard implementation.
 * @return string representation of the object
 */","* A sensible definition of {@link #toString} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #toString} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,toString,com.google.common.collect.ImmutableMap:toString(),1221,1224,"/**
 * Returns string representation of the object.
 * Uses Google Guava's Maps.toStringImpl method.
 * @return formatted string of object details
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,snapshot,com.google.common.collect.ConcurrentHashMultiset$EntrySet:snapshot(),586,591,"/**
 * Creates a snapshot of the multiset entries.
 * @return A list containing all entries in the multiset
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,<init>,com.google.common.collect.HashMultiset:<init>(int),72,74,"/**
* Constructs a HashMultiset with an initial capacity for distinct elements.
* @param distinctElements expected number of distinct elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newHashMapWithExpectedSize,com.google.common.collect.Platform:newHashMapWithExpectedSize(int),37,40,"/**
* Creates a new HashMap with an initial capacity.
* @param expectedSize the estimated number of entries
* @return a HashMap instance
*/",Returns the platform preferred implementation of a map based on a hash table.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasCycle,com.google.common.graph.Graphs:hasCycle(com.google.common.graph.Graph),62,79,"/**
* Checks if a graph has cycles.
* @param graph the graph to check
* @return true if there is at least one cycle, false otherwise
*/","* Returns true if {@code graph} has at least one cycle. A cycle is defined as a non-empty subset
   * of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting
   * and ending with the same node.
   *
   * <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,get,com.google.common.collect.HashBasedTable$Factory:get(),60,63,"/**
 * Returns a new LinkedHashMap with an expected size.
 * @return LinkedHashMap instance initialized with expected size
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,create,"com.google.common.collect.HashBasedTable:create(int,int)",81,86,"/**
* Creates a HashBasedTable with expected size.
* @param expectedRows estimated number of rows
* @param expectedCellsPerRow estimated cells per row
* @return a new HashBasedTable instance
*/","* Creates an empty {@code HashBasedTable} with the specified map sizes.
   *
   * @param expectedRows the expected number of distinct row keys
   * @param expectedCellsPerRow the expected number of column key / value mappings in each row
   * @throws IllegalArgumentException if {@code expectedRows} or {@code expectedCellsPerRow} is
   *     negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,<init>,com.google.common.collect.LinkedHashMultiset:<init>(int),80,82,"/**
* Initializes a new LinkedHashMultiset with expected size.
* @param distinctElements number of distinct elements to store
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newLinkedHashMapWithExpectedSize,com.google.common.collect.Platform:newLinkedHashMapWithExpectedSize(int),46,49,"/**
* Creates a LinkedHashMap with an initial capacity.
* @param expectedSize the expected number of entries
* @return a new LinkedHashMap instance
*/","* Returns the platform preferred implementation of an insertion ordered map based on a hash
   * table.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,createMap,com.google.common.graph.ElementOrder:createMap(int),189,200,"/**
* Creates a map based on specified type and expected size.
* @param <K> key type extending T
* @param <V> value type
* @param expectedSize initial capacity of the map
* @return Map instance with given characteristics
*/",Returns an empty mutable map whose keys will respect this {@link ElementOrder}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$SetBuilderImpl),943,953,"/**
* Constructs a new set builder by copying elements from another builder.
* @param toCopy source builder to copy elements from
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,retainAll,com.google.common.collect.Maps$EntrySet:retainAll(java.util.Collection),4250,4269,"/**
* Retains only the elements in this collection that are contained in the specified collection.
* Handles unsupported operations by filtering keys.
* @param c collection containing elements to be retained
* @return true if this collection changed as a result of the call
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newHashSetWithExpectedSize,com.google.common.collect.Platform:newHashSetWithExpectedSize(int),52,54,"/**
* Creates a HashSet with an initial capacity.
* @param expectedSize estimated number of elements
* @return HashSet with specified initial capacity
*/",Returns the platform preferred implementation of a set based on a hash table.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,<init>,com.google.common.graph.EndpointPairIterator$Undirected:<init>(com.google.common.graph.BaseGraph),118,121,"/**
 * Constructs an Undirected instance with the given graph.
 * @param graph the BaseGraph to be used
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newLinkedHashSetWithExpectedSize,com.google.common.collect.Platform:newLinkedHashSetWithExpectedSize(int),65,67,"/**
* Creates a LinkedHashSet with an initial capacity.
* @param expectedSize the number of elements expected to be added
* @return a new LinkedHashSet with the specified capacity
*/","* Returns the platform preferred implementation of an insertion ordered set based on a hash
   * table.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,<init>,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:<init>(com.google.common.collect.ImmutableCollection),530,533,"/**
* Initializes service manager with given services.
* @param services collection of initial services
*/","* It is implicitly assumed that all the services are NEW and that they will all remain NEW
     * until all the Listeners are installed and {@link #markReady()} is called. It is our caller's
     * responsibility to only call {@link #markReady()} if all services were new at the time this
     * method was called and when all the listeners were installed.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollFirstEntry,com.google.common.collect.AbstractSortedMultiset:pollFirstEntry(),78,88,"/**
* Removes and returns the first entry from the multiset.
* @return Immutable Entry or null if the multiset is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollLastEntry,com.google.common.collect.AbstractSortedMultiset:pollLastEntry(),90,100,"/**
* Removes and returns the last entry.
* @return ImmutableEntry of E or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardFirstEntry,com.google.common.collect.ForwardingSortedMultiset:standardFirstEntry(),122,129,"/**
* Returns the first entry from the set.
* @return ImmutableEntry of the first element or null if empty
*/","* A sensible definition of {@link #firstEntry()} in terms of {@code entrySet().iterator()}.
   *
   * <p>If you override {@link #entrySet()}, you may wish to override {@link #firstEntry()} to
   * forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardLastEntry,com.google.common.collect.ForwardingSortedMultiset:standardLastEntry(),143,150,"/**
 * Returns the last entry in the multiset.
 * @return the last Entry or null if the multiset is empty
 */","* A sensible definition of {@link #lastEntry()} in terms of {@code
   * descendingMultiset().entrySet().iterator()}.
   *
   * <p>If you override {@link #descendingMultiset} or {@link #entrySet()}, you may wish to override
   * {@link #firstEntry()} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardPollFirstEntry,com.google.common.collect.ForwardingSortedMultiset:standardPollFirstEntry(),163,172,"/**
* Retrieves and removes the first entry from the set.
* @return ImmutableEntry object or null if set is empty
*/","* A sensible definition of {@link #pollFirstEntry()} in terms of {@code entrySet().iterator()}.
   *
   * <p>If you override {@link #entrySet()}, you may wish to override {@link #pollFirstEntry()} to
   * forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardPollLastEntry,com.google.common.collect.ForwardingSortedMultiset:standardPollLastEntry(),186,195,"/**
 * Polls the last entry from the multiset.
 * @return Immutable Entry or null if the multiset is empty
 */","* A sensible definition of {@link #pollLastEntry()} in terms of {@code
   * descendingMultiset().entrySet().iterator()}.
   *
   * <p>If you override {@link #descendingMultiset()} or {@link #entrySet()}, you may wish to
   * override {@link #pollLastEntry()} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,getEntry,com.google.common.collect.ImmutableMultimap$Keys:getEntry(int),753,757,"/**
 * Retrieves an entry by index from the map.
 * @param index position of the entry in the map
 * @return Multiset.Entry with key and count of values
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,getEntry,com.google.common.collect.RegularImmutableSortedMultiset:getEntry(int),66,69,"/**
 * Retrieves an entry at a specified index.
 * @param index position of the entry in the element set
 * @return Entry containing the element and its count
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,toString,com.google.common.collect.TreeMultiset$AvlNode:toString(),1041,1044,"/**
* Returns string representation of element and its count.
* @return formatted string with element and count
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,setCount,"com.google.common.collect.EnumMultiset:setCount(java.lang.Object,int,int)",91,95,"/**
* Updates count of an element.
* @param element the element to update
* @param oldCount current count of the element
* @param newCount new count to be set for the element
* @return true if update is successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,equals,com.google.common.collect.Sets$PowerSet:equals(java.lang.Object),1759,1766,"/**
* Checks equality based on input set key sets.
* @param obj object to compare
* @return true if equal, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,entrySet,com.google.common.collect.HashMultiset:entrySet(),83,86,"/**
 * Returns a set of entries from the multiset.
 * @return Set of Multiset.Entry objects representing elements and their counts
 */","* {@inheritDoc}
   *
   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the
   * current count of that element in the multiset, as opposed to the count at the time the entry
   * was retrieved.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,entrySet,com.google.common.collect.LinkedHashMultiset:entrySet(),83,86,"/**
 * Returns a set of entries in the multiset.
 * @return Set of Multiset.Entry objects representing elements and their counts
 */","* {@inheritDoc}
   *
   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the
   * current count of that element in the multiset, as opposed to the count at the time the entry
   * was retrieved.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,isEmpty,com.google.common.collect.EnumMultiset:isEmpty(),49,52,"/**
 * Checks if the map is empty.
 * @return true if no entries are present, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,snapshot,com.google.common.collect.ConcurrentHashMultiset:snapshot(),183,192,"/**
 * Creates a snapshot of the multiset elements.
 * @return List containing all elements with their respective counts
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,floor,com.google.common.collect.DescendingImmutableSortedSet:floor(java.lang.Object),91,94,"/**
 * Finds the greatest element less than or equal to the given element.
 * @param element the element to compare with
 * @return the greatest element less than or equal to the given element, or null if no such element exists
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,lower,com.google.common.collect.DescendingImmutableSortedSet:lower(java.lang.Object),86,89,"/**
 * Returns the greatest element less than the specified element.
 * @param element the element to compare with
 * @return the greatest element less than the specified element, or null if no such element exists
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,create,com.google.common.collect.TreeRangeSet:create(com.google.common.collect.RangeSet),55,59,"/**
 * Creates a TreeRangeSet from the given RangeSet.
 * @param rangeSet input RangeSet to be converted
 * @return TreeRangeSet containing all ranges from the input set
 */",Returns a {@code TreeRangeSet} initialized with the ranges in the specified range set.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,create,com.google.common.collect.TreeRangeSet:create(java.lang.Iterable),70,74,"/**
* Creates a TreeRangeSet from an iterable of ranges.
* @param ranges collection of Range objects to add
* @return TreeRangeSet containing all provided ranges
*/","* Returns a {@code TreeRangeSet} representing the union of the specified ranges.
   *
   * <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. An
   * element will be contained in this {@code RangeSet} if and only if it is contained in at least
   * one {@code Range} in {@code ranges}.
   *
   * @since 21.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:<init>(java.util.NavigableMap),461,463,"/**
* Constructs a new instance with specified ranges and default all range.
* @param positiveRangesByLowerBound map of ranges by lower bound
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,asMap,com.google.common.collect.TreeMultimap:asMap(),199,202,"/**
* Returns navigable map view of entries.
* @return NavigableMap with keys and collections of values
*/","* {@inheritDoc}
   *
   * <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link
   * NavigableMap}, instead of the {@link java.util.Map} specified in the {@link Multimap}
   * interface.
   *
   * @since 14.0 (present with return type {@code SortedMap} since 2.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,clear,com.google.common.collect.AbstractTable$CellSet:clear(),158,161,"/**
 * Clears all entries from the table.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,clear,com.google.common.collect.AbstractTable$Values:clear(),222,225,"/**
 * Clears all entries from the table.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,iterator,com.google.common.collect.AbstractTable$Values:iterator(),207,210,"/**
 * Returns an iterator over the values.
 * @return Iterator of values
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,hashCode,com.google.common.collect.ArrayTable:hashCode(),238,241,"/**
 * Returns hash code based on cell set.
 * @return int hash code value
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,hashCode,com.google.common.collect.ImmutableTable:hashCode(),238,241,"/**
 * Returns hash code based on cell set.
 * @return Hash code of the cell set
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,cellSet,com.google.common.collect.HashBasedTable:cellSet(),235,238,"/**
 * Returns the set of all cells in the table.
 * @return Set of Cell objects representing table entries
 */","* {@inheritDoc}
   *
   * <p>The set's iterator traverses the mappings for the first row, the mappings for the second
   * row, and so on.
   *
   * <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the
   * time the cell is returned by a method call to the set or its iterator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,containsValue,com.google.common.collect.ImmutableTable:containsValue(java.lang.Object),388,391,"/**
 * Checks if this map contains the specified value.
 * @param value value whose presence in this map is to be tested
 * @return true if this map maps one or more keys to the specified value, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,values,com.google.common.collect.HashBasedTable:values(),795,798,"/**
 * Returns a collection of all values in the map.
 * @return a collection containing all values
 */","* {@inheritDoc}
   *
   * <p>The collection's iterator traverses the values for the first row, the values for the second
   * row, and so on.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,onKeys,com.google.common.collect.Ordering:onKeys(),463,465,"/**
* Returns an Ordering based on entries' keys.
* @param <T2> key type extending T
* @return Ordering for Entry<T2, ?>
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,ordering,com.google.common.collect.MinMaxPriorityQueue$Builder:ordering(),228,231,"/**
* Creates an Ordering from a Comparator.
* @param <T> type extending B
* @return Ordering object using the comparator
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,nullsFirst,com.google.common.collect.NaturalOrdering:nullsFirst(),45,53,"/**
* Returns an ordering that orders elements with nulls first.
* @return Ordering object configured to handle null values first
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsLastOrdering.java,nullsFirst,com.google.common.collect.NullsLastOrdering:nullsFirst(),57,60,"/**
* Returns an ordering that orders nulls first.
* @param <S> type of elements being compared, must be a subtype of T
* @return Ordering object with nulls first
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,nullsLast,com.google.common.collect.NaturalOrdering:nullsLast(),55,63,"/**
* Returns an ordering that orders non-null values first and nulls last.
* @return Ordering object with nulls placed after non-nulls
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsFirstOrdering.java,nullsLast,com.google.common.collect.NullsFirstOrdering:nullsLast(),63,66,"/**
* Returns an ordering that treats nulls as greater than non-null values.
* @return Ordering object with nulls last
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,<init>,com.google.common.collect.DescendingImmutableSortedSet:<init>(com.google.common.collect.ImmutableSortedSet),32,35,"/**
* Creates a descending sorted set from an existing immutable sorted set.
* @param forward original immutable sorted set
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,comparator,com.google.common.collect.DescendingMultiset:comparator(),41,48,"/**
 * Returns the comparator for this multiset.
 * @return Comparator used for ordering elements, or a reversed comparator if none is set
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,reverse,com.google.common.collect.GeneralRange:reverse(),269,285,"/**
* Returns the reversed range.
* @return a new GeneralRange with bounds reversed
*/",Returns the same range relative to the reversed comparator.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,reverse,com.google.common.collect.Maps$DescendingMap:reverse(java.util.Comparator),4300,4302,"/**
* Reverses the order of a given comparator.
* @param forward original comparator to be reversed
* @return new Comparator with reversed ordering
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,<init>,"com.google.common.collect.MinMaxPriorityQueue:<init>(com.google.common.collect.MinMaxPriorityQueue$Builder,int)",241,251,"/**
* Initializes a MinMaxPriorityQueue with specified builder and size.
* @param builder configuration for the queue
* @param queueSize maximum capacity of the queue
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsFirstOrdering.java,reverse,com.google.common.collect.NullsFirstOrdering:reverse(),50,55,"/**
* Reverses the ordering and handles nulls last.
* @return reversed Ordering with nulls at the end
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsLastOrdering.java,reverse,com.google.common.collect.NullsLastOrdering:reverse(),50,55,"/**
* Returns a reversed ordering that prioritizes non-null values first.
* @return Reversed Ordering with nulls first
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,reverse,com.google.common.collect.Sets$DescendingSet:reverse(java.util.Comparator),2246,2248,"/**
* Reverses the order of a comparator.
* @param forward original comparator to be reversed
* @return new Comparator with reversed ordering
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,collectTypes,com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Iterable),1380,1387,"/**
* Collects and sorts types by their order number.
* @param types iterable of key types
* @return sorted ImmutableList of keys based on descending order numbers
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,cellOf,"com.google.common.collect.ImmutableTable:cellOf(java.lang.Object,java.lang.Object,java.lang.Object)",157,162,"/**
* Creates an immutable cell with specified row, column, and value.
* @param <R> type of the row key
* @param <C> type of the column key
* @param <V> type of the value
* @param rowKey unique identifier for the row
* @param columnKey unique identifier for the column
* @param value data stored in the cell
* @return immutable Cell object
*/","* Verifies that {@code rowKey}, {@code columnKey} and {@code value} are non-null, and returns a
   * new entry with those values.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,next,com.google.common.collect.StandardTable$CellIterator:next(),255,277,"/**
* Returns the next cell in the row-major order.
* @return Cell object representing the current position
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,elementSet,com.google.common.collect.ImmutableMultiset:elementSet(),354,355,"/**
 * Returns an immutable set of elements.
 * @return ImmutableSet containing all elements
 */",* @since 21.0 (present with return type {@code Set} since 2.0),,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,put,"com.google.common.collect.ImmutableMap$Builder:put(java.lang.Object,java.lang.Object)",451,458,"/**
* Adds a key-value pair to the builder.
* @param key unique key for the entry
* @param value associated value for the key
* @return this Builder instance for method chaining
*/","* Associates {@code key} with {@code value} in the built map. If the same key is put more than
     * once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last
     * value put for that key.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",142,144,"/**
* Creates an immutable map with two key-value pairs.
* @param k1 first key
* @param v1 value for the first key
* @param k2 second key
* @param v2 value for the second key
* @return ImmutableMap containing the specified entries
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",151,153,"/**
 * Creates an immutable map with three entries.
 * @param k1 key for the first entry
 * @param v1 value for the first entry
 * @param k2 key for the second entry
 * @param v2 value for the second entry
 * @param k3 key for the third entry
 * @param v3 value for the third entry
 * @return ImmutableMap containing three key-value pairs
 */","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",160,163,"/**
* Creates an immutable map from four key-value pairs.
* @param k1 first key
* @param v1 value for the first key
* @param k2 second key
* @param v2 value for the second key
* @param k3 third key
* @param v3 value for the third key
* @param k4 fourth key
* @param v4 value for the fourth key
* @return ImmutableMap containing the specified entries
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",170,174,"/**
* Creates an ImmutableMap with five key-value pairs.
* @param k1,k2,k3,k4,k5 keys for the map entries
* @param v1,v2,v3,v4,v5 values corresponding to each key
* @return ImmutableMap containing specified entries
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",182,191,"/**
* Creates an immutable map with six key-value pairs.
* @param k1 first key
* @param v1 value for the first key
* @param k2 second key
* @param v2 value for the second key
* @param k3 third key
* @param v3 value for the third key
* @param k4 fourth key
* @param v4 value for the fourth key
* @param k5 fifth key
* @param v5 value for the fifth key
* @param k6 sixth key
* @param v6 value for the sixth key
* @return ImmutableMap containing the specified entries
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",199,209,"/**
* Creates an immutable map with seven entries.
* @param k1 key for the first entry
* @param v1 value for the first entry
* @param k2 key for the second entry
* @param v2 value for the second entry
* @param k3 key for the third entry
* @param v3 value for the third entry
* @param k4 key for the fourth entry
* @param v4 value for the fourth entry
* @param k5 key for the fifth entry
* @param v5 value for the fifth entry
* @param k6 key for the sixth entry
* @param v6 value for the sixth entry
* @param k7 key for the seventh entry
* @param v7 value for the seventh entry
* @return ImmutableMap containing the specified entries
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",217,243,"/**
* Creates an immutable map from up to 8 key-value pairs.
* @param k1,k2,...,k8 keys of the map
* @param v1,v2,...,v8 values corresponding to each key
* @return ImmutableMap containing specified entries
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",251,280,"/**
* Creates an immutable map with nine key-value pairs.
* @param k1,k2,...,k9 keys for the map entries
* @param v1,v2,...,v9 values corresponding to each key
* @return ImmutableMap containing the specified entries
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",288,320,"/**
* Creates an ImmutableMap from up to 10 key-value pairs.
* @param k1...k10 keys for the map entries
* @param v1...v10 values for the map entries
* @return ImmutableMap containing specified key-value pairs
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntry.java,<init>,"com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry)",123,130,"/**
* Constructs a non-terminal immutable bi-map entry.
* @param key the key of the entry
* @param value the value of the entry
* @param nextInKeyBucket reference to the next entry in the key bucket
* @param nextInValueBucket reference to the next entry in the value bucket
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,fromEntryArrayCheckingBucketOverflow,"com.google.common.collect.RegularImmutableMap:fromEntryArrayCheckingBucketOverflow(int,java.util.Map$Entry[],boolean)",104,172,"/**
* Creates an ImmutableMap from entry array, checking for bucket overflow.
* @param n number of entries
* @param entryArray array of map entries
* @param throwIfDuplicateKeys flag to throw exception on duplicate keys
* @return ImmutableMap instance
* @throws BucketOverflowException if table size exceeds limit
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,makeImmutable,com.google.common.collect.RegularImmutableMap:makeImmutable(java.util.Map$Entry),213,215,"/**
* Creates an immutable map entry from a given entry.
* @param entry the original map entry to convert
* @return an ImmutableMapEntry object
*/",Makes an entry usable internally by a new ImmutableMap.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,put,com.google.common.collect.ImmutableListMultimap$Builder:put(java.util.Map$Entry),265,270,"/**
* Adds an entry to the map.
* @param entry key-value pair to add
* @return this builder instance for method chaining
*/","* {@inheritDoc}
     *
     * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,putAll,com.google.common.collect.ImmutableMultimap$Builder:putAll(java.lang.Iterable),265,271,"/**
* Adds all entries to the builder.
* @param entries iterable of key-value pairs
* @return this Builder instance
*/","* Adds entries to the built multimap.
     *
     * @since 19.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,put,com.google.common.collect.ImmutableSetMultimap$Builder:put(java.util.Map$Entry),314,319,"/**
* Adds an entry to the map.
* @param entry key-value pair to add
* @return this builder instance for chaining
*/","* Adds an entry to the built multimap if it is not already present.
     *
     * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble:trySplit(),376,399,"/**
 * Attempts to split the spliterator into two parts.
 * @return a new spliterator or null if cannot be split
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong:trySplit(),376,399,"/**
 * Attempts to split the spliterator.
 * @return a new spliterator or null if cannot be split
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multiset.java,spliterator,com.google.common.collect.Multiset:spliterator(),481,484,"/**
 * Returns a spliterator over the elements of this multiset.
 * @return Spliterator for iterating over elements
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$FilteredNavigableSet:<init>(java.util.NavigableSet,com.google.common.base.Predicate)",1348,1350,"/**
* Creates a filtered navigable set based on a predicate.
* @param unfiltered original navigable set to filter
* @param predicate condition to filter elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets$FilteredSortedSet:subSet(java.lang.Object,java.lang.Object)",1309,1313,"/**
* Returns a subset of elements between fromElement (inclusive) and toElement (exclusive).
* @param fromElement the lower bound (inclusive)
* @param toElement the upper bound (exclusive)
* @return SortedSet containing filtered elements within the specified range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,headSet,com.google.common.collect.Sets$FilteredSortedSet:headSet(java.lang.Object),1315,1318,"/**
* Returns a view of the portion of this set whose elements are strictly less than toElement.
* @param toElement upper bound (exclusive)
* @return SortedSet containing elements less than toElement
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,tailSet,com.google.common.collect.Sets$FilteredSortedSet:tailSet(java.lang.Object),1320,1323,"/**
* Returns a view of the portion of this set whose elements are greater than or equal to fromElement.
* @param fromElement the lower bound (inclusive)
* @return SortedSet containing elements greater than or equal to fromElement
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,filter,"com.google.common.collect.Sets:filter(java.util.SortedSet,com.google.common.base.Predicate)",1229,1240,"/**
 * Filters a sorted set based on a predicate.
 * @param unfiltered the original sorted set to filter
 * @param predicate the condition to apply for filtering
 * @return a new sorted set containing elements that match the predicate
 */","* Returns the elements of a {@code SortedSet}, {@code unfiltered}, that satisfy a predicate. The
   * returned set is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting set's iterator does not support {@code remove()}, but all other set methods
   * are supported. When given an element that doesn't satisfy the predicate, the set's {@code
   * add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods
   * such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements
   * that satisfy the filter will be removed from the underlying set.
   *
   * <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in
   * the underlying set and determine which elements satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and
   * use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,getValue,com.google.common.collect.CompactHashMap$MapEntry:getValue(),911,932,"/**
* Retrieves the value associated with this entry.
* @return the value or null if the entry is no longer present in the map
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,firstEntryIndex,com.google.common.collect.CompactHashMap:firstEntryIndex(),608,610,"/**
 * Returns the index of the first entry.
 * @return 0 if the list is not empty, otherwise -1
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,clear,com.google.common.collect.CompactLinkedHashMap:clear(),288,299,"/**
* Clears the list by resetting pointers and filling links array with zeros.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,trimToSize,com.google.common.collect.CompactHashMap:trimToSize(),1070,1090,"/**
* Trims the internal arrays to fit the current size.
* Adjusts hash tables and entries if necessary.
*/","* Ensures that this {@code CompactHashMap} has the smallest representation in memory, given its
   * current size.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,trimToSize,com.google.common.collect.CompactHashSet:trimToSize(),655,675,"/**
 * Reduces the capacity of this set to fit its elements.
 */","* Ensures that this {@code CompactHashSet} has the smallest representation in memory, given its
   * current size.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,firstEntryIndex,com.google.common.collect.CompactHashSet:firstEntryIndex(),522,524,"/**
 * Returns the index of the first entry.
 * @return 0 if not empty, otherwise -1
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,clear,com.google.common.collect.CompactLinkedHashSet:clear(),247,260,"/**
 * Clears all entries and resets array pointers.
 * @return void
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,allocArrays,com.google.common.collect.CompactLinkedHashMap:allocArrays(),122,127,"/**
* Allocates arrays and initializes links.
* @return Expected size of allocated arrays
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,allocArrays,com.google.common.collect.CompactLinkedHashSet:allocArrays(),139,145,"/**
* Allocates arrays for predecessor and successor.
* @return size of allocated arrays
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setSucceeds,"com.google.common.collect.CompactLinkedHashMap:setSucceeds(int,int)",167,179,"/**
* Updates successor and predecessor relationships.
* @param pred predecessor entry index
* @param succ successor entry index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,insertEntry,"com.google.common.collect.CompactLinkedHashSet:insertEntry(int,java.lang.Object,int,int)",193,198,"/**
* Inserts an entry into the data structure.
* @param entryIndex index where the entry is inserted
* @param object the object to be inserted
* @param hash hash value of the object
* @param mask used for masking operations
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,readResolve,com.google.common.collect.EmptyContiguousSet$SerializedForm:readResolve(),157,159,"/**
 * Returns a new instance of EmptyContiguousSet with the same domain.
 * @return new EmptyContiguousSet instance
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,readResolve,com.google.common.collect.RegularContiguousSet$SerializedForm:readResolve(),253,255,"/**
 * Resolves deserialized instance to a canonical form.
 * @return Canonical RegularContiguousSet instance
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,createDescendingSet,com.google.common.collect.EmptyContiguousSet:createDescendingSet(),177,181,"/**
* Creates an empty immutable sorted set in descending order.
* @return ImmutableSortedSet with natural ordering reversed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,emptySet,com.google.common.collect.ImmutableSetMultimap:emptySet(java.util.Comparator),648,652,"/**
 * Returns an empty immutable set.
 * @param valueComparator comparator for the values, may be null
 * @return ImmutableSet or ImmutableSortedSet based on comparator
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,emptyMap,com.google.common.collect.ImmutableSortedMap:emptyMap(java.util.Comparator),119,126,"/**
* Returns an empty immutable sorted map with a specified comparator.
* @param comparator the comparator to use for ordering keys
* @return an empty ImmutableSortedMap instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,<init>,com.google.common.collect.RegularImmutableSortedMultiset:<init>(java.util.Comparator),47,52,"/**
* Initializes a new empty sorted multiset with the given comparator.
* @param comparator used to order elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,canonical,com.google.common.collect.Cut$BelowAll:canonical(com.google.common.collect.DiscreteDomain),187,194,"/**
* Returns a cut below the minimum value of the domain.
* @param domain discrete domain with comparable elements
* @return cut below the domain's minimum value or self if no min value exists
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,getEntry,com.google.common.collect.TreeRangeMap:getEntry(java.lang.Comparable),126,135,"/**
 * Retrieves the entry containing the specified key.
 * @param key the key to search for
 * @return Entry with Range<K> and V, or null if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,isEmpty,com.google.common.collect.Range:isEmpty(),398,400,"/**
 * Checks if the range is empty.
 * @return true if lower and upper bounds are equal, false otherwise
 */","* Returns {@code true} if this range is of the form {@code [v..v)} or {@code (v..v]}. (This does
   * not encompass ranges of the form {@code (v..v)}, because such ranges are <i>invalid</i> and
   * can't be constructed at all.)
   *
   * <p>Note that certain discrete ranges such as the integer range {@code (3..4)} are <b>not</b>
   * considered empty, even though they contain no actual values. In these cases, it may be helpful
   * to preprocess ranges with {@link #canonical(DiscreteDomain)}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,equals,com.google.common.collect.Range:equals(java.lang.Object),662,669,"/**
 * Checks equality with another Range.
 * @param object the object to compare
 * @return true if bounds match, false otherwise
 */","* Returns {@code true} if {@code object} is a range having the same endpoints and bound types as
   * this range. Note that discrete ranges such as {@code (1..4)} and {@code [2..3]} are <b>not</b>
   * equal to one another, despite the fact that they each contain precisely the same set of values.
   * Similarly, empty ranges are not equal unless they have exactly the same representation, so
   * {@code [3..3)}, {@code (3..3]}, {@code (4..4]} are all unequal.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,get,com.google.common.collect.TreeRangeSet$RangesByUpperBound:get(java.lang.Object),342,360,"/**
 * Retrieves a range based on the given key.
 * @param key the key to search for, must be an instance of Cut
 * @return Range object if found, otherwise null
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,create,"com.google.common.collect.Range:create(com.google.common.collect.Cut,com.google.common.collect.Cut)",132,134,"/**
* Creates a range with specified bounds.
* @param lowerBound start of the range (inclusive or exclusive)
* @param upperBound end of the range (inclusive or exclusive)
* @return Range object representing the defined bounds
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,encloses,com.google.common.collect.TreeRangeSet:encloses(com.google.common.collect.Range),148,153,"/**
* Checks if this range encloses another range.
* @param range the range to check
* @return true if this range encloses the given range, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,rangeEnclosing,com.google.common.collect.TreeRangeSet:rangeEnclosing(com.google.common.collect.Range),155,161,"/**
 * Finds the range enclosing the given range.
 * @param range the range to enclose
 * @return the enclosing Range object or null if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardAdd,com.google.common.collect.ForwardingList:standardAdd(java.lang.Object),136,139,"/**
 * Adds an element to the end of the list.
 * @param element the element to add
 * @return always true
 */","* A sensible default implementation of {@link #add(Object)}, in terms of {@link #add(int,
   * Object)}. If you override {@link #add(int, Object)}, you may wish to override {@link
   * #add(Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardIterator,com.google.common.collect.ForwardingList:standardIterator(),181,183,"/**
 * Returns a standard iterator over elements.
 * @return Iterator over the collection's elements
 */","* A sensible default implementation of {@link #iterator}, in terms of {@link #listIterator()}. If
   * you override {@link #listIterator()}, you may wish to override {@link #iterator} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardListIterator,com.google.common.collect.ForwardingList:standardListIterator(),192,194,"/**
 * Returns a list iterator over the elements in this list.
 * @return ListIterator starting from the beginning of the list
 */","* A sensible default implementation of {@link #listIterator()}, in terms of {@link
   * #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override
   * {@link #listIterator()} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,asMap,com.google.common.collect.ForwardingMultimap:asMap(),49,52,"/**
 * Returns the map view of the multimap.
 * @return A map where each key is associated with its collection of values
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,clear,com.google.common.collect.ForwardingMultimap:clear(),54,57,"/**
 * Clears all elements from the collection.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,containsEntry,"com.google.common.collect.ForwardingMultimap:containsEntry(java.lang.Object,java.lang.Object)",59,62,"/**
 * Checks if map contains entry with specified key and value.
 * @param key   key to check
 * @param value value to check
 * @return true if entry exists, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,containsKey,com.google.common.collect.ForwardingMultimap:containsKey(java.lang.Object),64,67,"/**
 * Checks if the map contains a specified key.
 * @param key the key to check
 * @return true if the key is present, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,containsValue,com.google.common.collect.ForwardingMultimap:containsValue(java.lang.Object),69,72,"/**
 * Checks if this map contains the specified value.
 * @param value value to check
 * @return true if value is present, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,entries,com.google.common.collect.ForwardingMultimap:entries(),74,77,"/**
 * Returns all entries in the collection.
 * @return Collection of Entry objects
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,get,com.google.common.collect.ForwardingMultimap:get(java.lang.Object),79,82,"/**
 * Retrieves values associated with a given key.
 * @param key the key to search for
 * @return collection of values or empty collection if key not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,isEmpty,com.google.common.collect.ForwardingMultimap:isEmpty(),84,87,"/**
 * Checks if the collection is empty.
 * @return true if no elements are present, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,keys,com.google.common.collect.ForwardingMultimap:keys(),89,92,"/**
 * Returns the set of all keys in the multimap.
 * @return Multiset containing all keys
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,keySet,com.google.common.collect.ForwardingMultimap:keySet(),94,97,"/**
 * Returns the set of keys from the underlying map.
 * @return Set of keys
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,put,"com.google.common.collect.ForwardingMultimap:put(java.lang.Object,java.lang.Object)",99,103,"/**
* Adds or updates an entry in the map.
* @param key the key to insert or update
* @param value the value associated with the key
* @return true if the operation was successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,putAll,"com.google.common.collect.ForwardingMultimap:putAll(java.lang.Object,java.lang.Iterable)",105,109,"/**
 * Adds all values to the specified key.
 * @param key key to which values are added
 * @param values iterable of values to add
 * @return true if this map was modified as a result
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,putAll,com.google.common.collect.ForwardingMultimap:putAll(com.google.common.collect.Multimap),111,115,"/**
* Adds all entries from another Multimap.
* @param multimap the source multimap to add entries from
* @return true if any modifications were made, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,remove,"com.google.common.collect.ForwardingMultimap:remove(java.lang.Object,java.lang.Object)",117,121,"/**
* Removes entry by key and value.
* @param key key of the entry to remove
* @param value value of the entry to remove
* @return true if removed successfully, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,removeAll,com.google.common.collect.ForwardingMultimap:removeAll(java.lang.Object),123,127,"/**
* Removes all values associated with the specified key.
* @param key the key whose associated values are to be removed
* @return a collection of removed values or an empty collection if none were present
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,replaceValues,"com.google.common.collect.ForwardingMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",129,133,"/**
* Replaces all values associated with a key.
* @param key the key to update
* @param values new values to associate with the key
* @return previous collection of values or empty if not present
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,size,com.google.common.collect.ForwardingMultimap:size(),135,138,"/**
 * Returns the size of the delegate collection.
 * @return number of elements in the delegate
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,values,com.google.common.collect.ForwardingMultimap:values(),140,143,"/**
 * Returns a collection of all values in the map.
 * Delegates to the underlying map implementation.
 * @return Collection containing all values
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,equals,com.google.common.collect.ForwardingMultimap:equals(java.lang.Object),145,150,"/**
 * Checks equality with another object, either directly or through delegation.
 * @param object the object to compare with
 * @return true if equal, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,hashCode,com.google.common.collect.ForwardingMultimap:hashCode(),152,155,"/**
 * Returns the hash code of the delegate object.
 * @return hash code value of the delegate
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,count,com.google.common.collect.TreeMultiset:count(java.lang.Object),242,255,"/**
 * Counts occurrences of an element within a specified range in an AVL tree.
 * @param element the element to count
 * @return number of occurrences or 0 if not found or invalid input
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,firstNode,com.google.common.collect.TreeMultiset:firstNode(),394,415,"/**
 * Finds the first node within the specified range.
 * @return AvlNode if found, otherwise null
 */",Returns the first node in the tree that is in range.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,lastNode,com.google.common.collect.TreeMultiset:lastNode(),417,438,"/**
* Finds the last node within a specified range in an AVL tree.
* @return AvlNode or null if no such node exists
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,create,com.google.common.collect.HashBasedTable:create(com.google.common.collect.Table),95,100,"/**
* Creates a new HashBasedTable from an existing Table.
* @param table the source Table to copy entries from
* @return a new HashBasedTable containing all entries from the source Table
*/","* Creates a {@code HashBasedTable} with the same mappings as the specified table.
   *
   * @param table the table to copy
   * @throws NullPointerException if any of the row keys, column keys, or values in {@code table} is
   *     null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,create,com.google.common.collect.TreeBasedTable:create(),100,103,"/**
* Creates a TreeBasedTable with natural ordering for rows and columns.
* @return TreeBasedTable instance with row and column order set to natural
*/","* Creates an empty {@code TreeBasedTable} that uses the natural orderings of both row and column
   * keys.
   *
   * <p>The method signature specifies {@code R extends Comparable} with a raw {@link Comparable},
   * instead of {@code R extends Comparable<? super R>}, and the same for {@code C}. That's
   * necessary to support classes defined without generics.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,create,"com.google.common.collect.TreeBasedTable:create(java.util.Comparator,java.util.Comparator)",111,116,"/**
* Creates a TreeBasedTable with specified row and column comparators.
* @param rowComparator comparator for row keys
* @param columnComparator comparator for column keys
* @return TreeBasedTable instance
*/","* Creates an empty {@code TreeBasedTable} that is ordered by the specified comparators.
   *
   * @param rowComparator the comparator that orders the row keys
   * @param columnComparator the comparator that orders the column keys",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,create,com.google.common.collect.HashBiMap:create(int),76,79,"/**
* Creates a new HashBiMap with the specified expected size.
* @param expectedSize initial capacity for the map
* @return a new HashBiMap instance
*/","* Constructs a new, empty bimap with the specified expected size.
   *
   * @param expectedSize the expected number of entries
   * @throws IllegalArgumentException if the specified expected size is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,containsKey,com.google.common.collect.CompactHashMap:containsKey(java.lang.Object),502,506,"/**
* Checks if map contains a key.
* @param key the key to check
* @return true if key is present, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,get,com.google.common.collect.CompactHashMap:get(java.lang.Object),508,520,"/**
* Retrieves value by key.
* @param key the key to search for
* @return value associated with the key or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,moveLastEntry,"com.google.common.collect.CompactLinkedHashSet:moveLastEntry(int,int)",200,212,"/**
* Moves the last entry to a new index and updates links.
* @param dstIndex destination index for the move
* @param mask bitmask for moving operation
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap$EntrySetView:remove(java.lang.Object),840,871,"/**
 * Removes a specified entry from the map.
 * @param o the entry to be removed
 * @return true if the entry was removed, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,removeHelper,com.google.common.collect.CompactHashMap:removeHelper(java.lang.Object),534,559,"/**
* Removes an entry by key.
* @param key the key to remove
* @return the removed value or NOT_FOUND if not present
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,remove,com.google.common.collect.CompactHashSet:remove(java.lang.Object),448,477,"/**
 * Removes an object from the set.
 * @param object the object to remove
 * @return true if the object was removed, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,put,"com.google.common.collect.HashBiMap:put(java.lang.Object,java.lang.Object)",288,292,"/**
 * Puts a key-value pair in the map.
 * @param key the key to insert
 * @param value the value to associate with the key
 * @return the previous value associated with the key or null if none
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,forcePut,"com.google.common.collect.HashBiMap:forcePut(java.lang.Object,java.lang.Object)",328,332,"/**
* Forces insertion of a key-value pair.
* @param key the key to insert
* @param value the value to associate with the key
* @return the previous value associated with the key, or null if none
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,builder,com.google.common.collect.ImmutableBiMap:builder(),290,292,"/**
 * Creates a new builder instance.
 * @param <K> key type
 * @param <V> value type
 * @return Builder object for constructing instances
 */","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,<init>,com.google.common.collect.ImmutableClassToInstanceMap$Builder:<init>(),97,97,"/**
 * Constructor for the Builder class.
 */",Creates a new builder.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,<init>,com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:<init>(),64,64,"/**
 * Private constructor to prevent instantiation from outside the class.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,makeBuilder,com.google.common.collect.ImmutableSortedMap$SerializedForm:makeBuilder(int),1152,1155,"/**
 * Creates a builder with the specified size.
 * @param size initial capacity of the builder
 * @return Builder instance initialized with the comparator
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,naturalOrder,com.google.common.collect.ImmutableSortedMap:naturalOrder(),567,569,"/**
* Creates a builder with natural ordering.
* @return Builder instance configured for natural ordering
*/","* Returns a builder that creates immutable sorted maps whose keys are ordered by their natural
   * ordering. The sorted maps use {@link Ordering#natural()} as the comparator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,orderedBy,com.google.common.collect.ImmutableSortedMap:orderedBy(java.util.Comparator),579,581,"/**
* Creates a builder with a specified key comparator.
* @param comparator key comparator for ordering
* @return Builder instance configured with the comparator
*/","* Returns a builder that creates immutable sorted maps with an explicit comparator. If the
   * comparator has a more general type than the map's keys, such as creating a {@code
   * SortedMap<Integer, String>} with a {@code Comparator<Number>}, use the {@link Builder}
   * constructor instead.
   *
   * @throws NullPointerException if {@code comparator} is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,reverseOrder,com.google.common.collect.ImmutableSortedMap:reverseOrder(),587,589,"/**
* Returns a builder with elements sorted in reverse natural order.
* @return Builder object configured for reverse ordering
*/","* Returns a builder that creates immutable sorted maps whose keys are ordered by the reverse of
   * their natural ordering.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object)",133,135,"/**
* Creates an immutable map with one entry.
* @param k1 key for the entry
* @param v1 value for the entry
* @return ImmutableMap containing the single key-value pair
*/","* Returns an immutable map containing a single entry. This map behaves and performs comparably to
   * {@link Collections#singletonMap} but will not accept a null key or value. It is preferable
   * mainly for consistency and maintainability of your code.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,inverse,com.google.common.collect.ImmutableBiMap:inverse(),582,583,"/**
* Returns an immutable bimap with keys and values swapped.
* @return ImmutableBiMap with inverted key-value pairs
*/","* {@inheritDoc}
   *
   * <p>The inverse of an {@code ImmutableBiMap} is another {@code ImmutableBiMap}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,combine,com.google.common.collect.ImmutableBiMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder),419,424,"/**
* Combines entries from another ImmutableMap.Builder.
* @param builder the builder to combine with
* @return this builder instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,combine,com.google.common.collect.ImmutableSortedMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder),697,702,"/**
 * Combines another ImmutableMap builder into this one.
 * @param other the builder to combine with
 * @return this builder for method chaining
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,builder,com.google.common.collect.ImmutableList:builder(),759,761,"/**
 * Returns a new instance of Builder.
 * @param <E> generic type parameter
 * @return Builder object for constructing instances
 */","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,orderedBy,com.google.common.collect.ImmutableSortedSet:orderedBy(java.util.Comparator),396,398,"/**
 * Creates a builder with a specified comparator for ordering.
 * @param comparator the comparator to define order
 * @return a Builder instance configured with the comparator
 */","* Returns a builder that creates immutable sorted sets with an explicit comparator. If the
   * comparator has a more general type than the set being generated, such as creating a {@code
   * SortedSet<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor
   * instead.
   *
   * @throws NullPointerException if {@code comparator} is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,reverseOrder,com.google.common.collect.ImmutableSortedSet:reverseOrder(),404,406,"/**
 * Returns a Builder configured for reverse order.
 * @return Builder instance with reverse order comparator
 */","* Returns a builder that creates immutable sorted sets whose elements are ordered by the reverse
   * of their natural ordering.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,naturalOrder,com.google.common.collect.ImmutableSortedSet:naturalOrder(),414,416,"/**
 * Returns a Builder configured for natural ordering.
 * @return Builder instance with natural ordering
 */","* Returns a builder that creates immutable sorted sets whose elements are ordered by their
   * natural ordering. The sorted sets use {@link Ordering#natural()} as the comparator. This method
   * provides more type-safety than {@link #builder}, as it can be called only for classes that
   * implement {@link Comparable}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,reverse,com.google.common.collect.ImmutableList:reverse(),633,635,"/**
* Returns a reversed version of the list.
* @return new ImmutableList with elements in reverse order
*/","* Returns a view of this immutable list in reverse order. For example, {@code ImmutableList.of(1,
   * 2, 3).reverse()} is equivalent to {@code ImmutableList.of(3, 2, 1)}.
   *
   * @return a view of this immutable list in reverse order
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,charactersOf,com.google.common.collect.Lists:charactersOf(java.lang.String),749,751,"/**
 * Converts a string to an immutable list of characters.
 * @param string input string
 * @return ImmutableList of Character objects
 */","* Returns a view of the specified string as an immutable list of {@code Character} values.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,createValues,com.google.common.collect.RegularImmutableMap:createValues(),372,375,"/**
 * Creates an immutable collection of values.
 * @return ImmutableCollection containing all values from this instance
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,of,com.google.common.collect.ImmutableList:of(java.lang.Object),98,100,"/**
 * Creates an immutable list with a single element.
 * @param e1 the sole element of the list
 * @return an ImmutableList containing only e1
 */","* Returns an immutable list containing a single element. This list behaves and performs
   * comparably to {@link Collections#singletonList}, but will not accept a null element. It is
   * preferable mainly for consistency and maintainability of your code.
   *
   * @throws NullPointerException if the element is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,entries,com.google.common.collect.ImmutableSetMultimap:entries(),594,598,"/**
 * Returns an immutable set of map entries.
 * @return ImmutableSet of Entry objects representing the map's entries
 */","* Returns an immutable collection of all key-value pairs in the multimap. Its iterator traverses
   * the values for the first key, the values for the second key, and so on.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,of,com.google.common.collect.ImmutableSet:of(java.lang.Object),91,93,"/**
 * Creates an immutable set containing one element.
 * @param e1 the single element in the set
 * @return an ImmutableSet with the specified element
 */","* Returns an immutable set containing the given element. Preferred over {@link
   * Collections#singleton} for code consistency, {@code null} rejection, and because the return
   * type conveys the immutability guarantee.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,iterator,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:iterator(),62,65,"/**
 * Returns an unmodifiable iterator over map entries.
 * @return Iterator of Entry objects
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,iterator,com.google.common.collect.ImmutableSet$Indexed:iterator(),338,341,"/**
 * Returns an unmodifiable iterator over elements.
 * @return UnmodifiableIterator of elements
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,iterator,com.google.common.collect.ImmutableSortedMap$1EntrySet:iterator(),396,399,"/**
 * Returns an unmodifiable iterator over elements.
 * @return Iterator object that does not support modification
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,iterator,com.google.common.collect.IndexedImmutableSet:iterator(),32,35,"/**
 * Returns an unmodifiable iterator over elements.
 * @return UnmodifiableIterator of elements
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,iterator,com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:iterator(),264,267,"/**
 * Returns an unmodifiable iterator over entries.
 * @return Iterator of Entry objects
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,iterator,com.google.common.collect.RegularImmutableSortedSet:iterator(),69,72,"/**
 * Returns an unmodifiable iterator over the elements.
 * @return UnmodifiableIterator of type E
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,hashCode,com.google.common.collect.Sets$CartesianSet:hashCode(),1626,1646,"/**
* Computes hash code based on axis sets and size.
* @return Adjusted hash code for the object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,charset,com.google.common.net.MediaType:charset(),857,875,"/**
 * Returns the character set from parameters.
 * @return Optional containing Charset if found, otherwise absent
 */","* Returns an optional charset for the value of the charset parameter if it is specified.
   *
   * @throws IllegalStateException if multiple charset values have been set for this media type
   * @throws IllegalCharsetNameException if a charset value is present, but illegal
   * @throws UnsupportedCharsetException if a charset value is present, but no support is available
   *     in this instance of the Java virtual machine",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getAnnotation,com.google.common.reflect.Parameter:getAnnotation(java.lang.Class),77,86,"/**
* Retrieves an annotation by type.
* @param annotationType the annotation class to retrieve
* @return the annotation instance or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,toString,com.google.common.reflect.Types$WildcardTypeImpl:toString(),502,512,"/**
* Generates a string representation of type bounds.
* @return String with formatted type bounds
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,stopAsync,com.google.common.util.concurrent.ServiceManager:stopAsync(),340,346,"/**
* Stops all managed services asynchronously.
* @return current instance of ServiceManager for chaining
*/","* Initiates service {@linkplain Service#stopAsync shutdown} if necessary on all the services
   * being managed.
   *
   * @return this",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,isHealthy,com.google.common.util.concurrent.ServiceManager:isHealthy(),390,397,"/**
 * Checks if all services are running.
 * @return true if all services are running, false otherwise
 */","* Returns true if all services are currently in the {@linkplain State#RUNNING running} state.
   *
   * <p>Users who want more detailed information should use the {@link #servicesByState} method to
   * get detailed information about which services are not running.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,writeReplace,com.google.common.collect.ImmutableBiMap:writeReplace(),635,639,"/**
* Provides serialized form of the object.
* @return SerializedForm instance containing object data
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$Builder:<init>(),481,483,"/**
 * Constructs a new Builder with default capacity.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,builderWithExpectedSize,com.google.common.collect.ImmutableSet:builderWithExpectedSize(int),449,452,"/**
* Creates a Builder with an initial capacity.
* @param expectedSize estimated number of elements
* @return Builder instance initialized with the given size
*/","* Returns a new builder, expecting the specified number of distinct elements to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of distinct elements added to the builder
   * before {@link Builder#build} is called, the builder is likely to perform better than an unsized
   * {@link #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of distinct elements added to the builder.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copy,com.google.common.collect.ImmutableSet$Builder:copy(),510,513,"/**
 * Creates a shallow copy of the current object.
 * Uses the 'copy' method of the underlying implementation.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,subListUnchecked,"com.google.common.collect.ImmutableSortedAsList:subListUnchecked(int,int)",76,86,"/**
* Returns a sublist of elements within the specified range.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
* @return ImmutableList containing the sublist of elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,spliterator,com.google.common.collect.ImmutableSortedAsList:spliterator(),88,95,"/**
* Returns a spliterator for the list.
* @return Spliterator with indexed characteristics, sorted and distinct elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,lastIndexOf,com.google.common.collect.ImmutableSortedAsList:lastIndexOf(java.lang.Object),64,68,"/**
* Returns the last index of the specified element.
* @param target element to search for
* @return last index of the element or -1 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,contains,com.google.common.collect.ImmutableSortedAsList:contains(java.lang.Object),70,74,"/**
* Checks if the collection contains the specified element.
* @param target element to search for
* @return true if the element is found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,hashCode,com.google.common.collect.ImmutableRangeMap:hashCode(),404,407,"/**
 * Returns hash code based on map of ranges.
 * @return hash code value
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,equals,com.google.common.collect.ImmutableRangeMap:equals(java.lang.Object),409,416,"/**
* Checks equality with another RangeMap.
* @param o object to compare
* @return true if equal, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,writeReplace,com.google.common.collect.ImmutableRangeMap:writeReplace(),454,456,"/**
 * Provides an alternative object to be serialized.
 * @return SerializedForm containing map of ranges
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,writeReplace,com.google.common.collect.ImmutableSortedMap:writeReplace(),1160,1164,"/**
 * Provides an alternative object to serialize.
 * @return SerializedForm instance representing this object
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,putAll,"com.google.common.collect.ImmutableListMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)",284,289,"/**
 * Adds all values to a key in the map.
 * @param key the key to add values to
 * @param values iterable of values to be added
 * @return this Builder instance for method chaining
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,putAll,com.google.common.collect.ImmutableMultimap$Builder:putAll(com.google.common.collect.Multimap),322,329,"/**
 * Adds all entries from the specified multimap.
 * @param multimap source of entries to add
 * @return this builder for chaining
 */","* Stores another multimap's entries in the built multimap. The generated multimap's key and
     * value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view,
     * with new keys and values following any existing keys and values.
     *
     * @throws NullPointerException if any key or value in {@code multimap} is null. The builder is
     *     left in an invalid state.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,combine,com.google.common.collect.ImmutableMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder),353,361,"/**
* Combines entries from another builder.
* @param other the builder to combine with
* @return this builder instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,putAll,"com.google.common.collect.ImmutableSetMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)",333,338,"/**
* Adds all values to the specified key.
* @param key key to which values are added
* @param values iterable collection of values
* @return this Builder instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,throwDeleteFailed,"com.google.common.io.MoreFiles:throwDeleteFailed(java.nio.file.Path,java.util.Collection)",786,804,"/**
* Throws a FileSystemException if file deletion fails.
* @param path the path of the file being deleted
* @param exceptions collection of IOExceptions encountered during deletion
*/","* Throws an exception indicating that one or more files couldn't be deleted when deleting {@code
   * path} or its contents.
   *
   * <p>If there is only one exception in the collection, and it is a {@link NoSuchFileException}
   * thrown because {@code path} itself didn't exist, then throws that exception. Otherwise, the
   * thrown exception contains all the exceptions in the given collection as suppressed exceptions.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean)",110,133,"/**
* Executes a callable with a timeout.
* @param callable task to execute
* @param timeoutDuration duration of the timeout
* @param timeoutUnit unit of the timeout
* @param amInterruptible whether to allow interruption
* @return result of the callable or null if timed out
* @throws Exception if execution fails
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,com.google.common.collect.Iterators:concat(java.util.Iterator),556,559,"/**
* Concatenates multiple iterators into a single iterator.
* @param inputs variable number of input iterators
* @return an iterator that sequences the elements from all inputs
*/","* Combines multiple iterators into a single iterator. The returned iterator iterates across the
   * elements of each iterator in {@code inputs}. The input iterators are not polled until
   * necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.
   *
   * @throws NullPointerException if any of the provided iterators is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,readObject,com.google.common.collect.LinkedListMultimap:readObject(java.io.ObjectInputStream),854,867,"/**
* Reads object from input stream.
* @param stream source of the serialized object
* @throws IOException if an I/O error occurs
* @throws ClassNotFoundException if class of a serialized object cannot be found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,lastIndexOf,com.google.common.collect.ImmutableList$ReverseImmutableList:lastIndexOf(java.lang.Object),668,672,"/**
* Returns the last index of the specified object in the list.
* @param object the object to search for
* @return the last index of the object, or -1 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,contains,com.google.common.collect.ImmutableList:contains(java.lang.Object),435,438,"/**
 * Checks if the collection contains the specified object.
 * @param object the object to check for presence
 * @return true if the object is found, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,indexOf,com.google.common.collect.ImmutableList$ReverseImmutableList:indexOf(java.lang.Object),662,666,"/**
 * Returns the last index of the specified element in the list.
 * @param object the element to search for
 * @return the last index of the element, or -1 if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,nextEntry,com.google.common.collect.MapMakerInternalMap$HashIterator:nextEntry(),2613,2620,"/**
* Returns the next entry in the iteration.
* @return the next WriteThroughEntry
* @throws NoSuchElementException if no more entries are available
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",632,638,"/**
* Creates a new segment for the given map.
* @param map the internal map to associate with the segment
* @param initialCapacity initial capacity of the segment
* @return a new StrongKeyDummyValueSegment instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",439,446,"/**
* Creates a new segment for strong key and value entries.
* @param map the internal map associated with the segment
* @param initialCapacity initial capacity of the segment
* @return a new StrongKeyStrongValueSegment instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",537,543,"/**
* Creates a new segment for strong key and weak value entries.
* @param map the internal map configuration
* @param initialCapacity the initial capacity of the segment
* @return a new StrongKeyWeakValueSegment instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",744,749,"/**
* Creates a new segment for weak key dummy value map.
* @param map the internal map
* @param initialCapacity initial capacity of the segment
* @return new segment instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",833,839,"/**
* Creates a new segment for weak key-strong value mapping.
* @param map the internal map instance
* @param initialCapacity initial capacity of the segment
* @return a new WeakKeyStrongValueSegment
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",933,938,"/**
* Creates a new segment for weak key and value handling.
* @param map the internal map associated with the segment
* @param initialCapacity the initial capacity of the segment
* @return a new WeakKeyWeakValueSegment instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getLiveEntry,"com.google.common.collect.MapMakerInternalMap$Segment:getLiveEntry(java.lang.Object,int)",1435,1437,"/**
 * Retrieves live entry by key and hash.
 * @param key the key to look up
 * @param hash the hash of the key
 * @return the live entry or null if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getEntry,com.google.common.collect.MapMakerInternalMap:getEntry(java.lang.Object),2368,2374,"/**
* Retrieves entry by key.
* @param key the key to look up
* @return the entry associated with the key, or null if not found
*/","* Returns the internal entry for the specified key. The entry may be computing or partially
   * collected. Does not impact recency ordering.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,put,"com.google.common.collect.MapMakerInternalMap$Segment:put(java.lang.Object,int,java.lang.Object,boolean)",1498,1553,"/**
* Inserts or updates a key-value pair in the map.
* @param key the key to insert
* @param hash the hash of the key
* @param value the value to associate with the key
* @param onlyIfAbsent if true, do not update existing entry
* @return old value associated with the key or null if new entry was created
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap$Segment:replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",1624,1669,"/**
* Replaces value for a key if it matches the old value.
* @param key key of the entry to replace
* @param hash precomputed hash of the key
* @param oldValue expected old value to match
* @param newValue new value to set
* @return true if replaced, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap$Segment:replace(java.lang.Object,int,java.lang.Object)",1671,1710,"/**
* Replaces value for a key if present.
* @param key the key to replace value for
* @param hash precomputed hash of the key
* @param newValue new value to set
* @return old value or null if key not found or was collected
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,"com.google.common.collect.MapMakerInternalMap$Segment:remove(java.lang.Object,int)",1712,1751,"/**
* Removes entry by key and hash.
* @param key the key of the entry to remove
* @param hash the hash code of the key
* @return value of removed entry or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,"com.google.common.collect.MapMakerInternalMap$Segment:remove(java.lang.Object,int,java.lang.Object)",1753,1792,"/**
 * Removes a key-value pair from the map.
 * @param key the key to remove
 * @param hash the hash of the key
 * @param value the value associated with the key
 * @return true if the removal was successful, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,run,com.google.common.collect.MapMakerInternalMap$CleanupMapTask:run(),2285,2295,"/**
* Runs cleanup on all segments of the map.
* Throws CancellationException if map reference is null.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,postReadCleanup,com.google.common.collect.MapMakerInternalMap$Segment:postReadCleanup(),1988,1992,"/**
 * Increments read count and triggers cleanup if threshold is reached.
 */","* Performs routine cleanup following a read. Normally cleanup happens during writes, or from
     * the cleanupExecutor. If cleanup is not observed after a sufficient number of reads, try
     * cleaning up from the read thread.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$EntrySet:clear(),2781,2784,"/**
 * Clears all entries in the map.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$KeySet:clear(),2703,2706,"/**
 * Clears all entries in the map.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$Values:clear(),2732,2735,"/**
 * Clears all entries from the internal map.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)",966,975,"/**
* Creates a new entry for the segment.
* @param segment the segment to add the entry to
* @param key the key for the new entry
* @param hash the hash of the key
* @param next the next entry in the chain or null if none
* @return a new WeakKeyWeakValueEntry or LinkedWeakKeyWeakValueEntry
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,standardContainsKey,com.google.common.collect.ForwardingSortedMap:standardContainsKey(java.lang.Object),132,143,"/**
* Checks if the map contains a key.
* @param key the key to check
* @return true if the map contains the key, false otherwise
*/","* A sensible definition of {@link #containsKey} in terms of the {@code firstKey()} method of
   * {@link #tailMap}. If you override {@link #tailMap}, you may wish to override {@link
   * #containsKey} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,standardSubMap,"com.google.common.collect.ForwardingSortedMap:standardSubMap(java.lang.Object,java.lang.Object)",152,155,"/**
* Returns a submap with keys between fromKey and toKey.
* @param fromKey inclusive lower bound
* @param toKey exclusive upper bound
* @return SortedMap containing the range of keys
*/","* A sensible default implementation of {@link #subMap(Object, Object)} in terms of {@link
   * #headMap(Object)} and {@link #tailMap(Object)}. In some situations, you may wish to override
   * {@link #subMap(Object, Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,size,com.google.common.collect.ForwardingMap:size(),67,70,"/**
 * Returns the number of elements in the collection.
 * @return size of the collection
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,isEmpty,com.google.common.collect.ForwardingMap:isEmpty(),72,75,"/**
 * Checks if the collection is empty.
 * @return true if the collection has no elements, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,remove,com.google.common.collect.ForwardingMap:remove(java.lang.Object),77,81,"/**
 * Removes and returns the value associated with the specified key.
 * @param key the key whose mapping is to be removed
 * @return the value associated with the key, or null if no mapping exists
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,clear,com.google.common.collect.ForwardingMap:clear(),83,86,"/**
 * Clears all elements from the collection.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,containsKey,com.google.common.collect.ForwardingMap:containsKey(java.lang.Object),88,91,"/**
 * Checks if the map contains the specified key.
 * @param key the key to check
 * @return true if the key is present, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,containsValue,com.google.common.collect.ForwardingMap:containsValue(java.lang.Object),93,96,"/**
 * Checks if the map contains the specified value.
 * @param value value to check for presence in the map
 * @return true if the map contains the value, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,get,com.google.common.collect.ForwardingMap:get(java.lang.Object),98,101,"/**
 * Retrieves value by key from the delegate map.
 * @param key key whose associated value is to be returned
 * @return value associated with the specified key, or null if not present
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,put,"com.google.common.collect.ForwardingMap:put(java.lang.Object,java.lang.Object)",103,107,"/**
* Puts a key-value pair in the map.
* @param key the key to store
* @param value the value associated with the key
* @return the previous value for the key or null if none
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,putAll,com.google.common.collect.ForwardingMap:putAll(java.util.Map),109,112,"/**
* Adds all key-value pairs from the specified map.
* @param map source map with entries to add
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,keySet,com.google.common.collect.ForwardingMap:keySet(),114,117,"/**
 * Returns the set of keys from the underlying map.
 * @return Set of keys in the map
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,values,com.google.common.collect.ForwardingMap:values(),119,122,"/**
 * Returns a collection of all values in the map.
 * @return Collection containing all values
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,entrySet,com.google.common.collect.ForwardingMap:entrySet(),124,127,"/**
 * Returns a set of map entries.
 * Delegates to the underlying map implementation.
 * @return Set of Entry objects representing key-value pairs
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,equals,com.google.common.collect.ForwardingMap:equals(java.lang.Object),129,132,"/**
 * Checks equality with another object.
 * @param object the object to compare
 * @return true if equal, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,hashCode,com.google.common.collect.ForwardingMap:hashCode(),134,137,"/**
 * Returns the hash code of the delegate object.
 * @return hash code value of the delegate
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,difference,"com.google.common.collect.Maps:difference(java.util.Map,java.util.Map,com.google.common.base.Equivalence)",527,540,"/**
* Computes the difference between two maps.
* @param left first map to compare
* @param right second map to compare
* @param valueEquivalence equivalence for comparing values
* @return MapDifference containing differences between the maps
*/","* Computes the difference between two maps. This difference is an immutable snapshot of the state
   * of the maps at the time this method is called. It will never change, even if the maps change at
   * a later time.
   *
   * <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps
   * must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}.
   *
   * @param left the map to treat as the ""left"" map for purposes of comparison
   * @param right the map to treat as the ""right"" map for purposes of comparison
   * @param valueEquivalence the equivalence relationship to use to compare values
   * @return the difference between the two maps
   * @since 10.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,difference,"com.google.common.collect.Maps:difference(java.util.SortedMap,java.util.Map)",559,573,"/**
* Computes the difference between two sorted maps.
* @param left first sorted map
* @param right second map
* @return SortedMapDifference containing differences
*/","* Computes the difference between two sorted maps, using the comparator of the left map, or
   * {@code Ordering.natural()} if the left map uses the natural ordering of its elements. This
   * difference is an immutable snapshot of the state of the maps at the time this method is called.
   * It will never change, even if the maps change at a later time.
   *
   * <p>Since this method uses {@code TreeMap} instances internally, the keys of the right map must
   * all compare as distinct according to the comparator of the left map.
   *
   * <p><b>Note:</b>If you only need to know whether two sorted maps have the same mappings, call
   * {@code left.equals(right)} instead of this method.
   *
   * @param left the map to treat as the ""left"" map for purposes of comparison
   * @param right the map to treat as the ""right"" map for purposes of comparison
   * @return the difference between the two maps
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/AsyncEventBus.java,<init>,"com.google.common.eventbus.AsyncEventBus:<init>(java.lang.String,java.util.concurrent.Executor)",36,38,"/**
* Constructs an AsyncEventBus with a specified identifier and executor.
* @param identifier unique name for the event bus
* @param executor task executor for handling events asynchronously
*/","* Creates a new AsyncEventBus that will use {@code executor} to dispatch events. Assigns {@code
   * identifier} as the bus's name for logging purposes.
   *
   * @param identifier short name for the bus, for logging purposes.
   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut
   *     down the executor after the last event has been posted to this event bus.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/AsyncEventBus.java,<init>,"com.google.common.eventbus.AsyncEventBus:<init>(java.util.concurrent.Executor,com.google.common.eventbus.SubscriberExceptionHandler)",49,51,"/**
* Initializes an AsyncEventBus with specified executor and exception handler.
* @param executor Executor to handle asynchronous tasks
* @param subscriberExceptionHandler Handler for exceptions thrown by subscribers
*/","* Creates a new AsyncEventBus that will use {@code executor} to dispatch events.
   *
   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut
   *     down the executor after the last event has been posted to this event bus.
   * @param subscriberExceptionHandler Handler used to handle exceptions thrown from subscribers.
   *     See {@link SubscriberExceptionHandler} for more information.
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/AsyncEventBus.java,<init>,com.google.common.eventbus.AsyncEventBus:<init>(java.util.concurrent.Executor),59,61,"/**
 * Constructs an AsyncEventBus with a specified executor.
 * @param executor Executor to handle asynchronous event dispatching
 */","* Creates a new AsyncEventBus that will use {@code executor} to dispatch events.
   *
   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut
   *     down the executor after the last event has been posted to this event bus.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,com.google.common.eventbus.EventBus:<init>(java.lang.String),175,178,"/**
 * Constructs an EventBus with a specified identifier.
 * @param identifier unique name for the event bus
 */","* Creates a new EventBus with the given {@code identifier}.
   *
   * @param identifier a brief name for this bus, for logging purposes. Should be a valid Java
   *     identifier.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,com.google.common.eventbus.EventBus:<init>(com.google.common.eventbus.SubscriberExceptionHandler),186,188,"/**
* Constructs an EventBus with a default configuration and custom exception handler.
* @param exceptionHandler handler for exceptions thrown by subscribers
*/","* Creates a new EventBus with the given {@link SubscriberExceptionHandler}.
   *
   * @param exceptionHandler Handler for subscriber exceptions.
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,findMinChild,com.google.common.collect.MinMaxPriorityQueue$Heap:findMinChild(int),617,619,"/**
 * Finds the minimum child of a node at a given index.
 * @param index the index of the parent node
 * @return the index of the minimum child node
 */",Returns the minimum child or {@code -1} if no child exists.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,findMinGrandChild,com.google.common.collect.MinMaxPriorityQueue$Heap:findMinGrandChild(int),622,628,"/**
* Finds the minimum value among grandchildren of a node.
* @param index index of the current node
* @return minimum value among grandchildren or -1 if no valid grandchild exists
*/",Returns the minimum grand child or -1 if no grand child exists.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,peekLast,com.google.common.collect.MinMaxPriorityQueue:peekLast(),390,392,"/**
 * Retrieves the last element without removing it.
 * @return the last element or null if the deque is empty
 */","* Retrieves, but does not remove, the greatest element of this queue, or returns {@code null} if
   * the queue is empty.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,bubbleUp,"com.google.common.collect.MinMaxPriorityQueue$Heap:bubbleUp(int,java.lang.Object)",565,576,"/**
 * Bubbles up an element to maintain heap property.
 * @param index starting index of the element
 * @param x element to be bubbled up
 */",Bubbles a value from {@code index} up the appropriate heap if required.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:get(java.lang.Object),873,876,"/**
* Retrieves unmodifiable sorted set of values by key.
* @param key unique identifier
* @return unmodifiable SortedSet of values or empty if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,valueComparator,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:valueComparator(),888,891,"/**
 * Returns the comparator used to order values.
 * @return Comparator for values or null if natural ordering is used
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardContains,com.google.common.collect.ForwardingMultiset:standardContains(java.lang.Object),114,117,"/**
 * Checks if the collection contains the specified object.
 * @param object the object to check for presence
 * @return true if the object is present, false otherwise
 */","* A sensible definition of {@link #contains} in terms of {@link #count}. If you override {@link
   * #count}, you may wish to override {@link #contains} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardAdd,com.google.common.collect.ForwardingMultiset:standardAdd(java.lang.Object),154,157,"/**
 * Adds an element to the collection.
 * @param element the element to add
 * @return always true
 */","* A sensible definition of {@link #add(Object)} in terms of {@link #add(Object, int)}. If you
   * override {@link #add(Object, int)}, you may wish to override {@link #add(Object)} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardRemove,com.google.common.collect.ForwardingMultiset:standardRemove(java.lang.Object),178,181,"/**
* Removes one occurrence of an element from the collection.
* @param element the object to be removed
* @return true if the element was successfully removed, false otherwise
*/","* A sensible definition of {@link #remove(Object)} in terms of {@link #remove(Object, int)}. If
   * you override {@link #remove(Object, int)}, you may wish to override {@link #remove(Object)} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardClear,com.google.common.collect.ForwardingMultiset:standardClear(),126,129,"/**
 * Clears all entries in the map.
 */","* A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #clear} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardCount,com.google.common.collect.ForwardingMultiset:standardCount(java.lang.Object),138,145,"/**
 * Counts occurrences of an object in the collection.
 * @param object the object to count, can be null
 * @return number of times the object appears, or 0 if not found
 */","* A sensible, albeit inefficient, definition of {@link #count} in terms of {@link #entrySet}. If
   * you override {@link #entrySet}, you may wish to override {@link #count} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardHashCode,com.google.common.collect.ForwardingMultiset:standardHashCode(),296,298,"/**
 * Generates a hash code based on the entry set.
 * @return The hash code of the entry set
 */","* A sensible definition of {@link #hashCode} as {@code entrySet().hashCode()} . If you override
   * {@link #entrySet}, you may wish to override {@link #hashCode} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardToString,com.google.common.collect.ForwardingMultiset:standardToString(),307,310,"/**
 * Returns string representation of entry set.
 * @return String representation of entry set
 */","* A sensible definition of {@link #toString} as {@code entrySet().toString()} . If you override
   * {@link #entrySet}, you may wish to override {@link #toString} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,toArray,com.google.common.collect.ImmutableCollection:toArray(),193,197,"/**
 * Converts the collection to an array.
 * Uses EMPTY_ARRAY as a template for the resulting array.
 * @return An array containing all elements of the collection.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,toArray,com.google.common.collect.CompactLinkedHashSet:toArray(java.lang.Object[]),236,240,"/**
* Converts the list to an array.
* @param a target array or null for new array creation
* @return array containing all elements of the list
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardToArray,com.google.common.collect.ForwardingCollection:standardToArray(java.lang.Object[]),255,257,"/**
 * Converts this collection to an array.
 * @param array target array to populate
 * @return array containing elements of this collection
 */","* A sensible definition of {@link #toArray(Object[])} in terms of {@link #size} and {@link
   * #iterator}. If you override either of these methods, you may wish to override {@link #toArray}
   * to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:toArray(java.lang.Object[]),1000,1006,"/**
* Converts collection to array.
* @param array target array or null for new array creation
* @return array containing all elements of the collection
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,max,com.google.common.collect.ReverseOrdering:max(java.lang.Iterable),88,91,"/**
* Finds maximum element in iterable.
* @param iterable collection of elements to compare
* @return maximum element or null if iterable is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,min,com.google.common.collect.ReverseOrdering:min(java.lang.Iterable),67,70,"/**
* Finds minimum element in an iterable.
* @param iterable collection of elements to search
* @return minimum element or null if iterable is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,descendingSet,com.google.common.collect.Maps$6:descendingSet(),155,158,"/**
 * Returns a reverse-ordered view of the elements in this set.
 * @return NavigableSet containing elements in descending order
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardPollLast,com.google.common.collect.ForwardingNavigableSet:standardPollLast(),141,143,"/**
 * Retrieves and removes the last element from the collection.
 * @return the last element or null if the collection is empty
 */","* A sensible definition of {@link #pollLast} in terms of the {@code descendingIterator} method.
   * If you override {@link #descendingIterator} you may wish to override {@link #pollLast} to
   * forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardLast,com.google.common.collect.ForwardingNavigableSet:standardLast(),150,153,"/**
 * Returns the last element in descending order.
 * @return the last element or null if empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardSubSet,"com.google.common.collect.ForwardingNavigableSet:standardSubSet(java.lang.Object,java.lang.Object)",209,213,"/**
 * Returns a subset of elements from `fromElement` (inclusive) to `toElement` (exclusive).
 * @param fromElement the lower bound element (inclusive)
 * @param toElement the upper bound element (exclusive)
 * @return SortedSet containing elements within the specified range
 */","* A sensible definition of {@link #subSet(Object, Object)} in terms of the {@link #subSet(Object,
   * boolean, Object, boolean)} method. If you override {@link #subSet(Object, boolean, Object,
   * boolean)}, you may wish to override {@link #subSet(Object, Object)} to forward to this
   * implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,subSet,"com.google.common.collect.Maps$6:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",181,188,"/**
 * Returns a subset of elements within the specified range.
 * @param fromElement lower bound element
 * @param fromInclusive true if lower bound is inclusive
 * @param toElement upper bound element
 * @param toInclusive true if upper bound is inclusive
 * @return NavigableSet containing elements within the range
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardLower,com.google.common.collect.ForwardingNavigableSet:standardLower(java.lang.Object),71,73,"/**
* Retrieves the largest element less than the given element.
* @param e element to compare against
* @return largest element less than e or null if none exists
*/","* A sensible definition of {@link #lower} in terms of the {@code descendingIterator} method of
   * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may
   * wish to override {@link #lower} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardFloor,com.google.common.collect.ForwardingNavigableSet:standardFloor(java.lang.Object),85,87,"/**
* Finds the greatest element less than or equal to the given element.
* @param e the element to compare against
* @return the greatest element less than or equal to e, or null if none exists
*/","* A sensible definition of {@link #floor} in terms of the {@code descendingIterator} method of
   * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may
   * wish to override {@link #floor} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardHeadSet,com.google.common.collect.ForwardingNavigableSet:standardHeadSet(java.lang.Object),225,227,"/**
 * Returns a view of the portion of this set whose elements are strictly less than the specified element.
 * @param toElement upper bound (exclusive) for the returned set
 * @return SortedSet containing elements less than toElement
 */","* A sensible definition of {@link #headSet(Object)} in terms of the {@link #headSet(Object,
   * boolean)} method. If you override {@link #headSet(Object, boolean)}, you may wish to override
   * {@link #headSet(Object)} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,headSet,"com.google.common.collect.Maps$6:headSet(java.lang.Object,boolean)",215,218,"/**
* Returns elements less than or equal to specified element.
* @param toElement the upper bound element
* @param inclusive true if the bound is inclusive
* @return NavigableSet of elements up to toElement
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardCeiling,com.google.common.collect.ForwardingNavigableSet:standardCeiling(java.lang.Object),99,101,"/**
* Finds the smallest element greater than or equal to the given element.
* @param e the element to compare against
* @return the found element or null if none exists
*/","* A sensible definition of {@link #ceiling} in terms of the {@code iterator} method of {@link
   * #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to
   * override {@link #ceiling} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardHigher,com.google.common.collect.ForwardingNavigableSet:standardHigher(java.lang.Object),113,115,"/**
* Finds the next higher element in a sorted set.
* @param e current element to compare against
* @return next higher element or null if none exists
*/","* A sensible definition of {@link #higher} in terms of the {@code iterator} method of {@link
   * #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to
   * override {@link #higher} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardSubSet,"com.google.common.collect.ForwardingNavigableSet:standardSubSet(java.lang.Object,boolean,java.lang.Object,boolean)",195,201,"/**
 * Returns a subset of elements between specified bounds.
 * @param fromElement lower bound element
 * @param fromInclusive true if the fromElement is inclusive
 * @param toElement upper bound element
 * @param toInclusive true if the toElement is inclusive
 * @return NavigableSet containing elements within the range
 */","* A sensible definition of {@link #subSet(Object, boolean, Object, boolean)} in terms of the
   * {@code headSet} and {@code tailSet} methods. In many cases, you may wish to override {@link
   * #subSet(Object, boolean, Object, boolean)} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardTailSet,com.google.common.collect.ForwardingNavigableSet:standardTailSet(java.lang.Object),239,241,"/**
* Returns a view of the portion of this set whose elements are greater than or equal to fromElement.
* @param fromElement the lower bound (inclusive)
* @return SortedSet containing elements greater than or equal to fromElement
*/","* A sensible definition of {@link #tailSet(Object)} in terms of the {@link #tailSet(Object,
   * boolean)} method. If you override {@link #tailSet(Object, boolean)}, you may wish to override
   * {@link #tailSet(Object)} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,tailSet,"com.google.common.collect.Maps$6:tailSet(java.lang.Object,boolean)",229,232,"/**
 * Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive) fromElement.
 * @param fromElement lower bound element
 * @param inclusive true if the lower bound is inclusive
 * @return NavigableSet containing elements greater than or equal to fromElement
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,comparator,com.google.common.collect.ForwardingSortedSet:comparator(),70,73,"/**
 * Returns the comparator used to order elements.
 * @return Comparator or null if natural ordering is used
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,first,com.google.common.collect.ForwardingSortedSet:first(),75,79,"/**
 * Retrieves the first element from the collection.
 * @return the first element or null if the collection is empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,headSet,com.google.common.collect.ForwardingSortedSet:headSet(java.lang.Object),81,84,"/**
* Returns elements less than the specified element.
* @param toElement upper bound (exclusive)
* @return SortedSet of elements less than toElement
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,last,com.google.common.collect.ForwardingSortedSet:last(),86,90,"/**
 * Retrieves the last element of the collection.
 * @return the last element or null if the collection is empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,subSet,"com.google.common.collect.ForwardingSortedSet:subSet(java.lang.Object,java.lang.Object)",92,95,"/**
* Returns a view of the portion of this set whose elements range from fromElement (inclusive) to toElement (exclusive).
* @param fromElement lower bound (inclusive)
* @param toElement upper bound (exclusive)
* @return SortedSet containing elements in the specified range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,tailSet,com.google.common.collect.ForwardingSortedSet:tailSet(java.lang.Object),97,100,"/**
* Returns a subset of elements greater than or equal to fromElement.
* @param fromElement the lower bound (inclusive)
* @return SortedSet containing elements >= fromElement
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,descendingIterator,com.google.common.collect.SortedMultisets$NavigableElementSet:descendingIterator(),128,131,"/**
 * Returns an iterator over elements in reverse order.
 * @return Iterator over elements in descending order
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Row:remove(java.lang.Object),367,376,"/**
* Removes entry by key.
* @param key the key to remove
* @return value removed or null if not present
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,clear,com.google.common.collect.StandardTable$Row:clear(),378,385,"/**
* Clears all entries from the map and updates invariants.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,headMap,com.google.common.collect.StandardRowSortedTable$RowSortedMap:headMap(java.lang.Object),122,127,"/**
* Returns a sorted map of rows up to (but not including) the specified key.
* @param toKey the upper bound key
* @return SortedMap containing rows up to toKey
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,subMap,"com.google.common.collect.StandardRowSortedTable$RowSortedMap:subMap(java.lang.Object,java.lang.Object)",129,135,"/**
* Returns a submap of rows from fromKey (inclusive) to toKey (exclusive).
* @param fromKey starting row key
* @param toKey ending row key
* @return SortedMap containing the specified range of rows
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,tailMap,com.google.common.collect.StandardRowSortedTable$RowSortedMap:tailMap(java.lang.Object),137,142,"/**
* Returns a view of the map whose keys are greater than or equal to fromKey.
* @param fromKey key to start from
* @return SortedMap with filtered rows
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowKeySet,com.google.common.collect.StandardRowSortedTable:rowKeySet(),74,77,"/**
* Returns a sorted set of all row keys.
* @return SortedSet containing row keys
*/","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link
   * Table} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowMap,com.google.common.collect.TreeBasedTable:rowMap(),85,88,"/**
* Returns a sorted map of rows.
* @return SortedMap where key is row key and value is a map of column keys to values
*/","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link
   * Table} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowKeySet,com.google.common.collect.HashBasedTable:rowKeySet(),665,668,"/**
 * Returns the set of all row keys in the map.
 * @return Set containing all row keys
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableSet,"com.google.common.collect.Synchronized:navigableSet(java.util.NavigableSet,java.lang.Object)",1576,1580,"/**
 * Wraps a NavigableSet with synchronization.
 * @param navigableSet the set to be wrapped
 * @param mutex object used for locking
 * @return synchronized NavigableSet
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,typePreservingSet,"com.google.common.collect.Synchronized:typePreservingSet(java.util.Set,java.lang.Object)",947,954,"/**
 * Creates a type-preserving set with optional synchronization.
 * @param set the original set to wrap
 * @param mutex object for mutual exclusion or null if not needed
 * @return synchronized set if set is SortedSet, otherwise regular set
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,iterator,com.google.common.collect.Synchronized$SynchronizedAsMapValues:iterator(),1447,1456,"/**
* Returns an iterator over collections of values.
* Ensures thread safety by synchronizing access.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,add,"com.google.common.collect.Synchronized$SynchronizedList:add(int,java.lang.Object)",380,385,"/**
* Adds an element at specified index.
* @param index position to insert the element
* @param element the element to be added
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addAll,"com.google.common.collect.Synchronized$SynchronizedList:addAll(int,java.util.Collection)",387,392,"/**
* Adds all elements from collection to specified index.
* @param index position at which to insert the first element from the specified collection
* @param c collection containing elements to be added
* @return true if this list changed as a result of the call
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedList:get(int),394,399,"/**
* Retrieves element at specified index.
* @param index position of the element to retrieve
* @return element at the given index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,indexOf,com.google.common.collect.Synchronized$SynchronizedList:indexOf(java.lang.Object),401,406,"/**
* Returns index of object in list.
* @param o object to find
* @return index of object or -1 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lastIndexOf,com.google.common.collect.Synchronized$SynchronizedList:lastIndexOf(java.lang.Object),408,413,"/**
* Returns the index of the last occurrence of an element.
* @param o element to search for
* @return index of the last occurrence or -1 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,listIterator,com.google.common.collect.Synchronized$SynchronizedList:listIterator(),415,418,"/**
 * Returns a list iterator over elements.
 * @return ListIterator of elements
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,listIterator,com.google.common.collect.Synchronized$SynchronizedList:listIterator(int),420,423,"/**
* Returns a list iterator over the elements in this list.
* @param index starting index for the iterator
* @return ListIterator object starting from the specified index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedList:remove(int),425,430,"/**
* Removes element at specified index.
* @param index position of element to remove
* @return removed element or null if invalid index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,set,"com.google.common.collect.Synchronized$SynchronizedList:set(int,java.lang.Object)",432,437,"/**
* Sets an element at the specified index.
* @param index position to update
* @param element new value to set
* @return previous element at the index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceAll,com.google.common.collect.Synchronized$SynchronizedList:replaceAll(java.util.function.UnaryOperator),439,444,"/**
* Replaces each element in the list with the result of applying the given operator.
* @param operator function to apply to each element
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sort,com.google.common.collect.Synchronized$SynchronizedList:sort(java.util.Comparator),446,451,"/**
* Sorts elements using provided comparator.
* @param c comparator to define sort order, or null for natural ordering
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subList,"com.google.common.collect.Synchronized$SynchronizedList:subList(int,int)",453,458,"/**
* Returns a synchronized sublist of elements.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
* @return synchronized List containing specified range of elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedList:equals(java.lang.Object),460,468,"/**
* Checks equality with another object.
* @param o the object to compare
* @return true if equal, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedList:hashCode(),470,475,"/**
 * Returns the hash code of the delegate object.
 * Synchronized to ensure thread safety.
 * @return hash code value
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,count,com.google.common.collect.Synchronized$SynchronizedMultiset:count(java.lang.Object),511,516,"/**
 * Counts occurrences of an object in the collection.
 * @param o the object to count, may be null
 * @return number of times the object occurs
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,add,"com.google.common.collect.Synchronized$SynchronizedMultiset:add(java.lang.Object,int)",518,523,"/**
 * Adds an element to the collection.
 * @param e the element to add
 * @param n number of times to add the element
 * @return the new size of the collection
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedMultiset:remove(java.lang.Object,int)",525,530,"/**
* Removes up to n occurrences of an object from the collection.
* @param o object to be removed
* @param n maximum number of occurrences to remove
* @return actual number of objects removed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setCount,"com.google.common.collect.Synchronized$SynchronizedMultiset:setCount(java.lang.Object,int)",532,537,"/**
* Sets the count of an element in a thread-safe manner.
* @param element the element whose count is to be set
* @param count the new count value for the element
* @return the previous count of the element
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setCount,"com.google.common.collect.Synchronized$SynchronizedMultiset:setCount(java.lang.Object,int,int)",539,544,"/**
* Updates count for an element.
* @param element the element to update
* @param oldCount current count of the element
* @param newCount new count to set for the element
* @return true if update successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,elementSet,com.google.common.collect.Synchronized$SynchronizedMultiset:elementSet(),546,554,"/**
* Returns a thread-safe set of elements.
* @return Set containing all elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entrySet,com.google.common.collect.Synchronized$SynchronizedMultiset:entrySet(),556,564,"/**
 * Returns the set of entries.
 * @return Set of Multiset.Entry objects
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedMultiset:equals(java.lang.Object),566,574,"/**
* Checks equality with another object.
* @param o the object to compare
* @return true if equal, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedMultiset:hashCode(),576,581,"/**
 * Computes hash code for the delegate object.
 * Synchronized to ensure thread safety.
 * @return hash code of the delegate
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedDeque:delegate(),1906,1909,"/**
 * Returns the delegate deque.
 * @return the underlying deque implementation
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,element,com.google.common.collect.Synchronized$SynchronizedQueue:element(),1857,1862,"/**
 * Retrieves the head of the queue represented by this deque.
 * Synchronized to ensure thread safety.
 * @return the head of the queue, or throws an exception if empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,offer,com.google.common.collect.Synchronized$SynchronizedQueue:offer(java.lang.Object),1864,1869,"/**
 * Adds an element to the queue.
 * @param e element to add
 * @return true if added, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,peek,com.google.common.collect.Synchronized$SynchronizedQueue:peek(),1871,1876,"/**
 * Retrieves the top element without removing it.
 * @return the top element or null if empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,poll,com.google.common.collect.Synchronized$SynchronizedQueue:poll(),1878,1883,"/**
 * Retrieves and removes the head of this queue.
 * @return the head of the queue or null if empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedQueue:remove(),1885,1890,"/**
 * Removes and returns the head element.
 * @return the head element of the queue or null if empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedSet:equals(java.lang.Object),282,290,"/**
* Checks equality with another object.
* @param o the object to compare
* @return true if equal, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedSet:hashCode(),292,297,"/**
 * Returns the hash code of the delegate object.
 * Synchronized to ensure thread safety.
 * @return hash code value
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSortedSet:delegate(),313,316,"/**
 * Returns the sorted set delegate.
 * @return SortedSet object
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedBiMap:values(),1363,1371,"/**
 * Returns a synchronized set of values.
 * @return Synchronized set containing all values
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forcePut,"com.google.common.collect.Synchronized$SynchronizedBiMap:forcePut(java.lang.Object,java.lang.Object)",1373,1378,"/**
 * Forces insertion of a key-value pair.
 * @param key the key to insert
 * @param value the value associated with the key
 * @return the previous value or null if not present
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedAsMap:get(java.lang.Object),1402,1408,"/**
* Retrieves a collection associated with the given key.
* @param key the key whose associated collection is to be returned
* @return a Collection of values or null if no mapping for the key exists
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedNavigableMap:delegate(),1609,1612,"/**
* Returns the underlying navigable map.
* @return NavigableMap instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,comparator,com.google.common.collect.Synchronized$SynchronizedSortedMap:comparator(),1294,1299,"/**
* Returns the comparator used to order the keys.
* @return Comparator or null if natural ordering is used
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,firstKey,com.google.common.collect.Synchronized$SynchronizedSortedMap:firstKey(),1301,1306,"/**
 * Returns the first key in the collection.
 * @return the first key or null if the collection is empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lastKey,com.google.common.collect.Synchronized$SynchronizedSortedMap:lastKey(),1315,1320,"/**
 * Returns the last key in the map.
 * Synchronized to ensure thread safety.
 * @return the last key or null if the map is empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedListMultimap:get(java.lang.Object),802,807,"/**
 * Retrieves a list of values associated with a key.
 * @param key unique identifier for the values
 * @return List of values or empty list if not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",816,821,"/**
* Replaces values associated with a key.
* @param key the key to replace values for
* @param values new values to associate with the key
* @return list of replaced values or empty if none were present
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedSetMultimap:get(java.lang.Object),847,852,"/**
 * Retrieves and synchronizes a set of values by key.
 * @param key unique identifier for the values
 * @return synchronized set of values or null if key not found
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedSetMultimap:removeAll(java.lang.Object),854,859,"/**
* Removes all values associated with the specified key.
* @param key the key to remove mappings for
* @return a set of removed values or an empty set if none were found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",861,866,"/**
* Replaces values associated with a key.
* @param key the key to update
* @param values new values to associate with the key
* @return previous values associated with the key
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entries,com.google.common.collect.Synchronized$SynchronizedSetMultimap:entries(),868,876,"/**
* Returns a synchronized set of map entries.
* @return Set of Map.Entry<K, V> objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:delegate(),897,900,"/**
* Returns the delegate SortedSetMultimap.
* @return SortedSetMultimap instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,synchronizedDeque,com.google.common.collect.Queues:synchronizedDeque(java.util.Deque),490,493,"/**
* Wraps a Deque with synchronization.
* @param deque the Deque to be wrapped
* @return a synchronized Deque
*/","* Returns a synchronized (thread-safe) deque backed by the specified deque. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing deque is accomplished
   * through the returned deque.
   *
   * <p>It is imperative that the user manually synchronize on the returned deque when accessing any
   * of the deque's iterators:
   *
   * {@snippet :
   * Deque<E> deque = Queues.synchronizedDeque(Queues.<E>newArrayDeque());
   * ...
   * deque.add(element);  // Needn't be in synchronized block
   * ...
   * synchronized (deque) {  // Must synchronize on deque!
   *   Iterator<E> i = deque.iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned deque will be serializable if the specified deque is serializable.
   *
   * @param deque the deque to be wrapped in a synchronized view
   * @return a synchronized view of the specified deque
   * @since 15.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,typePreservingCollection,"com.google.common.collect.Synchronized:typePreservingCollection(java.util.Collection,java.lang.Object)",933,945,"/**
 * Wraps a collection with type-preserving synchronization.
 * @param collection the original collection to wrap
 * @param mutex object used for synchronization
 * @return synchronized Collection of the same type
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,rangeContains,com.google.common.collect.TreeBasedTable$TreeRow:rangeContains(java.lang.Object),219,223,"/**
* Checks if the given object is within the range bounds.
* @param o object to check
* @return true if object is within range, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,rotateLeft,com.google.common.collect.TreeMultiset$AvlNode:rotateLeft(),976,986,"/**
 * Rotates the tree to the left.
 * @return new root node after rotation
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,rotateRight,com.google.common.collect.TreeMultiset$AvlNode:rotateRight(),988,998,"/**
 * Rotates the subtree right.
 * @return new root node after rotation
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,aggregateForEntries,com.google.common.collect.TreeMultiset:aggregateForEntries(com.google.common.collect.TreeMultiset$Aggregate),166,176,"/**
* Aggregates values within a specified range.
* @param aggr Aggregate function to apply
* @return Total aggregated value within the range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedCharEscaper.java,<init>,"com.google.common.escape.ArrayBasedCharEscaper:<init>(java.util.Map,char,char)",65,69,"/**
* Initializes escaper with a map of replacements and safe character range.
* @param replacementMap mapping of characters to their escaped values
* @param safeMin minimum safe character value
* @param safeMax maximum safe character value
*/","* Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe
   * range. If {@code safeMax < safeMin} then no characters are considered safe.
   *
   * <p>If a character has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param replacementMap a map of characters to their escaped representations
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,toEscaper,com.google.common.escape.CharEscaperBuilder:toEscaper(),124,126,"/**
 * Converts string builder to an escaper.
 * @return Escaper object based on character array
 */","* Convert this builder into a char escaper which is just a decorator around the underlying array
   * of replacement char[]s.
   *
   * @return an escaper that escapes based on the underlying array.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedUnicodeEscaper.java,<init>,"com.google.common.escape.ArrayBasedUnicodeEscaper:<init>(java.util.Map,int,int,java.lang.String)",72,78,"/**
* Constructs an escaper with specified replacements and safety range.
* @param replacementMap character to replacement string map
* @param safeMin minimum code point considered safe
* @param safeMax maximum code point considered safe
* @param unsafeReplacement default replacement for unsafe characters
*/","* Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified
   * safe range. If {@code safeMax < safeMin} then no code points are considered safe.
   *
   * <p>If a code point has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param replacementMap a map of characters to their escaped representations
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range
   * @param unsafeReplacement the default replacement for unsafe characters or null if no default
   *     replacement is required",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,checkedConnections,com.google.common.graph.StandardNetwork:checkedConnections(java.lang.Object),178,185,"/**
 * Retrieves network connections for a given node.
 * @param node the node to get connections for
 * @return NetworkConnections object associated with the node
 * @throws IllegalArgumentException if node is not in the graph
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,checkedConnections,com.google.common.graph.StandardValueGraph:checkedConnections(java.lang.Object),159,166,"/**
* Retrieves connections for a given node.
* @param node the node to get connections for
* @return GraphConnections object for the node
* @throws IllegalArgumentException if node does not exist in the graph
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnectingInternal,"com.google.common.graph.StandardValueGraph:hasEdgeConnectingInternal(java.lang.Object,java.lang.Object)",172,175,"/**
* Checks if there is an edge connecting two nodes.
* @param nodeU first node
* @param nodeV second node
* @return true if an edge exists, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefaultInternal,"com.google.common.graph.StandardValueGraph:edgeValueOrDefaultInternal(java.lang.Object,java.lang.Object,java.lang.Object)",177,186,"/**
 * Retrieves the edge value between two nodes or returns a default value.
 * @param nodeU source node
 * @param nodeV target node
 * @param defaultValue value to return if no edge exists
 * @return edge value or default value if edge is null
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,newTraversal,com.google.common.graph.Traverser$2:newTraversal(),345,345,"/**
 * Creates a new traversal instance.
 * @return Traversal object for node operations
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putBytesInternal,com.google.common.hash.AbstractStreamingHasher:putBytesInternal(java.nio.ByteBuffer),110,134,"/**
 * Processes bytes from ByteBuffer into internal buffer.
 * @param readBuffer source of bytes to be processed
 * @return Hasher instance for method chaining
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putByte,com.google.common.hash.AbstractStreamingHasher:putByte(byte),146,152,"/**
* Adds a byte to the hash.
* @param b byte to be added
* @return this Hasher instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putShort,com.google.common.hash.AbstractStreamingHasher:putShort(short),154,160,"/**
* Adds short value to hash.
* @param s short value to add
* @return this Hasher instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putChar,com.google.common.hash.AbstractStreamingHasher:putChar(char),162,168,"/**
 * Adds a character to the hash.
 * @param c character to add
 * @return this hasher instance
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putInt,com.google.common.hash.AbstractStreamingHasher:putInt(int),170,176,"/**
 * Adds an integer to the hash.
 * @param i integer value to add
 * @return this hasher instance
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putLong,com.google.common.hash.AbstractStreamingHasher:putLong(long),178,184,"/**
* Adds a long value to the hash.
* @param l the long value to add
* @return the current Hasher instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,fingerprint,"com.google.common.hash.FarmHashFingerprint64:fingerprint(byte[],int,int)",67,80,"/**
 * Computes a fingerprint for the given byte array slice.
 * @param bytes source byte array
 * @param offset starting index in the byte array
 * @param length number of bytes to include in the fingerprint
 * @return computed fingerprint as a long value
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,fingerprint,"com.google.common.hash.Fingerprint2011:fingerprint(byte[],int,int)",58,74,"/**
 * Generates a fingerprint for a byte array segment.
 * @param bytes the input byte array
 * @param offset starting index in the byte array
 * @param length number of bytes to include in the fingerprint
 * @return long fingerprint value
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromBytes,com.google.common.hash.HashCode:fromBytes(byte[]),237,240,"/**
* Creates a HashCode from a byte array.
* @param bytes input byte array
* @return HashCode object
*/","* Creates a {@code HashCode} from a byte array. The array is defensively copied to preserve the
   * immutability contract of {@code HashCode}. The array cannot be empty.
   *
   * @since 15.0 (since 12.0 in HashCodes)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromString,com.google.common.hash.HashCode:fromString(java.lang.String),335,350,"/**
* Converts a hexadecimal string to a HashCode.
* @param string hex-encoded input
* @return HashCode object
*/","* Creates a {@code HashCode} from a hexadecimal ({@code base 16}) encoded string. The string must
   * be at least 2 characters long, and contain only valid, lower-cased hexadecimal characters.
   *
   * <p>This method accepts the exact format generated by {@link #toString}. If you require more
   * lenient {@code base 16} decoding, please use {@link com.google.common.io.BaseEncoding#decode}
   * (and pass the result to {@link #fromBytes}).
   *
   * @since 15.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,combineOrdered,com.google.common.hash.Hashing:combineOrdered(java.lang.Iterable),698,712,"/**
* Combines multiple hash codes into one, maintaining order.
* @param hashCodes iterable of HashCode objects to combine
* @return combined HashCode object
*/","* Returns a hash code, having the same bit length as each of the input hash codes, that combines
   * the information of these hash codes in an ordered fashion. That is, whenever two equal hash
   * codes are produced by two calls to this method, it is <i>as likely as possible</i> that each
   * was computed from the <i>same</i> input hash codes in the <i>same</i> order.
   *
   * @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all
   *     have the same bit length",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,combineUnordered,com.google.common.hash.Hashing:combineUnordered(java.lang.Iterable),723,736,"/**
* Combines multiple unordered hash codes into one.
* @param hashCodes iterable of hash codes to combine
* @return combined HashCode object
*/","* Returns a hash code, having the same bit length as each of the input hash codes, that combines
   * the information of these hash codes in an unordered fashion. That is, whenever two equal hash
   * codes are produced by two calls to this method, it is <i>as likely as possible</i> that each
   * was computed from the <i>same</i> input hash codes in <i>some</i> order.
   *
   * @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all
   *     have the same bit length",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,hash,com.google.common.hash.MacHashFunction$MacHasher:hash(),134,139,"/**
* Computes and returns the hash code.
* Marks the operation as done.
* @return Computed HashCode object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,hash,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:hash(),161,168,"/**
 * Computes and returns the hash code.
 * Marks operation as done.
 * @return Computed hash code
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,makeHash,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:makeHash(),169,189,"/**
* Generates a hash code using two 64-bit integers.
* @return HashCode object representing the combined hash
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,makeHash,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:makeHash(),114,122,"/**
* Generates hash code based on CRC computation.
* @return HashCode object representing the computed hash
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,fmix,"com.google.common.hash.Murmur3_32HashFunction:fmix(int,int)",259,267,"/**
* Applies final mix function to hash value.
* @param h1 initial hash value
* @param length length of input data
* @return final HashCode after mixing
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/ChecksumHashFunction.java,hash,com.google.common.hash.ChecksumHashFunction$ChecksumHasher:hash(),91,104,"/**
* Generates hash code based on checksum value.
* @return HashCode object representing the checksum
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,makeHash,com.google.common.hash.SipHashFunction$SipHasher:makeHash(),145,155,"/**
* Generates a hash code using SipHash algorithm.
* @return HashCode object representing the computed hash
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacMd5,com.google.common.hash.Hashing:hmacMd5(byte[]),318,320,"/**
 * Creates an HMAC-MD5 hash function.
 * @param key secret key for HMAC
 * @return HashFunction instance using HmacMD5 algorithm
 */","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * MD5 (128 hash bits) hash function and a {@link SecretKeySpec} created from the given byte array
   * and the MD5 algorithm.
   *
   * <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other
   * future-proof algorithms <a
   * href=""https://datatracker.ietf.org/doc/html/rfc6151#section-2.3"">over {@code hmacMd5}</a>.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha1,com.google.common.hash.Hashing:hmacSha1(byte[]),342,344,"/**
* Creates an HMAC-SHA1 hash function using a given key.
* @param key secret key for HMAC calculation
* @return HashFunction configured with HmacSHA1 algorithm
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-1 (160 hash bits) hash function and a {@link SecretKeySpec} created from the given byte
   * array and the SHA-1 algorithm.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha256,com.google.common.hash.Hashing:hmacSha256(byte[]),366,368,"/**
* Creates an HMAC-SHA256 hash function using a given key.
* @param key secret key for HMAC computation
* @return HashFunction instance for HMAC-SHA256
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-256 (256 hash bits) hash function and a {@link SecretKeySpec} created from the given byte
   * array and the SHA-256 algorithm.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha512,com.google.common.hash.Hashing:hmacSha512(byte[]),390,392,"/**
* Creates an HMAC-SHA-512 hash function.
* @param key secret key for HMAC calculation
* @return HashFunction instance using HmacSHA512 algorithm
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-512 (512 hash bits) hash function and a {@link SecretKeySpec} created from the given byte
   * array and the SHA-512 algorithm.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,com.google.common.io.ByteSource$EmptyByteSource:<init>(),652,654,"/**
 * Creates an empty byte source.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,wrap,com.google.common.io.ByteSource:wrap(byte[]),427,429,"/**
 * Wraps a byte array into a ByteSource.
 * @param b the byte array to wrap
 * @return a ByteSource object containing the provided bytes
 */","* Returns a view of the given byte array as a {@link ByteSource}. To view only a specific range
   * in the array, use {@code ByteSource.wrap(b).slice(offset, length)}.
   *
   * <p>Note that the given byte array may be passed directly to methods on, for example, {@code
   * OutputStream} (when {@code copyTo(OutputStream)} is called on the resulting {@code
   * ByteSource}). This could allow a malicious {@code OutputStream} implementation to modify the
   * contents of the array, but provides better performance in the normal case.
   *
   * @since 15.0 (since 14.0 as {@code ByteStreams.asByteSource(byte[])}).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,newInstance,"com.google.common.io.BaseEncoding$Base16Encoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",992,995,"/**
* Creates a new Base16Encoding instance.
* @param alphabet character set for encoding
* @param paddingChar optional padding character (nullable)
* @return new Base16Encoding object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,newInstance,"com.google.common.io.BaseEncoding$Base64Encoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",1049,1052,"/**
* Creates a new instance of Base64Encoding.
* @param alphabet character set used for encoding
* @param paddingChar optional padding character
* @return new Base64Encoding object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,omitPadding,com.google.common.io.BaseEncoding$StandardBaseEncoding:omitPadding(),851,854,"/**
 * Omits padding character from encoding.
 * @return BaseEncoding instance without padding
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,withPadChar,com.google.common.io.BaseEncoding$StandardBaseEncoding:withPadChar(char),856,864,"/**
* Sets a new padding character for the encoding.
* @param padChar character to use as padding
* @return BaseEncoding instance with updated padding or original if unchanged
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$EmptyCharSource:<init>(),677,679,"/**
 * Constructs an empty character source.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,wrap,com.google.common.io.CharSource:wrap(java.lang.CharSequence),492,496,"/**
* Wraps a CharSequence in an appropriate CharSource.
* @param charSequence the sequence to wrap
* @return CharSource instance based on the input type
*/","* Returns a view of the given character sequence as a {@link CharSource}. The behavior of the
   * returned {@code CharSource} and any {@code Reader} instances created by it is unspecified if
   * the {@code charSequence} is mutated while it is being read, so don't do that.
   *
   * @since 15.0 (since 14.0 as {@code CharStreams.asCharSource(String)})",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,openStream,com.google.common.io.CharSource$AsByteSource:openStream(),524,527,"/**
* Opens an input stream from the character source.
* @return InputStream with specified charset encoding
* @throws IOException if an I/O error occurs
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,com.google.common.io.CharSink:writeLines(java.lang.Iterable),109,111,"/**
 * Writes multiple lines to output.
 * @param lines iterable of character sequences to write
 * @throws IOException if an I/O error occurs
 */","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the operating system's default line separator. This method is equivalent to {@code
   * writeLines(lines, System.getProperty(""line.separator""))}.
   *
   * @throws IOException if an I/O error occurs while writing to this sink",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,com.google.common.io.CharSink:writeLines(java.util.stream.Stream),132,134,"/**
 * Writes lines to output using platform-specific line separator.
 * @param lines stream of character sequences to be written
 */","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the operating system's default line separator. This method is equivalent to {@code
   * writeLines(lines, System.getProperty(""line.separator""))}.
   *
   * @throws IOException if an I/O error occurs while writing to this sink
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,write,com.google.common.io.FileBackedOutputStream:write(byte[]),207,210,"/**
 * Writes byte array to output stream.
 * @param b byte array to be written
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,read,"com.google.common.io.ReaderInputStream:read(byte[],int,int)",129,191,"/**
 * Reads bytes from the input stream into the buffer.
 * @param b destination byte array
 * @param off offset in the buffer to start storing bytes
 * @param len maximum number of bytes to read
 * @return number of bytes read, or -1 if end of stream
 * @throws IOException if an I/O error occurs
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openStream,com.google.common.io.ByteSource$ConcatenatedByteSource:openStream(),681,684,"/**
 * Opens an input stream from multiple sources.
 * @return InputStream combining all source streams
 * @throws IOException if opening any stream fails
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,skip,com.google.common.io.MultiInputStream:skip(long),107,120,"/**
 * Skips the specified number of bytes in the input stream.
 * @param n number of bytes to skip
 * @return actual number of bytes skipped
 * @throws IOException if an I/O error occurs
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,openStream,com.google.common.io.CharSource$ConcatenatedCharSource:openStream(),695,698,"/**
 * Opens a stream from multiple sources.
 * @return Reader combining all source streams
 * @throws IOException if an I/O error occurs
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$Partition:get(int),718,724,"/**
* Retrieves a sublist from the internal list based on the given index.
* @param index starting index for the sublist
* @return List<T> representing the requested sublist
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long,double,com.google.common.hash.BloomFilter$Strategy)",438,463,"/**
* Creates a Bloom filter with specified parameters.
* @param funnel defines how to hash the elements
* @param expectedInsertions expected number of insertions
* @param fpp false positive probability (0 < fpp < 1)
* @param strategy bloom filter strategy
* @return BloomFilter object configured with given parameters
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,readFrom,"com.google.common.hash.BloomFilter:readFrom(java.io.InputStream,com.google.common.hash.Funnel)",618,661,"/**
 * Reads a BloomFilter from an InputStream.
 * @param in InputStream containing the serialized BloomFilter
 * @param funnel Funnel for hashing items of type T
 * @return Deserialized BloomFilter object
 * @throws IOException if reading fails
 */","* Reads a byte stream, which was written by {@linkplain #writeTo(OutputStream)}, into a {@code
   * BloomFilter}.
   *
   * <p>The {@code Funnel} to be used is not encoded in the stream, so it must be provided here.
   * <b>Warning:</b> the funnel provided <b>must</b> behave identically to the one used to populate
   * the original Bloom filter!
   *
   * @throws IOException if the InputStream throws an {@code IOException}, or if its data does not
   *     appear to be a BloomFilter serialized using the {@linkplain #writeTo(OutputStream)} method.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,mean,com.google.common.math.DoubleMath:mean(java.lang.Iterable),488,493,"/**
 * Calculates the mean of numbers in an iterable.
 * @param values iterable containing numeric values
 * @return mean value as a double
 */","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of
   * {@code values}.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * @param values a nonempty series of values, which will be converted to {@code double} values
   *     (this may cause loss of precision)
   * @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value
   * @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite
   *     values.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,log2,"com.google.common.math.DoubleMath:log2(double,java.math.RoundingMode)",239,279,"/**
* Computes the base-2 logarithm of a positive finite double with specified rounding mode.
* @param x the input value, must be positive and finite
* @param mode the rounding mode to apply
* @return the rounded integer log base 2 of x
*/","* Returns the base 2 logarithm of a double value, rounded with the specified rounding mode to an
   * {@code int}.
   *
   * <p>Regardless of the rounding mode, this is faster than {@code (int) log2(x)}.
   *
   * @throws IllegalArgumentException if {@code x <= 0.0}, {@code x} is NaN, or {@code x} is
   *     infinite",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundIntermediate,"com.google.common.math.DoubleMath:roundIntermediate(double,java.math.RoundingMode)",53,111,"/**
 * Rounds a double value according to the specified rounding mode.
 * @param x the number to be rounded
 * @param mode the RoundingMode to apply
 * @return the rounded value
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,ensureTableCapacity,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:ensureTableCapacity(int),846,859,"/**
* Ensures the hash table has sufficient capacity.
* @param minCapacity minimum required capacity
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,hashFloodingDetected,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:hashFloodingDetected(java.lang.Object[]),889,925,"/**
* Detects hash flooding in a hash table.
* @param hashTable array representing the hash table
* @return true if hash flooding is detected, false otherwise
*/","* Checks the whole hash table for poor hash distribution. Takes O(n) in the worst case, O(n /
     * log n) on average.
     *
     * <p>The online hash flooding detecting in RegularSetBuilderImpl.add can detect e.g. many
     * exactly matching hash codes, which would cause construction to take O(n^2), but can't detect
     * e.g. hash codes adversarially designed to go into ascending table locations, which keeps
     * construction O(n) (as desired) but then can have O(n) queries later.
     *
     * <p>If this returns false, then no query can take more than O(log n).
     *
     * <p>Note that for a RegularImmutableSet with elements with truly random hash codes, contains
     * operations take expected O(1) time but with high probability take O(log n) for at least some
     * element. (https://en.wikipedia.org/wiki/Linear_probing#Analysis)
     *
     * <p>This method may return {@code true} even on truly random input, but {@code
     * ImmutableSetTest} tests that the probability of that is low.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,offer,com.google.common.collect.TopKSelector:offer(java.lang.Object),138,159,"/**
* Adds an element to the buffer if it meets criteria.
* @param elem element to add
*/","* Adds {@code elem} as a candidate for the top {@code k} elements. This operation takes amortized
   * O(1) time.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Alphabet:<init>(java.lang.String,char[])",445,447,"/**
 * Constructs an Alphabet with given name and character array.
 * @param name unique identifier for the alphabet
 * @param chars character array defining the alphabet
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,ignoreCase,com.google.common.io.BaseEncoding$Alphabet:ignoreCase(),494,517,"/**
* Returns a case-insensitive version of the alphabet.
* @return a new Alphabet object with case-insensitivity enabled
*/",Returns an equivalent {@code Alphabet} except it ignores case.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,growIfNeeded,com.google.common.collect.MinMaxPriorityQueue:growIfNeeded(),958,965,"/**
* Increases the capacity of the queue if size exceeds current capacity.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,least,"com.google.common.collect.TopKSelector:least(int,java.util.Comparator)",79,82,"/**
* Creates a selector for the smallest k elements.
* @param k number of top elements to select
* @param comparator comparison logic for elements
* @return TopKSelector configured for least elements
*/","* Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it,
   * relative to the specified comparator, and returns them via {@link #topK} in ascending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,greatest,"com.google.common.collect.TopKSelector:greatest(int,java.util.Comparator)",101,104,"/**
* Creates a selector for the top K greatest elements.
* @param k number of top elements to select
* @param comparator comparator to determine element order
* @return TopKSelector configured to find greatest elements
*/","* Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it,
   * relative to the specified comparator, and returns them via {@link #topK} in descending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,inverse,com.google.common.math.LinearTransformation$VerticalLinearTransformation:inverse(),262,266,"/**
* Returns the inverse of this linear transformation.
* Caches the result for efficiency.
* @return Inverse LinearTransformation object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,and,"com.google.common.math.LinearTransformation$LinearTransformationBuilder:and(double,double)",82,90,"/**
 * Computes the linear transformation passing through two points.
 * @param x2 second point's x-coordinate
 * @param y2 second point's y-coordinate
 * @return LinearTransformation object representing the line
 */","* Finish building an instance which also maps {@code x = x2} to {@code y = y2}. These values
     * must not both be identical to the values given in the first mapping. If only the {@code x}
     * values are identical, the transformation is vertical. If only the {@code y} values are
     * identical, the transformation is horizontal (i.e. the slope is zero).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,leastSquaresFit,com.google.common.math.PairedStats:leastSquaresFit(),181,198,"/**
 * Computes the least squares linear fit for data points.
 * @return LinearTransformation representing the best fit line or vertical/horizontal line if applicable
 */","* Returns a linear transformation giving the best fit to the data according to <a
   * href=""http://mathworld.wolfram.com/LeastSquaresFitting.html"">Ordinary Least Squares linear
   * regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and
   * either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is
   * guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y}
   * data, and vertical if there is variance in the {@code y} data but not the {@code x} data.
   *
   * <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This
   * error is defined as the square root of the mean of the squares of the differences between the
   * actual {@code y} values of the data and the values predicted by the fit for the {@code x}
   * values (i.e. it is the square root of the mean of the squares of the vertical distances between
   * the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 -
   * R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's
   * correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}).
   *
   * <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a
   * fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit
   * does not normally minimize that error: to do that, you should swap the roles of {@code x} and
   * {@code y}.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link
   * LinearTransformation#forNaN()}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     both the {@code x} and {@code y} dataset must have zero population variance",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,leastSquaresFit,com.google.common.math.PairedStatsAccumulator:leastSquaresFit(),214,231,"/**
* Computes the least squares linear fit for data points.
* @return LinearTransformation representing the best fit line
*/","* Returns a linear transformation giving the best fit to the data according to <a
   * href=""http://mathworld.wolfram.com/LeastSquaresFitting.html"">Ordinary Least Squares linear
   * regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and
   * either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is
   * guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y}
   * data, and vertical if there is variance in the {@code y} data but not the {@code x} data.
   *
   * <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This
   * error is defined as the square root of the mean of the squares of the differences between the
   * actual {@code y} values of the data and the values predicted by the fit for the {@code x}
   * values (i.e. it is the square root of the mean of the squares of the vertical distances between
   * the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 -
   * R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's
   * correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}).
   *
   * <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a
   * fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit
   * does not normally minimize that error: to do that, you should swap the roles of {@code x} and
   * {@code y}.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link
   * LinearTransformation#forNaN()}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     both the {@code x} and {@code y} dataset have zero population variance",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,inverse,com.google.common.math.LinearTransformation$RegularLinearTransformation:inverse(),206,210,"/**
* Returns the inverse of this transformation.
* @return LinearTransformation object representing the inverse
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,isPrime,com.google.common.math.LongMath:isPrime(long),984,1036,"/**
* Checks if a number is prime.
* @param n the number to check
* @return true if n is prime, false otherwise
*/","* Returns {@code true} if {@code n} is a <a
   * href=""http://mathworld.wolfram.com/PrimeNumber.html"">prime number</a>: an integer <i>greater
   * than one</i> that cannot be factored into a product of <i>smaller</i> positive integers.
   * Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be
   * factored into smaller positive integers).
   *
   * <p>To test larger numbers, use {@link BigInteger#isProbablePrime}.
   *
   * @throws IllegalArgumentException if {@code n} is negative
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,log10,"com.google.common.math.BigIntegerMath:log10(java.math.BigInteger,java.math.RoundingMode)",141,206,"/**
* Computes the base-10 logarithm of a BigInteger with specified rounding mode.
* @param x the BigInteger to compute the log for, must be positive
* @param mode the RoundingMode to apply
* @return the rounded base-10 logarithm of x
*/","* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of ten",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,binomial,"com.google.common.math.LongMath:binomial(int,int)",791,849,"/**
 * Computes the binomial coefficient ""n choose k"".
 * @param n total number of items
 * @param k number of items to choose
 * @return binomial coefficient or Long.MAX_VALUE if calculation overflows
 */","* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
   * {@code k}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}.
   *
   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,toString,com.google.common.math.PairedStats:toString(),240,254,"/**
 * Returns a string representation of the object.
 * @return formatted string with xStats, yStats, and populationCovariance if count > 0
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,meanOf,com.google.common.math.Stats:meanOf(java.lang.Iterable),474,476,"/**
 * Calculates the mean of numbers in an iterable.
 * @param values iterable collection of numbers
 * @return mean value as a double
 */","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>The definition of the mean is the same as {@link Stats#mean}.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)
   * @throws IllegalArgumentException if the dataset is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,add,"com.google.common.math.PairedStatsAccumulator:add(double,double)",46,67,"/**
* Adds values to calculate statistical means and product of differences.
* @param x first value
* @param y second value
*/",Adds the given pair of values to the dataset.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.lang.Iterable),84,88,"/**
 * Adds all numeric values from an iterable to the collection.
 * @param values iterable containing numbers to be added
 */","* Adds the given values to the dataset.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.Iterator),96,100,"/**
 * Adds all elements from an iterator to the collection.
 * @param values iterator of numbers to be added
 */","* Adds the given values to the dataset.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(com.google.common.math.Stats),171,176,"/**
 * Adds all statistics from another Stats object.
 * @param values the Stats object to add
 */","* Adds the given statistics to the dataset, as if the individual values used to compute the
   * statistics had been added directly.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(com.google.common.math.StatsAccumulator),184,189,"/**
 * Merges statistics from another accumulator.
 * @param values StatsAccumulator containing data to merge
 */","* Adds the given statistics to the dataset, as if the individual values used to compute the
   * statistics had been added directly.
   *
   * @since 28.2",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,selectInPlace,"com.google.common.math.Quantiles:selectInPlace(int,double[],int,int)",537,565,"/**
* Selects the k-th smallest element in a subarray using quickselect.
* @param required index of the element to select (0-based)
* @param array the array to search within
* @param from starting index of the subarray
* @param to ending index of the subarray
*/","* Performs an in-place selection to find the element which would appear at a given index in a
   * dataset if it were sorted. The following preconditions should hold:
   *
   * <ul>
   *   <li>{@code required}, {@code from}, and {@code to} should all be indexes into {@code array};
   *   <li>{@code required} should be in the range [{@code from}, {@code to}];
   *   <li>all the values with indexes in the range [0, {@code from}) should be less than or equal
   *       to all the values with indexes in the range [{@code from}, {@code to}];
   *   <li>all the values with indexes in the range ({@code to}, {@code array.length - 1}] should be
   *       greater than or equal to all the values with indexes in the range [{@code from}, {@code
   *       to}].
   * </ul>
   *
   * This method will reorder the values with indexes in the range [{@code from}, {@code to}] such
   * that all the values with indexes in the range [{@code from}, {@code required}) are less than or
   * equal to the value with index {@code required}, and all the values with indexes in the range
   * ({@code required}, {@code to}] are greater than or equal to that value. Therefore, the value at
   * {@code required} is the value which would appear at that index in the sorted dataset.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.util.stream.DoubleStream),279,288,"/**
 * Adds all elements from the given DoubleStream.
 * @param stream the DoubleStream to add elements from
 * @return this Builder instance for method chaining
 */","* Appends all values from {@code stream}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.
     *
     * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.lang.Iterable),249,258,"/**
 * Adds all double values from an iterable.
 * @param values iterable containing double values to add
 * @return the builder instance
 */","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,writeReplace,com.google.common.primitives.ImmutableDoubleArray:writeReplace(),639,641,"/**
 * Returns a trimmed version of this object.
 * @return Trimmed object instance
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,contains,com.google.common.primitives.ImmutableDoubleArray$AsList:contains(java.lang.Object),504,507,"/**
 * Checks if the list contains the specified element.
 * @param target element to search for
 * @return true if the element is present, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.util.stream.IntStream),276,285,"/**
 * Adds all integers from the given stream.
 * @param stream source of integers to add
 * @return this Builder instance for chaining
 */","* Appends all values from {@code stream}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.
     *
     * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.lang.Iterable),246,255,"/**
* Adds all integers from an iterable to the builder.
* @param values iterable of integer values
* @return this Builder instance
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,writeReplace,com.google.common.primitives.ImmutableIntArray:writeReplace(),629,631,"/**
 * Returns a trimmed version of this string.
 * @return Trimmed string representation
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.util.stream.LongStream),278,287,"/**
* Adds all elements from a LongStream to the builder.
* @param stream source of long values
* @return this Builder instance for method chaining
*/","* Appends all values from {@code stream}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.
     *
     * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,readObject,com.google.common.util.concurrent.AtomicDoubleArray:readObject(java.io.ObjectInputStream),317,326,"/**
* Deserializes the object from an input stream.
* @param s ObjectInputStream to read from
* @throws IOException if I/O error occurs
* @throws ClassNotFoundException if class not found during deserialization
*/","Reconstitutes the instance from a stream (that is, deserializes it).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.lang.Iterable),248,257,"/**
* Adds all Long values from an Iterable to the builder.
* @param values iterable containing Long elements
* @return this Builder instance
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,writeReplace,com.google.common.primitives.ImmutableLongArray:writeReplace(),631,633,"/**
* Returns a trimmed version of this object.
* @return Trimmed object instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,tryParse,com.google.common.primitives.Ints:tryParse(java.lang.String),816,818,"/**
 * Parses a string to an integer.
 * @param string the string to parse
 * @return parsed integer or null if parsing fails
 */","* Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'}
   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of an integer value
   * @return the integer value represented by {@code string}, or {@code null} if {@code string} has
   *     a length of zero or cannot be parsed as an integer value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,com.google.common.primitives.UnsignedInteger:valueOf(java.lang.String),105,107,"/**
 * Parses an unsigned integer from a string.
 * @param string the string to parse
 * @return UnsignedInteger object representing the parsed value
 */","* Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as
   * an unsigned {@code int} value.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}
   *     value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,dividedBy,com.google.common.primitives.UnsignedLong:dividedBy(com.google.common.primitives.UnsignedLong),160,162,"/**
* Divides this unsigned long by another.
* @param val divisor as UnsignedLong
* @return quotient as UnsignedLong
*/","* Returns the result of dividing this by {@code val}.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,toString,"com.google.common.primitives.UnsignedLongs:toString(long,int)",459,502,"/**
 * Converts a long integer to a string representation in the specified radix.
 * @param x the number to convert
 * @param radix the base to use for conversion (must be between Character.MIN_RADIX and Character.MAX_RADIX)
 * @return the string representation of the number in the given radix
 */","* Returns a string representation of {@code x} for the given radix, where {@code x} is treated as
   * unsigned.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long, int)} instead.
   *
   * @param x the value to convert to a string.
   * @param radix the radix to use while working with {@code x}
   * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}
   *     and {@link Character#MAX_RADIX}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,mulMod,"com.google.common.math.LongMath$MillerRabinTester$2:mulMod(long,long,long)",1166,1166,"/**
* Multiplies two numbers under modulo.
* @param a first number
* @param b second number
* @param m modulo value
* @return (a * b) % m
*/",Returns a * b mod m.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,squareMod,"com.google.common.math.LongMath$MillerRabinTester$2:squareMod(long,long)",1169,1169,"/**
 * Computes (a^2) % m.
 * @param a base number
 * @param m modulus
 * @return result of (a squared) modulo m
 */",Returns a^2 mod m.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,mod,com.google.common.primitives.UnsignedLong:mod(com.google.common.primitives.UnsignedLong),169,171,"/**
* Computes modulo of this number with another.
* @param val divisor as UnsignedLong
* @return remainder as UnsignedLong
*/","* Returns this modulo {@code val}.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,com.google.common.primitives.UnsignedLong:valueOf(java.lang.String),107,110,"/**
 * Parses a string to an UnsignedLong.
 * @param string the string representation of the number
 * @return UnsignedLong object representing the parsed value
 */","* Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an
   * unsigned {@code long} value.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code long}
   *     value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,standardEquals,com.google.common.collect.ForwardingMapEntry:standardEquals(java.lang.Object),96,103,"/**
* Checks equality with another Entry.
* @param object the object to compare
* @return true if both key and value match, false otherwise
*/","* A sensible definition of {@link #equals(Object)} in terms of {@link #getKey()} and {@link
   * #getValue()}. If you override either of these methods, you may wish to override {@link
   * #equals(Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,standardHashCode,com.google.common.collect.ForwardingMapEntry:standardHashCode(),112,116,"/**
* Computes hash code based on key and value.
* @return combined hash code using XOR operation
*/","* A sensible definition of {@link #hashCode()} in terms of {@link #getKey()} and {@link
   * #getValue()}. If you override either of these methods, you may wish to override {@link
   * #hashCode()} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,standardToString,com.google.common.collect.ForwardingMapEntry:standardToString(),125,127,"/**
 * Generates a string representation of the key-value pair.
 * @return formatted string in ""key=value"" format
 */","* A sensible definition of {@link #toString} in terms of {@link #getKey} and {@link #getValue}.
   * If you override either of these methods, you may wish to override {@link #equals} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1:setValue(java.lang.Object),72,77,"/**
* Sets the value in the underlying map.
* @param value the new value to set
* @return the previous value associated with the key, or null if none
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.MutableClassToInstanceMap$1:setValue(java.lang.Object),72,77,"/**
* Sets the value in the map.
* @param value new value to be set
* @return previous value associated with the key
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.StandardTable$Row$2:setValue(java.lang.Object),72,77,"/**
* Sets the value of this element.
* @param value new value to be set
* @return previous value or null if not present
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,equals,com.google.common.reflect.Invokable:equals(java.lang.Object),210,217,"/**
* Checks equality based on owner type and member.
* @param obj object to compare with
* @return true if both owner type and member are equal, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isArray,com.google.common.reflect.TypeToken:isArray(),526,528,"/**
 * Checks if this Class represents an array.
 * @return true if it's an array type, false otherwise
 */","* Returns true if this type is known to be an array type, such as {@code int[]}, {@code T[]},
   * {@code <? extends Map<String, Integer>[]>} etc.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getArraySupertype,com.google.common.reflect.TypeToken:getArraySupertype(java.lang.Class),1226,1249,"/**
* Retrieves the supertype for an array type.
* @param supertype the superclass or interface to check against
* @return TypeToken representing the array's supertype
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:get(),92,97,"/**
* Retrieves the result of the computation.
* @throws InterruptedException if interrupted while waiting
* @throws ExecutionException if computation threw an exception
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,listeningDecorator,com.google.common.util.concurrent.MoreExecutors:listeningDecorator(java.util.concurrent.ExecutorService),461,468,"/**
* Wraps ExecutorService with ListeningExecutorService.
* @param delegate original ExecutorService to be wrapped
* @return ListeningExecutorService instance
*/","* Creates an {@link ExecutorService} whose {@code submit} and {@code invokeAll} methods submit
   * {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as well
   * as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code
   * delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that
   * the returned {@code ListeningExecutorService} never calls the delegate's {@code submit}, {@code
   * invokeAll}, and {@code invokeAny} methods, so any special handling of tasks must be implemented
   * in the delegate's {@code execute} method or by wrapping the returned {@code
   * ListeningExecutorService}.
   *
   * <p>If the delegate executor was already an instance of {@code ListeningExecutorService}, it is
   * returned untouched, and the rest of this documentation does not apply.
   *
   * @since 10.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,listeningDecorator,com.google.common.util.concurrent.MoreExecutors:listeningDecorator(java.util.concurrent.ScheduledExecutorService),486,492,"/**
 * Decorates a ScheduledExecutorService with Listening capabilities.
 * @param delegate the original ScheduledExecutorService to be decorated
 * @return a ListeningScheduledExecutorService
 */","* Creates a {@link ScheduledExecutorService} whose {@code submit} and {@code invokeAll} methods
   * submit {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as
   * well as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code
   * delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that
   * the returned {@code ListeningScheduledExecutorService} never calls the delegate's {@code
   * submit}, {@code invokeAll}, and {@code invokeAny} methods, so any special handling of tasks
   * must be implemented in the delegate's {@code execute} method or by wrapping the returned {@code
   * ListeningScheduledExecutorService}.
   *
   * <p>If the delegate executor was already an instance of {@code
   * ListeningScheduledExecutorService}, it is returned untouched, and the rest of this
   * documentation does not apply.
   *
   * @since 10.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,invokeAnyImpl,"com.google.common.util.concurrent.MoreExecutors:invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long,java.util.concurrent.TimeUnit)",675,759,"/**
* Invokes any of the given tasks, returning the result of one that completes.
* @param executorService the executor service to use
* @param tasks the collection of tasks to execute
* @param timed true if a timeout is specified
* @param timeout the maximum time to wait for a task to complete
* @param unit the time unit of the timeout parameter
* @return the result of one of the completed tasks
* @throws InterruptedException if interrupted while waiting
* @throws ExecutionException if no task successfully completes
* @throws TimeoutException if timed and no task completes within the timeout
*/","* An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService}
   * implementations.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,<init>,"com.google.common.util.concurrent.CollectionFuture$ListFuture:<init>(com.google.common.collect.ImmutableCollection,boolean)",87,92,"/**
* Initializes a future that waits on multiple listenable futures.
* @param futures collection of futures to wait on
* @param allMustSucceed if true, failure of any future fails the whole
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,callAsync,"com.google.common.util.concurrent.Futures$FutureCombiner:callAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)",719,722,"/**
 * Executes a callable asynchronously.
 * @param combiner the callable to execute
 * @param executor the executor to run the callable
 * @return ListenableFuture representing the asynchronous computation result
 */","* Creates the {@link ListenableFuture} which will return the result of calling {@link
     * AsyncCallable#call} in {@code combiner} when all futures complete, using the specified {@code
     * executor}.
     *
     * <p>If the combiner throws a {@code CancellationException}, the returned future will be
     * cancelled.
     *
     * <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code
     * ExecutionException} will be extracted and returned as the cause of the new {@code
     * ExecutionException} that gets thrown by the returned combined future.
     *
     * <p>Canceling this future will attempt to cancel all the component futures.
     *
     * @return a future whose result is based on {@code combiner} (or based on the input futures
     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code
     *     FutureCombiner}). Even if you don't care about the value of the future, you should
     *     typically check whether it failed: See <a
     *     href=""https://errorprone.info/bugpattern/FutureReturnValueIgnored"">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,call,"com.google.common.util.concurrent.Futures$FutureCombiner:call(java.util.concurrent.Callable,java.util.concurrent.Executor)",744,747,"/**
* Combines results from multiple futures using a specified callable.
* @param combiner function to combine results
* @param executor to run the combiner
* @return ListenableFuture with combined result
*/","* Creates the {@link ListenableFuture} which will return the result of calling {@link
     * Callable#call} in {@code combiner} when all futures complete, using the specified {@code
     * executor}.
     *
     * <p>If the combiner throws a {@code CancellationException}, the returned future will be
     * cancelled.
     *
     * <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code
     * ExecutionException} will be extracted and returned as the cause of the new {@code
     * ExecutionException} that gets thrown by the returned combined future.
     *
     * <p>Canceling this future will attempt to cancel all the component futures.
     *
     * @return a future whose result is based on {@code combiner} (or based on the input futures
     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code
     *     FutureCombiner}). Even if you don't care about the value of the future, you should
     *     typically check whether it failed: See <a
     *     href=""https://errorprone.info/bugpattern/FutureReturnValueIgnored"">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,processCompleted,com.google.common.util.concurrent.AggregateFuture:processCompleted(com.google.common.collect.ImmutableCollection),302,324,"/**
* Processes completed futures, collects values, and handles exceptions.
* @param futuresIfNeedToCollectAtCompletion collection of futures to process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,checkAcquiredLock,"com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)",623,675,"/**
 * Checks if acquiring a lock is valid according to policy and order.
 * @param policy the locking policy to apply
 * @param acquiredLock the lock node that has been acquired
 */","* Checks the acquisition-ordering between {@code this}, which is about to be acquired, and the
     * specified {@code acquiredLock}.
     *
     * <p>When this method returns, the {@code acquiredLock} should be in either the {@code
     * preAcquireLocks} map, for the case in which it is safe to acquire {@code this} after the
     * {@code acquiredLock}, or in the {@code disallowedPriorLocks} map, in which case it is not
     * safe.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,reload,"com.google.common.cache.CacheLoader$1:reload(java.lang.Object,java.lang.Object)",96,101,"/**
* Reloads value by key if old value matches.
* @param key unique identifier for the value
* @param oldValue current value to be replaced
* @return ListenableFuture with new loaded value
*/","* Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This
   * method is called when an existing cache entry is refreshed by {@link
   * CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}.
   *
   * <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be
   * overridden with an asynchronous implementation when using {@link
   * CacheBuilder#refreshAfterWrite}.
   *
   * <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>.
   *
   * @param key the non-null key whose value should be loaded
   * @param oldValue the non-null old value corresponding to {@code key}
   * @return the future new value associated with {@code key}; <b>must not be null, must not return
   *     null</b>
   * @throws Exception if unable to reload the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,com.google.common.util.concurrent.ClosingFuture:<init>(com.google.common.util.concurrent.ListenableFuture),631,633,"/**
 * Initializes a ClosingFuture with a given ListenableFuture and an empty CloseableList.
 * @param future the ListenableFuture to be wrapped
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,offer,com.google.common.collect.ForwardingQueue:offer(java.lang.Object),57,61,"/**
* Adds an element to the collection.
* @param o element to add
* @return true if the element was added, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,poll,com.google.common.collect.ForwardingQueue:poll(),63,67,"/**
 * Retrieves and removes the head of the queue.
 * @return the head of the queue, or null if it is empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,remove,com.google.common.collect.ForwardingQueue:remove(),69,74,"/**
 * Removes and returns the head of this queue.
 * @return the head of this queue, or null if this queue is empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,peek,com.google.common.collect.ForwardingQueue:peek(),76,79,"/**
 * Retrieves the top element without removing it.
 * @return the top element of the stack or null if empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,element,com.google.common.collect.ForwardingQueue:element(),81,85,"/**
 * Retrieves the first element of the collection.
 * @return the first element, or null if the collection is empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,cancel,com.google.common.util.concurrent.ForwardingFuture:cancel(boolean),46,50,"/**
* Attempts to cancel the task execution.
* @param mayInterruptIfRunning true if the thread executing this task should be interrupted; otherwise, waiting tasks will run to completion
* @return false if the task could not be cancelled, typically because it has already completed normally; true otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,isCancelled,com.google.common.util.concurrent.ForwardingFuture:isCancelled(),52,55,"/**
 * Checks if the operation is cancelled.
 * @return true if cancelled, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,isDone,com.google.common.util.concurrent.ForwardingFuture:isDone(),57,60,"/**
 * Checks if the task is completed.
 * @return true if task is done, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,get,com.google.common.util.concurrent.ForwardingFuture:get(),62,67,"/**
* Retrieves the result of the computation represented by this Future.
* Throws exceptions if interrupted or computation fails.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,get,"com.google.common.util.concurrent.ForwardingFuture:get(long,java.util.concurrent.TimeUnit)",69,75,"/**
* Retrieves value with a specified timeout.
* @param timeout time to wait before timing out
* @param unit unit of time for the timeout
* @return value if available within timeout
* @throws InterruptedException if interrupted while waiting
* @throws ExecutionException if computation threw an exception
* @throws TimeoutException if timed out
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,statusFuture,com.google.common.util.concurrent.ClosingFuture:statusFuture(),651,653,"/**
 * Returns a future that completes with null without propagating cancellation.
 * @return ListenableFuture that resolves to null
 */","* Returns a future that finishes when this step does. Calling {@code get()} on the returned
   * future returns {@code null} if the step is successful or throws the same exception that would
   * be thrown by calling {@code finishToFuture().get()} if this were the last step. Calling {@code
   * cancel()} on the returned future has no effect on the {@code ClosingFuture} pipeline.
   *
   * <p>{@code statusFuture} differs from most methods on {@code ClosingFuture}: You can make calls
   * to {@code statusFuture} <i>in addition to</i> the call you make to {@link #finishToFuture()} or
   * a derivation method <i>on the same instance</i>. This is important because calling {@code
   * statusFuture} alone does not provide a way to close the pipeline.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,submitAsync,"com.google.common.util.concurrent.ExecutionSequencer:submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)",175,264,"/**
 * Submits an asynchronous callable for execution with a given executor.
 * @param callable the task to execute asynchronously
 * @param executor the executor to run the task
 * @return ListenableFuture representing the result of the callable
 */","* Enqueues a task to run when the previous task (if any) completes.
   *
   * <p>Cancellation does not propagate from the output future to the future returned from {@code
   * callable} or a callable that has begun to execute, but if the output future is cancelled before
   * {@link AsyncCallable#call()} is invoked, {@link AsyncCallable#call()} will not be invoked.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getChecked,"com.google.common.util.concurrent.FuturesGetChecked:getChecked(com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator,java.util.concurrent.Future,java.lang.Class)",52,67,"/**
 * Retrieves result from Future, throwing specified checked exception on error.
 * @param validator validator for exception class
 * @param future the Future to get the result from
 * @param exceptionClass the checked exception class to throw
 * @return result of the Future or null if not applicable
 * @throws X the specified checked exception
 */","Implementation of {@link Futures#getChecked(Future, Class)}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getChecked,"com.google.common.util.concurrent.FuturesGetChecked:getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit)",70,87,"/**
* Retrieves result from Future with timeout, converting exceptions.
* @param future task to wait for
* @param exceptionClass class of exception to throw on failure
* @param timeout time to wait before timing out
* @param unit unit of timeout
* @return result of the future or null if checked type is nullable
* @throws X if future completes exceptionally or times out
*/","Implementation of {@link Futures#getChecked(Future, Class, long, TimeUnit)}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,checkExceptionClassValidity,com.google.common.util.concurrent.FuturesGetChecked:checkExceptionClassValidity(java.lang.Class),296,307,"/**
* Validates the given exception class for use in Futures.getChecked.
* @param exceptionClass the exception class to validate
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueStartingEvent,com.google.common.util.concurrent.AbstractService:enqueueStartingEvent(),530,532,"/**
 * Adds a starting event to the listeners queue.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueRunningEvent,com.google.common.util.concurrent.AbstractService:enqueueRunningEvent(),534,536,"/**
 * Adds a running event to the queue.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueStoppingEvent,com.google.common.util.concurrent.AbstractService:enqueueStoppingEvent(com.google.common.util.concurrent.Service$State),538,546,"/**
 * Enqueues a stopping event based on the current state.
 * @param from the current state of the system
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueTerminatedEvent,com.google.common.util.concurrent.AbstractService:enqueueTerminatedEvent(com.google.common.util.concurrent.Service$State),548,566,"/**
* Enqueues a termination event based on the current state.
* @param from the current state of the process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueFailedEvent,"com.google.common.util.concurrent.AbstractService:enqueueFailedEvent(com.google.common.util.concurrent.Service$State,java.lang.Throwable)",568,582,"/**
 * Enqueues a failed event for listeners.
 * @param from current state before failure
 * @param cause exception that caused the failure
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,enqueueStoppedEvent,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueStoppedEvent(),728,730,"/**
 * Enqueues a stopped event to notify listeners.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,enqueueHealthyEvent,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueHealthyEvent(),732,734,"/**
 * Adds HEALTHY_EVENT to the event queue.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,enqueueFailedEvent,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueFailedEvent(com.google.common.util.concurrent.Service),736,749,"/**
 * Enqueues a failure event for a given service.
 * @param service the service that failed
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,leave,com.google.common.util.concurrent.Monitor:leave(),929,939,"/**
* Releases a lock and signals the next waiter if only one hold is left.
*/",Leaves this monitor. May be called only by a thread currently occupying this monitor.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,await,"com.google.common.util.concurrent.Monitor:await(com.google.common.util.concurrent.Monitor$Guard,boolean)",1178,1191,"/**
 * Waits for a condition to be satisfied.
 * @param guard the condition to wait on
 * @param signalBeforeWaiting whether to signal next waiter before waiting
 * @throws InterruptedException if interrupted while waiting
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,awaitUninterruptibly,"com.google.common.util.concurrent.Monitor:awaitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean)",1193,1206,"/**
 * Waits uninterruptibly for a condition to be satisfied.
 * @param guard object managing the waiting condition
 * @param signalBeforeWaiting if true, signals next waiter before waiting
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,awaitNanos,"com.google.common.util.concurrent.Monitor:awaitNanos(com.google.common.util.concurrent.Monitor$Guard,long,boolean)",1209,1233,"/**
* Waits for a condition with timeout, optionally signaling before waiting.
* @param guard the condition to wait on
* @param nanos maximum time to wait in nanoseconds
* @param signalBeforeWaiting whether to signal other waiters first
* @return true if condition is satisfied, false if timeout occurs
*/",Caller should check before calling that guard is not satisfied.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,withTimeout,"com.google.common.util.concurrent.Futures:withTimeout(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",403,415,"/**
* Wraps a future with a timeout.
* @param delegate the original ListenableFuture
* @param time duration of the timeout
* @param unit TimeUnit for the timeout
* @param scheduledExecutor ScheduledExecutorService to handle timeouts
* @return ListenableFuture that times out after specified duration
*/","* Returns a future that delegates to another but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires.
   *
   * <p>The delegate future is interrupted and cancelled if it times out.
   *
   * @param delegate The future to delegate to.
   * @param time when to time out the future
   * @param unit the time unit of the time parameter
   * @param scheduledExecutor The executor service to enforce the timeout.
   * @since 19.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,scheduleAsync,"com.google.common.util.concurrent.Futures:scheduleAsync(com.google.common.util.concurrent.AsyncCallable,java.time.Duration,java.util.concurrent.ScheduledExecutorService)",229,235,"/**
* Schedules an asynchronous task with a specified delay.
* @param callable the task to execute asynchronously
* @param delay the delay before execution
* @param executorService the executor service to use for scheduling
* @return ListenableFuture representing the scheduled task
*/","* Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,getIfPresent,"com.google.common.base.Enums:getIfPresent(java.lang.Class,java.lang.String)",67,71,"/**
* Retrieves an enum constant if present.
* @param enumClass the Class object of the enum type
* @param value the string representation of the enum constant
* @return Optional containing the enum constant or empty if not found
*/","* Returns an optional enum constant for the given type, using {@link Enum#valueOf}. If the
   * constant does not exist, {@link Optional#absent} is returned. A common use case is for parsing
   * user input or falling back to a default enum constant. For example, {@code
   * Enums.getIfPresent(Country.class, countryInput).or(Country.DEFAULT);}
   *
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,tryFind,"com.google.common.collect.Iterables:tryFind(java.lang.Iterable,com.google.common.base.Predicate)",699,701,"/**
 * Finds an element in the iterable matching the predicate.
 * @param iterable collection to search through
 * @param predicate condition to match elements
 * @return Optional containing the first matching element or empty if none found
 */","* Returns an {@link Optional} containing the first element in {@code iterable} that satisfies the
   * given predicate, if such an element exists.
   *
   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}
   * is matched in {@code iterable}, a NullPointerException will be thrown.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}
   *
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,isEmpty,com.google.common.collect.Collections2$FilteredCollection:isEmpty(),169,172,"/**
 * Checks if no elements match the given predicate.
 * @return true if none of the elements satisfy the predicate, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,anyMatch,com.google.common.collect.FluentIterable:anyMatch(com.google.common.base.Predicate),441,443,"/**
 * Checks if any element matches the given predicate.
 * @param predicate condition to test elements against
 * @return true if any element matches, false otherwise
 */","* Returns {@code true} if any element in this fluent iterable satisfies the predicate.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch} (same).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,isEmpty,com.google.common.collect.Maps$FilteredEntryNavigableMap:isEmpty(),3285,3288,"/**
 * Checks if no entries match the predicate.
 * @return true if no entries satisfy the condition, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,precomputedPositive,"com.google.common.base.CharMatcher:precomputedPositive(int,java.util.BitSet,java.lang.String)",447,464,"/**
 * Creates a CharMatcher based on a precomputed BitSet.
 * @param totalCharacters number of characters in the set
 * @param table BitSet representing character presence
 * @param description matcher description
 * @return CharMatcher instance based on input parameters
 */",* Helper method for {@link #precomputedInternal} that doesn't test if the negation is cheaper.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfPossible,"com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable,java.lang.Class,java.lang.Class)",187,196,"/**
 * Propagates throwable if it's an instance of declared types.
 * @param throwable the throwable to check and possibly throw
 * @param declaredType1 first declared exception type
 * @param declaredType2 second declared exception type
 * @throws X1 if throwable is an instance of declaredType1
 * @throws X2 if throwable is an instance of declaredType2
 */","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
   * RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}.
   *
   * @param throwable the Throwable to possibly propagate
   * @param declaredType1 any checked exception type declared by the calling method
   * @param declaredType2 any other checked exception type declared by the calling method
   * @deprecated Use a combination of two calls to {@link #throwIfInstanceOf} and one call to {@link
   *     #throwIfUnchecked}, which togther provide the same behavior except that they reject {@code
   *     null}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,rethrow,com.google.common.io.Closer:rethrow(java.lang.Throwable),130,136,"/**
* Rethrows a Throwable as a RuntimeException.
* @param e the Throwable to rethrow
*/","* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code
   * IOException}, {@code RuntimeException} or {@code Error}. Otherwise, it will be rethrown wrapped
   * in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception
   * types your try block can throw when calling an overload of this method so as to avoid losing
   * the original exception type.
   *
   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e);}
   * to ensure the compiler knows that it will throw.
   *
   * @return this method does not return; it always throws
   * @throws IOException when the given throwable is an IOException",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,rethrow,"com.google.common.io.Closer:rethrow(java.lang.Throwable,java.lang.Class)",152,160,"/**
* Rethrows a throwable as a runtime exception.
* @param e the throwable to rethrow
* @param declaredType the specific exception type to check against
* @throws IOException if the throwable is an IO exception
* @throws X if the throwable matches the declared type
*/","* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code
   * IOException}, {@code RuntimeException}, {@code Error} or a checked exception of the given type.
   * Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to
   * declare all of the checked exception types your try block can throw when calling an overload of
   * this method so as to avoid losing the original exception type.
   *
   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e,
   * ...);} to ensure the compiler knows that it will throw.
   *
   * @return this method does not return; it always throws
   * @throws IOException when the given throwable is an IOException
   * @throws X when the given throwable is of the declared type X",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,close,com.google.common.io.Closer:close(),195,218,"/**
* Closes all registered Closeables in LIFO order.
* Throws an IOException if any close operation fails.
*/","* Closes all {@code Closeable} instances that have been added to this {@code Closer}. If an
   * exception was thrown in the try block and passed to one of the {@code exceptionThrown} methods,
   * any exceptions thrown when attempting to close a closeable will be suppressed. Otherwise, the
   * <i>first</i> exception to be thrown from an attempt to close a closeable will be thrown and any
   * additional exceptions that are thrown after that will be suppressed.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,newThread,"com.google.common.util.concurrent.MoreExecutors:newThread(java.lang.String,java.lang.Runnable)",838,851,"/**
* Creates a new thread with a specified name and runnable task.
* @param name thread name
* @param runnable task to execute
* @return created Thread object
*/","* Creates a thread using {@link #platformThreadFactory}, and sets its name to {@code name} unless
   * changing the name is forbidden by the security manager.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeCollectedEntry,com.google.common.cache.LocalCache$Segment:removeCollectedEntry(com.google.common.cache.ReferenceEntry),3279,3289,"/**
* Removes a collected entry from queues and enqueues removal notification.
* @param entry the ReferenceEntry to be removed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterKeys,"com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",2025,2038,"/**
* Filters keys in a SetMultimap based on a predicate.
* @param unfiltered original multimap to filter
* @param keyPredicate predicate for filtering keys
* @return filtered SetMultimap with only matching keys
*/","* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterEntries,"com.google.common.collect.Multimaps:filterEntries(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",2206,2213,"/**
* Filters entries in a SetMultimap based on a predicate.
* @param unfiltered the original multimap to filter
* @param entryPredicate predicate for filtering entries
* @return a new filtered SetMultimap with matching entries
*/","* Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned multimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key/value pair that
   * doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getDeclaredAnnotation,com.google.common.reflect.Parameter:getDeclaredAnnotation(java.lang.Class),112,116,"/**
* Retrieves a declared annotation by type.
* @param annotationType the annotation class to search for
* @return the annotation instance or null if not found
*/",* @since 18.0,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,mergeSorted,"com.google.common.collect.Iterators:mergeSorted(java.lang.Iterable,java.util.Comparator)",1302,1308,"/**
* Merges multiple sorted iterators into a single unmodifiable iterator.
* @param iterators iterable of sorted iterators to merge
* @param comparator comparator for sorting elements
* @return UnmodifiableIterator containing merged elements
*/","* Returns an iterator over the merged contents of all given {@code iterators}, traversing every
   * element of the input iterators. Equivalent entries will not be de-duplicated.
   *
   * <p>Callers must ensure that the source {@code iterators} are in non-descending order as this
   * method does not sort its input.
   *
   * <p>For any equivalent elements across all {@code iterators}, it is undefined which element is
   * returned first.
   *
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,size,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:size(),622,625,"/**
 * Returns the number of entries in the collection.
 * @return Size of the entry collection
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeAll,com.google.common.collect.Maps$EntrySet:removeAll(java.util.Collection),4240,4248,"/**
* Removes all elements in the specified collection.
* @param c collection of elements to be removed
* @return true if any elements were removed, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,remove,com.google.common.collect.FilteredEntryMultimap$AsMap:remove(java.lang.Object),198,222,"/**
* Removes entries matching key and condition.
* @param key the key to match against
* @return Collection of removed values or null if none match
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toArray,"com.google.common.collect.Iterables:toArray(java.lang.Iterable,java.lang.Object[])",293,296,"/**
* Converts Iterable to an array.
* @param iterable source of elements
* @param array target array type
* @return array containing elements from iterable
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toArray,com.google.common.collect.Iterables:toArray(java.lang.Iterable),304,306,"/**
 * Converts an Iterable to an array.
 * @param iterable the source Iterable
 * @return an Object array containing all elements from the Iterable
 */","* Copies an iterable's elements into an array.
   *
   * @param iterable the iterable to copy
   * @return a newly-allocated array into which all the elements of the iterable have been copied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,replaceValues,"com.google.common.collect.LinkedListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",621,646,"/**
* Replaces values associated with a key.
* @param key the key to replace values for
* @param values the new values to associate with the key
* @return list of old values or empty list if none existed
*/","* {@inheritDoc}
   *
   * <p>If any entries for the specified {@code key} already exist in the multimap, their values are
   * changed in-place without affecting the iteration order.
   *
   * <p>The returned list is immutable and implements {@link java.util.RandomAccess}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,removeAll,com.google.common.collect.LinkedListMultimap:removeAll(java.lang.Object),657,670,"/**
 * Removes all values associated with a given key.
 * @param key the key whose values are to be removed
 * @return list of values that were removed
 */","* {@inheritDoc}
   *
   * <p>The returned list is immutable and implements {@link java.util.RandomAccess}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AllEqualOrdering.java,sortedCopy,com.google.common.collect.AllEqualOrdering:sortedCopy(java.lang.Iterable),41,44,"/**
* Creates a sorted copy of the given iterable.
* @param iterable source collection to copy and sort
* @return new list containing elements from iterable, sorted
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,"com.google.common.collect.Collections2$OrderedPermutationIterator:<init>(java.util.List,java.util.Comparator)",509,512,"/**
* Initializes iterator with a list and comparator.
* @param list elements to permute
* @param comparator defines order of elements
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newCopyOnWriteArrayList,com.google.common.collect.Lists:newCopyOnWriteArrayList(java.lang.Iterable),283,294,"/**
 * Creates a new thread-safe list initialized with the elements of the given iterable.
 * @param elements iterable containing initial elements
 * @return a new CopyOnWriteArrayList instance
 */","* Creates a {@code CopyOnWriteArrayList} instance containing the given elements.
   *
   * @param elements the elements that the list should contain, in order
   * @return a new {@code CopyOnWriteArrayList} containing those elements
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newCopyOnWriteArraySet,com.google.common.collect.Sets:newCopyOnWriteArraySet(java.lang.Iterable),479,490,"/**
 * Creates a new thread-safe set from the given iterable.
 * @param elements the iterable providing initial elements
 * @return a new CopyOnWriteArraySet containing the elements
 */","* Creates a {@code CopyOnWriteArraySet} instance containing the given elements.
   *
   * @param elements the elements that the set should contain, in order
   * @return a new {@code CopyOnWriteArraySet} containing those elements
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedLists.java,binarySearch,"com.google.common.collect.SortedLists:binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior)",271,303,"/**
 * Performs a binary search on a list.
 * @param list the sorted list to search
 * @param key the element to find
 * @param comparator the comparator to use for comparison
 * @param presentBehavior behavior when key is found
 * @param absentBehavior behavior when key is not found
 * @return index based on search results
 */","* Searches the specified list for the specified object using the binary search algorithm. The
   * list must be sorted into ascending order according to the specified comparator (as by the
   * {@link Collections#sort(List, Comparator) Collections.sort(List, Comparator)} method), prior to
   * making this call. If it is not sorted, the results are undefined.
   *
   * <p>If there are elements in the list which compare as equal to the key, the choice of {@link
   * KeyPresentBehavior} decides which index is returned. If no elements compare as equal to the
   * key, the choice of {@link KeyAbsentBehavior} decides which index is returned.
   *
   * <p>This method runs in log(n) time on random-access lists, which offer near-constant-time
   * access to each list element.
   *
   * @param list the list to be searched.
   * @param key the value to be searched for.
   * @param comparator the comparator by which the list is ordered.
   * @param presentBehavior the specification for what to do if at least one element of the list
   *     compares as equal to the key.
   * @param absentBehavior the specification for what to do if no elements of the list compare as
   *     equal to the key.
   * @return the index determined by the {@code KeyPresentBehavior}, if the key is in the list;
   *     otherwise the index determined by the {@code KeyAbsentBehavior}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,bulkGet,com.google.common.util.concurrent.Striped:bulkGet(java.lang.Iterable),141,184,"/**
 * Retrieves multiple objects by keys, optimizing for runs of identical stripes.
 * @param keys iterable collection of key objects
 * @return unmodifiable list of retrieved objects
 */","* Returns the stripes that correspond to the passed objects, in ascending (as per {@link
   * #getAt(int)}) order. Thus, threads that use the stripes in the order returned by this method
   * are guaranteed to not deadlock each other.
   *
   * <p>It should be noted that using a {@code Striped<L>} with relatively few stripes, and {@code
   * bulkGet(keys)} with a relative large number of keys can cause an excessive number of shared
   * stripes (much like the birthday paradox, where much fewer than anticipated birthdays are needed
   * for a pair of them to match). Please consider carefully the implications of the number of
   * stripes, the intended concurrency level, and the typical number of keys used in a {@code
   * bulkGet(keys)} operation. See <a href=""http://www.mathpages.com/home/kmath199.htm"">Balls in
   * Bins model</a> for mathematical formulas that can be used to estimate the probability of
   * collisions.
   *
   * @param keys arbitrary non-null keys
   * @return the stripes corresponding to the objects (one per each object, derived by delegating to
   *     {@link #get(Object)}; may contain duplicates), in an increasing index order.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$TransformedEntriesListMultimap:get(java.lang.Object),1626,1629,"/**
* Retrieves list of V2 objects by key.
* @param key unique identifier
* @return transformed list of V2 objects or empty list if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,removeAll,com.google.common.collect.Multimaps$TransformedEntriesListMultimap:removeAll(java.lang.Object),1631,1635,"/**
* Removes all entries associated with the given key.
* @param key the key whose entries are to be removed
* @return a list of values that were removed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$TransformedEntriesMultimap:get(java.lang.Object),1547,1550,"/**
* Retrieves values associated with a key.
* @param key unique identifier for the values
* @return transformed collection of V2 objects or empty if key not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,removeAll,com.google.common.collect.Multimaps$TransformedEntriesMultimap:removeAll(java.lang.Object),1588,1592,"/**
 * Removes all values associated with a given key.
 * @param key the key to remove
 * @return collection of removed values or empty if none found
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$SortedAsMapView:subMap(java.lang.Object,java.lang.Object)",1005,1008,"/**
* Returns a sorted map of entries between specified keys.
* @param fromKey starting key (inclusive)
* @param toKey ending key (exclusive)
* @return SortedMap containing entries in the specified range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$SortedAsMapView:headMap(java.lang.Object),1010,1013,"/**
* Returns a sorted map containing entries up to (but not including) the specified key.
* @param toKey the upper bound key
* @return SortedMap with entries less than toKey
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$SortedAsMapView:tailMap(java.lang.Object),1015,1018,"/**
* Returns a sorted map containing entries greater than or equal to fromKey.
* @param fromKey the lower bound of the range (inclusive)
* @return SortedMap with entries >= fromKey
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,equals,com.google.common.graph.AbstractNetwork:equals(java.lang.Object),253,266,"/**
 * Checks equality of two networks based on direction, nodes, and edges.
 * @param obj the object to compare with
 * @return true if equal, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,hashCode,com.google.common.graph.AbstractNetwork:hashCode(),268,271,"/**
 * Generates hash code based on incident nodes map.
 * @return hash code of the map representing incident nodes
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,toString,com.google.common.graph.AbstractNetwork:toString(),274,286,"/**
* Returns a string representation of the graph.
* @return String containing graph properties and structure
*/",Returns a string representation of this network.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,equals,com.google.common.graph.AbstractValueGraph:equals(java.lang.Object),121,134,"/**
 * Checks if this graph equals another graph.
 * @param obj the object to compare with
 * @return true if graphs are equal, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,hashCode,com.google.common.graph.AbstractValueGraph:hashCode(),136,139,"/**
* Generates hash code based on edge value map.
* @return hash code of the edge value map
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,toString,com.google.common.graph.AbstractValueGraph:toString(),142,152,"/**
* Returns string representation of graph.
* @return formatted string with graph properties and values
*/",Returns a string representation of this graph.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,navigableKeySet,com.google.common.collect.AbstractNavigableMap:navigableKeySet(),140,143,"/**
* Returns a navigable set of keys.
* @return NavigableSet containing all keys in the map
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,navigableKeySet,com.google.common.collect.Maps$DescendingMap:navigableKeySet(),4414,4418,"/**
* Returns a navigable set view of the keys.
* @return NavigableSet of keys
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingEntryIterator,com.google.common.collect.Maps$NavigableAsMapView:descendingEntryIterator(),1110,1113,"/**
 * Returns an iterator over entries in descending order.
 * @return Iterator of Entry objects sorted by key in descending order
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntries,"com.google.common.collect.Maps:transformEntries(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)",2068,2074,"/**
* Transforms entries of a NavigableMap using a given EntryTransformer.
* @param fromMap original map with keys of type K and values of type V1
* @param transformer function to transform values from V1 to V2
* @return new NavigableMap with transformed values
*/","* Returns a view of a navigable map whose values are derived from the original navigable map's
   * entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may
   * depend on the key as well as the value.
   *
   * <p>All other properties of the transformed map, such as iteration order, are left intact. For
   * example, the code:
   *
   * {@snippet :
   * NavigableMap<String, Boolean> options = Maps.newTreeMap();
   * options.put(""verbose"", false);
   * options.put(""sort"", true);
   * EntryTransformer<String, Boolean, String> flagPrefixer =
   *     new EntryTransformer<String, Boolean, String>() {
   *       public String transformEntry(String key, Boolean value) {
   *         return value ? key : (""yes"" + key);
   *       }
   *     };
   * NavigableMap<String, String> transformed =
   *     LabsMaps.transformNavigableEntries(options, flagPrefixer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {sort=yessort, verbose=verbose}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys and null values provided that
   * the transformer is capable of accepting null inputs. The transformed map might contain null
   * values if the transformer sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * map to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map
   * doesn't need to be a view, copy the returned map into a new map of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed map.
   *
   * @since 13.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$TransformedEntriesSortedMap:headMap(java.lang.Object),2243,2246,"/**
* Returns entries with keys less than specified key.
* @param toKey upper limit for keys (exclusive)
* @return SortedMap containing transformed entries
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$TransformedEntriesSortedMap:subMap(java.lang.Object,java.lang.Object)",2254,2257,"/**
* Returns a sorted map containing entries within the specified key range.
* @param fromKey inclusive lower bound of the keys
* @param toKey exclusive upper bound of the keys
* @return SortedMap with transformed values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$TransformedEntriesSortedMap:tailMap(java.lang.Object),2259,2262,"/**
* Returns a sorted map containing entries with keys greater than or equal to the specified key.
* @param fromKey the lower bound key (inclusive)
* @return SortedMap with transformed values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformValues,"com.google.common.collect.Maps:transformValues(java.util.SortedMap,com.google.common.base.Function)",1862,1868,"/**
 * Transforms values in a sorted map using a given function.
 * @param fromMap original sorted map with keys of type K and values of type V1
 * @param function transformation function to apply to each value
 * @return new sorted map with transformed values of type V2
 */","* Returns a view of a sorted map where each value is transformed by a function. All other
   * properties of the map, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * SortedMap<String, Integer> map = ImmutableSortedMap.of(""a"", 4, ""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * SortedMap<String, Double> transformed =
   *      Maps.transformValues(map, sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=2.0, b=3.0}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed map might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
   * view, copy the returned map into a new map of your choosing.
   *
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,asMap,com.google.common.collect.Multimaps$UnmodifiableMultimap:asMap(),701,711,"/**
 * Returns an unmodifiable view of the multimap as a map.
 * @return Map with keys and unmodifiable collections of values
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,row,com.google.common.collect.Tables$TransformedTable:row(java.lang.Object),471,474,"/**
* Retrieves values from a specified row and applies a transformation.
* @param rowKey key identifying the row to retrieve
* @return map of transformed values or an empty map if row does not exist
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,column,com.google.common.collect.Tables$TransformedTable:column(java.lang.Object),476,479,"/**
* Retrieves a column from the table and transforms its values.
* @param columnKey key for the column to retrieve
* @return Map of transformed values with keys of type R and values of type V2
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowMap,com.google.common.collect.Tables$TransformedTable:rowMap(),510,513,"/**
* Transforms table rows and values using specified functions.
* @return Map of transformed rows with their corresponding column-value mappings
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,columnMap,com.google.common.collect.Tables$TransformedTable:columnMap(),515,519,"/**
* Transforms column values using a specified function.
* @return map with transformed values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,columnMap,com.google.common.collect.Tables$UnmodifiableTable:columnMap(),574,577,"/**
* Returns an unmodifiable map of columns.
* @return Map where keys are column identifiers and values are maps of row to value pairs
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowMap,com.google.common.collect.Tables$UnmodifiableTable:rowMap(),607,610,"/**
* Returns an unmodifiable map of rows.
* Each row is mapped to an unmodifiable map of columns and values.
* @return Unmodifiable map with row keys and column-value maps
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,add,"com.google.common.collect.HashMultiset:add(java.lang.Object,int)",264,284,"/**
* Adds a specified number of occurrences of an element.
* @param element the element to add
* @param occurrences the number of times to add the element
* @return the count of the element before adding
*/","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if the call would result in more than {@link
   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,add,"com.google.common.collect.LinkedHashMultiset:add(java.lang.Object,int)",264,284,"/**
* Adds a specified number of occurrences of an element to the multiset.
* @param element the element to add
* @param occurrences the number of times to add the element
* @return the count of the element before adding
*/","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if the call would result in more than {@link
   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,"com.google.common.collect.HashMultiset:remove(java.lang.Object,int)",286,311,"/**
* Removes a specified number of occurrences of an element.
* @param element the element to remove
* @param occurrences number of times to remove the element
* @return count of removed elements
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,"com.google.common.collect.LinkedHashMultiset:remove(java.lang.Object,int)",286,311,"/**
 * Removes a specified number of occurrences of an element from the multiset.
 * @param element the element to remove
 * @param occurrences the number of occurrences to remove
 * @return the count of the element before removal
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,contains,"com.google.common.collect.ImmutableTable:contains(java.lang.Object,java.lang.Object)",383,386,"/**
 * Checks if a value exists at the specified row and column keys.
 * @param rowKey key identifying the row
 * @param columnKey key identifying the column
 * @return true if a non-null value is present; false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,"com.google.common.collect.HashBasedTable:get(java.lang.Object,java.lang.Object)",114,117,"/**
* Retrieves value by row and column keys.
* @param rowKey key of the row
* @param columnKey key of the column
* @return value associated with the keys or null if any key is null
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$Column:get(java.lang.Object),471,474,"/**
* Retrieves value by key.
* @param key unique identifier
* @return associated value or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsMapping,"com.google.common.collect.StandardTable:containsMapping(java.lang.Object,java.lang.Object,java.lang.Object)",192,195,"/**
* Checks if the specified key-value mapping exists.
* @param rowKey key for the row
* @param columnKey key for the column
* @param value value to check
* @return true if the mapping exists and values match, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,"com.google.common.collect.HashBasedTable:contains(java.lang.Object,java.lang.Object)",86,89,"/**
* Checks if the table contains a value at the specified row and column keys.
* @param rowKey key of the row
* @param columnKey key of the column
* @return true if both keys are non-null and the table contains the value; false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$Column$KeySet:contains(java.lang.Object),621,624,"/**
 * Checks if the table contains an object.
 * @param obj the object to check
 * @return true if the object is contained, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$Column:containsKey(java.lang.Object),476,479,"/**
 * Checks if the map contains a mapping for the specified key.
 * @param key key whose presence in this map is to be tested
 * @return true if this map contains a mapping for the specified key
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:contains(java.lang.Object),929,939,"/**
* Checks if the map contains a specified entry.
* @param obj the object to look for, must be an Entry
* @return true if the map contains the entry, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformValues,"com.google.common.collect.Multimaps:transformValues(com.google.common.collect.ListMultimap,com.google.common.base.Function)",1378,1385,"/**
* Transforms values in a ListMultimap.
* @param fromMultimap original multimap with K keys and V1 values
* @param function transformation function from V1 to V2
* @return new ListMultimap with transformed V2 values
*/","* Returns a view of a {@code ListMultimap} where each value is transformed by a function. All
   * other properties of the multimap, such as iteration order, are left intact. For example, the
   * code:
   *
   * {@snippet :
   * ListMultimap<String, Integer> multimap =
   *      ImmutableListMultimap.of(""a"", 4, ""a"", 16, ""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * ListMultimap<String, Double> transformed = Multimaps.transformValues(map,
   *     sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=[2.0, 4.0], b=[3.0]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys, and even null values
   * provided that the function is capable of accepting null input. The transformed multimap might
   * contain null values, if the function sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the function will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to
   * perform well, {@code function} should be fast. To avoid lazy evaluation when the returned
   * multimap doesn't need to be a view, copy the returned multimap into a new multimap of your
   * choosing.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,addAll,com.google.common.collect.AbstractMultiset:addAll(java.util.Collection),105,109,"/**
* Adds all elements from the specified collection to this multiset.
* @param elementsToAdd collection of elements to add
* @return true if any element was added, false otherwise
*/","* {@inheritDoc}
   *
   * <p>This implementation is highly efficient when {@code elementsToAdd} is itself a {@link
   * Multiset}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardAddAll,com.google.common.collect.ForwardingMultiset:standardAddAll(java.util.Collection),166,169,"/**
* Adds all elements from the specified collection.
* @param elementsToAdd collection of elements to add
* @return true if this set changed as a result of the call
*/","* A sensible definition of {@link #addAll(Collection)} in terms of {@link #add(Object)} and
   * {@link #add(Object, int)}. If you override either of these methods, you may wish to override
   * {@link #addAll(Collection)} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,asMap,com.google.common.collect.Synchronized$SynchronizedMultimap:asMap(),740,748,"/**
 * Returns a synchronized map view of the multimap.
 * @return synchronized Map view of K to Collection of V
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,inverse,com.google.common.collect.Synchronized$SynchronizedBiMap:inverse(),1380,1388,"/**
 * Returns the inverse of the bimap.
 * @return a BiMap where keys and values are swapped
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:<init>(java.util.NavigableMap,java.lang.Object)",1605,1607,"/**
* Wraps a NavigableMap with synchronization.
* @param delegate the map to be wrapped
* @param mutex object used for locking (null uses this instance)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sortedMap,"com.google.common.collect.Synchronized:sortedMap(java.util.SortedMap,java.lang.Object)",1277,1280,"/**
* Wraps a SortedMap with synchronized access.
* @param sortedMap the map to be wrapped
* @param mutex object used for synchronization
* @return synchronized SortedMap instance
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,row,com.google.common.collect.Synchronized$SynchronizedTable:row(java.lang.Object),2132,2137,"/**
 * Retrieves a row from the map by key.
 * @param rowKey the key of the row to retrieve
 * @return a map representing the row or an empty map if not found
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,column,com.google.common.collect.Synchronized$SynchronizedTable:column(java.lang.Object),2139,2144,"/**
* Retrieves a column from the map by key.
* @param columnKey the key of the column to retrieve
* @return a Map containing the column data or an empty map if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,rowMap,com.google.common.collect.Synchronized$SynchronizedTable:rowMap(),2174,2179,"/**
* Returns a thread-safe row map from the delegate.
* @return Map of rows with columns mapped to values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,columnMap,com.google.common.collect.Synchronized$SynchronizedTable:columnMap(),2181,2186,"/**
 * Returns a column-based map of the delegate's data.
 * @return A nested map with columns as keys and rows as values.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,listMultimap,"com.google.common.collect.Synchronized:listMultimap(com.google.common.collect.ListMultimap,java.lang.Object)",782,788,"/**
 * Wraps a ListMultimap with synchronization.
 * @param multimap the original ListMultimap to wrap
 * @param mutex object used for locking (may be null)
 * @return synchronized ListMultimap or original if already thread-safe
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:<init>(com.google.common.collect.SortedSetMultimap,java.lang.Object)",893,895,"/**
* Constructs a synchronized sorted set multimap.
* @param delegate backing multimap
* @param mutex synchronization lock; if null, uses delegate as lock
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setMultimap,"com.google.common.collect.Synchronized:setMultimap(com.google.common.collect.SetMultimap,java.lang.Object)",826,832,"/**
 * Wraps a SetMultimap with synchronization.
 * @param multimap the original SetMultimap to wrap
 * @param mutex object used for locking (optional)
 * @return synchronized SetMultimap instance
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedMultimap,com.google.common.collect.Multimaps:synchronizedMultimap(com.google.common.collect.Multimap),639,643,"/**
 * Returns a thread-safe view of the specified multimap.
 * @param multimap the multimap to wrap
 * @return a synchronized Multimap
 */","* Returns a synchronized (thread-safe) multimap backed by the specified multimap. In order to
   * guarantee serial access, it is critical that <b>all</b> access to the backing multimap is
   * accomplished through the returned multimap.
   *
   * <p>It is imperative that the user manually synchronize on the returned multimap when accessing
   * any of its collection views:
   *
   * {@snippet :
   * Multimap<K, V> multimap = Multimaps.synchronizedMultimap(
   *     HashMultimap.<K, V>create());
   * ...
   * Collection<V> values = multimap.get(key);  // Needn't be in synchronized block
   * ...
   * synchronized (multimap) {  // Synchronizing on multimap, not values!
   *   Iterator<V> i = values.iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>Note that the generated multimap's {@link Multimap#removeAll} and {@link
   * Multimap#replaceValues} methods return collections that aren't synchronized.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param multimap the multimap to be wrapped in a synchronized view
   * @return a synchronized view of the specified multimap",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,synchronizedTable,com.google.common.collect.Tables:synchronizedTable(com.google.common.collect.Table),699,703,"/**
 * Wraps a table with synchronization.
 * @param table the table to be wrapped
 * @return a synchronized version of the table
 */","* Returns a synchronized (thread-safe) table backed by the specified table. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing table is accomplished
   * through the returned table.
   *
   * <p>It is imperative that the user manually synchronize on the returned table when accessing any
   * of its collection views:
   *
   * {@snippet :
   * Table<R, C, V> table = Tables.synchronizedTable(HashBasedTable.<R, C, V>create());
   * ...
   * Map<C, V> row = table.row(rowKey);  // Needn't be in synchronized block
   * ...
   * synchronized (table) {  // Synchronizing on table, not row!
   *   Iterator<Entry<C, V>> i = row.entrySet().iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned table will be serializable if the specified table is serializable.
   *
   * @param table the table to be wrapped in a synchronized view
   * @return a synchronized view of the specified table
   * @since 22.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,escape,com.google.common.escape.UnicodeEscaper:escape(java.lang.String),100,106,"/**
* Escapes special characters in a string.
* @param string input to be escaped
* @return escaped string or original if no escaping needed
*/","* Returns the escaped form of a given literal string.
   *
   * <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to
   * use this method. If an input string ends with an unmatched high surrogate character, then this
   * method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a
   * href=""http://en.wikipedia.org/wiki/UTF-16"">UTF-16</a> before calling this method.
   *
   * <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for
   * efficiency by inlining the implementation of {@link #nextEscapeIndex(CharSequence, int, int)}
   * directly. Doing this for {@link com.google.common.net.PercentEscaper} more than doubled the
   * performance for unescaped strings (as measured by {@code CharEscapersBenchmark}).
   *
   * @param string the literal string to be escaped
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null
   * @throws IllegalArgumentException if invalid surrogate characters are encountered",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,removeNode,com.google.common.graph.StandardMutableGraph:removeNode(java.lang.Object),60,63,"/**
 * Removes a node from the graph.
 * @param node the node to be removed
 * @return true if the node was successfully removed, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,removeEdge,"com.google.common.graph.StandardMutableGraph:removeEdge(java.lang.Object,java.lang.Object)",65,68,"/**
* Removes an edge between two nodes.
* @param nodeU first node of the edge
* @param nodeV second node of the edge
* @return true if edge was removed, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,removeEdge,com.google.common.graph.StandardMutableValueGraph:removeEdge(com.google.common.graph.EndpointPair),180,185,"/**
* Removes an edge between two nodes.
* @param endpoints pair of nodes defining the edge
* @return removed edge value or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentNodes,com.google.common.graph.StandardNetwork:incidentNodes(java.lang.Object),135,141,"/**
* Retrieves incident nodes for a given edge.
* @param edge the edge to find incident nodes for
* @return EndpointPair containing the two incident nodes
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,toStringBuilder,com.google.common.io.CharStreams:toStringBuilder(java.lang.Readable),174,182,"/**
* Converts a Readable to a StringBuilder.
* @param r the Readable object to convert
* @return StringBuilder containing content from Readable
* @throws IOException if an I/O error occurs
*/","* Reads all characters from a {@link Readable} object into a new {@link StringBuilder} instance.
   * Does not close the {@code Readable}.
   *
   * @param r the object to read from
   * @return a {@link StringBuilder} containing all the characters
   * @throws IOException if an I/O error occurs",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,visitParameterizedType,com.google.common.reflect.TypeResolver$TypeMappingIntrospector:visitParameterizedType(java.lang.reflect.ParameterizedType),393,404,"/**
* Visits a parameterized type, mapping its variables to actual types.
* @param parameterizedType the type to visit
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,catching,"com.google.common.util.concurrent.Futures:catching(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)",298,306,"/**
 * Wraps a future to handle exceptions.
 * @param input the original future
 * @param exceptionType type of exception to catch
 * @param fallback function to compute recovery value
 * @param executor for running fallback
 * @return future with exception handling
 */","* Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the
   * primary input fails with the given {@code exceptionType}, from the result provided by the
   * {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so
   * if the primary input succeeds, it is never invoked. If, during the invocation of {@code
   * fallback}, an exception is thrown, this exception is used as the result of the output {@code
   * Future}.
   *
   * <p>Usage example:
   *
   * {@snippet :
   * ListenableFuture<Integer> fetchCounterFuture = ...;
   *
   * // Falling back to a zero counter in case an exception happens when
   * // processing the RPC to fetch counters.
   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(
   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the warnings the {@link MoreExecutors#directExecutor} documentation.
   *
   * @param input the primary input {@code Future}
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against the input's exception. ""The input's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a
   *     different kind of exception, that exception itself. To avoid hiding bugs and other
   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code
   *     Throwable.class} in particular.
   * @param fallback the {@link Function} to be called if {@code input} fails with the expected
   *     exception type. The function's argument is the input's exception. ""The input's exception""
   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if
   *     {@code get()} throws a different kind of exception, that exception itself.
   * @param executor the executor that runs {@code fallback} if {@code input} fails
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,cancel,com.google.common.util.concurrent.AbstractFuture:cancel(boolean),342,410,"/**
 * Cancels the future task.
 * @param mayInterruptIfRunning true if the thread executing this task should be interrupted
 * @return true if the task was successfully cancelled, false otherwise
 */","* {@inheritDoc}
   *
   * <p>If a cancellation attempt succeeds on a {@code Future} that had previously been {@linkplain
   * #setFuture set asynchronously}, then the cancellation will also be propagated to the delegate
   * {@code Future} that was supplied in the {@code setFuture} call.
   *
   * <p>Rather than override this method to perform additional cancellation work or cleanup,
   * subclasses should override {@link #afterDone}, consulting {@link #isCancelled} and {@link
   * #wasInterrupted} as necessary. This ensures that the work is done even if the future is
   * cancelled without a call to {@code cancel}, such as by calling {@code
   * setFuture(cancelledFuture)}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,set,com.google.common.util.concurrent.AbstractFuture:set(java.lang.Object),487,495,"/**
* Sets the value atomically.
* @param value the value to set, may be null
* @return true if successful, false otherwise
*/","* Sets the result of this {@code Future} unless this {@code Future} has already been cancelled or
   * set (including {@linkplain #setFuture set asynchronously}). When a call to this method returns,
   * the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b> the call was
   * accepted (in which case it returns {@code true}). If it returns {@code false}, the {@code
   * Future} may have previously been set asynchronously, in which case its result may not be known
   * yet. That result, though not yet known, cannot be overridden by a call to a {@code set*}
   * method, only by a call to {@link #cancel}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.
   *
   * @param value the value to be used as the result
   * @return true if the attempt was accepted, completing the {@code Future}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,setException,com.google.common.util.concurrent.AbstractFuture:setException(java.lang.Throwable),512,520,"/**
* Sets exception for this instance.
* @param throwable the exception to set
* @return true if successfully set, false otherwise
*/","* Sets the failed result of this {@code Future} unless this {@code Future} has already been
   * cancelled or set (including {@linkplain #setFuture set asynchronously}). When a call to this
   * method returns, the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b>
   * the call was accepted (in which case it returns {@code true}). If it returns {@code false}, the
   * {@code Future} may have previously been set asynchronously, in which case its result may not be
   * known yet. That result, though not yet known, cannot be overridden by a call to a {@code set*}
   * method, only by a call to {@link #cancel}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.
   *
   * @param throwable the exception to be used as the failed result
   * @return true if the attempt was accepted, completing the {@code Future}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,setFuture,com.google.common.util.concurrent.AbstractFuture:setFuture(com.google.common.util.concurrent.ListenableFuture),551,603,"/**
* Sets a future value or delegates to another future.
* @param future the future to set or delegate to
* @return true if successful, false otherwise
*/","* Sets the result of this {@code Future} to match the supplied input {@code Future} once the
   * supplied {@code Future} is done, unless this {@code Future} has already been cancelled or set
   * (including ""set asynchronously,"" defined below).
   *
   * <p>If the supplied future is {@linkplain #isDone done} when this method is called and the call
   * is accepted, then this future is guaranteed to have been completed with the supplied future by
   * the time this method returns. If the supplied future is not done and the call is accepted, then
   * the future will be <i>set asynchronously</i>. Note that such a result, though not yet known,
   * cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}.
   *
   * <p>If the call {@code setFuture(delegate)} is accepted and this {@code Future} is later
   * cancelled, cancellation will be propagated to {@code delegate}. Additionally, any call to
   * {@code setFuture} after any cancellation will propagate cancellation to the supplied {@code
   * Future}.
   *
   * <p>Note that, even if the supplied future is cancelled and it causes this future to complete,
   * it will never trigger interruption behavior. In particular, it will not cause this future to
   * invoke the {@link #interruptTask} method, and the {@link #wasInterrupted} method will not
   * return {@code true}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.
   *
   * @param future the future to delegate to
   * @return true if the attempt was accepted, indicating that the {@code Future} was not previously
   *     cancelled or set.
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,transform,"com.google.common.util.concurrent.Futures:transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)",486,490,"/**
 * Transforms the result of a future using a given function.
 * @param input Future whose result to transform
 * @param function Transformation function applied to the input's result
 * @param executor Executor to run the transformation
 * @return ListenableFuture with transformed result
 */","* Returns a new {@code Future} whose result is derived from the result of the given {@code
   * Future}. If {@code input} fails, the returned {@code Future} fails with the same exception (and
   * the function is not invoked). Example usage:
   *
   * {@snippet :
   * ListenableFuture<QueryResult> queryFuture = ...;
   * ListenableFuture<List<Row>> rowsFuture =
   *     transform(queryFuture, QueryResult::getRows, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the warnings the {@link MoreExecutors#directExecutor} documentation.
   *
   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the
   * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel
   * the input, and if the input is cancelled, the returned {@code Future} will receive a callback
   * in which it will attempt to cancel itself.
   *
   * <p>An example use of this method is to convert a serializable object returned from an RPC into
   * a POJO.
   *
   * @param input The future to transform
   * @param function A Function to transform the results of the provided future to the results of
   *     the returned future.
   * @param executor Executor to run the function in.
   * @return A future that holds result of the transformation.
   * @since 9.0 (in 2.0 as {@code compose})",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,incrementAndGet,com.google.common.util.concurrent.AtomicLongMap:incrementAndGet(java.lang.Object),91,94,"/**
 * Increments the value associated with the given key by one.
 * @param key the key to increment
 * @return the updated value after incrementing
 */","* Increments by one the value currently associated with {@code key}, and returns the new value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,decrementAndGet,com.google.common.util.concurrent.AtomicLongMap:decrementAndGet(java.lang.Object),99,102,"/**
 * Decrements the value associated with the given key by 1.
 * @param key the key whose value is to be decremented
 * @return the updated value after decrementing
 */","* Decrements by one the value currently associated with {@code key}, and returns the new value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndIncrement,com.google.common.util.concurrent.AtomicLongMap:getAndIncrement(java.lang.Object),116,119,"/**
 * Atomically increments the value associated with the given key.
 * @param key the key whose associated value is to be incremented
 * @return the previous value before incrementing
 */","* Increments by one the value currently associated with {@code key}, and returns the old value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndDecrement,com.google.common.util.concurrent.AtomicLongMap:getAndDecrement(java.lang.Object),124,127,"/**
 * Retrieves and decrements the value associated with the given key.
 * @param key the key to retrieve and decrement
 * @return the original value before decrementing
 */","* Decrements by one the value currently associated with {@code key}, and returns the old value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,create,com.google.common.util.concurrent.AtomicLongMap:create(java.util.Map),74,78,"/**
* Creates an AtomicLongMap from a given map.
* @param m input map with keys of type K and values of type Long
* @return AtomicLongMap containing entries from the input map
*/",Creates an {@code AtomicLongMap} with the same mappings as the specified {@code Map}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractGraph:incidentEdgeOrder(),101,104,"/**
 * Returns unordered edge order.
 * @return ElementOrder indicating no specific ordering
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractValueGraph:incidentEdgeOrder(),101,104,"/**
 * Defines unordered edge order.
 * @return ElementOrder indicating edges are unordered
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,<init>,com.google.common.graph.GraphBuilder:<init>(boolean),77,79,"/**
 * Initializes a new GraphBuilder instance.
 * @param directed true if the graph is directed, false otherwise
 */",Creates a new instance with the specified edge directionality.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,<init>,com.google.common.graph.NetworkBuilder:<init>(boolean),82,84,"/**
 * Constructs a NetworkBuilder with directionality.
 * @param directed true for directed graphs, false otherwise
 */",Creates a new instance with the specified edge directionality.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,<init>,com.google.common.graph.ValueGraphBuilder:<init>(boolean),79,81,"/**
 * Initializes a new ValueGraphBuilder.
 * @param directed true if the graph is directed, false otherwise
 */",Creates a new instance with the specified edge directionality.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,addListener,"com.google.common.util.concurrent.AbstractService:addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor)",510,513,"/**
 * Adds a listener with an associated executor.
 * @param listener the listener to be added
 * @param executor the executor to handle events for this listener
 */",* @since 13.0,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,addListener,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor)",579,581,"/**
 * Adds a listener with an associated executor.
 * @param listener the listener to be added
 * @param executor the executor to run the listener on
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,apply,com.google.common.base.Converter:apply(java.lang.Object),447,470,"/**
* Applies conversion to input value.
* @param a input value to be converted
* @return converted value
* @deprecated Use {@link #convert(A)} instead
*/",* @deprecated Provided to satisfy the {@code Function} interface; use {@link #convert} instead.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,create,com.google.common.collect.CompactHashMap:create(),97,100,"/**
* Creates an empty CompactHashMap instance.
* @param <K> key type, can be nullable
* @param <V> value type, can be nullable
* @return new CompactHashMap object
*/",Creates an empty {@code CompactHashMap} instance.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,createWithExpectedSize,com.google.common.collect.CompactHashMap:createWithExpectedSize(int),111,114,"/**
* Creates a CompactHashMap with an estimated size.
* @param expectedSize initial capacity hint for the map
* @return CompactHashMap instance initialized with the expected size
*/","* Creates a {@code CompactHashMap} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactHashMap} with enough capacity to hold {@code expectedSize}
   *     elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,<init>,"com.google.common.collect.CompactLinkedHashMap:<init>(int,boolean)",110,113,"/**
 * Initializes a CompactLinkedHashMap with specified size and access order.
 * @param expectedSize initial capacity of the map
 * @param accessOrder true for LRU (Least Recently Used) order, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,create,com.google.common.collect.CompactHashSet:create(),85,87,"/**
 * Creates a new empty CompactHashSet.
 * @param <E> element type, can be null
 * @return an empty CompactHashSet instance
 */",Creates an empty {@code CompactHashSet} instance.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,<init>,com.google.common.collect.CompactLinkedHashSet:<init>(),126,126,"/**
 * Constructs an empty CompactLinkedHashSet.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,createWithExpectedSize,com.google.common.collect.CompactHashSet:createWithExpectedSize(int),126,129,"/**
* Creates a CompactHashSet with an expected size.
* @param expectedSize initial capacity hint
* @return CompactHashSet instance initialized with the specified size
*/","* Creates a {@code CompactHashSet} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactHashSet} with enough capacity to hold {@code expectedSize}
   *     elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,<init>,com.google.common.collect.CompactLinkedHashSet:<init>(int),128,130,"/**
 * Initializes a CompactLinkedHashSet with the specified expected size.
 * @param expectedSize the initial capacity of the set
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newListMultimap,"com.google.common.collect.Multimaps:newListMultimap(java.util.Map,com.google.common.base.Supplier)",330,334,"/**
 * Creates a new ListMultimap from a given map and list supplier.
 * @param map the input map with keys and collections of values
 * @param factory supplier for creating lists to hold values
 * @return a new ListMultimap instance
 */","* Creates a new {@code ListMultimap} that uses the provided map and factory. It can generate a
   * multimap based on arbitrary {@link Map} and {@link List} classes. Most users should prefer
   * {@link MultimapBuilder}, though a small number of users will need this method to cover map or
   * collection types that {@link MultimapBuilder} does not support.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. The multimap's {@code get}, {@code
   * removeAll}, and {@code replaceValues} methods return {@code RandomAccess} lists if the factory
   * does. However, the multimap's {@code get} method returns instances of a different class than
   * does {@code factory.get()}.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the lists generated by {@code
   * factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedListMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()} and {@link
   * LinkedListMultimap#create()} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the lists returned by
   * {@code factory}. Those objects should not be manually updated, they should be empty when
   * provided, and they should not use soft, weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty lists that will each hold all values for a given key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedKeySortedSetMultimap.java,<init>,com.google.common.collect.AbstractSortedKeySortedSetMultimap:<init>(java.util.SortedMap),39,41,"/**
 * Constructs a multimap backed by a sorted map.
 * @param map sorted map to back this multimap
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomSortedSetMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",535,539,"/**
* Initializes a CustomSortedSetMultimap with a backing map and a sorted set factory.
* @param map the initial backing map of key-value pairs
* @param factory supplier for creating sorted sets to store values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newSetMultimap,"com.google.common.collect.Multimaps:newSetMultimap(java.util.Map,com.google.common.base.Supplier)",416,420,"/**
* Creates a new set multimap from a map and a supplier.
* @param map the backing map of key to collection of values
* @param factory supplies sets for each key's values
* @return a new set multimap backed by the given map and factory
*/","* Creates a new {@code SetMultimap} that uses the provided map and factory. It can generate a
   * multimap based on arbitrary {@link Map} and {@link Set} classes. Most users should prefer
   * {@link MultimapBuilder}, though a small number of users will need this method to cover map or
   * collection types that {@link MultimapBuilder} does not support.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}
   * method returns instances of a different class than {@code factory.get()} does.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code
   * factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedSetMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link HashMultimap#create()}, {@link
   * LinkedHashMultimap#create()}, {@link TreeMultimap#create()}, and {@link
   * TreeMultimap#create(Comparator, Comparator)} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by
   * {@code factory}. Those objects should not be manually updated and they should not use soft,
   * weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty sets that will each hold all values for a given key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMultiset,"com.google.common.collect.CollectCollectors:toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction)",152,165,"/**
* Collects elements into an immutable multiset.
* @param elementFunction extracts the element from each input
* @param countFunction determines the count for each element
* @return ImmutableMultiset of elements with specified counts
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,<init>,com.google.common.collect.ImmutableMultiset$Builder:<init>(),483,485,"/**
 * Initializes a new builder with an empty LinkedHashMultiset.
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableMultiset#builder}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,spliterator,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:spliterator(),67,70,"/**
 * Returns a spliterator for the map entries.
 * @return Spliterator over Entry<K, V> objects
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,spliterator,com.google.common.collect.ImmutableSortedMap$1EntrySet:spliterator(),611,614,"/**
* Returns a spliterator for elements.
* @return Spliterator over elements of type E
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,spliterator,com.google.common.collect.RegularImmutableSortedSet:spliterator(),80,83,"/**
 * Returns a spliterator for this collection.
 * @return Spliterator over elements of type E
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,newHasher,com.google.common.hash.Crc32cHashFunction:newHasher(),35,38,"/**
 * Creates a new CRC-32C hasher.
 * @return Hasher instance using CRC-32C algorithm
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,newHasher,com.google.common.hash.Murmur3_128HashFunction:newHasher(),63,66,"/**
 * Creates a new hasher using the Murmur3-128 algorithm.
 * @return Hasher instance initialized with the specified seed
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,newHasher,com.google.common.hash.SipHashFunction:newHasher(),71,74,"/**
* Creates a new SipHasher instance.
* @return Hasher object initialized with specific keys and constants
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,toString,com.google.common.math.Stats:toString(),445,458,"/**
* Returns a string representation of the statistics.
* @return formatted string with count, mean, standard deviation, min, and max if count > 0; otherwise, just count
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,andThen,com.google.common.base.Converter:andThen(com.google.common.base.Converter),376,378,"/**
* Combines this converter with another.
* @param secondConverter next converter in chain
* @return combined Converter from A to C
*/","* Returns a converter whose {@code convert} method applies {@code secondConverter} to the result
   * of this converter. Its {@code reverse} method applies the converters in reverse order.
   *
   * <p>The returned converter is serializable if {@code this} converter and {@code secondConverter}
   * are.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,equals,com.google.common.collect.Sets$CartesianSet:equals(java.lang.Object),1611,1624,"/**
* Checks equality with another set.
* @param object the object to compare
* @return true if equal, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$TypeVariableImpl:equals(java.lang.Object),438,462,"/**
 * Checks equality with another TypeVariable.
 * @param obj the object to compare
 * @return true if equal, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$WildcardTypeImpl:equals(java.lang.Object),487,495,"/**
* Checks equality with another WildcardType.
* @param obj object to compare
* @return true if bounds match, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.lang.Object[])",168,173,"/**
* Appends array elements to StringBuilder.
* @param builder target StringBuilder
* @param parts array of objects to append
* @return the updated StringBuilder
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,
   * Iterable)}, except that it does not throw {@link IOException}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner:join(java.lang.Iterable),193,233,"/**
 * Joins elements of an iterable into a single string with a separator.
 * @param parts iterable containing elements to join
 * @return joined string or empty string if no elements
 */","* Returns a string containing the string representation of each of {@code parts}, using the
   * previously configured separator between each.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,create,com.google.common.collect.MapMakerInternalMap:create(com.google.common.collect.MapMaker),205,223,"/**
* Creates a map based on key and value strength.
* @param builder configuration for the map
* @return InternalMap instance with specified strengths
*/",Returns a fresh {@link MapMakerInternalMap} as specified by the given {@code builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,createWithDummyValues,com.google.common.collect.MapMakerInternalMap:createWithDummyValues(com.google.common.collect.MapMaker),235,250,"/**
* Creates a MapMakerInternalMap with dummy values.
* @param builder MapMaker configuration
* @return MapMakerInternalMap instance based on key strength
*/","* Returns a fresh {@link MapMakerInternalMap} with {@link MapMaker.Dummy} values but otherwise as
   * specified by the given {@code builder}. The returned {@link MapMakerInternalMap} will be
   * optimized to saved memory. Since {@link MapMaker.Dummy} is a singleton, we don't need to store
   * any values at all. Because of this optimization, {@code build.getValueStrength()} must be
   * {@link Strength#STRONG}.
   *
   * <p>This method is intended to only be used by the internal implementation of {@link Interners},
   * since a map of dummy values is the exact use case there.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,concat,com.google.common.collect.FluentIterable:concat(java.lang.Iterable),252,256,"/**
* Concatenates multiple iterables into a single iterable.
* @param inputs variable number of input iterables
* @return FluentIterable containing all elements from the inputs
*/","* Returns a fluent iterable that combines several iterables. The returned iterable has an
   * iterator that traverses the elements of each iterable in {@code inputs}. The input iterators
   * are not polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>{@code Stream} equivalent:</b> to concatenate an arbitrary number of streams, use {@code
   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code
   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.
   *
   * @throws NullPointerException if any of the provided iterables is {@code null}
   * @since 20.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,toString,com.google.common.util.concurrent.AbstractFuture:toString(),859,877,"/**
 * Returns a string representation of the object.
 * @return String with class name, hash code, and status (CANCELLED, DONE, PENDING)
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,get,com.google.common.collect.FluentIterable:get(int),835,838,"/**
 * Retrieves element at specified position.
 * @param position index of the element to retrieve
 * @return element at the given position
 */","* Returns the element at the specified position in this fluent iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (but note
   * that this throws different exception types, and throws an exception if {@code null} would be
   * returned).
   *
   * @param position position of the element to return
   * @return the element at the specified position in this fluent iterable
   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to
   *     the size of this fluent iterable",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,of,com.google.common.graph.DirectedMultiNetworkConnections:of(),49,54,"/**
* Creates a new directed multi-network connections instance.
* @param <N> node type
* @param <E> edge type
* @return DirectedMultiNetworkConnections object initialized with default capacity and load factor
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,newConnections,com.google.common.graph.StandardMutableValueGraph:newConnections(),187,191,"/**
* Creates a new GraphConnections instance based on graph direction.
* @return Directed or UndirectedGraphConnections based on isDirected()
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,acquire,com.google.common.util.concurrent.RateLimiter:acquire(),288,291,"/**
* Acquires one unit with default settings.
* @return acquired amount (always 1.0)
*/","* Acquires a single permit from this {@code RateLimiter}, blocking until the request can be
   * granted. Tells the amount of time slept, if any.
   *
   * <p>This method is equivalent to {@code acquire(1)}.
   *
   * @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited
   * @since 16.0 (present in 13.0 with {@code void} return type})",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enter,com.google.common.util.concurrent.Monitor:enter(java.time.Duration),391,393,"/**
 * Enters the lock with a specified duration.
 * @param time the maximum time to wait
 * @return true if the lock was acquired, false otherwise
 */","* Enters this monitor. Blocks at most the given time.
   *
   * @return whether the monitor was entered
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterIf,"com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",709,726,"/**
 * Attempts to enter a monitor and check a condition.
 * @param guard the condition guard
 * @param time maximum wait time
 * @param unit time unit for the wait time
 * @return true if entered and condition is satisfied, false otherwise
 */","* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the
   * lock, but does not wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,from,com.google.common.cache.CacheBuilder:from(com.google.common.cache.CacheBuilderSpec),329,332,"/**
* Creates a CacheBuilder instance from a specification.
* @param spec configuration for the cache builder
* @return CacheBuilder object with lenient parsing enabled
*/","* Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}.
   *
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,newStrongInterner,com.google.common.collect.Interners:newStrongInterner(),103,105,"/**
 * Creates a strong interner.
 * @return StrongInterner instance
 */","* Returns a new thread-safe interner which retains a strong reference to each instance it has
   * interned, thus preventing these instances from being garbage-collected. If this retention is
   * acceptable, this implementation may perform better than {@link #newWeakInterner}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,newWeakInterner,com.google.common.collect.Interners:newWeakInterner(),113,116,"/**
* Creates a weak interner.
* @return Interner that uses weak references for caching
*/","* Returns a new thread-safe interner which retains a weak reference to each instance it has
   * interned, and so does not prevent these instances from being garbage-collected. This most
   * likely does not perform as well as {@link #newStrongInterner}, but is the best alternative when
   * the memory usage of that implementation is unacceptable.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,entrySpliterator,com.google.common.collect.ArrayTable$ArrayMap:entrySpliterator(),256,259,"/**
 * Returns a spliterator over map entries.
 * @return Spliterator for iterating entries
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getValue,com.google.common.collect.ArrayTable$Column:getValue(int),628,631,"/**
 * Retrieves value at specified index.
 * @param index position in the data structure
 * @return value at given index or null if not found
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getValue,com.google.common.collect.ArrayTable$Row:getValue(int),720,723,"/**
 * Retrieves value at specified row and column index.
 * @param index column index
 * @return value at the given index or null if not found
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,get,"com.google.common.collect.ArrayTable:get(java.lang.Object,java.lang.Object)",436,441,"/**
 * Retrieves value by row and column keys.
 * @param rowKey key identifying the row
 * @param columnKey key identifying the column
 * @return value at specified row and column, or null if not found
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getValue,com.google.common.collect.ArrayTable:getValue(int),587,591,"/**
* Retrieves value by index.
* @param index position in a flattened 2D array
* @return value at the specified index or null if out of bounds
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,setValue,"com.google.common.collect.ArrayTable$Column:setValue(int,java.lang.Object)",633,636,"/**
* Sets value at specified index in column.
* @param index position to update
* @param newValue new value to set
* @return old value at the index or null if invalid
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,setValue,"com.google.common.collect.ArrayTable$Row:setValue(int,java.lang.Object)",725,728,"/**
* Sets value at specified row and column indices.
* @param index column index
* @param newValue new value to set
* @return previous value or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,put,"com.google.common.collect.ArrayTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",457,467,"/**
 * Sets a value at the specified row and column.
 * @param rowKey unique identifier for the row
 * @param columnKey unique identifier for the column
 * @param value value to be set
 * @return previous value at the specified position or null if not present
 */","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if {@code rowKey} is not in {@link #rowKeySet()} or {@code
   *     columnKey} is not in {@link #columnKeySet()}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,erase,"com.google.common.collect.ArrayTable:erase(java.lang.Object,java.lang.Object)",516,524,"/**
* Removes the value at the specified row and column keys.
* @param rowKey key identifying the row
* @param columnKey key identifying the column
* @return removed value or null if not found
*/","* Associates the value {@code null} with the specified keys, assuming both keys are valid. If
   * either key is null or isn't among the keys provided during construction, this method has no
   * effect.
   *
   * <p>This method is equivalent to {@code put(rowKey, columnKey, null)} when both provided keys
   * are valid.
   *
   * @param rowKey row key of mapping to be erased
   * @param columnKey column key of mapping to be erased
   * @return the value previously associated with the keys, or {@code null} if no mapping existed
   *     for the keys",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,remove,com.google.common.collect.Lists$ReverseList:remove(int),896,900,"/**
 * Removes element at specified index.
 * @param index position of element to remove
 * @return removed element or null if invalid index
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,set,"com.google.common.collect.Lists$ReverseList:set(int,java.lang.Object)",907,911,"/**
* Sets element at specified index in reverse order.
* @param index position to update (0-based)
* @param element new value to set
* @return the previous element at the specified position
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$ReverseList:get(int),913,917,"/**
 * Retrieves element at specified index.
 * @param index position of the element to retrieve
 * @return element at the given index or null if not found
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,get,com.google.common.primitives.ImmutableDoubleArray$AsList:get(int),499,502,"/**
 * Retrieves an element by index from the parent collection.
 * @param index position of the element to retrieve
 * @return the element at the specified index
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,equals,com.google.common.primitives.ImmutableDoubleArray:equals(java.lang.Object),570,588,"/**
* Checks equality with another ImmutableDoubleArray.
* @param object the other array to compare
* @return true if arrays are equal, false otherwise
*/","* Returns {@code true} if {@code object} is an {@code ImmutableDoubleArray} containing the same
   * values as this one, in the same order. Values are compared as if by {@link Double#equals}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,get,com.google.common.primitives.ImmutableIntArray$AsList:get(int),494,497,"/**
 * Retrieves an element by index from the parent collection.
 * @param index position of the element to retrieve
 * @return element at the specified index or throws IndexOutOfBoundsException if invalid
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,equals,com.google.common.primitives.ImmutableIntArray:equals(java.lang.Object),565,583,"/**
* Checks equality with another ImmutableIntArray.
* @param object the object to compare
* @return true if equal, false otherwise
*/","* Returns {@code true} if {@code object} is an {@code ImmutableIntArray} containing the same
   * values as this one, in the same order.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,get,com.google.common.primitives.ImmutableLongArray$AsList:get(int),496,499,"/**
 * Retrieves an element by index from the parent collection.
 * @param index position of the element to retrieve
 * @return the element at the specified index
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,equals,com.google.common.primitives.ImmutableLongArray:equals(java.lang.Object),567,585,"/**
* Checks equality with another ImmutableLongArray.
* @param object the other array to compare
* @return true if arrays are equal, false otherwise
*/","* Returns {@code true} if {@code object} is an {@code ImmutableLongArray} containing the same
   * values as this one, in the same order.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
 * Converts a string from one case format to another.
 * @param format target case format
 * @param s input string
 * @return converted string
 */",Enum values can override for performance reasons.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,com.google.common.base.CharMatcher:indexIn(java.lang.CharSequence),544,546,"/**
 * Finds the first occurrence of this string in the given sequence.
 * @param sequence the CharSequence to search within
 * @return the index of the first occurrence or -1 if not found
 */","* Returns the index of the first matching BMP character in a character sequence, or {@code -1} if
   * no matching character is present.
   *
   * <p>The default implementation iterates over the sequence in forward order calling {@link
   * #matches} for each character.
   *
   * @param sequence the character sequence to examine from the beginning
   * @return an index, or {@code -1} if no character matches",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeTokenIfPresent,com.google.common.net.MediaType$Tokenizer:consumeTokenIfPresent(com.google.common.base.CharMatcher),1152,1158,"/**
* Consumes and returns the token if present.
* @param matcher character matcher for token boundaries
* @return consumed token or remaining string if no more tokens
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,<init>,com.google.common.collect.AbstractIndexedListIterator:<init>(int),50,52,"/**
 * Initializes an iterator with a specified size and starting index.
 * @param size total number of elements in the list
 */","* Constructs an iterator across a sequence of the given size whose initial position is 0. That
   * is, the first call to {@link #next()} will return the first element (or throw {@link
   * NoSuchElementException} if {@code size} is zero).
   *
   * @throws IllegalArgumentException if {@code size} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,add,com.google.common.collect.FilteredKeyMultimap$AddRejectingList:add(java.lang.Object),147,151,"/**
* Adds an element to the beginning of the list.
* @param v the element to be added
* @return always true
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,addAll,com.google.common.collect.FilteredKeyMultimap$AddRejectingList:addAll(java.util.Collection),159,163,"/**
* Adds all elements from the specified collection to this list.
* @param collection the collection of elements to be added
* @return always true, as per Collection contract
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,add,"com.google.common.collect.Lists$ReverseList:add(int,java.lang.Object)",886,889,"/**
* Adds an element to the list at the specified index.
* @param index position where the element should be added
* @param element the element to add
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,listIterator,com.google.common.collect.Lists$ReverseList:listIterator(int),935,1003,"/**
 * Returns a list iterator over the elements in reverse order.
 * @param index starting position (0-based)
 * @return ListIterator for reverse traversal
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getTeredoInfo,com.google.common.net.InetAddresses:getTeredoInfo(java.net.Inet6Address),823,842,"/**
* Extracts Teredo information from an IPv6 address.
* @param ip the Teredo IPv6 address
* @return TeredoInfo object containing server, client, and port details
*/","* Returns the Teredo information embedded in a Teredo address.
   *
   * @param ip {@link Inet6Address} to be examined for embedded Teredo information
   * @return extracted {@code TeredoInfo}
   * @throws IllegalArgumentException if the argument is not a valid IPv6 Teredo address",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,isWellFormed,com.google.common.base.Utf8:isWellFormed(byte[]),110,112,"/**
 * Checks if byte array is well-formed.
 * @param bytes input byte array
 * @return true if well-formed, false otherwise
 */","* Returns {@code true} if {@code bytes} is a <i>well-formed</i> UTF-8 byte sequence according to
   * Unicode 6.0. Note that this is a stronger criterion than simply whether the bytes can be
   * decoded. For example, some versions of the JDK decoder will accept ""non-shortest form"" byte
   * sequences, but encoding never reproduces these. Such byte sequences are <i>not</i> considered
   * well-formed.
   *
   * <p>This method returns {@code true} if and only if {@code Arrays.equals(bytes, new
   * String(bytes, UTF_8).getBytes(UTF_8))} does, but is more efficient in both time and space.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$KeySetView:toArray(java.lang.Object[]),713,727,"/**
* Converts the map keys to an array.
* @param a target array or null
* @return array containing the map's keys
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$ValuesView:toArray(java.lang.Object[]),1035,1049,"/**
 * Converts the collection to an array.
 * @param a target array or null for a new one
 * @return array containing all elements of the collection
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,toArray,com.google.common.collect.CompactHashSet:toArray(java.lang.Object[]),635,649,"/**
 * Converts the set to an array.
 * @param a target array or null for new array creation
 * @return array containing the set elements
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$KeySetView:toArray(),702,711,"/**
* Converts the collection to an array.
* @return an array containing all elements in the collection
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$ValuesView:toArray(),1024,1033,"/**
* Converts the map's values to an array.
* @return An array containing all values or empty if not allocated.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putBytes,com.google.common.hash.AbstractHasher:putBytes(byte[]),63,67,"/**
 * Adds byte array to hash computation.
 * @param bytes input byte array
 * @return this Hasher instance for chaining
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putBytes,com.google.common.hash.AbstractHasher:putBytes(java.nio.ByteBuffer),79,91,"/**
 * Adds bytes from ByteBuffer to the hash.
 * @param b ByteBuffer containing data to add
 * @return This Hasher instance
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,"com.google.common.hash.Hasher:putBytes(byte[],int,int)",66,68,"/**
 * Adds a byte array to the hash.
 * @param bytes source byte array
 * @param off starting offset in the array
 * @param len number of bytes to add
 * @return this hasher instance for method chaining
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,makeHash,com.google.common.hash.Hashing$ConcatenatedHashFunction:makeHash(com.google.common.hash.Hasher[]),798,807,"/**
 * Combines multiple hash codes into one.
 * @param hashers array of Hasher objects to combine
 * @return combined HashCode object
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeTo,"com.google.common.io.BaseEncoding$StandardBaseEncoding:encodeTo(java.lang.Appendable,byte[],int,int)",683,690,"/**
 * Encodes a byte array to an Appendable.
 * @param target destination for encoded data
 * @param bytes source byte array
 * @param off starting offset in the byte array
 * @param len number of bytes to encode
 * @throws IOException if writing fails
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encode,com.google.common.io.BaseEncoding:encode(byte[]),146,148,"/**
 * Encodes byte array to string.
 * @param bytes input byte array
 * @return encoded string representation
 */","Encodes the specified byte array, and returns the encoded {@code String}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,toString,com.google.common.io.ByteSource$ByteArrayByteSource:toString(),640,645,"/**
* Returns a string representation of the byte source.
* @return Truncated hexadecimal encoded bytes for display
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,readFully,"com.google.common.io.ByteStreams:readFully(java.io.InputStream,byte[],int,int)",813,819,"/**
* Reads exactly the specified number of bytes from input stream.
* @param in InputStream to read from
* @param b byte array to store data
* @param off offset within the byte array
* @param len number of bytes to read
* @throws IOException if I/O error occurs or end of stream reached prematurely
*/","* Attempts to read {@code len} bytes from the stream into the given array starting at {@code
   * off}, with the same behavior as {@link DataInput#readFully(byte[], int, int)}. Does not close
   * the stream.
   *
   * @param in the input stream to read from.
   * @param b the buffer into which the data is read.
   * @param off an int specifying the offset into the data.
   * @param len an int specifying the number of bytes to read.
   * @throws EOFException if this stream reaches the end before reading all the bytes.
   * @throws IOException if an I/O error occurs.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,reverse,com.google.common.primitives.Booleans:reverse(boolean[]),539,542,"/**
 * Reverses the elements of a boolean array.
 * @param array the array to be reversed
 */","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Booleans.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,rotate,"com.google.common.primitives.Booleans:rotate(boolean[],int,int,int)",590,612,"/**
 * Rotates a portion of a boolean array.
 * @param array the array to rotate
 * @param distance number of positions to rotate
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Booleans.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * somewhat faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,reverse,com.google.common.primitives.Bytes:reverse(byte[]),390,393,"/**
 * Reverses the elements of a byte array.
 * @param array the byte array to be reversed
 */","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Bytes.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,rotate,"com.google.common.primitives.Bytes:rotate(byte[],int,int,int)",441,463,"/**
 * Rotates a portion of an array by a specified distance.
 * @param array the array to rotate
 * @param distance the number of positions to rotate
 * @param fromIndex the starting index (inclusive)
 * @param toIndex the ending index (exclusive)
 */","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is somewhat
   * faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,sortDescending,"com.google.common.primitives.SignedBytes:sortDescending(byte[],int,int)",211,216,"/**
* Sorts a byte array in descending order within a specified range.
* @param array the byte array to sort
* @param fromIndex the starting index (inclusive)
* @param toIndex the ending index (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,sortDescending,"com.google.common.primitives.Chars:sortDescending(char[],int,int)",467,472,"/**
* Sorts a portion of the char array in descending order.
* @param array the char array to sort
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,reverse,com.google.common.primitives.Chars:reverse(char[]),480,483,"/**
 * Reverses the elements of the given character array.
 * @param array the array to be reversed
 */","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Chars.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,rotate,"com.google.common.primitives.Chars:rotate(char[],int,int,int)",531,553,"/**
 * Rotates a portion of an array by a given distance.
 * @param array the array to rotate
 * @param distance the number of positions to rotate
 * @param fromIndex the starting index of the range to rotate
 * @param toIndex the ending index (exclusive) of the range to rotate
 */","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Chars.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,sortDescending,"com.google.common.primitives.Doubles:sortDescending(double[],int,int)",441,446,"/**
* Sorts a portion of an array in descending order.
* @param array the double array to sort
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,reverse,com.google.common.primitives.Doubles:reverse(double[]),454,457,"/**
 * Reverses elements in the given double array.
 * @param array the array to be reversed; must not be null
 */","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Doubles.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,rotate,"com.google.common.primitives.Doubles:rotate(double[],int,int,int)",505,527,"/**
* Rotates a portion of an array by a specified distance.
* @param array the array to rotate
* @param distance number of positions to rotate
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,sortDescending,"com.google.common.primitives.Floats:sortDescending(float[],int,int)",438,443,"/**
* Sorts a portion of the array in descending order.
* @param array the array to sort
* @param fromIndex the start index (inclusive)
* @param toIndex the end index (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,reverse,com.google.common.primitives.Floats:reverse(float[]),451,454,"/**
 * Reverses elements in the given float array.
 * @param array the float array to be reversed; must not be null
 */","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Floats.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,rotate,"com.google.common.primitives.Floats:rotate(float[],int,int,int)",502,524,"/**
* Rotates a section of an array by a specified distance.
* @param array the array to rotate
* @param distance number of positions to rotate
* @param fromIndex start index of the rotation range (inclusive)
* @param toIndex end index of the rotation range (exclusive)
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Floats.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,subList,"com.google.common.primitives.ImmutableDoubleArray$AsList:subList(int,int)",519,522,"/**
 * Returns a sublist of Double values.
 * @param fromIndex starting index (inclusive)
 * @param toIndex ending index (exclusive)
 * @return List<Double> containing elements from fromIndex to toIndex
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,subList,"com.google.common.primitives.ImmutableIntArray$AsList:subList(int,int)",514,517,"/**
* Returns a sublist of indices from fromIndex (inclusive) to toIndex (exclusive).
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List of integers representing the sublist
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,subList,"com.google.common.primitives.ImmutableLongArray$AsList:subList(int,int)",516,519,"/**
* Returns a sublist of Longs from the parent array.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
* @return List of Longs within the specified range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,sortDescending,"com.google.common.primitives.Ints:sortDescending(int[],int,int)",500,505,"/**
* Sorts a portion of an array in descending order.
* @param array the array to sort
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,reverse,com.google.common.primitives.Ints:reverse(int[]),513,516,"/**
 * Reverses elements of the given integer array.
 * @param array array to be reversed
 */","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Ints.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,rotate,"com.google.common.primitives.Ints:rotate(int[],int,int,int)",564,612,"/**
 * Rotates a portion of an array by a specified distance.
 * @param array the array to rotate
 * @param distance the number of positions to rotate elements
 * @param fromIndex the starting index (inclusive)
 * @param toIndex the ending index (exclusive)
 */","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Ints.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,sortDescending,"com.google.common.primitives.Longs:sortDescending(long[],int,int)",578,583,"/**
* Sorts a portion of an array in descending order.
* @param array the array to sort
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,reverse,com.google.common.primitives.Longs:reverse(long[]),591,594,"/**
 * Reverses elements in the given array.
 * @param array array to be reversed
 */","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Longs.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,rotate,"com.google.common.primitives.Longs:rotate(long[],int,int,int)",642,664,"/**
* Rotates a portion of an array by a specified distance.
* @param array the array to rotate
* @param distance the number of positions to rotate
* @param fromIndex the starting index (inclusive)
* @param toIndex the ending index (exclusive)
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Longs.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,sortDescending,"com.google.common.primitives.Shorts:sortDescending(short[],int,int)",490,495,"/**
* Sorts a portion of a short array in descending order.
* @param array the array to be sorted
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,reverse,com.google.common.primitives.Shorts:reverse(short[]),503,506,"/**
 * Reverses elements of a short array.
 * @param array the array to be reversed
 */","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Shorts.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,rotate,"com.google.common.primitives.Shorts:rotate(short[],int,int,int)",554,576,"/**
 * Rotates a portion of an array by a specified distance.
 * @param array the array to rotate
 * @param distance number of positions to rotate
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Shorts.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sort,com.google.common.primitives.UnsignedBytes:sort(byte[]),516,519,"/**
 * Sorts a byte array in ascending order.
 * @param array the byte array to be sorted
 */","* Sorts the array, treating its elements as unsigned bytes.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sortDescending,com.google.common.primitives.UnsignedBytes:sortDescending(byte[]),545,548,"/**
* Sorts byte array in descending order.
* @param array byte array to be sorted
*/","* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 8-bit
   * integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sort,com.google.common.primitives.UnsignedInts:sort(int[]),224,227,"/**
 * Sorts an integer array using a sorting algorithm.
 * @param array the array to be sorted
 */","* Sorts the array, treating its elements as unsigned 32-bit integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sortDescending,com.google.common.primitives.UnsignedInts:sortDescending(int[]),253,256,"/**
* Sorts an integer array in descending order.
* @param array the array to be sorted
*/","* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 32-bit
   * integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sort,com.google.common.primitives.UnsignedLongs:sort(long[]),188,191,"/**
 * Sorts an array of long integers in ascending order.
 * @param array the array to be sorted
 */","* Sorts the array, treating its elements as unsigned 64-bit integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sortDescending,com.google.common.primitives.UnsignedLongs:sortDescending(long[]),217,220,"/**
* Sorts an array in descending order.
* @param array the array to be sorted
*/","* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 64-bit
   * integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,delegate,com.google.common.collect.FilteredKeyMultimap$Entries:delegate(),192,195,"/**
* Filters entries based on a predicate.
* @return filtered collection of entries
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,toString,com.google.common.util.concurrent.ServiceManager:toString(),437,442,"/**
* Returns string representation of ServiceManager.
* Filters out NoOpService instances from services list.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(java.lang.String),166,195,"/**
* Creates a Splitter for the specified separator.
* @param separator string used to split input strings
* @return Splitter object configured with the given separator
*/","* Returns a splitter that uses the given fixed string as a separator. For example, {@code
   * Splitter.on("", "").split(""foo, bar,baz"")} returns an iterable containing {@code [""foo"",
   * ""bar,baz""]}.
   *
   * @param separator the literal, nonempty string to recognize as a separator
   * @return a splitter, with default settings, that recognizes that separator",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,withKeyValueSeparator,com.google.common.base.Splitter:withKeyValueSeparator(char),442,444,"/**
 * Sets key-value separator.
 * @param separator character to separate keys and values
 * @return MapSplitter instance with specified separator
 */","* Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries
   * into keys and values using the specified separator.
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$ComputingValueReference:<init>(com.google.common.cache.LocalCache$ValueReference),3628,3630,"/**
 * Constructs a new ComputingValueReference wrapping an old value reference.
 * @param oldValue the existing ValueReference to be wrapped
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LoadingValueReference:<init>(),3496,3498,"/**
* Constructs a LoadingValueReference with no initial value.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,createFromSystemTimer,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch:createFromSystemTimer(),474,490,"/**
* Creates a SleepingStopwatch using system timer.
* @return SleepingStopwatch instance with Stopwatch as backend
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,startFinalizer,"com.google.common.base.internal.Finalizer:startFinalizer(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference)",62,110,"/**
 * Starts a finalizer thread for handling phantom references.
 * @param finalizableReferenceClass class used for finalization logic
 * @param queue reference queue for tracking phantom references
 * @param frqReference phantom reference for detecting class loader garbage collection
 */","* Starts the Finalizer thread. FinalizableReferenceQueue calls this method reflectively.
   *
   * @param finalizableReferenceClass FinalizableReference.class.
   * @param queue a reference queue that the thread will poll.
   * @param frqReference a phantom reference to the FinalizableReferenceQueue, which will be queued
   *     either when the FinalizableReferenceQueue is no longer referenced anywhere, or when its
   *     close() method is called.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,builder,com.google.common.collect.ImmutableListMultimap:builder(),193,195,"/**
 * Returns a new Builder instance.
 * @param <K> key type
 * @param <V> value type
 * @return Builder object for constructing instances
 */","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,builder,com.google.common.collect.ImmutableSetMultimap:builder(),221,223,"/**
* Returns a new instance of Builder.
* @param <K> key type
* @param <V> value type
* @return Builder object
*/",Returns a new {@link Builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LoadingSerializationProxy:<init>(com.google.common.cache.LocalCache),4795,4797,"/**
 * Initializes a serialization proxy for LocalCache.
 * @param cache the LocalCache instance to serialize
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,writeReplace,com.google.common.cache.LocalCache$LocalManualCache:writeReplace(),4926,4928,"/**
 * Returns a proxy object for custom serialization.
 * @return ManualSerializationProxy instance with local cache data
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,unmodifiableMultiset,com.google.common.collect.Multisets:unmodifiableMultiset(com.google.common.collect.Multiset),106,114,"/**
* Returns an unmodifiable view of the specified multiset.
* @param multiset the multiset to wrap
* @return an unmodifiable Multiset instance
*/","* Returns an unmodifiable view of the specified multiset. Query operations on the returned
   * multiset ""read through"" to the specified multiset, and attempts to modify the returned multiset
   * result in an {@link UnsupportedOperationException}.
   *
   * <p>The returned multiset will be serializable if the specified multiset is serializable.
   *
   * @param multiset the multiset for which an unmodifiable view is to be generated
   * @return an unmodifiable view of the multiset",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,<init>,com.google.common.collect.UnmodifiableSortedMultiset:<init>(com.google.common.collect.SortedMultiset),40,42,"/**
 * Constructs an unmodifiable sorted multiset backed by the specified sorted multiset.
 * @param delegate the sorted multiset to be wrapped
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,create,com.google.common.collect.EvictingQueue:create(int),66,68,"/**
* Creates an EvictingQueue with a specified maximum size.
* @param maxSize the maximum number of elements the queue can hold
* @return an EvictingQueue instance initialized with the given max size
*/","* Creates and returns a new evicting queue that will hold up to {@code maxSize} elements.
   *
   * <p>When {@code maxSize} is zero, elements will be evicted immediately after being added to the
   * queue.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,<init>,com.google.common.collect.ForwardingBlockingDeque:<init>(),56,56,"/**
* Constructs an empty ForwardingBlockingDeque instance.
*/",Constructor for use by subclasses.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,<init>,com.google.common.util.concurrent.ForwardingBlockingDeque:<init>(),54,54,"/**
 * Constructs an empty ForwardingBlockingDeque instance.
 */",Constructor for use by subclasses.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,get,com.google.common.collect.FilteredKeyMultimap:get(java.lang.Object),103,112,"/**
 * Retrieves values for a given key.
 * @param key the key to look up
 * @return collection of values or an add-rejecting collection if key is invalid
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,<init>,com.google.common.collect.ForwardingNavigableSet:<init>(),56,56,"/**
 * Constructs a new ForwardingNavigableSet instance.
 */",Constructor for use by subclasses.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,com.google.common.collect.Sets$UnmodifiableNavigableSet:<init>(java.util.NavigableSet),1963,1966,"/**
* Wraps a NavigableSet to make it unmodifiable.
* @param delegate the original NavigableSet to wrap
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableEntrySet,com.google.common.collect.Maps:unmodifiableEntrySet(java.util.Set),1482,1485,"/**
 * Returns an unmodifiable view of the specified entry set.
 * @param entrySet the set of map entries to be wrapped
 * @return an unmodifiable set view of the given entry set
 */","* Returns an unmodifiable view of the specified set of entries. The {@link Entry#setValue}
   * operation throws an {@link UnsupportedOperationException}, as do any operations that would
   * modify the returned set.
   *
   * @param entrySet the entries for which to return an unmodifiable view
   * @return an unmodifiable view of the entries",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$SerializationProxy:<init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)",2883,2892,"/**
* Initializes a SerializationProxy for a concurrent map.
* @param keyStrength strength of keys
* @param valueStrength strength of values
* @param keyEquivalence equivalence strategy for keys
* @param valueEquivalence equivalence strategy for values
* @param concurrencyLevel expected concurrency level
* @param delegate the backing ConcurrentMap
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableNavigableMap,com.google.common.collect.Maps:unmodifiableNavigableMap(java.util.NavigableMap),3432,3443,"/**
 * Returns an unmodifiable view of the specified navigable map.
 * @param map the navigable map to wrap
 * @return an unmodifiable navigable map
 */","* Returns an unmodifiable view of the specified navigable map. Query operations on the returned
   * map read through to the specified map, and attempts to modify the returned map, whether direct
   * or via its views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned navigable map will be serializable if the specified navigable map is
   * serializable.
   *
   * <p>This method's signature will not permit you to convert a {@code NavigableMap<? extends K,
   * V>} to a {@code NavigableMap<K, V>}. If it permitted this, the returned map's {@code
   * comparator()} method might return a {@code Comparator<? extends K>}, which works only on a
   * particular subtype of {@code K}, but promise that it's a {@code Comparator<? super K>}, which
   * must work on any type of {@code K}.
   *
   * @param map the navigable map for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified navigable map
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$UnmodifiableNavigableMap:descendingMap(),3584,3590,"/**
* Returns an unmodifiable view of the map in reverse order.
* @return a NavigableMap with elements in descending order
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,readResolve,com.google.common.collect.MutableClassToInstanceMap$SerializedForm:readResolve(),202,204,"/**
* Ensures deserialized instance is properly initialized.
* @return new instance created from backing map
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableListMultimap,com.google.common.collect.Multimaps:unmodifiableListMultimap(com.google.common.collect.ListMultimap),1007,1013,"/**
* Returns an unmodifiable view of the specified ListMultimap.
* @param delegate original ListMultimap to wrap
* @return unmodifiable ListMultimap
*/","* Returns an unmodifiable view of the specified {@code ListMultimap}. Query operations on the
   * returned multimap ""read through"" to the specified multimap, and attempts to modify the returned
   * multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:<init>(com.google.common.collect.SortedSetMultimap),864,866,"/**
 * Constructs an unmodifiable sorted set multimap from a given sorted set multimap.
 * @param delegate the original sorted set multimap to wrap
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableSetMultimap,com.google.common.collect.Multimaps:unmodifiableSetMultimap(com.google.common.collect.SetMultimap),923,929,"/**
 * Returns an unmodifiable view of the specified set multimap.
 * @param delegate the original set multimap to wrap
 * @return an unmodifiable set multimap backed by the given multimap
 */","* Returns an unmodifiable view of the specified {@code SetMultimap}. Query operations on the
   * returned multimap ""read through"" to the specified multimap, and attempts to modify the returned
   * multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,unmodifiableRowSortedTable,com.google.common.collect.Tables:unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable),632,641,"/**
* Returns an unmodifiable view of the specified row sorted table.
* @param table the row sorted table to wrap
* @return an unmodifiable RowSortedTable
*/","* Returns an unmodifiable view of the specified row-sorted table. This method allows modules to
   * provide users with ""read-only"" access to internal tables. Query operations on the returned
   * table ""read through"" to the specified table, and attempts to modify the returned table, whether
   * direct or via its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned table will be serializable if the specified table is serializable.
   *
   * @param table the row-sorted table for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified table
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:<init>(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.ScheduledFuture)",587,591,"/**
* Constructs a ListenableScheduledTask.
* @param listenableDelegate future to be converted into a ListenableFuture
* @param scheduledDelegate underlying scheduled future
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,listenInPoolThread,com.google.common.util.concurrent.JdkFutureAdapters:listenInPoolThread(java.util.concurrent.Future),56,62,"/**
* Wraps a Future in a ListenableFuture.
* @param future the original Future to be wrapped
* @return a ListenableFuture for the given Future
*/","* Assigns a thread to the given {@link Future} to provide {@link ListenableFuture} functionality.
   *
   * <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the
   * returned future will emulate {@link ListenableFuture#addListener} by taking a thread from an
   * internal, unbounded pool at the first call to {@code addListener} and holding it until the
   * future is {@linkplain Future#isDone() done}.
   *
   * <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link
   * MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link
   * ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code
   * Future} instances to be upgraded to {@code ListenableFuture} after the fact.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,hashCode,com.google.common.collect.ImmutableMultiset$EntrySet:hashCode(),401,404,"/**
 * Returns the hash code of the underlying ImmutableMultiset.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,addCallback,"com.google.common.util.concurrent.Futures:addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)",1095,1099,"/**
* Adds a callback to a listenable future.
* @param future the future to attach the callback to
* @param callback the callback to execute upon completion
* @param executor the executor to run the callback on
*/","* Registers separate success and failure callbacks to be run when the {@code Future}'s
   * computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the
   * computation is already complete, immediately.
   *
   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of
   * callbacks, but any callback added through this method is guaranteed to be called once the
   * computation is complete.
   *
   * <p>Exceptions thrown by a {@code callback} will be propagated up to the executor. Any exception
   * thrown during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an
   * exception thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught
   * and logged.
   *
   * <p>Example:
   *
   * {@snippet :
   * ListenableFuture<QueryResult> future = ...;
   * Executor e = ...
   * addCallback(future,
   *     new FutureCallback<QueryResult>() {
   *       public void onSuccess(QueryResult result) {
   *         storeInCache(result);
   *       }
   *       public void onFailure(Throwable t) {
   *         reportError(t);
   *       }
   *     }, e);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the warnings the {@link MoreExecutors#directExecutor} documentation.
   *
   * <p>For a more general interface to attach a completion listener to a {@code Future}, see {@link
   * ListenableFuture#addListener addListener}.
   *
   * @param future The future attach the callback to.
   * @param callback The callback to invoke when {@code future} is completed.
   * @param executor The executor to run {@code callback} when the future completes.
   * @since 10.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache:<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)",246,322,"/**
* Initializes a LocalCache with specified parameters.
* @param builder cache configuration builder
* @param loader optional cache loader for lazy loading entries
*/","* Creates a new, empty map with the specified strategy, initial capacity and concurrency level.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractGraph:inDegree(java.lang.Object),147,150,"/**
 * Calculates the in-degree of a node.
 * @param node the node to calculate in-degree for
 * @return number of edges directed towards the node
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractValueGraph:inDegree(java.lang.Object),147,150,"/**
* Returns the in-degree of a node.
* @param node the node to check
* @return number of incoming edges for directed graphs, total edges otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractGraph:outDegree(java.lang.Object),152,155,"/**
* Returns the out-degree of a node.
* @param node the node to check
* @return number of outgoing edges if directed, total degree otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractValueGraph:outDegree(java.lang.Object),152,155,"/**
* Returns the out-degree of a node.
* @param node the node to check
* @return number of outgoing edges from the node
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractValueGraph$1:degree(java.lang.Object),136,145,"/**
* Calculates the degree of a node.
* @param node the node to calculate degree for
* @return degree of the node in the graph
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,read,com.google.common.io.MoreFiles$PathByteSource:read(),160,165,"/**
 * Reads file content into a byte array.
 * @return byte array containing file data
 * @throws IOException if an I/O error occurs
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,<init>,"com.google.common.collect.EnumBiMap:<init>(java.lang.Class,java.lang.Class)",90,95,"/**
 * Constructs an EnumBiMap with specified key and value types.
 * @param keyTypeOrObjectUnderJ2cl Class of the enum keys
 * @param valueTypeOrObjectUnderJ2cl Class of the enum values
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,<init>,com.google.common.collect.EnumHashBiMap:<init>(java.lang.Class),78,82,"/**
* Constructs an EnumHashBiMap with specified key type.
* @param keyType class representing the enum key type
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,create,com.google.common.collect.TreeMultiset:create(),77,80,"/**
* Creates a TreeMultiset with natural ordering.
* @return TreeMultiset instance sorted by natural order
*/","* Creates a new, empty multiset, sorted according to the elements' natural order. All elements
   * inserted into the multiset must implement the {@code Comparable} interface. Furthermore, all
   * such elements must be <i>mutually comparable</i>: {@code e1.compareTo(e2)} must not throw a
   * {@code ClassCastException} for any elements {@code e1} and {@code e2} in the multiset. If the
   * user attempts to add an element to the multiset that violates this constraint (for example, the
   * user attempts to add a string element to a set whose elements are integers), the {@code
   * add(Object)} call will throw a {@code ClassCastException}.
   *
   * <p>The type specification is {@code <E extends Comparable>}, instead of the more specific
   * {@code <E extends Comparable<? super E>>}, to support classes defined without generics.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,create,com.google.common.collect.TreeMultiset:create(java.util.Comparator),93,99,"/**
* Creates a TreeMultiset with an optional comparator.
* @param comparator custom comparator or null for natural ordering
* @return TreeMultiset instance
*/","* Creates a new, empty multiset, sorted according to the specified comparator. All elements
   * inserted into the multiset must be <i>mutually comparable</i> by the specified comparator:
   * {@code comparator.compare(e1, e2)} must not throw a {@code ClassCastException} for any elements
   * {@code e1} and {@code e2} in the multiset. If the user attempts to add an element to the
   * multiset that violates this constraint, the {@code add(Object)} call will throw a {@code
   * ClassCastException}.
   *
   * @param comparator the comparator that will be used to sort this multiset. A null value
   *     indicates that the elements' <i>natural ordering</i> should be used.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putAll,com.google.common.collect.AbstractBiMap:putAll(java.util.Map),187,192,"/**
* Adds all entries from the specified map to this map.
* @param map source map containing entries to add
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,put,"com.google.common.collect.EnumBiMap:put(java.lang.Object,java.lang.Object)",124,128,"/**
* Puts a key-value pair in the map.
* @param key the key to insert
* @param value the value to associate with the key
* @return the previous value associated with the key or null if none
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,forcePut,"com.google.common.collect.EnumBiMap:forcePut(java.lang.Object,java.lang.Object)",130,134,"/**
* Forces insertion of a key-value pair into both maps.
* @param key the key to insert
* @param value the value associated with the key
* @return the previous value associated with the key or null if none
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,navigableKeySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:navigableKeySet(),1644,1647,"/**
 * Returns a navigable set of keys.
 * @return NavigableSet containing all keys in the map
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,replaceValues,"com.google.common.collect.AbstractListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",105,109,"/**
* Replaces values associated with a key.
* @param key the key to associate with new values
* @param values iterable of new values to be associated with the key
* @return list of old values replaced by new ones
*/","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,replaceValues,"com.google.common.collect.AbstractSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",114,118,"/**
* Replaces all values for a given key.
* @param key the key whose associated values are to be replaced
* @param values the iterable providing new values
* @return the set of old values associated with the key
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,removeAll,com.google.common.collect.AbstractSortedSetMultimap:removeAll(java.lang.Object),102,106,"/**
* Removes all values associated with the specified key.
* @param key the key whose mapped values are to be removed
* @return a sorted set of removed values, possibly empty
*/","* Removes all values associated with a given key. The returned collection is immutable.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollLast,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:pollLast(),1095,1098,"/**
 * Removes and returns the last element of the deque.
 * @return the last element, or null if the deque is empty
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,toString,com.google.common.collect.ImmutableRangeMap:toString(),418,421,"/**
 * Returns string representation of ranges.
 * @return map of ranges as string
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset$EntrySet:toArray(),575,578,"/**
 * Returns an array containing all elements in this collection.
 * @return an array of objects
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset$EntrySet:toArray(java.lang.Object[]),580,584,"/**
* Converts the collection to an array.
* @param array target array for storing elements
* @return array containing all elements of the collection
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,create,com.google.common.collect.HashMultiset:create(int),50,52,"/**
* Creates a HashMultiset with specified capacity.
* @param distinctElements initial capacity for distinct elements
* @return HashMultiset instance initialized with given capacity
*/","* Creates a new, empty {@code HashMultiset} with the specified expected number of distinct
   * elements.
   *
   * @param distinctElements the expected number of distinct elements
   * @throws IllegalArgumentException if {@code distinctElements} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,<init>,"com.google.common.collect.ArrayListMultimap:<init>(int,int)",118,122,"/**
* Constructs a new ArrayListMultimap with specified sizes.
* @param expectedKeys number of keys expected
* @param expectedValuesPerKey average number of values per key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,<init>,"com.google.common.collect.HashMultimap:<init>(int,int)",109,113,"/**
* Initializes a HashMultimap with specified key and value expectations.
* @param expectedKeys the expected number of keys
* @param expectedValuesPerKey the expected average number of values per key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,<init>,com.google.common.collect.HashMultimap:<init>(com.google.common.collect.Multimap),115,118,"/**
* Constructs a new HashMultimap from an existing Multimap.
* @param multimap the source Multimap to copy entries from
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,readObject,com.google.common.collect.HashMultimap:readObject(java.io.ObjectInputStream),143,152,"/**
 * Reads object from input stream.
 * @param stream ObjectInputStream to read from
 * @throws IOException if an I/O error occurs
 * @throws ClassNotFoundException if class not found during deserialization
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,<init>,com.google.common.collect.LinkedListMultimap:<init>(int),184,186,"/**
 * Initializes a new LinkedListMultimap with an estimated size.
 * @param expectedKeys initial capacity hint for keys
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasCycle,com.google.common.graph.Graphs:hasCycle(com.google.common.graph.Network),88,97,"/**
 * Checks for cycles in a network. Returns true if a cycle exists.
 * @param network the graph-like structure to check
 * @return boolean indicating presence of a cycle
 */","* Returns true if {@code network} has at least one cycle. A cycle is defined as a non-empty
   * subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges)
   * starting and ending with the same node.
   *
   * <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,create,com.google.common.collect.LinkedHashMultiset:create(int),58,60,"/**
* Creates a LinkedHashMultiset with a specified capacity.
* @param distinctElements initial capacity for distinct elements
* @return LinkedHashMultiset instance
*/","* Creates a new, empty {@code LinkedHashMultiset} with the specified expected number of distinct
   * elements.
   *
   * @param distinctElements the expected number of distinct elements
   * @throws IllegalArgumentException if {@code distinctElements} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,<init>,"com.google.common.collect.LinkedHashMultimap:<init>(int,int)",264,271,"/**
* Initializes a LinkedHashMultimap with specified capacities.
* @param keyCapacity expected number of keys
* @param valueSetCapacity expected average number of values per key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,readObject,com.google.common.collect.LinkedHashMultimap:readObject(java.io.ObjectInputStream),633,660,"/**
* Deserializes the multimap from an input stream.
* @param stream ObjectInputStream to read from
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,<init>,com.google.common.graph.StandardNetwork:<init>(com.google.common.graph.NetworkBuilder),65,71,"/**
* Initializes a network with specified builder and default configurations.
* @param builder configuration for network construction
*/",Constructs a graph with the properties specified in {@code builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,<init>,com.google.common.graph.StandardValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder),56,62,"/**
 * Constructs a StandardValueGraph using the provided builder.
 * @param builder configuration for graph construction
 */",Constructs a graph with the properties specified in {@code builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,forceJdk,com.google.common.collect.ImmutableSet$Builder:forceJdk(),497,501,"/**
* Forces JDK implementation for set builder.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copy,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:copy(),964,967,"/**
 * Creates a copy of this set builder.
 * @return a new instance of JdkBackedSetBuilderImpl containing the same elements
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,createCollection,com.google.common.collect.HashMultimap:createCollection(),127,130,"/**
* Creates a new hash set with an expected size.
* @return HashSet initialized with expected capacity
*/","* {@inheritDoc}
   *
   * <p>Creates an empty {@code HashSet} for a collection of values for one key.
   *
   * @return a new {@code HashSet} containing a collection of values for one key",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,get,com.google.common.collect.MultimapBuilder$HashSetSupplier:get(),221,224,"/**
* Returns a new HashSet with an expected size.
* @return HashSet initialized with expected capacity
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,createCollection,com.google.common.collect.LinkedHashMultimap:createCollection(),280,283,"/**
 * Creates a new linked hash set with expected size.
 * @return LinkedHashSet with specified capacity
 */","* {@inheritDoc}
   *
   * <p>Creates an empty {@code LinkedHashSet} for a collection of values for one key.
   *
   * @return a new {@code LinkedHashSet} containing a collection of values for one key",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,get,com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:get(),235,238,"/**
 * Returns a new linked hash set with expected size.
 * @return LinkedHashSet instance initialized with expected capacity
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollFirstEntry,com.google.common.collect.TreeMultiset:pollFirstEntry(),78,88,"/**
* Removes and returns the first entry from the multiset.
* @return ImmutableEntry object or null if the multiset is empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollLastEntry,com.google.common.collect.TreeMultiset:pollLastEntry(),90,100,"/**
* Removes and returns the last entry in descending order.
* @return Immutable Entry or null if no entries are present
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,firstEntry,com.google.common.collect.RegularImmutableSortedMultiset:firstEntry(),79,82,"/**
 * Retrieves the first entry in the collection.
 * @return the first Entry or null if the collection is empty
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,lastEntry,com.google.common.collect.RegularImmutableSortedMultiset:lastEntry(),84,87,"/**
* Returns the last entry in the collection.
* @return the last Entry object or null if the collection is empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset:toArray(),168,171,"/**
 * Converts collection to array.
 * @return Array containing all elements in the collection.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset:toArray(java.lang.Object[]),173,177,"/**
 * Converts the list to an array.
 * @param array target array for conversion
 * @return array containing all elements of the list
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,createDescendingSet,com.google.common.collect.ContiguousSet:createDescendingSet(),243,247,"/**
* Creates a descending set from this sorted set.
* @return a new DescendingImmutableSortedSet instance
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,createDescendingSet,com.google.common.collect.ImmutableRangeSet$AsSet:createDescendingSet(),696,699,"/**
 * Creates a descending sorted set from the current set.
 * @return A new ImmutableSortedSet with elements in descending order
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$DescendingMap:comparator(),4285,4297,"/**
* Returns the comparator for keys, defaulting to natural order.
* @return Comparator for keys
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,comparator,com.google.common.collect.Sets$DescendingSet:comparator(),2234,2243,"/**
 * Returns the comparator for elements, defaulting to natural order reversed.
 * @return Comparator for elements
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,put,"com.google.common.collect.ImmutableTable$Builder:put(java.lang.Object,java.lang.Object,java.lang.Object)",220,224,"/**
* Adds a cell with specified row and column keys and value.
* @param rowKey key for the row
* @param columnKey key for the column
* @param value value to store in the cell
* @return this Builder instance for method chaining
*/","* Associates the ({@code rowKey}, {@code columnKey}) pair with {@code value} in the built
     * table. Duplicate key pairs are not allowed and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,size,com.google.common.collect.ImmutableMultiset$EntrySet:size(),383,386,"/**
 * Returns the number of elements in this collection.
 * @return the number of elements
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,put,"com.google.common.collect.ImmutableBiMap$Builder:put(java.lang.Object,java.lang.Object)",355,360,"/**
* Adds a key-value pair to the map.
* @param key the key to add
* @param value the value associated with the key
* @return this Builder instance for chaining
*/","* Associates {@code key} with {@code value} in the built bimap. Duplicate keys or values are
     * not allowed, and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,put,"com.google.common.collect.ImmutableClassToInstanceMap$Builder:put(java.lang.Class,java.lang.Object)",105,109,"/**
* Adds a key-value pair to the map.
* @param key class type of the key
* @param value instance of the value
* @return current Builder instance for chaining
*/","* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,
     * and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,putAll,com.google.common.collect.ImmutableClassToInstanceMap$Builder:putAll(java.util.Map),118,126,"/**
 * Adds all entries from the given map to the builder.
 * @param map map containing class-type keys and corresponding values
 * @return this Builder instance for method chaining
 */","* Associates all of {@code map's} keys and values in the built map. Duplicate keys are not
     * allowed, and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code map} is null
     * @throws ClassCastException if any value is not an instance of the type specified by its key",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,put,com.google.common.collect.ImmutableMap$Builder:put(java.util.Map$Entry),467,470,"/**
* Adds an entry to the builder.
* @param entry key-value pair to add
* @return this builder instance
*/","* Adds the given {@code entry} to the map, making it immutable if necessary. If the same key is
     * put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will
     * keep the last value put for that key.
     *
     * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,put,"com.google.common.collect.ImmutableSortedMap$Builder:put(java.lang.Object,java.lang.Object)",628,633,"/**
* Adds a key-value pair to the map.
* @param key unique identifier for the value
* @param value associated with the key
* @return current Builder instance
*/","* Associates {@code key} with {@code value} in the built map. Duplicate keys, according to the
     * comparator (which might be the keys' natural order), are not allowed, and will cause {@link
     * #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,put,"com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:put(java.lang.Class,java.lang.Object)",70,74,"/**
* Adds an entry to the builder map.
* @param key class type of the value
* @param value instance to be added
* @return this Builder instance
*/","* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,
     * and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,put,"com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:put(com.google.common.reflect.TypeToken,java.lang.Object)",80,84,"/**
* Adds a key-value pair to the builder.
* @param key TypeToken representing the key
* @param value the value associated with the key
* @return the Builder instance for chaining
*/","* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,
     * and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,putAll,com.google.common.collect.ImmutableListMultimap$Builder:putAll(java.lang.Iterable),277,282,"/**
 * Adds all entries to this map.
 * @param entries iterable of key-value pairs to add
 * @return current builder instance for method chaining
 */","* {@inheritDoc}
     *
     * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,putAll,com.google.common.collect.ImmutableSetMultimap$Builder:putAll(java.lang.Iterable),326,331,"/**
* Adds all entries to the builder.
* @param entries iterable containing key-value pairs
* @return this builder instance for method chaining
*/","* {@inheritDoc}
     *
     * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,filter,"com.google.common.collect.Sets:filter(java.util.NavigableSet,com.google.common.base.Predicate)",1266,1278,"/**
* Filters a NavigableSet based on a predicate.
* @param unfiltered the original NavigableSet to filter
* @param predicate the condition to apply for filtering elements
* @return a new FilteredNavigableSet containing only elements that match the predicate
*/","* Returns the elements of a {@code NavigableSet}, {@code unfiltered}, that satisfy a predicate.
   * The returned set is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting set's iterator does not support {@code remove()}, but all other set methods
   * are supported. When given an element that doesn't satisfy the predicate, the set's {@code
   * add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods
   * such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements
   * that satisfy the filter will be removed from the underlying set.
   *
   * <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in
   * the underlying set and determine which elements satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and
   * use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,filter,"com.google.common.collect.Sets:filter(java.util.Set,com.google.common.base.Predicate)",1189,1203,"/**
* Filters elements of a set based on a predicate.
* @param unfiltered the original set to filter
* @param predicate the condition to apply for filtering
* @return a new set containing only elements that match the predicate
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,forEach,com.google.common.collect.CompactHashMap$KeySetView:forEach(java.util.function.Consumer),754,765,"/**
* Applies the given action to each key in the map.
* @param action the action to be performed on each key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,forEach,com.google.common.collect.CompactHashMap$ValuesView:forEach(java.util.function.Consumer),1000,1011,"/**
* Applies the given action to each value in the map.
* @param action the action to be performed on each value
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactHashMap:convertToHashFloodingResistantImplementation(),296,308,"/**
* Converts the map to a hash flooding resistant implementation.
* @return A new hash flooding resistant Map instance
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,forEach,com.google.common.collect.CompactHashMap:forEach(java.util.function.BiConsumer),782,793,"/**
* Iterates over entries, applying an action to each key-value pair.
* @param action the consumer function to apply to each entry
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactHashSet:convertToHashFloodingResistantImplementation(),260,271,"/**
 * Converts the set to a hash flooding resistant implementation.
 * @return A new Set with improved resistance against hash flooding
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,forEach,com.google.common.collect.CompactHashSet:forEach(java.util.function.Consumer),602,613,"/**
* Applies the given action to each element.
* @param action consumer to apply to each element
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,insertEntry,"com.google.common.collect.CompactLinkedHashMap:insertEntry(int,java.lang.Object,java.lang.Object,int,int)",181,187,"/**
* Inserts an entry into the map.
* @param entryIndex index of the new entry
* @param key key of the entry
* @param value value of the entry
* @param hash computed hash of the key
* @param mask bitmask for hash calculation
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,accessEntry,com.google.common.collect.CompactLinkedHashMap:accessEntry(int),189,199,"/**
* Adjusts entry access order by moving it to the end.
* @param index position of the entry to be accessed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,moveLastEntry,"com.google.common.collect.CompactLinkedHashMap:moveLastEntry(int,int)",201,212,"/**
 * Moves the last entry to a specified index.
 * @param dstIndex destination index for the move
 * @param mask bitmask for additional processing
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,<init>,"com.google.common.collect.ImmutableSetMultimap:<init>(com.google.common.collect.ImmutableMap,int,java.util.Comparator)",513,519,"/**
* Constructs an ImmutableSetMultimap from a map and comparator.
* @param map backing map with keys and immutable sets of values
* @param size total size of the multimap
* @param valueComparator optional comparator for values, may be null
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,buildOrThrow,com.google.common.collect.ImmutableSortedMap$Builder:buildOrThrow(),727,739,"/**
* Builds and returns an immutable sorted map.
* @return ImmutableSortedMap object with entries based on comparator
*/","* Returns a newly-created immutable sorted map, or throws an exception if any two keys are
     * equal.
     *
     * @throws IllegalArgumentException if any two keys are equal according to the comparator (which
     *     might be the keys' natural order)
     * @since 31.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,emptyMultiset,com.google.common.collect.ImmutableSortedMultiset:emptyMultiset(java.util.Comparator),317,324,"/**
* Returns an empty immutable sorted multiset with a specified comparator.
* @param comparator the comparator to use for ordering elements
* @return an empty ImmutableSortedMultiset instance
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap:get(java.lang.Comparable),120,124,"/**
* Retrieves value by key.
* @param key key to search for
* @return associated value or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,put,"com.google.common.collect.ImmutableRangeMap$Builder:put(com.google.common.collect.Range,java.lang.Object)",123,130,"/**
* Adds a key-value pair to the builder.
* @param range non-empty range of keys
* @param value associated value
* @return this Builder instance for method chaining
*/","* Associates the specified range with the specified value.
     *
     * @throws IllegalArgumentException if {@code range} is empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,add,com.google.common.collect.ImmutableRangeSet$Builder:add(com.google.common.collect.Range),772,777,"/**
* Adds a non-empty range to the builder.
* @param range the range to add
* @return this Builder instance
*/","* Add the specified range to this builder. Adjacent ranges are permitted and will be merged,
     * but overlapping ranges will cause an exception when {@link #build()} is called.
     *
     * @throws IllegalArgumentException if {@code range} is empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,entryIterator,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:entryIterator(),768,793,"/**
* Returns an iterator over entries within a specified sub-range.
* @return Iterator of RangeMap entries intersecting with subRange
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,entryIterator,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:entryIterator(),773,813,"/**
* Returns an iterator over ranges within the restriction.
* @return Iterator of Entry<Cut<C>, Range<C>> or empty if no valid ranges
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,descendingEntryIterator,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:descendingEntryIterator(),815,849,"/**
 * Returns an iterator for entries in descending order within the restriction.
 * @return Iterator of Entry<Cut<C>, Range<C>> or empty if no applicable entries
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,replaceRangeWithSameLowerBound,com.google.common.collect.TreeRangeSet:replaceRangeWithSameLowerBound(com.google.common.collect.Range),267,273,"/**
* Updates map with new range or removes empty range.
* @param range the Range to update or remove
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,complement,com.google.common.collect.ImmutableRangeSet:complement(),384,398,"/**
* Returns the complement of this range set.
* @return ImmutableRangeSet representing the complement ranges
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,readResolve,com.google.common.collect.Range:readResolve(),704,710,"/**
* Returns singleton instance or self.
* @return Singleton instance if equals ALL, otherwise self
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap$AsMapOfRanges:get(java.lang.Object),361,371,"/**
 * Retrieves value by key, supporting Range keys.
 * @param key the key to look up; can be a Range or any other object
 * @return the associated value if found, otherwise null
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,subRangeMap,com.google.common.collect.TreeRangeMap:subRangeMap(com.google.common.collect.Range),384,391,"/**
* Returns a sub-range map limited by the specified range.
* @param subRange the range to limit the map to
* @return RangeMap limited to the given range or this map if it matches all values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,size,com.google.common.collect.TreeRangeSet$RangesByUpperBound:size(),433,439,"/**
* Returns the number of elements within the range.
* @return Size of the range based on bounds
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,isEmpty,com.google.common.collect.TreeRangeSet$RangesByUpperBound:isEmpty(),441,446,"/**
* Checks if all range entries are empty.
* @return true if no entries or all within unbounded range, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subRangeSet,com.google.common.collect.TreeRangeSet:subRangeSet(com.google.common.collect.Range),857,860,"/**
 * Returns a subset of this range set constrained by the given range.
 * @param view the range to constrain the result
 * @return a RangeSet containing only the ranges within the specified view
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,containsKey,com.google.common.collect.TreeRangeSet$RangesByUpperBound:containsKey(java.lang.Object),337,340,"/**
 * Checks if the map contains the specified key.
 * @param key key whose presence in this map is to be tested
 * @return true if this map contains a mapping for the specified key, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,span,com.google.common.collect.ImmutableRangeMap:span(),215,223,"/**
* Returns the overall range spanning all individual ranges.
* @throws NoSuchElementException if no ranges are present
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,get,com.google.common.collect.ImmutableRangeSet$ComplementRanges:get(int),349,368,"/**
 * Retrieves a range at the specified index.
 * @param index position of the range to retrieve
 * @return Range object at the given index
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,span,com.google.common.collect.ImmutableRangeSet:span(),212,218,"/**
* Returns the overall range spanning all individual ranges.
* @return Range object covering the entire span of all ranges
* @throws NoSuchElementException if no ranges are present
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,intersection,com.google.common.collect.Range:intersection(com.google.common.collect.Range),536,557,"/**
* Computes intersection of two connected ranges.
* @param connectedRange another Range object to intersect with
* @return Range representing intersection or throws IllegalArgumentException if disconnected
*/","* Returns the maximal range {@linkplain #encloses enclosed} by both this range and {@code
   * connectedRange}, if such a range exists.
   *
   * <p>For example, the intersection of {@code [1..5]} and {@code (3..7)} is {@code (3..5]}. The
   * resulting range may be empty; for example, {@code [1..5)} intersected with {@code [5..7)}
   * yields the empty range {@code [5..5)}.
   *
   * <p>The intersection exists if and only if the two ranges are {@linkplain #isConnected
   * connected}.
   *
   * <p>The intersection operation is commutative, associative and idempotent, and its identity
   * element is {@link Range#all}).
   *
   * @throws IllegalArgumentException if {@code isConnected(connectedRange)} is {@code false}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,gap,com.google.common.collect.Range:gap(com.google.common.collect.Range),576,597,"/**
* Calculates the gap between two ranges.
* @param otherRange the range to compare with
* @return a new Range representing the gap or throws if ranges overlap
*/","* Returns the maximal range lying between this range and {@code otherRange}, if such a range
   * exists. The resulting range may be empty if the two ranges are adjacent but non-overlapping.
   *
   * <p>For example, the gap of {@code [1..5]} and {@code (7..10)} is {@code (5..7]}. The resulting
   * range may be empty; for example, the gap between {@code [1..5)} {@code [5..7)} yields the empty
   * range {@code [5..5)}.
   *
   * <p>The gap exists if and only if the two ranges are either disconnected or immediately adjacent
   * (any intersection must be an empty range).
   *
   * <p>The gap operation is commutative.
   *
   * @throws IllegalArgumentException if this range and {@code otherRange} have a nonempty
   *     intersection
   * @since 27.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,span,com.google.common.collect.Range:span(com.google.common.collect.Range),610,622,"/**
 * Returns the smallest range that encloses both this and another range.
 * @param other the range to combine with
 * @return a new Range enclosing both ranges
 */","* Returns the minimal range that {@linkplain #encloses encloses} both this range and {@code
   * other}. For example, the span of {@code [1..3]} and {@code (5..7)} is {@code [1..7)}.
   *
   * <p><i>If</i> the input ranges are {@linkplain #isConnected connected}, the returned range can
   * also be called their <i>union</i>. If they are not, note that the span might contain values
   * that are not contained in either input range.
   *
   * <p>Like {@link #intersection(Range) intersection}, this operation is commutative, associative
   * and idempotent. Unlike it, it is always well-defined for any two input ranges.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,canonical,com.google.common.collect.Range:canonical(com.google.common.collect.DiscreteDomain),648,653,"/**
* Returns a canonical Range with bounds adjusted to the domain.
* @param domain discrete domain for bounds adjustment
* @return canonical Range object
*/","* Returns the canonical form of this range in the given domain. The canonical form has the
   * following properties:
   *
   * <ul>
   *   <li>equivalence: {@code a.canonical().contains(v) == a.contains(v)} for all {@code v} (in
   *       other words, {@code ContiguousSet.create(a.canonical(domain), domain).equals(
   *       ContiguousSet.create(a, domain))}
   *   <li>uniqueness: unless {@code a.isEmpty()}, {@code ContiguousSet.create(a,
   *       domain).equals(ContiguousSet.create(b, domain))} implies {@code
   *       a.canonical(domain).equals(b.canonical(domain))}
   *   <li>idempotence: {@code a.canonical(domain).canonical(domain).equals(a.canonical(domain))}
   * </ul>
   *
   * <p>Furthermore, this method guarantees that the range returned will be one of the following
   * canonical forms:
   *
   * <ul>
   *   <li>[start..end)
   *   <li>[start..+∞)
   *   <li>(-∞..end) (only if type {@code C} is unbounded below)
   *   <li>(-∞..+∞) (only if type {@code C} is unbounded below)
   * </ul>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,range,"com.google.common.collect.RegularContiguousSet:range(com.google.common.collect.BoundType,com.google.common.collect.BoundType)",216,221,"/**
 * Creates a new range with specified bound types.
 * @param lowerBoundType type for the lower bound
 * @param upperBoundType type for the upper bound
 * @return Range object with updated bounds
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,<init>,"com.google.common.collect.TreeRangeMap$RangeMapEntry:<init>(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object)",99,101,"/**
* Constructs a RangeMapEntry with specified bounds and value.
* @param lowerBound the inclusive or exclusive lower bound
* @param upperBound the inclusive or exclusive upper bound
* @param value the associated value for the range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,span,com.google.common.collect.TreeRangeMap$SubRangeMap:span(),500,526,"/**
 * Finds the span of entries within a specified range.
 * @return Range<K> representing the span or throws NoSuchElementException if not found
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,span,com.google.common.collect.TreeRangeMap:span(),195,205,"/**
* Returns the overall range spanned by all entries in the map.
* @return Range object representing the span
* @throws NoSuchElementException if no entries are present
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,span,com.google.common.collect.TreeRangeSet:span(),163,175,"/**
* Returns the overall span of all ranges.
* @return Range spanning from the lower bound of the first range to the upper bound of the last range
* @throws NoSuchElementException if no ranges are present
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,getCount,com.google.common.collect.TreeMultiset$1:getCount(),1037,1039,"/**
 * Returns the count of elements.
 * @return current element count
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,forEachEntry,com.google.common.collect.TreeMultiset:forEachEntry(java.util.function.ObjIntConsumer),532,540,"/**
* Iterates over entries in the AVL tree, applying an action to each.
* @param action consumer that accepts element and its count
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,create,com.google.common.collect.HashBiMap:create(),66,68,"/**
* Creates a new empty HashBiMap with an initial capacity of 16.
* @return a new HashBiMap instance
*/","Returns a new, empty {@code HashBiMap} with the default initial capacity (16).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,create,com.google.common.collect.HashBiMap:create(java.util.Map),85,90,"/**
* Creates a HashBiMap from the given map.
* @param map source map to initialize the bi-map with
* @return HashBiMap containing entries from the provided map
*/","* Constructs a new bimap containing initial values from {@code map}. The bimap is created with an
   * initial capacity sufficient to hold the mappings in the specified map.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,of,com.google.common.graph.DirectedNetworkConnections:of(),41,44,"/**
* Creates a new directed network connections instance.
* @param <N> node type
* @param <E> edge type
* @return DirectedNetworkConnections object with expected degree
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,of,com.google.common.graph.UndirectedNetworkConnections:of(),41,43,"/**
* Creates an empty undirected network connections instance.
* @return UndirectedNetworkConnections object initialized with HashBiMap
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap:remove(java.lang.Object),522,532,"/**
* Removes entry by key.
* @param key the key of the entry to remove
* @return removed value or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,replaceAll,com.google.common.collect.HashBiMap:replaceAll(java.util.function.BiFunction),580,588,"/**
* Replaces all values using a transformation function.
* @param function mapping function for key-value pairs
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,builder,com.google.common.collect.ImmutableClassToInstanceMap:builder(),74,76,"/**
 * Returns a new instance of Builder.
 * @param <B> type parameter for the builder
 * @return Builder object for constructing instances
 */","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,of,"com.google.common.collect.ImmutableClassToInstanceMap:of(java.lang.Class,java.lang.Object)",65,68,"/**
* Creates an ImmutableClassToInstanceMap with a single entry.
* @param type Class of the value
* @param value Instance to be mapped
* @return ImmutableClassToInstanceMap containing the specified type and value
*/","* Returns an {@code ImmutableClassToInstanceMap} containing a single entry.
   *
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,asImmutable,com.google.common.collect.ImmutableEnumMap:asImmutable(java.util.EnumMap),42,52,"/**
* Converts an EnumMap to an ImmutableMap.
* @param map the input EnumMap to convert
* @return an ImmutableMap with the same key-value pairs as the input map
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,column,com.google.common.collect.SingletonImmutableTable:column(java.lang.Object),47,53,"/**
* Retrieves a column from the map by key.
* @param columnKey unique column identifier
* @return ImmutableMap containing rows and values for the specified column or empty if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,columnMap,com.google.common.collect.SingletonImmutableTable:columnMap(),55,58,"/**
* Returns an immutable map with a single column and row.
* @return ImmutableMap where C is the column key, R is the row key, and V is the value
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,rowMap,com.google.common.collect.SingletonImmutableTable:rowMap(),60,63,"/**
 * Returns an immutable map representing a single row with one column-value pair.
 * @return ImmutableMap with R as the row key type, C as the column key type, and V as the value type
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,values,com.google.common.collect.ImmutableBiMap:values(),589,592,"/**
 * Returns an immutable set of all values in the map.
 * Uses the inverse map's key set to derive the values.
 * @return ImmutableSet containing all values
 */","* Returns an immutable set of the values in this map, in the same order they appear in {@link
   * #entrySet}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,readResolve,com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm:readResolve(),335,337,"/**
 * Returns the inverse of the forward mapping.
 * @return Inversed mapping object
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,getEntry,com.google.common.collect.DescendingImmutableSortedMultiset:getEntry(int),60,63,"/**
 * Retrieves entry at specified index from reversed order.
 * @param index position in the reversed list
 * @return Entry object at given index
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,asDescendingMapOfRanges,com.google.common.collect.ImmutableRangeMap:asDescendingMapOfRanges(),317,325,"/**
* Returns an immutable map of ranges in descending order.
* @return ImmutableMap with Range<K> as key and V as value, sorted by range in descending order
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,asDescendingSetOfRanges,com.google.common.collect.ImmutableRangeSet:asDescendingSetOfRanges(),311,317,"/**
 * Returns an immutable set of ranges in descending order.
 * @return ImmutableSet of Range objects sorted in reverse order
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,descendingMap,com.google.common.collect.ImmutableSortedMap:descendingMap(),1109,1126,"/**
* Returns a descending view of the map.
* @return ImmutableSortedMap with keys in reverse order
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,reverse,com.google.common.collect.Lists:reverse(java.util.List),847,861,"/**
* Reverses the given list.
* @param list the list to reverse
* @return a new list with elements in reverse order
*/","* Returns a reversed view of the specified list. For example, {@code
   * Lists.reverse(Arrays.asList(1, 2, 3))} returns a list containing {@code 3, 2, 1}. The returned
   * list is backed by this list, so changes in the returned list are reflected in this list, and
   * vice-versa. The returned list supports all of the optional list operations supported by this
   * list.
   *
   * <p>The returned list is random-access if the specified list is random access.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,descendingIterator,com.google.common.collect.RegularImmutableSortedSet:descendingIterator(),74,78,"/**
* Returns an iterator over elements in reverse order.
* @return UnmodifiableIterator of elements in descending order
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,createDescendingSet,com.google.common.collect.RegularImmutableSortedSet:createDescendingSet(),319,325,"/**
* Creates a descending set from the elements.
* @return ImmutableSortedSet with elements in reverse order
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,subList,"com.google.common.collect.Lists$StringAsImmutableList:subList(int,int)",785,789,"/**
* Returns a sublist of characters.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
* @return ImmutableList containing characters in the specified range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.lang.Object[]),291,300,"/**
 * Creates an immutable list from the given array.
 * @param elements array of elements to include in the list
 * @return ImmutableList containing the elements
 */","* Returns an immutable list containing the given elements, in order.
   *
   * @throws NullPointerException if {@code elements} contains a null element
   * @since 3.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,asImmutableList,"com.google.common.collect.ImmutableList:asImmutableList(java.lang.Object[],int)",368,390,"/**
* Converts an array to an immutable list.
* @param elements source array of objects
* @param length number of valid elements in the array
* @return ImmutableList containing elements up to specified length
*/","* Views the array as an immutable list. Copies if the specified range does not cover the complete
   * array. Does not check for nulls.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,subList,"com.google.common.collect.ImmutableList:subList(int,int)",453,466,"/**
 * Returns a sublist from the specified range.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 * @return ImmutableList containing elements from fromIndex to toIndex
 */","* Returns an immutable list of the elements between the specified {@code fromIndex}, inclusive,
   * and {@code toIndex}, exclusive. (If {@code fromIndex} and {@code toIndex} are equal, the empty
   * immutable list is returned.)
   *
   * <p><b>Note:</b> in almost all circumstances, the returned {@link ImmutableList} retains a
   * strong reference to {@code this}, which may prevent the original list from being garbage
   * collected. If you want the original list to be eligible for garbage collection, you should
   * create and use a copy of the sub list (e.g., {@code
   * ImmutableList.copyOf(originalList.subList(...))}).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,of,"com.google.common.collect.ImmutableRangeMap:of(com.google.common.collect.Range,java.lang.Object)",80,82,"/**
* Creates an immutable range map with a single entry.
* @param range key range for the map entry
* @param value value associated with the range
* @return ImmutableRangeMap containing the specified range and value
*/",Returns an immutable range map mapping a single range to a single value.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,readResolve,com.google.common.collect.ImmutableRangeSet$SerializedForm:readResolve(),855,863,"/**
* Custom deserialization method for RangeSet.
* @return appropriate instance based on ranges state
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,of,com.google.common.collect.ImmutableRangeSet:of(com.google.common.collect.Range),92,101,"/**
* Creates an ImmutableRangeSet from a single range.
* @param range the range to include in the set
* @return an ImmutableRangeSet containing the specified range
*/","* Returns an immutable range set containing the specified single range. If {@link Range#isEmpty()
   * range.isEmpty()}, this is equivalent to {@link ImmutableRangeSet#of()}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,of,"com.google.common.collect.ImmutableSortedMap:of(java.util.Comparator,java.lang.Object,java.lang.Object)",146,150,"/**
* Creates an immutable sorted map with one entry.
* @param comparator key comparator
* @param k1 key for the entry
* @param v1 value for the entry
* @return ImmutableSortedMap containing the single entry
*/",Returns an immutable map containing a single entry.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableSet.java,asList,com.google.common.collect.SingletonImmutableSet:asList(),60,63,"/**
 * Returns an immutable list containing the single element.
 * @return ImmutableList of E with one element
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,userPermissions,com.google.common.io.TempFileCreator$JavaNioCreator:userPermissions(),166,199,"/**
* Provides user permissions for file operations.
* @return PermissionSupplier with ACL entries or throws IOException if user lookup fails
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,collectTypes,com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Object),1376,1378,"/**
 * Collects and returns an immutable list containing the specified type.
 * @param type the element to include in the list
 * @return an immutable list with the given type
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,asImmutable,com.google.common.collect.ImmutableEnumSet:asImmutable(java.util.EnumSet),42,51,"/**
* Converts an EnumSet to an ImmutableSet.
* @param set the EnumSet to convert
* @return an ImmutableSet containing the same elements as the input set
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,get,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:get(java.lang.Object),1146,1150,"/**
* Retrieves a set containing the value associated with the given key.
* @param key the key to look up
* @return an ImmutableSet containing the value if found, or null if not
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:build(),801,825,"/**
 * Constructs an immutable set from the deduplicated elements.
 * @return ImmutableSet containing unique elements
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.lang.Object[]),253,255,"/**
* Creates an immutable set from an array.
* @param elements the source array of elements
* @return an ImmutableSet containing the elements
*/","* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order
   * each appears first in the source array.
   *
   * @throws NullPointerException if any of {@code elements} is null
   * @since 3.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,createEntrySet,com.google.common.collect.SingletonImmutableBiMap:createEntrySet(),87,90,"/**
* Creates an immutable set containing a single entry.
* @return ImmutableSet with one Entry<K, V>
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,createKeySet,com.google.common.collect.SingletonImmutableBiMap:createKeySet(),92,95,"/**
 * Creates an immutable set containing a single key.
 * @return ImmutableSet with one key
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,createCellSet,com.google.common.collect.SingletonImmutableTable:createCellSet(),70,73,"/**
* Creates an immutable set containing a single cell.
* @return ImmutableSet with one Cell object
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,createValues,com.google.common.collect.SingletonImmutableTable:createValues(),75,78,"/**
 * Creates an immutable collection containing a single value.
 * @return ImmutableSet with one element
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,adjacentEdges,com.google.common.graph.AbstractNetwork:adjacentEdges(java.lang.Object),163,170,"/**
* Returns adjacent edges to the given edge.
* @param edge the edge in the network
* @return a set of edges that share a node with the given edge
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,iterator,com.google.common.collect.ImmutableSet$CachingAsList:iterator(),338,341,"/**
 * Returns an unmodifiable iterator over the elements.
 * @return Iterator of elements in this collection
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,containsAll,com.google.common.collect.RegularImmutableSortedSet:containsAll(java.util.Collection),104,154,"/**
* Checks if all elements of the given collection are contained.
* @param targets collection to check for containment
* @return true if all elements are present, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,isAnnotationPresent,com.google.common.reflect.Parameter:isAnnotationPresent(java.lang.Class),72,75,"/**
* Checks if an annotation of the specified type is present.
* @param annotationType the Class object corresponding to the annotation type
* @return true if the annotation is present, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,builder,com.google.common.collect.ImmutableSet:builder(),433,435,"/**
 * Returns a new instance of Builder.
 * @param <E> type parameter for the builder
 * @return Builder instance
 */","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,valuesBuilder,com.google.common.collect.ImmutableSetMultimap:valuesBuilder(java.util.Comparator),654,659,"/**
* Creates a builder for an immutable set, optionally sorted.
* @param valueComparator comparator to sort values; may be null
* @return ImmutableSet.Builder or ImmutableSortedSet.Builder based on comparator
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyIfNecessary,com.google.common.collect.ImmutableSet$Builder:copyIfNecessary(),503,508,"/**
* Copies data if forced.
* @param forceCopy flag to determine if copy is necessary
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,putAll,com.google.common.collect.ImmutableListMultimap$Builder:putAll(com.google.common.collect.Multimap),298,303,"/**
* Adds all entries from another multimap.
* @param multimap source multimap to add entries from
* @return current Builder instance for chaining
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,combine,com.google.common.collect.ImmutableListMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder),305,310,"/**
 * Combines another ImmutableMultimap builder into this one.
 * @param other the builder to combine with
 * @return this builder instance
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,combine,com.google.common.collect.ImmutableSetMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder),356,361,"/**
* Combines another ImmutableMultimap builder.
* @param other builder to combine with
* @return current builder instance
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,putAll,com.google.common.collect.ImmutableSetMultimap$Builder:putAll(com.google.common.collect.Multimap),346,354,"/**
* Adds all entries from the specified multimap.
* @param multimap source of entries to add
* @return this Builder instance for chaining
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,"com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator)",502,507,"/**
* Concatenates two iterators.
* @param a first iterator
* @param b second iterator
* @return combined iterator of elements from both
*/","* Combines two iterators into a single iterator. The returned iterator iterates across the
   * elements in {@code a}, followed by the elements in {@code b}. The source iterators are not
   * polled until necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,"com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator,java.util.Iterator)",517,523,"/**
 * Concatenates three iterators into one.
 * @param a first iterator
 * @param b second iterator
 * @param c third iterator
 * @return Iterator containing elements from a, b, and c in sequence
 */","* Combines three iterators into a single iterator. The returned iterator iterates across the
   * elements in {@code a}, followed by the elements in {@code b}, followed by the elements in
   * {@code c}. The source iterators are not polled until necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,"com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator,java.util.Iterator,java.util.Iterator)",534,544,"/**
* Concatenates four iterators into one.
* @param a,b,c,d iterators to concatenate
* @return Iterator containing elements from all input iterators
*/","* Combines four iterators into a single iterator. The returned iterator iterates across the
   * elements in {@code a}, followed by the elements in {@code b}, followed by the elements in
   * {@code c}, followed by the elements in {@code d}. The source iterators are not polled until
   * necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getSubscribers,com.google.common.eventbus.SubscriberRegistry:getSubscribers(java.lang.Object),125,140,"/**
* Retrieves subscribers for a given event.
* @param event the event object
* @return Iterator of Subscribers for the event and its superclasses/interfaces
*/","* Gets an iterator representing an immutable snapshot of all subscribers to the given event at
   * the time this method is called.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,contains,com.google.common.collect.ImmutableList$ReverseImmutableList:contains(java.lang.Object),657,660,"/**
 * Checks if the list contains the specified element.
 * @param object element to be checked
 * @return true if the list contains the element, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,getDone,com.google.common.util.concurrent.ClosingFuture$Peeker:getDone(com.google.common.util.concurrent.ClosingFuture),1151,1157,"/**
* Retrieves the result of a future, throwing an exception if interrupted or failed.
* @param <D> the type of the result
* @param closingFuture the future to retrieve from
* @return the result of the future
* @throws ExecutionException if the computation threw an exception
*/","* Returns the value of {@code closingFuture}.
     *
     * @throws ExecutionException if {@code closingFuture} is a failed step
     * @throws CancellationException if the {@code closingFuture}'s future was cancelled
     * @throws IllegalArgumentException if {@code closingFuture} is not one of the futures passed to
     *     {@link #whenAllComplete(Iterable)} or {@link #whenAllComplete(Iterable)}
     * @throws IllegalStateException if called outside of a call to {@link
     *     CombiningCallable#call(DeferredCloser, Peeker)} or {@link
     *     AsyncCombiningCallable#call(DeferredCloser, Peeker)}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,put,"com.google.common.collect.MapMakerInternalMap:put(java.lang.Object,java.lang.Object)",2423,2430,"/**
* Associates the specified key with the specified value.
* @param key non-null key to associate with value
* @param value non-null value to be associated with key
* @return previous value associated with key or null if none
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,putIfAbsent,"com.google.common.collect.MapMakerInternalMap:putIfAbsent(java.lang.Object,java.lang.Object)",2432,2439,"/**
* Inserts a key-value pair if the key is not already present.
* @param key key to insert
* @param value value to associate with the key
* @return existing value or null if inserted
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)",2468,2478,"/**
* Replaces value for a key if it matches the old value.
* @param key key with which the specified value is associated
* @param oldValue expected old value to be replaced
* @param newValue new value to associate with the key
* @return true if replacement was successful, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap:replace(java.lang.Object,java.lang.Object)",2480,2487,"/**
* Replaces the value for a given key if it exists.
* @param key the key to replace the value for
* @param value the new value to associate with the key
* @return the old value associated with the key, or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap:remove(java.lang.Object),2448,2456,"/**
* Removes the entry for a given key.
* @param key the key whose mapping is to be removed
* @return the value associated with the removed key, or null if not present
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,"com.google.common.collect.MapMakerInternalMap:remove(java.lang.Object,java.lang.Object)",2458,2466,"/**
* Removes entry by key and value.
* @param key key of the entry to remove
* @param value value of the entry to remove
* @return true if removed, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,get,"com.google.common.collect.MapMakerInternalMap$Segment:get(java.lang.Object,int)",1439,1454,"/**
* Retrieves the value for a given key.
* @param key the key whose value to retrieve
* @param hash the precomputed hash of the key
* @return the value associated with the key, or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsKey,"com.google.common.collect.MapMakerInternalMap$Segment:containsKey(java.lang.Object,int)",1456,1467,"/**
 * Checks if the map contains a key with the specified hash.
 * @param key the key to check
 * @param hash the precomputed hash of the key
 * @return true if the key is present and its value is not null, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsValue,com.google.common.collect.MapMakerInternalMap$Segment:containsValue(java.lang.Object),1473,1496,"/**
 * Checks if the map contains a value equivalent to the specified object.
 * @param value the value to search for
 * @return true if a matching value is found, false otherwise
 */","* This method is a convenience for testing. Code should call {@link
     * MapMakerInternalMap#containsValue} directly.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)",940,956,"/**
 * Copies a weak key-weak value entry.
 * @param segment the segment containing the entry
 * @param entry the original entry to copy
 * @param newNext the next entry in the new chain or null
 * @return a new entry with copied references, or null if collected
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,put,"com.google.common.collect.MutableClassToInstanceMap:put(java.lang.Class,java.lang.Object)",153,158,"/**
* Puts a value into the map with a specified key class.
* @param key Class of the key
* @param value Value to be stored
* @return Previous value associated with the key or null if none
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,putAll,com.google.common.collect.MutableClassToInstanceMap:putAll(java.util.Map),160,167,"/**
* Adds all entries from the provided map, casting values to the correct type.
* @param map source map with class keys and generic value types
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardRemove,com.google.common.collect.ForwardingMap:standardRemove(java.lang.Object),160,171,"/**
 * Removes and returns the value associated with the specified key.
 * @param key the key whose mapping is to be removed
 * @return the value associated with the key, or null if not found
 */","* A sensible, albeit inefficient, definition of {@link #remove} in terms of the {@code iterator}
   * method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link
   * #remove} to forward to this implementation.
   *
   * <p>Alternately, you may wish to override {@link #remove} with {@code keySet().remove}, assuming
   * that approach would not lead to an infinite loop.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardClear,com.google.common.collect.ForwardingMap:standardClear(),180,182,"/**
 * Clears all entries from the map.
 */","* A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link
   * #entrySet}. In many cases, you may wish to override {@link #clear} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardIsEmpty,com.google.common.collect.ForwardingMap:standardIsEmpty(),264,266,"/**
 * Checks if the map is empty.
 * @return true if no entries are present, false otherwise
 */","* A sensible definition of {@link #isEmpty} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #isEmpty} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardHashCode,com.google.common.collect.ForwardingMap:standardHashCode(),286,288,"/**
 * Computes hash code using entry set.
 * @return computed hash code
 */","* A sensible definition of {@link #hashCode} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #hashCode} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,entrySet,com.google.common.reflect.MutableTypeToInstanceMap:entrySet(),96,99,"/**
 * Returns an unmodifiable set of entries.
 * @return Unmodifiable set of map entries
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,difference,"com.google.common.collect.Maps:difference(java.util.Map,java.util.Map)",502,511,"/**
 * Computes the difference between two maps.
 * @param <K> key type
 * @param <V> value type
 * @param left first map
 * @param right second map
 * @return MapDifference object detailing differences
 */","* Computes the difference between two maps. This difference is an immutable snapshot of the state
   * of the maps at the time this method is called. It will never change, even if the maps change at
   * a later time.
   *
   * <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps
   * must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}.
   *
   * <p><b>Note:</b>If you only need to know whether two maps have the same mappings, call {@code
   * left.equals(right)} instead of this method.
   *
   * @param left the map to treat as the ""left"" map for purposes of comparison
   * @param right the map to treat as the ""right"" map for purposes of comparison
   * @return the difference between the two maps",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,com.google.common.eventbus.EventBus:<init>(),165,167,"/**
 * Constructs an EventBus with the default name.
 */","Creates a new EventBus named ""default"".",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,crossOver,"com.google.common.collect.MinMaxPriorityQueue$Heap:crossOver(int,java.lang.Object)",702,712,"/**
* Compares and swaps elements to maintain heap property.
* @param index current element index
* @param x element to compare and potentially swap
* @return new index after crossover or original index if no change
*/","* Crosses an element over to the opposite heap by moving it one level down (or up if there are
     * no elements below it).
     *
     * <p>Returns the new position of the element.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,fillHoleAt,com.google.common.collect.MinMaxPriorityQueue$Heap:fillHoleAt(int),721,728,"/**
* Fills a hole at the given index by moving elements down.
* @param index position to start filling
* @return final index after filling the hole
*/","* Fills the hole at {@code index} by moving in the least of its grandchildren to this position,
     * then recursively filling the new hole created.
     *
     * @return the position of the new hole (where the lowest grandchild moved from, that had no
     *     grandchild to replace it)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,writeReplace,com.google.common.collect.ImmutableCollection:writeReplace(),392,397,"/**
 * Serializes the object using ImmutableList.
 * @return SerializedForm of the immutable list
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,headSet,com.google.common.collect.Maps$5:headSet(java.lang.Object),81,84,"/**
* Returns a view of the portion of this set whose elements are strictly less than toElement.
* @param toElement upper bound (exclusive)
* @return SortedSet containing elements less than toElement
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,subSet,"com.google.common.collect.Maps$5:subSet(java.lang.Object,java.lang.Object)",92,95,"/**
 * Returns a view of the portion of this set whose elements range from fromElement (inclusive) to toElement (exclusive).
 * @param fromElement lower bound (inclusive)
 * @param toElement upper bound (exclusive)
 * @return SortedSet containing elements within the specified range
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,standardContains,com.google.common.collect.ForwardingSortedSet:standardContains(java.lang.Object),109,120,"/**
 * Checks if the set contains an element equal to the specified object.
 * @param object the object to check for containment
 * @return true if the set contains the object, false otherwise
 */","* A sensible definition of {@link #contains} in terms of the {@code first()} method of {@link
   * #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #contains} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,standardRemove,com.google.common.collect.ForwardingSortedSet:standardRemove(java.lang.Object),129,147,"/**
 * Removes an object from the set if present.
 * @param object element to be removed
 * @return true if the object was removed, false otherwise
 */","* A sensible definition of {@link #remove} in terms of the {@code iterator()} method of {@link
   * #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #remove} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,standardSubSet,"com.google.common.collect.ForwardingSortedSet:standardSubSet(java.lang.Object,java.lang.Object)",156,159,"/**
* Returns a subset of elements between fromElement and toElement.
* @param fromElement lower bound (inclusive)
* @param toElement upper bound (exclusive)
* @return SortedSet containing elements in the specified range
*/","* A sensible default implementation of {@link #subSet(Object, Object)} in terms of {@link
   * #headSet(Object)} and {@link #tailSet(Object)}. In some situations, you may wish to override
   * {@link #subSet(Object, Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,tailSet,com.google.common.collect.Maps$5:tailSet(java.lang.Object),97,100,"/**
* Returns a view of the portion of this set whose elements are greater than or equal to the specified element.
* @param fromElement lower bound (inclusive) for the returned set
* @return SortedSet containing elements greater than or equal to fromElement
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowKeySet,com.google.common.collect.TreeBasedTable:rowKeySet(),74,77,"/**
* Returns sorted set of row keys.
* @return SortedSet containing all row keys
*/","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link
   * Table} interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableSet,com.google.common.collect.Synchronized:navigableSet(java.util.NavigableSet),1582,1585,"/**
* Creates a navigable set with the given comparator.
* @param navigableSet original navigable set
* @return new NavigableSet instance
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addFirst,com.google.common.collect.Synchronized$SynchronizedDeque:addFirst(java.lang.Object),1911,1916,"/**
* Adds an element to the front of the list.
* @param e the element to add
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addLast,com.google.common.collect.Synchronized$SynchronizedDeque:addLast(java.lang.Object),1918,1923,"/**
 * Adds an element to the end of the list.
 * @param e element to be added
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,offerFirst,com.google.common.collect.Synchronized$SynchronizedDeque:offerFirst(java.lang.Object),1925,1930,"/**
 * Adds an element to the front of the queue.
 * @param e the element to add
 * @return true if the operation succeeded, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,offerLast,com.google.common.collect.Synchronized$SynchronizedDeque:offerLast(java.lang.Object),1932,1937,"/**
 * Adds an element to the end of the list.
 * @param e the element to add
 * @return true if successful, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeFirst,com.google.common.collect.Synchronized$SynchronizedDeque:removeFirst(),1939,1944,"/**
 * Removes and returns the first element.
 * Synchronized to ensure thread safety.
 * @return the first element or null if empty
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeLast,com.google.common.collect.Synchronized$SynchronizedDeque:removeLast(),1946,1951,"/**
 * Removes and returns the last element.
 * Synchronized to ensure thread safety.
 * @return the removed element or null if empty
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollFirst,com.google.common.collect.Synchronized$SynchronizedDeque:pollFirst(),1953,1958,"/**
 * Removes and returns the first element of this deque.
 * Synchronized to ensure thread safety.
 * @return the head of this deque, or null if empty
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollLast,com.google.common.collect.Synchronized$SynchronizedDeque:pollLast(),1960,1965,"/**
* Removes and returns the last element of the deque.
* Synchronized to ensure thread safety.
* @return the last element, or null if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getFirst,com.google.common.collect.Synchronized$SynchronizedDeque:getFirst(),1967,1972,"/**
 * Retrieves the first element from the collection.
 * Synchronized to ensure thread safety.
 * @return The first element or null if empty
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getLast,com.google.common.collect.Synchronized$SynchronizedDeque:getLast(),1974,1979,"/**
 * Retrieves the last element from the collection.
 * Synchronized to ensure thread safety.
 * @return The last element or null if the collection is empty.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,peekFirst,com.google.common.collect.Synchronized$SynchronizedDeque:peekFirst(),1981,1986,"/**
 * Retrieves the first element without removing it.
 * @return the first element or null if deque is empty
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,peekLast,com.google.common.collect.Synchronized$SynchronizedDeque:peekLast(),1988,1993,"/**
 * Retrieves the last element without removing it.
 * @return the last element or null if deque is empty
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeFirstOccurrence,com.google.common.collect.Synchronized$SynchronizedDeque:removeFirstOccurrence(java.lang.Object),1995,2000,"/**
* Removes the first occurrence of the specified element.
* @param o element to be removed
* @return true if an element was removed, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeLastOccurrence,com.google.common.collect.Synchronized$SynchronizedDeque:removeLastOccurrence(java.lang.Object),2002,2007,"/**
* Removes last occurrence of an element.
* @param o element to be removed
* @return true if element was found and removed, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,push,com.google.common.collect.Synchronized$SynchronizedDeque:push(java.lang.Object),2009,2014,"/**
 * Adds an element to the stack.
 * @param e element to be added
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pop,com.google.common.collect.Synchronized$SynchronizedDeque:pop(),2016,2021,"/**
 * Removes and returns the top element from the stack.
 * Synchronized to ensure thread safety.
 * @return the top element of the stack, or null if empty
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingIterator,com.google.common.collect.Synchronized$SynchronizedDeque:descendingIterator(),2023,2028,"/**
* Returns an iterator over elements in reverse order.
* Synchronized to ensure thread safety.
* @return Iterator<E> for elements in descending order
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedNavigableSet:delegate(),1469,1472,"/**
 * Returns the navigable set delegate.
 * @return NavigableSet object representing the delegate
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,comparator,com.google.common.collect.Synchronized$SynchronizedSortedSet:comparator(),318,323,"/**
* Returns the comparator used to order elements.
* Synchronized for thread safety.
* @return Comparator or null if natural ordering is used
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subSet,"com.google.common.collect.Synchronized$SynchronizedSortedSet:subSet(java.lang.Object,java.lang.Object)",325,330,"/**
* Returns a synchronized subset of elements.
* @param fromElement lower bound (inclusive)
* @param toElement upper bound (exclusive)
* @return SortedSet containing elements within the specified range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headSet,com.google.common.collect.Synchronized$SynchronizedSortedSet:headSet(java.lang.Object),332,337,"/**
 * Returns a view of the portion of this set whose elements are strictly less than the specified element.
 * @param toElement upper bound, exclusive
 * @return SortedSet containing elements less than toElement
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailSet,com.google.common.collect.Synchronized$SynchronizedSortedSet:tailSet(java.lang.Object),339,344,"/**
* Returns a subset of elements greater than or equal to a specified element.
* @param fromElement the lower bound element
* @return SortedSet containing elements >= fromElement
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,first,com.google.common.collect.Synchronized$SynchronizedSortedSet:first(),346,351,"/**
 * Returns the first element in the collection.
 * Synchronized to ensure thread safety.
 * @return the first element or null if empty
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,last,com.google.common.collect.Synchronized$SynchronizedSortedSet:last(),353,358,"/**
 * Retrieves the last element from the collection.
 * Synchronized to ensure thread safety.
 * @return the last element or null if empty
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,ceilingEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:ceilingEntry(java.lang.Object),1614,1619,"/**
* Returns the least entry greater than or equal to the specified key.
* @param key the key to search for
* @return a Map.Entry with the ceiling key-value pair, or null if none exists
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,ceilingKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:ceilingKey(java.lang.Object),1621,1626,"/**
* Returns the least key greater than or equal to the specified key.
* @param key the key to search for
* @return the least key greater than or equal to the specified key, or null if no such key exists
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingKeySet,com.google.common.collect.Synchronized$SynchronizedNavigableMap:descendingKeySet(),1630,1638,"/**
* Returns a synchronized navigable set of keys in descending order.
* @return NavigableSet<K> containing keys in reverse order
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,firstEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:firstEntry(),1652,1657,"/**
 * Returns the first entry in the map.
 * @return a Map.Entry or null if the map is empty
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,floorEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:floorEntry(java.lang.Object),1659,1664,"/**
* Returns the greatest entry less than or equal to the specified key.
* @param key the key to search for
* @return a Map.Entry with the greatest key <= the specified key, or null if no such entry exists
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,floorKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:floorKey(java.lang.Object),1666,1671,"/**
 * Returns the greatest key less than or equal to the specified key.
 * @param key key to find floor for
 * @return greatest key less than or equal to key, or null if no such key exists
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,higherEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:higherEntry(java.lang.Object),1685,1690,"/**
* Returns the lowest entry greater than the specified key.
* @param key the key to search for
* @return a Map.Entry with the least key greater than the given key, or null if no such entry exists
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,higherKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:higherKey(java.lang.Object),1692,1697,"/**
* Finds the least key greater than the specified key.
* @param key the reference key
* @return the least key greater than key, or null if no such key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lastEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:lastEntry(),1699,1704,"/**
 * Returns the last entry in the map.
 * @return Entry with the highest key or null if empty
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lowerEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:lowerEntry(java.lang.Object),1706,1711,"/**
* Returns the greatest entry less than the specified key.
* @param key key to compare with
* @return Map.Entry or null if no such entry exists
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lowerKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:lowerKey(java.lang.Object),1713,1718,"/**
* Returns the greatest key less than the specified key.
* @param key the reference key
* @return the greatest key less than key, or null if no such key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableKeySet,com.google.common.collect.Synchronized$SynchronizedNavigableMap:navigableKeySet(),1727,1735,"/**
 * Returns a thread-safe navigable key set.
 * @return NavigableSet of keys with synchronization
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollFirstEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:pollFirstEntry(),1737,1742,"/**
* Retrieves and removes the first entry from the map.
* @return Map.Entry object or null if the map is empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollLastEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:pollLastEntry(),1744,1749,"/**
* Removes and returns the last entry from the map.
* @return the last Map.Entry or null if the map is empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SetMultimap.java,removeAll,com.google.common.collect.SetMultimap:removeAll(java.lang.Object),73,75,"/**
 * Removes all values associated with the specified key.
 * @param key the key whose associated values are to be removed
 * @return a set of values that were removed, or an empty set if none were present
 */","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}
   * interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:get(java.lang.Object),902,907,"/**
 * Retrieves a sorted set of values by key.
 * @param key the key to look up
 * @return a SortedSet containing values or null if key not found
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:removeAll(java.lang.Object),909,914,"/**
* Removes all values associated with a key.
* @param key key to remove mappings for
* @return sorted set of removed values or empty set if none found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",916,921,"/**
* Replaces all values for a given key with new values.
* @param key the key to replace values for
* @param values the new values to associate with the key
* @return a sorted set of replaced values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,valueComparator,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:valueComparator(),923,928,"/**
 * Returns the comparator used to order values.
 * @return Comparator or null if no specific comparator is set
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,subMap,"com.google.common.collect.TreeBasedTable$TreeRow:subMap(java.lang.Object,java.lang.Object)",225,229,"/**
* Returns a sorted map of entries within the specified key range.
* @param fromKey inclusive lower bound of the range
* @param toKey exclusive upper bound of the range
* @return SortedMap containing entries between fromKey and toKey
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,headMap,com.google.common.collect.TreeBasedTable$TreeRow:headMap(java.lang.Object),231,235,"/**
* Returns a submap containing all entries up to (but not including) the specified key.
* @param toKey upper bound key (exclusive)
* @return SortedMap with entries less than toKey
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,tailMap,com.google.common.collect.TreeBasedTable$TreeRow:tailMap(java.lang.Object),237,241,"/**
* Returns a submap containing entries with keys greater than or equal to fromKey.
* @param fromKey the lower bound key (inclusive)
* @return SortedMap with keys >= fromKey
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,containsKey,com.google.common.collect.TreeBasedTable$TreeRow:containsKey(java.lang.Object),296,299,"/**
 * Checks if the map contains a specified key.
 * @param key the key to check
 * @return true if the key is within range and present in the map, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,put,"com.google.common.collect.TreeBasedTable$TreeRow:put(java.lang.Object,java.lang.Object)",301,305,"/**
* Adds or updates a key-value pair in the map.
* @param key the key to be added or updated
* @param value the value associated with the key
* @return the previous value associated with the key, or null if none
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,rebalance,com.google.common.collect.TreeMultiset$AvlNode:rebalance(),950,970,"/**
* Rebalances the AVL tree node.
* @return the balanced AVL tree node
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,size,com.google.common.collect.TreeMultiset:size(),228,231,"/**
 * Returns the size of the aggregated entries.
 * @return the size as an integer, saturated if necessary
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,distinctElements,com.google.common.collect.TreeMultiset:distinctElements(),233,236,"/**
* Returns count of distinct elements.
* @return number of unique elements
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentEdges,com.google.common.graph.StandardNetwork:incidentEdges(java.lang.Object),130,133,"/**
* Returns incident edges for a given node.
* @param node the node to find incident edges for
* @return a set of incident edges
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,adjacentNodes,com.google.common.graph.StandardNetwork:adjacentNodes(java.lang.Object),143,146,"/**
* Returns adjacent nodes for a given node.
* @param node the source node
* @return a set of adjacent nodes
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edgesConnecting,"com.google.common.graph.StandardNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",148,156,"/**
 * Returns edges connecting two nodes.
 * @param nodeU first node
 * @param nodeV second node
 * @return set of edges between nodeU and nodeV
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,inEdges,com.google.common.graph.StandardNetwork:inEdges(java.lang.Object),158,161,"/**
* Returns incoming edges for a given node.
* @param node the target node
* @return set of incoming edges, wrapped in an invalidatable set
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,outEdges,com.google.common.graph.StandardNetwork:outEdges(java.lang.Object),163,166,"/**
* Returns outgoing edges for a given node.
* @param node source node
* @return set of outgoing edges
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,predecessors,com.google.common.graph.StandardNetwork:predecessors(java.lang.Object),168,171,"/**
 * Returns predecessors of a given node.
 * @param node the node to find predecessors for
 * @return a set of predecessor nodes
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,successors,com.google.common.graph.StandardNetwork:successors(java.lang.Object),173,176,"/**
 * Returns the set of successor nodes.
 * @param node current node
 * @return Set of successor nodes, wrapped in an invalidatable set
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,adjacentNodes,com.google.common.graph.StandardValueGraph:adjacentNodes(java.lang.Object),103,106,"/**
* Returns adjacent nodes for a given node.
* @param node the node to find adjacent nodes for
* @return a set of adjacent nodes wrapped in an invalidatable set
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,predecessors,com.google.common.graph.StandardValueGraph:predecessors(java.lang.Object),108,111,"/**
 * Returns predecessors of a given node.
 * @param node target node
 * @return set of predecessor nodes
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,successors,com.google.common.graph.StandardValueGraph:successors(java.lang.Object),113,116,"/**
 * Retrieves successors of a given node.
 * @param node the node to find successors for
 * @return a set of successor nodes, wrapped in an invalidatable set
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,incidentEdges,com.google.common.graph.StandardValueGraph:incidentEdges(java.lang.Object),118,129,"/**
* Returns incident edges for a given node.
* @param node the node to find incident edges for
* @return set of EndpointPair representing incident edges
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,"com.google.common.graph.StandardValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",131,134,"/**
 * Checks if an edge exists between two nodes.
 * @param nodeU first node
 * @param nodeV second node
 * @return true if edge exists, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,com.google.common.graph.StandardValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),136,141,"/**
 * Checks if there's an edge connecting the given endpoints.
 * @param endpoints pair of nodes to check connection between
 * @return true if an edge exists, false otherwise
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.StandardValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)",143,146,"/**
 * Retrieves the value of an edge between two nodes or returns a default value.
 * @param nodeU source node
 * @param nodeV target node
 * @param defaultValue value to return if no edge exists
 * @return edge value or default value
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.StandardValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)",148,152,"/**
* Retrieves the value of an edge between two nodes.
* @param endpoints pair of nodes defining the edge
* @param defaultValue value to return if edge is not found
* @return edge value or default value if edge does not exist
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putBytes,"com.google.common.hash.AbstractStreamingHasher:putBytes(byte[],int,int)",92,96,"/**
 * Adds a byte array to the hash.
 * @param bytes source byte array
 * @param off starting offset in the array
 * @param len number of bytes to add
 * @return this Hasher instance
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putBytes,com.google.common.hash.AbstractStreamingHasher:putBytes(java.nio.ByteBuffer),98,108,"/**
 * Adds bytes from a ByteBuffer to the hash.
 * @param readBuffer source of bytes to add
 * @return this Hasher instance
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashBytes,"com.google.common.hash.FarmHashFingerprint64:hashBytes(byte[],int,int)",49,53,"/**
* Computes a hash code for the specified byte range.
* @param input source byte array
* @param off starting offset in the array
* @param len number of bytes to hash
* @return HashCode object representing the computed hash
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,hashBytes,"com.google.common.hash.Fingerprint2011:hashBytes(byte[],int,int)",40,44,"/**
* Computes hash code for a byte array segment.
* @param input source byte array
* @param off starting offset in the array
* @param len length of the segment to hash
* @return HashCode object representing the computed hash
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashInt,com.google.common.hash.Murmur3_32HashFunction:hashInt(int),108,114,"/**
* Generates a hash code for an integer.
* @param input the integer to hash
* @return HashCode object representing the hash value
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashLong,com.google.common.hash.Murmur3_32HashFunction:hashLong(long),116,128,"/**
 * Hashes a long value using Murmur3 algorithm.
 * @param input the long value to hash
 * @return HashCode object representing the hashed value
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashUnencodedChars,com.google.common.hash.Murmur3_32HashFunction:hashUnencodedChars(java.lang.CharSequence),130,149,"/**
* Computes hash code for a CharSequence using a specific algorithm.
* @param input the input character sequence
* @return HashCode object representing the computed hash
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashString,"com.google.common.hash.Murmur3_32HashFunction:hashString(java.lang.CharSequence,java.nio.charset.Charset)",151,220,"/**
 * Hashes a string using the specified charset.
 * @param input the CharSequence to hash
 * @param charset the character encoding of the input
 * @return a HashCode object representing the hash value
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashBytes,"com.google.common.hash.Murmur3_32HashFunction:hashBytes(byte[],int,int)",222,238,"/**
* Hashes a byte array using Murmur3 algorithm.
* @param input the byte array to hash
* @param off starting offset in the array
* @param len length of the data to hash
* @return HashCode object representing the hash
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long,double)",433,436,"/**
* Creates a Bloom filter with specified parameters.
* @param <T> type of elements to be added
* @param funnel defines how to extract bytes from objects
* @param expectedInsertions estimated number of insertions
* @param fpp false positive probability
* @return BloomFilter instance configured with given strategy
*/","* Creates a {@link BloomFilter} with the expected number of insertions and expected false
   * positive probability.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @param fpp the desired false positive probability (must be positive and less than 1.0)
   * @return a {@code BloomFilter}
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundToInt,"com.google.common.math.DoubleMath:roundToInt(double,java.math.RoundingMode)",127,135,"/**
 * Rounds a double value to an integer using specified rounding mode.
 * @param x the value to round
 * @param mode the RoundingMode to use
 * @return the rounded integer value
 */","* Returns the {@code int} value that is equal to {@code x} rounded with the specified rounding
   * mode, if possible.
   *
   * @throws ArithmeticException if
   *     <ul>
   *       <li>{@code x} is infinite or NaN
   *       <li>{@code x}, after being rounded to a mathematical integer using the specified rounding
   *           mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code
   *           Integer.MAX_VALUE}
   *       <li>{@code x} is not a mathematical integer and {@code mode} is {@link
   *           RoundingMode#UNNECESSARY}
   *     </ul>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundToLong,"com.google.common.math.DoubleMath:roundToLong(double,java.math.RoundingMode)",154,162,"/**
* Rounds a double value to the nearest long using specified rounding mode.
* @param x the value to round
* @param mode the RoundingMode to use
* @return the rounded long value
*/","* Returns the {@code long} value that is equal to {@code x} rounded with the specified rounding
   * mode, if possible.
   *
   * @throws ArithmeticException if
   *     <ul>
   *       <li>{@code x} is infinite or NaN
   *       <li>{@code x}, after being rounded to a mathematical integer using the specified rounding
   *           mode, is either less than {@code Long.MIN_VALUE} or greater than {@code
   *           Long.MAX_VALUE}
   *       <li>{@code x} is not a mathematical integer and {@code mode} is {@link
   *           RoundingMode#UNNECESSARY}
   *     </ul>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundToBigInteger,"com.google.common.math.DoubleMath:roundToBigInteger(double,java.math.RoundingMode)",183,195,"/**
 * Rounds a double to the nearest BigInteger using specified rounding mode.
 * @param x the double value to round
 * @param mode the RoundingMode to use
 * @return the rounded BigInteger
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,insertInHashTable,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:insertInHashTable(java.lang.Object),760,780,"/**
* Inserts an element into the hash table.
* @param e element to insert
* @return this SetBuilderImpl instance
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,review,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:review(),787,799,"/**
* Reviews and optimizes the hash table.
* @return SetBuilderImpl instance, potentially with a rebuilt hash table
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,combine,com.google.common.collect.TopKSelector:combine(com.google.common.collect.TopKSelector),242,248,"/**
* Combines another TopKSelector into the current one.
* @param other the TopKSelector to combine with
* @return the combined TopKSelector instance
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,offerAll,com.google.common.collect.TopKSelector:offerAll(java.util.Iterator),269,273,"/**
 * Adds all elements from the iterator to this collection.
 * @param elements iterator of elements to add
 */","* Adds each member of {@code elements} as a candidate for the top {@code k} elements. This
   * operation takes amortized linear time in the length of {@code elements}. The iterator is
   * consumed after this operation completes.
   *
   * <p>If all input data to this {@code TopKSelector} is in a single {@code Iterator}, prefer
   * {@link Ordering#leastOf(Iterator, int)}, which provides a simpler API for that use case.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Base16Encoding:<init>(java.lang.String,java.lang.String)",954,956,"/**
 * Constructs a Base16 encoding with a custom alphabet.
 * @param name Name of the encoding
 * @param alphabetChars Characters defining the encoding alphabet
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Base64Encoding:<init>(java.lang.String,java.lang.String,java.lang.Character)",999,1001,"/**
* Initializes Base64 encoding with custom alphabet and padding.
* @param name unique identifier for the alphabet
* @param alphabetChars characters used in the alphabet
* @param paddingChar optional character for padding
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$StandardBaseEncoding:<init>(java.lang.String,java.lang.String,java.lang.Character)",619,621,"/**
* Initializes encoding with specified name, alphabet, and optional padding character.
* @param name unique identifier for the encoding
* @param alphabetChars characters used in the encoding alphabet
* @param paddingChar optional character for padding; can be null if not needed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,upperCase,com.google.common.io.BaseEncoding$Alphabet:upperCase(),564,575,"/**
* Converts alphabet to uppercase.
* @return new Alphabet object with all characters in uppercase
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,lowerCase,com.google.common.io.BaseEncoding$Alphabet:lowerCase(),577,588,"/**
 * Converts alphabet to lowercase.
 * @return new Alphabet object in lowercase or original if already lowercase
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,ignoreCase,com.google.common.io.BaseEncoding$StandardBaseEncoding:ignoreCase(),907,915,"/**
 * Returns a case-insensitive version of the encoding.
 * @return BaseEncoding instance with case ignored
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,least,com.google.common.collect.TopKSelector:least(int),69,71,"/**
* Creates a selector for the k smallest elements.
* @param k number of smallest elements to select
* @return TopKSelector configured to find least elements
*/","* Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it,
   * relative to the natural ordering of the elements, and returns them via {@link #topK} in
   * ascending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,greatest,com.google.common.collect.TopKSelector:greatest(int),91,93,"/**
* Creates a selector for the top K greatest elements.
* @param k number of top elements to select
* @return TopKSelector configured to find greatest elements
*/","* Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it,
   * relative to the natural ordering of the elements, and returns them via {@link #topK} in
   * descending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,isPrime,com.google.common.math.IntMath:isPrime(int),725,728,"/**
* Checks if a number is prime.
* @param n number to check
* @return true if n is prime, false otherwise
*/","* Returns {@code true} if {@code n} is a <a
   * href=""http://mathworld.wolfram.com/PrimeNumber.html"">prime number</a>: an integer <i>greater
   * than one</i> that cannot be factored into a product of <i>smaller</i> positive integers.
   * Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be
   * factored into smaller positive integers).
   *
   * <p>To test larger numbers, use {@link LongMath#isPrime} or {@link BigInteger#isProbablePrime}.
   *
   * @throws IllegalArgumentException if {@code n} is negative
   * @since 20.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,binomial,"com.google.common.math.BigIntegerMath:binomial(int,int)",465,511,"/**
* Computes binomial coefficient C(n, k).
* @param n total number of items
* @param k number of items to choose
* @return BigInteger representing the binomial coefficient
*/","* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
   * {@code k}, that is, {@code n! / (k! (n - k)!)}.
   *
   * <p><b>Warning:</b> the result can take as much as <i>O(k log n)</i> space.
   *
   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.lang.Iterable),103,107,"/**
* Calculates statistics from an iterable of numbers.
* @param values collection of numeric values
* @return Stats object containing calculated statistics
*/","* Returns statistics over a dataset containing the given values.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.Iterator),116,120,"/**
* Calculates statistics from an iterator of numbers.
* @param values iterator containing numeric data
* @return Stats object with calculated statistics
*/","* Returns statistics over a dataset containing the given values. The iterator will be completely
   * consumed by this method.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,addAll,com.google.common.math.PairedStatsAccumulator:addAll(com.google.common.math.PairedStats),73,92,"/**
* Adds all stats from another PairedStats instance.
* @param values the PairedStats to add
*/","* Adds the given statistics to the dataset, as if the individual values used to compute the
   * statistics had been added directly.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.stream.DoubleStream),166,170,"/**
* Calculates statistics from a stream of double values.
* @param values input DoubleStream of numeric data
* @return Stats object containing calculated statistics
*/","* Returns statistics over a dataset containing the given values. The stream will be completely
   * consumed by this method.
   *
   * <p>If you have a {@code Stream<Double>} rather than a {@code DoubleStream}, you should collect
   * the values using {@link #toStats()} instead.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.stream.IntStream),182,186,"/**
* Computes statistics from an IntStream.
* @param values input stream of integers
* @return Stats object containing computed statistics
*/","* Returns statistics over a dataset containing the given values. The stream will be completely
   * consumed by this method.
   *
   * <p>If you have a {@code Stream<Integer>} rather than an {@code IntStream}, you should collect
   * the values using {@link #toStats()} instead.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.stream.LongStream),199,203,"/**
* Computes statistics from a stream of long values.
* @param values LongStream containing the data to analyze
* @return Stats object with computed statistics
*/","* Returns statistics over a dataset containing the given values. The stream will be completely
   * consumed by this method.
   *
   * <p>If you have a {@code Stream<Long>} rather than a {@code LongStream}, you should collect the
   * values using {@link #toStats()} instead.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.stream.DoubleStream),142,144,"/**
* Adds all values from a DoubleStream to the accumulator.
* @param values stream of double values to be added
*/","* Adds the given values to the dataset. The stream will be completely consumed by this method.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.stream.IntStream),152,154,"/**
* Adds all integer values from an IntStream to a statistics accumulator.
* @param values stream of integers to be added
*/","* Adds the given values to the dataset. The stream will be completely consumed by this method.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.stream.LongStream),163,165,"/**
 * Adds all values from a LongStream to the accumulator.
 * @param values stream of long values to be added
 */","* Adds the given values to the dataset. The stream will be completely consumed by this method.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,selectAllInPlace,"com.google.common.math.Quantiles:selectAllInPlace(int[],int,int,double[],int,int)",627,653,"/**
* Selects elements in place based on specified ranges.
* @param allRequired array of required values
* @param requiredFrom start index in allRequired
* @param requiredTo end index in allRequired
* @param array target array to select elements from
* @param from start index in array
* @param to end index in array
*/","* Performs an in-place selection, like {@link #selectInPlace}, to select all the indexes {@code
   * allRequired[i]} for {@code i} in the range [{@code requiredFrom}, {@code requiredTo}]. These
   * indexes must be sorted in the array and must all be in the range [{@code from}, {@code to}].",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(java.lang.Iterable),164,169,"/**
* Creates an ImmutableDoubleArray from Iterable.
* @param values iterable source of double values
* @return ImmutableDoubleArray containing the values
*/","* Returns an immutable array containing the given values, in order.
   *
   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code
   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link
   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(java.lang.Iterable),161,166,"/**
* Creates an immutable array from given iterable.
* @param values iterable of integers
* @return ImmutableIntArray containing the elements
*/","* Returns an immutable array containing the given values, in order.
   *
   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code
   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link
   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(java.lang.Iterable),163,168,"/**
* Creates an immutable long array from iterable.
* @param values iterable source of long values
* @return ImmutableLongArray containing the elements
*/","* Returns an immutable array containing the given values, in order.
   *
   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code
   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link
   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,toString,com.google.common.primitives.UnsignedLong:toString(int),262,264,"/**
 * Converts value to a string representation in the specified radix.
 * @param radix numerical base (e.g., 2 for binary, 10 for decimal)
 * @return string representation of the value in the given radix
 */","* Returns a string representation of the {@code UnsignedLong} value, in base {@code radix}. If
   * {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code
   * 10} is used.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,toString,com.google.common.primitives.UnsignedLongs:toString(long),444,446,"/**
 * Converts a long to its string representation in base 10.
 * @param x the number to convert
 * @return string representation of the number
 */","* Returns a string representation of x, where x is treated as unsigned.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long)} instead.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,equals,com.google.common.reflect.Parameter:equals(java.lang.Object),139,146,"/**
* Checks equality based on position and declaration.
* @param obj object to compare
* @return true if both position and declaration match, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,invokeAnyImpl,"com.google.common.util.concurrent.MoreExecutors:invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,java.time.Duration)",658,669,"/**
 * Invokes any of the given tasks asynchronously.
 * @param executorService service to execute tasks
 * @param tasks collection of Callable tasks
 * @param timed true if timeout is applied
 * @param timeout maximum time to wait for task completion
 * @return result of one of the completed tasks
 * @throws InterruptedException if interrupted while waiting
 * @throws ExecutionException if task execution fails
 * @throws TimeoutException if no task completes within timeout
 */","* An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService}
   * implementations.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,run,"com.google.common.util.concurrent.Futures$FutureCombiner:run(java.lang.Runnable,java.util.concurrent.Executor)",765,775,"/**
* Executes a Runnable task asynchronously.
* @param combiner the task to run
* @param executor the Executor to use for execution
* @return ListenableFuture representing the asynchronous computation
*/","* Creates the {@link ListenableFuture} which will return the result of running {@code combiner}
     * when all Futures complete. {@code combiner} will run using {@code executor}.
     *
     * <p>If the combiner throws a {@code CancellationException}, the returned future will be
     * cancelled.
     *
     * <p>Canceling this Future will attempt to cancel all the component futures.
     *
     * @since 23.6
     * @return a future whose result is based on {@code combiner} (or based on the input futures
     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code
     *     FutureCombiner}). Even though the future never produces a value other than {@code null},
     *     you should typically check whether it failed: See <a
     *     href=""https://errorprone.info/bugpattern/FutureReturnValueIgnored"">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,decrementCountAndMaybeComplete,com.google.common.util.concurrent.AggregateFuture:decrementCountAndMaybeComplete(com.google.common.collect.ImmutableCollection),292,300,"/**
 * Decrements the count of pending futures and processes completed ones.
 * @param futuresIfNeedToCollectAtCompletion collection of futures to collect at completion
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,checkAcquiredLocks,"com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:checkAcquiredLocks(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.List)",608,612,"/**
* Checks each acquired lock against the given policy.
* @param policy security policy to enforce
* @param acquiredLocks list of locks currently held
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,from,com.google.common.util.concurrent.ClosingFuture:from(com.google.common.util.concurrent.ListenableFuture),450,452,"/**
* Wraps a ListenableFuture in a ClosingFuture.
* @param future the ListenableFuture to wrap
* @return a ClosingFuture instance
*/","* Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}.
   *
   * <p>{@code future}'s value will not be closed when the pipeline is done even if {@code V}
   * implements {@link Closeable}. In order to start a pipeline with a value that will be closed
   * when the pipeline is done, use {@link #submit(ClosingCallable, Executor)} instead.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,derive,com.google.common.util.concurrent.ClosingFuture:derive(com.google.common.util.concurrent.FluentFuture),1115,1119,"/**
* Derives a ClosingFuture from the given FluentFuture.
* @param future original FluentFuture to be wrapped
* @return new ClosingFuture that wraps the original FluentFuture
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,standardPoll,com.google.common.collect.ForwardingQueue:standardPoll(),121,127,"/**
 * Polls and removes an element from the collection.
 * @return the removed element, or null if empty
 */","* A sensible definition of {@link #poll} in terms of {@link #remove}. If you override {@link
   * #remove}, you may wish to override {@link #poll} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,standardPeek,com.google.common.collect.ForwardingQueue:standardPeek(),107,113,"/**
* Retrieves the first element without removing it.
* @return the first element or null if empty
*/","* A sensible definition of {@link #peek} in terms of {@link #element}. If you override {@link
   * #element}, you may wish to override {@link #peek} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,submit,"com.google.common.util.concurrent.ExecutionSequencer:submit(java.util.concurrent.Callable,java.util.concurrent.Executor)",149,166,"/**
* Submits a Callable task to an Executor and returns a ListenableFuture.
* @param callable the task to execute asynchronously
* @param executor the executor to run the task
* @return ListenableFuture representing the result of the callable
*/","* Enqueues a task to run when the previous task (if any) completes.
   *
   * <p>Cancellation does not propagate from the output future to a callable that has begun to
   * execute, but if the output future is cancelled before {@link Callable#call()} is invoked,
   * {@link Callable#call()} will not be invoked.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getChecked,"com.google.common.util.concurrent.FuturesGetChecked:getChecked(java.util.concurrent.Future,java.lang.Class)",44,49,"/**
* Retrieves result from Future, throwing specified exception if necessary.
* @param future task to retrieve result from
* @param exceptionClass exception class to throw on failure
* @return result of the Future
* @throws X if retrieval fails
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getChecked,"com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit)",1324,1332,"/**
 * Retrieves result from a future with a timeout.
 * @param future the future to get the result from
 * @param exceptionClass class of exception to throw if futures fails
 * @param timeout time to wait for the result
 * @param unit unit of timeout
 * @return result of the future
 * @throws X if future fails or times out
 */","* Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new
   * instance of the given checked exception type. This reduces boilerplate for a common use of
   * {@code Future} in which it is unnecessary to programmatically distinguish between exception
   * types or to extract other information from the exception instance.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause
   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code
   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.
   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the
   *       interrupt).
   *   <li>Any {@link TimeoutException} is wrapped in an {@code X}.
   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link
   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to continue to treat every checked exception as a checked
   * exception, every unchecked exception as an unchecked exception, and every error as an error. In
   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the
   * new stack trace matches that of the current thread.
   *
   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor
   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}
   * (preferring constructors with at least one {@code String}) and calling the constructor via
   * reflection. If the exception did not already have a cause, one is set by calling {@link
   * Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code
   * IllegalArgumentException} is thrown.
   *
   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}
   *     whose cause is not itself a checked exception
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a
   *     {@code RuntimeException} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or
   *     does not have a suitable constructor
   * @since 19.0 (in 10.0 as {@code get} and with different parameter order)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,validateClass,com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator:validateClass(java.lang.Class),159,183,"/**
* Validates exception class and caches it if valid.
* @param exceptionClass the exception class to validate
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,notifyStopped,com.google.common.util.concurrent.AbstractService:notifyStopped(),436,456,"/**
* Notifies the service has stopped.
* Updates state and enqueues termination event.
*/","* Implementing classes should invoke this method once their service has stopped. It will cause
   * the service to transition from {@link State#STARTING} or {@link State#STOPPING} to {@link
   * State#TERMINATED}.
   *
   * @throws IllegalStateException if the service is not one of {@link State#STOPPING}, {@link
   *     State#STARTING}, or {@link State#RUNNING}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,notifyFailed,com.google.common.util.concurrent.AbstractService:notifyFailed(java.lang.Throwable),463,487,"/**
 * Notifies of a failure with the given cause.
 * @param cause the reason for the failure
 */","* Invoke this method to transition the service to the {@link State#FAILED}. The service will
   * <b>not be stopped</b> if it is running. Invoke this method when a service has failed critically
   * or otherwise cannot be started nor stopped.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,tryStartTiming,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:tryStartTiming(com.google.common.util.concurrent.Service),539,549,"/**
 * Starts timing for a service if not already started.
 * @param service the service to start timing for
 */","* Attempts to start the timer immediately prior to the service being started via {@link
     * Service#startAsync()}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,transitionService,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State)",673,726,"/**
 * Transitions a service from one state to another.
 * @param service the service to transition
 * @param from current state of the service
 * @param to new state for the service
 */","* Updates the state with the given service transition.
     *
     * <p>This method performs the main logic of ServiceManager in the following steps.
     *
     * <ol>
     *   <li>Update the {@link #servicesByState()}
     *   <li>Update the {@link #startupTimers}
     *   <li>Based on the new state queue listeners to run
     *   <li>Run the listeners (outside of the lock)
     * </ol>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhen,com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard),472,491,"/**
* Enters the monitor when guard condition is satisfied.
* @param guard condition to wait for
* @throws InterruptedException if interrupted while waiting
*/","* Enters this monitor when the guard is satisfied. Blocks indefinitely, but may be interrupted.
   *
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitFor,com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard),823,830,"/**
 * Waits for a condition to be satisfied by a guard.
 * @param guard the condition to wait for
 * @throws InterruptedException if interrupted while waiting
 */","* Waits for the guard to be satisfied. Waits indefinitely, but may be interrupted. May be called
   * only by a thread currently occupying this monitor.
   *
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhenUninterruptibly,com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard),570,589,"/**
 * Enters when the guard condition is met uninterruptibly.
 * @param guard condition to wait for
 */",Enters this monitor when the guard is satisfied. Blocks indefinitely.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitForUninterruptibly,com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard),870,877,"/**
 * Waits uninterruptibly until the guard condition is satisfied.
 * @param guard the condition to wait for
 */","* Waits for the guard to be satisfied. Waits indefinitely. May be called only by a thread
   * currently occupying this monitor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhen,"com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",514,567,"/**
* Attempts to enter when the guard condition is satisfied within a timeout.
* @param guard condition to wait for
* @param time maximum time to wait
* @param unit time unit for the timeout
* @return true if entered, false on timeout or interruption
* @throws InterruptedException if interrupted while waiting
*/","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied, and may be
   * interrupted.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhenUninterruptibly,"com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",608,667,"/**
* Enters a guarded section uninterruptibly with a timeout.
* @param guard condition to satisfy before entering
* @param time maximum wait time
* @param unit time unit for the timeout
* @return true if entered, false on timeout or interruption
*/","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitFor,"com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",851,864,"/**
 * Waits for a condition to be satisfied within a specified time.
 * @param guard the condition to wait for
 * @param time the maximum time to wait
 * @param unit the time unit of the timeout parameter
 * @return true if the condition is satisfied, false otherwise
 * @throws InterruptedException if the current thread is interrupted
 */","* Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May
   * be called only by a thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitForUninterruptibly,"com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",896,926,"/**
* Waits uninterruptibly for a condition defined by a guard within a specified time.
* @param guard the condition to wait for
* @param time the maximum time to wait
* @param unit the time unit of the timeout parameter
* @return true if the condition is satisfied, false if timed out
*/","* Waits for the guard to be satisfied. Waits at most the given time. May be called only by a
   * thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,withTimeout,"com.google.common.util.concurrent.FluentFuture:withTimeout(long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",289,295,"/**
* Sets a timeout for the future.
* @param timeout duration of the timeout
* @param unit time unit for the timeout
* @param scheduledExecutor executor to schedule the timeout
* @return FluentFuture with applied timeout
*/","* Returns a future that delegates to this future but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires.
   * If the timeout expires, not only will the output future finish, but also the input future
   * ({@code this}) will be cancelled and interrupted.
   *
   * @param timeout when to time out the future
   * @param unit the time unit of the time parameter
   * @param scheduledExecutor The executor service to enforce the timeout.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,withTimeout,"com.google.common.util.concurrent.Futures:withTimeout(com.google.common.util.concurrent.ListenableFuture,java.time.Duration,java.util.concurrent.ScheduledExecutorService)",384,389,"/**
* Wraps a future with a timeout.
* @param delegate the original future task
* @param time maximum allowed time for completion
* @param scheduledExecutor executor to schedule the timeout
* @return future that completes with result or times out
*/","* Returns a future that delegates to another but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires.
   *
   * <p>The delegate future is interrupted and cancelled if it times out.
   *
   * @param delegate The future to delegate to.
   * @param time when to time out the future
   * @param scheduledExecutor The executor service to enforce the timeout.
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,firstMatch,com.google.common.collect.FluentIterable:firstMatch(com.google.common.base.Predicate),464,467,"/**
* Finds the first element matching the predicate.
* @param predicate condition to test elements
* @return Optional containing the first matching element or empty if none found
*/","* Returns an {@link Optional} containing the first element in this fluent iterable that satisfies
   * the given predicate, if such an element exists.
   *
   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}
   * is matched in this fluent iterable, a {@link NullPointerException} will be thrown.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,precomputedInternal,com.google.common.base.CharMatcher:precomputedInternal(),417,442,"/**
* Creates a precomputed character matcher.
* Uses BitSet to efficiently represent character sets.
* Returns a positive or negated matcher based on character count.
*/","* This is the actual implementation of {@link #precomputed}, but we bounce calls through a method
   * on {@link Platform} so that we can have different behavior in GWT.
   *
   * <p>This implementation tries to be smart in a number of ways. It recognizes cases where the
   * negation is cheaper to precompute than the matcher itself; it tries to build small hash tables
   * for matchers that only match a few characters, and so on. In the worst-case scenario, it
   * constructs an eight-kilobyte bit array and queries that. In many situations this produces a
   * matcher which is faster to query than the original.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,rethrow,"com.google.common.io.Closer:rethrow(java.lang.Throwable,java.lang.Class,java.lang.Class)",177,186,"/**
 * Rethrows a throwable as a runtime exception.
 * @param e the throwable to rethrow
 * @param declaredType1 first checked exception type
 * @param declaredType2 second checked exception type
 * @throws IOException if the original throwable is an IOException
 * @throws X1 if the original throwable matches declaredType1
 * @throws X2 if the original throwable matches declaredType2
 */","* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code
   * IOException}, {@code RuntimeException}, {@code Error} or a checked exception of either of the
   * given types. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b>
   * Be sure to declare all of the checked exception types your try block can throw when calling an
   * overload of this method so as to avoid losing the original exception type.
   *
   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e,
   * ...);} to ensure the compiler knows that it will throw.
   *
   * @return this method does not return; it always throws
   * @throws IOException when the given throwable is an IOException
   * @throws X1 when the given throwable is of the declared type X1
   * @throws X2 when the given throwable is of the declared type X2",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSink.java,write,com.google.common.io.ByteSink:write(byte[]),98,104,"/**
 * Writes byte array to an output stream.
 * @param bytes data to be written
 * @throws IOException if an I/O error occurs
 */","* Writes all the given bytes to this sink.
   *
   * @throws IOException if an I/O occurs while writing to this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSink.java,writeFrom,com.google.common.io.ByteSink:writeFrom(java.io.InputStream),113,120,"/**
 * Writes data from an InputStream to this output.
 * @param input the stream to read from
 * @return number of bytes copied
 * @throws IOException if an I/O error occurs
 */","* Writes all the bytes from the given {@code InputStream} to this sink. Does not close {@code
   * input}.
   *
   * @return the number of bytes written
   * @throws IOException if an I/O occurs while reading from {@code input} or writing to this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sliceStream,com.google.common.io.ByteSource$SlicedByteSource:sliceStream(java.io.InputStream),505,527,"/**
 * Slices an input stream to a specified range.
 * @param in the original input stream
 * @return sliced InputStream or empty if offset exceeds EOF
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,isEmpty,com.google.common.io.ByteSource:isEmpty(),151,165,"/**
* Checks if the stream is empty.
* @return true if the stream has no content, false otherwise
* @throws IOException if an I/O error occurs
*/","* Returns whether the source has zero bytes. The default implementation first checks {@link
   * #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be non-zero.
   * If the size is not known, it falls back to opening a stream and checking for EOF.
   *
   * <p>Note that, in cases where {@code sizeIfKnown} returns zero, it is <i>possible</i> that bytes
   * are actually available for reading. (For example, some special files may return a size of 0
   * despite actually having content when read.) This means that a source may return {@code true}
   * from {@code isEmpty()} despite having readable content.
   *
   * @throws IOException if an I/O error occurs
   * @since 15.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,size,com.google.common.io.ByteSource:size(),204,229,"/**
* Returns the size of the stream, first by skipping if possible, then by reading.
* @throws IOException if an I/O error occurs
*/","* Returns the size of this source in bytes, even if doing so requires opening and traversing an
   * entire stream. To avoid a potentially expensive operation, see {@link #sizeIfKnown}.
   *
   * <p>The default implementation calls {@link #sizeIfKnown} and returns the value if present. If
   * absent, it will fall back to a heavyweight operation that will open a stream, read (or {@link
   * InputStream#skip(long) skip}, if possible) to the end of the stream and return the total number
   * of bytes that were read.
   *
   * <p>Note that for some sources that implement {@link #sizeIfKnown} to provide a more efficient
   * implementation, it is <i>possible</i> that this method will return a different number of bytes
   * than would be returned by reading all of the bytes (for example, some special files may return
   * a size of 0 despite actually having content when read).
   *
   * <p>In either case, for mutable sources such as files, a subsequent read may return a different
   * number of bytes if the contents are changed.
   *
   * @throws IOException if an I/O error occurs while reading the size of this source",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,copyTo,com.google.common.io.ByteSource:copyTo(java.io.OutputStream),249,262,"/**
* Copies contents to an OutputStream.
* @param output the target OutputStream
* @return number of bytes copied
* @throws IOException if I/O error occurs
*/","* Copies the contents of this byte source to the given {@code OutputStream}. Does not close
   * {@code output}.
   *
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     output}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,copyTo,com.google.common.io.ByteSource:copyTo(com.google.common.io.ByteSink),271,285,"/**
 * Copies content to a sink.
 * @param sink destination for the copied bytes
 * @return number of bytes copied
 * @throws IOException if an I/O error occurs
 */","* Copies the contents of this byte source to the given {@code ByteSink}.
   *
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     sink}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,read,com.google.common.io.ByteSource:read(),292,305,"/**
 * Reads data from an input stream and returns it as a byte array.
 * @return byte array containing the read data
 * @throws IOException if an I/O error occurs
 */","* Reads the full contents of this byte source as a byte array.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,read,com.google.common.io.ByteSource:read(com.google.common.io.ByteProcessor),316,330,"/**
 * Reads bytes using a processor.
 * @param processor to process the bytes
 * @return result of processing or null if not applicable
 * @throws IOException on I/O error
 */","* Reads the contents of this byte source using the given {@code processor} to process bytes as
   * they are read. Stops when all bytes have been read or the consumer returns {@code false}.
   * Returns the result produced by the processor.
   *
   * @throws IOException if an I/O error occurs while reading from this source or if {@code
   *     processor} throws an {@code IOException}
   * @since 16.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,contentEquals,com.google.common.io.ByteSource:contentEquals(com.google.common.io.ByteSource),349,361,"/**
* Compares content of this source with another.
* @param other the ByteSource to compare against
* @return true if contents are equal, false otherwise
* @throws IOException if an I/O error occurs
*/","* Checks that the contents of this byte source are equal to the contents of the given byte
   * source.
   *
   * @throws IOException if an I/O error occurs while reading from this source or {@code other}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,write,com.google.common.io.CharSink:write(java.lang.CharSequence),94,100,"/**
 * Writes a character sequence to an output stream.
 * @param charSequence the sequence of characters to write
 * @throws IOException if an I/O error occurs
 */","* Writes the given character sequence to this sink.
   *
   * @throws IOException if an I/O error while writing to this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeFrom,com.google.common.io.CharSink:writeFrom(java.lang.Readable),167,174,"/**
 * Writes content from a Readable to an output stream.
 * @param readable source of characters to write
 * @return number of characters copied
 * @throws IOException if an I/O error occurs
 */","* Writes all the text from the given {@link Readable} (such as a {@link Reader}) to this sink.
   * Does not close {@code readable} if it is {@code Closeable}.
   *
   * @return the number of characters written
   * @throws IOException if an I/O error occurs while reading from {@code readable} or writing to
   *     this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,copyTo,com.google.common.io.CharSource$StringCharSource:copyTo(com.google.common.io.CharSink),657,670,"/**
 * Copies character sequence to a sink.
 * @param sink destination for the character sequence
 * @return number of characters copied
 * @throws IOException if an I/O error occurs
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,length,com.google.common.io.CharSource:length(),213,228,"/**
 * Returns the length of the stream.
 * @return length in bytes
 * @throws IOException if an I/O error occurs
 */","* Returns the length of this source in chars, even if doing so requires opening and traversing an
   * entire stream. To avoid a potentially expensive operation, see {@link #lengthIfKnown}.
   *
   * <p>The default implementation calls {@link #lengthIfKnown} and returns the value if present. If
   * absent, it will fall back to a heavyweight operation that will open a stream, {@link
   * Reader#skip(long) skip} to the end of the stream, and return the total number of chars that
   * were skipped.
   *
   * <p>Note that for sources that implement {@link #lengthIfKnown} to provide a more efficient
   * implementation, it is <i>possible</i> that this method will return a different number of chars
   * than would be returned by reading all of the chars.
   *
   * <p>In either case, for mutable sources such as files, a subsequent read may return a different
   * number of chars if the contents are changed.
   *
   * @throws IOException if an I/O error occurs while reading the length of this source
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,copyTo,com.google.common.io.CharSource:copyTo(java.lang.Appendable),247,260,"/**
 * Copies content to an Appendable.
 * @param appendable destination for copied content
 * @return number of characters copied
 * @throws IOException if an I/O error occurs
 */","* Appends the contents of this source to the given {@link Appendable} (such as a {@link Writer}).
   * Does not close {@code appendable} if it is {@code Closeable}.
   *
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     appendable}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,copyTo,com.google.common.io.CharSource:copyTo(com.google.common.io.CharSink),269,283,"/**
* Copies content to a sink.
* @param sink destination for the copied content
* @return number of characters copied
* @throws IOException if an I/O error occurs
*/","* Copies the contents of this source to the given sink.
   *
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     sink}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readFirstLine,com.google.common.io.CharSource:readFirstLine(),312,322,"/**
* Reads the first line from a resource.
* @return the first line of the resource or null if empty
* @throws IOException if an I/O error occurs
*/","* Reads the first line of this source as a string. Returns {@code null} if this source is empty.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource:readLines(com.google.common.io.LineProcessor),366,380,"/**
 * Reads lines using a LineProcessor.
 * @param processor processes each line and returns a result
 * @return result from the processor or null if not applicable
 * @throws IOException if an I/O error occurs
 */","* Reads lines of text from this source, processing each line as it is read using the given {@link
   * LineProcessor processor}. Stops when all lines have been processed or the processor returns
   * {@code false} and returns the result produced by the processor.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source or if {@code
   *     processor} throws an {@code IOException}
   * @since 16.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,isEmpty,com.google.common.io.CharSource:isEmpty(),416,430,"/**
* Checks if the stream is empty.
* @return true if the stream has no content, false otherwise
* @throws IOException if an I/O error occurs
*/","* Returns whether the source has zero chars. The default implementation first checks {@link
   * #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be
   * non-zero. If the length is not known, it falls back to opening a stream and checking for EOF.
   *
   * <p>Note that, in cases where {@code lengthIfKnown} returns zero, it is <i>possible</i> that
   * chars are actually available for reading. This means that a source may return {@code true} from
   * {@code isEmpty()} despite having readable content.
   *
   * @throws IOException if an I/O error occurs
   * @since 15.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,read,com.google.common.io.Files$FileByteSource:read(),151,162,"/**
* Reads file content into a byte array.
* @return byte array containing file data
* @throws IOException if an I/O error occurs
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,mapInternal,"com.google.common.io.Files:mapInternal(java.io.File,java.nio.channels.FileChannel$MapMode,long)",696,712,"/**
 * Maps a file to a memory-mapped buffer.
 * @param file the file to map
 * @param mode the mapping mode (READ_ONLY or READ_WRITE)
 * @param size the size of the region to map, -1 for entire file
 * @return MappedByteBuffer representing the mapped file region
 * @throws IOException if an I/O error occurs
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,addDelayedShutdownHook,"com.google.common.util.concurrent.MoreExecutors$Application:addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)",263,283,"/**
* Adds a delayed shutdown hook for an executor service.
* @param service the ExecutorService to shut down
* @param terminationTimeout maximum time to wait for termination
* @param timeUnit unit of time for the timeout
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,expand,com.google.common.cache.LocalCache$Segment:expand(),2865,2932,"/**
 * Expands the hash table by doubling its capacity.
 * Reclassifies entries to new bins with power-of-two offset.
 */",Expands the table if possible.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeEntryFromChain,"com.google.common.cache.LocalCache$Segment:removeEntryFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",3261,3277,"/**
 * Removes an entry from the reference chain.
 * @param first first entry in the chain
 * @param entry entry to be removed
 * @return new first entry or null if empty
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterKeys,"com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.Multimap,com.google.common.base.Predicate)",1980,1996,"/**
* Filters keys in a multimap based on a predicate.
* @param <K> key type
* @param <V> value type
* @param unfiltered original multimap to filter
* @param keyPredicate predicate for key filtering
* @return new multimap with filtered keys
*/","* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,checkHealthy,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:checkHealthy(),759,771,"/**
* Checks if all services are running.
* Throws IllegalStateException if any service is not running.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterValues,"com.google.common.collect.Multimaps:filterValues(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",2138,2142,"/**
* Filters entries in a multimap by value.
* @param unfiltered the original multimap to filter
* @param valuePredicate predicate for filtering values
* @return a new multimap with filtered entries
*/","* Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a value that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose value satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterEntries,"com.google.common.collect.Multimaps:filterEntries(com.google.common.collect.Multimap,com.google.common.base.Predicate)",2169,2179,"/**
 * Filters entries in a multimap based on a predicate.
 * @param unfiltered the original multimap to filter
 * @param entryPredicate predicate for filtering entries
 * @return a new multimap with filtered entries
 */","* Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned multimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key/value pair that
   * doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,createColumnKeyIterator,com.google.common.collect.TreeBasedTable:createColumnKeyIterator(),309,338,"/**
* Creates an iterator for unique column keys sorted by comparator.
* @return Iterator of unique column keys
*/",Overridden column iterator to return columns values in globally sorted order.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,remove,com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl:remove(java.lang.Object),198,222,"/**
 * Removes entries matching the key and condition.
 * @param key key to remove entries for
 * @return Collection of removed values or null if none match
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompoundOrdering.java,<init>,com.google.common.collect.CompoundOrdering:<init>(java.lang.Iterable),38,42,"/**
* Constructs a compound ordering from an iterable of comparators.
* @param comparators iterable of comparators to be used in order
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,copyOf,com.google.common.collect.ImmutableBiMap:copyOf(java.lang.Iterable),556,573,"/**
* Creates an immutable bimap from an iterable of entries.
* @param entries iterable containing key-value pairs
* @return ImmutableBiMap created from the entries
*/","* Returns an immutable bimap containing the given entries. The returned bimap iterates over
   * entries in the same order as the original iterable.
   *
   * @throws IllegalArgumentException if two keys have the same value or two values have the same
   *     key
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,copyOf,com.google.common.collect.ImmutableMap:copyOf(java.lang.Iterable),713,731,"/**
* Creates an immutable map from iterable entries.
* @param entries iterable of key-value pairs
* @return ImmutableMap containing the provided entries
*/","* Returns an immutable map containing the specified entries. The returned map iterates over
   * entries in the same order as the original iterable.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @throws IllegalArgumentException if two entries have the same key
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toArray,"com.google.common.collect.Iterables:toArray(java.lang.Iterable,java.lang.Class)",287,291,"/**
* Converts an Iterable to a typed array.
* @param iterable source Iterable
* @param type array element class
* @return array containing elements of the Iterable
*/","* Copies an iterable's elements into an array.
   *
   * @param iterable the iterable to copy
   * @param type the type of the elements
   * @return a newly-allocated array into which all the elements of the iterable have been copied",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,"com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.lang.Iterable)",296,311,"/**
* Creates an immutable sorted set from elements with a specified comparator.
* @param comparator the comparator to use for ordering elements
* @param elements the iterable source of elements
* @return an ImmutableSortedSet containing the sorted elements
*/","* Returns an immutable sorted set containing the given elements sorted by the given {@code
   * Comparator}. When multiple elements are equivalent according to {@code compare()}, only the
   * first one specified is included. This method iterates over {@code elements} at most once.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,sortedCopy,com.google.common.collect.Ordering:sortedCopy(java.lang.Iterable),862,867,"/**
* Creates a sorted copy of the input iterable.
* @param elements iterable to be copied and sorted
* @return sorted list containing elements from the iterable
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$OrderedPermutationCollection:iterator(),485,488,"/**
* Returns an iterator over ordered permutations of the input list.
* @param inputList the list to permute
* @param comparator defines the order of elements
* @return Iterator of List<E> representing ordered permutations
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedLists.java,binarySearch,"com.google.common.collect.SortedLists:binarySearch(java.util.List,com.google.common.base.Function,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior)",237,246,"/**
* Performs binary search on a list using a key function and comparator.
* @param list the list to search
* @param keyFunction extracts key from elements
* @param key the key to find
* @param keyComparator comparator for keys
* @param presentBehavior behavior when key is found
* @param absentBehavior behavior when key is not found
* @return index of key or insertion point if not found
*/","* Binary searches the list for the specified key, using the specified key function.
   *
   * <p>Equivalent to {@link #binarySearch(List, Object, Comparator, KeyPresentBehavior,
   * KeyAbsentBehavior)} using {@link Lists#transform(List, Function) Lists.transform(list,
   * keyFunction)}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ListMultimap.java,removeAll,com.google.common.collect.ListMultimap:removeAll(java.lang.Object),61,63,"/**
 * Removes all values associated with the given key.
 * @param key the key whose mappings are to be removed
 * @return list of removed values, or empty list if key not found
 */","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link java.util.Collection} specified in
   * the {@link Multimap} interface.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,"com.google.common.collect.Multimaps$TransformedEntriesMultimap:remove(java.lang.Object,java.lang.Object)",1582,1586,"/**
 * Removes a value associated with a key.
 * @param key   the key to identify the collection of values
 * @param value the value to be removed from the collection
 * @return true if the value was successfully removed, false otherwise
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,keySet,com.google.common.collect.AbstractNavigableMap:keySet(),145,148,"/**
 * Returns a set of all keys in the map.
 * @return a Set containing all the keys
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$DescendingMap:keySet(),4407,4410,"/**
 * Returns a set of all keys in the map.
 * @return a Set containing all keys
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:descendingMap(),2290,2293,"/**
* Returns a descending view of the map.
* @return NavigableMap with entries transformed by the given transformer
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:headMap(java.lang.Object,boolean)",2315,2318,"/**
* Returns a navigable map containing entries up to a specified key.
* @param toKey the upper bound key
* @param inclusive whether the upper bound is inclusive
* @return NavigableMap with transformed values
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",2360,2368,"/**
* Returns a submap of entries within the specified key range.
* @param fromKey starting key (inclusive if fromInclusive is true)
* @param fromInclusive whether the start key is inclusive
* @param toKey ending key (inclusive if toInclusive is true)
* @param toInclusive whether the end key is inclusive
* @return NavigableMap with transformed values
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:tailMap(java.lang.Object,boolean)",2380,2383,"/**
* Returns a navigable map containing entries with keys greater than or equal to the specified key.
* @param fromKey the lower bound of the keys in the returned map
* @param inclusive true if the lower bound is inclusive
* @return NavigableMap with transformed values
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformValues,"com.google.common.collect.Maps:transformValues(java.util.NavigableMap,com.google.common.base.Function)",1903,1910,"/**
* Transforms values of a NavigableMap using a given function.
* @param fromMap original map with keys of type K and values of type V1
* @param function transformation function mapping V1 to V2
* @return new NavigableMap with transformed values
*/","* Returns a view of a navigable map where each value is transformed by a function. All other
   * properties of the map, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * NavigableMap<String, Integer> map = Maps.newTreeMap();
   * map.put(""a"", 4);
   * map.put(""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * NavigableMap<String, Double> transformed =
   *      Maps.transformNavigableValues(map, sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=2.0, b=3.0}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed map might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
   * view, copy the returned map into a new map of your choosing.
   *
   * @since 13.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowMap,com.google.common.collect.Tables$UnmodifiableRowSortedMap:rowMap(),656,660,"/**
* Returns an unmodifiable sorted map of rows.
* @return a SortedMap where each key is a row and value is an unmodifiable Map of columns to values
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,put,"com.google.common.collect.TableCollectors$ImmutableTableCollectorState:put(java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)",141,150,"/**
 * Inserts or merges a value in the table.
 * @param row key for the row
 * @param column key for the column
 * @param value to insert or merge
 * @param merger function to merge existing value with new value
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeMapping,"com.google.common.collect.StandardTable:removeMapping(java.lang.Object,java.lang.Object,java.lang.Object)",198,205,"/**
 * Removes a mapping from the data structure.
 * @param rowKey key identifying the row
 * @param columnKey key identifying the column
 * @param value value to be removed
 * @return true if removed, false if not found
 */","Remove a row key / column key / value mapping, if present.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:remove(java.lang.Object),941,953,"/**
* Removes an entry by key if present.
* @param obj object to be removed
* @return true if successfully removed, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,computeToString,com.google.common.net.MediaType:computeToString(),1236,1250,"/**
* Constructs a string representation of the object.
* @return formatted string including type, subtype, and parameters
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableMap,"com.google.common.collect.Synchronized:navigableMap(java.util.NavigableMap,java.lang.Object)",1593,1597,"/**
 * Wraps a NavigableMap with synchronization.
 * @param navigableMap the map to wrap
 * @param mutex object used for locking
 * @return synchronized NavigableMap
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headMap,com.google.common.collect.Synchronized$SynchronizedSortedMap:headMap(java.lang.Object),1308,1313,"/**
* Returns a view of the portion of this map whose keys are strictly less than toKey.
* @param toKey upper bound key, not included in the returned map
* @return SortedMap containing elements with keys less than toKey
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subMap,"com.google.common.collect.Synchronized$SynchronizedSortedMap:subMap(java.lang.Object,java.lang.Object)",1322,1327,"/**
* Returns a view of the portion of this map whose keys are between fromKey and toKey.
* @param fromKey low endpoint (inclusive) of the subMap
* @param toKey high endpoint (exclusive) of the subMap
* @return SortedMap with keys in the specified range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailMap,com.google.common.collect.Synchronized$SynchronizedSortedMap:tailMap(java.lang.Object),1329,1334,"/**
* Returns a view of the portion of this map whose keys are greater than or equal to fromKey.
* @param fromKey low endpoint (inclusive) of the returned map
* @return SortedMap containing the tail of this map
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedListMultimap,com.google.common.collect.Multimaps:synchronizedListMultimap(com.google.common.collect.ListMultimap),990,994,"/**
 * Creates a synchronized list multimap.
 * @param multimap the original list multimap to wrap
 * @return a synchronized version of the input multimap
 */","* Returns a synchronized (thread-safe) {@code ListMultimap} backed by the specified multimap.
   *
   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.
   *
   * @param multimap the multimap to be wrapped
   * @return a synchronized view of the specified multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sortedSetMultimap,"com.google.common.collect.Synchronized:sortedSetMultimap(com.google.common.collect.SortedSetMultimap,java.lang.Object)",881,888,"/**
 * Wraps a SortedSetMultimap with synchronization.
 * @param multimap the original multimap to wrap
 * @param mutex object used for locking (null uses multimap itself)
 * @return synchronized SortedSetMultimap instance
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedSetMultimap,com.google.common.collect.Multimaps:synchronizedSetMultimap(com.google.common.collect.SetMultimap),906,910,"/**
* Returns a thread-safe set multimap backed by the specified multimap.
* @param multimap the multimap to be wrapped
* @return synchronized SetMultimap instance
*/","* Returns a synchronized (thread-safe) {@code SetMultimap} backed by the specified multimap.
   *
   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param multimap the multimap to be wrapped
   * @return a synchronized view of the specified multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,removeEdge,com.google.common.graph.StandardMutableGraph:removeEdge(com.google.common.graph.EndpointPair),70,74,"/**
 * Removes an edge between two nodes.
 * @param endpoints pair of nodes defining the edge
 * @return true if edge was removed, false otherwise
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentNodes,com.google.common.graph.ImmutableNetwork:incidentNodes(java.lang.Object),135,141,"/**
 * Retrieves incident nodes for a given edge.
 * @param edge the edge to find incident nodes for
 * @return an EndpointPair containing the two incident nodes
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,toString,com.google.common.io.CharStreams:toString(java.lang.Readable),162,164,"/**
 * Converts Readable to String.
 * @param r Readable object to convert
 * @return String representation of Readable content
 * @throws IOException if an I/O error occurs
 */","* Reads all characters from a {@link Readable} object into a {@link String}. Does not close the
   * {@code Readable}.
   *
   * @param r the object to read from
   * @return a string containing all the characters
   * @throws IOException if an I/O error occurs",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,catching,"com.google.common.util.concurrent.FluentFuture:catching(java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)",190,195,"/**
* Catches exceptions and provides a fallback value.
* @param exceptionType type of exception to catch
* @param fallback function to compute fallback result
* @param executor executor for fallback computation
* @return FluentFuture with result or fallback value
*/","* Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code
   * Future} fails with the given {@code exceptionType}, from the result provided by the {@code
   * fallback}. {@link Function#apply} is not invoked until the primary input has failed, so if the
   * primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an
   * exception is thrown, this exception is used as the result of the output {@code Future}.
   *
   * <p>Usage example:
   *
   * {@snippet :
   * // Falling back to a zero counter in case an exception happens when processing the RPC to fetch
   * // counters.
   * ListenableFuture<Integer> faultTolerantFuture =
   *     fetchCounters().catching(FetchException.class, x -> 0, directExecutor());
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It
   * can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle}
   * and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link
   * #transform}.
   *
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against the input's exception. ""The input's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a
   *     different kind of exception, that exception itself. To avoid hiding bugs and other
   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code
   *     Throwable.class} in particular.
   * @param fallback the {@link Function} to be called if the input fails with the expected
   *     exception type. The function's argument is the input's exception. ""The input's exception""
   *     means the cause of the {@link ExecutionException} thrown by {@code this.get()} or, if
   *     {@code get()} throws a different kind of exception, that exception itself.
   * @param executor the executor that runs {@code fallback} if the input fails",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,cancel,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:cancel(boolean),122,126,"/**
* Cancels this task.
* @param mayInterruptIfRunning true if the thread executing this task should be interrupted; otherwise, waits for it to finish
* @return false if the task could not be cancelled, typically because it has already completed normally; true otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,cancel,com.google.common.util.concurrent.Futures$InCompletionOrderFuture:cancel(boolean),954,970,"/**
* Cancels the future task.
* @param interruptIfRunning if true, interrupts the running task
* @return true if cancellation is successful, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,recordInputCompletion,"com.google.common.util.concurrent.Futures$InCompletionOrderState:recordInputCompletion(com.google.common.collect.ImmutableList,int)",1019,1040,"/**
* Records completion of input future and updates delegates.
* @param delegates list of AbstractFuture instances
* @param inputFutureIndex index of completed input future
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadFuture,"com.google.common.cache.LocalCache$LoadingValueReference:loadFuture(java.lang.Object,com.google.common.cache.CacheLoader)",3547,3575,"/**
 * Loads a value asynchronously using a cache loader.
 * @param key the key to load
 * @param loader the cache loader to use
 * @return a ListenableFuture for the loaded value
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,transform,"com.google.common.util.concurrent.FluentFuture:transform(com.google.common.base.Function,java.util.concurrent.Executor)",373,376,"/**
* Transforms the future's result using a given function.
* @param function to apply to the future's result
* @param executor for executing the transformation
* @return FluentFuture with transformed result
*/","* Returns a new {@code Future} whose result is derived from the result of this {@code Future}. If
   * this input {@code Future} fails, the returned {@code Future} fails with the same exception (and
   * the function is not invoked). Example usage:
   *
   * {@snippet :
   * ListenableFuture<List<Row>> rowsFuture =
   *     queryFuture.transform(QueryResult::getRows, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the
   * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel
   * the input, and if the input is cancelled, the returned {@code Future} will receive a callback
   * in which it will attempt to cancel itself.
   *
   * <p>An example use of this method is to convert a serializable object returned from an RPC into
   * a POJO.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenApply} and
   * {@link java.util.concurrent.CompletableFuture#thenApplyAsync}. It can also serve some of the
   * use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link
   * java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}.
   *
   * @param function A Function to transform the results of this future to the results of the
   *     returned future.
   * @param executor Executor to run the function in.
   * @return A future that holds result of the transformation.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractValueGraph$1:incidentEdgeOrder(),101,104,"/**
 * Returns unordered element order for incident edges.
 * @return ElementOrder indicating no specific order
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,directed,com.google.common.graph.GraphBuilder:directed(),82,84,"/**
 * Creates a directed graph builder.
 * @return GraphBuilder configured for directed graphs
 */",Returns a {@link GraphBuilder} for building directed graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,undirected,com.google.common.graph.GraphBuilder:undirected(),87,89,"/**
 * Creates an undirected graph builder.
 * @return GraphBuilder configured for undirected graphs
 */",Returns a {@link GraphBuilder} for building undirected graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,from,com.google.common.graph.GraphBuilder:from(com.google.common.graph.Graph),98,103,"/**
 * Creates a GraphBuilder from an existing Graph.
 * @param graph the source graph to copy properties from
 * @return GraphBuilder with copied properties
 */","* Returns a {@link GraphBuilder} initialized with all properties queryable from {@code graph}.
   *
   * <p>The ""queryable"" properties are those that are exposed through the {@link Graph} interface,
   * such as {@link Graph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)},
   * are not set in the new builder.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,copy,com.google.common.graph.GraphBuilder:copy(),185,192,"/**
* Creates a copy of the GraphBuilder with the same configuration.
* @return A new GraphBuilder instance with identical settings
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,directed,com.google.common.graph.NetworkBuilder:directed(),87,89,"/**
 * Creates a directed network builder.
 * @return NetworkBuilder configured for directed networks
 */",Returns a {@link NetworkBuilder} for building directed networks.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,undirected,com.google.common.graph.NetworkBuilder:undirected(),92,94,"/**
* Creates an undirected network builder.
* @return NetworkBuilder configured for undirected networks
*/",Returns a {@link NetworkBuilder} for building undirected networks.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,from,com.google.common.graph.NetworkBuilder:from(com.google.common.graph.Network),104,110,"/**
* Creates a NetworkBuilder from an existing network.
* @param network the source network to copy properties from
* @return NetworkBuilder with copied configuration and orders
*/","* Returns a {@link NetworkBuilder} initialized with all properties queryable from {@code
   * network}.
   *
   * <p>The ""queryable"" properties are those that are exposed through the {@link Network} interface,
   * such as {@link Network#isDirected()}. Other properties, such as {@link
   * #expectedNodeCount(int)}, are not set in the new builder.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,directed,com.google.common.graph.ValueGraphBuilder:directed(),84,86,"/**
* Creates a builder for a directed value graph.
* @return ValueGraphBuilder configured for directed graphs
*/",Returns a {@link ValueGraphBuilder} for building directed graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,undirected,com.google.common.graph.ValueGraphBuilder:undirected(),89,91,"/**
 * Creates an undirected graph builder.
 * @return ValueGraphBuilder configured for undirected graphs
 */",Returns a {@link ValueGraphBuilder} for building undirected graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,from,com.google.common.graph.ValueGraphBuilder:from(com.google.common.graph.ValueGraph),101,106,"/**
 * Creates a ValueGraphBuilder from an existing graph.
 * @param graph the source graph to copy properties from
 * @return a new ValueGraphBuilder with the same properties as the input graph
 */","* Returns a {@link ValueGraphBuilder} initialized with all properties queryable from {@code
   * graph}.
   *
   * <p>The ""queryable"" properties are those that are exposed through the {@link ValueGraph}
   * interface, such as {@link ValueGraph#isDirected()}. Other properties, such as {@link
   * #expectedNodeCount(int)}, are not set in the new builder.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,copy,com.google.common.graph.ValueGraphBuilder:copy(),193,200,"/**
 * Creates a copy of the current ValueGraphBuilder.
 * @return a new ValueGraphBuilder with the same configuration
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,addListener,"com.google.common.util.concurrent.ServiceManager:addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor)",259,261,"/**
 * Adds a listener with an associated executor.
 * @param listener the listener to be added
 * @param executor the executor to run the listener on
 */","* Registers a {@link Listener} to be {@linkplain Executor#execute executed} on the given
   * executor. The listener will not have previous state changes replayed, so it is suggested that
   * listeners are added before any of the managed services are {@linkplain Service#startAsync
   * started}.
   *
   * <p>{@code addListener} guarantees execution ordering across calls to a given listener but not
   * across calls to multiple listeners. Specifically, a given listener will have its callbacks
   * invoked in the same order as the underlying service enters those states. Additionally, at most
   * one of the listener's callbacks will execute at once. However, multiple listeners' callbacks
   * may execute concurrently, and listeners may execute in an order different from the one in which
   * they were registered.
   *
   * <p>RuntimeExceptions thrown by a listener will be caught and logged. Any exception thrown
   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException}) will be caught and
   * logged.
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}
   * documentation.
   *
   * @param listener the listener to run when the manager changes state
   * @param executor the executor in which the listeners callback methods will be run.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,<init>,com.google.common.collect.CompactLinkedHashMap:<init>(int),106,108,"/**
 * Constructs a CompactLinkedHashMap with the specified expected size.
 * @param expectedSize the initial capacity of the map
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,create,com.google.common.collect.CompactLinkedHashSet:create(),56,58,"/**
 * Creates an empty CompactLinkedHashSet.
 * @return An empty CompactLinkedHashSet instance
 */",Creates an empty {@code CompactLinkedHashSet} instance.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,create,com.google.common.collect.CompactHashSet:create(java.util.Collection),96,101,"/**
* Creates a CompactHashSet from the given collection.
* @param collection elements to add to the set
* @return CompactHashSet containing all elements from the input collection
*/","* Creates a <i>mutable</i> {@code CompactHashSet} instance containing the elements of the given
   * collection in unspecified order.
   *
   * @param collection the elements that the set should contain
   * @return a new {@code CompactHashSet} containing those elements (minus duplicates)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,createWithExpectedSize,com.google.common.collect.CompactLinkedHashSet:createWithExpectedSize(int),97,100,"/**
* Creates a CompactLinkedHashSet with an initial capacity.
* @param expectedSize the expected number of elements in the set
* @return a new CompactLinkedHashSet instance
*/","* Creates a {@code CompactLinkedHashSet} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactLinkedHashSet} with enough capacity to hold {@code
   *     expectedSize} elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,<init>,"com.google.common.collect.TreeMultimap:<init>(java.util.Comparator,java.util.Comparator)",113,117,"/**
* Constructs a TreeMultimap with custom comparators for keys and values.
* @param keyComparator comparator for ordering the keys
* @param valueComparator comparator for ordering the values within each key's collection
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newSortedSetMultimap,"com.google.common.collect.Multimaps:newSortedSetMultimap(java.util.Map,com.google.common.base.Supplier)",523,527,"/**
* Creates a new SortedSetMultimap from a given map and supplier.
* @param map initial map with keys and collections of values
* @param factory supplier for creating sorted sets
* @return SortedSetMultimap instance
*/","* Creates a new {@code SortedSetMultimap} that uses the provided map and factory. It can generate
   * a multimap based on arbitrary {@link Map} and {@link SortedSet} classes.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}
   * method returns instances of a different class than {@code factory.get()} does.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code
   * factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedSortedSetMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link TreeMultimap#create()} and {@link
   * TreeMultimap#create(Comparator, Comparator)} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by
   * {@code factory}. Those objects should not be manually updated and they should not use soft,
   * weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty sorted sets that will each hold all values for a given
   *     key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,toImmutableMultiset,com.google.common.collect.ImmutableMultiset:toImmutableMultiset(),69,71,"/**
* Creates an immutable multiset collector.
* @return Collector that accumulates elements into an ImmutableMultiset
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableMultiset}. Elements iterate in order by the <i>first</i> appearance of that element in
   * encounter order.
   *
   * @since 21.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,toImmutableMultiset,"com.google.common.collect.ImmutableMultiset:toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction)",84,89,"/**
* Converts a stream to an ImmutableMultiset.
* @param elementFunction extracts elements from input objects
* @param countFunction determines the count for each element
* @return ImmutableMultiset containing elements and their counts
*/","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableMultiset} whose
   * elements are the result of applying {@code elementFunction} to the inputs, with counts equal to
   * the result of applying {@code countFunction} to the inputs.
   *
   * <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the first
   * occurrence in encounter order appears in the resulting multiset, with count equal to the sum of
   * the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element.
   *
   * @since 22.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,builder,com.google.common.collect.ImmutableMultiset:builder(),453,455,"/**
 * Creates a new instance of Builder.
 * @param <E> element type for the builder
 * @return Builder instance
 */","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner:join(java.lang.Object[]),257,261,"/**
* Joins array elements into a single string.
* @param parts array of objects to be joined
* @return concatenated string of array elements
*/","* Returns a string containing the string representation of each of {@code parts}, using the
   * previously configured separator between each.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,join,com.google.common.collect.FluentIterable:join(com.google.common.base.Joiner),819,821,"/**
 * Joins elements using provided Joiner.
 * @param joiner object to handle joining logic
 * @return joined string result
 */","* Returns a {@link String} containing all of the elements of this fluent iterable joined with
   * {@code joiner}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code joiner.join(stream.iterator())}, or, if you are not
   * using any optional {@code Joiner} features, {@code
   * stream.collect(Collectors.joining(delimiter)}.
   *
   * @since 18.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,simplifyPath,com.google.common.io.Files:simplifyPath(java.lang.String),734,778,"/**
 * Simplifies a given pathname.
 * @param pathname the path to simplify
 * @return simplified canonical path
 */","* Returns the lexically cleaned form of the path name, <i>usually</i> (but not always) equivalent
   * to the original. The following heuristics are used:
   *
   * <ul>
   *   <li>empty string becomes .
   *   <li>. stays as .
   *   <li>fold out ./
   *   <li>fold out ../ when possible
   *   <li>collapse multiple slashes
   *   <li>delete trailing slashes (unless the path is just ""/"")
   * </ul>
   *
   * <p>These heuristics do not always match the behavior of the filesystem. In particular, consider
   * the path {@code a/../b}, which {@code simplifyPath} will change to {@code b}. If {@code a} is a
   * symlink to {@code x}, {@code a/../b} may refer to a sibling of {@code x}, rather than the
   * sibling of {@code a} referred to by {@code b}.
   *
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,toString,com.google.common.reflect.Types$ParameterizedTypeImpl:toString(),281,293,"/**
* Generates string representation of generic type.
* @return formatted string with raw type and arguments
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/thirdparty/publicsuffix/TrieParser.java,doParseTrieToBuilder,"com.google.thirdparty.publicsuffix.TrieParser:doParseTrieToBuilder(java.util.Deque,java.lang.CharSequence,int,com.google.common.collect.ImmutableMap$Builder)",64,114,"/**
* Parses encoded trie data into a builder map.
* @param stack used to track path in the trie
* @param encoded input string containing trie data
* @param start index to begin parsing from
* @param builder map to store parsed suffixes and types
* @return number of characters processed
*/","* Parses a trie node and returns the number of characters consumed.
   *
   * @param stack The prefixes that precede the characters represented by this node. Each entry of
   *     the stack is in reverse order.
   * @param encoded The serialized trie.
   * @param start An index in the encoded serialized trie to begin reading characters from.
   * @param builder A map builder to which all entries will be added.
   * @return The number of characters consumed from {@code encoded}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,makeMap,com.google.common.collect.MapMaker:makeMap(),283,288,"/**
* Creates a concurrent map.
* @return ConcurrentMap instance based on configuration
*/","* Builds a thread-safe map. This method does not alter the state of this {@code MapMaker}
   * instance, so it can be invoked again to create multiple independent maps.
   *
   * <p>The bulk operations {@code putAll}, {@code equals}, and {@code clear} are not guaranteed to
   * be performed atomically on the returned map. Additionally, {@code size} and {@code
   * containsValue} are implemented as bulk read operations, and thus may fail to observe concurrent
   * writes.
   *
   * @return a serializable concurrent map having the requested features",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,<init>,com.google.common.collect.Interners$InternerImpl:<init>(com.google.common.collect.MapMaker),123,126,"/**
 * Initializes InternerImpl with a dummy value map.
 * @param mapMaker configuration for the map
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,transformAndConcat,com.google.common.collect.FluentIterable:transformAndConcat(com.google.common.base.Function),497,500,"/**
 * Transforms elements and concatenates results.
 * @param function transformation function converting each element to an iterable
 * @return concatenated FluentIterable of transformed elements
 */","* Applies {@code function} to each element of this fluent iterable and returns a fluent iterable
   * with the concatenated combination of results. {@code function} returns an Iterable of results.
   *
   * <p>The returned fluent iterable's iterator supports {@code remove()} if this function-returned
   * iterables' iterator does. After a successful {@code remove()} call, the returned fluent
   * iterable no longer contains the corresponding element.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#flatMap} (using a function that produces
   * streams, not iterables).
   *
   * @since 13.0 (required {@code Function<E, Iterable<T>>} until 14.0)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,com.google.common.collect.Iterables:concat(java.lang.Iterable),483,486,"/**
* Concatenates multiple Iterables into one.
* @param inputs variable number of Iterable objects
* @return a single Iterable containing all elements from inputs
*/","* Combines multiple iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements of each iterable in {@code inputs}. The input iterators are not polled
   * until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Streams.concat(...)}.
   *
   * @throws NullPointerException if any of the provided iterables is null",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,"com.google.common.util.concurrent.AbstractFuture:get(long,java.util.concurrent.TimeUnit)",233,239,"/**
* Retrieves value with a timeout.
* @param timeout time to wait before timing out
* @param unit unit of time for the timeout
* @return value if available within timeout, otherwise throws exception
* @throws InterruptedException if interrupted while waiting
* @throws TimeoutException if operation times out
* @throws ExecutionException if execution fails
*/","* {@inheritDoc}
   *
   * <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the
   * current thread is interrupted during the call, even if the value is already available.
   *
   * @throws CancellationException {@inheritDoc}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,addNodeInternal,com.google.common.graph.StandardMutableValueGraph:addNodeInternal(java.lang.Object),78,83,"/**
 * Adds a node to the graph.
 * @param node node to be added
 * @return GraphConnections for the added node
 */","* Adds {@code node} to the graph and returns the associated {@link GraphConnections}.
   *
   * @throws IllegalStateException if {@code node} is already present",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterIf,"com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",699,701,"/**
* Enters if condition is met within specified time.
* @param guard condition to evaluate
* @param time maximum wait time
* @return true if entered, false otherwise
*/","* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the
   * lock, but does not wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,valuesSpliterator,com.google.common.collect.ArrayTable:valuesSpliterator(),801,804,"/**
* Returns a spliterator over map values.
* @return Spliterator for values
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,equals,com.google.common.primitives.ImmutableDoubleArray$AsList:equals(java.lang.Object),530,552,"/**
* Compares this AsList to another object.
* @param object the object to compare with
* @return true if objects are equal, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,equals,com.google.common.primitives.ImmutableIntArray$AsList:equals(java.lang.Object),525,547,"/**
* Checks equality with another object.
* @param object the object to compare with
* @return true if equal, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,equals,com.google.common.primitives.ImmutableLongArray$AsList:equals(java.lang.Object),527,549,"/**
* Checks equality with another object.
* @param object the object to compare
* @return true if equal, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat$1:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
 * Converts string to specified case format.
 * @param format target case format
 * @param s input string to convert
 * @return converted string in the specified format
 */",Enum values can override for performance reasons.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat$2:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
* Converts a string to a specified case format.
* @param format target case format
* @param s input string to convert
* @return converted string in the specified case format
*/",Enum values can override for performance reasons.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat$5:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
 * Converts a string from one case format to another.
 * @param format target case format for conversion
 * @param s input string to be converted
 * @return converted string in the specified case format
 */",Enum values can override for performance reasons.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,to,"com.google.common.base.CaseFormat:to(com.google.common.base.CaseFormat,java.lang.String)",129,133,"/**
 * Converts a string from one case format to another.
 * @param format target case format
 * @param str input string
 * @return converted string in the specified format
 */","* Converts the specified {@code String str} from this format to the specified {@code format}. A
   * ""best effort"" approach is taken; if {@code str} does not conform to the assumed format, then
   * the behavior of this method is undefined but we make a reasonable effort at converting anyway.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesNoneOf,com.google.common.base.CharMatcher:matchesNoneOf(java.lang.CharSequence),530,532,"/**
 * Checks if none of the patterns match the given sequence.
 * @param sequence the input string to check
 * @return true if no pattern matches, false otherwise
 */","* Returns {@code true} if a character sequence contains no matching BMP characters. Equivalent to
   * {@code !matchesAnyOf(sequence)}.
   *
   * <p>The default implementation iterates over the sequence, invoking {@link #matches} for each
   * character, until this returns {@code true} or the end is reached.
   *
   * @param sequence the character sequence to examine, possibly empty
   * @return {@code true} if this matcher matches no characters in the sequence, including when the
   *     sequence is empty",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,removeFrom,com.google.common.base.CharMatcher:removeFrom(java.lang.CharSequence),618,645,"/**
* Removes all occurrences of matching characters from the input sequence.
* @param sequence the input character sequence
* @return a new string with matched characters removed
*/","* Returns a string containing all non-matching characters of a character sequence, in order. For
   * example:
   *
   * {@snippet :
   * CharMatcher.is('a').removeFrom(""bazaar"")
   * }
   *
   * ... returns {@code ""bzr""}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,replaceFrom,"com.google.common.base.CharMatcher:replaceFrom(java.lang.CharSequence,char)",680,694,"/**
* Replaces first occurrence and all matching characters in a sequence.
* @param sequence the input character sequence
* @param replacement the character to replace matches with
* @return modified string with replacements
*/","* Returns a string copy of the input character sequence, with each matching BMP character
   * replaced by a given replacement character. For example:
   *
   * {@snippet :
   * CharMatcher.is('a').replaceFrom(""radar"", 'o')
   * }
   *
   * ... returns {@code ""rodor""}.
   *
   * <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching
   * character, then iterates the remainder of the sequence calling {@link #matches(char)} for each
   * character.
   *
   * @param sequence the character sequence to replace matching characters in
   * @param replacement the character to append to the result string in place of each matching
   *     character in {@code sequence}
   * @return the new string",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeToken,com.google.common.net.MediaType$Tokenizer:consumeToken(com.google.common.base.CharMatcher),1160,1165,"/**
* Consumes and returns a token if present, updating position.
* @param matcher character matcher for token identification
* @return consumed token string
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getEmbeddedIPv4ClientAddress,com.google.common.net.InetAddresses:getEmbeddedIPv4ClientAddress(java.net.Inet6Address),918,932,"/**
 * Extracts embedded IPv4 address from an IPv6 address.
 * @param ip the IPv6 address to process
 * @return the embedded Inet4Address or throws exception if none found
 */","* Examines the Inet6Address to extract the embedded IPv4 client address if the InetAddress is an
   * IPv6 address of one of the specified address types that contain an embedded IPv4 address.
   *
   * <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial
   * spoofability. With other transition addresses spoofing involves (at least) infection of one's
   * BGP routing table.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 client address
   * @return {@link Inet4Address} of embedded IPv4 client address
   * @throws IllegalArgumentException if the argument does not have a valid embedded IPv4 address",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putString,"com.google.common.hash.AbstractHasher:putString(java.lang.CharSequence,java.nio.charset.Charset)",57,61,"/**
* Adds a string to the hash using specified charset.
* @param charSequence the input string
* @param charset character set for encoding
* @return this Hasher instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,com.google.common.hash.Hasher:putBytes(byte[]),62,64,"/**
 * Adds byte array to the hash computation.
 * @param bytes input byte array
 * @return this Hasher instance
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,"com.google.common.hash.AbstractCompositeHashFunction$1:putBytes(byte[],int,int)",66,68,"/**
 * Adds bytes to the hash computation.
 * @param bytes source byte array
 * @param off starting offset in the byte array
 * @param len number of bytes to read from the offset
 * @return this Hasher instance for method chaining
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashBytes,"com.google.common.hash.AbstractHashFunction:hashBytes(byte[],int,int)",64,68,"/**
* Computes the hash of a byte array slice.
* @param input source byte array
* @param off starting offset in the array
* @param len length of the byte slice to hash
* @return HashCode object representing the computed hash
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingInputStream.java,read,"com.google.common.hash.HashingInputStream:read(byte[],int,int)",64,72,"/**
 * Reads bytes into a buffer and updates a hasher.
 * @param bytes destination buffer
 * @param off starting offset in the buffer
 * @param len maximum number of bytes to read
 * @return number of bytes read, or -1 if end of stream
 * @throws IOException if an I/O error occurs
 */","* Reads the specified bytes of data from the underlying input stream and updates the hasher with
   * the bytes read.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingOutputStream.java,write,"com.google.common.hash.HashingOutputStream:write(byte[],int,int)",55,59,"/**
 * Writes bytes to both a hasher and an output stream.
 * @param bytes array of bytes to be written
 * @param off starting offset in the byte array
 * @param len number of bytes to write
 * @throws IOException if I/O error occurs
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,readFully,"com.google.common.io.ByteStreams:readFully(java.io.InputStream,byte[])",797,799,"/**
* Reads fully from input stream into byte array.
* @param in InputStream to read from
* @param b byte array to store data
*/","* Attempts to read enough bytes from the stream to fill the given byte array, with the same
   * behavior as {@link DataInput#readFully(byte[])}. Does not close the stream.
   *
   * @param in the input stream to read from.
   * @param b the buffer into which the data is read.
   * @throws EOFException if this stream reaches the end before reading all the bytes.
   * @throws IOException if an I/O error occurs.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readFully,"com.google.common.io.LittleEndianDataInputStream:readFully(byte[],int,int)",68,71,"/**
 * Reads bytes from the input stream into a byte array.
 * @param b destination byte array
 * @param off starting offset in the array
 * @param len number of bytes to read
 * @throws IOException if an I/O error occurs
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,rotate,"com.google.common.primitives.Booleans:rotate(boolean[],int)",574,576,"/**
 * Rotates elements of the boolean array.
 * @param array the array to be rotated
 * @param distance number of positions to rotate
 */","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Booleans.asList(array),
   * distance)}, but is somewhat faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,rotate,"com.google.common.primitives.Bytes:rotate(byte[],int)",425,427,"/**
 * Rotates elements of the byte array.
 * @param array the array to be rotated
 * @param distance number of positions to rotate
 */","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array),
   * distance)}, but is somewhat faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,sortDescending,com.google.common.primitives.SignedBytes:sortDescending(byte[]),200,203,"/**
* Sorts byte array in descending order.
* @param array the array to be sorted
*/","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,sortDescending,com.google.common.primitives.Chars:sortDescending(char[]),456,459,"/**
* Sorts characters in an array in descending order.
* @param array char array to be sorted
*/","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,rotate,"com.google.common.primitives.Chars:rotate(char[],int)",515,517,"/**
 * Rotates elements of a character array.
 * @param array the array to be rotated
 * @param distance the number of positions to rotate
 */","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Chars.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,sortDescending,com.google.common.primitives.Doubles:sortDescending(double[]),427,430,"/**
* Sorts an array of doubles in descending order.
* @param array array to be sorted
*/","* Sorts the elements of {@code array} in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,rotate,"com.google.common.primitives.Doubles:rotate(double[],int)",489,491,"/**
 * Rotates elements of an array by a specified distance.
 * @param array the array to be rotated
 * @param distance number of positions to rotate elements
 */","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,sortDescending,com.google.common.primitives.Floats:sortDescending(float[]),424,427,"/**
* Sorts an array of floats in descending order.
* @param array the float array to be sorted
*/","* Sorts the elements of {@code array} in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,rotate,"com.google.common.primitives.Floats:rotate(float[],int)",486,488,"/**
 * Rotates elements of an array.
 * @param array the array to be rotated
 * @param distance number of positions to rotate
 */","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Floats.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,sortDescending,com.google.common.primitives.Ints:sortDescending(int[]),489,492,"/**
* Sorts an integer array in descending order.
* @param array the array to be sorted
*/","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,rotate,"com.google.common.primitives.Ints:rotate(int[],int)",548,550,"/**
 * Rotates elements of the array to the right by the given distance.
 * @param array the array to be rotated
 * @param distance number of positions to rotate
 */","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Ints.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,sortDescending,com.google.common.primitives.Longs:sortDescending(long[]),567,570,"/**
 * Sorts an array in descending order.
 * @param array the array to be sorted
 */","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,rotate,"com.google.common.primitives.Longs:rotate(long[],int)",626,628,"/**
 * Rotates elements of the array to the right by the given distance.
 * @param array the array to be rotated
 * @param distance number of positions to rotate elements
 */","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Longs.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,sortDescending,com.google.common.primitives.Shorts:sortDescending(short[]),479,482,"/**
* Sorts short array in descending order.
* @param array array of shorts to be sorted
*/","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,rotate,"com.google.common.primitives.Shorts:rotate(short[],int)",538,540,"/**
 * Rotates elements of the array to the right by the given distance.
 * @param array the array to be rotated
 * @param distance number of positions to rotate the array
 */","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Shorts.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,delegate,com.google.common.collect.ForwardingCollection:delegate(),56,57,"/**
 * Delegates to a collection of elements.
 * @return Collection of elements
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,withKeyValueSeparator,com.google.common.base.Splitter:withKeyValueSeparator(java.lang.String),432,434,"/**
 * Sets the key-value separator.
 * @param separator character used to separate keys and values
 * @return MapSplitter instance with specified separator
 */","* Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries
   * into keys and values using the specified separator.
   *
   * @since 10.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,com.google.common.util.concurrent.RateLimiter:create(double),117,132,"/**
* Creates a RateLimiter with specified permits per second.
* @param permitsPerSecond rate at which permits are granted
* @return configured RateLimiter instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,long,java.util.concurrent.TimeUnit)",193,198,"/**
 * Creates a rate limiter with specified permits per second and warmup period.
 * @param permitsPerSecond number of permits issued per second
 * @param warmupPeriod duration of the warmup period for new permits
 * @param unit time unit for the warmup period
 * @return RateLimiter instance configured with given parameters
 */","* Creates a {@code RateLimiter} with the specified stable throughput, given as ""permits per
   * second"" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>,
   * during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum
   * rate at the end of the period (as long as there are enough requests to saturate it). Similarly,
   * if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it
   * will gradually return to its ""cold"" state, i.e. it will go through the same warming up process
   * as when it was first created.
   *
   * <p>The returned {@code RateLimiter} is intended for cases where the resource that actually
   * fulfills the requests (e.g., a remote server) needs ""warmup"" time, rather than being
   * immediately accessed at the stable (maximum) rate.
   *
   * <p>The returned {@code RateLimiter} starts in a ""cold"" state (i.e. the warmup period will
   * follow), and if it is left unused for long enough, it will return to that state.
   *
   * @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many
   *     permits become available per second
   * @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate,
   *     before reaching its stable (maximum) rate
   * @param unit the time unit of the warmupPeriod argument
   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code
   *     warmupPeriod} is negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,writeReplace,com.google.common.cache.LocalCache$LocalLoadingCache:writeReplace(),4979,4982,"/**
 * Returns a proxy object for serialization to replace this instance.
 * @return LoadingSerializationProxy containing local cache
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,keys,com.google.common.collect.Multimaps$UnmodifiableMultimap:keys(),732,739,"/**
 * Returns an unmodifiable view of the keys.
 * @return unmodifiable Multiset of keys
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,unmodifiableSortedMultiset,com.google.common.collect.Multisets:unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset),244,248,"/**
* Returns an unmodifiable view of the specified sorted multiset.
* @param sortedMultiset the sorted multiset to wrap
* @return an unmodifiable SortedMultiset backed by the specified multiset
*/","* Returns an unmodifiable view of the specified sorted multiset. Query operations on the returned
   * multiset ""read through"" to the specified multiset, and attempts to modify the returned multiset
   * result in an {@link UnsupportedOperationException}.
   *
   * <p>The returned multiset will be serializable if the specified multiset is serializable.
   *
   * @param sortedMultiset the sorted multiset for which an unmodifiable view is to be generated
   * @return an unmodifiable view of the multiset
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,descendingMultiset,com.google.common.collect.UnmodifiableSortedMultiset:descendingMultiset(),66,75,"/**
* Returns an unmodifiable view of the multiset in reverse order.
* @return SortedMultiset<E> with elements in descending order
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,get,com.google.common.collect.FilteredKeyListMultimap:get(java.lang.Object),41,44,"/**
 * Retrieves a list of values associated with a given key.
 * @param key unique identifier to look up values
 * @return List of values or null if the key is not present
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,get,com.google.common.collect.FilteredKeySetMultimap:get(java.lang.Object),43,46,"/**
* Retrieves the set of values associated with the specified key.
* @param key the key whose associated values are to be returned
* @return a Set containing the values for the given key, or an empty set if no mapping exists
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,com.google.common.collect.Sets$DescendingSet:<init>(java.util.NavigableSet),2151,2153,"/**
 * Initializes a descending set from a given navigable set.
 * @param forward original navigable set to wrap
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingSet,com.google.common.collect.Sets$UnmodifiableNavigableSet:descendingSet(),2027,2035,"/**
* Returns an unmodifiable view of the descending set.
* @return NavigableSet containing elements in reverse order
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,unmodifiableNavigableSet,com.google.common.collect.Sets:unmodifiableNavigableSet(java.util.NavigableSet),1950,1956,"/**
* Returns an unmodifiable view of the specified navigable set.
* @param set the navigable set to wrap
* @return an unmodifiable navigable set
*/","* Returns an unmodifiable view of the specified navigable set. This method allows modules to
   * provide users with ""read-only"" access to internal navigable sets. Query operations on the
   * returned set ""read through"" to the specified set, and attempts to modify the returned set,
   * whether direct or via its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned navigable set will be serializable if the specified navigable set is
   * serializable.
   *
   * <p><b>Java 8+ users and later:</b> Prefer {@link Collections#unmodifiableNavigableSet}.
   *
   * @param set the navigable set for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified navigable set
   * @since 12.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,entries,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:entries(),843,846,"/**
 * Returns an unmodifiable set of map entries.
 * @return Set of Map.Entry objects representing key-value pairs
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableEntries,com.google.common.collect.Multimaps:unmodifiableEntries(java.util.Collection),1058,1064,"/**
* Returns an unmodifiable view of the specified collection of map entries.
* @param entries collection of map entries to be made unmodifiable
* @return unmodifiable collection of map entries
*/","* Returns an unmodifiable view of the specified collection of entries. The {@link Entry#setValue}
   * operation throws an {@link UnsupportedOperationException}. If the specified collection is a
   * {@code Set}, the returned collection is also a {@code Set}.
   *
   * @param entries the entries for which to return an unmodifiable view
   * @return an unmodifiable view of the entries",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,writeReplace,com.google.common.collect.MapMakerInternalMap:writeReplace(),2791,2799,"/**
* Returns a proxy for serialization.
* @return SerializationProxy instance representing the object state
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",3612,3620,"/**
 * Returns an unmodifiable view of the specified submap.
 * @param fromKey lower bound of the keys in the submap
 * @param fromInclusive true if the fromKey is inclusive
 * @param toKey upper bound of the keys in the submap
 * @param toInclusive true if the toKey is inclusive
 * @return unmodifiable NavigableMap representing the specified range
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:headMap(java.lang.Object,boolean)",3627,3630,"/**
* Returns a view of the map whose keys are less than (or equal to, if inclusive) toKey.
* @param toKey key up to which elements should be included
* @param inclusive true if toKey is included in the returned map
* @return unmodifiable NavigableMap with specified range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:tailMap(java.lang.Object,boolean)",3637,3640,"/**
* Returns a view of the portion of this map whose keys are greater than or equal to fromKey.
* @param fromKey key to start the range from
* @param inclusive true if the starting key is included in the range
* @return unmodifiable navigable map containing the specified range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableSortedSetMultimap,com.google.common.collect.Multimaps:unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap),974,980,"/**
 * Returns an unmodifiable view of the specified sorted set multimap.
 * @param delegate the original sorted set multimap to wrap
 * @return an unmodifiable SortedSetMultimap instance
 */","* Returns an unmodifiable view of the specified {@code SortedSetMultimap}. Query operations on
   * the returned multimap ""read through"" to the specified multimap, and attempts to modify the
   * returned multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,schedule,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",549,555,"/**
* Schedules a command to run after a given delay.
* @param command the task to execute
* @param delay time until execution
* @param unit time unit for delay
* @return ListenableScheduledFuture representing the scheduled task
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,schedule,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",557,563,"/**
* Schedules a callable to run after a given delay.
* @param callable the task to execute
* @param delay time from now to start execution
* @param unit time unit of the delay
* @return ListenableScheduledFuture representing the scheduled task
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,scheduleAtFixedRate,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",565,571,"/**
* Schedules a command to run at a fixed rate.
* @param command the task to execute
* @param initialDelay time to wait before first execution
* @param period interval between successive executions
* @param unit time unit for delay and period
* @return ListenableScheduledFuture representing scheduled task
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,scheduleWithFixedDelay,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",573,580,"/**
* Schedules a command to run with fixed delay.
* @param command the task to execute
* @param initialDelay time to wait before first execution
* @param delay time between successive executions
* @param unit time unit for delays
* @return ListenableScheduledFuture representing scheduled task
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,eventuallyClosing,"com.google.common.util.concurrent.ClosingFuture:eventuallyClosing(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.Executor)",475,493,"/**
 * Wraps a future to ensure its resource is closed.
 * @param future the original ListenableFuture
 * @param closingExecutor executor for closing resources
 * @return ClosingFuture that will close the resource
 */","* Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}.
   *
   * <p>If {@code future} succeeds, its value will be closed (using {@code closingExecutor)}) when
   * the pipeline is done, even if the pipeline is canceled or fails.
   *
   * <p>Cancelling the pipeline will not cancel {@code future}, so that the pipeline can access its
   * value in order to close it.
   *
   * @param future the future to create the {@code ClosingFuture} from. For discussion of the
   *     future's result type {@code C}, see {@link DeferredCloser#eventuallyClose(Object,
   *     Executor)}.
   * @param closingExecutor the future's result will be closed on this executor
   * @deprecated Creating {@link Future}s of closeable types is dangerous in general because the
   *     underlying value may never be closed if the {@link Future} is canceled after its operation
   *     begins. Consider replacing code that creates {@link ListenableFuture}s of closeable types,
   *     including those that pass them to this method, with {@link #submit(ClosingCallable,
   *     Executor)} in order to ensure that resources do not leak. Or, to start a pipeline with a
   *     {@link ListenableFuture} that doesn't create values that should be closed, use {@link
   *     ClosingFuture#from}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,addCallback,"com.google.common.util.concurrent.FluentFuture:addCallback(com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)",415,417,"/**
 * Adds a callback to be executed upon completion.
 * @param callback the callback to execute
 * @param executor the executor to use for running callbacks
 */","* Registers separate success and failure callbacks to be run when this {@code Future}'s
   * computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the
   * computation is already complete, immediately.
   *
   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of
   * callbacks, but any callback added through this method is guaranteed to be called once the
   * computation is complete.
   *
   * <p>Example:
   *
   * {@snippet :
   * future.addCallback(
   *     new FutureCallback<QueryResult>() {
   *       public void onSuccess(QueryResult result) {
   *         storeInCache(result);
   *       }
   *       public void onFailure(Throwable t) {
   *         reportError(t);
   *       }
   *     }, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight callbacks passed to this method.
   *
   * <p>For a more general interface to attach a completion listener, see {@link #addListener}.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#whenComplete} and
   * {@link java.util.concurrent.CompletableFuture#whenCompleteAsync}. It also serves the use case
   * of {@link java.util.concurrent.CompletableFuture#thenAccept} and {@link
   * java.util.concurrent.CompletableFuture#thenAcceptAsync}.
   *
   * @param callback The callback to invoke when this {@code Future} is completed.
   * @param executor The executor to run {@code callback} when the future completes.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$LocalLoadingCache:<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)",4938,4941,"/**
* Constructs a LocalLoadingCache with specified builder and loader.
* @param builder cache configuration builder
* @param loader function to load values for keys
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LocalManualCache:<init>(com.google.common.cache.CacheBuilder),4838,4840,"/**
* Constructs a LocalManualCache with a specified CacheBuilder.
* @param builder CacheBuilder to configure cache settings
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractValueGraph$1:inDegree(java.lang.Object),147,150,"/**
* Returns the in-degree of a node.
* @param node the node to check
* @return number of incoming edges for directed graphs, total degree for undirected
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractValueGraph$1:outDegree(java.lang.Object),152,155,"/**
* Returns the out-degree of a node.
* @param node the node to evaluate
* @return number of outgoing edges from the node
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,create,"com.google.common.collect.EnumBiMap:create(java.lang.Class,java.lang.Class)",69,72,"/**
* Creates an EnumBiMap with specified key and value types.
* @param keyType the Enum class for keys
* @param valueType the Enum class for values
* @return a new EnumBiMap instance
*/","* Returns a new, empty {@code EnumBiMap} using the specified key and value types.
   *
   * @param keyType the key type
   * @param valueType the value type",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,create,com.google.common.collect.EnumHashBiMap:create(java.lang.Class),56,59,"/**
* Creates an EnumHashBiMap with specified key type.
* @param keyType enum class for keys
* @return EnumHashBiMap instance
*/","* Returns a new, empty {@code EnumHashBiMap} using the specified key type.
   *
   * @param keyType the key type",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,create,com.google.common.collect.TreeMultiset:create(java.lang.Iterable),110,115,"/**
* Creates a TreeMultiset from an iterable of comparable elements.
* @param elements the iterable containing elements to add
* @return a TreeMultiset with the provided elements
*/","* Creates an empty multiset containing the given initial elements, sorted according to the
   * elements' natural order.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * <p>The type specification is {@code <E extends Comparable>}, instead of the more specific
   * {@code <E extends Comparable<? super E>>}, to support classes defined without generics.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,<init>,com.google.common.collect.ImmutableSortedMultiset$Builder:<init>(java.util.Comparator),461,463,"/**
 * Constructs a new builder with a specified comparator.
 * @param comparator the comparator to use for ordering elements
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableSortedMultiset#orderedBy(Comparator)}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putAll,com.google.common.collect.EnumBiMap:putAll(java.util.Map),187,192,"/**
* Adds all entries from the specified map to this map.
* @param map the map whose entries are to be added
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putAll,com.google.common.collect.EnumHashBiMap:putAll(java.util.Map),187,192,"/**
 * Adds all entries from the specified map to this map.
 * @param map the map whose entries are to be added
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,replaceValues,"com.google.common.collect.AbstractSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",118,122,"/**
* Replaces values associated with a key.
* @param key the key to update
* @param values new values to associate with the key
* @return the previous set of values associated with the key
*/","* Stores a collection of values with the same key, replacing any existing values for that key.
   * The returned collection is immutable.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SetMultimap.java,replaceValues,"com.google.common.collect.SetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",86,88,"/**
* Replaces all values associated with a key.
* @param key key whose values are to be replaced
* @param values new values to associate with the key
* @return previous values associated with the key or empty set if none
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}
   * interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,create,com.google.common.collect.HashMultiset:create(java.lang.Iterable),61,66,"/**
* Creates a HashMultiset from an iterable of elements.
* @param elements the iterable to add to the multiset
* @return a new HashMultiset containing the elements
*/","* Creates a new {@code HashMultiset} containing the specified elements.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,create,"com.google.common.collect.ArrayListMultimap:create(int,int)",95,98,"/**
* Creates a new ArrayListMultimap with specified key and value capacities.
* @param expectedKeys estimated number of unique keys
* @param expectedValuesPerKey estimated average number of values per key
* @return an empty ArrayListMultimap with the given capacity estimates
*/","* Constructs an empty {@code ArrayListMultimap} with enough capacity to hold the specified
   * numbers of keys and values without resizing.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys(expectedKeys).arrayListValues(expectedValuesPerKey).build()}, which
   * provides more control over the underlying data structure.
   *
   * @param expectedKeys the expected number of distinct keys
   * @param expectedValuesPerKey the expected average number of values per key
   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is
   *     negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,<init>,com.google.common.collect.ArrayListMultimap:<init>(),114,116,"/**
* Constructs an empty ArrayListMultimap with initial capacity.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,<init>,com.google.common.collect.ArrayListMultimap:<init>(com.google.common.collect.Multimap),124,131,"/**
* Constructs a new ArrayListMultimap from another Multimap.
* @param multimap the source multimap to copy entries from
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,create,"com.google.common.collect.HashMultimap:create(int,int)",84,87,"/**
* Creates a HashMultimap with specified capacity.
* @param expectedKeys number of keys expected
* @param expectedValuesPerKey average number of values per key
* @return initialized HashMultimap instance
*/","* Constructs an empty {@code HashMultimap} with enough capacity to hold the specified numbers of
   * keys and values without rehashing.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys(expectedKeys).hashSetValues(expectedValuesPerKey).build()}, which
   * provides more control over the underlying data structure.
   *
   * @param expectedKeys the expected number of distinct keys
   * @param expectedValuesPerKey the expected average number of values per key
   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is
   *     negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,<init>,com.google.common.collect.HashMultimap:<init>(),105,107,"/**
 * Constructs a new empty HashMultimap with specified initial capacity and default load factor.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,create,com.google.common.collect.HashMultimap:create(com.google.common.collect.Multimap),100,103,"/**
* Creates a HashMultimap from another Multimap.
* @param multimap source Multimap to copy keys and values from
* @return a new HashMultimap containing the same key-value pairs as the input
*/","* Constructs a {@code HashMultimap} with the same mappings as the specified multimap. If a
   * key-value mapping appears multiple times in the input multimap, it only appears once in the
   * constructed multimap.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().hashSetValues().build(multimap)}, which provides more control over
   * the underlying data structure.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,create,com.google.common.collect.LinkedListMultimap:create(int),163,166,"/**
* Creates a LinkedListMultimap with an initial capacity.
* @param expectedKeys estimated number of keys to store
* @return LinkedListMultimap instance
*/","* Constructs an empty {@code LinkedListMultimap} with enough capacity to hold the specified
   * number of keys without rehashing.
   *
   * @param expectedKeys the expected number of distinct keys
   * @throws IllegalArgumentException if {@code expectedKeys} is negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,<init>,com.google.common.collect.LinkedListMultimap:<init>(),180,182,"/**
 * Constructs a new LinkedListMultimap with an initial capacity of 12.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,<init>,com.google.common.collect.LinkedListMultimap:<init>(com.google.common.collect.Multimap),188,191,"/**
 * Constructs a new LinkedListMultimap from another Multimap.
 * @param multimap the source multimap to copy entries from
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,create,com.google.common.collect.LinkedHashMultiset:create(java.lang.Iterable),69,74,"/**
* Creates a LinkedHashMultiset from an iterable of elements.
* @param elements the source of elements to add to the multiset
* @return a new LinkedHashMultiset containing the elements
*/","* Creates a new {@code LinkedHashMultiset} containing the specified elements.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,create,com.google.common.collect.LinkedHashMultimap:create(),91,94,"/**
* Creates a new LinkedHashMultimap with default capacities.
* @return LinkedHashMultimap instance initialized with default settings
*/","Creates a new, empty {@code LinkedHashMultimap} with the default initial capacities.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,create,"com.google.common.collect.LinkedHashMultimap:create(int,int)",105,109,"/**
* Creates a LinkedHashMultimap with specified capacities.
* @param expectedKeys expected number of keys
* @param expectedValuesPerKey expected number of values per key
* @return new LinkedHashMultimap instance
*/","* Constructs an empty {@code LinkedHashMultimap} with enough capacity to hold the specified
   * numbers of keys and values without rehashing.
   *
   * @param expectedKeys the expected number of distinct keys
   * @param expectedValuesPerKey the expected average number of values per key
   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is
   *     negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,<init>,com.google.common.graph.StandardMutableNetwork:<init>(com.google.common.graph.NetworkBuilder),47,49,"/**
 * Constructs a new network using the provided builder.
 * @param builder NetworkBuilder instance to configure the network
 */",Constructs a mutable graph with the properties specified in {@code builder}.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,<init>,com.google.common.graph.StandardMutableValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder),50,53,"/**
* Constructs a graph with specified properties.
* @param builder configuration for graph creation
*/",Constructs a mutable graph with the properties specified in {@code builder}.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,put,com.google.common.collect.ImmutableTable$Builder:put(com.google.common.collect.Table$Cell),230,243,"/**
* Adds a cell to the table.
* @param cell the cell to add
* @return the builder instance
*/","* Adds the given {@code cell} to the table, making it immutable if necessary. Duplicate key
     * pairs are not allowed and will cause {@link #build} to fail.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,put,com.google.common.collect.ImmutableBiMap$Builder:put(java.util.Map$Entry),368,373,"/**
 * Adds an entry to the map.
 * @param entry key-value pair to add
 * @return current builder instance for chaining
 */","* Adds the given {@code entry} to the bimap. Duplicate keys or values are not allowed, and will
     * cause {@link #build} to fail.
     *
     * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,putAll,com.google.common.collect.ImmutableMap$Builder:putAll(java.lang.Iterable),492,501,"/**
* Adds all entries from the given iterable to the builder.
* @param entries iterable of key-value pairs to add
* @return this builder instance
*/","* Adds all of the given entries to the built map. If the same key is put more than once, {@link
     * #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for
     * that key.
     *
     * @throws NullPointerException if any key, value, or entry is null
     * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,put,com.google.common.collect.ImmutableSortedMap$Builder:put(java.util.Map$Entry),642,647,"/**
 * Adds an entry to the map.
 * @param entry key-value pair to add
 * @return this builder instance for method chaining
 */","* Adds the given {@code entry} to the map, making it immutable if necessary. Duplicate keys,
     * according to the comparator (which might be the keys' natural order), are not allowed, and
     * will cause {@link #build} to fail.
     *
     * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingSet,com.google.common.collect.Sets$FilteredNavigableSet:descendingSet(),1386,1389,"/**
* Returns a descending view of the filtered set.
* @return NavigableSet containing elements in reverse order that match the predicate
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets$FilteredNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",1402,1410,"/**
* Returns a subset of elements based on specified range.
* @param fromElement lower bound of the range
* @param fromInclusive true if lower bound is inclusive
* @param toElement upper bound of the range
* @param toInclusive true if upper bound is inclusive
* @return NavigableSet containing filtered elements within the range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,headSet,"com.google.common.collect.Sets$FilteredNavigableSet:headSet(java.lang.Object,boolean)",1412,1415,"/**
* Returns a navigable set containing elements less than (or equal to if inclusive) toElement.
* @param toElement the upper bound element
* @param inclusive true if the upper bound is inclusive
* @return filtered navigable set
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,tailSet,"com.google.common.collect.Sets$FilteredNavigableSet:tailSet(java.lang.Object,boolean)",1417,1420,"/**
* Returns a navigable set containing elements greater than or equal to the specified element.
* @param fromElement the lower bound (inclusive if 'inclusive' is true)
* @param inclusive whether the lower bound is inclusive
* @return filtered navigable set of elements
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,filterCollection,"com.google.common.collect.FilteredEntryMultimap:filterCollection(java.util.Collection,com.google.common.base.Predicate)",92,99,"/**
 * Filters a collection based on a predicate.
 * @param collection the collection to filter
 * @param predicate the condition to apply
 * @return a filtered collection
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createKeySet,com.google.common.collect.FilteredKeyMultimap:createKeySet(),98,101,"/**
 * Creates a filtered set of keys.
 * @return Set of keys that match the predicate
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryMap:<init>(java.util.Map,com.google.common.base.Predicate)",3010,3013,"/**
* Constructs a filtered map from the given unfiltered map.
* @param unfiltered original map to filter
* @param entryPredicate predicate to determine which entries to include
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createEntrySet,com.google.common.collect.Maps$FilteredKeyMap:createEntrySet(),2983,2986,"/**
 * Creates a filtered entry set.
 * @return A set of entries that match the given predicate
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createKeySet,com.google.common.collect.Maps$FilteredKeyMap:createKeySet(),2988,2991,"/**
 * Creates a filtered set of keys.
 * @return A set containing keys that match the predicate
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,createElementSet,com.google.common.collect.Multisets$FilteredMultiset:createElementSet(),343,346,"/**
 * Creates a filtered set of elements.
 * @return Set containing elements that match the predicate
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,createEntrySet,com.google.common.collect.Multisets$FilteredMultiset:createEntrySet(),353,356,"/**
* Creates a filtered set of entries.
* @return Set of Entry objects that match the predicate
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgesConnecting,"com.google.common.graph.AbstractNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",172,182,"/**
* Finds edges connecting two nodes.
* @param nodeU first node
* @param nodeV second node
* @return immutable set of connecting edges
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,put,"com.google.common.collect.CompactHashMap:put(java.lang.Object,java.lang.Object)",334,398,"/**
* Inserts a key-value pair into the map.
* @param key the key to be inserted
* @param value the value associated with the key
* @return the previous value associated with the key, or null if none
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactLinkedHashMap:convertToHashFloodingResistantImplementation(),134,140,"/**
 * Converts map to hash flooding resistant implementation.
 * @return new hash flooding resistant Map instance
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,add,com.google.common.collect.CompactHashSet:add(java.lang.Object),294,352,"/**
 * Adds an element to the set.
 * @param object the element to add
 * @return true if the element was added, false otherwise
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactLinkedHashSet:convertToHashFloodingResistantImplementation(),147,154,"/**
* Converts set to hash flooding resistant implementation.
* Resets predecessor and successor pointers.
* @return new hash flooding resistant Set
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyImmutableSetMultimap.java,<init>,com.google.common.collect.EmptyImmutableSetMultimap:<init>(),33,35,"/**
 * Constructs an empty immutable set multimap.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,asMultimap,com.google.common.collect.ImmutableMap:asMultimap(),1116,1125,"/**
* Returns an immutable multimap view of the map.
* @return ImmutableSetMultimap representation of the map
*/","* Returns a multimap view of the map.
   *
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,build,com.google.common.collect.ImmutableSortedMap$Builder:build(),714,717,"/**
 * Builds and returns an immutable sorted map.
 * @return ImmutableSortedMap containing key-value pairs
 */","* Returns a newly-created immutable sorted map.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate keys. The {@code build()} method will soon be
     * deprecated.
     *
     * @throws IllegalArgumentException if any two keys are equal according to the comparator (which
     *     might be the keys' natural order)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,descendingMultiset,com.google.common.collect.ImmutableSortedMultiset:descendingMultiset(),338,348,"/**
* Returns a reverse-ordered view of the multiset.
* @return ImmutableSortedMultiset with elements in descending order
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap$SubRangeMap:get(java.lang.Comparable),484,487,"/**
* Retrieves value by key if within specified range.
* @param key key to look up
* @return value associated with key or null if out of range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,putAll,com.google.common.collect.ImmutableRangeMap$Builder:putAll(com.google.common.collect.RangeMap),133,139,"/**
* Adds all entries from another RangeMap.
* @param rangeMap source of entries to add
* @return this Builder instance
*/",Copies all associations from the specified range map into this builder.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,addAll,com.google.common.collect.ImmutableRangeSet$Builder:addAll(java.lang.Iterable),796,802,"/**
* Adds all ranges from an iterable to the builder.
* @param ranges iterable of Range objects to add
* @return current Builder instance
*/","* Add all of the specified ranges to this builder. Adjacent ranges are permitted and will be
     * merged, but overlapping ranges will cause an exception when {@link #build()} is called.
     *
     * @throws IllegalArgumentException if any inserted ranges are empty
     * @since 21.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,size,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:size(),851,854,"/**
 * Returns the number of entries in the collection.
 * @return Size of the collection as an integer
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,add,com.google.common.collect.TreeRangeSet:add(com.google.common.collect.Range),177,222,"/**
 * Adds a range to the set, merging overlapping or touching ranges.
 * @param rangeToAdd the range to add
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,remove,com.google.common.collect.TreeRangeSet:remove(com.google.common.collect.Range),224,265,"/**
* Removes a specified range from the set.
* @param rangeToRemove range to be removed
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,containsKey,com.google.common.collect.TreeRangeMap$AsMapOfRanges:containsKey(java.lang.Object),356,359,"/**
 * Checks if the map contains a mapping for the specified key.
 * @param key the key to check
 * @return true if the map contains the key, false otherwise
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,intersectRanges,com.google.common.collect.ImmutableRangeSet:intersectRanges(com.google.common.collect.Range),445,512,"/**
 * Finds intersections of given range with stored ranges.
 * @param range the range to intersect with stored ranges
 * @return list of intersecting ranges or empty list if none found
 */","* Returns a list containing the nonempty intersections of {@code range} with the ranges in this
   * range set.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,create,"com.google.common.collect.ContiguousSet:create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)",62,95,"/**
* Creates a contiguous set from a range and domain.
* @param <C> type of elements, must extend Comparable
* @param range the range defining the set bounds
* @param domain the discrete domain for the set
* @return ContiguousSet representing the specified range within the domain
*/","* Returns a {@code ContiguousSet} containing the same values in the given domain {@linkplain
   * Range#contains contained} by the range.
   *
   * @throws IllegalArgumentException if neither range nor the domain has a lower bound, or if
   *     neither has an upper bound
   * @since 13.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:get(java.lang.Object),659,690,"/**
* Retrieves value by key, returning null if key is out of range or invalid.
* @param key the key to look up
* @return value associated with the key or null if not found or invalid
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,getEntry,com.google.common.collect.TreeRangeMap$SubRangeMap:getEntry(java.lang.Comparable),489,498,"/**
* Retrieves an entry for the specified key within a sub-range.
* @param key the key to search for
* @return Entry with intersection of key range and sub-range, or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,subRangeMap,com.google.common.collect.TreeRangeMap$SubRangeMap:subRangeMap(com.google.common.collect.Range),586,593,"/**
* Returns a sub-range map within the specified range.
* @param range the range to intersect with this map's range
* @return a RangeMap representing the intersection, or an empty map if disjoint
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:subMap(com.google.common.collect.Range),472,479,"/**
 * Returns a submap of ranges within the given window.
 * @param subWindow the range window to filter by
 * @return NavigableMap of Cut to Range or empty map if no intersection
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,com.google.common.collect.TreeRangeSet$RangesByUpperBound:subMap(com.google.common.collect.Range),305,311,"/**
 * Returns a submap within the specified window.
 * @param window range defining the query window
 * @return NavigableMap containing ranges within the window or empty if disconnected
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,encloses,com.google.common.collect.TreeRangeSet$SubRangeSet:encloses(com.google.common.collect.Range),872,879,"/**
* Checks if the range is fully enclosed within restrictions.
* @param range the range to check
* @return true if range is enclosed, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subRangeSet,com.google.common.collect.TreeRangeSet$SubRangeSet:subRangeSet(com.google.common.collect.Range),917,926,"/**
 * Returns a subset of ranges within the given view.
 * @param view range to restrict the subset
 * @return RangeSet containing only ranges enclosed by or intersecting with the view
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:subMap(com.google.common.collect.Range),704,711,"/**
* Returns submap within given window.
* @param window range defining the window
* @return NavigableMap of Cut to Range or empty map if disconnected
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,get,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:get(java.lang.Object),744,771,"/**
* Retrieves range for a given key.
* @param key the key to look up, can be null
* @return Range object or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,intersects,com.google.common.collect.TreeRangeSet:intersects(com.google.common.collect.Range),133,146,"/**
 * Checks if the range intersects with any existing range.
 * @param range the range to check for intersection
 * @return true if there is an intersection, false otherwise
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,coalesce,"com.google.common.collect.TreeRangeMap:coalesce(com.google.common.collect.Range,java.lang.Object,java.util.Map$Entry)",173,181,"/**
 * Combines a range with an existing map entry if conditions are met.
 * @param range the range to potentially combine
 * @param value the value to match in the entry
 * @param entry the map entry to check for combination
 * @return combined Range or original range if not combinable
 */","Returns the range that spans the given range and entry, if the entry can be coalesced.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,asSet,com.google.common.collect.ImmutableRangeSet:asSet(com.google.common.collect.DiscreteDomain),547,568,"/**
* Converts to an ImmutableSortedSet of values within the discrete domain.
* @param domain discrete domain defining value bounds
* @return ImmutableSortedSet containing all values in the range set
*/","* Returns an {@link ImmutableSortedSet} containing the same values in the given domain
   * {@linkplain RangeSet#contains contained} by this range set.
   *
   * <p><b>Note:</b> {@code a.asSet(d).equals(b.asSet(d))} does not imply {@code a.equals(b)}! For
   * example, {@code a} and {@code b} could be {@code [2..4]} and {@code (1..5)}, or the empty
   * ranges {@code [3..3)} and {@code [4..4)}.
   *
   * <p><b>Warning:</b> Be extremely careful what you do with the {@code asSet} view of a large
   * range set (such as {@code ImmutableRangeSet.of(Range.greaterThan(0))}). Certain operations on
   * such a set can be performed efficiently, but others (such as {@link Set#hashCode} or {@link
   * Collections#frequency}) can cause major performance problems.
   *
   * <p>The returned set's {@link Object#toString} method returns a shorthand form of the set's
   * contents, such as {@code ""[1..100]}""}.
   *
   * @throws IllegalArgumentException if neither this range nor the domain has a lower bound, or if
   *     neither has an upper bound",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,range,com.google.common.collect.RegularContiguousSet:range(),211,214,"/**
 * Returns a closed range from the start to the end.
 * @return Range object with both endpoints inclusive
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putRangeMapEntry,"com.google.common.collect.TreeRangeMap:putRangeMapEntry(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object)",207,209,"/**
* Adds a range map entry with specified bounds and value.
* @param lowerBound the inclusive lower bound of the range
* @param upperBound the exclusive upper bound of the range
* @param value the value associated with this range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,newConnections,com.google.common.graph.StandardMutableNetwork:newConnections(),166,174,"/**
 * Creates new network connections based on directedness and parallel edges.
 * @return NetworkConnections instance
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap$Itr:remove(),651,659,"/**
* Removes the current element from the iterator.
* Ensures no concurrent modifications and adjusts indices accordingly.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMap,com.google.common.collect.CollectCollectors$EnumMapAccumulator:toImmutableMap(),338,340,"/**
* Converts a map to an immutable map.
* @return ImmutableMap representation of the original map or an empty ImmutableMap if the original is null
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,copyOfEnumMap,com.google.common.collect.ImmutableMap:copyOfEnumMap(java.util.EnumMap),733,741,"/**
* Copies an EnumMap into an immutable map.
* @param original the source EnumMap to copy
* @return an ImmutableMap containing the same entries as the original
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,immutableEnumMap,com.google.common.collect.Maps:immutableEnumMap(java.util.Map),157,182,"/**
* Creates an immutable map from the given map using Enum keys.
* @param map input map with Enum keys and values
* @return ImmutableEnumMap containing entries from the input map
*/","* Returns an immutable map instance containing the given entries. Internally, the returned map
   * will be backed by an {@link EnumMap}.
   *
   * <p>The iteration order of the returned map follows the enum's iteration order, not the order in
   * which the elements appear in the given map.
   *
   * @param map the map to make an immutable copy of
   * @return an immutable map containing those entries
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,rowMap,com.google.common.collect.ImmutableTable:rowMap(),380,381,"/**
 * Returns an immutable map of rows.
 * @return ImmutableMap where key is row type R and value is a map of column C to value V
 */","* {@inheritDoc}
   *
   * <p>The value {@code Map<C, V>} instances in the returned map are {@link ImmutableMap} instances
   * as well.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,asDescendingMapOfRanges,com.google.common.collect.ImmutableRangeMap$2:asDescendingMapOfRanges(),317,325,"/**
* Returns an immutable map of ranges in descending order.
* @return ImmutableMap with Range<K> as keys and V as values
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,subList,"com.google.common.collect.Lists$ReverseList:subList(int,int)",924,928,"/**
* Returns a reversed sublist of the list.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
* @return Reversed sublist from fromIndex to toIndex
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,descendingIterator,com.google.common.collect.ImmutableSortedSet:descendingIterator(),845,847,"/**
 * Returns an unmodifiable iterator over elements in reverse order.
 * @return Iterator<E> iterating from last to first element
 */",* @since 12.0,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,readResolve,com.google.common.collect.ImmutableList$SerializedForm:readResolve(),736,738,"/**
 * Returns a copy of the elements array.
 * @return new instance with copied elements
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,<init>,"com.google.common.reflect.Parameter:<init>(com.google.common.reflect.Invokable,int,com.google.common.reflect.TypeToken,java.lang.annotation.Annotation[],java.lang.Object)",49,60,"/**
* Constructs a Parameter object.
* @param declaration method or constructor declaring the parameter
* @param position index of the parameter in the declaration
* @param type type of the parameter
* @param annotations array of annotations on the parameter
* @param annotatedType optional additional metadata about the parameter type
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,<init>,"com.google.common.reflect.Types$TypeVariableImpl:<init>(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])",401,406,"/**
* Constructs a TypeVariableImpl with specified generic declaration, name, and bounds.
* @param genericDeclaration the generic declaration of the type variable
* @param name the name of the type variable
* @param bounds the upper bounds of the type variable
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,build,com.google.common.collect.ImmutableList$Builder:build(),922,926,"/**
* Builds an immutable list from contents.
* @return ImmutableList containing elements or empty if none
*/",* Returns a newly-created {@code ImmutableList} based on the contents of the {@code Builder}.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,asImmutableList,com.google.common.collect.ImmutableList:asImmutableList(java.lang.Object[]),360,362,"/**
 * Converts an array to an immutable list.
 * @param elements array of elements to convert
 * @return ImmutableList containing the elements
 */","* Views the array as an immutable list. Does not check for nulls; does not copy.
   *
   * <p>The array must be internally created.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:build(),969,984,"/**
* Builds an immutable set based on the number of distinct elements.
* @return ImmutableSet containing unique elements or empty if none
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,build,com.google.common.collect.ImmutableSortedSet$Builder:build(),586,596,"/**
* Builds an immutable sorted set from elements.
* @return ImmutableSortedSet containing sorted unique elements
*/","* Returns a newly-created {@code ImmutableSortedSet} based on the contents of the {@code
     * Builder} and its comparator.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,create,"com.google.common.collect.JdkBackedImmutableBiMap:create(int,java.util.Map$Entry[])",35,53,"/**
* Creates an ImmutableBiMap from entries.
* @param n number of entries
* @param entryArray array containing key-value pairs
* @return ImmutableBiMap with unique keys and values
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,create,"com.google.common.collect.JdkBackedImmutableMap:create(int,java.util.Map$Entry[],boolean)",41,86,"/**
* Creates an immutable map from entries.
* @param n number of entries
* @param entryArray array of key-value entries
* @param throwIfDuplicateKeys flag to throw exception on duplicate keys
* @return ImmutableMap with entries or nulls for deleted duplicates
*/","* Creates an {@code ImmutableMap} backed by a JDK HashMap. Used when probable hash flooding is
   * detected. This implementation may replace the entries in entryArray with its own entry objects
   * (though they will have the same key/value contents), and will take ownership of entryArray.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,subList,"com.google.common.collect.ImmutableList$ReverseImmutableList:subList(int,int)",674,678,"/**
* Returns a sublist of elements in reverse order.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
* @return ImmutableList containing elements in the specified range in reverse
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,subList,"com.google.common.collect.ImmutableList$SubList:subList(int,int)",496,500,"/**
* Returns a sublist of elements.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return sublist of elements within the specified range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,subRangeMap,com.google.common.collect.ImmutableRangeMap:subRangeMap(com.google.common.collect.Range),327,402,"/**
* Returns a sub-range map for the specified range.
* @param range the range to restrict the view
* @return ImmutableRangeMap containing entries within the specified range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,getSubSet,"com.google.common.collect.RegularImmutableSortedSet:getSubSet(int,int)",289,298,"/**
 * Returns a subset of the set from newFromIndex to newToIndex.
 * @param newFromIndex start index (inclusive)
 * @param newToIndex end index (exclusive)
 * @return subset of the set or an empty set if indices are invalid
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,findSuffixOfType,com.google.common.net.InternetDomainName:findSuffixOfType(com.google.common.base.Optional),213,239,"/**
 * Finds suffix index matching desired type.
 * @param desiredType the PublicSuffixType to match
 * @return index of matching suffix or NO_SUFFIX_FOUND if none found
 */","* Returns the index of the leftmost part of the suffix, or -1 if not found. Note that the value
   * defined as a suffix may not produce {@code true} results from {@link #isPublicSuffix()} or
   * {@link #isRegistrySuffix()} if the domain ends with an excluded domain pattern such as {@code
   * ""nhs.uk""}.
   *
   * <p>If a {@code desiredType} is specified, this method only finds suffixes of the given type.
   * Otherwise, it finds the first suffix of any type.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,fromEntries,"com.google.common.collect.ImmutableSortedMap:fromEntries(java.util.Comparator,boolean,java.util.Map$Entry[],int)",498,561,"/**
* Creates an ImmutableSortedMap from entries.
* @param comparator key comparator
* @param sameComparator true if input comparator matches existing one
* @param entryArray array of map entries
* @param size number of entries
* @return ImmutableSortedMap instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSet,com.google.common.collect.CollectCollectors$EnumSetAccumulator:toImmutableSet(),133,140,"/**
 * Converts the set to an immutable set.
 * @return ImmutableSet representation of the current set, or an empty set if null
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOfEnumSet,com.google.common.collect.ImmutableSet:copyOfEnumSet(java.util.EnumSet),272,275,"/**
* Converts an EnumSet to an immutable ImmutableEnumSet.
* @param enumSet the source EnumSet to convert
* @return an ImmutableEnumSet containing the same elements as enumSet
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,immutableEnumSet,com.google.common.collect.Sets:immutableEnumSet(java.lang.Iterable),121,141,"/**
* Creates an immutable set from iterable elements.
* @param elements the source of enum elements
* @return ImmutableSet containing the enum elements
*/","* Returns an immutable set instance containing the given enum elements. Internally, the returned
   * set will be backed by an {@link EnumSet}.
   *
   * <p>The iteration order of the returned set follows the enum's iteration order, not the order in
   * which the elements appear in the given collection.
   *
   * @param elements the elements, all of the same {@code enum} type, that the set should contain
   * @return an immutable set containing those elements, minus duplicates",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,readResolve,com.google.common.collect.ImmutableSet$SerializedForm:readResolve(),411,413,"/**
 * Ensures deserialization returns a new instance.
 * @return A new copy of elements
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,createValues,com.google.common.collect.ImmutableTable:createValues(),323,324,"/**
 * Creates an immutable collection of values.
 * @return ImmutableCollection containing values
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,equals,com.google.common.collect.RegularImmutableSortedSet:equals(java.lang.Object),170,205,"/**
* Compares this set with another for equality.
* @param object the object to compare with
* @return true if sets are equal, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,combine,com.google.common.collect.ImmutableSet$Builder:combine(com.google.common.collect.ImmutableSet$Builder),554,569,"/**
* Combines another builder's elements into this one.
* @param other the builder whose elements are to be combined
* @return this builder with combined elements
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,iterator,com.google.common.graph.AbstractBaseGraph$2:iterator(),732,733,"/**
 * Returns an unmodifiable iterator over elements.
 * @return Iterator providing access to elements without modification
 */","* Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view.
     *
     * @since 20.0 (present with return type {@link Iterator} since 2.0)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,incidentEdgeIterator,com.google.common.graph.DirectedGraphConnections:incidentEdgeIterator(java.lang.Object),367,411,"/**
 * Returns an iterator over incident edges for a given node.
 * @param thisNode the node to find incident edges for
 * @return Iterator of EndpointPair representing incident edges
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,post,com.google.common.eventbus.EventBus:post(java.lang.Object),259,267,"/**
 * Posts an event to all registered subscribers.
 * @param event the event to be posted
 */","* Posts an event to all registered subscribers. This method will return successfully after the
   * event has been posted to all subscribers, and regardless of any exceptions thrown by
   * subscribers.
   *
   * <p>If no subscribers have been subscribed for {@code event}'s class, and {@code event} is not
   * already a {@link DeadEvent}, it will be wrapped in a DeadEvent and reposted.
   *
   * @param event event to post.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,setValue,com.google.common.collect.MapMakerInternalMap$WriteThroughEntry:setValue(java.lang.Object),2660,2664,"/**
* Updates the value associated with this map entry.
* @param newValue new value to be set
* @return old value before update
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,putAll,com.google.common.collect.MapMakerInternalMap:putAll(java.util.Map),2441,2446,"/**
* Adds all entries from the specified map to this map.
* @param m the map whose entries are to be added
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,intern,com.google.common.collect.Interners$InternerImpl:intern(java.lang.Object),128,157,"/**
* Interns the given object, returning a canonical instance if already present.
* @param sample object to intern
* @return canonical interned object
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap$HashIterator:remove(),2622,2627,"/**
* Removes the last element returned by iterator.
* Throws IllegalStateException if no such element exists.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap$KeySet:remove(java.lang.Object),2698,2701,"/**
 * Removes an element from the map.
 * @param o element to be removed
 * @return true if the element was present and removed, false otherwise
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap$EntrySet:remove(java.lang.Object),2761,2769,"/**
 * Removes entry by key-value pair.
 * @param o entry to remove
 * @return true if removed, false otherwise
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,get,com.google.common.collect.MapMakerInternalMap:get(java.lang.Object),2355,2362,"/**
* Retrieves value by key.
* @param key the key to look up
* @return the associated value or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsKey,com.google.common.collect.MapMakerInternalMap:containsKey(java.lang.Object),2376,2383,"/**
* Checks if the map contains a mapping for the specified key.
* @param key the key to check
* @return true if the map contains the key, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,putInstance,"com.google.common.collect.MutableClassToInstanceMap:putInstance(java.lang.Class,java.lang.Object)",169,174,"/**
* Stores an instance by its type.
* @param type the class of the instance to store
* @param value the instance to store
* @return the stored instance or null if not applicable
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,tryCrossOverAndBubbleUp,"com.google.common.collect.MinMaxPriorityQueue$Heap:tryCrossOverAndBubbleUp(int,int,java.lang.Object)",538,562,"/**
* Attempts to crossover and bubble up an element.
* @param removeIndex index of the element to be removed
* @param vacated index of the vacated position
* @param toTrickle element to be bubbled up
* @return MoveDesc with moved element and parent, or null if no move occurs
*/","* Tries to move {@code toTrickle} from a min to a max level and bubble up there. If it moved
     * before {@code removeIndex} this method returns a pair as described in {@link #removeAt}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,rowComparator,com.google.common.collect.TreeBasedTable:rowComparator(),144,154,"/**
* Returns the comparator for row keys.
* @deprecated Use requireNonNull(this.rowKeySet().comparator()) instead
*/","* Returns the comparator that orders the rows. With natural ordering, {@link Ordering#natural()}
   * is returned.
   *
   * @deprecated Use {@code table.rowKeySet().comparator()} instead.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,synchronizedNavigableSet,com.google.common.collect.Sets:synchronizedNavigableSet(java.util.NavigableSet),2112,2117,"/**
* Returns a synchronized (thread-safe) navigable set.
* @param navigableSet the navigable set to be wrapped
* @return a synchronized navigable set
*/","* Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In
   * order to guarantee serial access, it is critical that <b>all</b> access to the backing
   * navigable set is accomplished through the returned navigable set (or its views).
   *
   * <p>It is imperative that the user manually synchronize on the returned sorted set when
   * iterating over it or any of its {@code descendingSet}, {@code subSet}, {@code headSet}, or
   * {@code tailSet} views.
   *
   * {@snippet :
   * NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>());
   *  ...
   * synchronized (set) {
   *   // Must be in the synchronized block
   *   Iterator<E> it = set.iterator();
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>or:
   *
   * {@snippet :
   * NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>());
   * NavigableSet<E> set2 = set.descendingSet().headSet(foo);
   *  ...
   * synchronized (set) { // Note: set, not set2!!!
   *   // Must be in the synchronized block
   *   Iterator<E> it = set2.descendingIterator();
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned navigable set will be serializable if the specified navigable set is
   * serializable.
   *
   * <p><b>Java 8+ users and later:</b> Prefer {@link Collections#synchronizedNavigableSet}.
   *
   * @param navigableSet the navigable set to be ""wrapped"" in a synchronized navigable set.
   * @return a synchronized view of the specified navigable set.
   * @since 13.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,ceiling,com.google.common.collect.Synchronized$SynchronizedNavigableSet:ceiling(java.lang.Object),1474,1479,"/**
 * Returns the least element greater than or equal to the given element.
 * @param e the element to compare with
 * @return the ceiling element or null if none exists
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingIterator,com.google.common.collect.Synchronized$SynchronizedNavigableSet:descendingIterator(),1481,1484,"/**
 * Returns an iterator over elements in reverse order.
 * @return Iterator over elements in descending order
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingSet,com.google.common.collect.Synchronized$SynchronizedNavigableSet:descendingSet(),1488,1498,"/**
* Returns a synchronized descending set view.
* @return synchronized NavigableSet in reverse order
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,floor,com.google.common.collect.Synchronized$SynchronizedNavigableSet:floor(java.lang.Object),1500,1505,"/**
* Returns the greatest element less than or equal to the given element.
* @param e the element to compare
* @return the greatest element <= e, or null if no such element exists
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:headSet(java.lang.Object,boolean)",1507,1512,"/**
* Returns a navigable set containing elements less than (or equal to if inclusive) the specified element.
* @param toElement upper bound element
* @param inclusive true if the upper bound is inclusive
* @return synchronized navigable set
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,higher,com.google.common.collect.Synchronized$SynchronizedNavigableSet:higher(java.lang.Object),1519,1524,"/**
* Returns the least element greater than the given element.
* @param e reference to an element
* @return the least element greater than e or null if no such element exists
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lower,com.google.common.collect.Synchronized$SynchronizedNavigableSet:lower(java.lang.Object),1526,1531,"/**
 * Finds the greatest element less than the specified element.
 * @param e the element to compare with
 * @return the greatest element less than e, or null if no such element exists
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollFirst,com.google.common.collect.Synchronized$SynchronizedNavigableSet:pollFirst(),1533,1538,"/**
* Removes and returns the first element of the queue.
* Synchronized to ensure thread safety.
* @return the head of this queue, or null if the queue is empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollLast,com.google.common.collect.Synchronized$SynchronizedNavigableSet:pollLast(),1540,1545,"/**
* Removes and returns the last element.
* @return the last element or null if empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",1547,1554,"/**
* Returns a synchronized subset of elements.
* @param fromElement lower bound element
* @param fromInclusive true if the lower bound is inclusive
* @param toElement upper bound element
* @param toInclusive true if the upper bound is inclusive
* @return synchronized NavigableSet within the specified range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:tailSet(java.lang.Object,boolean)",1561,1566,"/**
* Returns a synchronized navigable set containing elements greater than or equal to the specified element.
* @param fromElement the lower bound element
* @param inclusive true if the lower bound is inclusive
* @return a synchronized navigable set
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keySet,com.google.common.collect.Synchronized$SynchronizedNavigableMap:keySet(),1720,1723,"/**
 * Returns a set of all keys in the map.
 * @return Set containing all keys
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,removeAll,com.google.common.collect.ForwardingSetMultimap:removeAll(java.lang.Object),56,60,"/**
 * Removes all values associated with the given key.
 * @param key key to remove values for
 * @return a set of removed values or an empty set if none were present
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,add,"com.google.common.collect.TreeMultiset$AvlNode:add(java.util.Comparator,java.lang.Object,int,int[])",675,719,"/**
 * Adds an element with a given count to the AVL tree.
 * @param comparator comparator for element comparison
 * @param e element to add
 * @param count number of occurrences of the element
 * @param result array to store result status (0 if successful)
 * @return updated AVL node
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,removeMin,com.google.common.collect.TreeMultiset$AvlNode:removeMin(com.google.common.collect.TreeMultiset$AvlNode),912,921,"/**
 * Removes the minimum element from an AVL tree.
 * @param node current node in the traversal
 * @return updated subtree after removal
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,removeMax,com.google.common.collect.TreeMultiset$AvlNode:removeMax(com.google.common.collect.TreeMultiset$AvlNode),924,933,"/**
 * Removes the maximum element from the AVL subtree.
 * @param node current root of the subtree
 * @return updated root after removal
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentEdges,com.google.common.graph.ImmutableNetwork:incidentEdges(java.lang.Object),130,133,"/**
 * Returns incident edges of a given node.
 * @param node target node
 * @return set of incident edges
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,adjacentNodes,com.google.common.graph.ImmutableNetwork:adjacentNodes(java.lang.Object),143,146,"/**
* Returns adjacent nodes for a given node.
* @param node the source node
* @return set of adjacent nodes
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edgesConnecting,"com.google.common.graph.ImmutableNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",148,156,"/**
 * Returns edges connecting two nodes.
 * @param nodeU first node
 * @param nodeV second node
 * @return set of edges between nodeU and nodeV
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,inEdges,com.google.common.graph.ImmutableNetwork:inEdges(java.lang.Object),158,161,"/**
* Retrieves incoming edges for a given node.
* @param node the target node
* @return a set of incoming edges, wrapped in an invalidatable set
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,outEdges,com.google.common.graph.ImmutableNetwork:outEdges(java.lang.Object),163,166,"/**
 * Retrieves outbound edges from a given node.
 * @param node source node to find edges from
 * @return set of outbound edges or empty set if none
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,successors,com.google.common.graph.ImmutableNetwork:successors(java.lang.Object),173,176,"/**
* Returns successors of the given node.
* @param node current node in the graph
* @return set of successor nodes, wrapped for invalidation
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,adjacentNodes,com.google.common.graph.ImmutableValueGraph:adjacentNodes(java.lang.Object),103,106,"/**
 * Returns adjacent nodes for a given node.
 * @param node the node to find adjacent nodes for
 * @return a set of adjacent nodes wrapped in an invalidatable set
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,predecessors,com.google.common.graph.ImmutableValueGraph:predecessors(java.lang.Object),108,111,"/**
 * Returns the set of predecessor nodes.
 * @param node the target node
 * @return a set of predecessor nodes, wrapped in an invalidatable set
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,successors,com.google.common.graph.ImmutableValueGraph:successors(java.lang.Object),113,116,"/**
* Returns successors of a given node.
* @param node the source node
* @return a set of successor nodes
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,incidentEdges,com.google.common.graph.ImmutableValueGraph:incidentEdges(java.lang.Object),118,129,"/**
* Returns edges connected to a specified node.
* @param node the node to find incident edges for
* @return Set of EndpointPair representing incident edges
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,"com.google.common.graph.ImmutableValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",131,134,"/**
* Checks if an edge exists between two nodes.
* @param nodeU first node
* @param nodeV second node
* @return true if an edge connects nodeU and nodeV, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,com.google.common.graph.ImmutableValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),136,141,"/**
* Checks if there's an edge connecting the given endpoints.
* @param endpoints pair of nodes to check connection between
* @return true if an edge exists, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.ImmutableValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)",143,146,"/**
 * Retrieves the value of an edge between two nodes.
 * @param nodeU source node
 * @param nodeV destination node
 * @param defaultValue default value if edge does not exist
 * @return edge value or default value if edge is absent
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.ImmutableValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)",148,152,"/**
* Retrieves edge value for given endpoints or returns default if not found.
* @param endpoints pair of nodes defining the edge
* @param defaultValue value to return if edge is absent
* @return edge value or default if not present
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,int,double)",407,410,"/**
* Creates a Bloom filter with the specified parameters.
* @param funnel defines how to ""funnel"" elements into bits
* @param expectedInsertions estimated number of insertions
* @param fpp false positive probability
* @return BloomFilter instance
*/","* Creates a {@link BloomFilter} with the expected number of insertions and expected false
   * positive probability.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @param fpp the desired false positive probability (must be positive and less than 1.0)
   * @return a {@code BloomFilter}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long)",509,512,"/**
* Creates a Bloom filter with default error rate.
* @param funnel defines how to extract bytes from items
* @param expectedInsertions estimated number of insertions
* @return BloomFilter instance with 3% error rate
*/","* Creates a {@link BloomFilter} with the expected number of insertions and a default expected
   * false positive probability of 3%.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @return a {@code BloomFilter}
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,approximateElementCount,com.google.common.hash.BloomFilter:approximateElementCount(),221,234,"/**
* Estimates the number of elements added to a Bloom filter.
* @return Approximate count of unique elements
*/","* Returns an estimate for the total number of distinct elements that have been added to this
   * Bloom filter. This approximation is reasonably accurate if it does not exceed the value of
   * {@code expectedInsertions} that was used when constructing the filter.
   *
   * @since 22.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,toX,"com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:toX(double,java.math.RoundingMode)",344,347,"/**
* Converts double to BigInteger with specified rounding.
* @param d double value to convert
* @param mode rounding mode to apply
* @return BigInteger representation of the double
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,sqrtApproxWithDoubles,com.google.common.math.BigIntegerMath:sqrtApproxWithDoubles(java.math.BigInteger),297,300,"/**
 * Approximates square root using doubles.
 * @param x input BigInteger
 * @return rounded BigInteger approximation of the square root
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:add(java.lang.Object),743,758,"/**
* Adds an element to the set.
* @param e element to add
* @return this SetBuilderImpl instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$Builder:build(),571,577,"/**
* Builds and returns an immutable set.
* Ensures implementation is reviewed before building.
* @return ImmutableSet of elements
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,least,"com.google.common.collect.Comparators:least(int,java.util.Comparator)",132,142,"/**
* Collects the k smallest elements based on a comparator.
* @param k number of least elements to collect
* @param comparator comparator for element ordering
* @return Collector that gathers least k elements
*/","* Returns a {@code Collector} that returns the {@code k} smallest (relative to the specified
   * {@code Comparator}) input elements, in ascending order, as an unmodifiable {@code List}. Ties
   * are broken arbitrarily.
   *
   * <p>For example:
   *
   * {@snippet :
   * Stream.of(""foo"", ""quux"", ""banana"", ""elephant"")
   *     .collect(least(2, comparingInt(String::length)))
   * // returns {""foo"", ""quux""}
   * }
   *
   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log
   * k)), as opposed to e.g. {@code Stream.sorted(comparator).limit(k)}, which currently takes O(n
   * log n) time and O(n) space.
   *
   * @throws IllegalArgumentException if {@code k < 0}
   * @since 22.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,leastOf,"com.google.common.collect.Ordering:leastOf(java.util.Iterator,int)",781,802,"/**
* Returns the k smallest elements from the iterator.
* @param iterator source of elements to process
* @param k number of smallest elements to return
* @return list containing the k smallest elements
*/","* Returns the {@code k} least elements from the given iterator according to this ordering, in
   * order from least to greatest. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.least(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending
   *     order
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,offerAll,com.google.common.collect.TopKSelector:offerAll(java.lang.Iterable),257,259,"/**
 * Adds all elements from the given iterable to this collection.
 * @param elements iterable containing elements to add
 */","* Adds each member of {@code elements} as a candidate for the top {@code k} elements. This
   * operation takes amortized linear time in the length of {@code elements}.
   *
   * <p>If all input data to this {@code TopKSelector} is in a single {@code Iterable}, prefer
   * {@link Ordering#leastOf(Iterable, int)}, which provides a simpler API for that use case.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,upperCase,com.google.common.io.BaseEncoding$StandardBaseEncoding:upperCase(),887,895,"/**
* Returns an uppercase version of the encoding.
* @return BaseEncoding instance with uppercase alphabet
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,lowerCase,com.google.common.io.BaseEncoding$StandardBaseEncoding:lowerCase(),897,905,"/**
* Returns a new BaseEncoding with lowercase characters.
* @return BaseEncoding instance with lowercase alphabet
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,toString,com.google.common.primitives.UnsignedLong:toString(),252,255,"/**
 * Converts value to string representation.
 * @return String representation of unsigned long value
 */","Returns a string representation of the {@code UnsignedLong} value, in base 10.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,aboutToAcquire,com.google.common.util.concurrent.CycleDetectingLockFactory:aboutToAcquire(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock),713,721,"/**
 * Prepares to acquire a lock.
 * @param lock the lock to be acquired
 */",* CycleDetectingLock implementations must call this method before attempting to acquire the lock.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,transform,"com.google.common.util.concurrent.ClosingFuture:transform(com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)",688,705,"/**
 * Transforms the result of the future using the given function.
 * @param function transformation function applied to the future's result
 * @param executor executor for asynchronous execution
 * @return ClosingFuture with transformed result
 */","* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function
   * to its value. The function can use a {@link DeferredCloser} to capture objects to be closed
   * when the pipeline is done.
   *
   * <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code
   * ClosingFuture} will be equivalent to this one.
   *
   * <p>If the function throws an exception, that exception is used as the result of the derived
   * {@code ClosingFuture}.
   *
   * <p>Example usage:
   *
   * {@snippet :
   * ClosingFuture<List<Row>> rowsFuture =
   *     queryFuture.transform((closer, result) -> result.getRows(), executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings
   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on
   * the original {@code ClosingFuture} instance.
   *
   * @param function transforms the value of this step to the value of the derived step
   * @param executor executor to run the function in
   * @return the derived step
   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this
   *     one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture()
   *     finished}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,transformAsync,"com.google.common.util.concurrent.ClosingFuture:transformAsync(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)",782,798,"/**
* Transforms the future's result asynchronously.
* @param function transformation function to apply
* @param executor executor for asynchronous execution
* @return ClosingFuture with transformed result
*/","* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function
   * that returns a {@code ClosingFuture} to its value. The function can use a {@link
   * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those
   * captured by the returned {@link ClosingFuture}).
   *
   * <p>If this {@code ClosingFuture} succeeds, the derived one will be equivalent to the one
   * returned by the function.
   *
   * <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code
   * ClosingFuture} will be equivalent to this one.
   *
   * <p>If the function throws an exception, that exception is used as the result of the derived
   * {@code ClosingFuture}. But if the exception is thrown after the function creates a {@code
   * ClosingFuture}, then none of the closeable objects in that {@code ClosingFuture} will be
   * closed.
   *
   * <p>Usage guidelines for this method:
   *
   * <ul>
   *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a
   *       {@code ClosingFuture}. If possible, prefer calling {@link #transform(ClosingFunction,
   *       Executor)} instead, with a function that returns the next value directly.
   *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}
   *       for every closeable object this step creates in order to capture it for later closing.
   *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code
   *       ClosingFuture} call {@link #from(ListenableFuture)}.
   *   <li>In case this step doesn't create new closeables, you can adapt an API that returns a
   *       {@link ListenableFuture} to return a {@code ClosingFuture} by wrapping it with a call to
   *       {@link #withoutCloser(AsyncFunction)}
   * </ul>
   *
   * <p>Example usage:
   *
   * {@snippet :
   * // Result.getRowsClosingFuture() returns a ClosingFuture.
   * ClosingFuture<List<Row>> rowsFuture =
   *     queryFuture.transformAsync((closer, result) -> result.getRowsClosingFuture(), executor);
   *
   * // Result.writeRowsToOutputStreamFuture() returns a ListenableFuture that resolves to the
   * // number of written rows. openOutputFile() returns a FileOutputStream (which implements
   * // Closeable).
   * ClosingFuture<Integer> rowsFuture2 =
   *     queryFuture.transformAsync(
   *         (closer, result) -> {
   *           FileOutputStream fos = closer.eventuallyClose(openOutputFile(), closingExecutor);
   *           return ClosingFuture.from(result.writeRowsToOutputStreamFuture(fos));
   *      },
   *      executor);
   *
   * // Result.getRowsFuture() returns a ListenableFuture (no new closeables are created).
   * ClosingFuture<List<Row>> rowsFuture3 =
   *     queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor);
   *
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings
   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.
   * (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside
   * {@code AsyncClosingFunction.apply}. Any heavyweight operations should occur in other threads
   * responsible for completing the returned {@code ClosingFuture}.)
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on
   * the original {@code ClosingFuture} instance.
   *
   * @param function transforms the value of this step to a {@code ClosingFuture} with the value of
   *     the derived step
   * @param executor executor to run the function in
   * @return the derived step
   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this
   *     one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture()
   *     finished}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catchingMoreGeneric,"com.google.common.util.concurrent.ClosingFuture:catchingMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)",879,896,"/**
* Catches exceptions of a specific type and applies a fallback.
* @param exceptionType the type of exception to catch
* @param fallback function to generate a result from the caught exception
* @param executor for executing the fallback function asynchronously
* @return ClosingFuture with the result or fallback value
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catchingAsyncMoreGeneric,"com.google.common.util.concurrent.ClosingFuture:catchingAsyncMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)",975,991,"/**
 * Handles exceptions asynchronously with a generic fallback.
 * @param <X> type of exception to catch
 * @param <W> type of result from fallback function
 * @param exceptionType class of exception to handle
 * @param fallback function to apply if exception occurs
 * @param executor where to execute the fallback function
 * @return ClosingFuture with result or fallback value
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getChecked,"com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class)",1220,1227,"/**
 * Retrieves result from a Future, throwing an exception if necessary.
 * @param future the Future to retrieve the result from
 * @param exceptionClass class of the exception to throw on failure
 * @return result of the Future
 * @throws X if the Future fails with an exception of type X
 */","* Returns the result of {@link Future#get()}, converting most exceptions to a new instance of the
   * given checked exception type. This reduces boilerplate for a common use of {@code Future} in
   * which it is unnecessary to programmatically distinguish between exception types or to extract
   * other information from the exception instance.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause
   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code
   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.
   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the
   *       interrupt).
   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link
   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to continue to treat every checked exception as a checked
   * exception, every unchecked exception as an unchecked exception, and every error as an error. In
   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the
   * new stack trace matches that of the current thread.
   *
   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor
   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}
   * (preferring constructors with at least one {@code String}, then preferring constructors with at
   * least one {@code Throwable}) and calling the constructor via reflection. If the exception did
   * not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it.
   * If no such constructor exists, an {@code IllegalArgumentException} is thrown.
   *
   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}
   *     whose cause is not itself a checked exception
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a
   *     {@code RuntimeException} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or
   *     does not have a suitable constructor
   * @since 19.0 (in 10.0 as {@code get})",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getChecked,"com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class,java.time.Duration)",1272,1279,"/**
 * Retrieves the result of a future with a specified timeout.
 * @param future the Future object to retrieve the result from
 * @param exceptionClass class of the exception to throw if the future fails
 * @param timeout maximum time to wait for the future to complete
 * @return the result of the future or throws an exception
 * @throws X if the future fails or times out
 */","* Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new
   * instance of the given checked exception type. This reduces boilerplate for a common use of
   * {@code Future} in which it is unnecessary to programmatically distinguish between exception
   * types or to extract other information from the exception instance.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause
   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code
   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.
   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the
   *       interrupt).
   *   <li>Any {@link TimeoutException} is wrapped in an {@code X}.
   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link
   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to continue to treat every checked exception as a checked
   * exception, every unchecked exception as an unchecked exception, and every error as an error. In
   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the
   * new stack trace matches that of the current thread.
   *
   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor
   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}
   * (preferring constructors with at least one {@code String}, then preferring constructors with at
   * least one {@code Throwable}) and calling the constructor via reflection. If the exception did
   * not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it.
   * If no such constructor exists, an {@code IllegalArgumentException} is thrown.
   *
   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}
   *     whose cause is not itself a checked exception
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a
   *     {@code RuntimeException} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or
   *     does not have a suitable constructor
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,reschedule,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:reschedule(),607,648,"/**
* Reschedules a task and returns a cancellable future.
* @return Cancellable object representing the scheduled task
*/","* Atomically reschedules this task and assigns the new future to {@link
       * #cancellationDelegate}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,startAsync,com.google.common.util.concurrent.AbstractService:startAsync(),244,263,"/**
* Starts the service asynchronously.
* Throws IllegalStateException if already started.
* @return This Service instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,stopAsync,com.google.common.util.concurrent.AbstractService:stopAsync(),265,301,"/**
 * Stops the service asynchronously.
 * @return This Service instance
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,notifyStarted,com.google.common.util.concurrent.AbstractService:notifyStarted(),400,426,"/**
 * Notifies the service has started. Updates state and handles shutdown if necessary.
 */","* Implementing classes should invoke this method once their service has started. It will cause
   * the service to transition from {@link State#STARTING} to {@link State#RUNNING}.
   *
   * @throws IllegalStateException if the service is not {@link State#STARTING}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startAsync,com.google.common.util.concurrent.ServiceManager:startAsync(),271,289,"/**
 * Starts all services asynchronously.
 * @return this ServiceManager instance
 */","* Initiates service {@linkplain Service#startAsync startup} on all the services being managed. It
   * is only valid to call this method if all of the services are {@linkplain State#NEW new}.
   *
   * @return this
   * @throws IllegalStateException if any of the Services are not {@link State#NEW new} when the
   *     method is called.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,starting,com.google.common.util.concurrent.ServiceManager$ServiceListener:starting(),790,799,"/**
* Transitions service to starting state.
* Logs the start if not a NoOpService.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,running,com.google.common.util.concurrent.ServiceManager$ServiceListener:running(),801,807,"/**
* Transitions service to running state.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,stopping,com.google.common.util.concurrent.ServiceManager$ServiceListener:stopping(com.google.common.util.concurrent.Service$State),809,815,"/**
* Transitions service to stopping state.
* @param from current service state
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,terminated,com.google.common.util.concurrent.ServiceManager$ServiceListener:terminated(com.google.common.util.concurrent.Service$State),817,831,"/**
 * Handles service termination.
 * @param from previous state of the service
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,failed,"com.google.common.util.concurrent.ServiceManager$ServiceListener:failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable)",833,855,"/**
* Handles service failure by logging and transitioning state.
* @param from current state of the service
* @param failure exception causing the failure
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitRunning,com.google.common.util.concurrent.AbstractService:awaitRunning(),303,311,"/**
* Waits until the service has reached the running state.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitTerminated,com.google.common.util.concurrent.AbstractService:awaitTerminated(),338,346,"/**
* Waits until the service is terminated.
* Blocks until termination state is reached.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitStopped(),607,610,"/**
 * Waits until the component has stopped.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhen,"com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",502,504,"/**
 * Attempts to acquire a permit within a specified duration.
 * @param guard condition to check before acquiring the permit
 * @param time maximum time to wait for the permit
 * @return true if permit acquired, false otherwise
 * @throws InterruptedException if interrupted while waiting
 */","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied, and may be
   * interrupted.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitRunning,"com.google.common.util.concurrent.AbstractService:awaitRunning(long,java.util.concurrent.TimeUnit)",321,336,"/**
* Waits for the service to reach the RUNNING state within a specified timeout.
* @param timeout maximum time to wait
* @param unit time unit of the timeout
* @throws TimeoutException if the service does not reach RUNNING within the timeout
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitTerminated,"com.google.common.util.concurrent.AbstractService:awaitTerminated(long,java.util.concurrent.TimeUnit)",356,376,"/**
* Waits for the service to terminate within a specified timeout.
* @param timeout maximum time to wait
* @param unit unit of timeout
* @throws TimeoutException if the service does not terminate in time
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhenUninterruptibly,"com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",598,600,"/**
* Attempts to acquire a lock uninterruptibly within a specified time.
* @param guard the lock object to attempt acquisition on
* @param time maximum duration to wait for the lock
* @return true if the lock was acquired, false otherwise
*/","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitFor,"com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",840,842,"/**
 * Waits for a condition defined by a Guard within a specified time.
 * @param guard the condition to wait for
 * @param time the maximum time to wait
 * @return true if the condition is met, false otherwise
 * @throws InterruptedException if the current thread is interrupted
 */","* Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May
   * be called only by a thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitForUninterruptibly,"com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",886,888,"/**
 * Waits uninterruptibly until the guard condition is met or timeout expires.
 * @param guard condition to wait for
 * @param time maximum duration to wait
 * @return true if guard condition is met, false on timeout
 */","* Waits for the guard to be satisfied. Waits at most the given time. May be called only by a
   * thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitStopped(long,java.util.concurrent.TimeUnit)",612,624,"/**
* Waits for all services to stop within a specified timeout.
* @param timeout maximum time to wait
* @param unit time unit for the timeout
* @throws TimeoutException if not all services stop within the timeout
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,withTimeout,"com.google.common.util.concurrent.FluentFuture:withTimeout(java.time.Duration,java.util.concurrent.ScheduledExecutorService)",272,277,"/**
 * Applies a timeout to the future.
 * @param timeout duration for the timeout
 * @param scheduledExecutor executor service for scheduling
 * @return FluentFuture with applied timeout
 */","* Returns a future that delegates to this future but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires.
   * If the timeout expires, not only will the output future finish, but also the input future
   * ({@code this}) will be cancelled and interrupted.
   *
   * @param timeout when to time out the future
   * @param scheduledExecutor The executor service to enforce the timeout.
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,precomputeCharMatcher,com.google.common.base.Platform:precomputeCharMatcher(com.google.common.base.CharMatcher),37,39,"/**
 * Precomputes a character matcher for improved performance.
 * @param matcher the original CharMatcher to precompute
 * @return a precomputed CharMatcher instance
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,write,"com.google.common.io.Files:write(byte[],java.io.File)",268,270,"/**
 * Writes byte array to file.
 * @param from source byte array
 * @param to destination file
 * @throws IOException if an I/O error occurs
 */","* Overwrites a file with the contents of a byte array.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)}.
   *
   * @param from the bytes to write
   * @param to the destination file
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openStream,com.google.common.io.ByteSource$SlicedByteSource:openStream(),495,498,"/**
 * Opens an input stream from the underlying ByteSource and slices it.
 * @return sliced InputStream
 * @throws IOException if an I/O error occurs
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openBufferedStream,com.google.common.io.ByteSource$SlicedByteSource:openBufferedStream(),500,503,"/**
* Opens a buffered stream from the byte source.
* @return BufferedInputStream for reading bytes
* @throws IOException if an I/O error occurs
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,isEmpty,com.google.common.io.ByteSource$ConcatenatedByteSource:isEmpty(),686,694,"/**
* Checks if all ByteSources are empty.
* @return true if all sources are empty, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,isEmpty,com.google.common.io.ByteSource$SlicedByteSource:isEmpty(),539,542,"/**
 * Checks if the stream is empty.
 * @return true if no data available or parent stream is empty; false otherwise
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,size,com.google.common.io.ByteSource$ConcatenatedByteSource:size(),725,740,"/**
* Calculates total size of all byte sources.
* @return combined size in bytes or Long.MAX_VALUE on overflow
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,hash,com.google.common.io.ByteSource:hash(com.google.common.hash.HashFunction),337,341,"/**
* Computes hash using provided function.
* @param hashFunction the hashing algorithm to use
* @return computed HashCode
* @throws IOException if an I/O error occurs during copying
*/","* Hashes the contents of this byte source using the given hash function.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,copy,"com.google.common.io.Files:copy(java.io.File,java.io.OutputStream)",300,302,"/**
 * Copies file content to an output stream.
 * @param from source File object
 * @param to destination OutputStream object
 * @throws IOException if I/O error occurs
 */","* Copies all bytes from a file to an output stream.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#copy(java.nio.file.Path, OutputStream)}.
   *
   * @param from the source file
   * @param to the output stream
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,copy,"com.google.common.io.Resources:copy(java.net.URL,java.io.OutputStream)",171,173,"/**
 * Copies data from a URL to an OutputStream.
 * @param from source URL
 * @param to destination OutputStream
 * @throws IOException if I/O error occurs during copying
 */","* Copies all bytes from a URL to an output stream.
   *
   * @param from the URL to read from
   * @param to the output stream
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,copy,"com.google.common.io.Files:copy(java.io.File,java.io.File)",323,326,"/**
 * Copies a file from one location to another.
 * @param from source file
 * @param to destination file
 * @throws IOException if an I/O error occurs
 */","* Copies all the bytes from one file to another.
   *
   * <p>Copying is not an atomic operation - in the case of an I/O error, power loss, process
   * termination, or other problems, {@code to} may not be a complete copy of {@code from}. If you
   * need to guard against those conditions, you should employ other file-level synchronization.
   *
   * <p><b>Warning:</b> If {@code to} represents an existing file, that file will be overwritten
   * with the contents of {@code from}. If {@code to} and {@code from} refer to the <i>same</i>
   * file, the contents of that file will be deleted.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)}.
   *
   * @param from the source file
   * @param to the destination file
   * @throws IOException if an I/O error occurs
   * @throws IllegalArgumentException if {@code from.equals(to)}",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,read,com.google.common.io.ByteSource$AsCharSource:read(),464,474,"/**
* Reads all data as a byte array and converts it to a string using specified charset.
* @return String representation of the read data
* @throws IOException if an I/O error occurs
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,toByteArray,com.google.common.io.Files:toByteArray(java.io.File),236,238,"/**
 * Converts a File to a byte array.
 * @param file the File to read
 * @return byte array containing file content
 * @throws IOException if an I/O error occurs
 */","* Reads all bytes from a file into a byte array.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#readAllBytes}.
   *
   * @param file the file to read from
   * @return a byte array containing all the bytes from file
   * @throws IllegalArgumentException if the file is bigger than the largest possible byte array
   *     (2^31 - 1)
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,toByteArray,com.google.common.io.Resources:toByteArray(java.net.URL),94,96,"/**
 * Converts a URL to a byte array.
 * @param url source URL to read from
 * @return byte array containing data from the URL
 * @throws IOException if an I/O error occurs
 */","* Reads all bytes from a URL into a byte array.
   *
   * @param url the URL to read from
   * @return a byte array containing all the bytes from the URL
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readBytes,"com.google.common.io.Files:readBytes(java.io.File,com.google.common.io.ByteProcessor)",600,610,"/**
 * Reads bytes from a file using a processor.
 * @param file the file to read
 * @param processor the processor to process the bytes
 * @return result of processing or null if not applicable
 * @throws IOException if an I/O error occurs
 */","* Process the bytes of a file.
   *
   * <p>(If this seems too complicated, maybe you're looking for {@link #toByteArray}.)
   *
   * @param file the file to read
   * @param processor the object to which the bytes of the file are passed.
   * @return the result of the byte processor
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asByteSource(file).read(processor)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,equal,"com.google.common.io.Files:equal(java.io.File,java.io.File)",372,390,"/**
* Compares two files for equality.
* @param file1 first file to compare
* @param file2 second file to compare
* @return true if files are equal, false otherwise
*/","* Returns true if the given files exist, are not directories, and contain the same bytes.
   *
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,equal,"com.google.common.io.MoreFiles:equal(java.nio.file.Path,java.nio.file.Path)",363,383,"/**
* Compares two paths for equality by content.
* @param path1 first file path to compare
* @param path2 second file path to compare
* @return true if contents are equal, false otherwise
* @throws IOException if an I/O error occurs
*/","* Returns true if the files located by the given paths exist, are not directories, and contain
   * the same bytes.
   *
   * @throws IOException if an I/O error occurs
   * @since 22.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,write,"com.google.common.io.Files:write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)",282,288,"/**
 * Writes a CharSequence to a file using specified charset.
 * @param from the CharSequence to write
 * @param to the target File
 * @param charset the Charset to use for writing
 * @throws IOException if an I/O error occurs
 */","* Writes a character sequence (such as a string) to a file using the given character set.
   *
   * @param from the character sequence to write
   * @param to the destination file
   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSink(to, charset).write(from)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,append,"com.google.common.io.Files:append(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)",358,365,"/**
 * Appends a character sequence to a file using specified charset.
 * @param from CharSequence to append
 * @param to File to append to
 * @param charset Charset for encoding
 * @throws IOException if an I/O error occurs
 */","* Appends a character sequence (such as a string) to a file using the given character set.
   *
   * @param from the character sequence to append
   * @param to the destination file
   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSink(to, charset, FileWriteMode.APPEND).write(from)}. This
   *     method is scheduled to be removed in October 2019.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,length,com.google.common.io.CharSource$ConcatenatedCharSource:length(),723,730,"/**
* Calculates total length of all CharSources.
* @return sum of lengths from all sources
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,copy,"com.google.common.io.Files:copy(java.io.File,java.nio.charset.Charset,java.lang.Appendable)",338,345,"/**
* Copies file content to an appendable destination.
* @param from source file
* @param charset character set for reading the file
* @param to destination appendable
* @throws IOException if an I/O error occurs
*/","* Copies all characters from a file to an appendable object, using the given character set.
   *
   * @param from the source file
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @param to the appendable object
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(from, charset).copyTo(to)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readFirstLine,"com.google.common.io.Files:readFirstLine(java.io.File,java.nio.charset.Charset)",519,526,"/**
 * Reads the first line of a file using a specified charset.
 * @param file the file to read from
 * @param charset the character set to use for reading
 * @return the first line of the file or null if empty
 * @throws IOException if an I/O error occurs
 */","* Reads the first line from a file. The line does not include line-termination characters, but
   * does include other leading and trailing whitespace.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return the first line, or null if the file is empty
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(file, charset).readFirstLine()}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readLines,"com.google.common.io.Files:readLines(java.io.File,java.nio.charset.Charset)",544,563,"/**
* Reads all lines from a file using specified charset.
* @param file the file to read from
* @param charset character set for reading the file
* @return list of lines from the file
* @throws IOException if an I/O error occurs
*/","* Reads all of the lines from a file. The lines do not include line-termination characters, but
   * do include other leading and trailing whitespace.
   *
   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code
   * Files.asCharSource(file, charset).readLines()}.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#readAllLines(java.nio.file.Path, Charset)}.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a mutable {@link List} containing all the lines
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readLines,"com.google.common.io.Files:readLines(java.io.File,java.nio.charset.Charset,com.google.common.io.LineProcessor)",577,587,"/**
* Reads lines from a file using a specified charset and processor.
* @param file the file to read
* @param charset the character set to use for reading
* @param callback the LineProcessor to process each line
* @return result of the LineProcessor or null if not applicable
* @throws IOException if an I/O error occurs
*/","* Streams lines from a {@link File}, stopping when our callback returns false, or we have read
   * all of the lines.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @param callback the {@link LineProcessor} to use to handle the lines
   * @return the output of processing the lines
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(file, charset).readLines(callback)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,readLines,"com.google.common.io.Resources:readLines(java.net.URL,java.nio.charset.Charset,com.google.common.io.LineProcessor)",122,127,"/**
* Reads lines from a URL and processes them.
* @param url the source URL to read from
* @param charset character set for reading the file
* @param callback processor for each line
* @return result of processing or null if not applicable
* @throws IOException if an I/O error occurs
*/","* Streams lines from a URL, stopping when our callback returns false, or we have read all of the
   * lines.
   *
   * @param url the URL to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @param callback the LineProcessor to use to handle the lines
   * @return the output of processing the lines
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,isEmpty,com.google.common.io.CharSource$ConcatenatedCharSource:isEmpty(),700,708,"/**
* Checks if all CharSources are empty.
* @return true if all sources are empty, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,map,"com.google.common.io.Files:map(java.io.File,java.nio.channels.FileChannel$MapMode)",668,670,"/**
* Maps a file into memory.
* @param file the file to map
* @param mode the mapping mode (READ_ONLY, READ_WRITE, PRIVATE)
* @return a MappedByteBuffer representing the mapped file
* @throws IOException if an I/O error occurs
*/","* Fully maps a file in to memory as per {@link
   * FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested {@link
   * MapMode}.
   *
   * <p>Files are mapped from offset 0 to its length.
   *
   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.
   *
   * @param file the file to map
   * @param mode the mode to use when mapping {@code file}
   * @return a buffer reflecting {@code file}
   * @throws FileNotFoundException if the {@code file} does not exist
   * @throws IOException if an I/O error occurs
   * @see FileChannel#map(MapMode, long, long)
   * @since 2.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,map,"com.google.common.io.Files:map(java.io.File,java.nio.channels.FileChannel$MapMode,long)",691,694,"/**
 * Maps a file to a memory-mapped buffer.
 * @param file the file to map
 * @param mode the mapping mode (e.g., READ_ONLY)
 * @param size the number of bytes to map
 * @return MappedByteBuffer representing the mapped file region
 * @throws IOException if an I/O error occurs
 */","* Maps a file in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode,
   * long, long)} using the requested {@link MapMode}.
   *
   * <p>Files are mapped from offset 0 to {@code size}.
   *
   * <p>If the mode is {@link MapMode#READ_WRITE} and the file does not exist, it will be created
   * with the requested {@code size}. Thus this method is useful for creating memory mapped files
   * which do not yet exist.
   *
   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.
   *
   * @param file the file to map
   * @param mode the mode to use when mapping {@code file}
   * @return a buffer reflecting {@code file}
   * @throws IOException if an I/O error occurs
   * @see FileChannel#map(MapMode, long, long)
   * @since 2.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,"com.google.common.util.concurrent.MoreExecutors$Application:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",238,244,"/**
* Creates an exiting ExecutorService with a daemon thread factory and delayed shutdown.
* @param executor ThreadPoolExecutor to configure
* @param terminationTimeout timeout for graceful shutdown
* @param timeUnit unit of time for the timeout
* @return configured ExecutorService
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,"com.google.common.util.concurrent.MoreExecutors$Application:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",250,256,"/**
* Creates a scheduled executor with daemon threads and shutdown hook.
* @param executor initial thread pool executor
* @param terminationTimeout timeout for graceful shutdown
* @param timeUnit unit of time for termination timeout
* @return configured ScheduledExecutorService
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,addDelayedShutdownHook,"com.google.common.util.concurrent.MoreExecutors:addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)",224,230,"/**
 * Adds a delayed shutdown hook for the executor service.
 * @param service the ExecutorService to be shut down
 * @param terminationTimeout the timeout duration before shutting down
 * @param timeUnit the unit of time for the termination timeout
 */","* Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}.
   * This is useful if the given service uses daemon threads, and we want to keep the JVM from
   * exiting immediately on shutdown, instead giving these daemon threads a chance to terminate
   * normally.
   *
   * @param service ExecutorService which uses daemon threads
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @param timeUnit unit of time for the time parameter",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeValueFromChain,"com.google.common.cache.LocalCache$Segment:removeValueFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause)",3240,3259,"/**
 * Removes a value from the chain and handles notifications.
 * @param first the first entry in the chain
 * @param entry the entry to remove
 * @param key the key associated with the entry
 * @param hash the hash of the key
 * @param value the value to remove
 * @param valueReference reference to the value
 * @param cause reason for removal
 * @return the first entry in the modified chain or null if empty
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeLoadingValue,"com.google.common.cache.LocalCache$Segment:removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference)",3372,3404,"/**
 * Removes loading value by key and hash.
 * @param key unique key for the entry
 * @param hash hash code of the key
 * @param valueReference reference to the value being loaded
 * @return true if removed, false otherwise
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitHealthy(),583,590,"/**
* Waits until the system is healthy.
* Uses a monitor to ensure thread-safe access.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitHealthy(long,java.util.concurrent.TimeUnit)",592,605,"/**
* Waits for services to become healthy within a specified timeout.
* @param timeout the maximum time to wait
* @param unit the time unit of the timeout parameter
* @throws TimeoutException if services do not become healthy in time
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterValues,"com.google.common.collect.Multimaps:filterValues(com.google.common.collect.Multimap,com.google.common.base.Predicate)",2106,2109,"/**
* Filters entries in a multimap based on a value predicate.
* @param unfiltered the original multimap to filter
* @param valuePredicate predicate for filtering values
* @return a new multimap with filtered entries
*/","* Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a value that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose value satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,compound,com.google.common.collect.Ordering:compound(java.lang.Iterable),508,511,"/**
* Creates a compound ordering from an iterable of comparators.
* @param comparators iterable of comparators to combine
* @return CompoundOrdering object that combines the given comparators
*/","* Returns an ordering which tries each given comparator in order until a non-zero result is
   * found, returning that result, and returning zero only if all comparators return zero. The
   * returned ordering is based on the state of the {@code comparators} iterable at the time it was
   * provided to this method.
   *
   * <p>The returned ordering is equivalent to that produced using {@code
   * Ordering.from(comp1).compound(comp2).compound(comp3) . . .}.
   *
   * <p>The returned object is serializable if each of the {@code comparators} is serializable.
   *
   * <p><b>Warning:</b> Supplying an argument with undefined iteration order, such as a {@link
   * HashSet}, will produce non-deterministic results.
   *
   * <p><b>Java 8+ users:</b> Use a chain of calls to {@link Comparator#thenComparing(Comparator)},
   * or {@code comparatorCollection.stream().reduce(Comparator::thenComparing).get()} (if the
   * collection might be empty, also provide a default comparator as the {@code identity} parameter
   * to {@code reduce}).
   *
   * @param comparators the comparators to try in order",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,copyOf,com.google.common.collect.ImmutableBiMap:copyOf(java.util.Map),534,545,"/**
* Creates an immutable bi-directional map from the given map.
* @param map source map to copy entries from
* @return ImmutableBiMap containing the same entries as the input map
*/","* Returns an immutable bimap containing the same entries as {@code map}. If {@code map} somehow
   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose
   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.
   *
   * <p>The returned {@code BiMap} iterates over entries in the same order as the {@code entrySet}
   * of the original map.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws IllegalArgumentException if two keys have the same value or two values have the same
   *     key
   * @throws NullPointerException if any key or value in {@code map} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startupTimes,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:startupTimes(),641,659,"/**
 * Retrieves startup times for services.
 * @return Immutable map of Service to Long representing elapsed time in milliseconds
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toArray,com.google.common.collect.FluentIterable:toArray(java.lang.Class),779,782,"/**
* Converts collection to array of specified type.
* @param type Class object specifying the array component type
* @return Array containing all elements in the collection
*/","* Returns an array containing all of the elements from this fluent iterable in iteration order.
   *
   * <p><b>{@code Stream} equivalent:</b> if an object array is acceptable, use {@code
   * stream.toArray()}; if {@code type} is a class literal such as {@code MyType.class}, use {@code
   * stream.toArray(MyType[]::new)}. Otherwise use {@code stream.toArray( len -> (E[])
   * Array.newInstance(type, len))}.
   *
   * @param type the type of the elements
   * @return a newly-allocated array into which all the elements of this fluent iterable have been
   *     copied",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,toArray,"com.google.common.collect.Iterators:toArray(java.util.Iterator,java.lang.Class)",350,355,"/**
* Converts an iterator to an array.
* @param iterator source iterator
* @param type desired component type of the array
* @return array containing elements from the iterator
*/","* Copies an iterator's elements into an array. The iterator will be left exhausted: its {@code
   * hasNext()} method will return {@code false}.
   *
   * @param iterator the iterator to copy
   * @param type the type of the elements
   * @return a newly-allocated array into which all the elements of the iterator have been copied",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toSortedSet,com.google.common.collect.FluentIterable:toSortedSet(java.util.Comparator),669,672,"/**
 * Converts the collection to an immutable sorted set.
 * @param comparator comparator for sorting elements
 * @return ImmutableSortedSet containing all elements in sorted order
 */","* Returns an {@code ImmutableSortedSet} containing all of the elements from this {@code
   * FluentIterable} in the order specified by {@code comparator}, with duplicates (determined by
   * {@code comparator.compare(x, y) == 0}) removed. To produce an {@code ImmutableSortedSet} sorted
   * by its natural ordering, use {@code toSortedSet(Ordering.natural())}.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSortedSet#toImmutableSortedSet} to
   * {@code stream.collect()}.
   *
   * @param comparator the function by which to sort set elements
   * @throws NullPointerException if any element of this iterable is {@code null}
   * @since 14.0 (since 12.0 as {@code toImmutableSortedSet()}).",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,com.google.common.collect.ImmutableSortedSet:copyOf(java.lang.Iterable),214,220,"/**
* Creates an immutable sorted set from iterable elements using natural ordering.
* @param elements the iterable source of elements
* @return ImmutableSortedSet containing elements in natural order
*/","* Returns an immutable sorted set containing the given elements sorted by their natural ordering.
   * When multiple elements are equivalent according to {@code compareTo()}, only the first one
   * specified is included. To create a copy of a {@code SortedSet} that preserves the comparator,
   * call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.
   *
   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)}
   * returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s},
   * while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>}
   * containing one element (the given set itself).
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,"com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.util.Collection)",328,331,"/**
* Creates an immutable sorted set from a collection and comparator.
* @param comparator the comparator to sort elements
* @param elements the collection of elements to include
* @return ImmutableSortedSet with sorted elements
*/","* Returns an immutable sorted set containing the given elements sorted by the given {@code
   * Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the
   * first one specified is included.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null
   * @since 7.0 (source-compatible since 2.0)",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,intersects,com.google.common.collect.ImmutableRangeSet:intersects(com.google.common.collect.Range),162,180,"/**
* Checks if this range intersects with another.
* @param otherRange the range to check intersection with
* @return true if ranges intersect, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,encloses,com.google.common.collect.ImmutableRangeSet:encloses(com.google.common.collect.Range),182,193,"/**
* Checks if this range encloses another range.
* @param otherRange the range to check
* @return true if this range completely contains otherRange, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,rangeContaining,com.google.common.collect.ImmutableRangeSet:rangeContaining(java.lang.Comparable),195,210,"/**
 * Finds the range containing a given value.
 * @param value the value to search for
 * @return Range object if found, otherwise null
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,removeAll,com.google.common.collect.ForwardingListMultimap:removeAll(java.lang.Object),51,55,"/**
* Removes all values associated with a given key.
* @param key the key to remove values for
* @return list of removed values or empty list if none found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedListMultimap:removeAll(java.lang.Object),809,814,"/**
* Removes all values associated with a given key.
* @param key the key to remove values for
* @return list of removed values or empty list if none found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:headMap(java.lang.Object),2310,2313,"/**
* Returns entries less than specified key.
* @param toKey upper bound key (exclusive)
* @return NavigableMap with entries less than toKey
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:subMap(java.lang.Object,java.lang.Object)",2370,2373,"/**
* Returns a view of the portion of this map whose keys are between fromKey and toKey.
* @param fromKey low endpoint (inclusive)
* @param toKey high endpoint (exclusive)
* @return NavigableMap containing the specified range
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:tailMap(java.lang.Object),2375,2378,"/**
 * Returns a view of the portion of this map whose keys are greater than or equal to `fromKey`.
 * @param fromKey the lower bound (inclusive)
 * @return NavigableMap containing entries with keys >= fromKey
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RowSortedTable.java,rowMap,com.google.common.collect.RowSortedTable:rowMap(),55,56,"/**
 * Returns a map of rows with columns and values.
 * @return SortedMap where key is row, value is Map of column to value
 */","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link
   * Table} interface.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,combine,"com.google.common.collect.TableCollectors$ImmutableTableCollectorState:combine(com.google.common.collect.TableCollectors$ImmutableTableCollectorState,java.util.function.BinaryOperator)",157,164,"/**
 * Combines another collector state into this one.
 * @param other the other collector state to merge
 * @param merger function to resolve conflicts between values
 * @return this collector state with merged data
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,toString,com.google.common.net.MediaType:toString(),1225,1234,"/**
 * Returns a string representation of the object.
 * Uses lazy initialization to ensure thread safety.
 * @return String representation of the object
 */","* Returns the string representation of this media type in the format described in <a
   * href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045</a>.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingMap,com.google.common.collect.Synchronized$SynchronizedNavigableMap:descendingMap(),1642,1650,"/**
* Returns a synchronized descending map.
* @return NavigableMap in descending order
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:headMap(java.lang.Object,boolean)",1673,1678,"/**
* Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive) toKey.
* @param toKey the upper bound for the keys in the returned map
* @param inclusive true if the specified key is included in the returned map
* @return a NavigableMap containing the entries with keys less than (or equal to) toKey
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",1751,1757,"/**
 * Returns a submap of the current map.
 * @param fromKey starting key
 * @param fromInclusive true if fromKey is inclusive
 * @param toKey ending key
 * @param toInclusive true if toKey is inclusive
 * @return NavigableMap containing keys from fromKey to toKey
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:tailMap(java.lang.Object,boolean)",1764,1769,"/**
* Returns a view of the portion of this map whose keys are greater than or equal to fromKey.
* @param fromKey low endpoint of the returned map
* @param inclusive true if the low endpoint is to be included in the returned view
* @return navigable map containing the tail subset
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableMap,com.google.common.collect.Synchronized:navigableMap(java.util.NavigableMap),1587,1591,"/**
* Creates a navigable map from another.
* @param navigableMap source map to convert
* @return new NavigableMap instance
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedSortedSetMultimap,com.google.common.collect.Multimaps:synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap),957,961,"/**
 * Returns a synchronized version of the specified sorted set multimap.
 * @param multimap the multimap to be wrapped in a synchronized view
 * @return a synchronized SortedSetMultimap with no mutex specified
 */","* Returns a synchronized (thread-safe) {@code SortedSetMultimap} backed by the specified
   * multimap.
   *
   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param multimap the multimap to be wrapped
   * @return a synchronized view of the specified multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,read,com.google.common.io.CharSource:read(),290,300,"/**
* Reads content from a stream and returns it as a string.
* @return content read from the stream
* @throws IOException if an I/O error occurs
*/","* Reads the contents of this source as a string.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadAsync,"com.google.common.cache.LocalCache$Segment:loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)",2307,2324,"/**
* Loads a value asynchronously for a given key.
* @param key the key to load
* @param hash hash code of the key
* @param loadingValueReference reference for tracking loading status
* @param loader cache loader to fetch the value
* @return ListenableFuture for the loaded value
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,createWithExpectedSize,com.google.common.collect.CompactLinkedHashMap:createWithExpectedSize(int),76,79,"/**
* Creates a CompactLinkedHashMap with an expected size.
* @param expectedSize the approximate number of entries
* @return a new CompactLinkedHashMap instance
*/","* Creates a {@code CompactLinkedHashMap} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactLinkedHashMap} with enough capacity to hold {@code
   *     expectedSize} elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,<init>,com.google.common.collect.CompactLinkedHashMap:<init>(),102,104,"/**
 * Constructs a CompactLinkedHashMap with default initial capacity.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,create,com.google.common.collect.CompactLinkedHashSet:create(java.util.Collection),67,72,"/**
* Creates a CompactLinkedHashSet from a given collection.
* @param collection the source collection of elements
* @return a new CompactLinkedHashSet containing all elements from the collection
*/","* Creates a <i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements of the
   * given collection in the order returned by the collection's iterator.
   *
   * @param collection the elements that the set should contain
   * @return a new {@code CompactLinkedHashSet} containing those elements (minus duplicates)",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,create,com.google.common.collect.TreeMultimap:create(),84,87,"/**
* Creates a TreeMultimap with natural ordering for keys and values.
* @return TreeMultimap instance with natural key and value orderings
*/",* Creates an empty {@code TreeMultimap} ordered by the natural ordering of its keys and values.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,create,"com.google.common.collect.TreeMultimap:create(java.util.Comparator,java.util.Comparator)",96,99,"/**
* Creates a TreeMultimap with specified key and value comparators.
* @param keyComparator comparator for keys
* @param valueComparator comparator for values
* @return TreeMultimap instance
*/","* Creates an empty {@code TreeMultimap} instance using explicit comparators. Neither comparator
   * may be null; use {@link Ordering#natural()} to specify natural order.
   *
   * @param keyComparator the comparator that determines the key ordering
   * @param valueComparator the comparator that determines the value ordering",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,<init>,"com.google.common.collect.TreeMultimap:<init>(java.util.Comparator,java.util.Comparator,com.google.common.collect.Multimap)",119,125,"/**
* Constructs a TreeMultimap with specified comparators and initializes it with entries from another multimap.
* @param keyComparator comparator for keys
* @param valueComparator comparator for values
* @param multimap source multimap to copy entries from
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,captureAsTypeVariable,com.google.common.reflect.TypeResolver$WildcardCapturer:captureAsTypeVariable(java.lang.reflect.Type[]),500,504,"/**
* Captures a type variable with given upper bounds.
* @param upperBounds array of upper bound types
* @return TypeVariable representing the captured type
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,readObject,com.google.common.collect.MapMakerInternalMap$SerializationProxy:readObject(java.io.ObjectInputStream),2899,2905,"/**
 * Reads object state from input stream.
 * @param in ObjectInputStream to read from
 * @throws IOException if I/O error occurs
 * @throws ClassNotFoundException if class not found during deserialization
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:<init>(java.lang.String),600,602,"/**
 * Initializes a new LockGraphNode with a specified lock name.
 * @param lockName the name of the lock; must not be null
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,"com.google.common.util.concurrent.Striped$LargeLazyStriped:<init>(int,com.google.common.base.Supplier)",480,485,"/**
* Constructs a LargeLazyStriped instance.
* @param stripes number of stripes for concurrency control
* @param supplier provides elements to be lazily initialized
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,"com.google.common.util.concurrent.AbstractFuture$TrustedFuture:get(long,java.util.concurrent.TimeUnit)",99,105,"/**
* Retrieves the result with a specified timeout.
* @param timeout time to wait for the result
* @param unit unit of time for the timeout
* @return the result value
* @throws InterruptedException if interrupted while waiting
* @throws ExecutionException if execution failed
* @throws TimeoutException if timed out
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,addNode,com.google.common.graph.StandardMutableValueGraph:addNode(java.lang.Object),60,71,"/**
 * Adds a node to the graph.
 * @param node the node to be added
 * @return true if the node was added, false if it already exists
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,putEdgeValue,"com.google.common.graph.StandardMutableValueGraph:putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object)",85,110,"/**
* Adds an edge with a value between two nodes.
* @param nodeU source node
* @param nodeV target node
* @param value edge value
* @return previous value associated with the edge, or null if no such edge existed
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,doForward,com.google.common.base.CaseFormat$StringConverter:doForward(java.lang.String),178,181,"/**
 * Converts input string from source format to target format.
 * @param s input string in source format
 * @return converted string in target format
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,doBackward,com.google.common.base.CaseFormat$StringConverter:doBackward(java.lang.String),183,186,"/**
 * Converts string from source format to target format.
 * @param s string in source format
 * @return string in target format
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesAllOf,com.google.common.base.CharMatcher$Negated:matchesAllOf(java.lang.CharSequence),1530,1533,"/**
 * Checks if none of the characters in the sequence match.
 * @param sequence the input character sequence to check
 * @return true if no characters match, false otherwise
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesAnyOf,com.google.common.base.CharMatcher:matchesAnyOf(java.lang.CharSequence),496,498,"/**
 * Checks if the sequence matches any of the defined patterns.
 * @param sequence input to be checked against patterns
 * @return true if sequence matches at least one pattern, false otherwise
 */","* Returns {@code true} if a character sequence contains at least one matching BMP character.
   * Equivalent to {@code !matchesNoneOf(sequence)}.
   *
   * <p>The default implementation iterates over the sequence, invoking {@link #matches} for each
   * character, until this returns {@code true} or the end is reached.
   *
   * @param sequence the character sequence to examine, possibly empty
   * @return {@code true} if this matcher matches at least one character in the sequence
   * @since 8.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,retainFrom,com.google.common.base.CharMatcher:retainFrom(java.lang.CharSequence),657,659,"/**
 * Removes all characters from the input sequence that are not in this set.
 * @param sequence the input character sequence
 * @return a new string with only the retained characters
 */","* Returns a string containing all matching BMP characters of a character sequence, in order. For
   * example:
   *
   * {@snippet :
   * CharMatcher.is('a').retainFrom(""bazaar"")
   * }
   *
   * ... returns {@code ""aaa""}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,replaceFrom,"com.google.common.base.CharMatcher:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)",714,742,"/**
* Replaces occurrences of a substring in a sequence.
* @param sequence the original character sequence
* @param replacement the replacement string
* @return new string with replacements or original if no match
*/","* Returns a string copy of the input character sequence, with each matching BMP character
   * replaced by a given replacement sequence. For example:
   *
   * {@snippet :
   * CharMatcher.is('a').replaceFrom(""yaha"", ""oo"")
   * }
   *
   * ... returns {@code ""yoohoo""}.
   *
   * <p><b>Note:</b> If the replacement is a fixed string with only one character, you are better
   * off calling {@link #replaceFrom(CharSequence, char)} directly.
   *
   * @param sequence the character sequence to replace matching characters in
   * @param replacement the characters to append to the result string in place of each matching
   *     character in {@code sequence}
   * @return the new string",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getCoercedIPv4Address,com.google.common.net.InetAddresses:getCoercedIPv4Address(java.net.InetAddress),997,1039,"/**
 * Coerces an InetAddress to an Inet4Address.
 * @param ip input IP address
 * @return IPv4 address or null if coercion fails
 */","* Coerces an IPv6 address into an IPv4 address.
   *
   * <p>HACK: As long as applications continue to use IPv4 addresses for indexing into tables,
   * accounting, et cetera, it may be necessary to <b>coerce</b> IPv6 addresses into IPv4 addresses.
   * This method does so by hashing 64 bits of the IPv6 address into {@code 224.0.0.0/3} (64 bits
   * into 29 bits):
   *
   * <ul>
   *   <li>If the IPv6 address contains an embedded IPv4 address, the function hashes that.
   *   <li>Otherwise, it hashes the upper 64 bits of the IPv6 address.
   * </ul>
   *
   * <p>A ""coerced"" IPv4 address is equivalent to itself.
   *
   * <p>NOTE: This method is failsafe for security purposes: ALL IPv6 addresses (except localhost
   * (::1)) are hashed to avoid the security risk associated with extracting an embedded IPv4
   * address that might permit elevated privileges.
   *
   * @param ip {@link InetAddress} to ""coerce""
   * @return {@link Inet4Address} represented ""coerced"" address
   * @since 7.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putString,"com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putString(java.lang.CharSequence,java.nio.charset.Charset)",353,397,"/**
* Adds a string to the hash using UTF-8 encoding.
* @param input the string to add
* @param charset character set of the input (UTF-8 is optimized)
* @return this Hasher instance for chaining
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,com.google.common.hash.AbstractCompositeHashFunction$1:putBytes(byte[]),62,64,"/**
 * Adds byte array to the hash.
 * @param bytes array of bytes to add
 * @return this Hasher instance for chaining
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashBytes,com.google.common.hash.AbstractHashFunction:hashBytes(byte[]),59,62,"/**
* Computes hash code for byte array.
* @param input byte array to hash
* @return HashCode object representing the computed hash
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readFully,com.google.common.io.LittleEndianDataInputStream:readFully(byte[]),63,66,"/**
 * Reads all bytes into the provided array.
 * @param b destination byte array
 * @throws IOException if an I/O error occurs
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,iterator,com.google.common.collect.ForwardingCollection:iterator(),59,62,"/**
 * Returns an iterator over elements of type E.
 * Delegates to the underlying collection's iterator.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,size,com.google.common.collect.ForwardingCollection:size(),64,67,"/**
 * Returns the number of elements in the collection.
 * Delegates to the underlying collection's size method.
 * @return the size of the collection
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,removeAll,com.google.common.collect.ForwardingCollection:removeAll(java.util.Collection),69,73,"/**
 * Removes all elements from this collection.
 * @param collection elements to be removed
 * @return true if any element was removed, false otherwise
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,isEmpty,com.google.common.collect.ForwardingCollection:isEmpty(),75,78,"/**
* Checks if the underlying collection is empty.
* @return true if no elements present, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,contains,com.google.common.collect.ForwardingCollection:contains(java.lang.Object),80,83,"/**
 * Checks if the collection contains the specified element.
 * @param object element to be checked
 * @return true if the collection contains the element, false otherwise
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,add,com.google.common.collect.ForwardingCollection:add(java.lang.Object),85,89,"/**
* Adds an element to the collection.
* @param element the element to be added
* @return true if the element was added, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,remove,com.google.common.collect.ForwardingCollection:remove(java.lang.Object),91,95,"/**
* Removes an object from the collection.
* @param object the object to be removed
* @return true if the object was present and removed, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,containsAll,com.google.common.collect.ForwardingCollection:containsAll(java.util.Collection),97,100,"/**
 * Checks if all elements in the specified collection are contained.
 * @param collection the collection to check for containment
 * @return true if all elements are contained, false otherwise
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,addAll,com.google.common.collect.ForwardingCollection:addAll(java.util.Collection),102,106,"/**
* Adds all elements from the specified collection.
* @param collection elements to be added
* @return true if this collection changed as a result of the call
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,retainAll,com.google.common.collect.ForwardingCollection:retainAll(java.util.Collection),108,112,"/**
* Retains only elements contained in the specified collection.
* @param collection collection of elements to retain
* @return true if this set changed as a result of the call
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,clear,com.google.common.collect.ForwardingCollection:clear(),114,117,"/**
 * Clears all elements from the collection.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,toArray,com.google.common.collect.ForwardingCollection:toArray(),119,122,"/**
 * Converts the collection to an array.
 * @return an array containing all elements of the collection
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,toArray,com.google.common.collect.ForwardingCollection:toArray(java.lang.Object[]),124,129,"/**
 * Converts the collection to an array.
 * @param array target array to hold the elements
 * @return array containing the elements of the collection
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,java.time.Duration)",165,167,"/**
* Creates a rate limiter with specified permits per second and warmup period.
* @param permitsPerSecond number of permits issued per second
* @param warmupPeriod duration for rate limiter to reach full capacity
* @return RateLimiter instance configured with given parameters
*/","* Creates a {@code RateLimiter} with the specified stable throughput, given as ""permits per
   * second"" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>,
   * during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum
   * rate at the end of the period (as long as there are enough requests to saturate it). Similarly,
   * if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it
   * will gradually return to its ""cold"" state, i.e. it will go through the same warming up process
   * as when it was first created.
   *
   * <p>The returned {@code RateLimiter} is intended for cases where the resource that actually
   * fulfills the requests (e.g., a remote server) needs ""warmup"" time, rather than being
   * immediately accessed at the stable (maximum) rate.
   *
   * <p>The returned {@code RateLimiter} starts in a ""cold"" state (i.e. the warmup period will
   * follow), and if it is left unused for long enough, it will return to that state.
   *
   * @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many
   *     permits become available per second
   * @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate,
   *     before reaching its stable (maximum) rate
   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code
   *     warmupPeriod} is negative
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,headMultiset,"com.google.common.collect.UnmodifiableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",97,100,"/**
* Returns a view of the elements less than or equal to the specified upper bound.
* @param upperBound the upper bound element
* @param boundType specifies if the bound is inclusive or exclusive
* @return unmodifiable SortedMultiset containing elements up to the bound
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,subMultiset,"com.google.common.collect.UnmodifiableSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",102,110,"/**
 * Returns a view of the portion of this multiset whose elements range from lowerBound to upperBound.
 * @param lowerBound the lower bound (inclusive or exclusive) for the submultiset
 * @param lowerBoundType type of inclusion for the lower bound
 * @param upperBound the upper bound (inclusive or exclusive) for the submultiset
 * @param upperBoundType type of inclusion for the upper bound
 * @return a SortedMultiset containing elements within the specified range
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,tailMultiset,"com.google.common.collect.UnmodifiableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",112,115,"/**
* Returns a sorted multiset containing elements greater than or equal to the specified lower bound.
* @param lowerBound the lower bound element
* @param boundType specifies if the lower bound is inclusive or exclusive
* @return an unmodifiable view of the tail multiset
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,unmodifiableCollectionSubclass,com.google.common.collect.AbstractSortedSetMultimap:unmodifiableCollectionSubclass(java.util.Collection),59,67,"/**
 * Returns an unmodifiable view of the specified sorted set.
 * @param collection the sorted set to wrap
 * @return an unmodifiable SortedSet
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,navigableKeySet,com.google.common.collect.Maps$UnmodifiableNavigableMap:navigableKeySet(),3597,3600,"/**
* Returns an unmodifiable view of the navigable key set.
* @return Unmodifiable NavigableSet of keys
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingKeySet,com.google.common.collect.Maps$UnmodifiableNavigableMap:descendingKeySet(),3602,3605,"/**
* Returns an unmodifiable view of the descending keys.
* @return Unmodifiable NavigableSet of keys in descending order
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableCollectionSubclass,com.google.common.collect.Multimaps$CustomMultimap:unmodifiableCollectionSubclass(java.util.Collection),240,254,"/**
 * Returns an unmodifiable view of the specified collection.
 * @param collection the collection to wrap
 * @return an unmodifiable Collection
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableCollectionSubclass,com.google.common.collect.Multimaps$CustomSetMultimap:unmodifiableCollectionSubclass(java.util.Collection),447,457,"/**
* Returns an unmodifiable view of the specified collection.
* @param collection the collection to be wrapped
* @return an unmodifiable Collection instance
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets$UnmodifiableNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",2042,2050,"/**
 * Returns a sub-set of elements within the specified range.
 * @param fromElement lower bound element
 * @param fromInclusive true if the lower bound is inclusive
 * @param toElement upper bound element
 * @param toInclusive true if the upper bound is inclusive
 * @return unmodifiable NavigableSet containing elements in the specified range
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,headSet,"com.google.common.collect.Sets$UnmodifiableNavigableSet:headSet(java.lang.Object,boolean)",2052,2055,"/**
* Returns an unmodifiable view of the portion of this set.
* @param toElement upper bound element
* @param inclusive true if the upper bound is inclusive
* @return NavigableSet containing elements less than (or equal to) toElement
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,tailSet,"com.google.common.collect.Sets$UnmodifiableNavigableSet:tailSet(java.lang.Object,boolean)",2057,2060,"/**
 * Returns an unmodifiable view of the tail set.
 * @param fromElement lower bound element
 * @param inclusive true if the lower bound is inclusive
 * @return NavigableSet containing elements greater than or equal to fromElement
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,createElementSet,com.google.common.collect.UnmodifiableSortedMultiset:createElementSet(),54,57,"/**
* Returns an unmodifiable navigable set of elements.
* @return Unmodifiable navigable set of elements from delegate
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SetMultimap.java,entries,com.google.common.collect.SetMultimap:entries(),97,98,"/**
 * Returns a set of map entries.
 * @return Set containing all key-value pairs in the map
 */","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}
   * interface.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:subMap(java.lang.Object,java.lang.Object)",3607,3610,"/**
* Returns a view of the portion of this map whose keys range from fromKey (inclusive) to toKey (exclusive).
* @param fromKey the low endpoint (inclusive) of the keys in the returned map
* @param toKey the high endpoint (exclusive) of the keys in the returned map
* @return a SortedMap containing the specified range of keys
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$UnmodifiableNavigableMap:headMap(java.lang.Object),3622,3625,"/**
* Returns a view of the portion of this map whose keys are strictly less than toKey.
* @param toKey upper bound key (exclusive)
* @return SortedMap containing keys less than toKey
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$UnmodifiableNavigableMap:tailMap(java.lang.Object),3632,3635,"/**
 * Returns a submap containing entries with keys greater than or equal to fromKey.
 * @param fromKey the lower bound key (inclusive)
 * @return SortedMap with entries >= fromKey
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,schedule,"com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",43,44,"/**
 * Schedules a task to run after a specified delay.
 * @param command the Runnable task to execute
 * @param delay the time from now to delay execution
 * @param unit the time unit of the delay parameter
 * @return ListenableScheduledFuture representing scheduled task
 */",* @since 15.0 (previously returned ScheduledFuture),,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,build,com.google.common.cache.CacheBuilder:build(com.google.common.cache.CacheLoader),1029,1033,"/**
* Builds a loading cache with the specified loader.
* @param loader cache loader to fetch values
* @return LoadingCache instance configured with the given loader
*/","* Builds a cache, which either returns an already-loaded value for a given key or atomically
   * computes or retrieves it using the supplied {@code CacheLoader}. If another thread is currently
   * loading the value for this key, simply waits for that thread to finish and returns its loaded
   * value. Note that multiple threads can concurrently load values for distinct keys.
   *
   * <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be
   * invoked again to create multiple independent caches.
   *
   * @param loader the cache loader used to obtain new values
   * @return a cache having the requested features",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,build,com.google.common.cache.CacheBuilder:build(),1047,1051,"/**
* Builds and returns a cache instance.
* @param <K1> key type extending K
* @param <V1> value type extending V
* @return Cache object configured with current settings
*/","* Builds a cache which does not automatically load values when keys are requested.
   *
   * <p>Consider {@link #build(CacheLoader)} instead, if it is feasible to implement a {@code
   * CacheLoader}.
   *
   * <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be
   * invoked again to create multiple independent caches.
   *
   * @return a cache having the requested features
   * @since 11.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,orderedBy,com.google.common.collect.ImmutableSortedMultiset:orderedBy(java.util.Comparator),407,409,"/**
 * Creates a Builder with a specified comparator for ordering.
 * @param comparator Comparator to define element order
 * @return Builder instance configured with the comparator
 */","* Returns a builder that creates immutable sorted multisets with an explicit comparator. If the
   * comparator has a more general type than the set being generated, such as creating a {@code
   * SortedMultiset<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor
   * instead.
   *
   * @throws NullPointerException if {@code comparator} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,reverseOrder,com.google.common.collect.ImmutableSortedMultiset:reverseOrder(),419,421,"/**
* Returns a builder for a comparator in reverse natural order.
* @return Builder instance with reverse natural ordering
*/","* Returns a builder that creates immutable sorted multisets whose elements are ordered by the
   * reverse of their natural ordering.
   *
   * <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code
   * Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a
   * href=""https://bugs.openjdk.org/browse/JDK-6468354"">JDK-6468354</a>.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,naturalOrder,com.google.common.collect.ImmutableSortedMultiset:naturalOrder(),433,435,"/**
 * Creates a builder with natural ordering.
 * @return Builder instance configured for natural order
 */","* Returns a builder that creates immutable sorted multisets whose elements are ordered by their
   * natural ordering. The sorted multisets use {@link Ordering#natural()} as the comparator. This
   * method provides more type-safety than {@link #builder}, as it can be called only for classes
   * that implement {@link Comparable}.
   *
   * <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code
   * Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a
   * href=""https://bugs.openjdk.org/browse/JDK-6468354"">JDK-6468354</a>.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,create,com.google.common.collect.EnumBiMap:create(java.util.Map),83,88,"/**
* Creates a bidirectional map from a given map.
* @param map input map with enum keys and values
* @return EnumBiMap containing the entries of the input map
*/","* Returns a new bimap with the same mappings as the specified map. If the specified map is an
   * {@code EnumBiMap}, the new bimap has the same types as the provided map. Otherwise, the
   * specified map must contain at least one mapping, in order to determine the key and value types.
   *
   * @param map the map whose mappings are to be placed in this map
   * @throws IllegalArgumentException if map is not an {@code EnumBiMap} instance and contains no
   *     mappings",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,create,com.google.common.collect.EnumHashBiMap:create(java.util.Map),71,76,"/**
* Creates an EnumHashBiMap from a given map.
* @param map input map with enum keys and values
* @return EnumHashBiMap containing entries from the input map
*/","* Constructs a new bimap with the same mappings as the specified map. If the specified map is an
   * {@code EnumHashBiMap} or an {@link EnumBiMap}, the new bimap has the same key type as the input
   * bimap. Otherwise, the specified map must contain at least one mapping, in order to determine
   * the key type.
   *
   * @param map the map whose mappings are to be placed in this map
   * @throws IllegalArgumentException if map is not an {@code EnumBiMap} or an {@code EnumHashBiMap}
   *     instance and contains no mappings",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedSetMultimap.java,replaceValues,"com.google.common.collect.SortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",88,90,"/**
* Replaces all values associated with a key.
* @param key key whose values are to be replaced
* @param values new values to associate with the key
* @return updated set of values or empty if key not found
*/","* Stores a collection of values with the same key, replacing any existing values for that key.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link java.util.Collection} specified in the
   * {@link Multimap} interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,replaceValues,"com.google.common.collect.ForwardingSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",62,66,"/**
* Replaces values associated with a key.
* @param key the key whose values are to be replaced
* @param values the new values to associate with the key
* @return the set of old values that were replaced
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,isPermutation,"com.google.common.collect.Collections2:isPermutation(java.util.List,java.util.List)",694,701,"/**
* Checks if two lists are permutations of each other.
* @param first first list to compare
* @param second second list to compare
* @return true if lists contain same elements with same frequencies, false otherwise
*/",Returns {@code true} if the second list is a permutation of the first.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,predecessorsMultiset,com.google.common.graph.DirectedMultiNetworkConnections:predecessorsMultiset(),69,76,"/**
* Returns a multiset of predecessors.
* @return Multiset containing predecessor nodes
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,successorsMultiset,com.google.common.graph.DirectedMultiNetworkConnections:successorsMultiset(),85,92,"/**
 * Returns a multiset of successor nodes.
 * @return Multiset containing successor nodes
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,adjacentNodesMultiset,com.google.common.graph.UndirectedMultiNetworkConnections:adjacentNodesMultiset(),65,72,"/**
* Returns a multiset of adjacent nodes.
* @return Multiset containing adjacent nodes
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,create,com.google.common.collect.ArrayListMultimap:create(),77,80,"/**
* Creates an empty ArrayListMultimap.
* @param <K> key type
* @param <V> value type
* @return a new instance of ArrayListMultimap
*/","* Creates a new, empty {@code ArrayListMultimap} with the default initial capacities.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().arrayListValues().build()}, which provides more control over the
   * underlying data structure.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,create,com.google.common.collect.ArrayListMultimap:create(com.google.common.collect.Multimap),109,112,"/**
* Creates an ArrayListMultimap from a given Multimap.
* @param multimap the source Multimap to copy entries from
* @return a new ArrayListMultimap containing the same key-value pairs as the input
*/","* Constructs an {@code ArrayListMultimap} with the same mappings as the specified multimap.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().arrayListValues().build(multimap)}, which provides more control over
   * the underlying data structure.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,create,com.google.common.collect.HashMultimap:create(),66,69,"/**
* Creates an empty HashMultimap.
* @param <K> key type
* @param <V> value type
* @return a new HashMultimap instance
*/","* Creates a new, empty {@code HashMultimap} with the default initial capacities.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().hashSetValues().build()}, which provides more control over the
   * underlying data structure.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,create,com.google.common.collect.LinkedListMultimap:create(),151,154,"/**
* Creates and returns an empty LinkedListMultimap.
* @param <K> key type with nullable elements
* @param <V> value type with nullable elements
* @return a new instance of LinkedListMultimap
*/","Creates a new, empty {@code LinkedListMultimap} with the default initial capacity.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,create,com.google.common.collect.LinkedListMultimap:create(com.google.common.collect.Multimap),175,178,"/**
* Creates a LinkedListMultimap from an existing Multimap.
* @param multimap the source Multimap to copy
* @return a new LinkedListMultimap containing the same mappings
*/","* Constructs a {@code LinkedListMultimap} with the same mappings as the specified {@code
   * Multimap}. The new multimap has the same {@link Multimap#entries()} iteration order as the
   * input multimap.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,create,com.google.common.collect.LinkedHashMultimap:create(com.google.common.collect.Multimap),119,124,"/**
* Creates a LinkedHashMultimap from another Multimap.
* @param multimap source Multimap to copy entries from
* @return new LinkedHashMultimap with the same entries as the input
*/","* Constructs a {@code LinkedHashMultimap} with the same mappings as the specified multimap. If a
   * key-value mapping appears multiple times in the input multimap, it only appears once in the
   * constructed multimap. The new multimap has the same {@link Multimap#entries()} iteration order
   * as the input multimap, except for excluding duplicate mappings.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,build,com.google.common.graph.NetworkBuilder:build(),194,196,"/**
* Builds and returns a mutable network.
* @param <N1> node type extending N
* @param <E1> edge type extending E
* @return MutableNetwork instance
*/",Returns an empty {@link MutableNetwork} with the properties of this {@link NetworkBuilder}.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,<init>,com.google.common.graph.StandardMutableGraph:<init>(com.google.common.graph.AbstractGraphBuilder),35,37,"/**
 * Constructs a mutable graph using the provided builder.
 * @param builder configuration for building the graph
 */",Constructs a {@link MutableGraph} with the properties specified in {@code builder}.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,build,com.google.common.graph.ValueGraphBuilder:build(),189,191,"/**
* Builds and returns a mutable value graph.
* @param <N1> node type extending N
* @param <V1> edge value type extending V
* @return MutableValueGraph instance
*/","* Returns an empty {@link MutableValueGraph} with the properties of this {@link
   * ValueGraphBuilder}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,putAll,com.google.common.collect.ImmutableTable$Builder:putAll(com.google.common.collect.Table),251,257,"/**
* Adds all entries from the given table.
* @param table source of entries to add
* @return this builder instance
*/","* Associates all of the given table's keys and values in the built table. Duplicate row key
     * column key pairs are not allowed, and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code table} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,putAll,com.google.common.collect.ImmutableBiMap$Builder:putAll(java.lang.Iterable),395,400,"/**
* Adds all entries to the builder.
* @param entries iterable of key-value pairs to add
* @return this Builder instance for method chaining
*/","* Adds all of the given entries to the built bimap. Duplicate keys or values are not allowed,
     * and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key, value, or entry is null
     * @since 19.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,putAll,com.google.common.collect.ImmutableMap$Builder:putAll(java.util.Map),479,482,"/**
* Adds all entries from the specified map.
* @param map source of entries to add
* @return this Builder instance for chaining
*/","* Associates all of the given map's keys and values in the built map. If the same key is put
     * more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep
     * the last value put for that key.
     *
     * @throws NullPointerException if any key or value in {@code map} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,putAll,com.google.common.collect.ImmutableSortedMap$Builder:putAll(java.lang.Iterable),671,676,"/**
* Adds all entries from the given iterable.
* @param entries collection of key-value pairs to add
* @return current Builder instance
*/","* Adds all the given entries to the built map. Duplicate keys, according to the comparator
     * (which might be the keys' natural order), are not allowed, and will cause {@link #build} to
     * fail.
     *
     * @throws NullPointerException if any key, value, or entry is null
     * @since 19.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,get,com.google.common.collect.FilteredEntryMultimap$AsMap:get(java.lang.Object),186,196,"/**
* Retrieves filtered collection of values by key.
* @param key the key to search for in the map
* @return filtered Collection of V or null if no matching entries found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,get,com.google.common.collect.FilteredEntryMultimap:get(java.lang.Object),124,127,"/**
* Retrieves values associated with a key after applying a filter.
* @param key the key to look up
* @return filtered collection of values or empty if none match
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,createEntries,com.google.common.collect.FilteredEntryMultimap:createEntries(),129,132,"/**
 * Creates filtered entries collection.
 * @return Collection of filtered Entry objects
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,removeEntriesIf,com.google.common.collect.FilteredEntryMultimap:removeEntriesIf(com.google.common.base.Predicate),154,172,"/**
* Removes entries based on a predicate.
* @param predicate condition to filter entries
* @return true if any entries were removed, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryBiMap:<init>(com.google.common.collect.BiMap,com.google.common.base.Predicate,com.google.common.collect.BiMap)",3377,3381,"/**
* Constructs a filtered bimap with a given delegate and inverse.
* @param delegate the underlying bimap to filter
* @param predicate condition for entries to be included
* @param inverse the inverse bimap
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryNavigableMap:<init>(java.util.NavigableMap,com.google.common.base.Predicate)",3238,3243,"/**
* Creates a filtered navigable map.
* @param unfiltered the original navigable map to filter
* @param entryPredicate predicate to determine which entries to include
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntrySortedMap:<init>(java.util.SortedMap,com.google.common.base.Predicate)",3126,3129,"/**
* Creates a filtered and sorted map from an unfiltered map.
* @param unfiltered the original sorted map
* @param entryPredicate predicate to filter entries
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate)",2803,2807,"/**
* Filters entries in a map based on a predicate.
* @param map the original AbstractFilteredMap to filter
* @param entryPredicate additional condition for filtering entries
* @return new FilteredEntryMap with combined predicates
*/","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * map.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,degree,com.google.common.graph.AbstractNetwork:degree(java.lang.Object),144,151,"/**
* Calculates the degree of a node.
* @param node the node to calculate the degree for
* @return the degree of the node
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgesConnecting,com.google.common.graph.AbstractNetwork:edgesConnecting(com.google.common.graph.EndpointPair),184,188,"/**
* Returns edges connecting two nodes.
* @param endpoints pair of nodes to check
* @return set of edges or empty set if none exist
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnectingOrNull,"com.google.common.graph.AbstractNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)",205,216,"/**
 * Retrieves the edge connecting two nodes or returns null if none exists.
 * @param nodeU first node
 * @param nodeV second node
 * @return Edge connecting nodeU and nodeV or null if no such edge exists
 * @throws IllegalArgumentException if multiple edges connect the nodes
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setValue,com.google.common.collect.CompactHashMap$MapEntry:setValue(java.lang.Object),934,950,"/**
* Sets the value for a key.
* @param value new value to set
* @return old value associated with the key or null if none
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,readObject,com.google.common.collect.CompactHashMap:readObject(java.io.ObjectInputStream),1126,1140,"/**
 * Reads object state from an input stream.
 * @param stream source of the serialized data
 * @throws IOException if I/O error occurs
 * @throws ClassNotFoundException if class of a serialized object cannot be found
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,readObject,com.google.common.collect.CompactHashSet:readObject(java.io.ObjectInputStream),707,720,"/**
 * Reads object state from input stream.
 * @param stream the input stream to read from
 * @throws IOException if an I/O error occurs
 * @throws ClassNotFoundException if class of a serialized object cannot be found
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSortedMap,"com.google.common.collect.CollectCollectors:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function)",209,227,"/**
 * Collects elements into an immutable sorted map.
 * @param comparator key comparator
 * @param keyFunction function to extract keys
 * @param valueFunction function to extract values
 * @return ImmutableSortedMap with sorted keys and unique entries
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,headMultiset,"com.google.common.collect.DescendingImmutableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",70,73,"/**
* Returns elements less than or equal to upperBound.
* @param upperBound the upper bound for the range
* @param boundType specifies if the upper bound is inclusive or exclusive
* @return ImmutableSortedMultiset of elements up to the specified bound
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,tailMultiset,"com.google.common.collect.DescendingImmutableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",75,78,"/**
* Returns a multiset of elements greater than or equal to the specified lower bound.
* @param lowerBound the lower bound element
* @param boundType specifies if the lower bound is inclusive or exclusive
* @return ImmutableSortedMultiset with elements in descending order
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,addAll,com.google.common.collect.ImmutableRangeSet$Builder:addAll(com.google.common.collect.RangeSet),784,787,"/**
* Adds all ranges from the given RangeSet to this builder.
* @param ranges RangeSet containing the ranges to add
* @return this Builder instance for method chaining
*/","* Add all ranges from the specified range set to this builder. Adjacent ranges are permitted
     * and will be merged, but overlapping ranges will cause an exception when {@link #build()} is
     * called.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,combine,com.google.common.collect.ImmutableRangeSet$Builder:combine(com.google.common.collect.ImmutableRangeSet$Builder),804,808,"/**
* Combines another builder's ranges into this one.
* @param builder the other builder to combine
* @return this builder with combined ranges
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,remove,com.google.common.collect.TreeRangeSet$Complement:remove(com.google.common.collect.Range),661,664,"/**
 * Adds a range to the set.
 * @param rangeToRemove range to be added (name is misleading)
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,add,com.google.common.collect.TreeRangeSet$SubRangeSet:add(com.google.common.collect.Range),890,898,"/**
* Adds a range if it is enclosed by the restriction.
* @param rangeToAdd the range to add
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,add,com.google.common.collect.TreeRangeSet$Complement:add(com.google.common.collect.Range),656,659,"/**
 * Removes the specified range from the set.
 * @param rangeToAdd range to be removed
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,remove,com.google.common.collect.TreeRangeSet$SubRangeSet:remove(com.google.common.collect.Range),900,905,"/**
* Removes overlapping range from the set.
* @param rangeToRemove range to be removed
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,clear,com.google.common.collect.TreeRangeSet$SubRangeSet:clear(),912,915,"/**
* Clears the specified restriction from the set.
* @param restriction the range to be removed
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subRangeSet,com.google.common.collect.ImmutableRangeSet:subRangeSet(com.google.common.collect.Range),515,526,"/**
 * Returns a subset of ranges that overlap with the specified range.
 * @param range the range to intersect with
 * @return an ImmutableRangeSet containing overlapping ranges or an empty set if none
 */",Returns a view of the intersection of this range set with the given range.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closed,"com.google.common.collect.ContiguousSet:closed(int,int)",105,107,"/**
* Creates a contiguous set of integers from lower to upper inclusive.
* @param lower the lower bound of the range
* @param upper the upper bound of the range
* @return ContiguousSet containing all integers between lower and upper bounds
*/","* Returns a nonempty contiguous set containing all {@code int} values from {@code lower}
   * (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code
   * Range.closed(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closed,"com.google.common.collect.ContiguousSet:closed(long,long)",117,119,"/**
* Creates a contiguous set of Longs from lower to upper inclusive.
* @param lower the lower bound of the range
* @param upper the upper bound of the range
* @return ContiguousSet containing all Longs in the specified range
*/","* Returns a nonempty contiguous set containing all {@code long} values from {@code lower}
   * (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code
   * Range.closed(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closedOpen,"com.google.common.collect.ContiguousSet:closedOpen(int,int)",129,131,"/**
* Creates a contiguous set of integers from lower (inclusive) to upper (exclusive).
* @param lower the inclusive lower bound
* @param upper the exclusive upper bound
* @return ContiguousSet containing integers in the specified range
*/","* Returns a contiguous set containing all {@code int} values from {@code lower} (inclusive) to
   * {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the
   * same values contained in {@code Range.closedOpen(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closedOpen,"com.google.common.collect.ContiguousSet:closedOpen(long,long)",141,143,"/**
* Creates a contiguous set of Long from lower (inclusive) to upper (exclusive).
* @param lower the inclusive lower bound
* @param upper the exclusive upper bound
* @return ContiguousSet containing Long values in the specified range
*/","* Returns a contiguous set containing all {@code long} values from {@code lower} (inclusive) to
   * {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the
   * same values contained in {@code Range.closedOpen(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,size,com.google.common.collect.ImmutableRangeSet$AsSet:size(),580,595,"/**
 * Returns the size of the set.
 * Uses lazy initialization to compute size efficiently.
 * @return size of the set as an integer
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,indexOf,com.google.common.collect.ImmutableRangeSet$AsSet:indexOf(java.lang.Object),678,694,"/**
 * Finds the index of a target element in a collection.
 * @param target the element to search for
 * @return the index of the target if found, otherwise -1
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,intersectionInCurrentDomain,com.google.common.collect.RegularContiguousSet:intersectionInCurrentDomain(com.google.common.collect.Range),47,51,"/**
 * Finds intersection of current range with another.
 * @param other the range to intersect with
 * @return ContiguousSet representing the intersection or empty set if disjoint
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,intersection,com.google.common.collect.RegularContiguousSet:intersection(com.google.common.collect.ContiguousSet),195,209,"/**
* Computes the intersection of two contiguous sets.
* @param other the other contiguous set to intersect with
* @return a new ContiguousSet representing the intersection, or an empty set if none
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,containsKey,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:containsKey(java.lang.Object),654,657,"/**
 * Checks if the map contains the specified key.
 * @param key key to be checked
 * @return true if the key is present, false otherwise
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)",481,488,"/**
* Returns a navigable map over a specified range.
* @param fromKey starting key of the range
* @param fromInclusive true if the start key is inclusive
* @param toKey ending key of the range
* @param toInclusive true if the end key is inclusive
* @return NavigableMap containing entries within the specified range
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,headMap,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:headMap(com.google.common.collect.Cut,boolean)",490,493,"/**
* Returns a navigable map containing entries with keys less than or equal to the specified key.
* @param toKey upper bound key for the submap
* @param inclusive true if the upper bound is inclusive, false otherwise
* @return navigable map with keys up to the specified key
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,tailMap,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:tailMap(com.google.common.collect.Cut,boolean)",495,498,"/**
* Returns a navigable map containing entries with keys greater than or equal to the specified key.
* @param fromKey the lower bound of the range
* @param inclusive true if the lower bound is inclusive
* @return NavigableMap with entries within the specified range
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,"com.google.common.collect.TreeRangeSet$RangesByUpperBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)",313,320,"/**
 * Returns a submap containing keys within the specified range.
 * @param fromKey lower bound of the range
 * @param fromInclusive true if the lower bound is inclusive
 * @param toKey upper bound of the range
 * @param toInclusive true if the upper bound is inclusive
 * @return NavigableMap with keys in the specified range
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,headMap,"com.google.common.collect.TreeRangeSet$RangesByUpperBound:headMap(com.google.common.collect.Cut,boolean)",322,325,"/**
* Returns a navigable map up to the specified key.
* @param toKey upper bound key
* @param inclusive true if the upper bound is inclusive
* @return NavigableMap with elements less than or equal to toKey
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,tailMap,"com.google.common.collect.TreeRangeSet$RangesByUpperBound:tailMap(com.google.common.collect.Cut,boolean)",327,330,"/**
* Returns a navigable map containing entries greater than or equal to the specified key.
* @param fromKey the lower bound of the range
* @param inclusive true if the lower bound is inclusive
* @return a navigable map with entries in the specified range
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)",713,722,"/**
* Returns a navigable map containing entries within the specified range.
* @param fromKey lower bound of the range
* @param fromInclusive true if the lower bound is inclusive
* @param toKey upper bound of the range
* @param toInclusive true if the upper bound is inclusive
* @return NavigableMap with entries in the given range
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,headMap,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:headMap(com.google.common.collect.Cut,boolean)",724,727,"/**
* Returns a navigable map containing entries with keys less than (or equal to if inclusive) the specified cut.
* @param toKey upper bound cut
* @param inclusive true if the upper bound is inclusive
* @return NavigableMap with entries up to the specified cut
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,tailMap,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:tailMap(com.google.common.collect.Cut,boolean)",729,732,"/**
* Returns a navigable map from the specified cut.
* @param fromKey starting key for the tail map
* @param inclusive true if the starting key is included
* @return NavigableMap containing elements greater than or equal to fromKey
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,containsKey,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:containsKey(java.lang.Object),739,742,"/**
 * Checks if the map contains a mapping for the specified key.
 * @param key the key to check
 * @return true if the map contains the key, false otherwise
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,coalescedRange,"com.google.common.collect.TreeRangeMap:coalescedRange(com.google.common.collect.Range,java.lang.Object)",159,170,"/**
 * Combines a range with adjacent ranges if they have the same value.
 * @param range the initial range to consider
 * @param value the value associated with the range
 * @return a new Range that may include coalesced segments
 */",Computes the coalesced range for the given range+value - does not mutate the map.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,readResolve,com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm:readResolve(),732,734,"/**
 * Returns an immutable set of ranges.
 * @return ImmutableSet of ranges within the domain
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap:remove(com.google.common.collect.Range),211,259,"/**
 * Removes the specified range from the range map.
 * @param rangeToRemove range to be removed
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,split,com.google.common.collect.TreeRangeMap:split(com.google.common.collect.Cut),261,278,"/**
 * Splits a range map entry at the specified cut point.
 * @param cut the cut point to split the range map entry
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addNodeInternal,com.google.common.graph.StandardMutableNetwork:addNodeInternal(java.lang.Object),69,74,"/**
 * Adds a node to the network and initializes its connections.
 * @param node the node to be added
 * @return NetworkConnections object for the added node
 */","* Adds {@code node} to the graph and returns the associated {@link NetworkConnections}.
   *
   * @throws IllegalStateException if {@code node} is already present",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableEnumMap,"com.google.common.collect.CollectCollectors:toImmutableEnumMap(java.util.function.Function,java.util.function.Function)",257,283,"/**
* Collects elements into an ImmutableMap with enum keys.
* @param keyFunction extracts the enum key from each element
* @param valueFunction extracts the value from each element
* @return Collector for ImmutableMap<K, V>
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableEnumMap,"com.google.common.collect.CollectCollectors:toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",285,309,"/**
* Collects elements into an immutable EnumMap.
* @param keyFunction extracts the enum key from each element
* @param valueFunction extracts the value from each element
* @param mergeFunction merges values for duplicate keys
* @return ImmutableMap with keys as enums and corresponding values
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,copyOf,com.google.common.collect.ImmutableMap:copyOf(java.util.Map),687,703,"/**
* Creates an immutable copy of the given map.
* @param map the source map to copy
* @return an ImmutableMap containing the same key-value pairs as the input map
*/","* Returns an immutable map containing the same entries as {@code map}. The returned map iterates
   * over entries in the same order as the {@code entrySet} of the original map. If {@code map}
   * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose
   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code map} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,row,com.google.common.collect.ImmutableTable:row(java.lang.Object),362,367,"/**
* Retrieves a row from the map by key.
* @param rowKey key of the row to retrieve
* @return ImmutableMap representing the row or empty map if not found
*/","* {@inheritDoc}
   *
   * @throws NullPointerException if {@code rowKey} is {@code null}",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,rowKeySet,com.google.common.collect.ImmutableTable:rowKeySet(),369,372,"/**
 * Returns an immutable set of all row keys.
 * @return ImmutableSet containing row keys
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,removeRange,"com.google.common.collect.Lists$ReverseList:removeRange(int,int)",902,905,"/**
 * Removes elements in the specified range.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,iterator,com.google.common.collect.DescendingImmutableSortedSet:iterator(),47,50,"/**
 * Returns an unmodifiable descending iterator.
 * @return UnmodifiableIterator in reverse order of elements
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,lower,com.google.common.collect.ImmutableSortedSet:lower(java.lang.Object),721,725,"/**
* Returns greatest element less than the given element.
* @param e element to compare against
* @return greatest element less than e or null if no such element exists
*/",* @since 12.0,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,floor,com.google.common.collect.ImmutableSortedSet:floor(java.lang.Object),730,733,"/**
* Returns the greatest element less than or equal to the given element.
* @param e the element to compare with
* @return the greatest element <= e or null if no such element exists
*/",* @since 12.0,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,last,com.google.common.collect.ImmutableSortedSet:last(),757,760,"/**
 * Returns the last element in the collection.
 * Uses descending iterator to fetch the element.
 * @return the last element or null if empty
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newTypeVariableImpl,"com.google.common.reflect.Types:newTypeVariableImpl(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])",316,324,"/**
 * Creates a new type variable.
 * @param genericDeclaration the declaration to which this type variable belongs
 * @param name the name of the type variable
 * @param bounds the upper bounds of the type variable
 * @return a proxy-based TypeVariable instance
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.util.Iterator),272,283,"/**
* Creates an immutable list from an iterator.
* @param elements the source iterator
* @return an ImmutableList containing the elements
*/","* Returns an immutable list containing the given elements, in order.
   *
   * @throws NullPointerException if {@code elements} contains a null element",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,build,com.google.common.collect.ImmutableRangeMap$Builder:build(),153,170,"/**
* Builds an ImmutableRangeMap from sorted entries.
* @return ImmutableRangeMap object containing non-overlapping ranges and associated values
*/","* Returns an {@code ImmutableRangeMap} containing the associations previously added to this
     * builder.
     *
     * @throws IllegalArgumentException if any two ranges inserted into this builder overlap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,copyOf,com.google.common.collect.ImmutableRangeMap:copyOf(com.google.common.collect.RangeMap),84,98,"/**
 * Creates an immutable copy of the given range map.
 * @param rangeMap the source range map to copy
 * @return a new ImmutableRangeMap instance containing the same mappings
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,build,com.google.common.collect.ImmutableRangeSet$Builder:build(),815,845,"/**
* Builds an immutable range set from a list of ranges.
* @return ImmutableRangeSet containing merged, non-overlapping ranges
*/","* Returns an {@code ImmutableRangeSet} containing the ranges added to this builder.
     *
     * @throws IllegalArgumentException if any input ranges have nonempty overlap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOfSortedEntries,"com.google.common.collect.ImmutableSortedMultiset:copyOfSortedEntries(java.util.Comparator,java.util.Collection)",297,315,"/**
* Creates an ImmutableSortedMultiset from sorted entries.
* @param comparator for element ordering
* @param entries collection of entry elements with counts
* @return ImmutableSortedMultiset instance
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,ofImmutable,"com.google.common.graph.DirectedGraphConnections:ofImmutable(java.lang.Object,java.lang.Iterable,com.google.common.base.Function)",178,231,"/**
* Creates an immutable directed graph connections object.
* @param thisNode the central node of the graph
* @param incidentEdges iterable of edges connected to this node
* @param successorNodeToValueFn function mapping successors to their values
* @return DirectedGraphConnections object representing the graph
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,parseJavaClassPath,com.google.common.reflect.ClassPath:parseJavaClassPath(),636,651,"/**
 * Parses the Java class path into a list of URLs.
 * @return ImmutableList of URLs representing class path entries
 */","* Returns the URLs in the class path specified by the {@code java.class.path} {@linkplain
   * System#getProperty system property}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getParameters,com.google.common.reflect.Invokable:getParameters(),271,284,"/**
 * Retrieves method parameters with annotations.
 * @return ImmutableList of Parameter objects representing method parameters
 */","* Returns all declared parameters of this {@code Invokable}. Note that if this is a constructor
   * of a non-static inner class, unlike {@link Constructor#getParameterTypes}, the hidden {@code
   * this} parameter of the enclosing class is excluded from the returned parameters.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getExceptionTypes,com.google.common.reflect.Invokable:getExceptionTypes(),287,297,"/**
* Returns a list of generic exception types.
* @return ImmutableList of TypeToken representing exception types
*/",Returns all declared exception types of this {@code Invokable}.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,collectTypes,com.google.common.reflect.TypeToken$TypeCollector$3:collectTypes(java.lang.Iterable),1380,1387,"/**
* Collects and sorts types by hierarchy order.
* @param types iterable of types to process
* @return sorted immutable list of types
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,usedInGenericType,com.google.common.reflect.Types$JavaVersion:usedInGenericType(java.lang.reflect.Type[]),644,650,"/**
* Recursively collects generic types.
* @param types array of Type objects
* @return ImmutableList of collected generic types
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,wrapTasks,com.google.common.util.concurrent.WrappingExecutorService:wrapTasks(java.util.Collection),83,90,"/**
* Wraps a collection of tasks into an immutable list.
* @param tasks collection of Callable tasks
* @return ImmutableList of wrapped Callable tasks
*/","* Wraps a collection of tasks.
   *
   * @throws NullPointerException if any element of {@code tasks} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,sortedCopyOf,com.google.common.collect.ImmutableList:sortedCopyOf(java.lang.Iterable),317,323,"/**
* Creates a sorted immutable list from an iterable of comparable elements.
* @param elements iterable of elements to sort
* @return Immutable list of sorted elements
*/","* Returns an immutable list containing the given elements, sorted according to their natural
   * order. The sorting algorithm used is stable, so elements that compare as equal will stay in the
   * order in which they appear in the input.
   *
   * <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code
   * ImmutableSortedSet.copyOf(elements)}; if you want a {@code List} you can use its {@code
   * asList()} view.
   *
   * <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted
   * {@code ImmutableList}, use {@code stream.sorted().collect(toImmutableList())}.
   *
   * @throws NullPointerException if any element in the input is null
   * @since 21.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,sortedCopyOf,"com.google.common.collect.ImmutableList:sortedCopyOf(java.util.Comparator,java.lang.Iterable)",340,348,"/**
* Creates a sorted immutable list from elements.
* @param comparator sorting criteria
* @param elements iterable source of elements
* @return ImmutableList with sorted elements
*/","* Returns an immutable list containing the given elements, in sorted order relative to the
   * specified comparator. The sorting algorithm used is stable, so elements that compare as equal
   * will stay in the order in which they appear in the input.
   *
   * <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code
   * ImmutableSortedSet.copyOf(comparator, elements)}; if you want a {@code List} you can use its
   * {@code asList()} view.
   *
   * <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted
   * {@code ImmutableList}, use {@code stream.sorted(comparator).collect(toImmutableList())}.
   *
   * @throws NullPointerException if any element in the input is null
   * @since 21.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,<init>,"com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:<init>(com.google.common.collect.ImmutableMap,java.util.Map$Entry[])",42,44,"/**
* Constructs a RegularEntrySet from an ImmutableMap and array of entries.
* @param map the source ImmutableMap
* @param entries array of Map.Entry objects
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,create,com.google.common.collect.JdkBackedImmutableMultiset:create(java.util.Collection),40,57,"/**
* Creates an immutable multiset from a collection of entries.
* @param entries collection of entry objects with elements and counts
* @return ImmutableMultiset containing the specified entries
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,<init>,"com.google.common.collect.RegularImmutableAsList:<init>(com.google.common.collect.ImmutableCollection,java.lang.Object[])",42,44,"/**
* Constructs a list from an immutable collection and an array.
* @param delegate backing immutable collection
* @param array elements to include in the list
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSortedSet,com.google.common.collect.CollectCollectors:toImmutableSortedSet(java.util.Comparator),82,90,"/**
* Collects elements into an immutable sorted set.
* @param comparator for sorting the elements
* @return Collector to create ImmutableSortedSet
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,readResolve,com.google.common.collect.ImmutableSortedSet$SerializedForm:readResolve(),868,871,"/**
* Reconstructs object during deserialization.
* @return reconstructed object using stored comparator and elements
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,"com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.util.Iterator)",280,283,"/**
* Creates an immutable sorted set from iterator.
* @param comparator sorting order for elements
* @param elements iterator of elements to include
* @return ImmutableSortedSet with sorted elements
*/","* Returns an immutable sorted set containing the given elements sorted by the given {@code
   * Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the
   * first one specified is included.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,fromEntryArray,"com.google.common.collect.RegularImmutableBiMap:fromEntryArray(int,java.util.Map$Entry[])",68,114,"/**
* Creates an ImmutableBiMap from entry array.
* @param n number of entries to include
* @param entryArray array containing map entries
* @return ImmutableBiMap object
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,buildJdkBacked,com.google.common.collect.ImmutableMap$Builder:buildJdkBacked(),629,644,"/**
* Builds an immutable map using JDK implementation for testing.
* @return ImmutableMap object created from entries
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,fromEntryArray,"com.google.common.collect.RegularImmutableMap:fromEntryArray(int,java.util.Map$Entry[],boolean)",87,102,"/**
* Creates an ImmutableMap from an array of entries.
* @param n number of entries to include
* @param entryArray array containing map entries
* @param throwIfDuplicateKeys flag to throw exception on duplicate keys
* @return ImmutableMap created from the entries
*/","* Creates an ImmutableMap from the first n entries in entryArray. This implementation may replace
   * the entries in entryArray with its own entry objects (though they will have the same key/value
   * contents), and may take ownership of entryArray.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,subRangeMap,com.google.common.collect.ImmutableRangeMap$2:subRangeMap(com.google.common.collect.Range),327,402,"/**
 * Returns a sub-range map view of the current range map.
 * @param range the range to restrict the view to
 * @return an ImmutableRangeMap containing entries within the specified range
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,getSubMap,"com.google.common.collect.ImmutableSortedMap:getSubMap(int,int)",919,928,"/**
 * Returns a submap from the specified index range.
 * @param fromIndex inclusive start index
 * @param toIndex exclusive end index
 * @return ImmutableSortedMap containing elements in the specified range
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,getSubMultiset,"com.google.common.collect.RegularImmutableSortedMultiset:getSubMultiset(int,int)",117,128,"/**
 * Returns a submultiset of elements within the specified range.
 * @param from starting index (inclusive)
 * @param to ending index (exclusive)
 * @return ImmutableSortedMultiset containing elements from 'from' to 'to'
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,headSetImpl,"com.google.common.collect.RegularImmutableSortedSet:headSetImpl(java.lang.Object,boolean)",247,250,"/**
* Returns elements less than or equal to specified element.
* @param toElement upper bound element
* @param inclusive true if the upper bound is inclusive
* @return ImmutableSortedSet of elements up to toElement
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,tailSetImpl,"com.google.common.collect.RegularImmutableSortedSet:tailSetImpl(java.lang.Object,boolean)",267,270,"/**
 * Returns a subset of elements starting from a specified element.
 * @param fromElement the start element (inclusive if specified)
 * @param inclusive true to include the start element in the result
 * @return ImmutableSortedSet containing elements from fromElement to end
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,publicSuffixIndex,com.google.common.net.InternetDomainName:publicSuffixIndex(),180,187,"/**
 * Retrieves the index of the public suffix.
 * @return Index of the public suffix or SUFFIX_NOT_INITIALIZED if not found
 */","* The index in the {@link #parts()} list at which the public suffix begins. For example, for the
   * domain name {@code myblog.blogspot.co.uk}, the value would be 1 (the index of the {@code
   * blogspot} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no public
   * suffix was found.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,registrySuffixIndex,com.google.common.net.InternetDomainName:registrySuffixIndex(),195,202,"/**
 * Retrieves the index of the registry suffix.
 * Uses cached value if already initialized; otherwise, finds and caches it.
 * @return Index of the registry suffix
 */","* The index in the {@link #parts()} list at which the registry suffix begins. For example, for
   * the domain name {@code myblog.blogspot.co.uk}, the value would be 2 (the index of the {@code
   * co} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no registry suffix
   * was found.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,fromEntries,"com.google.common.collect.ImmutableSortedMap:fromEntries(java.util.Comparator,boolean,java.lang.Iterable)",486,496,"/**
* Creates an ImmutableSortedMap from entries with a specified comparator.
* @param comparator key comparator for sorting
* @param sameComparator flag indicating if the comparator is the same as in the entries
* @param entries iterable of map entries
* @return ImmutableSortedMap with sorted entries
*/","* Accepts a collection of possibly-null entries. If {@code sameComparator}, then it is assumed
   * that they do not need to be sorted or checked for dupes.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableEnumSetGeneric,com.google.common.collect.CollectCollectors:toImmutableEnumSetGeneric(),97,105,"/**
* Collects enums into an immutable set.
* @return Collector for ImmutableSet of enum values
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.util.Collection),175,207,"/**
* Creates an immutable set from the given collection.
* @param elements the collection of elements to copy
* @return an ImmutableSet containing the elements
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,contains,com.google.common.collect.MapMakerInternalMap$EntrySet:contains(java.lang.Object),2746,2759,"/**
 * Checks if the map contains a mapping for the specified key-value pair.
 * @param o object to be checked, must be an instance of Entry
 * @return true if the map contains the key-value pair, false otherwise
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,contains,com.google.common.collect.MapMakerInternalMap$KeySet:contains(java.lang.Object),2693,2696,"/**
 * Checks if the map contains the specified key.
 * @param o key to check
 * @return true if the key is present, false otherwise
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,fillHole,"com.google.common.collect.MinMaxPriorityQueue:fillHole(int,java.lang.Object)",444,464,"/**
* Fills a hole in the heap with a given element and adjusts the heap structure.
* @param index position of the hole in the heap
* @param toTrickle element to fill the hole with
* @return MoveDesc describing the move or null if no significant change
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,create,com.google.common.collect.TreeBasedTable:create(com.google.common.collect.TreeBasedTable),122,129,"/**
* Creates a new TreeBasedTable with the same comparators and content.
* @param table existing TreeBasedTable to copy from
* @return new TreeBasedTable with copied data
*/","* Creates a {@code TreeBasedTable} with the same mappings and sort order as the specified {@code
   * TreeBasedTable}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headSet,com.google.common.collect.Synchronized$SynchronizedNavigableSet:headSet(java.lang.Object),1514,1517,"/**
 * Returns elements less than the specified element.
 * @param toElement upper bound (exclusive)
 * @return SortedSet containing elements less than toElement
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:subSet(java.lang.Object,java.lang.Object)",1556,1559,"/**
* Returns a subset of elements within a specified range.
* @param fromElement inclusive lower bound
* @param toElement exclusive upper bound
* @return SortedSet containing elements in the range [fromElement, toElement)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailSet,com.google.common.collect.Synchronized$SynchronizedNavigableSet:tailSet(java.lang.Object),1568,1571,"/**
 * Returns a view of the portion of this set whose elements are greater than or equal to fromElement.
 * @param fromElement the lower bound (inclusive)
 * @return a sorted set containing all elements greater than or equal to fromElement
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,add,"com.google.common.collect.TreeMultiset:add(java.lang.Object,int)",257,277,"/**
* Adds elements with specified occurrences to the AVL tree.
* @param element the element to add
* @param occurrences number of times the element should be added
* @return the previous count of the element before addition
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,deleteMe,com.google.common.collect.TreeMultiset$AvlNode:deleteMe(),885,909,"/**
 * Deletes this node and rebalances the tree.
 * @return The new root of the subtree after deletion.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,int)",484,487,"/**
* Creates a Bloom filter with the specified funnel and expected insertions.
* @param funnel defines how to extract bytes from inserted objects
* @param expectedInsertions estimated number of elements to be inserted
* @return a new BloomFilter instance
*/","* Creates a {@link BloomFilter} with the expected number of insertions and a default expected
   * false positive probability of 3%.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @return a {@code BloomFilter}",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,sqrtFloor,com.google.common.math.BigIntegerMath:sqrtFloor(java.math.BigInteger),253,295,"/**
 * Computes the floor of the square root of a BigInteger.
 * @param x the BigInteger to compute the square root for
 * @return the largest integer less than or equal to the square root of x
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$Builder:add(java.lang.Object),515,523,"/**
* Adds an element to the builder.
* @param element the element to add, must not be null
* @return this Builder instance for method chaining
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:add(java.lang.Object),665,668,"/**
* Adds an element to a new set builder.
* @param e element to add
* @return a new set builder with the added element
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getRawTypes,com.google.common.reflect.TypeToken:getRawTypes(),1093,1125,"/**
* Retrieves raw types from the runtime type.
* @return ImmutableSet of raw types or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,greatest,"com.google.common.collect.Comparators:greatest(int,java.util.Comparator)",164,167,"/**
* Collects the k greatest elements based on a comparator.
* @param k number of top elements to collect
* @param comparator comparison criteria for elements
* @return Collector for top k elements
*/","* Returns a {@code Collector} that returns the {@code k} greatest (relative to the specified
   * {@code Comparator}) input elements, in descending order, as an unmodifiable {@code List}. Ties
   * are broken arbitrarily.
   *
   * <p>For example:
   *
   * {@snippet :
   * Stream.of(""foo"", ""quux"", ""banana"", ""elephant"")
   *     .collect(greatest(2, comparingInt(String::length)))
   * // returns {""elephant"", ""banana""}
   * }
   *
   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log
   * k)), as opposed to e.g. {@code Stream.sorted(comparator.reversed()).limit(k)}, which currently
   * takes O(n log n) time and O(n) space.
   *
   * @throws IllegalArgumentException if {@code k < 0}
   * @since 22.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,leastOf,"com.google.common.collect.Ordering:leastOf(java.lang.Iterable,int)",745,763,"/**
* Returns the k smallest elements from the iterable.
* @param iterable source of elements to compare
* @param k number of smallest elements to retrieve
* @return list containing the k smallest elements
*/","* Returns the {@code k} least elements of the given iterable according to this ordering, in order
   * from least to greatest. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.least(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending
   *     order
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 8.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,greatestOf,"com.google.common.collect.Ordering:greatestOf(java.util.Iterator,int)",842,844,"/**
 * Finds the k greatest elements from an iterator.
 * @param iterator source of elements
 * @param k number of top elements to find
 * @return list of k greatest elements
 */","* Returns the {@code k} greatest elements from the given iterator according to this ordering, in
   * order from greatest to least. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.greatest(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in
   *     <i>descending order</i>
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 14.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catching,"com.google.common.util.concurrent.ClosingFuture:catching(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)",873,876,"/**
* Catches exceptions and executes a fallback function.
* @param <X> type of exception to catch
* @param exceptionType class of the exception to catch
* @param fallback function to execute if exception occurs
* @param executor executor for asynchronous execution
* @return ClosingFuture with result from fallback or original computation
*/","* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function
   * to its exception if it is an instance of a given exception type. The function can use a {@link
   * DeferredCloser} to capture objects to be closed when the pipeline is done.
   *
   * <p>If this {@code ClosingFuture} succeeds or fails with a different exception type, the
   * function will not be called, and the derived {@code ClosingFuture} will be equivalent to this
   * one.
   *
   * <p>If the function throws an exception, that exception is used as the result of the derived
   * {@code ClosingFuture}.
   *
   * <p>Example usage:
   *
   * {@snippet :
   * ClosingFuture<QueryResult> queryFuture =
   *     queryFuture.catching(
   *         QueryException.class, (closer, x) -> Query.emptyQueryResult(), executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings
   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on
   * the original {@code ClosingFuture} instance.
   *
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against this step's exception. ""This step's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future}
   *     underlying this step or, if {@code get()} throws a different kind of exception, that
   *     exception itself. To avoid hiding bugs and other unrecoverable errors, callers should
   *     prefer more specific types, avoiding {@code Throwable.class} in particular.
   * @param fallback the function to be called if this step fails with the expected exception type.
   *     The function's argument is this step's exception. ""This step's exception"" means the cause
   *     of the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future}
   *     underlying this step or, if {@code get()} throws a different kind of exception, that
   *     exception itself.
   * @param executor the executor that runs {@code fallback} if the input fails",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catchingAsync,"com.google.common.util.concurrent.ClosingFuture:catchingAsync(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)",967,972,"/**
* Handles exceptions asynchronously with a fallback function.
* @param exceptionType type of exception to catch
* @param fallback function to execute on caught exception
* @param executor to run the fallback function
* @return ClosingFuture with result or fallback value
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,call,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:call(),596,601,"/**
* Executes wrapped runnable and reschedules task.
* @throws Exception if execution fails
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,schedule,"com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)",721,725,"/**
* Schedules a task with rescheduling capability.
* @param service the service to associate with the task
* @param executor the executor to run the task
* @param runnable the task to be scheduled
* @return Cancellable object for managing the scheduled task
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,com.google.common.util.concurrent.ServiceManager:awaitStopped(),353,355,"/**
 * Waits until the component has stopped.
 */","* Waits for the all the services to reach a terminal state. After this method returns all
   * services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain
   * Service.State#FAILED failed}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,"com.google.common.util.concurrent.ServiceManager:awaitStopped(long,java.util.concurrent.TimeUnit)",379,382,"/**
* Waits for the service to stop within a specified time.
* @param timeout maximum time to wait
* @param unit time unit of the timeout
* @throws TimeoutException if the service does not stop within the timeout
*/","* Waits for the all the services to reach a terminal state for no more than the given time. After
   * this method returns all services will either be {@linkplain Service.State#TERMINATED
   * terminated} or {@linkplain Service.State#FAILED failed}.
   *
   * @param timeout the maximum time to wait
   * @param unit the time unit of the timeout argument
   * @throws TimeoutException if not all of the services have stopped within the deadline",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,precomputed,com.google.common.base.CharMatcher:precomputed(),401,403,"/**
 * Returns a precomputed version of this CharMatcher.
 * @return Precomputed CharMatcher instance
 */","* Returns a {@code char} matcher functionally equivalent to this one, but which may be faster to
   * query than the original; your mileage may vary. Precomputation takes time and requires more
   * memory, so it is only likely to be worthwhile if the precomputed matcher is queried very often.
   *
   * <p>This method has no effect (returns {@code this}) when called in GWT: it's unclear whether a
   * precomputed matcher is faster, but it certainly would consume more memory (which doesn't seem
   * like a worthwhile tradeoff in a browser).",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,hash,"com.google.common.io.Files:hash(java.io.File,com.google.common.hash.HashFunction)",622,629,"/**
* Computes the hash of a file using a specified hash function.
* @param file the file to hash
* @param hashFunction the hash function to use
* @return HashCode representing the file's hash
* @throws IOException if an I/O error occurs
*/","* Computes the hash code of the {@code file} using {@code hashFunction}.
   *
   * @param file the file to read
   * @param hashFunction the hash function to use to hash the data
   * @return the {@link HashCode} of all of the bytes in the file
   * @throws IOException if an I/O error occurs
   * @since 12.0
   * @deprecated Prefer {@code asByteSource(file).hash(hashFunction)}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,move,"com.google.common.io.Files:move(java.io.File,java.io.File)",492,506,"/**
 * Moves a file from one location to another.
 * @param from source file
 * @param to destination file
 * @throws IOException if an I/O error occurs
 */","* Moves a file from one path to another. This method can rename a file and/or move it to a
   * different directory. In either case {@code to} must be the target path for the file itself; not
   * just the new name for the file or the path to the new parent directory.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#move}.
   *
   * @param from the source file
   * @param to the destination file
   * @throws IOException if an I/O error occurs
   * @throws IllegalArgumentException if {@code from.equals(to)}",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,readLines,"com.google.common.io.Resources:readLines(java.net.URL,java.nio.charset.Charset)",142,162,"/**
 * Reads lines from a URL using the specified charset.
 * @param url source URL to read from
 * @param charset character encoding for reading
 * @return list of lines read from the URL
 * @throws IOException if an I/O error occurs
 */","* Reads all of the lines from a URL. The lines do not include line-termination characters, but do
   * include other leading and trailing whitespace.
   *
   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code
   * Resources.asCharSource(url, charset).readLines()}.
   *
   * @param url the URL to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a mutable {@link List} containing all the lines
   * @throws IOException if an I/O error occurs",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,map,com.google.common.io.Files:map(java.io.File),646,649,"/**
* Maps a file to a read-only memory buffer.
* @param file the file to be mapped
* @return a MappedByteBuffer for the file
* @throws IOException if an I/O error occurs
*/","* Fully maps a file read-only in to memory as per {@link
   * FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)}.
   *
   * <p>Files are mapped from offset 0 to its length.
   *
   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.
   *
   * @param file the file to map
   * @return a read-only buffer reflecting {@code file}
   * @throws FileNotFoundException if the {@code file} does not exist
   * @throws IOException if an I/O error occurs
   * @see FileChannel#map(MapMode, long, long)
   * @since 2.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,com.google.common.util.concurrent.MoreExecutors$Application:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor),246,248,"/**
* Wraps ThreadPoolExecutor with an exiting service.
* @param executor existing ThreadPoolExecutor instance
* @return ExecutorService that exits gracefully
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",106,112,"/**
 * Wraps an existing ThreadPoolExecutor with an exiting service.
 * @param executor the ThreadPoolExecutor to wrap
 * @param terminationTimeout maximum time to wait for tasks to complete
 * @param timeUnit unit of time for termination timeout
 * @return ExecutorService that exits after tasks finish or timeout
 */","* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application
   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their
   * completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @param timeUnit unit of time for the time parameter
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,com.google.common.util.concurrent.MoreExecutors$Application:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor),258,261,"/**
 * Returns an executor service that exits after tasks complete.
 * @param executor existing scheduled thread pool executor
 * @return ScheduledExecutorService configured to exit
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",167,174,"/**
 * Wraps a ScheduledThreadPoolExecutor with an exiting service.
 * @param executor the original ScheduledThreadPoolExecutor
 * @param terminationTimeout timeout for graceful shutdown
 * @param timeUnit unit of time for the timeout
 * @return ScheduledExecutorService that exits on shutdown
 */","* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when
   * the application is complete. It does so by using daemon threads and adding a shutdown hook to
   * wait for their completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @param timeUnit unit of time for the time parameter
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,addDelayedShutdownHook,"com.google.common.util.concurrent.MoreExecutors:addDelayedShutdownHook(java.util.concurrent.ExecutorService,java.time.Duration)",207,211,"/**
 * Adds a delayed shutdown hook for the executor service.
 * @param service ExecutorService to be shut down
 * @param terminationTimeout timeout duration before shutting down
 */","* Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}.
   * This is useful if the given service uses daemon threads, and we want to keep the JVM from
   * exiting immediately on shutdown, instead giving these daemon threads a chance to terminate
   * normally.
   *
   * @param service ExecutorService which uses daemon threads
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimKey,"com.google.common.cache.LocalCache$Segment:reclaimKey(com.google.common.cache.ReferenceEntry,int)",3292,3325,"/**
* Attempts to reclaim a key by removing its entry.
* @param entry the entry to reclaim
* @param hash the hash of the entry's key
* @return true if the entry was successfully reclaimed, false otherwise
*/",Removes an entry whose key has been garbage collected.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimValue,"com.google.common.cache.LocalCache$Segment:reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference)",3328,3370,"/**
 * Attempts to reclaim a value entry by key and reference.
 * @param key the key associated with the value
 * @param hash the hash code of the key
 * @param valueReference the reference to the value to be reclaimed
 * @return true if the value was successfully reclaimed, false otherwise
 */",Removes an entry whose value has been garbage collected.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeEntry,"com.google.common.cache.LocalCache$Segment:removeEntry(com.google.common.cache.ReferenceEntry,int,com.google.common.cache.RemovalCause)",3406,3435,"/**
 * Removes an entry from the hash table.
 * @param entry the entry to remove
 * @param hash the hash code of the key
 * @param cause the reason for removal
 * @return true if the entry was removed, false otherwise
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,com.google.common.util.concurrent.ServiceManager:awaitHealthy(),299,301,"/**
 * Waits until the system state is healthy.
 */","* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy}. The manager
   * will become healthy after all the component services have reached the {@linkplain State#RUNNING
   * running} state.
   *
   * @throws IllegalStateException if the service manager reaches a state from which it cannot
   *     become {@linkplain #isHealthy() healthy}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,"com.google.common.util.concurrent.ServiceManager:awaitHealthy(long,java.util.concurrent.TimeUnit)",329,332,"/**
* Waits for the system to become healthy.
* @param timeout maximum time to wait
* @param unit time unit for the timeout
* @throws TimeoutException if the system does not become healthy within the timeout
*/","* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more
   * than the given time. The manager will become healthy after all the component services have
   * reached the {@linkplain State#RUNNING running} state.
   *
   * @param timeout the maximum time to wait
   * @param unit the time unit of the timeout argument
   * @throws TimeoutException if not all of the services have finished starting within the deadline
   * @throws IllegalStateException if the service manager reaches a state from which it cannot
   *     become {@linkplain #isHealthy() healthy}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,ofImmutable,"com.google.common.graph.DirectedNetworkConnections:ofImmutable(java.util.Map,java.util.Map,int)",46,50,"/**
* Creates an immutable directed network connections object.
* @param inEdges map of incoming edges and their targets
* @param outEdges map of outgoing edges and their sources
* @param selfLoopCount number of self-loops in the network
* @return ImmutableDirectedNetworkConnections instance
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,ofImmutable,com.google.common.graph.UndirectedNetworkConnections:ofImmutable(java.util.Map),45,47,"/**
* Creates an immutable network from edge-node mappings.
* @param incidentEdges map of edges to nodes
* @return ImmutableUndirectedNetworkConnections instance
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startupTimes,com.google.common.util.concurrent.ServiceManager:startupTimes(),419,421,"/**
 * Returns startup times for each service.
 * @return Immutable map of Service to its startup time in milliseconds
 */","* Returns the service load times. This value will only return startup times for services that
   * have finished starting.
   *
   * @return Map of services and their corresponding startup time in millis, the map entries will be
   *     ordered by startup time.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getDeclaredAnnotationsByType,com.google.common.reflect.Parameter:getDeclaredAnnotationsByType(java.lang.Class),121,128,"/**
 * Retrieves annotations of a specific type declared on this element.
 * @param annotationType the Class object corresponding to the annotation type
 * @return an array of Annotation objects of the specified type, or an empty array if none found
 */",* @since 18.0,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Collection),246,252,"/**
 * Creates an immutable sorted set from a collection of elements using natural ordering.
 * @param elements the collection to be copied
 * @return an ImmutableSortedSet containing the elements in natural order
 */","* Returns an immutable sorted set containing the given elements sorted by their natural ordering.
   * When multiple elements are equivalent according to {@code compareTo()}, only the first one
   * specified is included. To create a copy of a {@code SortedSet} that preserves the comparator,
   * call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.
   *
   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)}
   * returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s},
   * while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>}
   * containing one element (the given set itself).
   *
   * <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code
   * ImmutableSortedSet}, it may be returned instead of a copy.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null
   * @since 7.0 (source-compatible since 2.0)",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headMap,com.google.common.collect.Synchronized$SynchronizedNavigableMap:headMap(java.lang.Object),1680,1683,"/**
* Returns a view of the portion of this map whose keys are strictly less than toKey.
* @param toKey upper bound key (exclusive)
* @return SortedMap containing entries with keys less than toKey
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:subMap(java.lang.Object,java.lang.Object)",1759,1762,"/**
* Returns a view of the portion of this map whose keys are between fromKey (inclusive) and toKey (exclusive).
* @param fromKey low endpoint of the keys in the returned map
* @param toKey high endpoint of the keys in the returned map, exclusive
* @return SortedMap containing the specified range of keys
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailMap,com.google.common.collect.Synchronized$SynchronizedNavigableMap:tailMap(java.lang.Object),1771,1774,"/**
* Returns a view of the portion of this map whose keys are greater than or equal to fromKey.
* @param fromKey lower bound key (inclusive)
* @return SortedMap containing entries with keys >= fromKey
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,synchronizedNavigableMap,com.google.common.collect.Maps:synchronizedNavigableMap(java.util.NavigableMap),3692,3697,"/**
* Returns a synchronized (thread-safe) navigable map backed by the specified navigable map.
* @param navigableMap the navigable map to be wrapped
* @return a synchronized navigable map
*/","* Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In
   * order to guarantee serial access, it is critical that <b>all</b> access to the backing
   * navigable map is accomplished through the returned navigable map (or its views).
   *
   * <p>It is imperative that the user manually synchronize on the returned navigable map when
   * iterating over any of its collection views, or the collections views of any of its {@code
   * descendingMap}, {@code subMap}, {@code headMap} or {@code tailMap} views.
   *
   * {@snippet :
   * NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());
   *
   * // Needn't be in synchronized block
   * NavigableSet<K> set = map.navigableKeySet();
   *
   * synchronized (map) { // Synchronizing on map, not set!
   *   Iterator<K> it = set.iterator(); // Must be in synchronized block
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>or:
   *
   * {@snippet :
   * NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());
   * NavigableMap<K, V> map2 = map.subMap(foo, false, bar, true);
   *
   * // Needn't be in synchronized block
   * NavigableSet<K> set2 = map2.descendingKeySet();
   *
   * synchronized (map) { // Synchronizing on map, not map2 or set2!
   *   Iterator<K> it = set2.iterator(); // Must be in synchronized block
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned navigable map will be serializable if the specified navigable map is
   * serializable.
   *
   * @param navigableMap the navigable map to be ""wrapped"" in a synchronized navigable map.
   * @return a synchronized view of the specified navigable map.
   * @since 13.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,toString,"com.google.common.io.Files:toString(java.io.File,java.nio.charset.Charset)",250,256,"/**
* Reads file content into a string.
* @param file the file to read
* @param charset character set to use
* @return content of the file as a string
* @throws IOException if an I/O error occurs
*/","* Reads all characters from a file into a {@link String}, using the given character set.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a string containing all the characters from the file
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(file, charset).read()}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,toString,"com.google.common.io.Resources:toString(java.net.URL,java.nio.charset.Charset)",107,109,"/**
 * Converts URL content to string.
 * @param url source URL
 * @param charset character set for reading
 * @return string representation of URL content
 * @throws IOException if an I/O error occurs
 */","* Reads all characters from a URL into a {@link String}, using the given character set.
   *
   * @param url the URL to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a string containing all the characters from the URL
   * @throws IOException if an I/O error occurs.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,create,com.google.common.collect.CompactLinkedHashMap:create(),62,65,"/**
* Creates a new instance of CompactLinkedHashMap.
* @return an empty CompactLinkedHashMap with insertion order preservation
*/",Creates an empty {@code CompactLinkedHashMap} instance.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,create,com.google.common.collect.TreeMultimap:create(com.google.common.collect.Multimap),107,111,"/**
* Creates a TreeMultimap from a given Multimap.
* @param multimap input multimap to convert
* @return TreeMultimap with natural ordering for keys and values
*/","* Constructs a {@code TreeMultimap}, ordered by the natural ordering of its keys and values, with
   * the same mappings as the specified multimap.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,captureAsTypeVariable,com.google.common.reflect.TypeResolver$WildcardCapturer$1:captureAsTypeVariable(java.lang.reflect.Type[]),500,504,"/**
* Captures a type variable with given bounds.
* @param upperBounds array of upper type bounds
* @return new TypeVariable instance
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantLock,"com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantLock(java.lang.String,boolean)",244,248,"/**
 * Creates a new reentrant lock.
 * @param lockName name of the lock for identification
 * @param fair true if lock should use fair ordering policy
 * @return ReentrantLock instance based on current policy
 */","* Creates a {@link ReentrantLock} with the given fairness policy. The {@code lockName} is used in
   * the warning or exception output to help identify the locks involved in the detected deadlock.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantReadWriteLock,"com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantReadWriteLock(java.lang.String,boolean)",260,264,"/**
 * Creates a new ReentrantReadWriteLock.
 * @param lockName name of the lock for identification
 * @param fair true if lock should be fair, false otherwise
 * @return ReentrantReadWriteLock instance with specified fairness policy
 */","* Creates a {@link ReentrantReadWriteLock} with the given fairness policy. The {@code lockName}
   * is used in the warning or exception output to help identify the locks involved in the detected
   * deadlock.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,createNodes,com.google.common.util.concurrent.CycleDetectingLockFactory:createNodes(java.lang.Class),301,322,"/**
* Creates a map of LockGraphNodes for enum values.
* @param clazz Enum class to create nodes for
* @return Unmodifiable map of enum values to LockGraphNode objects
*/","* For a given Enum type, creates an immutable map from each of the Enum's values to a
   * corresponding LockGraphNode, with the {@code allowedPriorLocks} and {@code
   * disallowedPriorLocks} prepopulated with nodes according to the natural ordering of the
   * associated Enum values.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,addNode,com.google.common.graph.StandardMutableGraph:addNode(java.lang.Object),44,47,"/**
 * Adds a node to the graph.
 * @param node the node to be added
 * @return true if the node was successfully added, false otherwise
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,putEdge,"com.google.common.graph.StandardMutableGraph:putEdge(java.lang.Object,java.lang.Object)",49,52,"/**
* Adds an edge between two nodes.
* @param nodeU first node
* @param nodeV second node
* @return true if the edge was added, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,putEdgeValue,"com.google.common.graph.StandardMutableValueGraph:putEdgeValue(com.google.common.graph.EndpointPair,java.lang.Object)",112,117,"/**
 * Sets the edge value for a given pair of nodes.
 * @param endpoints pair of nodes defining the edge
 * @param value value to set for the edge
 * @return previous value associated with the edge, or null if none
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,validatePart,"com.google.common.net.InternetDomainName:validatePart(java.lang.String,boolean)",307,351,"/**
* Validates a domain part based on length, character restrictions, and position rules.
* @param part the domain part to validate
* @param isFinalPart indicates if it's the last part of the domain
* @return true if valid, false otherwise
*/","* Helper method for {@link #validateSyntax(List)}. Validates that one part of a domain name is
   * valid.
   *
   * @param part The domain name part to be validated
   * @param isFinalPart Is this the final (rightmost) domain part?
   * @return Whether the part is valid",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,coerceToInteger,com.google.common.net.InetAddresses:coerceToInteger(java.net.InetAddress),1059,1061,"/**
* Converts an IP address to an integer.
* @param ip IPv4 or IPv6 address
* @return integer representation of the IP address
*/","* Returns an integer representing an IPv4 address regardless of whether the supplied argument is
   * an IPv4 address or not.
   *
   * <p>IPv6 addresses are <b>coerced</b> to IPv4 addresses before being converted to integers.
   *
   * <p>As long as there are applications that assume that all IP addresses are IPv4 addresses and
   * can therefore be converted safely to integers (for whatever purpose) this function can be used
   * to handle IPv6 addresses as well until the application is suitably fixed.
   *
   * <p>NOTE: an IPv6 address coerced to an IPv4 address can only be used for such purposes as
   * rudimentary identification or indexing into a collection of real {@link InetAddress}es. They
   * cannot be used as real addresses for the purposes of network communication.
   *
   * @param ip {@link InetAddress} to convert
   * @return {@code int}, ""coerced"" if ip is not an IPv4 address
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardContains,com.google.common.collect.ForwardingCollection:standardContains(java.lang.Object),138,140,"/**
 * Checks if the collection contains the specified object.
 * @param object the object to check for presence
 * @return true if the object is present, false otherwise
 */","* A sensible definition of {@link #contains} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #contains} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardRemove,com.google.common.collect.ForwardingCollection:standardRemove(java.lang.Object),170,179,"/**
* Removes the first occurrence of the specified object.
* @param object the object to be removed
* @return true if the object was found and removed, false otherwise
*/","* A sensible definition of {@link #remove} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #remove} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardRemoveAll,com.google.common.collect.ForwardingCollection:standardRemoveAll(java.util.Collection),188,190,"/**
 * Removes all elements from this collection that are contained in the specified collection.
 * @param collection elements to be removed from this collection
 * @return true if this collection changed as a result of the call
 */","* A sensible definition of {@link #removeAll} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #removeAll} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardRetainAll,com.google.common.collect.ForwardingCollection:standardRetainAll(java.util.Collection),199,201,"/**
 * Retains only elements contained in the specified collection.
 * @param collection elements to retain
 * @return true if this collection changed as a result of the call
 */","* A sensible definition of {@link #retainAll} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #retainAll} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardClear,com.google.common.collect.ForwardingCollection:standardClear(),210,212,"/**
 * Clears all elements using an iterator.
 */","* A sensible definition of {@link #clear} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #clear} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardIsEmpty,com.google.common.collect.ForwardingCollection:standardIsEmpty(),221,223,"/**
 * Checks if the collection is empty.
 * @return true if no elements, false otherwise
 */","* A sensible definition of {@link #isEmpty} as {@code !iterator().hasNext}. If you override
   * {@link #isEmpty}, you may wish to override {@link #isEmpty} to forward to this implementation.
   * Alternately, it may be more efficient to implement {@code isEmpty} as {@code size() == 0}.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardToArray,com.google.common.collect.ForwardingCollection:standardToArray(),243,246,"/**
* Converts collection to an array.
* @return Object array containing all elements or null if empty
*/","* A sensible definition of {@link #toArray()} in terms of {@link #toArray(Object[])}. If you
   * override {@link #toArray(Object[])}, you may wish to override {@link #toArray} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,createUnmodifiableEmptyCollection,com.google.common.collect.AbstractSortedSetMultimap:createUnmodifiableEmptyCollection(),54,57,"/**
 * Creates an unmodifiable empty sorted set.
 * @return UnmodifiableSortedSet instance
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$UnmodifiableNavigableMap:keySet(),3592,3595,"/**
 * Returns a set of all keys in the map.
 * @return Set containing all keys
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,createEntries,com.google.common.collect.FilteredEntrySetMultimap:createEntries(),58,61,"/**
* Creates filtered entries.
* @return Set of filtered Entry objects
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,entries,com.google.common.collect.ForwardingSetMultimap:entries(),46,49,"/**
 * Returns a set of all entries in the map.
 * @return Set of Entry objects representing key-value pairs
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,schedule,"com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.lang.Runnable,java.time.Duration)",51,54,"/**
* Schedules a task with a specified delay.
* @param command the Runnable task to execute
* @param delay the time delay before execution
* @return ListenableScheduledFuture for the scheduled task
*/","* Duration-based overload of {@link #schedule(Runnable, long, TimeUnit)}.
   *
   * @since 29.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,readObject,com.google.common.cache.LocalCache$LoadingSerializationProxy:readObject(java.io.ObjectInputStream),4799,4803,"/**
* Deserializes an object and reconstructs cache settings.
* @param in ObjectInputStream to read from
* @throws IOException if I/O error occurs
* @throws ClassNotFoundException if class not found during deserialization
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,readObject,com.google.common.cache.LocalCache$ManualSerializationProxy:readObject(java.io.ObjectInputStream),4765,4769,"/**
* Reads object from input stream and rebuilds cache.
* @param in ObjectInputStream to read from
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,replaceValues,"com.google.common.collect.ForwardingSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",57,60,"/**
* Replaces values associated with a key.
* @param key the key to replace values for
* @param values new values to associate with the key
* @return SortedSet of old values or empty set if not present
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,predecessors,com.google.common.graph.DirectedMultiNetworkConnections:predecessors(),64,67,"/**
 * Returns an unmodifiable set of predecessors.
 * @return Set of N representing predecessors
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,successors,com.google.common.graph.DirectedMultiNetworkConnections:successors(),80,83,"/**
 * Returns an unmodifiable set of successors.
 * @return Set of successor nodes
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,adjacentNodes,com.google.common.graph.UndirectedMultiNetworkConnections:adjacentNodes(),60,63,"/**
* Returns an unmodifiable set of adjacent nodes.
* @return Unmodifiable set of N representing adjacent nodes
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,findAllSubscribers,com.google.common.eventbus.SubscriberRegistry:findAllSubscribers(java.lang.Object),156,165,"/**
* Finds all subscribers for a given listener.
* @param listener the object to find subscribers for
* @return Multimap of event types to Subscribers
*/",* Returns all subscribers for the given listener grouped by the type of event they subscribe to.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inducedSubgraph,"com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.Network,java.lang.Iterable)",576,594,"/**
* Creates an induced subgraph from a given network.
* @param network the original network
* @param nodes iterable of nodes to include in the subgraph
* @return MutableNetwork containing only specified nodes and their connecting edges
*/","* Returns the subgraph of {@code network} induced by {@code nodes}. This subgraph is a new graph
   * that contains all of the nodes in {@code nodes}, and all of the {@link Network#edges() edges}
   * from {@code network} for which the {@link Network#incidentNodes(Object) incident nodes} are
   * both contained by {@code nodes}.
   *
   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,copyOf,com.google.common.graph.Graphs:copyOf(com.google.common.graph.Network),626,640,"/**
 * Creates a mutable copy of the given network.
 * @param network the original Network to be copied
 * @return a new MutableNetwork with the same nodes and edges as the input network
 */",Creates a mutable copy of {@code network} with the same nodes and edges.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,<init>,com.google.common.graph.ImmutableNetwork$Builder:<init>(com.google.common.graph.NetworkBuilder),160,162,"/**
 * Initializes the builder with a mutable network.
 * @param networkBuilder builder to construct the network
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,build,com.google.common.graph.GraphBuilder:build(),181,183,"/**
* Builds and returns a mutable graph.
* @param <N1> node type extending N
* @return MutableGraph instance
*/",Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inducedSubgraph,"com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.ValueGraph,java.lang.Iterable)",545,566,"/**
* Creates an induced subgraph from a given graph using specified nodes.
* @param <N> node type
* @param <V> edge value type
* @param graph the original graph
* @param nodes iterable of nodes to include in the subgraph
* @return MutableValueGraph containing only the specified nodes and their edges
*/","* Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph
   * that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges}
   * (and associated edge values) from {@code graph} for which both nodes are contained by {@code
   * nodes}.
   *
   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,copyOf,com.google.common.graph.Graphs:copyOf(com.google.common.graph.ValueGraph),609,623,"/**
 * Creates a mutable copy of a given value graph.
 * @param <N> node type
 * @param <V> value type for edges
 * @param graph the original value graph to copy
 * @return a new MutableValueGraph containing all nodes and edges from the original graph
 */","Creates a mutable copy of {@code graph} with the same nodes, edges, and edge values.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,<init>,com.google.common.graph.ImmutableValueGraph$Builder:<init>(com.google.common.graph.ValueGraphBuilder),133,138,"/**
* Initializes the mutable value graph with stable edge order.
* @param graphBuilder builder for the initial graph configuration
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,putAll,com.google.common.collect.ImmutableBiMap$Builder:putAll(java.util.Map),381,386,"/**
* Adds all entries from the specified map to this builder.
* @param map source map containing key-value pairs
* @return this builder instance for method chaining
*/","* Associates all of the given map's keys and values in the built bimap. Duplicate keys or
     * values are not allowed, and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code map} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,putAll,com.google.common.collect.ImmutableSortedMap$Builder:putAll(java.util.Map),656,661,"/**
 * Adds all entries from the specified map to the builder.
 * @param map the map to add entries from
 * @return the current Builder instance for method chaining
 */","* Associates all of the given map's keys and values in the built map. Duplicate keys, according
     * to the comparator (which might be the keys' natural order), are not allowed, and will cause
     * {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code map} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,containsKey,com.google.common.collect.FilteredEntryMultimap$AsMap:containsKey(java.lang.Object),176,179,"/**
 * Checks if the map contains a mapping for the specified key.
 * @param key key whose presence in this map is to be tested
 * @return true if this map contains a mapping for the specified key, false otherwise
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,get,com.google.common.collect.FilteredEntrySetMultimap:get(java.lang.Object),43,46,"/**
 * Retrieves the set of values associated with the specified key.
 * @param key the key whose associated value is to be returned
 * @return a set of values or null if no mapping for the key exists
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,removeEntriesIf,com.google.common.collect.FilteredEntryMultimap$Keys$1:removeEntriesIf(com.google.common.base.Predicate),154,172,"/**
* Removes entries matching the predicate.
* @param predicate condition to test each entry
* @return true if any entries were removed, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryBiMap:<init>(com.google.common.collect.BiMap,com.google.common.base.Predicate)",3371,3375,"/**
* Constructs a filtered bidirectional map.
* @param delegate original bidirectional map
* @param predicate filter condition for entries
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntryNavigableMap,com.google.common.base.Predicate)",2824,2831,"/**
* Filters a navigable map based on an additional entry predicate.
* @param map the original filtered navigable map
* @param entryPredicate additional predicate to filter entries
* @return a new navigable map with combined filtering
*/","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * navigable map.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$FilteredEntrySortedMap:headMap(java.lang.Object),3208,3211,"/**
* Returns a sorted map containing entries with keys less than the specified key.
* @param toKey exclusive upper bound for the returned map's keys
* @return SortedMap with filtered entries based on the predicate
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$FilteredEntrySortedMap:subMap(java.lang.Object,java.lang.Object)",3213,3216,"/**
* Returns a sorted map containing entries within the specified key range.
* @param fromKey inclusive lower bound of the key range
* @param toKey exclusive upper bound of the key range
* @return SortedMap with filtered entries based on the predicate
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$FilteredEntrySortedMap:tailMap(java.lang.Object),3218,3221,"/**
* Returns a view of the portion of this map whose keys are greater than or equal to fromKey.
* @param fromKey key to start the range at, inclusive
* @return SortedMap with filtered entries based on predicate
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate)",2813,2818,"/**
* Filters entries in a sorted map using given predicates.
* @param <K> key type
* @param <V> value type
* @param map original filtered map
* @param entryPredicate additional predicate for filtering entries
* @return new FilteredEntrySortedMap with combined predicates
*/","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * sorted map.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(java.util.Map,com.google.common.base.Predicate)",2428,2435,"/**
* Filters a map's keys based on a predicate.
* @param unfiltered the original map to filter
* @param keyPredicate predicate for filtering keys
* @return a filtered map with only matching keys
*/","* Returns a map containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The
   * returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and
   * {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(java.util.Map,com.google.common.base.Predicate)",2684,2690,"/**
 * Filters entries in a map based on a predicate.
 * @param unfiltered the original map to filter
 * @param entryPredicate predicate to determine which entries to retain
 * @return a filtered map with only entries matching the predicate
 */","* Returns a map containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code
   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the
   * map's entries have a {@link Entry#setValue} method that throws an {@link
   * IllegalArgumentException} when the existing key and the provided value don't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings that satisfy the filter will be removed from the underlying map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,inDegree,com.google.common.graph.AbstractNetwork:inDegree(java.lang.Object),153,156,"/**
 * Returns the in-degree of a node.
 * @param node the node to check
 * @return number of incoming edges for directed graphs, total edges otherwise
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,outDegree,com.google.common.graph.AbstractNetwork:outDegree(java.lang.Object),158,161,"/**
* Returns the number of outgoing edges from a node.
* @param node the node to check
* @return number of outgoing edges if directed, otherwise total degree
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnecting,"com.google.common.graph.AbstractNetwork:edgeConnecting(java.lang.Object,java.lang.Object)",194,197,"/**
* Returns an optional edge connecting two nodes.
* @param nodeU first node
* @param nodeV second node
* @return Optional containing the edge if present, otherwise empty
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnectingOrNull,com.google.common.graph.AbstractNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair),218,222,"/**
* Returns an edge connecting two nodes if it exists.
* @param endpoints pair of nodes to check for connection
* @return the edge or null if no such edge exists
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,toImmutableSortedMap,"com.google.common.collect.ImmutableSortedMap:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function)",80,86,"/**
 * Converts a stream to an ImmutableSortedMap.
 * @param comparator for sorting keys
 * @param keyFunction extracts the key from elements
 * @param valueFunction extracts the value from elements
 * @return ImmutableSortedMap with sorted keys
 */","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose
   * keys and values are the result of applying the provided mapping functions to the input
   * elements. The generated map is sorted by the specified comparator.
   *
   * <p>If the mapped keys contain duplicates (according to the specified comparator), an {@code
   * IllegalArgumentException} is thrown when the collection operation is performed. (This differs
   * from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which
   * throws an {@code IllegalStateException}.)
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subSet,com.google.common.collect.ImmutableRangeSet$AsSet:subSet(com.google.common.collect.Range),638,640,"/**
 * Returns an immutable sorted set of elements within the specified range.
 * @param range the range of values to include
 * @return an ImmutableSortedSet containing elements within the range
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,headSetImpl,"com.google.common.collect.RegularContiguousSet:headSetImpl(java.lang.Comparable,boolean)",53,56,"/**
* Returns elements up to a specified element.
* @param toElement upper bound of the range
* @param inclusive true if the upper bound is inclusive
* @return set of elements up to the specified element
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,subSetImpl,"com.google.common.collect.RegularContiguousSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)",58,70,"/**
* Returns a subset of elements within the specified range.
* @param fromElement lower bound of the range
* @param fromInclusive true if the lower bound is inclusive
* @param toElement upper bound of the range
* @param toInclusive true if the upper bound is inclusive
* @return ContiguousSet containing elements in the specified range
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,tailSetImpl,"com.google.common.collect.RegularContiguousSet:tailSetImpl(java.lang.Comparable,boolean)",72,75,"/**
* Returns elements greater than or equal to fromElement.
* @param fromElement starting element of the range
* @param inclusive true if fromElement is included in the set
* @return ContiguousSet containing elements from fromElement onwards
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,get,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:get(java.lang.Object),627,643,"/**
* Retrieves range for given key.
* @param key Cut object representing the range boundary
* @return Range associated with key or null if not found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:remove(java.lang.Object),692,703,"/**
* Removes a key-value pair by key.
* @param key the key to remove
* @return the removed value or null if not found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,removeEntryIf,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:removeEntryIf(com.google.common.base.Predicate),710,721,"/**
* Removes entries matching the given predicate.
* @param predicate condition to test each entry
* @return true if any entries were removed, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,clear,com.google.common.collect.TreeRangeMap$SubRangeMap:clear(),561,564,"/**
 * Clears the specified sub-range from the TreeRangeMap.
 * @param subRange the range to be removed
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$SubRangeMap:remove(com.google.common.collect.Range),566,571,"/**
 * Removes elements within a specified range.
 * @param range the range of keys to remove
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,put,"com.google.common.collect.TreeRangeMap:put(com.google.common.collect.Range,java.lang.Object)",137,144,"/**
 * Associates a value with the specified range.
 * @param range key range to associate value with
 * @param value value to be associated with the range
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addNode,com.google.common.graph.StandardMutableNetwork:addNode(java.lang.Object),51,62,"/**
* Adds a node to the collection.
* @param node the node to add
* @return true if added, false if already present
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addEdge,"com.google.common.graph.StandardMutableNetwork:addEdge(java.lang.Object,java.lang.Object,java.lang.Object)",76,118,"/**
 * Adds an edge between two nodes.
 * @param nodeU the first node
 * @param nodeV the second node
 * @param edge the edge to add
 * @return true if the edge was added, false if it already exists with different endpoints
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toImmutableEnumMap,"com.google.common.collect.Maps:toImmutableEnumMap(java.util.function.Function,java.util.function.Function)",198,203,"/**
* Converts a stream to an ImmutableMap with enum keys.
* @param keyFunction extracts the enum key from elements
* @param valueFunction extracts the value from elements
* @return ImmutableMap with enum keys and corresponding values
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements. The
   * resulting implementation is specialized for enum key types. The returned map and its views will
   * iterate over keys in their enum definition order, not encounter order.
   *
   * <p>If the mapped keys contain duplicates, an {@code IllegalArgumentException} is thrown when
   * the collection operation is performed. (This differs from the {@code Collector} returned by
   * {@link java.util.stream.Collectors#toMap(java.util.function.Function,
   * java.util.function.Function) Collectors.toMap(Function, Function)}, which throws an {@code
   * IllegalStateException}.)
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toImmutableEnumMap,"com.google.common.collect.Maps:toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",216,222,"/**
* Converts a stream to an ImmutableMap using enum keys.
* @param keyFunction extracts the enum key from elements
* @param valueFunction extracts the value from elements
* @param mergeFunction resolves conflicts when duplicate keys are found
* @return ImmutableMap with enum keys and corresponding values
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements. The
   * resulting implementation is specialized for enum key types. The returned map and its views will
   * iterate over keys in their enum definition order, not encounter order.
   *
   * <p>If the mapped keys contain duplicates, the values are merged using the specified merging
   * function.
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,getAllPresent,com.google.common.cache.AbstractCache:getAllPresent(java.lang.Iterable),67,81,"/**
 * Retrieves all present entries for given keys.
 * @param keys iterable of keys to check
 * @return immutable map of present key-value pairs
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,getAll,com.google.common.cache.AbstractLoadingCache:getAll(java.lang.Iterable),58,67,"/**
* Retrieves multiple values by keys.
* @param keys iterable collection of keys to fetch
* @return immutable map of fetched key-value pairs
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMap,"com.google.common.collect.CollectCollectors:toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",198,207,"/**
* Collects elements into an immutable map.
* @param keyFunction extracts keys from elements
* @param valueFunction extracts values from elements
* @param mergeFunction resolves conflicts between values with the same key
* @return ImmutableMap containing collected entries
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,columnMap,com.google.common.collect.DenseImmutableTable:columnMap(),283,288,"/**
* Returns a map of columns to rows.
* @return immutable map where keys are columns and values are row maps
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,rowMap,com.google.common.collect.DenseImmutableTable:rowMap(),290,295,"/**
 * Returns the map of rows.
 * @return ImmutableMap where keys are row keys and values are maps of column keys to values
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,columnMap,com.google.common.collect.SparseImmutableTable:columnMap(),96,101,"/**
* Returns an immutable map of columns.
* @return ImmutableMap where keys are column identifiers and values are maps of row to value
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,rowMap,com.google.common.collect.SparseImmutableTable:rowMap(),103,108,"/**
 * Returns an immutable map of rows.
 * @return ImmutableMap where keys are row identifiers and values are maps of column-value pairs
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,ofImmutable,"com.google.common.graph.DirectedMultiNetworkConnections:ofImmutable(java.util.Map,java.util.Map,int)",56,60,"/**
* Creates an immutable directed network with specified edges and self-loops.
* @param inEdges map of incoming edges to nodes
* @param outEdges map of outgoing edges to nodes
* @param selfLoopCount number of self-loops
* @return DirectedMultiNetworkConnections object
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,ofImmutable,com.google.common.graph.UndirectedGraphConnections:ofImmutable(java.util.Map),60,62,"/**
* Creates an immutable graph connection from a map.
* @param adjacentNodeValues map of node values to their connections
* @return ImmutableUndirectedGraphConnections instance
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,ofImmutable,com.google.common.graph.UndirectedMultiNetworkConnections:ofImmutable(java.util.Map),54,56,"/**
* Creates an immutable network connections instance.
* @param incidentEdges map of edges to nodes
* @return ImmutableUndirectedMultiNetworkConnections object
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,getTypeMappings,com.google.common.reflect.TypeResolver$TypeMappingIntrospector:getTypeMappings(java.lang.reflect.Type),380,385,"/**
 * Retrieves type mappings for a given context type.
 * @param contextType the type to inspect for mappings
 * @return an immutable map of type variable keys to types
 */","* Returns type mappings using type parameters and type arguments found in the generic
     * superclass and the super interfaces of {@code contextClass}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,create,"com.google.common.collect.ImmutableTable$SerializedForm:create(com.google.common.collect.ImmutableTable,int[],int[])",472,480,"/**
* Creates a SerializedForm from an ImmutableTable.
* @param table the ImmutableTable to serialize
* @param cellRowIndices row indices of cells
* @param cellColumnIndices column indices of cells
* @return SerializedForm object representing the table
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,iterator,com.google.common.collect.ImmutableSortedSet:iterator(),628,629,"/**
 * Provides an unmodifiable iterator over elements.
 * @return UnmodifiableIterator of type E
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,higher,com.google.common.collect.DescendingImmutableSortedSet:higher(java.lang.Object),101,104,"/**
 * Finds the greatest element less than the given element.
 * @param element the reference element
 * @return the greatest element less than the given element, or null if no such element exists
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,ceiling,com.google.common.collect.DescendingImmutableSortedSet:ceiling(java.lang.Object),96,99,"/**
 * Returns the least element greater than or equal to the specified element.
 * @param element the element to search for
 * @return the least element greater than or equal to the specified element, or null if no such element exists
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lastKey,com.google.common.collect.ImmutableSortedMap:lastKey(),914,917,"/**
 * Retrieves the last key in the map.
 * @return The last key or null if the map is empty
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,concat,com.google.common.io.ByteSource:concat(java.util.Iterator),396,398,"/**
 * Concatenates multiple ByteSource objects.
 * @param sources iterator of ByteSource objects to concatenate
 * @return a single ByteSource containing all input data
 */","* Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method
   * is called. This will fail if the iterator is infinite and may cause problems if the iterator
   * eagerly fetches data for each source when iterated (rather than producing sources that only
   * load data through their streams). Prefer using the {@link #concat(Iterable)} overload if
   * possible.
   *
   * @param sources the sources to concatenate
   * @return a {@code ByteSource} containing the concatenated data
   * @throws NullPointerException if any of {@code sources} is {@code null}
   * @since 15.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource$CharSequenceCharSource:readLines(),603,606,"/**
 * Reads and returns all lines from the iterator as an immutable list.
 * @return Immutable list of lines from the iterator
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,concat,com.google.common.io.CharSource:concat(java.util.Iterator),465,467,"/**
 * Concatenates multiple CharSources into one.
 * @param sources iterator of CharSource objects
 * @return a single CharSource containing all input sources concatenated
 */","* Concatenates multiple {@link CharSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method
   * is called. This will fail if the iterator is infinite and may cause problems if the iterator
   * eagerly fetches data for each source when iterated (rather than producing sources that only
   * load data through their streams). Prefer using the {@link #concat(Iterable)} overload if
   * possible.
   *
   * @param sources the sources to concatenate
   * @return a {@code CharSource} containing the concatenated data
   * @throws NullPointerException if any of {@code sources} is {@code null}
   * @since 15.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableRangeMap,"com.google.common.collect.CollectCollectors:toImmutableRangeMap(java.util.function.Function,java.util.function.Function)",343,355,"/**
* Collects elements into an ImmutableRangeMap.
* @param keyFunction extracts the range key from each element
* @param valueFunction extracts the value associated with each range key
* @return ImmutableRangeMap containing ranges and their associated values
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,createRangeMap,com.google.common.collect.ImmutableRangeMap$SerializedForm:createRangeMap(),443,449,"/**
* Creates a range map from entries.
* @return RangeMap object built from mapOfRanges entries
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,copyOf,com.google.common.collect.ImmutableRangeSet:copyOf(java.lang.Iterable),135,137,"/**
* Creates an immutable range set from given ranges.
* @param ranges iterable collection of ranges
* @return ImmutableRangeSet containing the specified ranges
*/","* Returns an {@code ImmutableRangeSet} containing each of the specified disjoint ranges.
   * Overlapping ranges and empty ranges are forbidden, though adjacent ranges are permitted and
   * will be merged.
   *
   * @throws IllegalArgumentException if any ranges overlap or are empty
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,"com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Comparator,java.lang.Iterable)",259,276,"/**
 * Creates an immutable sorted multiset from the given elements.
 * @param comparator comparator to define element order
 * @param elements iterable of elements to include
 * @return ImmutableSortedMultiset with specified elements and order
 */","* Returns an immutable sorted multiset containing the given elements sorted by the given {@code
   * Comparator}. This method iterates over {@code elements} at most once.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOfSorted,com.google.common.collect.ImmutableSortedMultiset:copyOfSorted(com.google.common.collect.SortedMultiset),292,295,"/**
* Creates an immutable sorted multiset from a given sorted multiset.
* @param sortedMultiset the source sorted multiset to copy
* @return an ImmutableSortedMultiset with the same elements and order
*/","* Returns an immutable sorted multiset containing the elements of a sorted multiset, sorted by
   * the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always
   * uses the natural ordering of the elements.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is safe to use even when {@code sortedMultiset} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code sortedMultiset} or any of its elements is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getClassLoaderUrls,com.google.common.reflect.ClassPath:getClassLoaderUrls(java.lang.ClassLoader),622,630,"/**
* Retrieves URLs from a given ClassLoader.
* @param classloader the ClassLoader to inspect
* @return an immutable list of URLs or empty list if not applicable
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,<init>,"com.google.common.reflect.Types$ParameterizedTypeImpl:<init>(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])",257,264,"/**
* Constructs a ParameterizedTypeImpl.
* @param ownerType type that owns this type, or null if not applicable
* @param rawType the class representing the raw type
* @param typeArguments array of types representing the type arguments
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,<init>,"com.google.common.reflect.Types$WildcardTypeImpl:<init>(java.lang.reflect.Type[],java.lang.reflect.Type[])",470,475,"/**
* Initializes a WildcardTypeImpl with specified bounds.
* @param lowerBounds array of lower type bounds
* @param upperBounds array of upper type bounds
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAll,com.google.common.util.concurrent.WrappingExecutorService:invokeAll(java.util.Collection),114,118,"/**
* Executes a collection of tasks concurrently.
* @param tasks collection of Callable tasks to execute
* @return list of Future objects representing task results
* @throws InterruptedException if execution is interrupted
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAll,"com.google.common.util.concurrent.WrappingExecutorService:invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)",120,125,"/**
* Executes a collection of tasks with a specified timeout.
* @param tasks collection of callable tasks to execute
* @param timeout maximum time to wait for task completion
* @param unit time unit for the timeout
* @return list of Future objects representing task results
* @throws InterruptedException if the operation is interrupted
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAny,com.google.common.util.concurrent.WrappingExecutorService:invokeAny(java.util.Collection),127,131,"/**
* Executes given tasks concurrently and returns result of one that completes first.
* @param tasks collection of Callable tasks to execute
* @return result of the first completed task
* @throws InterruptedException if execution is interrupted
* @throws ExecutionException if any task throws an exception
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAny,"com.google.common.util.concurrent.WrappingExecutorService:invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)",133,138,"/**
* Invokes any task from the collection within a specified timeout.
* @param tasks collection of callable tasks to execute
* @param timeout maximum time to wait for completion
* @param unit time unit for the timeout
* @return result of one completed task or throws exception
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,"com.google.common.collect.Collections2$OrderedPermutationCollection:<init>(java.lang.Iterable,java.util.Comparator)",439,443,"/**
* Creates a collection of ordered permutations.
* @param input iterable collection of elements to permute
* @param comparator defines the order of elements
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,immutableSortedCopy,com.google.common.collect.Ordering:immutableSortedCopy(java.lang.Iterable),885,887,"/**
* Creates an immutable sorted list from given elements.
* @param elements iterable collection of elements to sort and copy
* @return ImmutableSortedCopyList containing sorted elements
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,createEntrySet,com.google.common.collect.RegularImmutableBiMap:createEntrySet(),153,158,"/**
* Creates an immutable entry set.
* @return ImmutableSet of map entries or empty set if map is empty
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,createEntrySet,com.google.common.collect.RegularImmutableMap:createEntrySet(),307,310,"/**
* Creates an immutable entry set for the map.
* @return ImmutableSet of Entry objects representing key-value pairs
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,buildJdkBacked,com.google.common.collect.ImmutableMultiset$Builder:buildJdkBacked(),594,600,"/**
* Builds a JDK-backed immutable multiset from contents.
* @return ImmutableMultiset backed by JDK collections
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,create,com.google.common.collect.RegularImmutableMultiset:create(java.util.Collection),43,85,"/**
 * Creates an immutable multiset from a collection of entries.
 * @param entries collection of entries with elements and counts
 * @return ImmutableMultiset containing the specified elements and counts
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,asList,com.google.common.collect.ImmutableCollection:asList(),361,370,"/**
* Returns an immutable list representation of the collection.
* @return ImmutableList containing elements of the collection
*/","* Returns an {@code ImmutableList} containing the same elements, in the same order, as this
   * collection.
   *
   * <p><b>Performance note:</b> in most cases this method can return quickly without actually
   * copying anything. The exact circumstances under which the copy is performed are undefined and
   * subject to change.
   *
   * @since 2.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,createAsList,com.google.common.collect.ImmutableSet$CachingAsList:createAsList(),321,323,"/**
 * Creates an immutable list from the current collection.
 * @return Immutable list containing elements of this collection
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSet.java,createAsList,com.google.common.collect.RegularImmutableSet:createAsList(),111,116,"/**
* Creates an immutable list from table elements.
* @return ImmutableList containing table elements or empty list if table is empty
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,toImmutableSortedSet,com.google.common.collect.ImmutableSortedSet:toImmutableSortedSet(java.util.Comparator),81,84,"/**
* Converts a stream to an ImmutableSortedSet.
* @param comparator defines the order of elements
* @return ImmutableSortedSet with sorted elements
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableSortedSet}, ordered by the specified comparator.
   *
   * <p>If the elements contain duplicates (according to the comparator), only the first duplicate
   * in encounter order will appear in the result.
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Iterator),265,271,"/**
* Creates an immutable sorted set from iterator elements using natural ordering.
* @param elements iterator of elements to include in the set
* @return ImmutableSortedSet containing the elements
*/","* Returns an immutable sorted set containing the given elements sorted by their natural ordering.
   * When multiple elements are equivalent according to {@code compareTo()}, only the first one
   * specified is included.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,buildOrThrow,com.google.common.collect.ImmutableBiMap$Builder:buildOrThrow(),451,481,"/**
 * Builds an immutable bimap from the entries.
 * @return ImmutableBiMap containing all entries
 * @throws IllegalStateException if duplicate keys or values are detected
 */","* Returns a newly-created immutable bimap, or throws an exception if any key or value was added
     * more than once. The iteration order of the returned bimap is the order in which entries were
     * inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case
     * entries are sorted by value.
     *
     * @throws IllegalArgumentException if duplicate keys or values were added
     * @since 31.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,buildJdkBacked,com.google.common.collect.ImmutableBiMap$Builder:buildJdkBacked(),498,515,"/**
 * Builds a JDK-backed ImmutableBiMap for testing.
 * @return ImmutableBiMap created from entries array
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,build,com.google.common.collect.ImmutableMap$Builder:build(boolean),529,580,"/**
 * Builds an ImmutableMap from entries.
 * @param throwIfDuplicateKeys whether to throw on duplicate keys
 * @return ImmutableMap built from entries
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,headMap,"com.google.common.collect.ImmutableSortedMap:headMap(java.lang.Object,boolean)",955,958,"/**
* Returns a map containing entries up to (or including) the specified key.
* @param toKey upper bound key for the sub-map
* @param inclusive true if the toKey is included in the result
* @return ImmutableSortedMap with keys <= toKey
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less
   * than (or equal to, if {@code inclusive}) {@code toKey}.
   *
   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code
   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code toKey}.
   *
   * @since 12.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,tailMap,"com.google.common.collect.ImmutableSortedMap:tailMap(java.lang.Object,boolean)",1026,1029,"/**
* Returns a submap with keys greater than or equal to fromKey.
* @param fromKey the lower bound key
* @param inclusive true if fromKey is included in the range
* @return ImmutableSortedMap containing the tail of the map
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are
   * greater than (or equal to, if {@code inclusive}) {@code fromKey}.
   *
   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code
   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code fromKey}.
   *
   * @since 12.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,headMultiset,"com.google.common.collect.RegularImmutableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",106,109,"/**
* Returns a multiset view of the elements less than or equal to upperBound.
* @param upperBound the upper bound for the range
* @param boundType type of inclusion for the upper bound (OPEN or CLOSED)
* @return ImmutableSortedMultiset containing elements up to upperBound
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,tailMultiset,"com.google.common.collect.RegularImmutableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",111,115,"/**
* Returns a multiset of elements greater than or equal to the specified lower bound.
* @param lowerBound the lower bound element
* @param boundType type of inclusion for the lower bound (CLOSED or OPEN)
* @return ImmutableSortedMultiset containing elements from lowerBound
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,subSetImpl,"com.google.common.collect.RegularImmutableSortedSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",261,265,"/**
* Returns a subset of elements within the specified range.
* @param fromElement lower bound of the range
* @param fromInclusive true if the lower bound is inclusive
* @param toElement upper bound of the range
* @param toInclusive true if the upper bound is inclusive
* @return ImmutableSortedSet containing elements in the specified range
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isPublicSuffix,com.google.common.net.InternetDomainName:isPublicSuffix(),382,384,"/**
 * Checks if the domain is a public suffix.
 * @return true if the domain is a public suffix, false otherwise
 */","* Indicates whether this domain name represents a <i>public suffix</i>, as defined by the Mozilla
   * Foundation's <a href=""http://publicsuffix.org/"">Public Suffix List</a> (PSL). A public suffix
   * is one under which Internet users can directly register names, such as {@code com}, {@code
   * co.uk} or {@code pvt.k12.wy.us}. Examples of domain names that are <i>not</i> public suffixes
   * include {@code google.com}, {@code foo.co.uk}, and {@code myblog.blogspot.com}.
   *
   * <p>Public suffixes are a proper superset of {@linkplain #isRegistrySuffix() registry suffixes}.
   * The list of public suffixes additionally contains privately owned domain names under which
   * Internet users can register subdomains. An example of a public suffix that is not a registry
   * suffix is {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i>
   * registry suffixes, since domain name registries collectively control all internet domain names.
   *
   * <p>For considerations on whether the public suffix or registry suffix designation is more
   * suitable for your application, see <a
   * href=""https://github.com/google/guava/wiki/InternetDomainNameExplained"">this article</a>.
   *
   * @return {@code true} if this domain name appears exactly on the public suffix list
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,hasPublicSuffix,com.google.common.net.InternetDomainName:hasPublicSuffix(),398,400,"/**
 * Checks if the domain has a public suffix.
 * @return true if public suffix exists, false otherwise
 */","* Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},
   * including if it is a public suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code
   * google.invalid}. This is the recommended method for determining whether a domain is potentially
   * an addressable host.
   *
   * <p>Note that this method is equivalent to {@link #hasRegistrySuffix()} because all registry
   * suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes.
   *
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isUnderPublicSuffix,com.google.common.net.InternetDomainName:isUnderPublicSuffix(),424,426,"/**
 * Checks if the domain is under a public suffix.
 * @return true if under a public suffix, false otherwise
 */","* Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},
   * while not being a public suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code myblog.blogspot.com}, but not for {@code com},
   * {@code co.uk}, {@code google.invalid}, or {@code blogspot.com}.
   *
   * <p>This method can be used to determine whether it will probably be possible to set cookies on
   * the domain, though even that depends on individual browsers' implementations of cookie
   * controls. See <a href=""http://www.ietf.org/rfc/rfc2109.txt"">RFC 2109</a> for details.
   *
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isTopPrivateDomain,com.google.common.net.InternetDomainName:isTopPrivateDomain(),440,442,"/**
 * Checks if the domain is at the top level.
 * @return true if the domain is top-level, false otherwise
 */","* Indicates whether this domain name is composed of exactly one subdomain component followed by a
   * {@linkplain #isPublicSuffix() public suffix}. For example, returns {@code true} for {@code
   * google.com} {@code foo.co.uk}, and {@code myblog.blogspot.com}, but not for {@code
   * www.google.com}, {@code co.uk}, or {@code blogspot.com}.
   *
   * <p>This method can be used to determine whether a domain is probably the highest level for
   * which cookies may be set, though even that depends on individual browsers' implementations of
   * cookie controls. See <a href=""http://www.ietf.org/rfc/rfc2109.txt"">RFC 2109</a> for details.
   *
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isRegistrySuffix,com.google.common.net.InternetDomainName:isRegistrySuffix(),491,493,"/**
 * Checks if the registry suffix index is at the start.
 * @return true if index is 0, false otherwise
 */","* Indicates whether this domain name represents a <i>registry suffix</i>, as defined by a subset
   * of the Mozilla Foundation's <a href=""http://publicsuffix.org/"">Public Suffix List</a> (PSL). A
   * registry suffix is one under which Internet users can directly register names via a domain name
   * registrar, and have such registrations lawfully protected by internet-governing bodies such as
   * ICANN. Examples of registry suffixes include {@code com}, {@code co.uk}, and {@code
   * pvt.k12.wy.us}. Examples of domain names that are <i>not</i> registry suffixes include {@code
   * google.com} and {@code foo.co.uk}.
   *
   * <p>Registry suffixes are a proper subset of {@linkplain #isPublicSuffix() public suffixes}. The
   * list of public suffixes additionally contains privately owned domain names under which Internet
   * users can register subdomains. An example of a public suffix that is not a registry suffix is
   * {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i> registry
   * suffixes, since domain name registries collectively control all internet domain names.
   *
   * <p>For considerations on whether the public suffix or registry suffix designation is more
   * suitable for your application, see <a
   * href=""https://github.com/google/guava/wiki/InternetDomainNameExplained"">this article</a>.
   *
   * @return {@code true} if this domain name appears exactly on the public suffix list as part of
   *     the registry suffix section (labelled ""ICANN"").
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,hasRegistrySuffix,com.google.common.net.InternetDomainName:hasRegistrySuffix(),506,508,"/**
 * Checks if the string contains a registry suffix.
 * @return true if registry suffix is present, false otherwise
 */","* Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix},
   * including if it is a registry suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code
   * google.invalid}.
   *
   * <p>Note that this method is equivalent to {@link #hasPublicSuffix()} because all registry
   * suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes.
   *
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isUnderRegistrySuffix,com.google.common.net.InternetDomainName:isUnderRegistrySuffix(),528,530,"/**
 * Checks if the current path has a registry suffix.
 * @return true if there's a registry suffix, false otherwise
 */","* Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix},
   * while not being a registry suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code blogspot.com}, but not for {@code com}, {@code
   * co.uk}, or {@code google.invalid}.
   *
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isTopDomainUnderRegistrySuffix,com.google.common.net.InternetDomainName:isTopDomainUnderRegistrySuffix(),543,545,"/**
 * Checks if the top-level domain is under the registry suffix.
 * @return true if the top-level domain is directly under the registry suffix, false otherwise
 */","* Indicates whether this domain name is composed of exactly one subdomain component followed by a
   * {@linkplain #isRegistrySuffix() registry suffix}. For example, returns {@code true} for {@code
   * google.com}, {@code foo.co.uk}, and {@code blogspot.com}, but not for {@code www.google.com},
   * {@code co.uk}, or {@code myblog.blogspot.com}.
   *
   * <p><b>Warning:</b> This method should not be used to determine the probable highest level
   * parent domain for which cookies may be set. Use {@link #topPrivateDomain()} for that purpose.
   *
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,"com.google.common.collect.ImmutableSortedMap:copyOf(java.lang.Iterable,java.util.Comparator)",419,423,"/**
* Creates an immutable sorted map from entries.
* @param entries iterable of key-value pairs
* @param comparator comparator for sorting keys
* @return ImmutableSortedMap with sorted entries
*/","* Returns an immutable map containing the given entries, with keys sorted by the provided
   * comparator.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to the comparator
   * @since 19.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOfSorted,com.google.common.collect.ImmutableSortedMap:copyOfSorted(java.util.SortedMap),435,453,"/**
* Creates an immutable sorted map from a sorted map.
* @param map the source sorted map
* @return ImmutableSortedMap containing entries from the input map
*/","* Returns an immutable map containing the same entries as the provided sorted map, with the same
   * ordering.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code map} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOfInternal,"com.google.common.collect.ImmutableSortedMap:copyOfInternal(java.util.Map,java.util.Comparator)",455,475,"/**
* Creates an immutable sorted map from the given map and comparator.
* @param map source map to copy entries from
* @param comparator comparator for key ordering
* @return ImmutableSortedMap with entries from map and specified comparator
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,valueSet,"com.google.common.collect.ImmutableSetMultimap:valueSet(java.util.Comparator,java.util.Collection)",641,646,"/**
* Creates an immutable set from the given collection.
* @param valueComparator optional comparator for sorting values
* @param values collection of elements to include in the set
* @return ImmutableSet or ImmutableSortedSet based on comparator presence
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,create,com.google.common.collect.Sets$CartesianSet:create(java.util.List),1543,1580,"/**
* Creates a set of lists representing the Cartesian product.
* @param sets list of sets to compute Cartesian product
* @return Set containing all possible combinations of elements from input sets
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,immutableCopy,com.google.common.collect.Sets$SetView:immutableCopy(),602,613,"/**
* Returns an immutable copy of the set.
* @return ImmutableSet containing all non-null elements
*/","* Returns an immutable copy of the current contents of this set view. Does not support null
     * elements.
     *
     * <p><b>Warning:</b> this may have unexpected results if a backing set of this view uses a
     * nonstandard notion of equivalence, for example if it is a {@link TreeSet} using a comparator
     * that is inconsistent with {@link Object#equals(Object)}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,rawTypes,com.google.common.reflect.TypeToken$ClassSet:rawTypes(),786,793,"/**
* Collects raw types for generic class.
* @return Set of raw type classes
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,rawTypes,com.google.common.reflect.TypeToken$TypeSet:rawTypes(),703,709,"/**
 * Returns raw types of the generic type.
 * @return Set of raw types
 */","Returns the raw types of the types in this set, in the same order.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeAt,com.google.common.collect.MinMaxPriorityQueue:removeAt(int),407,442,"/**
* Removes and returns the element at the specified index.
* Adjusts heap structure accordingly.
* @param index position of the element to remove
* @return MoveDesc describing the change or null if no move occurred
*/","* Removes the element at position {@code index}.
   *
   * <p>Normally this method leaves the elements at up to {@code index - 1}, inclusive, untouched.
   * Under these circumstances, it returns {@code null}.
   *
   * <p>Occasionally, in order to maintain the heap invariant, it must swap a later element of the
   * list with one before {@code index}. Under these circumstances it returns a pair of elements as
   * a {@link MoveDesc}. The first one is the element that was previously at the end of the heap and
   * is now at some position before {@code index}. The second element is the one that was swapped
   * down to replace the element at {@code index}. This fact is used by iterator.remove so as to
   * visit elements during a traversal once and only once.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,remove,"com.google.common.collect.TreeMultiset$AvlNode:remove(java.util.Comparator,java.lang.Object,int,int[])",721,771,"/**
 * Removes elements from the AVL tree.
 * @param comparator comparator for element comparison
 * @param e element to remove
 * @param count number of occurrences to remove
 * @param result array to store removal count
 * @return updated AVL node or null if removed
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset$AvlNode:setCount(java.util.Comparator,java.lang.Object,int,int[])",773,820,"/**
 * Updates the count of an element in the AVL tree.
 * @param comparator comparator for element comparison
 * @param e element to update
 * @param count new count for the element
 * @param result array to store previous count
 * @return updated AVL node or null if deleted
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset$AvlNode:setCount(java.util.Comparator,java.lang.Object,int,int,int[])",822,883,"/**
 * Updates the count of an element in the AVL tree.
 * @param comparator comparator for element comparison
 * @param e element to update
 * @param expectedCount current expected count of the element
 * @param newCount new count to set for the element
 * @param result array to store the old count
 * @return updated AVL node or null if deleted
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,sqrt,"com.google.common.math.BigIntegerMath:sqrt(java.math.BigInteger,java.math.RoundingMode)",218,251,"/**
* Computes the integer square root of a BigInteger with rounding mode.
* @param x non-negative BigInteger to find the square root of
* @param mode RoundingMode for rounding the result
* @return BigInteger representing the rounded square root
*/","* Returns the square root of {@code x}, rounded with the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x < 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code
   *     sqrt(x)} is not an integer",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.util.Iterator),233,244,"/**
* Creates an immutable set from an iterator.
* @param elements the source iterator of elements
* @return an ImmutableSet containing all elements from the iterator
*/","* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order
   * each appears first in the source iterator.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanJarFile,"com.google.common.reflect.ClassPath$LocationInfo:scanJarFile(java.util.jar.JarFile,com.google.common.collect.ImmutableSet$Builder)",492,501,"/**
 * Scans a JAR file for non-directory entries and adds them to the resource info builder.
 * @param file the JarFile to scan
 * @param builder ImmutableSet.Builder to accumulate ResourceInfo objects
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanDirectory,"com.google.common.reflect.ClassPath$LocationInfo:scanDirectory(java.io.File,java.lang.String,java.util.Set,com.google.common.collect.ImmutableSet$Builder)",521,548,"/**
* Recursively scans a directory for resources.
* @param directory the directory to scan
* @param packagePrefix prefix for resource names
* @param currentPath set of visited directories to avoid cycles
* @param builder builds a collection of ResourceInfo objects
* @throws IOException if an I/O error occurs
*/","* Recursively scan the given directory, adding resources for each file encountered. Symlinks
     * which have already been traversed in the current tree path will be skipped to eliminate
     * cycles; otherwise symlinks are traversed.
     *
     * @param directory the root of the directory to scan
     * @param packagePrefix resource path prefix inside {@code classloader} for any files found
     *     under {@code directory}
     * @param currentPath canonical files already visited in the current directory tree path, for
     *     cycle elimination",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getClassPathFromManifest,"com.google.common.reflect.ClassPath:getClassPathFromManifest(java.io.File,java.util.jar.Manifest)",577,601,"/**
* Retrieves classpath files from a JAR's manifest.
* @param jarFile the JAR file to inspect
* @param manifest optional manifest, if null returns empty set
* @return immutable set of File objects representing classpath entries
*/","* Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according
   * to <a
   * href=""http://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#Main_Attributes"">JAR
   * File Specification</a>. If {@code manifest} is null, it means the jar file has no manifest, and
   * an empty set will be returned.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getRawType,com.google.common.reflect.TypeToken:getRawType(),193,199,"/**
* Retrieves the raw type of a generic class.
* @return The raw superclass type of the generic type parameter T
*/","* Returns the raw type of {@code T}. Formally speaking, if {@code T} is returned by {@link
   * java.lang.reflect.Method#getGenericReturnType}, the raw type is what's returned by {@link
   * java.lang.reflect.Method#getReturnType} of the same method object. Specifically:
   *
   * <ul>
   *   <li>If {@code T} is a {@code Class} itself, {@code T} itself is returned.
   *   <li>If {@code T} is a {@link ParameterizedType}, the raw type of the parameterized type is
   *       returned.
   *   <li>If {@code T} is a {@link GenericArrayType}, the returned type is the corresponding array
   *       class. For example: {@code List<Integer>[] => List[]}.
   *   <li>If {@code T} is a type variable or a wildcard type, the raw type of the first upper bound
   *       is returned. For example: {@code <X extends Foo> => Foo}.
   * </ul>",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,someRawTypeIsSubclassOf,com.google.common.reflect.TypeToken:someRawTypeIsSubclassOf(java.lang.Class),885,892,"/**
* Checks if any raw type is a subclass of the given superclass.
* @param superclass the class to check against
* @return true if any raw type is a subclass, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,greatestOf,"com.google.common.collect.Ordering:greatestOf(java.lang.Iterable,int)",820,824,"/**
* Retrieves the k greatest elements from an iterable.
* @param iterable source of elements to compare
* @param k number of top elements to retrieve
* @return list containing the k greatest elements
*/","* Returns the {@code k} greatest elements of the given iterable according to this ordering, in
   * order from greatest to least. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.greatest(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in
   *     <i>descending order</i>
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 8.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,com.google.common.util.concurrent.ServiceManager:awaitStopped(java.time.Duration),366,368,"/**
 * Waits for the service to stop within the specified timeout.
 * @param timeout maximum time to wait
 * @throws TimeoutException if the service does not stop within the timeout
 */","* Waits for the all the services to reach a terminal state for no more than the given time. After
   * this method returns all services will either be {@linkplain Service.State#TERMINATED
   * terminated} or {@linkplain Service.State#FAILED failed}.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if not all of the services have stopped within the deadline
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor),127,131,"/**
* Wraps ThreadPoolExecutor with exiting behavior.
* @param executor existing ThreadPoolExecutor instance
* @return ExecutorService with enhanced shutdown capabilities
*/","* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application
   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their
   * completion.
   *
   * <p>This method waits 120 seconds before continuing with JVM termination, even if the executor
   * has not finished its work.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,java.time.Duration)",85,91,"/**
* Wraps an ExecutorService with a termination timeout.
* @param executor the ThreadPoolExecutor to wrap
* @param terminationTimeout maximum time to wait for tasks to complete
* @return ExecutorService that exits after timeout
*/","* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application
   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their
   * completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @return an unmodifiable version of the input which will not hang the JVM
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor),189,194,"/**
* Wraps a ScheduledThreadPoolExecutor to create an exiting scheduled executor service.
* @param executor the ScheduledThreadPoolExecutor to wrap
* @return ScheduledExecutorService with enhanced shutdown behavior
*/","* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when
   * the application is complete. It does so by using daemon threads and adding a shutdown hook to
   * wait for their completion.
   *
   * <p>This method waits 120 seconds before continuing with JVM termination, even if the executor
   * has not finished its work.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,java.time.Duration)",146,152,"/**
* Wraps a ScheduledThreadPoolExecutor with an exiting service.
* @param executor the executor to wrap
* @param terminationTimeout maximum time to wait for termination
* @return ScheduledExecutorService that exits on shutdown
*/","* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when
   * the application is complete. It does so by using daemon threads and adding a shutdown hook to
   * wait for their completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @return an unmodifiable version of the input which will not hang the JVM
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimKey,com.google.common.cache.LocalCache:reclaimKey(com.google.common.cache.ReferenceEntry),1737,1740,"/**
 * Reclaims a key from the corresponding segment.
 * @param entry the reference entry containing the key to be reclaimed
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimValue,com.google.common.cache.LocalCache:reclaimValue(com.google.common.cache.LocalCache$ValueReference),1731,1735,"/**
 * Reclaims the value associated with a given reference.
 * @param valueReference reference to the value to be reclaimed
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,expireEntries,com.google.common.cache.LocalCache$Segment:expireEntries(long),2606,2621,"/**
* Removes expired entries from write and access queues.
* @param now current timestamp in milliseconds
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,evictEntries,com.google.common.cache.LocalCache$Segment:evictEntries(com.google.common.cache.ReferenceEntry),2644,2666,"/**
* Evicts entries to maintain segment weight limit.
* @param newest the most recently added entry
*/","* Performs eviction if the segment is over capacity. Avoids flushing the entire cache if the
     * newest entry exceeds the maximum weight all on its own.
     *
     * @param newest the most recently added entry",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,com.google.common.util.concurrent.ServiceManager:awaitHealthy(java.time.Duration),314,316,"/**
* Waits until the system is healthy within a specified timeout.
* @param timeout maximum time to wait
* @throws TimeoutException if health check times out
*/","* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more
   * than the given time. The manager will become healthy after all the component services have
   * reached the {@linkplain State#RUNNING running} state.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if not all of the services have finished starting within the deadline
   * @throws IllegalStateException if the service manager reaches a state from which it cannot
   *     become {@linkplain #isHealthy() healthy}.
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startupDurations,com.google.common.util.concurrent.ServiceManager:startupDurations(),431,435,"/**
 * Converts service startup times to durations.
 * @return Immutable map of services to their startup durations
 */","* Returns the service load times. This value will only return startup times for services that
   * have finished starting.
   *
   * @return Map of services and their corresponding startup time, the map entries will be ordered
   *     by startup time.
   * @since 31.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getAnnotationsByType,com.google.common.reflect.Parameter:getAnnotationsByType(java.lang.Class),96,99,"/**
 * Retrieves annotations of a specific type.
 * @param annotationType the Class object corresponding to the annotation type
 * @return an array of annotations of the specified type, or an empty array if none found
 */",* @since 18.0,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantLock,com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantLock(java.lang.String),236,238,"/**
 * Creates a new reentrant lock with the specified name.
 * @param lockName name of the lock
 * @return ReentrantLock instance
 */","Equivalent to {@code newReentrantLock(lockName, false)}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantReadWriteLock,com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantReadWriteLock(java.lang.String),251,253,"/**
* Creates a new ReentrantReadWriteLock with the specified name.
* @param lockName identifier for the lock
* @return ReentrantReadWriteLock instance
*/","Equivalent to {@code newReentrantReadWriteLock(lockName, false)}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,getOrCreateNodes,com.google.common.util.concurrent.CycleDetectingLockFactory:getOrCreateNodes(java.lang.Class),283,293,"/**
* Retrieves or creates a map of enum values to LockGraphNode.
* @param clazz Enum class type
* @return Map of enum values to corresponding LockGraphNode
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,putEdge,com.google.common.graph.StandardMutableGraph:putEdge(com.google.common.graph.EndpointPair),54,58,"/**
 * Adds an edge between two nodes.
 * Validates endpoints before adding.
 * @param endpoints pair of nodes to connect
 * @return true if edge is added, false otherwise
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,validateSyntax,com.google.common.net.InternetDomainName:validateSyntax(java.util.List),270,287,"/**
 * Validates syntax of command parts.
 * @param parts list of command components
 * @return true if all parts are syntactically correct, false otherwise
 */","* Validation method used by {@code from} to ensure that the domain name is syntactically valid
   * according to RFC 1035.
   *
   * @return Is the domain name syntactically valid?",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,register,com.google.common.eventbus.SubscriberRegistry:register(java.lang.Object),74,91,"/**
* Registers a listener for specific events.
* @param listener object with methods annotated as subscribers
*/",Registers all subscriber methods on the given listener object.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,unregister,com.google.common.eventbus.SubscriberRegistry:unregister(java.lang.Object),94,114,"/**
 * Unregisters listener from all subscribed events.
 * @param listener object whose subscriptions are to be removed
 */",Unregisters all subscribers on the given listener object.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,immutable,com.google.common.graph.NetworkBuilder:immutable(),119,122,"/**
* Returns an ImmutableNetwork builder.
* @param <N1> node type extending N
* @param <E1> edge type extending E
* @return ImmutableNetwork.Builder instance
*/","* Returns an {@link ImmutableNetwork.Builder} with the properties of this {@link NetworkBuilder}.
   *
   * <p>The returned builder can be used for populating an {@link ImmutableNetwork}.
   *
   * @since 28.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inducedSubgraph,"com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.Graph,java.lang.Iterable)",519,535,"/**
* Creates an induced subgraph from the given graph using specified nodes.
* @param graph original graph to extract subgraph from
* @param nodes iterable of nodes to include in the subgraph
* @return MutableGraph containing only the specified nodes and their edges
*/","* Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph
   * that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges}
   * from {@code graph} for which both nodes are contained by {@code nodes}.
   *
   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,copyOf,com.google.common.graph.Graphs:copyOf(com.google.common.graph.Graph),597,606,"/**
* Creates a mutable copy of the given graph.
* @param graph original graph to be copied
* @return new MutableGraph instance with same nodes and edges
*/",Creates a mutable copy of {@code graph} with the same nodes and edges.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,<init>,com.google.common.graph.ImmutableGraph$Builder:<init>(com.google.common.graph.GraphBuilder),136,140,"/**
* Initializes the mutable graph from a given graph builder.
* @param graphBuilder source graph builder
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,immutable,com.google.common.graph.ValueGraphBuilder:immutable(),119,122,"/**
 * Creates an immutable value graph builder.
 * @param <N1> node type extending N
 * @param <V1> value type extending V
 * @return ImmutableValueGraph.Builder instance
 */","* Returns an {@link ImmutableValueGraph.Builder} with the properties of this {@link
   * ValueGraphBuilder}.
   *
   * <p>The returned builder can be used for populating an {@link ImmutableValueGraph}.
   *
   * <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link
   * ElementOrder#stable()}, regardless of the value that was set in this builder.
   *
   * @since 28.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate)",2837,2842,"/**
* Filters a bi-map based on an additional entry predicate.
* @param map the original filtered bi-map
* @param entryPredicate the predicate to apply for filtering entries
* @return a new filtered bi-map with combined predicates
*/","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * map.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(java.util.NavigableMap,com.google.common.base.Predicate)",2753,2761,"/**
 * Filters entries in a navigable map based on a predicate.
 * @param unfiltered the original navigable map
 * @param entryPredicate predicate to filter entries
 * @return a new navigable map with filtered entries
 */","* Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate.
   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code
   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the
   * map's entries have a {@link Entry#setValue} method that throws an {@link
   * IllegalArgumentException} when the existing key and the provided value don't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings that satisfy the filter will be removed from the underlying map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:headSet(java.lang.Object),3158,3161,"/**
* Returns a view of the portion of this set whose elements are strictly less than toElement.
* @param toElement upper bound element, not included in the returned set
* @return SortedSet containing elements less than toElement
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:subSet(java.lang.Object,java.lang.Object)",3152,3156,"/**
* Returns a subset of keys within the specified range.
* @param fromElement the lower bound (inclusive)
* @param toElement the upper bound (exclusive)
* @return SortedSet of keys between fromElement and toElement
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:tailSet(java.lang.Object),3163,3166,"/**
* Returns a subset of keys greater than or equal to the specified element.
* @param fromElement lower bound for returned set (inclusive)
* @return SortedSet containing keys >= fromElement
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(java.util.SortedMap,com.google.common.base.Predicate)",2718,2725,"/**
 * Filters entries in a sorted map based on a predicate.
 * @param unfiltered the original sorted map
 * @param entryPredicate predicate to test each entry
 * @return a filtered sorted map with only matching entries
 */","* Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate.
   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code
   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the
   * map's entries have a {@link Entry#setValue} method that throws an {@link
   * IllegalArgumentException} when the existing key and the provided value don't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings that satisfy the filter will be removed from the underlying map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 11.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createAsMap,com.google.common.collect.FilteredKeyMultimap:createAsMap(),217,220,"/**
 * Creates a map view filtered by keys.
 * @return A map with entries that match the key predicate
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(java.util.Map,com.google.common.base.Predicate)",2558,2561,"/**
* Filters map entries by value predicate.
* @param unfiltered input map to filter
* @param valuePredicate predicate for filtering values
* @return new map with filtered entries
*/","* Returns a map containing the mappings in {@code unfiltered} whose values satisfy a predicate.
   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},
   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose values satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnecting,com.google.common.graph.AbstractNetwork:edgeConnecting(com.google.common.graph.EndpointPair),199,203,"/**
 * Finds an edge connecting the given endpoints.
 * @param endpoints pair of nodes defining the connection
 * @return Optional containing the edge if found, otherwise empty
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,headSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:headSetImpl(java.lang.Comparable,boolean)",642,645,"/**
* Returns elements less than or equal to a specified element.
* @param toElement upper bound element
* @param inclusive true if the upper bound is inclusive
* @return ImmutableSortedSet of elements up to toElement
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)",647,657,"/**
* Returns a subset of elements within specified bounds.
* @param fromElement lower bound element
* @param fromInclusive true if lower bound is inclusive
* @param toElement upper bound element
* @param toInclusive true if upper bound is inclusive
* @return ImmutableSortedSet containing elements within the range
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,tailSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:tailSetImpl(java.lang.Comparable,boolean)",659,662,"/**
* Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive) fromElement.
* @param fromElement lower bound element
* @param inclusive true if the lower bound is inclusive
* @return ImmutableSortedSet containing elements >= fromElement
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,headSetImpl,"com.google.common.collect.RegularContiguousSet:headSetImpl(java.lang.Object,boolean)",53,56,"/**
* Returns elements up to specified element.
* @param toElement upper bound element
* @param inclusive true if the upper bound is inclusive
* @return ContiguousSet of elements up to toElement
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,subSetImpl,"com.google.common.collect.RegularContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",58,70,"/**
* Creates a sub-set within the current domain.
* @param fromElement lower bound of the range
* @param fromInclusive true if lower bound is inclusive
* @param toElement upper bound of the range
* @param toInclusive true if upper bound is inclusive
* @return ContiguousSet within specified bounds or an empty set if invalid
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,tailSetImpl,"com.google.common.collect.RegularContiguousSet:tailSetImpl(java.lang.Object,boolean)",72,75,"/**
 * Returns a view of the portion of this set whose elements are greater than or equal to the specified element.
 * @param fromElement the lower bound (inclusive if inclusive is true)
 * @param inclusive whether the lower bound should be included in the returned set
 * @return a ContiguousSet containing all elements greater than or equal to fromElement
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,containsKey,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:containsKey(java.lang.Object),645,648,"/**
 * Checks if the map contains a mapping for the specified key.
 * @param key key whose presence in this map is to be tested
 * @return true if this map contains a mapping for the specified key, false otherwise
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1:remove(java.lang.Object),692,703,"/**
* Removes entry by key.
* @param key range key to remove
* @return removed value or null if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,clear,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:clear(),705,708,"/**
 * Clears all entries from the map.
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,put,"com.google.common.collect.TreeRangeMap$SubRangeMap:put(com.google.common.collect.Range,java.lang.Object)",528,533,"/**
 * Adds an entry to the map for the specified range and value.
 * @param range key range to be added
 * @param value associated value for the range
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putCoalescing,"com.google.common.collect.TreeRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)",146,156,"/**
 * Adds a range with a value, merging it with overlapping ranges.
 * @param range the range to add
 * @param value the value associated with the range
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putAll,com.google.common.collect.TreeRangeMap:putAll(com.google.common.collect.RangeMap),183,188,"/**
 * Adds all entries from the specified RangeMap to this map.
 * @param rangeMap the RangeMap to add entries from
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addEdge,"com.google.common.graph.StandardMutableNetwork:addEdge(com.google.common.graph.EndpointPair,java.lang.Object)",120,125,"/**
 * Adds an edge between two nodes.
 * @param endpoints pair of nodes defining the edge
 * @param edge the edge to be added
 * @return true if edge was added, false otherwise
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,toImmutableMap,"com.google.common.collect.ImmutableMap:toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",108,114,"/**
* Converts a stream to an ImmutableMap.
* @param keyFunction function extracting map keys
* @param valueFunction function extracting map values
* @param mergeFunction resolves conflicts between duplicate keys
* @return Collector for ImmutableMap
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements.
   *
   * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}), the
   * values are merged using the specified merging function. If the merging function returns {@code
   * null}, then the collector removes the value that has been computed for the key thus far (though
   * future occurrences of the key would reinsert it).
   *
   * <p>Entries will appear in the encounter order of the first occurrence of the key.
   *
   * @since 21.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,connectionsOf,"com.google.common.graph.ImmutableGraph:connectionsOf(com.google.common.graph.Graph,java.lang.Object)",96,104,"/**
 * Retrieves connections of a node in a graph.
 * @param graph the graph to query
 * @param node the node whose connections are retrieved
 * @return GraphConnections object representing the node's connections
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,connectionsOf,"com.google.common.graph.ImmutableValueGraph:connectionsOf(com.google.common.graph.ValueGraph,java.lang.Object)",96,106,"/**
 * Retrieves connections for a given node in the graph.
 * @param graph the ValueGraph instance
 * @param node the node to find connections for
 * @return GraphConnections object representing the node's connections
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,connectionsOf,"com.google.common.graph.ImmutableNetwork:connectionsOf(com.google.common.graph.Network,java.lang.Object)",104,119,"/**
 * Returns connections of a node in the given network.
 * @param <N> type of nodes
 * @param <E> type of edges
 * @param network the network to query
 * @param node the node to find connections for
 * @return NetworkConnections object representing the node's connections
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,descendingIterator,com.google.common.collect.DescendingImmutableSortedSet:descendingIterator(),74,78,"/**
* Returns an iterator over elements in reverse order.
* @return Iterator starting from the last element
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,first,com.google.common.collect.ImmutableSortedSet:first(),752,755,"/**
 * Returns the first element of the collection.
 * @return the first element
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,toImmutableRangeMap,"com.google.common.collect.ImmutableRangeMap:toImmutableRangeMap(java.util.function.Function,java.util.function.Function)",62,67,"/**
 * Converts a stream of objects to an ImmutableRangeMap.
 * @param keyFunction function to extract the range key from each object
 * @param valueFunction function to extract the value from each object
 * @return ImmutableRangeMap with ranges as keys and corresponding values
 */","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableRangeMap}. As in {@link Builder}, overlapping ranges are not permitted.
   *
   * @since 23.1",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,readResolve,com.google.common.collect.ImmutableRangeMap$SerializedForm:readResolve(),435,441,"/**
 * Resolves deserialized object to its canonical form.
 * @return Canonical instance based on map content
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,com.google.common.collect.ImmutableSortedMultiset:copyOf(java.lang.Iterable),211,217,"/**
* Creates an immutable sorted multiset from iterable elements using natural ordering.
* @param elements the iterable source of elements
* @return ImmutableSortedMultiset with sorted elements
*/","* Returns an immutable sorted multiset containing the given elements sorted by their natural
   * ordering. To create a copy of a {@code SortedMultiset} that preserves the comparator, call
   * {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.
   *
   * <p>Note that if {@code s} is a {@code Multiset<String>}, then {@code
   * ImmutableSortedMultiset.copyOf(s)} returns an {@code ImmutableSortedMultiset<String>}
   * containing each of the strings in {@code s}, while {@code ImmutableSortedMultiset.of(s)}
   * returns an {@code ImmutableSortedMultiset<Multiset<String>>} containing one element (the given
   * multiset itself).
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,build,com.google.common.collect.ImmutableSortedMultiset$Builder:build(),560,563,"/**
* Builds an immutable sorted multiset from contents.
* @return ImmutableSortedMultiset containing elements from contents
*/","* Returns a newly-created {@code ImmutableSortedMultiset} based on the contents of the {@code
     * Builder}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getClassPathEntries,com.google.common.reflect.ClassPath:getClassPathEntries(java.lang.ClassLoader),603,620,"/**
 * Retrieves classpath entries for a given ClassLoader.
 * @param classloader the ClassLoader to inspect
 * @return an ImmutableMap of File to ClassLoader representing classpath entries
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveWildcardType,com.google.common.reflect.TypeResolver:resolveWildcardType(java.lang.reflect.WildcardType),245,249,"/**
* Resolves wildcard type by processing its bounds.
* @param type WildcardType to be resolved
* @return Resolved WildcardType with processed bounds
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,canonicalizeWildcardType,"com.google.common.reflect.TypeToken:canonicalizeWildcardType(java.lang.reflect.TypeVariable,java.lang.reflect.WildcardType)",1031,1041,"/**
* Canonicalizes wildcard type by filtering bounds.
* @param declaration type variable with declared bounds
* @param type wildcard type to canonicalize
* @return canonicalized WildcardType
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,subtypeOf,com.google.common.reflect.Types:subtypeOf(java.lang.reflect.Type),147,150,"/**
* Creates a wildcard type with an upper bound.
* @param upperBound the upper bound of the wildcard
* @return a WildcardType instance representing <? extends upperBound>
*/",Returns a new {@link WildcardType} with {@code upperBound}.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,supertypeOf,com.google.common.reflect.Types:supertypeOf(java.lang.reflect.Type),153,156,"/**
* Creates a wildcard type with a specified lower bound.
* @param lowerBound the lower bound of the wildcard
* @return WildcardType representing '? super lowerBound'
*/",Returns a new {@link WildcardType} with {@code lowerBound}.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,orderedPermutations,"com.google.common.collect.Collections2:orderedPermutations(java.lang.Iterable,java.util.Comparator)",429,432,"/**
* Generates ordered permutations of elements.
* @param elements iterable collection of elements to permute
* @param comparator defines the order of elements
* @return collection of lists representing ordered permutations
*/","* Returns a {@link Collection} of all the permutations of the specified {@link Iterable} using
   * the specified {@link Comparator} for establishing the lexicographical ordering.
   *
   * <p>Examples:
   *
   * {@snippet :
   * for (List<String> perm : orderedPermutations(asList(""b"", ""c"", ""a""))) {
   *   println(perm);
   * }
   * // -> [""a"", ""b"", ""c""]
   * // -> [""a"", ""c"", ""b""]
   * // -> [""b"", ""a"", ""c""]
   * // -> [""b"", ""c"", ""a""]
   * // -> [""c"", ""a"", ""b""]
   * // -> [""c"", ""b"", ""a""]
   *
   * for (List<Integer> perm : orderedPermutations(asList(1, 2, 2, 1))) {
   *   println(perm);
   * }
   * // -> [1, 1, 2, 2]
   * // -> [1, 2, 1, 2]
   * // -> [1, 2, 2, 1]
   * // -> [2, 1, 1, 2]
   * // -> [2, 1, 2, 1]
   * // -> [2, 2, 1, 1]
   * }
   *
   * <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations
   * Generation, described in Knuth's ""The Art of Computer Programming"", Volume 4, Chapter 7,
   * Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the
   * first permutation will be in ascending order, and the last will be in descending order.
   *
   * <p>Elements that compare equal are considered equal and no new permutations are created by
   * swapping them.
   *
   * <p>An empty iterable has only one permutation, which is an empty list.
   *
   * @param elements the original iterable whose elements have to be permuted.
   * @param comparator a comparator for the iterable's elements.
   * @return an immutable {@link Collection} containing all the different permutations of the
   *     original iterable.
   * @throws NullPointerException If the specified iterable is null, has any null elements, or if
   *     the specified comparator is null.
   * @since 12.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toSortedList,com.google.common.collect.FluentIterable:toSortedList(java.util.Comparator),636,639,"/**
* Converts delegate collection to a sorted immutable list.
* @param comparator sorting criteria for elements
* @return ImmutableList of sorted elements
*/","* Returns an {@code ImmutableList} containing all of the elements from this {@code
   * FluentIterable} in the order specified by {@code comparator}. To produce an {@code
   * ImmutableList} sorted by its natural ordering, use {@code toSortedList(Ordering.natural())}.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code
   * stream.sorted(comparator).collect()}.
   *
   * @param comparator the function by which to sort list elements
   * @throws NullPointerException if any element of this iterable is {@code null}
   * @since 14.0 (since 13.0 as {@code toSortedImmutableList()}).",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyFromEntries,com.google.common.collect.ImmutableMultiset:copyFromEntries(java.util.Collection),217,224,"/**
* Creates an immutable multiset from a collection of entries.
* @param entries collection of entries with elements to be added
* @return ImmutableMultiset containing the elements from entries
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableAsList.java,readResolve,com.google.common.collect.ImmutableAsList$SerializedForm:readResolve(),71,73,"/**
 * Returns an unmodifiable list of elements.
 * @return Unmodifiable List of elements from the collection
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.util.Collection),258,265,"/**
* Creates an immutable list from the given collection.
* @param elements the collection of elements to copy
* @return an ImmutableList containing the elements
*/","* Returns an immutable list containing the given elements, in order.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>Note that if {@code list} is a {@code List<String>}, then {@code ImmutableList.copyOf(list)}
   * returns an {@code ImmutableList<String>} containing each of the strings in {@code list}, while
   * {@code ImmutableList.of(list)} returns an {@code ImmutableList<List<String>>} containing one
   * element (the given list itself).
   *
   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code elements} contains a null element",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,getValue,com.google.common.collect.SparseImmutableTable:getValue(int),125,131,"/**
 * Retrieves value by index.
 * @param index position in the cell array
 * @return value at specified index
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,asList,com.google.common.collect.ImmutableSet$CachingAsList:asList(),311,319,"/**
* Returns an immutable list of elements.
* @return ImmutableList containing all elements
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,build,com.google.common.collect.ImmutableBiMap$Builder:build(),437,440,"/**
* Builds an immutable bimap.
* @return ImmutableBiMap instance
*/","* Returns a newly-created immutable bimap. The iteration order of the returned bimap is the
     * order in which entries were inserted into the builder, unless {@link #orderEntriesByValue}
     * was called, in which case entries are sorted by value.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate keys or values. The {@code build()} method
     * will soon be deprecated.
     *
     * @throws IllegalArgumentException if duplicate keys or values were added",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,buildOrThrow,com.google.common.collect.ImmutableMap$Builder:buildOrThrow(),606,608,"/**
 * Builds an immutable map.
 * Throws an exception if any builder constraints are violated.
 * @return ImmutableMap instance
 */","* Returns a newly-created immutable map, or throws an exception if any key was added more than
     * once. The iteration order of the returned map is the order in which entries were inserted
     * into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are
     * sorted by value.
     *
     * @throws IllegalArgumentException if duplicate keys were added
     * @since 31.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,buildKeepingLast,com.google.common.collect.ImmutableMap$Builder:buildKeepingLast(),625,627,"/**
 * Builds an immutable map keeping only the last occurrence of each key.
 * @return ImmutableMap with unique keys, preferring later values
 */","* Returns a newly-created immutable map, using the last value for any key that was added more
     * than once. The iteration order of the returned map is the order in which entries were
     * inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case
     * entries are sorted by value. If a key was added more than once, it appears in iteration order
     * based on the first time it was added, again unless {@link #orderEntriesByValue} was called.
     *
     * <p>In the current implementation, all values associated with a given key are stored in the
     * {@code Builder} object, even though only one of them will be used in the built map. If there
     * can be many repeated keys, it may be more space-efficient to use a {@link
     * java.util.LinkedHashMap LinkedHashMap} and {@link ImmutableMap#copyOf(Map)} rather than
     * {@code ImmutableMap.Builder}.
     *
     * @since 31.1",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,headMap,com.google.common.collect.ImmutableSortedMap:headMap(java.lang.Object),939,942,"/**
* Returns entries with keys less than specified key.
* @param toKey upper bound (exclusive)
* @return ImmutableSortedMap containing entries up to but not including toKey
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less
   * than {@code toKey}.
   *
   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code
   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code toKey}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lowerEntry,com.google.common.collect.ImmutableSortedMap:lowerEntry(java.lang.Object),1031,1034,"/**
* Returns the greatest entry less than the specified key.
* @param key the key to search for
* @return an Entry with the greatest key less than the given key, or null if no such entry exists
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,floorEntry,com.google.common.collect.ImmutableSortedMap:floorEntry(java.lang.Object),1041,1044,"/**
* Returns the greatest entry less than or equal to the specified key.
* @param key the key to match
* @return an Entry with the greatest key less than or equal to key, or null if no such entry exists
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,subMap,"com.google.common.collect.ImmutableSortedMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",988,999,"/**
* Returns a submap from fromKey (inclusive) to toKey (inclusive).
* @param fromKey lower bound key
* @param fromInclusive true if fromKey is inclusive
* @param toKey upper bound key
* @param toInclusive true if toKey is inclusive
* @return ImmutableSortedMap containing the specified range of keys
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges
   * from {@code fromKey} to {@code toKey}, inclusive or exclusive as indicated by the boolean
   * flags.
   *
   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link
   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.
   * However, this method doesn't throw an exception in that situation, but instead keeps the
   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of
   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.
   *
   * @since 12.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,tailMap,com.google.common.collect.ImmutableSortedMap:tailMap(java.lang.Object),1010,1013,"/**
* Returns a view of the portion of this map whose keys are greater than or equal to fromKey.
* @param fromKey lower bound key (inclusive)
* @return ImmutableSortedMap containing keys >= fromKey
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are
   * greater than or equals to {@code fromKey}.
   *
   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code
   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code fromKey}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,ceilingEntry,com.google.common.collect.ImmutableSortedMap:ceilingEntry(java.lang.Object),1051,1054,"/**
 * Returns the smallest entry greater than or equal to the specified key.
 * @param key the key to search for
 * @return an Entry with the smallest key greater than or equal to the given key, or null if no such entry exists
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,higherEntry,com.google.common.collect.ImmutableSortedMap:higherEntry(java.lang.Object),1061,1064,"/**
* Returns the least entry greater than the specified key.
* @param key the reference key
* @return an entry with the least key greater than the specified key, or null if no such entry exists
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,com.google.common.collect.ImmutableSortedMap:copyOf(java.lang.Iterable),402,409,"/**
* Creates an immutable sorted map from iterable entries using natural ordering.
* @param entries iterable of key-value pairs
* @return ImmutableSortedMap with entries sorted by keys
*/","* Returns an immutable map containing the given entries, with keys sorted by their natural
   * ordering.
   *
   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually
   * comparable.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to the comparator
   * @since 19.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSortedMap,"com.google.common.collect.CollectCollectors:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",229,242,"/**
* Collects elements into an immutable sorted map.
* @param comparator key comparator
* @param keyFunction extracts keys from elements
* @param valueFunction extracts values from elements
* @param mergeFunction merges values with the same key
* @return ImmutableSortedMap containing collected entries
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,com.google.common.collect.ImmutableSortedMap:copyOf(java.util.Map),367,373,"/**
* Creates an immutable sorted map from the given map using natural ordering.
* @param map source map to be copied
* @return ImmutableSortedMap with entries sorted by natural order
*/","* Returns an immutable map containing the same entries as {@code map}, sorted by the natural
   * ordering of the keys.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the keys in {@code map} are not mutually comparable
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to their natural ordering",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,"com.google.common.collect.ImmutableSortedMap:copyOf(java.util.Map,java.util.Comparator)",386,389,"/**
* Creates an immutable sorted map from the given map and comparator.
* @param map the input map to copy entries from
* @param comparator the comparator for ordering keys
* @return an ImmutableSortedMap with entries sorted by the comparator
*/","* Returns an immutable map containing the same entries as {@code map}, with keys sorted by the
   * provided comparator.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to the comparator",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,cartesianProduct,com.google.common.collect.Sets:cartesianProduct(java.util.List),1476,1478,"/**
* Computes the Cartesian product of given sets.
* @param sets list of sets to compute the product
* @return set of lists representing the Cartesian product
*/","* Returns every possible list that can be formed by choosing one element from each of the given
   * sets in order; the ""n-ary <a href=""http://en.wikipedia.org/wiki/Cartesian_product"">Cartesian
   * product</a>"" of the sets. For example:
   *
   * {@snippet :
   * Sets.cartesianProduct(ImmutableList.of(
   *     ImmutableSet.of(1, 2),
   *     ImmutableSet.of(""A"", ""B"", ""C"")))
   * }
   *
   * <p>returns a set containing six lists:
   *
   * <ul>
   *   <li>{@code ImmutableList.of(1, ""A"")}
   *   <li>{@code ImmutableList.of(1, ""B"")}
   *   <li>{@code ImmutableList.of(1, ""C"")}
   *   <li>{@code ImmutableList.of(2, ""A"")}
   *   <li>{@code ImmutableList.of(2, ""B"")}
   *   <li>{@code ImmutableList.of(2, ""C"")}
   * </ul>
   *
   * <p>The result is guaranteed to be in the ""traditional"", lexicographical order for Cartesian
   * products that you would get from nesting for loops:
   *
   * {@snippet :
   * for (B b0 : sets.get(0)) {
   *   for (B b1 : sets.get(1)) {
   *     ...
   *     ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...);
   *     // operate on tuple
   *   }
   * }
   * }
   *
   * <p>Note that if any input set is empty, the Cartesian product will also be empty. If no sets at
   * all are provided (an empty list), the resulting Cartesian product has one element, an empty
   * list (counter-intuitive, but mathematically consistent).
   *
   * <p><i>Performance notes:</i> while the cartesian product of sets of size {@code m, n, p} is a
   * set of size {@code m x n x p}, its actual memory consumption is much smaller. When the
   * cartesian set is constructed, the input sets are merely copied. Only as the resulting set is
   * iterated are the individual lists created, and these are not retained after iteration.
   *
   * @param sets the sets to choose elements from, in the order that the elements chosen from those
   *     sets should appear in the resulting lists
   * @param <B> any common base class shared by all axes (often just {@link Object})
   * @return the Cartesian product, as an immutable set containing immutable lists
   * @throws NullPointerException if {@code sets}, any one of the {@code sets}, or any element of a
   *     provided set is null
   * @throws IllegalArgumentException if the cartesian product size exceeds the {@code int} range
   * @since 2.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeExact,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:removeExact(java.lang.Object),849,857,"/**
* Removes the first occurrence of the specified element.
* @param target the element to be removed
* @return true if the element is found and removed, false otherwise
*/","Removes only this exact instance, not others that are equals()",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeAndGet,com.google.common.collect.MinMaxPriorityQueue:removeAndGet(int),478,482,"/**
 * Removes and returns the element at the specified index.
 * @param index position of the element to remove
 * @return removed element
 */",Removes and returns the value at {@code index}.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,remove,"com.google.common.collect.TreeMultiset:remove(java.lang.Object,int)",279,301,"/**
* Removes specified number of occurrences of an element.
* @param element the element to remove
* @param occurrences number of times to remove the element
* @return actual number of elements removed
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset:setCount(java.lang.Object,int)",303,323,"/**
* Updates the count of an element in the AVL tree.
* @param element the element whose count to update
* @param count the new count value (must be non-negative)
* @return the previous count of the element
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset:setCount(java.lang.Object,int,int)",325,347,"/**
* Updates the count of a specified element in an AVL tree.
* @param element the element to update
* @param oldCount the current count of the element
* @param newCount the new count for the element
* @return true if the count was successfully updated, false otherwise
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.lang.Iterable),221,225,"/**
 * Creates an immutable set from the given iterable.
 * @param elements the iterable to copy elements from
 * @return an ImmutableSet containing the elements of the iterable
 */","* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order
   * each appears first in the source iterable. This method iterates over {@code elements} only
   * once.
   *
   * <p><b>Performance note:</b> This method will sometimes recognize that the actual copy operation
   * is unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only
   * once. This reduces the expense of habitually making defensive copies at API boundaries.
   * However, the precise conditions for skipping the copy operation are undefined.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanDirectory,"com.google.common.reflect.ClassPath$LocationInfo:scanDirectory(java.io.File,com.google.common.collect.ImmutableSet$Builder)",503,508,"/**
 * Recursively scans a directory for resources.
 * @param directory the root directory to scan
 * @param builder builds a set of ResourceInfo objects
 * @throws IOException if an I/O error occurs
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanJar,"com.google.common.reflect.ClassPath$LocationInfo:scanJar(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder)",465,490,"/**
 * Scans a JAR file for resources and adds them to the builder.
 * @param file the JAR file to scan
 * @param scannedUris set of already scanned URIs to avoid duplication
 * @param builder builds the collection of ResourceInfo objects
 * @throws IOException if an I/O error occurs during scanning
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,boundAsSuperclass,com.google.common.reflect.TypeToken:boundAsSuperclass(java.lang.reflect.Type),325,333,"/**
* Converts a type to its superclass representation.
* @param bound the type to be converted
* @return TypeToken representing the superclass or null if the type is an interface
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,boundsAsInterfaces,com.google.common.reflect.TypeToken:boundsAsInterfaces(java.lang.reflect.Type[]),364,374,"/**
* Converts type bounds to interface TypeTokens.
* @param bounds array of type bounds
* @return ImmutableList of interface TypeTokens
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,constructor,com.google.common.reflect.TypeToken:constructor(java.lang.reflect.Constructor),629,661,"/**
* Creates an Invokable for a constructor.
* @param constructor the Constructor to wrap
* @return Invokable representing the constructor with resolved types
*/","* Returns the {@link Invokable} for {@code constructor}, which must be a member of {@code T}.
   *
   * @since 14.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOf,com.google.common.reflect.TypeToken:isSubtypeOf(java.lang.reflect.Type),487,520,"/**
* Checks if the current type is a subtype of the specified supertype.
* @param supertype the type to compare against
* @return true if this type is a subtype, false otherwise
*/","* Returns true if this type is a subtype of the given {@code type}. ""Subtype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,method,com.google.common.reflect.TypeToken:method(java.lang.reflect.Method),590,622,"/**
* Creates an Invokable for a given method.
* @param method the Method to be wrapped
* @return Invokable object representing the method
*/","* Returns the {@link Invokable} for {@code method}, which must be a member of {@code T}.
   *
   * @since 14.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainKeyReferenceQueue,com.google.common.cache.LocalCache$Segment:drainKeyReferenceQueue(),2475,2487,"/**
* Drains the key reference queue and reclaims keys.
* Stops after processing a maximum number of entries.
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainValueReferenceQueue,com.google.common.cache.LocalCache$Segment:drainValueReferenceQueue(),2489,2501,"/**
* Drains and processes up to DRAIN_MAX entries from the value reference queue.
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,tryExpireEntries,com.google.common.cache.LocalCache$Segment:tryExpireEntries(long),2595,2604,"/**
 * Attempts to lock and expire entries older than the given timestamp.
 * @param now current timestamp
 */",Cleanup expired entries when the lock is available.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newInstanceWithExplicitOrdering,"com.google.common.util.concurrent.CycleDetectingLockFactory:newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)",272,281,"/**
* Creates a new instance with explicit ordering for an enum class.
* @param enumClass the enum class to be used
* @param policy the policy for ordering
* @return a WithExplicitOrdering instance initialized with the given policy and lock graph nodes
*/",Creates a {@code CycleDetectingLockFactory.WithExplicitOrdering<E>}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,register,com.google.common.eventbus.EventBus:register(java.lang.Object),235,237,"/**
 * Registers an object as a subscriber.
 * @param object the object to register
 */","* Registers all subscriber methods on {@code object} to receive events.
   *
   * @param object object whose subscriber methods should be registered.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,unregister,com.google.common.eventbus.EventBus:unregister(java.lang.Object),245,247,"/**
 * Unregisters an object from subscribers.
 * @param object the object to be unregistered
 */","* Unregisters all subscriber methods on a registered {@code object}.
   *
   * @param object object whose subscriber methods should be unregistered.
   * @throws IllegalArgumentException if the object was not previously registered.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,immutable,com.google.common.graph.GraphBuilder:immutable(),115,118,"/**
 * Returns an immutable graph builder.
 * @return ImmutableGraph.Builder instance
 */","* Returns an {@link ImmutableGraph.Builder} with the properties of this {@link GraphBuilder}.
   *
   * <p>The returned builder can be used for populating an {@link ImmutableGraph}.
   *
   * <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link
   * ElementOrder#stable()}, regardless of the value that was set in this builder.
   *
   * @since 28.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate)",2790,2797,"/**
 * Filters entries in a BiMap based on a predicate.
 * @param unfiltered the original BiMap to filter
 * @param entryPredicate predicate to determine which entries to include
 * @return a new BiMap containing only entries that match the predicate
 */","* Returns a bimap containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the bimap's
   * {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link
   * IllegalArgumentException}. Similarly, the map's entries have an {@link Entry#setValue} method
   * that throws an {@link IllegalArgumentException} when the existing key and the provided value
   * don't satisfy the predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
   * bimap.
   *
   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying bimap and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered bimap and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$FilteredEntryNavigableMap:descendingMap(),3335,3338,"/**
* Returns a descending view of the filtered map.
* @return NavigableMap with entries in reverse order
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$FilteredEntryNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",3340,3348,"/**
* Returns a view of the portion of this map whose keys range from fromKey to toKey.
* @param fromKey lower bound key
* @param fromInclusive true if fromKey is inclusive
* @param toKey upper bound key
* @param toInclusive true if toKey is inclusive
* @return NavigableMap view with filtered entries
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$FilteredEntryNavigableMap:headMap(java.lang.Object,boolean)",3350,3353,"/**
* Returns a navigable map containing entries with keys less than or equal to the specified key.
* @param toKey the upper bound for keys in the returned map
* @param inclusive true if the specified key should be included in the returned map
* @return NavigableMap with filtered entries based on the predicate
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$FilteredEntryNavigableMap:tailMap(java.lang.Object,boolean)",3355,3358,"/**
* Returns a navigable map containing entries greater than or equal to the specified key.
* @param fromKey the lower bound key
* @param inclusive true if the lower bound is inclusive
* @return filtered navigable map with entries meeting the predicate
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(java.util.NavigableMap,com.google.common.base.Predicate)",2496,2503,"/**
 * Filters entries in a NavigableMap based on a key predicate.
 * @param unfiltered the original NavigableMap to filter
 * @param keyPredicate predicate to test keys against
 * @return a new NavigableMap with only entries whose keys satisfy the predicate
 */","* Returns a navigable map containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and
   * {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(java.util.NavigableMap,com.google.common.base.Predicate)",2621,2626,"/**
* Filters map values using a predicate.
* @param unfiltered the original map to filter
* @param valuePredicate predicate to test map values
* @return a new NavigableMap with entries that match the predicate
*/","* Returns a navigable map containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},
   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose values satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(java.util.SortedMap,com.google.common.base.Predicate)",2463,2468,"/**
* Filters entries by key predicate.
* @param unfiltered the original sorted map
* @param keyPredicate predicate to test keys
* @return a new sorted map with filtered keys
*/","* Returns a sorted map containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and
   * {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(java.util.SortedMap,com.google.common.base.Predicate)",2589,2593,"/**
* Filters entries in a sorted map based on a value predicate.
* @param unfiltered the original sorted map to filter
* @param valuePredicate predicate for filtering values
* @return new sorted map with filtered entries
*/","* Returns a sorted map containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},
   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose values satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,headSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:headSetImpl(java.lang.Object,boolean)",642,645,"/**
* Returns elements less than or equal to a specified element.
* @param toElement the upper bound element
* @param inclusive true if the upper bound is inclusive
* @return ImmutableSortedSet containing elements up to toElement
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",647,657,"/**
* Returns a subset of elements within the specified range.
* @param fromElement lower bound of the range
* @param fromInclusive true if the lower bound is inclusive
* @param toElement upper bound of the range
* @param toInclusive true if the upper bound is inclusive
* @return ImmutableSortedSet containing elements within the range
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,tailSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:tailSetImpl(java.lang.Object,boolean)",659,662,"/**
* Returns a tail set starting from the specified element.
* @param fromElement the start element (inclusive if specified)
* @param inclusive true for inclusive, false for exclusive
* @return ImmutableSortedSet containing elements >= fromElement
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putCoalescing,"com.google.common.collect.TreeRangeMap$SubRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)",535,545,"/**
 * Adds or merges a range with a value.
 * @param range the key range to add
 * @param value the value associated with the range
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putAll,com.google.common.collect.TreeRangeMap$SubRangeMap:putAll(com.google.common.collect.RangeMap),547,559,"/**
 * Adds all entries from the specified range map.
 * @param rangeMap the range map to add
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,firstKey,com.google.common.collect.ImmutableSortedMap:firstKey(),909,912,"/**
 * Returns the first key in the map.
 * @return the first key or null if the map is empty
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,readResolve,com.google.common.collect.ImmutableSortedMultiset$SerializedForm:readResolve(),586,593,"/**
* Reconstructs the object after deserialization.
* @return a new instance of the object with the same elements and counts
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,"com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Comparator,java.util.Iterator)",243,247,"/**
* Creates an immutable sorted multiset from elements.
* @param comparator ordering for the elements
* @param elements iterator of elements to include
* @return ImmutableSortedMultiset with specified elements and order
*/","* Returns an immutable sorted multiset containing the given elements sorted by the given {@code
   * Comparator}.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,locationsFrom,com.google.common.reflect.ClassPath:locationsFrom(java.lang.ClassLoader),395,401,"/**
* Retrieves location information from a class loader.
* @param classloader the source class loader
* @return an ImmutableSet of LocationInfo objects
*/","* Returns all locations that {@code classloader} and parent loaders load classes and resources
   * from. Callers can {@linkplain LocationInfo#scanResources scan} individual locations selectively
   * or even in parallel.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,subtypeOfComponentType,com.google.common.reflect.Types:subtypeOfComponentType(java.lang.reflect.Type[]),198,214,"/**
* Finds the subtype of component type from bounds.
* @param bounds array of generic type bounds
* @return Type object or null if not found
*/","* Returns {@code ? extends X} if any of {@code bounds} is a subtype of {@code X[]}; or null
   * otherwise.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newArrayType,com.google.common.reflect.Types:newArrayType(java.lang.reflect.Type),61,75,"/**
* Creates a new array type for the given component type.
* Handles wildcard types by inferring bounds.
* @param componentType the type of components in the array
* @return Type representing the new array type
*/",Returns the array type of {@code componentType}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,orderedPermutations,com.google.common.collect.Collections2:orderedPermutations(java.lang.Iterable),378,381,"/**
* Generates ordered permutations of elements.
* @param elements iterable collection of comparable elements
* @return collection of lists representing permutations
*/","* Returns a {@link Collection} of all the permutations of the specified {@link Iterable}.
   *
   * <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations
   * Generation, described in Knuth's ""The Art of Computer Programming"", Volume 4, Chapter 7,
   * Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the
   * first permutation will be in ascending order, and the last will be in descending order.
   *
   * <p>Duplicate elements are considered equal. For example, the list [1, 1] will have only one
   * permutation, instead of two. This is why the elements have to implement {@link Comparable}.
   *
   * <p>An empty iterable has only one permutation, which is an empty list.
   *
   * <p>This method is equivalent to {@code Collections2.orderedPermutations(list,
   * Ordering.natural())}.
   *
   * @param elements the original iterable whose elements have to be permuted.
   * @return an immutable {@link Collection} containing all the different permutations of the
   *     original iterable.
   * @throws NullPointerException if the specified iterable is null or has any null elements.
   * @since 12.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyOf,com.google.common.collect.ImmutableMultiset:copyOf(java.lang.Iterable),182,197,"/**
 * Creates an immutable multiset from the given iterable.
 * @param elements source iterable of elements
 * @return ImmutableMultiset containing elements from the input iterable
 */","* Returns an immutable multiset containing the given elements, in the ""grouped iteration order""
   * described in the class documentation.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyOf,com.google.common.collect.ImmutableMultiset:copyOf(java.util.Iterator),205,209,"/**
* Creates an immutable multiset from an iterator.
* @param elements iterator of elements to include
* @return ImmutableMultiset containing the elements
*/","* Returns an immutable multiset containing the given elements, in the ""grouped iteration order""
   * described in the class documentation.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,copyHighestCountFirst,com.google.common.collect.Multisets:copyHighestCountFirst(com.google.common.collect.Multiset),1150,1156,"/**
 * Copies a multiset with elements sorted by descending count.
 * @param multiset the input multiset to copy and sort
 * @return an ImmutableMultiset with elements ordered by highest count first
 */","* Returns a copy of {@code multiset} as an {@link ImmutableMultiset} whose iteration order puts
   * the highest count first, with ties broken by the iteration order of the original multiset.
   *
   * @since 11.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,create,com.google.common.collect.CartesianList:create(java.util.List),40,50,"/**
 * Creates a Cartesian product of input lists.
 * @param lists a list of lists containing elements of type E
 * @return a list of lists representing the Cartesian product, or an empty list if any input list is empty
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,computeNext,com.google.common.collect.Collections2$OrderedPermutationIterator:computeNext(),514,522,"/**
* Computes the next permutation and returns it.
* @return List of elements in the current permutation or null if done
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,computeNext,com.google.common.collect.Collections2$PermutationIterator:computeNext(),646,654,"/**
* Computes the next permutation of elements.
* @return list of elements in current permutation or null if no more permutations
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,permutations,com.google.common.collect.Collections2:permutations(java.util.Collection),589,591,"/**
* Generates all permutations of a collection.
* @param elements input collection of elements
* @return Collection containing all possible permutations
*/","* Returns a {@link Collection} of all the permutations of the specified {@link Collection}.
   *
   * <p><i>Notes:</i> This is an implementation of the Plain Changes algorithm for permutations
   * generation, described in Knuth's ""The Art of Computer Programming"", Volume 4, Chapter 7,
   * Section 7.2.1.2.
   *
   * <p>If the input list contains equal elements, some of the generated permutations will be equal.
   *
   * <p>An empty collection has only one permutation, which is an empty list.
   *
   * @param elements the original collection whose elements have to be permuted.
   * @return an immutable {@link Collection} containing all the different permutations of the
   *     original collection.
   * @throws NullPointerException if the specified collection is null or has any null elements.
   * @since 12.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.lang.Iterable),234,239,"/**
* Creates an immutable list from the given iterable.
* @param elements source iterable of elements
* @return ImmutableList containing the provided elements
*/","* Returns an immutable list containing the given elements, in order. If {@code elements} is a
   * {@link Collection}, this method behaves exactly as {@link #copyOf(Collection)}; otherwise, it
   * behaves exactly as {@code copyOf(elements.iterator()}.
   *
   * @throws NullPointerException if {@code elements} contains a null element",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,copyOf,com.google.common.collect.ImmutableRangeSet:copyOf(com.google.common.collect.RangeSet),110,125,"/**
 * Creates an immutable copy of a RangeSet.
 * @param rangeSet the RangeSet to copy
 * @return an ImmutableRangeSet containing the same ranges
 */",Returns an immutable copy of the specified {@code RangeSet}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOfSorted,com.google.common.collect.ImmutableSortedSet:copyOfSorted(java.util.SortedSet),347,355,"/**
* Creates an immutable sorted set from a sorted set.
* @param sortedSet the source sorted set to copy
* @return an ImmutableSortedSet containing the same elements as sortedSet
*/","* Returns an immutable sorted set containing the elements of a sorted set, sorted by the same
   * {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always uses the
   * natural ordering of the elements.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is safe to use even when {@code sortedSet} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code sortedSet} or any of its elements is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getAnnotatedMethodsNotCached,com.google.common.eventbus.SubscriberRegistry:getAnnotatedMethodsNotCached(java.lang.Class),193,225,"/**
* Retrieves annotated methods not cached.
* @param clazz class to inspect for methods
* @return list of methods with Subscribe annotation
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,removeNode,com.google.common.graph.StandardMutableNetwork:removeNode(java.lang.Object),127,144,"/**
 * Removes a node from the network and its associated edges.
 * @param node the node to be removed
 * @return true if the node was successfully removed, false otherwise
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource:readLines(),335,350,"/**
* Reads all lines from a file into an immutable list.
* @return ImmutableList containing all lines from the file
* @throws IOException if an I/O error occurs
*/","* Reads all the lines of this source as a list of strings. The returned list will be empty if
   * this source is empty.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableBiMap,"com.google.common.collect.CollectCollectors:toImmutableBiMap(java.util.function.Function,java.util.function.Function)",244,255,"/**
* Collects elements into an immutable bi-map.
* @param keyFunction extracts keys from elements
* @param valueFunction extracts values from elements
* @return ImmutableBiMap with unique keys and values
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,build,com.google.common.collect.ImmutableClassToInstanceMap$Builder:build(),138,145,"/**
* Builds an immutable class-to-instance map.
* @return ImmutableClassToInstanceMap containing mappings or empty map if none
*/","* Returns a new immutable class-to-instance map containing the entries provided to this
     * builder.
     *
     * @throws IllegalArgumentException if duplicate keys were added",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,fromMapEntries,"com.google.common.collect.ImmutableListMultimap:fromMapEntries(java.util.Collection,java.util.Comparator)",386,410,"/**
* Creates an ImmutableListMultimap from map entries.
* @param mapEntries collection of key-value pairs where values are collections
* @param valueComparator optional comparator for sorting values
* @return ImmutableListMultimap with sorted or unsorted values based on comparator
*/",Creates an ImmutableListMultimap from an asMap.entrySet.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,readObject,com.google.common.collect.ImmutableListMultimap:readObject(java.io.ObjectInputStream),519,554,"/**
 * Reads object from input stream.
 * @param stream input stream to read from
 * @throws IOException if an I/O error occurs
 * @throws ClassNotFoundException if class of a serialized object cannot be found
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,build,com.google.common.collect.ImmutableMap$Builder:build(),593,595,"/**
 * Builds and returns an immutable map.
 * @return ImmutableMap instance containing key-value pairs
 */","* Returns a newly-created immutable map. The iteration order of the returned map is the order
     * in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was
     * called, in which case entries are sorted by value.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate keys. The {@code build()} method will soon be
     * deprecated.
     *
     * @throws IllegalArgumentException if duplicate keys were added",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,legacyReadResolve,com.google.common.collect.ImmutableMap$SerializedForm:legacyReadResolve(),1283,1294,"/**
* Reconstructs object from serialized state.
* @return reconstructed object or throws an exception if build fails
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,fromMapEntries,"com.google.common.collect.ImmutableSetMultimap:fromMapEntries(java.util.Collection,java.util.Comparator)",458,479,"/**
* Creates an ImmutableSetMultimap from map entries.
* @param mapEntries collection of key-value pairs where values are collections
* @param valueComparator optional comparator for values within sets
* @return ImmutableSetMultimap with keys and immutable sets of values
*/",Creates an ImmutableSetMultimap from an asMap.entrySet.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,readObject,com.google.common.collect.ImmutableSetMultimap:readObject(java.io.ObjectInputStream),687,730,"/**
 * Reads object state from input stream.
 * @param stream source of serialized data
 * @throws IOException if I/O error occurs
 * @throws ClassNotFoundException if class not found during deserialization
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,uniqueIndex,"com.google.common.collect.Maps:uniqueIndex(java.util.Iterator,com.google.common.base.Function,com.google.common.collect.ImmutableMap$Builder)",1392,1406,"/**
 * Builds an immutable map from iterator values using a key function.
 * @param values iterator of values to index
 * @param keyFunction function to extract keys from values
 * @param builder ImmutableMap.Builder to build the map
 * @return ImmutableMap with unique keys, throws IllegalArgumentException if duplicate keys are found
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,fromProperties,com.google.common.collect.Maps:fromProperties(java.util.Properties),1418,1455,"/**
* Converts Properties to ImmutableMap.
* @param properties source Properties object
* @return ImmutableMap with key-value pairs from Properties
*/","* Creates an {@code ImmutableMap<String, String>} from a {@code Properties} instance. Properties
   * normally derive from {@code Map<Object, Object>}, but they typically contain strings, which is
   * awkward. This method lets you get a plain-old-{@code Map} out of a {@code Properties}.
   *
   * @param properties a {@code Properties} object to be converted
   * @return an immutable map containing all the entries in {@code properties}
   * @throws ClassCastException if any key in {@code properties} is not a {@code String}
   * @throws NullPointerException if any key or value in {@code properties} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,indexMap,com.google.common.collect.Maps:indexMap(java.util.Collection),4471,4478,"/**
* Creates an index map from a collection.
* @param list the input collection
* @return ImmutableMap with elements as keys and their indices as values
*/",Returns a map from the ith element of list to i.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,getNodeConnections,com.google.common.graph.ImmutableGraph:getNodeConnections(com.google.common.graph.Graph),84,94,"/**
 * Builds a map of node connections from a graph.
 * @param graph the input graph
 * @return ImmutableMap with nodes as keys and their GraphConnections as values
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,getNodeConnections,com.google.common.graph.ImmutableNetwork:getNodeConnections(com.google.common.graph.Network),82,91,"/**
* Builds a map of node connections from the given network.
* @param network the input network
* @return an immutable map with nodes as keys and their connections as values
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,getEdgeToReferenceNode,com.google.common.graph.ImmutableNetwork:getEdgeToReferenceNode(com.google.common.graph.Network),93,102,"/**
 * Creates a map from edges to their reference nodes.
 * @param network the input network
 * @return an immutable map where each edge is mapped to its reference node
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,getNodeConnections,com.google.common.graph.ImmutableValueGraph:getNodeConnections(com.google.common.graph.ValueGraph),84,94,"/**
* Builds a map of node connections from a given graph.
* @param graph the input ValueGraph
* @return ImmutableMap of nodes to their GraphConnections
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,build,com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:build(),91,93,"/**
* Builds and returns an immutable map from the builder.
* @return ImmutableTypeToInstanceMap object containing built mappings
*/","* Returns a new immutable type-to-instance map containing the entries provided to this builder.
     *
     * @throws IllegalArgumentException if duplicate keys were added",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,where,com.google.common.reflect.TypeResolver$TypeTable:where(java.util.Map),289,299,"/**
* Creates a new TypeTable with additional mappings.
* @param mappings map of TypeVariableKey to Type
* @return new TypeTable instance with updated mappings
*/",Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/thirdparty/publicsuffix/TrieParser.java,parseFullString,com.google.thirdparty.publicsuffix.TrieParser:parseFullString(java.lang.String),41,52,"/**
* Parses encoded string into a map of domain suffixes and types.
* @param encoded input string containing encoded data
* @return ImmutableMap with domain suffixes as keys and PublicSuffixType as values
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toMap,"com.google.common.collect.Maps:toMap(java.util.Iterator,com.google.common.base.Function)",1293,1303,"/**
* Converts an iterator of keys to an ImmutableMap using a value function.
* @param keys Iterator of keys
* @param valueFunction Function to generate values from keys
* @return ImmutableMap with keys and computed values, preserving last entries for duplicates
*/","* Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value
   * for each key was computed by {@code valueFunction}. The map's iteration order is the order of
   * the first appearance of each key in {@code keys}.
   *
   * <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code
   * valueFunction} will be applied to more than one instance of that key and, if it is, which
   * result will be mapped to that key in the returned map.
   *
   * @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code
   *     valueFunction} produces {@code null} for any key
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lowerKey,com.google.common.collect.ImmutableSortedMap:lowerKey(java.lang.Object),1036,1039,"/**
 * Retrieves the greatest key less than the specified key.
 * @param key the reference key
 * @return the greatest key less than the specified key, or null if no such key exists
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,floorKey,com.google.common.collect.ImmutableSortedMap:floorKey(java.lang.Object),1046,1049,"/**
 * Returns the greatest key less than or equal to the given key.
 * @param key the reference key
 * @return the greatest key less than or equal to the given key, or null if no such key exists
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,subMap,"com.google.common.collect.ImmutableSortedMap:subMap(java.lang.Object,java.lang.Object)",970,973,"/**
* Returns a view of the portion of this map whose keys range from fromKey (inclusive) to toKey (exclusive).
* @param fromKey low endpoint (inclusive) of the returned map
* @param toKey high endpoint (exclusive) of the returned map
* @return ImmutableSortedMap containing the specified range of keys and their corresponding values
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges
   * from {@code fromKey}, inclusive, to {@code toKey}, exclusive.
   *
   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link
   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.
   * However, this method doesn't throw an exception in that situation, but instead keeps the
   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of
   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,ceilingKey,com.google.common.collect.ImmutableSortedMap:ceilingKey(java.lang.Object),1056,1059,"/**
 * Returns the least key greater than or equal to the specified key.
 * @param key the key to search for
 * @return the least key greater than or equal to key, or null if no such key exists
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,higherKey,com.google.common.collect.ImmutableSortedMap:higherKey(java.lang.Object),1066,1069,"/**
 * Returns the least key greater than the specified key.
 * @param key the reference key
 * @return the least key greater than key, or null if no such key
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,toImmutableSortedMap,"com.google.common.collect.ImmutableSortedMap:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",99,107,"/**
* Collects elements into an ImmutableSortedMap.
* @param comparator for sorting keys
* @param keyFunction extracts map keys from elements
* @param valueFunction extracts map values from elements
* @param mergeFunction merges values with the same key
* @return ImmutableSortedMap with sorted keys
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose
   * keys and values are the result of applying the provided mapping functions to the input
   * elements.
   *
   * <p>If the mapped keys contain duplicates (according to the comparator), the values are merged
   * using the specified merging function. Entries will appear in the encounter order of the first
   * occurrence of the key.
   *
   * @since 21.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,remove,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:remove(),807,834,"/**
 * Removes the current element from the iterator.
 * Updates internal state to reflect removal.
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,poll,com.google.common.collect.MinMaxPriorityQueue:poll(),303,307,"/**
* Retrieves and removes the head element of the queue.
* @return the head element or null if the queue is empty
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,pollLast,com.google.common.collect.MinMaxPriorityQueue:pollLast(),368,371,"/**
* Removes and returns the last element.
* @return the last element or null if empty
*/","* Removes and returns the greatest element of this queue, or returns {@code null} if the queue is
   * empty.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeLast,com.google.common.collect.MinMaxPriorityQueue:removeLast(),378,384,"/**
* Removes and returns the last element.
* Throws NoSuchElementException if list is empty.
*/","* Removes and returns the greatest element of this queue.
   *
   * @throws NoSuchElementException if the queue is empty",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toSet,com.google.common.collect.FluentIterable:toSet(),651,654,"/**
 * Converts delegate to an immutable set.
 * @return ImmutableSet containing elements from the delegate
 */","* Returns an {@code ImmutableSet} containing all of the elements from this fluent iterable with
   * duplicates removed.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSet#toImmutableSet} to {@code
   * stream.collect()}.
   *
   * @throws NullPointerException if any element is {@code null}
   * @since 14.0 (since 12.0 as {@code toImmutableSet()}).",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,validate,com.google.common.graph.Traverser:validate(java.lang.Iterable),347,354,"/**
* Validates nodes by checking their existence.
* @param startNodes iterable of starting nodes to validate
* @return ImmutableSet of validated nodes
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scan,"com.google.common.reflect.ClassPath$LocationInfo:scan(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder)",447,463,"/**
 * Recursively scans a file or directory for resources.
 * @param file the file or directory to scan
 * @param scannedUris set of already scanned URIs to avoid duplicates
 * @param builder builds the collection of ResourceInfo objects
 * @throws IOException if an I/O error occurs during scanning
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOf,com.google.common.reflect.TypeToken:isSupertypeOf(com.google.common.reflect.TypeToken),451,453,"/**
 * Checks if this type is a supertype of another.
 * @param type the type to check against
 * @return true if this type is a supertype, false otherwise
 */","* Returns true if this type is a supertype of the given {@code type}. ""Supertype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOf,com.google.common.reflect.TypeToken:isSupertypeOf(java.lang.reflect.Type),463,465,"/**
 * Checks if this type is a supertype of the given type.
 * @param type the type to check against
 * @return true if this type is a supertype of the given type, false otherwise
 */","* Returns true if this type is a supertype of the given {@code type}. ""Supertype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOf,com.google.common.reflect.TypeToken:isSubtypeOf(com.google.common.reflect.TypeToken),475,477,"/**
 * Checks if this type is a subtype of the specified type.
 * @param type the TypeToken to compare against
 * @return true if this type is a subtype, false otherwise
 */","* Returns true if this type is a subtype of the given {@code type}. ""Subtype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isOwnedBySubtypeOf,com.google.common.reflect.TypeToken:isOwnedBySubtypeOf(java.lang.reflect.Type),1127,1135,"/**
 * Checks if any owned type is a subtype of the given supertype.
 * @param supertype the type to check against
 * @return true if an owned type is a subtype, false otherwise
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainReferenceQueues,com.google.common.cache.LocalCache$Segment:drainReferenceQueues(),2465,2473,"/**
* Drains reference queues for keys and values.
* Ensures proper cleanup of weak references.
*/","* Drain the key and value reference queues, cleaning up internal entries containing garbage
     * collected keys or values.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(com.google.common.collect.BiMap,com.google.common.base.Predicate)",2529,2533,"/**
* Filters a bi-map by keys using a predicate.
* @param unfiltered the original bi-map to filter
* @param keyPredicate predicate for filtering keys
* @return a new bi-map with entries that match the key predicate
*/","* Returns a bimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate.
   * The returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap
   * and its views. When given a key that doesn't satisfy the predicate, the bimap's {@code put()},
   * {@code forcePut()} and {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
   * bimap.
   *
   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key in
   * the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>
   * needed, it may be faster to copy the filtered bimap and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(com.google.common.collect.BiMap,com.google.common.base.Predicate)",2655,2658,"/**
* Filters entries in a BiMap by value.
* @param unfiltered the original BiMap to filter
* @param valuePredicate predicate for filtering values
* @return a new BiMap with filtered entries
*/","* Returns a bimap containing the mappings in {@code unfiltered} whose values satisfy a predicate.
   * The returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap
   * and its views. When given a value that doesn't satisfy the predicate, the bimap's {@code
   * put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link
   * IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method
   * that throws an {@link IllegalArgumentException} when the provided value doesn't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
   * bimap.
   *
   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every value in
   * the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>
   * needed, it may be faster to copy the filtered bimap and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Iterator),229,235,"/**
* Creates an immutable sorted multiset from iterator elements using natural ordering.
* @param elements iterator of elements to include in the multiset
* @return ImmutableSortedMultiset with sorted elements
*/","* Returns an immutable sorted multiset containing the given elements sorted by their natural
   * ordering.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,capture,com.google.common.reflect.TypeResolver$WildcardCapturer:capture(java.lang.reflect.Type),461,498,"/**
* Captures wildcard and generic array types.
* @param type input Type to capture
* @return captured Type
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveGenericArrayType,com.google.common.reflect.TypeResolver:resolveGenericArrayType(java.lang.reflect.GenericArrayType),251,255,"/**
* Resolves generic array type.
* @param type GenericArrayType to resolve
* @return Resolved Type of the array
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,canonicalizeWildcardsInType,com.google.common.reflect.TypeToken:canonicalizeWildcardsInType(java.lang.reflect.Type),1017,1026,"/**
* Canonicalizes wildcards in a given Type.
* @param type the original Type to process
* @return a new Type with canonicalized wildcards
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,toGenericType,com.google.common.reflect.TypeToken:toGenericType(java.lang.Class),1158,1184,"/**
 * Converts a class to its generic type token.
 * @param cls the class to convert
 * @return TypeToken representing the generic type
 */","* Returns the type token representing the generic type declaration of {@code cls}. For example:
   * {@code TypeToken.getGenericType(Iterable.class)} returns {@code Iterable<T>}.
   *
   * <p>If {@code cls} isn't parameterized and isn't a generic array, the type token of the class is
   * returned.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toMultiset,com.google.common.collect.FluentIterable:toMultiset(),683,686,"/**
* Converts the delegate to an immutable multiset.
* @return ImmutableMultiset containing non-null elements from the delegate
*/","* Returns an {@code ImmutableMultiset} containing all of the elements from this fluent iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableMultiset#toImmutableMultiset} to
   * {@code stream.collect()}.
   *
   * @throws NullPointerException if any element is null
   * @since 19.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,build,com.google.common.collect.ImmutableMultiset$Builder:build(),589,592,"/**
 * Builds an immutable multiset from current contents.
 * @return ImmutableMultiset containing all elements
 */","* Returns a newly-created {@code ImmutableMultiset} based on the contents of the {@code
     * Builder}.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,readResolve,com.google.common.collect.ImmutableMultiset$SerializedForm:readResolve(),661,667,"/**
* Reconstructs the object after deserialization.
* @return new ImmutableMultiset with original elements and counts
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,parametersAsMap,com.google.common.net.MediaType:parametersAsMap(),845,847,"/**
* Converts parameter map to immutable multiset values.
* @return Map with keys from parameters and immutable multiset values
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,cartesianProduct,com.google.common.collect.Lists:cartesianProduct(java.util.List),456,458,"/**
* Computes the Cartesian product of multiple lists.
* @param lists collection of lists to compute the product
* @return List of Lists containing all possible combinations
*/","* Returns every possible list that can be formed by choosing one element from each of the given
   * lists in order; the ""n-ary <a href=""http://en.wikipedia.org/wiki/Cartesian_product"">Cartesian
   * product</a>"" of the lists. For example:
   *
   * {@snippet :
   * Lists.cartesianProduct(ImmutableList.of(
   *     ImmutableList.of(1, 2),
   *     ImmutableList.of(""A"", ""B"", ""C"")))
   * }
   *
   * <p>returns a list containing six lists in the following order:
   *
   * <ul>
   *   <li>{@code ImmutableList.of(1, ""A"")}
   *   <li>{@code ImmutableList.of(1, ""B"")}
   *   <li>{@code ImmutableList.of(1, ""C"")}
   *   <li>{@code ImmutableList.of(2, ""A"")}
   *   <li>{@code ImmutableList.of(2, ""B"")}
   *   <li>{@code ImmutableList.of(2, ""C"")}
   * </ul>
   *
   * <p>The result is guaranteed to be in the ""traditional"", lexicographical order for Cartesian
   * products that you would get from nesting for loops:
   *
   * {@snippet :
   * for (B b0 : lists.get(0)) {
   *   for (B b1 : lists.get(1)) {
   *     ...
   *     ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...);
   *     // operate on tuple
   *   }
   * }
   * }
   *
   * <p>Note that if any input list is empty, the Cartesian product will also be empty. If no lists
   * at all are provided (an empty list), the resulting Cartesian product has one element, an empty
   * list (counter-intuitive, but mathematically consistent).
   *
   * <p><i>Performance notes:</i> while the cartesian product of lists of size {@code m, n, p} is a
   * list of size {@code m x n x p}, its actual memory consumption is much smaller. When the
   * cartesian product is constructed, the input lists are merely copied. Only as the resulting list
   * is iterated are the individual lists created, and these are not retained after iteration.
   *
   * @param lists the lists to choose elements from, in the order that the elements chosen from
   *     those lists should appear in the resulting lists
   * @param <B> any common base class shared by all axes (often just {@link Object})
   * @return the Cartesian product, as an immutable list containing immutable lists
   * @throws IllegalArgumentException if the size of the cartesian product would be greater than
   *     {@link Integer#MAX_VALUE}
   * @throws NullPointerException if {@code lists}, any one of the {@code lists}, or any element of
   *     a provided list is null
   * @since 19.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,com.google.common.cache.CacheBuilderSpec:parse(java.lang.String),141,163,"/**
* Parses a cache builder specification string.
* @param cacheBuilderSpecification configuration string for cache settings
* @return CacheBuilderSpec object representing parsed settings
*/","* Creates a CacheBuilderSpec from a string.
   *
   * @param cacheBuilderSpecification the string form",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AllEqualOrdering.java,immutableSortedCopy,com.google.common.collect.AllEqualOrdering:immutableSortedCopy(java.lang.Iterable),46,49,"/**
* Creates an immutable sorted copy of the given iterable.
* @param iterable the source iterable to copy
* @return an ImmutableList containing elements from the iterable, sorted
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toList,com.google.common.collect.FluentIterable:toList(),619,622,"/**
* Converts delegate to an immutable list.
* @return Immutable list of elements
*/","* Returns an {@code ImmutableList} containing all of the elements from this fluent iterable in
   * proper sequence.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code
   * stream.collect()}.
   *
   * @throws NullPointerException if any element is {@code null}
   * @since 14.0 (since 12.0 as {@code toImmutableList()}).",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,listFiles,com.google.common.io.MoreFiles:listFiles(java.nio.file.Path),263,269,"/**
* Lists files in a directory.
* @param dir directory path to list files from
* @return immutable list of file paths
* @throws IOException if an I/O error occurs
*/","* Returns an immutable list of paths to the files contained in the given directory.
   *
   * @throws NoSuchFileException if the file does not exist <i>(optional specific exception)</i>
   * @throws NotDirectoryException if the file could not be opened because it is not a directory
   *     <i>(optional specific exception)</i>
   * @throws IOException if an I/O error occurs",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,<init>,com.google.common.net.InternetDomainName:<init>(java.lang.String),144,162,"/**
 * Constructs an InternetDomainName object.
 * @param name the domain name to be normalized and validated
 */","Constructor used to implement {@link #from(String)}, and from subclasses.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner:<init>(boolean,java.lang.Iterable)",1259,1265,"/**
* Initializes a Combiner with futures.
* @param allMustSucceed flag indicating if all futures must succeed
* @param inputs iterable of futures to be combined
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,allAsList,com.google.common.util.concurrent.Futures:allAsList(java.lang.Iterable),600,608,"/**
* Combines multiple ListenableFutures into a single future containing their results.
* @param futures iterable of ListenableFutures to combine
* @return ListenableFuture with list of results or exceptions from input futures
*/","* Creates a new {@code ListenableFuture} whose value is a list containing the values of all its
   * input futures, if all succeed.
   *
   * <p>The list of results is in the same order as the input list.
   *
   * <p>This differs from {@link #successfulAsList(Iterable)} in that it will return a failed future
   * if any of the items fails.
   *
   * <p>Canceling this future will attempt to cancel all the component futures, and if any of the
   * provided futures fails or is canceled, this one is, too.
   *
   * @param futures futures to combine
   * @return a future that provides a list of the results of the component futures
   * @since 10.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,whenAllComplete,com.google.common.util.concurrent.Futures:whenAllComplete(java.lang.Iterable),632,635,"/**
* Combines multiple ListenableFutures into a single Future that completes when all input futures complete.
* @param futures iterable of ListenableFutures to combine
* @return FutureCombiner object representing the combined future state
*/","* Creates a {@link FutureCombiner} that processes the completed futures whether or not they're
   * successful.
   *
   * <p>Any failures from the input futures will not be propagated to the returned future.
   *
   * @since 20.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,whenAllSucceed,com.google.common.util.concurrent.Futures:whenAllSucceed(java.lang.Iterable),657,660,"/**
* Combines multiple listenable futures to wait for all successful completions.
* @param futures collection of listenable futures
* @return FutureCombiner that aggregates results
*/","* Creates a {@link FutureCombiner} requiring that all passed in futures are successful.
   *
   * <p>If any input fails, the returned future fails immediately.
   *
   * @since 20.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,successfulAsList,com.google.common.util.concurrent.Futures:successfulAsList(java.lang.Iterable),883,886,"/**
* Combines multiple ListenableFutures into a single future that completes when all input futures succeed.
* @param futures iterable of ListenableFutures to combine
* @return ListenableFuture containing list of results or nulls if any input future fails
*/","* Creates a new {@code ListenableFuture} whose value is a list containing the values of all its
   * successful input futures. The list of results is in the same order as the input list, and if
   * any of the provided futures fails or is canceled, its corresponding position will contain
   * {@code null} (which is indistinguishable from the future having a successful value of {@code
   * null}).
   *
   * <p>The list of results is in the same order as the input list.
   *
   * <p>This differs from {@link #allAsList(Iterable)} in that it's tolerant of failed futures for
   * any of the items, representing them as {@code null} in the result list.
   *
   * <p>Canceling this future will attempt to cancel all the component futures.
   *
   * @param futures futures to combine
   * @return a future that provides a list of the results of the component futures
   * @since 10.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,gwtCompatibleToArray,com.google.common.util.concurrent.Futures:gwtCompatibleToArray(java.lang.Iterable),931,941,"/**
 * Converts an Iterable of ListenableFutures to an array.
 * @param futures iterable of ListenableFutures
 * @return array of ListenableFutures
 */",Can't use Iterables.toArray because it's not gwt compatible,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,unionOf,com.google.common.collect.ImmutableRangeSet:unionOf(java.lang.Iterable),147,149,"/**
* Creates an immutable range set from the union of given ranges.
* @param ranges iterable collection of ranges to be combined
* @return ImmutableRangeSet containing all elements from input ranges
*/","* Returns an {@code ImmutableRangeSet} representing the union of the specified ranges.
   *
   * <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. Duplicate
   * or connected ranges are permitted, and will be coalesced in the result.
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,intersection,com.google.common.collect.ImmutableRangeSet:intersection(com.google.common.collect.RangeSet),421,425,"/**
* Computes intersection of two range sets.
* @param other the second RangeSet to intersect with
* @return ImmutableRangeSet containing common ranges
*/","* Returns a new range set consisting of the intersection of this range set and {@code other}.
   *
   * <p>This is essentially the same as {@code
   * TreeRangeSet.create(this).removeAll(other.complement())} except it returns an {@code
   * ImmutableRangeSet}.
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,difference,com.google.common.collect.ImmutableRangeSet:difference(com.google.common.collect.RangeSet),435,439,"/**
 * Computes the difference between this range set and another.
 * @param other the range set to subtract from this one
 * @return an ImmutableRangeSet representing the difference
 */","* Returns a new range set consisting of the difference of this range set and {@code other}.
   *
   * <p>This is essentially the same as {@code TreeRangeSet.create(this).removeAll(other)} except it
   * returns an {@code ImmutableRangeSet}.
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,toImmutableBiMap,"com.google.common.collect.ImmutableBiMap:toImmutableBiMap(java.util.function.Function,java.util.function.Function)",63,68,"/**
 * Collects elements into an ImmutableBiMap using provided key and value functions.
 * @param keyFunction extracts the key from each element
 * @param valueFunction extracts the value from each element
 * @return ImmutableBiMap with keys and values extracted from elements
 */","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableBiMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements.
   * Entries appear in the result {@code ImmutableBiMap} in encounter order.
   *
   * <p>If the mapped keys or values contain duplicates (according to {@link
   * Object#equals(Object)}), an {@code IllegalArgumentException} is thrown when the collection
   * operation is performed. (This differs from the {@code Collector} returned by {@link
   * Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.)
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,copyOf,com.google.common.collect.ImmutableClassToInstanceMap:copyOf(java.util.Map),159,169,"/**
* Creates an immutable map from a given map.
* @param map input map with class keys and instances as values
* @return ImmutableClassToInstanceMap containing the same entries
*/","* Returns an immutable map containing the same entries as {@code map}. If {@code map} somehow
   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose
   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.
   *
   * <p><b>Note:</b> Despite what the method name suggests, if {@code map} is an {@code
   * ImmutableClassToInstanceMap}, no copy will actually be performed.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws ClassCastException if any value is not an instance of the type specified by its key",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,copyOf,com.google.common.collect.ImmutableListMultimap:copyOf(com.google.common.collect.Multimap),354,370,"/**
* Creates an immutable copy of the given multimap.
* @param multimap the multimap to copy
* @return an ImmutableListMultimap containing the same mappings as the input
*/","* Returns an immutable multimap containing the same mappings as {@code multimap}. The generated
   * multimap's key and value orderings correspond to the iteration ordering of the {@code
   * multimap.asMap()} view.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code multimap} is null",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,build,com.google.common.collect.ImmutableMultimap$Builder:build(),364,373,"/**
* Builds an immutable multimap.
* @return ImmutableMultimap instance based on builder settings
*/",Returns a newly-created immutable multimap.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMap,"com.google.common.collect.CollectCollectors:toImmutableMap(java.util.function.Function,java.util.function.Function)",186,196,"/**
* Collects elements into an immutable map.
* @param keyFunction function to extract keys from elements
* @param valueFunction function to extract values from elements
* @return Collector that produces an ImmutableMap
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,merge,"com.google.common.collect.TreeRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)",283,335,"/**
* Merges a range with a value using a remapping function.
* @param range the range to merge
* @param value the value to associate with the range
* @param remappingFunction function to determine new value
*/",* @since 28.1,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,readResolve,com.google.common.collect.ImmutableMap$SerializedForm:readResolve(),1262,1281,"/**
 * Ensures deserialized object is immutable.
 * @return ImmutableMap built from keys and values or legacy version if not.
 */",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,build,com.google.common.collect.ImmutableSetMultimap$Builder:build(),394,404,"/**
* Builds an immutable set multimap.
* @return ImmutableSetMultimap with entries sorted by key if comparator is provided
*/",Returns a newly-created immutable set multimap.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,copyOf,"com.google.common.collect.ImmutableSetMultimap:copyOf(com.google.common.collect.Multimap,java.util.Comparator)",424,441,"/**
* Creates an immutable copy of a Multimap.
* @param multimap the original multimap to copy
* @param valueComparator optional comparator for values
* @return ImmutableSetMultimap with copied entries
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,uniqueIndex,"com.google.common.collect.Maps:uniqueIndex(java.util.Iterator,com.google.common.base.Function)",1386,1390,"/**
* Creates an immutable map from iterator values with unique keys.
* @param values iterator of values to index
* @param keyFunction function to extract keys from values
* @return ImmutableMap with unique keys or IllegalArgumentException if duplicates exist
*/","* Returns a map with the given {@code values}, indexed by keys derived from those values. In
   * other words, each input value produces an entry in the map whose key is the result of applying
   * {@code keyFunction} to that value. These entries appear in the same order as the input values.
   * Example usage:
   *
   * {@snippet :
   * Color red = new Color(""red"", 255, 0, 0);
   * ...
   * Iterator<Color> allColors = ImmutableSet.of(red, green, blue).iterator();
   *
   * Map<String, Color> colorForName =
   *     uniqueIndex(allColors, toStringFunction());
   * assertThat(colorForName).containsEntry(""red"", red);
   * }
   *
   * <p>If your index may associate multiple values with each key, use {@link
   * Multimaps#index(Iterator, Function) Multimaps.index}.
   *
   * @param values the values to use when constructing the {@code Map}
   * @param keyFunction the function used to produce the key for each value
   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value
   *     in the input collection to that value
   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one
   *     value in the input collection
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any value
   * @since 10.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,<init>,"com.google.common.collect.ArrayTable:<init>(java.lang.Iterable,java.lang.Iterable)",150,169,"/**
* Initializes an ArrayTable with given row and column keys.
* @param rowKeys iterable of row keys
* @param columnKeys iterable of column keys
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,<init>,"com.google.common.collect.DenseImmutableTable:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)",55,87,"/**
 * Initializes a dense immutable table from cell list and key spaces.
 * @param cellList list of cells with row, column, and value
 * @param rowSpace set of all row keys
 * @param columnSpace set of all column keys
 */",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,<init>,com.google.common.collect.ExplicitOrdering:<init>(java.util.List),31,33,"/**
 * Initializes with a map of values indexed by their order.
 * @param valuesInOrder list of values in specific order
 */",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,com.google.common.collect.Sets$PowerSet:<init>(java.util.Set),1724,1728,"/**
* Constructs a power set from the given input.
* @param input set of elements (maximum 30)
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,combinations,"com.google.common.collect.Sets:combinations(java.util.Set,int)",1808,1904,"/**
 * Generates all combinations of a given size from a set.
 * @param set the input set
 * @param size the size of each combination
 * @return a set of sets containing all combinations
 */","* Returns the set of all subsets of {@code set} of size {@code size}. For example, {@code
   * combinations(ImmutableSet.of(1, 2, 3), 2)} returns the set {@code {{1, 2}, {1, 3}, {2, 3}}}.
   *
   * <p>Elements appear in these subsets in the same iteration order as they appeared in the input
   * set. The order in which these subsets appear in the outer set is undefined.
   *
   * <p>The returned set and its constituent sets use {@code equals} to decide whether two elements
   * are identical, even if the input set uses a different concept of equivalence.
   *
   * <p><i>Performance notes:</i> the memory usage of the returned set is only {@code O(n)}. When
   * the result set is constructed, the input set is merely copied. Only as the result set is
   * iterated are the individual subsets created. Each of these subsets occupies an additional O(n)
   * memory but only for as long as the user retains a reference to it. That is, the set returned by
   * {@code combinations} does not retain the individual subsets.
   *
   * @param set the set of elements to take combinations of
   * @param size the number of elements per combination
   * @return the set of all combinations of {@code size} elements from {@code set}
   * @throws IllegalArgumentException if {@code size} is not between 0 and {@code set.size()}
   *     inclusive
   * @throws NullPointerException if {@code set} is or contains {@code null}
   * @since 23.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,<init>,"com.google.common.collect.SparseImmutableTable:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)",47,94,"/**
* Constructs a SparseImmutableTable from cell list and row/column spaces.
* @param cellList list of cells with row, column, and value
* @param rowSpace set of all rows
* @param columnSpace set of all columns
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,copyOf,com.google.common.graph.ImmutableGraph:copyOf(com.google.common.graph.Graph),58,64,"/**
* Creates an immutable copy of the given graph.
* @param graph the original graph to copy
* @return an ImmutableGraph instance
*/",Returns an immutable copy of {@code graph}.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,<init>,com.google.common.graph.ImmutableNetwork:<init>(com.google.common.graph.Network),52,55,"/**
* Creates an immutable copy of a given network.
* @param network original network to copy
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,<init>,com.google.common.graph.ImmutableValueGraph:<init>(com.google.common.graph.ValueGraph),50,52,"/**
* Constructs an ImmutableValueGraph from a given ValueGraph.
* @param graph the original ValueGraph to be converted
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,where,com.google.common.reflect.TypeResolver:where(java.util.Map),119,121,"/**
 * Creates a new TypeResolver with specified type mappings.
 * @param mappings map of TypeVariableKey to resolved types
 * @return new TypeResolver instance with updated mappings
 */",Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toMap,"com.google.common.collect.Maps:toMap(java.lang.Iterable,com.google.common.base.Function)",1275,1278,"/**
* Converts iterable keys to an immutable map using a value function.
* @param keys the iterable of keys
* @param valueFunction the function to compute values from keys
* @return ImmutableMap with keys and computed values
*/","* Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value
   * for each key was computed by {@code valueFunction}. The map's iteration order is the order of
   * the first appearance of each key in {@code keys}.
   *
   * <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code
   * valueFunction} will be applied to more than one instance of that key and, if it is, which
   * result will be mapped to that key in the returned map.
   *
   * <p>If {@code keys} is a {@link Set}, a live view can be obtained instead of a copy using {@link
   * Maps#asMap(Set, Function)}.
   *
   * <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example:
   *
   * {@snippet :
   * import static com.google.common.collect.ImmutableMap.toImmutableMap;
   * ...
   * ImmutableMap<Color, String> colorNames =
   *     allColors.stream().collect(toImmutableMap(c -> c, c -> c.toString()));
   * }
   *
   * <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys
   * and values in the map are.
   *
   * @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code
   *     valueFunction} produces {@code null} for any key
   * @since 14.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,pollFirst,com.google.common.collect.MinMaxPriorityQueue:pollFirst(),341,344,"/**
 * Retrieves and removes the first element of the queue.
 * @return the head of this queue or null if it is empty
 */","* Removes and returns the least element of this queue, or returns {@code null} if the queue is
   * empty.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,offer,com.google.common.collect.MinMaxPriorityQueue:offer(java.lang.Object),288,301,"/**
* Adds an element to the priority queue.
* @param element the element to add
* @return true if the element was added, false if it exceeded the max size
*/","* Adds the given element to this queue. If this queue has a maximum size, after adding {@code
   * element} the queue will automatically evict its greatest element (according to its comparator),
   * which may be {@code element} itself.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getAllClasses,com.google.common.reflect.ClassPath:getAllClasses(),154,156,"/**
 * Retrieves all ClassInfo objects from resources.
 * @return ImmutableSet of ClassInfo instances
 */","* Returns all classes loadable from the current class path.
   *
   * @since 16.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getTopLevelClasses,com.google.common.reflect.ClassPath:getTopLevelClasses(),162,167,"/**
* Retrieves top-level classes from resources.
* @return Immutable set of ClassInfo objects representing top-level classes
*/","* Returns all top level classes loadable from the current class path. Note that ""top-level-ness""
   * is determined heuristically by class name (see {@link ClassInfo#isTopLevel}).",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,delegate,com.google.common.reflect.TypeToken$ClassSet:delegate(),764,779,"/**
* Returns the set of delegate types for generic type handling.
* @return Set of TypeToken objects representing super types
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,delegate,com.google.common.reflect.TypeToken$InterfaceSet:delegate(),723,732,"/**
* Returns the set of interface types.
* @return ImmutableSet of TypeToken representing interfaces
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,rawTypes,com.google.common.reflect.TypeToken$InterfaceSet:rawTypes(),739,746,"/**
* Collects raw types, filtering interfaces.
* @return Set of raw interface types
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,delegate,com.google.common.reflect.TypeToken$TypeSet:delegate(),685,700,"/**
* Returns a set of type tokens representing the types handled by this collector.
* @return Immutable set of TypeToken objects
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,breadthFirst,com.google.common.graph.Traverser:breadthFirst(java.lang.Iterable),240,243,"/**
* Performs breadth-first traversal starting from given nodes.
* @param startNodes initial set of nodes to start traversal
* @return Iterable for traversed nodes in breadth-first order
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code
   * startNodes}, in the order of a breadth-first traversal. This is equivalent to a breadth-first
   * traversal of a graph with an additional root node whose successors are the listed {@code
   * startNodes}.
   *
   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph
   * @see #breadthFirst(Object)
   * @since 24.1",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPreOrder,com.google.common.graph.Traverser:depthFirstPreOrder(java.lang.Iterable),290,293,"/**
* Performs depth-first pre-order traversal starting from given nodes.
* @param startNodes initial nodes to begin traversal
* @return Iterable of nodes in pre-order sequence
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code
   * startNodes}, in the order of a depth-first pre-order traversal. This is equivalent to a
   * depth-first pre-order traversal of a graph with an additional root node whose successors are
   * the listed {@code startNodes}.
   *
   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph
   * @see #depthFirstPreOrder(Object)
   * @since 24.1",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPostOrder,com.google.common.graph.Traverser:depthFirstPostOrder(java.lang.Iterable),340,343,"/**
* Performs depth-first post-order traversal.
* @param startNodes initial nodes to start traversal
* @return Iterable of nodes in post-order
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code
   * startNodes}, in the order of a depth-first post-order traversal. This is equivalent to a
   * depth-first post-order traversal of a graph with an additional root node whose successors are
   * the listed {@code startNodes}.
   *
   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph
   * @see #depthFirstPostOrder(Object)
   * @since 24.1",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanResources,com.google.common.reflect.ClassPath$LocationInfo:scanResources(java.util.Set),440,445,"/**
 * Scans files and returns resource information.
 * @param scannedFiles set of files to scan
 * @return ImmutableSet of ResourceInfo objects
 * @throws IOException if file operations fail
 */","* Scans this location and returns all scanned resources.
     *
     * <p>This file and jar files from ""Class-Path"" entry in the scanned manifest files will be
     * added to {@code scannedFiles}.
     *
     * <p>A file will be scanned at most once even if specified multiple times by one or multiple
     * jar files' ""Class-Path"" manifest entries. Particularly, if a jar file from the ""Class-Path""
     * manifest entry is already in {@code scannedFiles}, either because it was scanned earlier, or
     * it was intentionally added to the set by the caller, it will not be scanned again.
     *
     * <p>Note that when you call {@code location.scanResources(scannedFiles)}, the location will
     * always be scanned even if {@code scannedFiles} already contains it.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,returning,com.google.common.reflect.Invokable:returning(com.google.common.reflect.TypeToken),312,320,"/**
* Returns a specialized invokable with the specified return type.
* @param <R1> the new return type parameter
* @param returnType the expected return type
* @return an Invokable with the specified return type
* @throws IllegalArgumentException if the specified type is not a supertype of the current return type
*/",Explicitly specifies the return type of this {@code Invokable}.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,tryDrainReferenceQueues,com.google.common.cache.LocalCache$Segment:tryDrainReferenceQueues(),2451,2459,"/**
* Attempts to lock and process reference queues.
*/",Cleanup collected entries when the lock is available.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,runLockedCleanup,com.google.common.cache.LocalCache$Segment:runLockedCleanup(long),3469,3479,"/**
* Performs cleanup operations under lock.
* @param now current timestamp in milliseconds
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveType,com.google.common.reflect.TypeResolver:resolveType(java.lang.reflect.Type),213,227,"/**
 * Resolves the specified type to its actual type.
 * @param type the type to resolve
 * @return resolved Type object
 */","* Resolves all type variables in {@code type} and all downstream types and returns a
   * corresponding type with type variables resolved.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,is,"com.google.common.reflect.TypeToken:is(java.lang.reflect.Type,java.lang.reflect.TypeVariable)",976,991,"/**
* Checks if the runtime type matches the formal type or its wildcard bounds.
* @param formalType the declared type to compare against
* @param declaration the type variable declaration
* @return true if types match or are within wildcard bounds, false otherwise
*/","* {@code A.is(B)} is defined as {@code Foo<A>.isSubtypeOf(Foo<B>)}.
   *
   * <p>Specifically, returns true if any of the following conditions is met:
   *
   * <ol>
   *   <li>'this' and {@code formalType} are equal.
   *   <li>'this' and {@code formalType} have equal canonical form.
   *   <li>{@code formalType} is {@code <? extends Foo>} and 'this' is a subtype of {@code Foo}.
   *   <li>{@code formalType} is {@code <? super Foo>} and 'this' is a supertype of {@code Foo}.
   * </ol>
   *
   * Note that condition 2 isn't technically accurate under the context of a recursively bounded
   * type variables. For example, {@code Enum<? extends Enum<E>>} canonicalizes to {@code Enum<?>}
   * where {@code E} is the type variable declared on the {@code Enum} class declaration. It's
   * technically <em>not</em> true that {@code Foo<Enum<? extends Enum<E>>>} is a subtype of {@code
   * Foo<Enum<?>>} according to JLS. See testRecursiveWildcardSubtypeBug() for a real example.
   *
   * <p>It appears that properly handling recursive type bounds in the presence of implicit type
   * bounds is not easy. For now we punt, hoping that this defect should rarely cause issues in real
   * code.
   *
   * @param formalType is {@code Foo<formalType>} a supertype of {@code Foo<T>}?
   * @param declaration The type variable in the context of a parameterized type. Used to infer type
   *     bound when {@code formalType} is a wildcard with implicit upper bound.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,canonicalizeTypeArg,"com.google.common.reflect.TypeToken:canonicalizeTypeArg(java.lang.reflect.TypeVariable,java.lang.reflect.Type)",1011,1015,"/**
 * Canonicalizes a type argument.
 * @param declaration the original type variable declaration
 * @param typeArg the type argument to canonicalize
 * @return the canonicalized type argument
 */","* In reflection, {@code Foo<?>.getUpperBounds()[0]} is always {@code Object.class}, even when Foo
   * is defined as {@code Foo<T extends String>}. Thus directly calling {@code <?>.is(String.class)}
   * will return false. To mitigate, we canonicalize wildcards by enforcing the following
   * invariants:
   *
   * <ol>
   *   <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For
   *       example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code
   *       Enum<? extends Enum<E>}.
   *   <li>{@code canonicalize(t)} produces a ""literal"" supertype of t. For example: {@code Enum<?
   *       extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard
   *       the upper bound is implicitly an Enum too).
   *   <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)}
   *       and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.
   *   <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.
   * </ol>",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,equals,com.google.common.net.MediaType:equals(java.lang.Object),1193,1206,"/**
 * Compares two MediaType objects for equality.
 * @param obj the object to compare with
 * @return true if both media types are equal, false otherwise
 */",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,hashCode,com.google.common.net.MediaType:hashCode(),1208,1217,"/**
* Computes hash code for the object.
* @return computed hash code
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,from,com.google.common.cache.CacheBuilder:from(java.lang.String),341,344,"/**
 * Creates a CacheBuilder instance from a specification string.
 * @param spec configuration string for the cache builder
 * @return CacheBuilder object configured according to the spec
 */","* Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}.
   * This is especially useful for command-line configuration of a {@code CacheBuilder}.
   *
   * @param spec a String in the format specified by {@link CacheBuilderSpec}
   * @since 12.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,disableCaching,com.google.common.cache.CacheBuilderSpec:disableCaching(),166,169,"/**
* Disables caching by setting maximum size to zero.
* @return CacheBuilderSpec with caching disabled
*/",Returns a CacheBuilderSpec that will prevent caching.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,inputFutures,com.google.common.util.concurrent.ClosingFuture$Combiner:inputFutures(),1363,1367,"/**
* Converts list of Input objects to futures.
* @return ImmutableList of FluentFuture objects representing the futures
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,fileTreeChildren,com.google.common.io.MoreFiles:fileTreeChildren(java.nio.file.Path),298,308,"/**
 * Returns children of a directory as an Iterable<Path>.
 * @param dir directory path to list children from
 * @return iterable of child paths or empty list if not a directory
 */",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,from,com.google.common.net.InternetDomainName:from(java.lang.String),259,262,"/**
* Creates an InternetDomainName instance from a string.
* @param domain the domain name as a string
* @return InternetDomainName object
*/","* Returns an instance of {@link InternetDomainName} after lenient validation. Specifically,
   * validation against <a href=""http://www.ietf.org/rfc/rfc3490.txt"">RFC 3490</a>
   * (""Internationalizing Domain Names in Applications"") is skipped, while validation against <a
   * href=""http://www.ietf.org/rfc/rfc1035.txt"">RFC 1035</a> is relaxed in the following ways:
   *
   * <ul>
   *   <li>Any part containing non-ASCII characters is considered valid.
   *   <li>Underscores ('_') are permitted wherever dashes ('-') are permitted.
   *   <li>Parts other than the final part may start with a digit, as mandated by <a
   *       href=""https://tools.ietf.org/html/rfc1123#section-2"">RFC 1123</a>.
   * </ul>
   *
   * @param domain A domain name (not IP address)
   * @throws IllegalArgumentException if {@code domain} is not syntactically valid according to
   *     {@link #isValid}
   * @since 10.0 (previously named {@code fromLenient})",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,inCompletionOrder,com.google.common.util.concurrent.Futures:inCompletionOrder(java.lang.Iterable),909,928,"/**
* Returns a list of futures that complete in the order they finish.
* @param futures iterable of listenable futures to be ordered
* @return immutable list of futures completing in input order
*/","* Returns a list of delegate futures that correspond to the futures received in the order that
   * they complete. Delegate futures return the same value or throw the same exception as the
   * corresponding input future returns/throws.
   *
   * <p>""In the order that they complete"" means, for practical purposes, about what you would
   * expect, but there are some subtleties. First, we do guarantee that, if the output future at
   * index n is done, the output future at index n-1 is also done. (But as usual with futures, some
   * listeners for future n may complete before some for future n-1.) However, it is possible, if
   * one input completes with result X and another later with result Y, for Y to come before X in
   * the output future list. (Such races are impossible to solve without global synchronization of
   * all future completions. And they should have little practical impact.)
   *
   * <p>Cancelling a delegate future propagates to input futures once all the delegates complete,
   * either from cancellation or because an input future has completed. If N futures are passed in,
   * and M delegates are cancelled, the remaining M input futures will be cancelled once N - M of
   * the input futures complete. If all the delegates are cancelled, all the input futures will be
   * too.
   *
   * @since 17.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,union,com.google.common.collect.ImmutableRangeSet:union(com.google.common.collect.RangeSet),408,410,"/**
* Returns the union of this range set and another.
* @param other the RangeSet to be unioned with this set
* @return an ImmutableRangeSet containing all ranges from both sets
*/","* Returns a new range set consisting of the union of this range set and {@code other}.
   *
   * <p>This is essentially the same as {@code TreeRangeSet.create(this).addAll(other)} except it
   * returns an {@code ImmutableRangeSet}.
   *
   * @since 21.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,flatteningToImmutableListMultimap,"com.google.common.collect.CollectCollectors:flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function)",372,384,"/**
* Collects elements into an immutable list multimap.
* @param keyFunction extracts the key from each element
* @param valuesFunction extracts a stream of values from each element
* @return Immutable list multimap with keys and collected values
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,copyOf,com.google.common.collect.ImmutableMultimap:copyOf(com.google.common.collect.Multimap),386,395,"/**
* Creates an immutable copy of a given multimap.
* @param multimap the original multimap to copy
* @return an ImmutableMultimap containing the same entries as the input
*/","* Returns an immutable multimap containing the same mappings as {@code multimap}, in the
   * ""key-grouped"" iteration order described in the class documentation.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code multimap} is null",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,build,com.google.common.collect.ImmutableListMultimap$Builder:build(),337,340,"/**
* Builds and returns an immutable list multimap.
* @return Immutable list multimap containing all entries
*/",Returns a newly-created immutable list multimap.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,toImmutableMap,"com.google.common.collect.ImmutableMap:toImmutableMap(java.util.function.Function,java.util.function.Function)",88,93,"/**
* Converts a stream of objects to an ImmutableMap.
* @param keyFunction function extracting map keys
* @param valueFunction function extracting map values
* @return Collector for creating ImmutableMap
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements.
   * Entries appear in the result {@code ImmutableMap} in encounter order.
   *
   * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}, an {@code
   * IllegalArgumentException} is thrown when the collection operation is performed. (This differs
   * from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which
   * throws an {@code IllegalStateException}.)
   *
   * @since 21.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,merge,"com.google.common.collect.TreeRangeMap$SubRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)",573,584,"/**
 * Merges a range with a value using a remapping function.
 * @param range the range to merge
 * @param value the value associated with the range
 * @param remappingFunction function to apply for merging values
 */",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSetMultimap,"com.google.common.collect.CollectCollectors:toImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",386,397,"/**
* Collects elements into an ImmutableSetMultimap.
* @param keyFunction extracts the key from each element
* @param valueFunction extracts the value from each element
* @return ImmutableSetMultimap containing grouped elements
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object)",160,164,"/**
* Creates an ImmutableSetMultimap with a single key-value pair.
* @param k1 the key
* @param v1 the value associated with the key
* @return an ImmutableSetMultimap containing the specified key-value pair
*/",Returns an immutable multimap containing a single entry.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",170,175,"/**
* Creates an immutable multimap with two key-value pairs.
* @param k1 first key
* @param v1 value for the first key
* @param k2 second key
* @param v2 value for the second key
* @return ImmutableSetMultimap containing the specified entries
*/","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",181,187,"/**
* Creates an immutable multimap with three key-value pairs.
* @param k1 first key
* @param v1 value for the first key
* @param k2 second key
* @param v2 value for the second key
* @param k3 third key
* @param v3 value for the third key
* @return ImmutableSetMultimap containing the specified entries
*/","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",193,201,"/**
* Creates an immutable set multimap from key-value pairs.
* @param k1,k2,k3,k4 keys for the entries
* @param v1,v2,v3,v4 values for the entries
* @return ImmutableSetMultimap containing the specified entries
*/","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",207,216,"/**
* Creates an ImmutableSetMultimap with five key-value pairs.
* @param k1 first key
* @param v1 value for the first key
* @param k2 second key
* @param v2 value for the second key
* @param k3 third key
* @param v3 value for the third key
* @param k4 fourth key
* @param v4 value for the fourth key
* @param k5 fifth key
* @param v5 value for the fifth key
* @return ImmutableSetMultimap containing the specified entries
*/","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,copyOf,com.google.common.collect.ImmutableSetMultimap:copyOf(java.lang.Iterable),452,455,"/**
* Creates an immutable set multimap from given entries.
* @param entries iterable of key-value pairs
* @return ImmutableSetMultimap containing the provided entries
*/","* Returns an immutable multimap containing the specified entries. The returned multimap iterates
   * over keys in the order they were first encountered in the input, and the values for each key
   * are iterated in the order they were encountered. If two values for the same key are {@linkplain
   * Object#equals equal}, the first value encountered is used.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,invert,com.google.common.collect.ImmutableSetMultimap:invert(),550,558,"/**
* Inverts the multimap by swapping keys and values.
* @return new ImmutableSetMultimap with keys as values and vice versa
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,servicesByState,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:servicesByState(),626,639,"/**
* Returns a map of states to services excluding NoOpService instances.
* @return ImmutableSetMultimap with State as key and Service as value, filtered out NoOpService
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,copyOf,com.google.common.collect.ImmutableSetMultimap:copyOf(com.google.common.collect.Multimap),419,422,"/**
* Creates an immutable copy of a given multimap.
* @param multimap the source multimap to copy
* @return ImmutableSetMultimap instance containing the same key-value pairs
*/","* Returns an immutable set multimap containing the same mappings as {@code multimap}. The
   * generated multimap's key and value orderings correspond to the iteration ordering of the {@code
   * multimap.asMap()} view. Repeated occurrences of an entry in the multimap after the first are
   * ignored.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code multimap} is null",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,uniqueIndex,"com.google.common.collect.Maps:uniqueIndex(java.lang.Iterable,com.google.common.base.Function)",1345,1355,"/**
* Creates an immutable map from iterable values using a key function.
* @param values the iterable source of values
* @param keyFunction the function to extract keys from values
* @return ImmutableMap with unique keys derived from values
*/","* Returns a map with the given {@code values}, indexed by keys derived from those values. In
   * other words, each input value produces an entry in the map whose key is the result of applying
   * {@code keyFunction} to that value. These entries appear in the same order as the input values.
   * Example usage:
   *
   * {@snippet :
   * Color red = new Color(""red"", 255, 0, 0);
   * ...
   * ImmutableSet<Color> allColors = ImmutableSet.of(red, green, blue);
   *
   * ImmutableMap<String, Color> colorForName =
   *     uniqueIndex(allColors, c -> c.toString());
   * assertThat(colorForName).containsEntry(""red"", red);
   * }
   *
   * <p>If your index may associate multiple values with each key, use {@link
   * Multimaps#index(Iterable, Function) Multimaps.index}.
   *
   * <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example:
   *
   * {@snippet :
   * import static com.google.common.collect.ImmutableMap.toImmutableMap;
   * ...
   * ImmutableMap<String, Color> colorForName =
   *     allColors.stream().collect(toImmutableMap(c -> c.toString(), c -> c));
   * }
   *
   * <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys
   * and values in the map are.
   *
   * @param values the values to use when constructing the {@code Map}
   * @param keyFunction the function used to produce the key for each value
   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value
   *     in the input collection to that value
   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one
   *     value in the input collection
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any value",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,create,"com.google.common.collect.ArrayTable:create(java.lang.Iterable,java.lang.Iterable)",106,109,"/**
* Creates a new ArrayTable with specified rows and columns.
* @param rowKeys iterable of row keys
* @param columnKeys iterable of column keys
* @return ArrayTable instance initialized with the given keys
*/","* Creates an {@code ArrayTable} filled with {@code null}.
   *
   * @param rowKeys row keys that may be stored in the generated table
   * @param columnKeys column keys that may be stored in the generated table
   * @throws NullPointerException if any of the provided keys is null
   * @throws IllegalArgumentException if {@code rowKeys} or {@code columnKeys} contains duplicates
   *     or if exactly one of {@code rowKeys} or {@code columnKeys} is empty.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,<init>,com.google.common.collect.ArrayTable:<init>(com.google.common.collect.Table),171,174,"/**
* Constructs an ArrayTable from another Table.
* @param table source Table to copy data from
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,explicit,com.google.common.collect.Ordering:explicit(java.util.List),231,233,"/**
* Creates an ordering based on a predefined list of values.
* @param valuesInOrder list defining the order
* @return Ordering object that respects the given order
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,powerSet,com.google.common.collect.Sets:powerSet(java.util.Set),1673,1675,"/**
* Generates the power set of a given set.
* @param set input set whose power set is to be generated
* @return a set containing all possible subsets of the input set
*/","* Returns the set of all possible subsets of {@code set}. For example, {@code
   * powerSet(ImmutableSet.of(1, 2))} returns the set {@code {{}, {1}, {2}, {1, 2}}}.
   *
   * <p>Elements appear in these subsets in the same iteration order as they appeared in the input
   * set. The order in which these subsets appear in the outer set is undefined. Note that the power
   * set of the empty set is not the empty set, but a one-element set containing the empty set.
   *
   * <p>The returned set and its constituent sets use {@code equals} to decide whether two elements
   * are identical, even if the input set uses a different concept of equivalence.
   *
   * <p><i>Performance notes:</i> while the power set of a set with size {@code n} is of size {@code
   * 2^n}, its memory usage is only {@code O(n)}. When the power set is constructed, the input set
   * is merely copied. Only as the power set is iterated are the individual subsets created, and
   * these subsets themselves occupy only a small constant amount of memory.
   *
   * @param set the set of elements to construct a power set from
   * @return the power set, as an immutable set of immutable sets
   * @throws IllegalArgumentException if {@code set} has more than 30 unique elements (causing the
   *     power set size to exceed the {@code int} range)
   * @throws NullPointerException if {@code set} is or contains {@code null}
   * @see <a href=""http://en.wikipedia.org/wiki/Power_set"">Power set article at Wikipedia</a>
   * @since 4.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forOrderedComponents,"com.google.common.collect.RegularImmutableTable:forOrderedComponents(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)",178,187,"/**
* Creates an immutable table based on ordered components.
* @param cellList list of cells with row, column, and value
* @param rowSpace set of row keys
* @param columnSpace set of column keys
* @return RegularImmutableTable instance using either dense or sparse representation
*/",A factory that chooses the most space-efficient representation of the table.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,build,com.google.common.graph.ImmutableGraph$Builder:build(),200,202,"/**
 * Builds an immutable graph from the mutable one.
 * @return ImmutableGraph instance created from mutableGraph
 */",* Returns a newly-created {@code ImmutableGraph} based on the contents of this {@code Builder}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,copyOf,com.google.common.graph.ImmutableNetwork:copyOf(com.google.common.graph.Network),58,62,"/**
* Creates an immutable copy of a given network.
* @param network the original network to copy
* @return an ImmutableNetwork instance
*/",Returns an immutable copy of {@code network}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,copyOf,com.google.common.graph.ImmutableValueGraph:copyOf(com.google.common.graph.ValueGraph),55,59,"/**
* Returns an immutable copy of the given graph.
* @param graph the original ValueGraph to copy
* @return an ImmutableValueGraph instance
*/",Returns an immutable copy of {@code graph}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,covariantly,com.google.common.reflect.TypeResolver:covariantly(java.lang.reflect.Type),73,75,"/**
* Creates a type resolver with covariant mappings.
* @param contextType the base type to introspect
* @return a TypeResolver configured with covariant mappings
*/","* Returns a resolver that resolves types ""covariantly"".
   *
   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code
   * <T>} is covariantly resolved to {@code <?>} such that return type of {@code List::get} is
   * {@code <?>}.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,invariantly,com.google.common.reflect.TypeResolver:invariantly(java.lang.reflect.Type),88,91,"/**
* Creates an invariant type resolver.
* @param contextType the context type to capture
* @return a TypeResolver with captured mappings
*/","* Returns a resolver that resolves types ""invariantly"".
   *
   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code
   * <T>} cannot be invariantly resolved to {@code <?>} because otherwise the parameter type of
   * {@code List::set} will be {@code <?>} and it'll falsely say any object can be passed into
   * {@code ArrayList<?>::set}.
   *
   * <p>Instead, {@code <?>} will be resolved to a capture in the form of a type variable {@code
   * <capture-of-? extends Object>}, effectively preventing {@code set} from accepting any type.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,where,"com.google.common.reflect.TypeResolver:where(java.lang.reflect.Type,java.lang.reflect.Type)",112,116,"/**
* Resolves type by mapping formal to actual.
* @param formal the formal Type
* @param actual the actual Type
* @return a TypeResolver instance with resolved mappings
*/","* Returns a new {@code TypeResolver} with type variables in {@code formal} mapping to types in
   * {@code actual}.
   *
   * <p>For example, if {@code formal} is a {@code TypeVariable T}, and {@code actual} is {@code
   * String.class}, then {@code new TypeResolver().where(formal, actual)} will {@linkplain
   * #resolveType resolve} {@code ParameterizedType List<T>} to {@code List<String>}, and resolve
   * {@code Map<T, Something>} to {@code Map<String, Something>} etc. Similarly, {@code formal} and
   * {@code actual} can be {@code Map<K, V>} and {@code Map<String, Integer>} respectively, or they
   * can be {@code E[]} and {@code String[]} respectively, or even any arbitrary combination
   * thereof.
   *
   * @param formal The type whose type variables or itself is mapped to other type(s). It's almost
   *     always a bug if {@code formal} isn't a type variable and contains no type variable. Make
   *     sure you are passing the two parameters in the right order.
   * @param actual The type that the formal type variable(s) are mapped to. It can be or contain yet
   *     other type variables, in which case these type variables will be further resolved if
   *     corresponding mappings exist in the current {@code TypeResolver} instance.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toMap,com.google.common.collect.FluentIterable:toMap(com.google.common.base.Function),704,707,"/**
 * Converts delegate elements to a map using a value function.
 * @param valueFunction maps each element to its corresponding value
 * @return ImmutableMap with non-null keys and values
 */","* Returns an immutable map whose keys are the distinct elements of this {@code FluentIterable}
   * and whose value for each key was computed by {@code valueFunction}. The map's iteration order
   * is the order of the first appearance of each key in this iterable.
   *
   * <p>When there are multiple instances of a key in this iterable, it is unspecified whether
   * {@code valueFunction} will be applied to more than one instance of that key and, if it is,
   * which result will be mapped to that key in the returned map.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(ImmutableMap.toImmutableMap(k -> k,
   * valueFunction))}.
   *
   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code
   *     valueFunction} produces {@code null} for any key
   * @since 14.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue$Builder:create(java.lang.Iterable),218,226,"/**
* Creates a MinMaxPriorityQueue with initial contents.
* @param initialContents iterable of elements to add initially
* @return MinMaxPriorityQueue containing the specified elements
*/","* Builds a new min-max priority queue using the previously specified options, and having the
     * given initial elements.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,add,com.google.common.collect.MinMaxPriorityQueue:add(java.lang.Object),265,270,"/**
 * Adds an element to this collection.
 * @param element the element to add
 * @return always true, as per Collection contract
 */","* Adds the given element to this queue. If this queue has a maximum size, after adding {@code
   * element} the queue will automatically evict its greatest element (according to its comparator),
   * which may be {@code element} itself.
   *
   * @return {@code true} always",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,addAll,com.google.common.collect.MinMaxPriorityQueue:addAll(java.util.Collection),272,281,"/**
* Adds all elements from the specified collection.
* @param newElements collection of elements to add
* @return true if any elements were added, false otherwise
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getTopLevelClasses,com.google.common.reflect.ClassPath:getTopLevelClasses(java.lang.String),170,179,"/**
* Retrieves top-level classes within a specified package.
* @param packageName the name of the package to search
* @return an ImmutableSet of ClassInfo objects for the package
*/",Returns all top level classes whose package name is {@code packageName}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getTopLevelClassesRecursive,com.google.common.reflect.ClassPath:getTopLevelClassesRecursive(java.lang.String),185,195,"/**
 * Retrieves top-level classes within a package recursively.
 * @param packageName the base package name to search in
 * @return an ImmutableSet of ClassInfo objects matching the package
 */","* Returns all top level classes whose package name is {@code packageName} or starts with {@code
   * packageName} followed by a '.'.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,breadthFirst,com.google.common.graph.Traverser:breadthFirst(java.lang.Object),226,228,"/**
 * Performs breadth-first traversal starting from given node.
 * @param startNode the initial node to start traversal
 * @return an iterable of nodes in breadth-first order
 */","* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in
   * the order of a breadth-first traversal. That is, all the nodes of depth 0 are returned, then
   * depth 1, then 2, and so on.
   *
   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in
   * the order {@code abcdef} (assuming successors are returned in alphabetical order).
   *
   * {@snippet :
   * b ---- a ---- d
   * |      |
   * |      |
   * e ---- c ---- f
   * }
   *
   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change
   * while iteration is in progress.
   *
   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will
   * compute its next element on the fly. It is thus possible to limit the traversal to a certain
   * number of nodes as follows:
   *
   * {@snippet :
   * Iterables.limit(Traverser.forGraph(graph).breadthFirst(node), maxNumberOfNodes);
   * }
   *
   * <p>See <a href=""https://en.wikipedia.org/wiki/Breadth-first_search"">Wikipedia</a> for more
   * info.
   *
   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPreOrder,com.google.common.graph.Traverser:depthFirstPreOrder(java.lang.Object),276,278,"/**
* Performs depth-first pre-order traversal starting from given node.
* @param startNode initial node for traversal
* @return iterable of nodes in depth-first pre-order
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in
   * the order of a depth-first pre-order traversal. ""Pre-order"" implies that nodes appear in the
   * {@code Iterable} in the order in which they are first visited.
   *
   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in
   * the order {@code abecfd} (assuming successors are returned in alphabetical order).
   *
   * {@snippet :
   * b ---- a ---- d
   * |      |
   * |      |
   * e ---- c ---- f
   * }
   *
   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change
   * while iteration is in progress.
   *
   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will
   * compute its next element on the fly. It is thus possible to limit the traversal to a certain
   * number of nodes as follows:
   *
   * {@snippet :
   * Iterables.limit(
   *     Traverser.forGraph(graph).depthFirstPreOrder(node), maxNumberOfNodes);
   * }
   *
   * <p>See <a href=""https://en.wikipedia.org/wiki/Depth-first_search"">Wikipedia</a> for more info.
   *
   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPostOrder,com.google.common.graph.Traverser:depthFirstPostOrder(java.lang.Object),326,328,"/**
* Performs depth-first post-order traversal starting from a given node.
* @param startNode the initial node to start traversal
* @return Iterable of nodes in post-order sequence
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in
   * the order of a depth-first post-order traversal. ""Post-order"" implies that nodes appear in the
   * {@code Iterable} in the order in which they are visited for the last time.
   *
   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in
   * the order {@code fcebda} (assuming successors are returned in alphabetical order).
   *
   * {@snippet :
   * b ---- a ---- d
   * |      |
   * |      |
   * e ---- c ---- f
   * }
   *
   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change
   * while iteration is in progress.
   *
   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will
   * compute its next element on the fly. It is thus possible to limit the traversal to a certain
   * number of nodes as follows:
   *
   * {@snippet :
   * Iterables.limit(
   *     Traverser.forGraph(graph).depthFirstPostOrder(node), maxNumberOfNodes);
   * }
   *
   * <p>See <a href=""https://en.wikipedia.org/wiki/Depth-first_search"">Wikipedia</a> for more info.
   *
   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanResources,com.google.common.reflect.ClassPath$LocationInfo:scanResources(),422,424,"/**
 * Scans resources and returns an immutable set.
 * @throws IOException if an I/O error occurs during scanning
 */",Scans this location and returns all scanned resources.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,from,com.google.common.reflect.ClassPath:from(java.lang.ClassLoader),123,139,"/**
 * Constructs a ClassPath from the given ClassLoader.
 * @param classloader the ClassLoader to scan
 * @return a ClassPath object representing the scanned resources
 * @throws IOException if an I/O error occurs during scanning
 */","* Returns a {@code ClassPath} representing all classes and resources loadable from {@code
   * classloader} and its ancestor class loaders.
   *
   * <p><b>Warning:</b> {@code ClassPath} can find classes and resources only from:
   *
   * <ul>
   *   <li>{@link URLClassLoader} instances' {@code file:} URLs
   *   <li>the {@linkplain ClassLoader#getSystemClassLoader() system class loader}. To search the
   *       system class loader even when it is not a {@link URLClassLoader} (as in Java 9), {@code
   *       ClassPath} searches the files from the {@code java.class.path} system property.
   * </ul>
   *
   * @throws IOException if the attempt to read class path resources (jar files or directories)
   *     failed.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,returning,com.google.common.reflect.Invokable:returning(java.lang.Class),307,309,"/**
* Specifies the return type of an invokable.
* @param returnType the expected return type class
* @return Invokable with specified return type
*/","* Explicitly specifies the return type of this {@code Invokable}. For example:
   *
   * {@snippet :
   * Method factoryMethod = Person.class.getMethod(""create"");
   * Invokable<?, Person> factory = Invokable.of(getNameMethod).returning(Person.class);
   * }",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getEntry,"com.google.common.cache.LocalCache$Segment:getEntry(java.lang.Object,int)",2689,2707,"/**
 * Retrieves a reference entry by key and hash.
 * @param key the key to search for
 * @param hash the hash of the key
 * @return ReferenceEntry if found, otherwise null
 */",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getLiveValue,"com.google.common.cache.LocalCache$Segment:getLiveValue(com.google.common.cache.ReferenceEntry,long)",2724,2740,"/**
 * Retrieves the live value from a cache entry.
 * @param entry the ReferenceEntry to fetch the value from
 * @param now current timestamp in milliseconds
 * @return the live value if not expired, otherwise null
 */","* Gets the value from an entry. Returns null if the entry is invalid, partially-collected,
     * loading, or expired.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,preWriteCleanup,com.google.common.cache.LocalCache$Segment:preWriteCleanup(long),3453,3456,"/**
 * Performs cleanup operations before writing.
 * @param now current timestamp in milliseconds
 */","* Performs routine cleanup prior to executing a write. This should be called every time a write
     * thread acquires the segment lock, immediately after acquiring the lock.
     *
     * <p>Post-condition: expireEntries has been run.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,cleanUp,com.google.common.cache.LocalCache$Segment:cleanUp(),3463,3467,"/**
* Performs cleanup operations.
* Reads current time and executes locked and unlocked cleanup tasks.
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveInternal,"com.google.common.reflect.TypeResolver$TypeTable:resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)",324,369,"/**
 * Resolves a type variable using given bounds and dependencies.
 * @param var the type variable to resolve
 * @param forDependants table of dependent types
 * @return resolved Type or original if no change
 */","* Resolves {@code var} using the encapsulated type mapping. If it maps to yet another
     * non-reified type or has bounds, {@code forDependants} is used to do further resolution, which
     * doesn't try to resolve any type variable on generic declarations that are already being
     * resolved.
     *
     * <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveTypesInPlace,com.google.common.reflect.TypeResolver:resolveTypesInPlace(java.lang.reflect.Type[]),229,235,"/**
* Resolves and updates each type in the array.
* @param types array of Type objects to be resolved
* @return the updated array with resolved types
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveParameterizedType,com.google.common.reflect.TypeResolver:resolveParameterizedType(java.lang.reflect.ParameterizedType),257,266,"/**
 * Resolves the parameterized type by resolving its owner, raw type, and arguments.
 * @param type the ParameterizedType to resolve
 * @return the resolved ParameterizedType
 */",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericReturnType,com.google.common.reflect.TypeToken$1:getGenericReturnType(),371,374,"/**
 * Returns the generic return type of the method.
 * @return GenericType representing the method's return type
 */",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericReturnType,com.google.common.reflect.TypeToken$2:getGenericReturnType(),443,452,"/**
 * Retrieves the generic return type of a method.
 * @return Type representing the generic return type or raw class if none
 */","* If the class is parameterized, such as {@link java.util.ArrayList ArrayList}, this returns
     * {@code ArrayList<E>}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,where,"com.google.common.reflect.TypeToken:where(com.google.common.reflect.TypeParameter,com.google.common.reflect.TypeToken)",235,243,"/**
* Applies a type constraint to the generic type.
* @param typeParam the type parameter to constrain
* @param typeArg the concrete type argument for the parameter
* @return a TypeToken with the applied type constraint
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,writeReplace,com.google.common.reflect.TypeToken:writeReplace(),846,850,"/**
* Resolves and returns a serializable type representation.
* @return Serializable type object
*/",Implemented to support serialization of subclasses.,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,futureCombiner,com.google.common.util.concurrent.ClosingFuture$Combiner:futureCombiner(),1357,1361,"/**
* Combines input futures based on success requirement.
* @return FutureCombiner for handling combined futures
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,fileTraverser,com.google.common.io.MoreFiles:fileTraverser(),294,296,"/**
* Creates a traverser for file system paths.
* @return Traverser instance for navigating file trees
*/","* Returns a {@link Traverser} instance for the file and directory tree. The returned traverser
   * starts from a {@link Path} and will return all files and directories it encounters.
   *
   * <p>The returned traverser attempts to avoid following symbolic links to directories. However,
   * the traverser cannot guarantee that it will not follow symbolic links to directories as it is
   * possible for a directory to be replaced with a symbolic link between checking if the file is a
   * directory and actually reading the contents of that directory.
   *
   * <p>If the {@link Path} passed to one of the traversal methods does not exist or is not a
   * directory, no exception will be thrown and the returned {@link Iterable} will contain a single
   * element: that path.
   *
   * <p>{@link DirectoryIteratorException} may be thrown when iterating {@link Iterable} instances
   * created by this traverser if an {@link IOException} is thrown by a call to {@link
   * #listFiles(Path)}.
   *
   * <p>Example: {@code MoreFiles.fileTraverser().depthFirstPreOrder(Paths.get(""/""))} may return the
   * following paths: {@code [""/"", ""/etc"", ""/etc/config.txt"", ""/etc/fonts"", ""/home"", ""/home/alice"",
   * ...]}
   *
   * @since 23.5",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostSpecifier.java,fromValid,com.google.common.net.HostSpecifier:fromValid(java.lang.String),71,104,"/**
* Creates a HostSpecifier from a valid string.
* @param specifier host specification string
* @return HostSpecifier object or throws if invalid
*/","* Returns a {@code HostSpecifier} built from the provided {@code specifier}, which is already
   * known to be valid. If the {@code specifier} might be invalid, use {@link #from(String)}
   * instead.
   *
   * <p>The specifier must be in one of these formats:
   *
   * <ul>
   *   <li>A domain name, like {@code google.com}
   *   <li>A IPv4 address string, like {@code 127.0.0.1}
   *   <li>An IPv6 address string with or without brackets, like {@code [2001:db8::1]} or {@code
   *       2001:db8::1}
   * </ul>
   *
   * @throws IllegalArgumentException if the specifier is not valid.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,ancestor,com.google.common.net.InternetDomainName:ancestor(int),594,606,"/**
 * Retrieves an ancestor domain by removing specified levels.
 * @param levels number of levels to remove from the current domain
 * @return InternetDomainName object representing the ancestor domain
 */","* Returns the ancestor of the current domain at the given number of levels ""higher"" (rightward)
   * in the subdomain list. The number of levels must be non-negative, and less than {@code N-1},
   * where {@code N} is the number of parts in the domain.
   *
   * <p>TODO: Reasonable candidate for addition to public API.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,child,com.google.common.net.InternetDomainName:child(java.lang.String),617,619,"/**
 * Creates a child domain name.
 * @param leftParts additional parts to prepend
 * @return new InternetDomainName with added parts
 */","* Creates and returns a new {@code InternetDomainName} by prepending the argument and a dot to
   * the current name. For example, {@code InternetDomainName.from(""foo.com"").child(""www.bar"")}
   * returns a new {@code InternetDomainName} with the value {@code www.bar.foo.com}. Only lenient
   * validation is performed, as described {@link #from(String) here}.
   *
   * @throws NullPointerException if leftParts is null
   * @throws IllegalArgumentException if the resulting name is not valid",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isValid,com.google.common.net.InternetDomainName:isValid(java.lang.String),644,651,"/**
* Validates domain name format.
* @param name domain name to validate
* @return true if valid, false otherwise
*/","* Indicates whether the argument is a syntactically valid domain name using lenient validation.
   * Specifically, validation against <a href=""http://www.ietf.org/rfc/rfc3490.txt"">RFC 3490</a>
   * (""Internationalizing Domain Names in Applications"") is skipped.
   *
   * <p>The following two code snippets are equivalent:
   *
   * {@snippet :
   * domainName = InternetDomainName.isValid(name)
   *     ? InternetDomainName.from(name)
   *     : DEFAULT_DOMAIN;
   * }
   *
   * {@snippet :
   * try {
   *   domainName = InternetDomainName.from(name);
   * } catch (IllegalArgumentException e) {
   *   domainName = DEFAULT_DOMAIN;
   * }
   * }
   *
   * @since 8.0 (previously named {@code isValidLenient})",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,flatteningToImmutableListMultimap,"com.google.common.collect.ImmutableListMultimap:flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function)",122,127,"/**
* Collects elements into an ImmutableListMultimap.
* @param keyFunction extracts the key from each element
* @param valuesFunction extracts a stream of values from each element
* @return Collector that groups elements by keys with list of values
*/","* Returns a {@code Collector} accumulating entries into an {@code ImmutableListMultimap}. Each
   * input element is mapped to a key and a stream of values, each of which are put into the
   * resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the
   * streams of values.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             flatteningToImmutableListMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c));
   *
   * // is equivalent to
   *
   * static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     ImmutableListMultimap.<Character, Character>builder()
   *         .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'))
   *         .putAll('a', Arrays.asList('p', 'p', 'l', 'e'))
   *         .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'))
   *         .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'))
   *         .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'))
   *         .build();
   * }
   *
   * }
   *
   * @since 21.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableListMultimap,"com.google.common.collect.CollectCollectors:toImmutableListMultimap(java.util.function.Function,java.util.function.Function)",359,370,"/**
* Collects elements into an immutable list multimap.
* @param keyFunction function to extract keys
* @param valueFunction function to extract values
* @return Collector for Immutable List Multimap
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object)",141,145,"/**
* Creates an immutable multimap with a single key-value pair.
* @param k1 the key
* @param v1 the value associated with the key
* @return an ImmutableListMultimap containing the key-value pair
*/",Returns an immutable multimap containing a single entry.,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",148,153,"/**
* Creates an immutable multimap with two key-value pairs.
* @param k1 first key
* @param v1 value for the first key
* @param k2 second key
* @param v2 value for the second key
* @return ImmutableMultimap containing the specified entries
*/","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",156,162,"/**
* Creates an immutable multimap with three key-value pairs.
* @param k1 first key
* @param v1 value for the first key
* @param k2 second key
* @param v2 value for the second key
* @param k3 third key
* @param v3 value for the third key
* @return Immutable multimap containing specified entries
*/","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",165,173,"/**
* Creates an immutable multimap with four key-value pairs.
* @param k1 first key
* @param v1 value for the first key
* @param k2 second key
* @param v2 value for the second key
* @param k3 third key
* @param v3 value for the third key
* @param k4 fourth key
* @param v4 value for the fourth key
* @return Immutable multimap containing the specified entries
*/","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",176,185,"/**
* Creates an immutable multimap with five key-value pairs.
* @param k1 first key
* @param v1 value for the first key
* @param k2 second key
* @param v2 value for the second key
* @param k3 third key
* @param v3 value for the third key
* @param k4 fourth key
* @param v4 value for the fourth key
* @param k5 fifth key
* @param v5 value for the fifth key
* @return ImmutableMultimap containing the specified key-value pairs
*/","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,copyOf,com.google.common.collect.ImmutableListMultimap:copyOf(java.lang.Iterable),380,383,"/**
* Creates an immutable multimap from the given entries.
* @param entries iterable of key-value pairs
* @return Immutable list multimap containing the entries
*/","* Returns an immutable multimap containing the specified entries. The returned multimap iterates
   * over keys in the order they were first encountered in the input, and the values for each key
   * are iterated in the order they were encountered.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,invert,com.google.common.collect.ImmutableListMultimap:invert(),470,478,"/**
* Inverts the multimap by swapping keys and values.
* @return a new ImmutableListMultimap with keys and values swapped
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,index,"com.google.common.collect.Multimaps:index(java.util.Iterator,com.google.common.base.Function)",1719,1729,"/**
* Indexes values by applying a key function.
* @param values iterator of values to index
* @param keyFunction function to extract keys from values
* @return ImmutableListMultimap with indexed values
*/","* Creates an index {@code ImmutableListMultimap} that contains the results of applying a
   * specified function to each item in an {@code Iterator} of values. Each value will be stored as
   * a value in the resulting multimap, yielding a multimap with the same size as the input
   * iterator. The key used to store that value in the multimap will be the result of calling the
   * function on that value. The resulting multimap is created as an immutable snapshot. In the
   * returned multimap, keys appear in the order they are first encountered, and the values
   * corresponding to each key appear in the same order as they are encountered.
   *
   * <p>For example,
   *
   * {@snippet :
   * List<String> badGuys =
   *     Arrays.asList(""Inky"", ""Blinky"", ""Pinky"", ""Pinky"", ""Clyde"");
   * Function<String, Integer> stringLengthFunction = ...;
   * Multimap<Integer, String> index =
   *     Multimaps.index(badGuys.iterator(), stringLengthFunction);
   * System.out.println(index);
   * }
   *
   * <p>prints
   *
   * {@snippet :
   * {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]}
   * }
   *
   * <p>The returned multimap is serializable if its keys and values are all serializable.
   *
   * @param values the values to use when constructing the {@code ImmutableListMultimap}
   * @param keyFunction the function used to produce the key for each value
   * @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code
   *     keyFunction} on each value in the input collection to that value
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key
   * @since 10.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withParameters,"com.google.common.net.MediaType:withParameters(java.lang.String,java.lang.Iterable)",901,924,"/**
* Creates a new MediaType with additional parameters.
* @param attribute parameter key to add
* @param values iterable of parameter values for the key
* @return new MediaType instance with updated parameters
*/","* <em>Replaces</em> all parameters with the given attribute with parameters using the given
   * values. If there are no values, any existing parameters with the given attribute are removed.
   *
   * @throws IllegalArgumentException if either {@code attribute} or {@code values} is invalid
   * @since 24.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,create,"com.google.common.net.MediaType:create(java.lang.String,java.lang.String,com.google.common.collect.Multimap)",1007,1027,"/**
 * Creates a new MediaType object with specified type, subtype, and parameters.
 * @param type the primary MIME type (e.g., ""application"")
 * @param subtype the secondary MIME type (e.g., ""json"")
 * @param parameters additional parameters for the media type
 * @return a new MediaType instance or a known constant if applicable
 */",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,toImmutableSetMultimap,"com.google.common.collect.ImmutableSetMultimap:toImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",93,98,"/**
 * Collects elements into an ImmutableSetMultimap.
 * @param keyFunction extracts the key from each element
 * @param valueFunction extracts the value from each element
 * @return ImmutableSetMultimap with extracted keys and values
 */","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSetMultimap}
   * whose keys and values are the result of applying the provided mapping functions to the input
   * elements.
   *
   * <p>For streams with defined encounter order (as defined in the Ordering section of the {@link
   * java.util.stream} Javadoc), that order is preserved, but entries are <a
   * href=""ImmutableMultimap.html#iteration"">grouped by key</a>.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(toImmutableSetMultimap(str -> str.charAt(0), str -> str.substring(1)));
   *
   * // is equivalent to
   *
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     new ImmutableSetMultimap.Builder<Character, String>()
   *         .put('b', ""anana"")
   *         .putAll('a', ""pple"", ""sparagus"")
   *         .putAll('c', ""arrot"", ""herry"")
   *         .build();
   * }
   *
   * @since 21.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,inverse,com.google.common.collect.ImmutableSetMultimap:inverse(),544,548,"/**
* Returns the inverse of this multimap.
* @return ImmutableSetMultimap with keys and values swapped
*/","* {@inheritDoc}
   *
   * <p>Because an inverse of a set multimap cannot contain multiple pairs with the same key and
   * value, this method returns an {@code ImmutableSetMultimap} rather than the {@code
   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,markReady,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:markReady(),555,577,"/**
* Marks the service manager as ready.
* Throws an exception if services have transitioned asynchronously.
*/","* Marks the {@link State} as ready to receive transitions. Returns true if no transitions have
     * been observed yet.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,servicesByState,com.google.common.util.concurrent.ServiceManager:servicesByState(),407,410,"/**
 * Returns a multimap of services grouped by their states.
 * @return ImmutableSetMultimap with State as key and Set of Services as value
 */","* Provides a snapshot of the current state of all the services under management.
   *
   * <p>N.B. This snapshot is guaranteed to be consistent, i.e. the set of states returned will
   * correspond to a point in time view of the services.
   *
   * @since 29.0 (present with return type {@code ImmutableMultimap} since 14.0)",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,flatteningToImmutableSetMultimap,"com.google.common.collect.CollectCollectors:flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",399,411,"/**
* Collects elements into an ImmutableSetMultimap.
* @param keyFunction extracts the key from each element
* @param valuesFunction extracts a stream of values from each element
* @return ImmutableSetMultimap with keys and associated values
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,uniqueIndex,com.google.common.collect.FluentIterable:uniqueIndex(com.google.common.base.Function),762,765,"/**
* Creates an immutable map from elements using a key function.
* @param keyFunction extracts keys from elements
* @return ImmutableMap with elements indexed by keys
*/","* Returns a map with the contents of this {@code FluentIterable} as its {@code values}, indexed
   * by keys derived from those values. In other words, each input value produces an entry in the
   * map whose key is the result of applying {@code keyFunction} to that value. These entries appear
   * in the same order as they appeared in this fluent iterable. Example usage:
   *
   * {@snippet :
   * Color red = new Color(""red"", 255, 0, 0);
   * ...
   * FluentIterable<Color> allColors = FluentIterable.from(ImmutableSet.of(red, green, blue));
   *
   * Map<String, Color> colorForName = allColors.uniqueIndex(toStringFunction());
   * assertThat(colorForName).containsEntry(""red"", red);
   * }
   *
   * <p>If your index may associate multiple values with each key, use {@link #index(Function)
   * index}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code
   * stream.collect(ImmutableMap.toImmutableMap(keyFunction, v -> v))}.
   *
   * @param keyFunction the function used to produce the key for each value
   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value
   *     in this fluent iterable to that value
   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one
   *     value in this fluent iterable
   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key
   * @since 14.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,create,com.google.common.collect.ArrayTable:create(com.google.common.collect.Table),135,140,"/**
* Creates an ArrayTable from a given Table.
* @param table the source Table to convert
* @return a new ArrayTable instance
*/","* Creates an {@code ArrayTable} with the mappings in the provided table.
   *
   * <p>If {@code table} includes a mapping with row key {@code r} and a separate mapping with
   * column key {@code c}, the returned table contains a mapping with row key {@code r} and column
   * key {@code c}. If that row key / column key pair in not in {@code table}, the pair maps to
   * {@code null} in the generated table.
   *
   * <p>The returned table allows subsequent {@code put} calls with the row keys in {@code
   * table.rowKeySet()} and the column keys in {@code table.columnKeySet()}. Calling {@link #put}
   * with other keys leads to an {@code IllegalArgumentException}.
   *
   * <p>The ordering of {@code table.rowKeySet()} and {@code table.columnKeySet()} determines the
   * row and column iteration ordering of the returned table.
   *
   * @throws NullPointerException if {@code table} has a null key",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,readResolve,com.google.common.collect.ImmutableTable$SerializedForm:readResolve(),482,497,"/**
 * Resolves deserialization for ImmutableTable.
 * @return Deserialized ImmutableTable instance
 */",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forCellsInternal,"com.google.common.collect.RegularImmutableTable:forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator)",153,175,"/**
* Creates a RegularImmutableTable from cells with optional sorting.
* @param cells iterable of table cells
* @param rowComparator comparator for row keys (optional)
* @param columnComparator comparator for column keys (optional)
* @return RegularImmutableTable instance
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,build,com.google.common.graph.ImmutableNetwork$Builder:build(),239,241,"/**
 * Builds an immutable network from the mutable one.
 * @return ImmutableNetwork object based on current state of mutableNetwork
 */","* Returns a newly-created {@code ImmutableNetwork} based on the contents of this {@code
     * Builder}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,build,com.google.common.graph.ImmutableValueGraph$Builder:build(),204,206,"/**
 * Builds an immutable graph from the mutable one.
 * @return ImmutableValueGraph instance
 */","* Returns a newly-created {@code ImmutableValueGraph} based on the contents of this {@code
     * Builder}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,<init>,com.google.common.reflect.TypeToken:<init>(java.lang.Class),155,162,"/**
 * Initializes a TypeToken with the specified declaring class.
 * @param declaringClass the class declaring the generic type
 */","* Constructs a new type token of {@code T} while resolving free type variables in the context of
   * {@code declaringClass}.
   *
   * <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the
   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.
   *
   * <p>For example:
   *
   * {@snippet :
   * abstract class IKnowMyType<T> {
   *   TypeToken<T> getMyType() {
   *     return new TypeToken<T>(getClass()) {};
   *   }
   * }
   *
   * new IKnowMyType<String>() {}.getMyType() => String
   * }",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getCovariantTypeResolver,com.google.common.reflect.TypeToken:getCovariantTypeResolver(),1186,1192,"/**
* Retrieves a covariant type resolver.
* @return TypeResolver instance for the runtime type
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getInvariantTypeResolver,com.google.common.reflect.TypeToken:getInvariantTypeResolver(),1194,1200,"/**
 * Retrieves a type resolver that resolves types invariantly.
 * @return TypeResolver instance for invariant type resolution
 */",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue$Builder:create(),210,212,"/**
 * Creates an empty MinMaxPriorityQueue.
 * @return MinMaxPriorityQueue instance with no initial elements
 */","* Builds a new min-max priority queue using the previously specified options, and having no
     * initial contents.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue:create(java.lang.Iterable),118,121,"/**
* Creates a MinMaxPriorityQueue with natural ordering.
* @param initialContents elements to initialize the queue
* @return MinMaxPriorityQueue instance
*/","* Creates a new min-max priority queue using natural order, no maximum size, and initially
   * containing the given elements.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,reachableNodes,"com.google.common.graph.Graphs:reachableNodes(com.google.common.graph.Graph,java.lang.Object)",235,238,"/**
* Finds all nodes reachable from a given node in a graph.
* @param graph the graph to traverse
* @param node the starting node
* @return an immutable set of reachable nodes
*/","* Returns the set of nodes that are reachable from {@code node}. Node B is defined as reachable
   * from node A if there exists a path (a sequence of adjacent outgoing edges) starting at node A
   * and ending at node B. Note that a node is always reachable from itself via a zero-length path.
   *
   * <p>This is a ""snapshot"" based on the current topology of {@code graph}, rather than a live view
   * of the set of nodes reachable from {@code node}. In other words, the returned {@link Set} will
   * not be updated after modifications to {@code graph}.
   *
   * @throws IllegalArgumentException if {@code node} is not present in {@code graph}
   * @since 33.1.0 (present with return type {@code Set} since 20.0)",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getLiveEntry,"com.google.common.cache.LocalCache$Segment:getLiveEntry(java.lang.Object,int,long)",2709,2718,"/**
 * Retrieves a live entry by key and checks for expiration.
 * @param key the key to search for
 * @param hash the hash of the key
 * @param now current timestamp in milliseconds
 * @return live ReferenceEntry or null if expired or not found
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getEntry,com.google.common.cache.LocalCache:getEntry(java.lang.Object),4145,4152,"/**
* Retrieves an entry by key without affecting recency.
* @param key the key to look up
* @return ReferenceEntry object or null if not found
*/","* Returns the internal entry for the specified key. The entry may be loading, expired, or
   * partially collected.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isLive,"com.google.common.cache.LocalCache:isLive(com.google.common.cache.ReferenceEntry,long)",1746,1749,"/**
 * Checks if an entry is live.
 * @param entry the reference entry to check
 * @param now current time in milliseconds
 * @return true if the entry is live, false otherwise
 */","* This method is a convenience for testing. Code should call {@link Segment#getLiveValue}
   * instead.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsValue,com.google.common.cache.LocalCache:containsValue(java.lang.Object),4169,4207,"/**
 * Checks if the map contains a value.
 * @param value the value to check for presence
 * @return true if the value is found, false otherwise
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,insertLoadingValueReference,"com.google.common.cache.LocalCache$Segment:insertLoadingValueReference(java.lang.Object,int,boolean)",2398,2446,"/**
 * Inserts a loading value reference for the given key.
 * @param key the key to insert
 * @param hash the hash of the key
 * @param checkTime whether to check refresh time
 * @return LoadingValueReference or null if already loading or recently refreshed
 */","* Returns a newly inserted {@code LoadingValueReference}, or null if the live value reference
     * is already loading.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,put,"com.google.common.cache.LocalCache$Segment:put(java.lang.Object,int,java.lang.Object,boolean)",2789,2862,"/**
* Puts a key-value pair into the map.
* @param key the key to insert
* @param hash the hash of the key
* @param value the value to associate with the key
* @param onlyIfAbsent if true, do not overwrite existing entries
* @return the previous value associated with the key or null if none
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache$Segment:replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",2934,2993,"/**
 * Attempts to replace the value for a given key if it matches the expected old value.
 * @param key key with which the specified value is associated
 * @param hash hash of the key
 * @param oldValue value expected to be associated with the specified key
 * @param newValue new value to associate with the specified key
 * @return true if the value was replaced, false otherwise
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache$Segment:replace(java.lang.Object,int,java.lang.Object)",2995,3047,"/**
 * Replaces the value for a given key.
 * @param key key with which the specified value is to be associated
 * @param hash hash of the key
 * @param newValue new value to associate with the key
 * @return old value if present, otherwise null
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,"com.google.common.cache.LocalCache$Segment:remove(java.lang.Object,int)",3049,3093,"/**
 * Removes an entry by key and hash.
 * @param key the key of the entry to remove
 * @param hash the hash code of the key
 * @return the value associated with the removed entry, or null if not found
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,"com.google.common.cache.LocalCache$Segment:remove(java.lang.Object,int,java.lang.Object)",3095,3139,"/**
 * Removes an entry by key and value if present.
 * @param key the key of the entry to remove
 * @param hash the hash code for the key
 * @param value the value expected to be associated with the key
 * @return true if the entry was removed, false otherwise
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,storeLoadedValue,"com.google.common.cache.LocalCache$Segment:storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object)",3141,3200,"/**
 * Stores a loaded value in the map.
 * @param key the key to store the value under
 * @param hash the hash of the key
 * @param oldValueReference reference to the old loading value
 * @param newValue the new value to store
 * @return true if the value was successfully stored, false otherwise
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$Segment:clear(),3202,3238,"/**
 * Clears all entries from the map.
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,postReadCleanup,com.google.common.cache.LocalCache$Segment:postReadCleanup(),3441,3445,"/**
* Increments read count and triggers cleanup periodically.
*/","* Performs routine cleanup following a read. Normally cleanup happens during writes. If cleanup
     * is not observed after a sufficient number of reads, try cleaning up from the read thread.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,cleanUp,com.google.common.cache.LocalCache:cleanUp(),3922,3926,"/**
 * Cleans up all segments.
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveInternal,"com.google.common.reflect.TypeResolver$TypeTable$1:resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)",324,369,"/**
 * Resolves a type variable using bounds and a dependency table.
 * @param var the type variable to resolve
 * @param forDependants the dependency table for resolving dependent types
 * @return resolved type or original if no new bounds are found
 */","* Resolves {@code var} using the encapsulated type mapping. If it maps to yet another
     * non-reified type or has bounds, {@code forDependants} is used to do further resolution, which
     * doesn't try to resolve any type variable on generic declarations that are already being
     * resolved.
     *
     * <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolve,com.google.common.reflect.TypeResolver$TypeTable:resolve(java.lang.reflect.TypeVariable),301,314,"/**
* Resolves type variable to its actual type.
* @param var type variable to resolve
* @return resolved Type or original if unresolved
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericParameterTypes,com.google.common.reflect.TypeToken$1:getGenericParameterTypes(),376,379,"/**
 * Returns generic parameter types of the method.
 * @return array of Type objects representing generic parameter types
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericExceptionTypes,com.google.common.reflect.TypeToken$1:getGenericExceptionTypes(),391,394,"/**
 * Retrieves generic exception types declared by the method.
 * @return array of generic exception types
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericParameterTypes,com.google.common.reflect.TypeToken$2:getGenericParameterTypes(),454,466,"/**
* Retrieves generic parameter types of constructor.
* Adjusts for hidden 'this' parameter if necessary.
* @return array of Type objects representing parameters
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericExceptionTypes,com.google.common.reflect.TypeToken$2:getGenericExceptionTypes(),478,481,"/**
 * Returns generic exception types declared by the constructor.
 * @return array of generic exception types
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,where,"com.google.common.reflect.TypeToken:where(com.google.common.reflect.TypeParameter,java.lang.Class)",267,269,"/**
* Applies a type constraint to a generic type.
* @param typeParam the type parameter to constrain
* @param typeArg the class representing the type argument
* @return TypeToken with applied constraint
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,call,"com.google.common.util.concurrent.ClosingFuture$Combiner:call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,java.util.concurrent.Executor)",1281,1299,"/**
* Executes a callable with resources management.
* @param combiningCallable the callable to execute
* @param executor the executor for running the callable
* @return ClosingFuture object managing closeables
*/","* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a
     * combining function to their values. The function can use a {@link DeferredCloser} to capture
     * objects to be closed when the pipeline is done.
     *
     * <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs
     * fail, so will the returned step.
     *
     * <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be
     * cancelled.
     *
     * <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown
     * {@code ExecutionException} will be extracted and used as the failure of the derived step.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,callAsync,"com.google.common.util.concurrent.ClosingFuture$Combiner:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,java.util.concurrent.Executor)",1337,1355,"/**
* Executes an asynchronous callable with a combiner.
* @param combiningCallable the callable to execute asynchronously
* @param executor the executor to run the callable
* @return ClosingFuture representing the result of the async operation
*/","* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a
     * {@code ClosingFuture}-returning function to their values. The function can use a {@link
     * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those
     * captured by the returned {@link ClosingFuture}).
     *
     * <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs
     * fail, so will the returned step.
     *
     * <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be
     * cancelled.
     *
     * <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown
     * {@code ExecutionException} will be extracted and used as the failure of the derived step.
     *
     * <p>If the combiningCallable throws any other exception, it will be used as the failure of the
     * derived step.
     *
     * <p>If an exception is thrown after the combiningCallable creates a {@code ClosingFuture},
     * then none of the closeable objects in that {@code ClosingFuture} will be closed.
     *
     * <p>Usage guidelines for this method:
     *
     * <ul>
     *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a
     *       {@code ClosingFuture}. If possible, prefer calling {@link #call(CombiningCallable,
     *       Executor)} instead, with a function that returns the next value directly.
     *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}
     *       for every closeable object this step creates in order to capture it for later closing.
     *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code
     *       ClosingFuture} call {@link #from(ListenableFuture)}.
     * </ul>
     *
     * <p>The same warnings about doing heavyweight operations within {@link
     * ClosingFuture#transformAsync(AsyncClosingFunction, Executor)} apply here.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostSpecifier.java,from,com.google.common.net.HostSpecifier:from(java.lang.String),113,126,"/**
 * Parses a string into a HostSpecifier.
 * @param specifier string representation of the host specifier
 * @return HostSpecifier object
 * @throws ParseException if the specifier is invalid
 */","* Attempts to return a {@code HostSpecifier} for the given string, throwing an exception if
   * parsing fails. Always use this method in preference to {@link #fromValid(String)} for a
   * specifier that is not already known to be valid.
   *
   * @throws ParseException if the specifier is not valid.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostSpecifier.java,isValid,com.google.common.net.HostSpecifier:isValid(java.lang.String),132,139,"/**
* Validates host specifier string.
* @param specifier the string to validate
* @return true if valid, false otherwise
*/","* Determines whether {@code specifier} represents a valid {@link HostSpecifier} as described in
   * the documentation for {@link #fromValid(String)}.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,publicSuffix,com.google.common.net.InternetDomainName:publicSuffix(),408,410,"/**
 * Retrieves the public suffix of the domain.
 * @return InternetDomainName object representing the public suffix, or null if none exists
 */","* Returns the {@linkplain #isPublicSuffix() public suffix} portion of the domain name, or {@code
   * null} if no public suffix is present.
   *
   * @since 6.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,topPrivateDomain,com.google.common.net.InternetDomainName:topPrivateDomain(),460,466,"/**
 * Retrieves the top private domain.
 * @return InternetDomainName object representing the top private domain
 */","* Returns the portion of this domain name that is one level beneath the {@linkplain
   * #isPublicSuffix() public suffix}. For example, for {@code x.adwords.google.co.uk} it returns
   * {@code google.co.uk}, since {@code co.uk} is a public suffix. Similarly, for {@code
   * myblog.blogspot.com} it returns the same domain, {@code myblog.blogspot.com}, since {@code
   * blogspot.com} is a public suffix.
   *
   * <p>If {@link #isTopPrivateDomain()} is true, the current domain name instance is returned.
   *
   * <p>This method can be used to determine the probable highest level parent domain for which
   * cookies may be set, though even that depends on individual browsers' implementations of cookie
   * controls.
   *
   * @throws IllegalStateException if this domain does not end with a public suffix
   * @since 6.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,registrySuffix,com.google.common.net.InternetDomainName:registrySuffix(),516,518,"/**
* Retrieves the registry suffix of the domain.
* @return InternetDomainName object representing the registry suffix, or null if none exists
*/","* Returns the {@linkplain #isRegistrySuffix() registry suffix} portion of the domain name, or
   * {@code null} if no registry suffix is present.
   *
   * @since 23.3",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,topDomainUnderRegistrySuffix,com.google.common.net.InternetDomainName:topDomainUnderRegistrySuffix(),562,568,"/**
 * Returns the top-level domain under the registry suffix.
 * @return InternetDomainName representing the top domain
 */","* Returns the portion of this domain name that is one level beneath the {@linkplain
   * #isRegistrySuffix() registry suffix}. For example, for {@code x.adwords.google.co.uk} it
   * returns {@code google.co.uk}, since {@code co.uk} is a registry suffix. Similarly, for {@code
   * myblog.blogspot.com} it returns {@code blogspot.com}, since {@code com} is a registry suffix.
   *
   * <p>If {@link #isTopDomainUnderRegistrySuffix()} is true, the current domain name instance is
   * returned.
   *
   * <p><b>Warning:</b> This method should not be used to determine whether a domain is probably the
   * highest level for which cookies may be set. Use {@link #isTopPrivateDomain()} for that purpose.
   *
   * @throws IllegalStateException if this domain does not end with a registry suffix
   * @since 23.3",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,parent,com.google.common.net.InternetDomainName:parent(),582,585,"/**
 * Returns the parent domain of the current domain.
 * @return InternetDomainName object representing the parent domain
 * @throws IllegalStateException if the current domain has no parent
 */","* Returns an {@code InternetDomainName} that is the immediate ancestor of this one; that is, the
   * current domain with the leftmost part removed. For example, the parent of {@code
   * www.google.com} is {@code google.com}.
   *
   * @throws IllegalStateException if the domain has no parent, as determined by {@link #hasParent}",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,toImmutableListMultimap,"com.google.common.collect.ImmutableListMultimap:toImmutableListMultimap(java.util.function.Function,java.util.function.Function)",83,88,"/**
* Collects elements into an ImmutableListMultimap.
* @param keyFunction extracts keys from elements
* @param valueFunction extracts values from elements
* @return Collector for ImmutableListMultimap
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableListMultimap}
   * whose keys and values are the result of applying the provided mapping functions to the input
   * elements.
   *
   * <p>For streams with defined encounter order (as defined in the Ordering section of the {@link
   * java.util.stream} Javadoc), that order is preserved, but entries are <a
   * href=""ImmutableMultimap.html#iteration"">grouped by key</a>.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(toImmutableListMultimap(str -> str.charAt(0), str -> str.substring(1)));
   *
   * // is equivalent to
   *
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     new ImmutableListMultimap.Builder<Character, String>()
   *         .put('b', ""anana"")
   *         .putAll('a', ""pple"", ""sparagus"")
   *         .putAll('c', ""arrot"", ""herry"")
   *         .build();
   * }
   *
   * @since 21.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object)",89,91,"/**
* Creates an immutable multimap with one key-value pair.
* @param k1 the key
* @param v1 the value associated with the key
* @return an ImmutableMultimap containing the specified key-value pair
*/",Returns an immutable multimap containing a single entry.,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",94,96,"/**
* Creates an immutable multimap with two key-value pairs.
* @param k1 first key
* @param v1 value for the first key
* @param k2 second key
* @param v2 value for the second key
* @return ImmutableMultimap containing the specified entries
*/","Returns an immutable multimap containing the given entries, in order.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",102,104,"/**
* Creates an immutable multimap with three key-value pairs.
* @param <K> the type of keys
* @param <V> the type of values
* @param k1 first key
* @param v1 value for the first key
* @param k2 second key
* @param v2 value for the second key
* @param k3 third key
* @param v3 value for the third key
* @return an ImmutableMultimap containing the specified entries
*/","* Returns an immutable multimap containing the given entries, in the ""key-grouped"" insertion
   * order described in the <a href=""#iteration"">class documentation</a>.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",110,112,"/**
* Creates an immutable multimap from key-value pairs.
* @param k1,k2,k3,k4 keys for the map entries
* @param v1,v2,v3,v4 values corresponding to the keys
* @return ImmutableMultimap containing specified key-value pairs
*/","* Returns an immutable multimap containing the given entries, in the ""key-grouped"" insertion
   * order described in the <a href=""#iteration"">class documentation</a>.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",118,121,"/**
* Creates an immutable multimap from key-value pairs.
* @param k1,k2,k3,k4,k5 keys for the multimap entries
* @param v1,v2,v3,v4,v5 values corresponding to each key
* @return ImmutableMultimap containing specified key-value pairs
*/","* Returns an immutable multimap containing the given entries, in the ""key-grouped"" insertion
   * order described in the <a href=""#iteration"">class documentation</a>.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,copyOf,com.google.common.collect.ImmutableMultimap:copyOf(java.lang.Iterable),405,408,"/**
* Creates an immutable multimap from given entries.
* @param entries iterable of key-value pairs
* @return ImmutableMultimap containing the provided entries
*/","* Returns an immutable multimap containing the specified entries. The returned multimap iterates
   * over keys in the order they were first encountered in the input, and the values for each key
   * are iterated in the order they were encountered.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,inverse,com.google.common.collect.ImmutableListMultimap:inverse(),464,468,"/**
* Returns the inverted multimap.
* @return inverted ImmutableListMultimap where keys and values are swapped
*/","* {@inheritDoc}
   *
   * <p>Because an inverse of a list multimap can contain multiple pairs with the same key and
   * value, this method returns an {@code ImmutableListMultimap} rather than the {@code
   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.
   *
   * @since 11.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,index,"com.google.common.collect.Multimaps:index(java.lang.Iterable,com.google.common.base.Function)",1678,1681,"/**
* Creates an immutable multimap from iterable values using a key function.
* @param values iterable of elements to index
* @param keyFunction function to extract keys from elements
* @return ImmutableListMultimap with indexed values
*/","* Creates an index {@code ImmutableListMultimap} that contains the results of applying a
   * specified function to each item in an {@code Iterable} of values. Each value will be stored as
   * a value in the resulting multimap, yielding a multimap with the same size as the input
   * iterable. The key used to store that value in the multimap will be the result of calling the
   * function on that value. The resulting multimap is created as an immutable snapshot. In the
   * returned multimap, keys appear in the order they are first encountered, and the values
   * corresponding to each key appear in the same order as they are encountered.
   *
   * <p>For example,
   *
   * {@snippet :
   * List<String> badGuys =
   *     Arrays.asList(""Inky"", ""Blinky"", ""Pinky"", ""Pinky"", ""Clyde"");
   * Function<String, Integer> stringLengthFunction = ...;
   * Multimap<Integer, String> index =
   *     Multimaps.index(badGuys, stringLengthFunction);
   * System.out.println(index);
   * }
   *
   * <p>prints
   *
   * {@snippet :
   * {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]}
   * }
   *
   * <p>The returned multimap is serializable if its keys and values are all serializable.
   *
   * @param values the values to use when constructing the {@code ImmutableListMultimap}
   * @param keyFunction the function used to produce the key for each value
   * @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code
   *     keyFunction} on each value in the input collection to that value
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withParameter,"com.google.common.net.MediaType:withParameter(java.lang.String,java.lang.String)",934,936,"/**
 * Adds a parameter to the media type.
 * @param attribute parameter name
 * @param value parameter value
 * @return new MediaType instance with added parameter
 */","* <em>Replaces</em> all parameters with the given attribute with a single parameter with the
   * given value. If multiple parameters with the same attributes are necessary use {@link
   * #withParameters(String, Iterable)}. Prefer {@link #withCharset} for setting the {@code charset}
   * parameter when using a {@link Charset} object.
   *
   * @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withParameters,com.google.common.net.MediaType:withParameters(com.google.common.collect.Multimap),890,892,"/**
 * Creates a new MediaType instance with additional parameters.
 * @param parameters map of media type parameters
 * @return new MediaType object with updated parameters
 */","* <em>Replaces</em> all parameters with the given parameters.
   *
   * @throws IllegalArgumentException if any parameter or value is invalid",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,create,"com.google.common.net.MediaType:create(java.lang.String,java.lang.String)",1001,1005,"/**
 * Creates a MediaType object with specified type and subtype.
 * @param type the primary MIME type
 * @param subtype the secondary MIME subtype
 * @return MediaType instance without parsed charset
 */","* Creates a new media type with the given type and subtype.
   *
   * @throws IllegalArgumentException if type or subtype is invalid or if a wildcard is used for the
   *     type, but not the subtype.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,parse,com.google.common.net.MediaType:parse(java.lang.String),1100,1136,"/**
* Parses a media type string into a MediaType object.
* @param input the media type string to parse
* @return a MediaType object representing the parsed media type
*/","* Parses a media type from its string representation.
   *
   * @throws IllegalArgumentException if the input is not parsable",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,<init>,com.google.common.util.concurrent.ServiceManager:<init>(java.lang.Iterable),207,233,"/**
* Initializes ServiceManager with a collection of services.
* @param services iterable collection of Service instances
*/","* Constructs a new instance for managing the given services.
   *
   * @param services The services to manage
   * @throws IllegalArgumentException if not all services are {@linkplain State#NEW new} or if there
   *     are any duplicate services.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,flatteningToImmutableSetMultimap,"com.google.common.collect.ImmutableSetMultimap:flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",141,146,"/**
* Collects elements into an ImmutableSetMultimap.
* @param keyFunction extracts the key from each element
* @param valuesFunction extracts a stream of values from each element
* @return ImmutableSetMultimap with keys and collected values
*/","* Returns a {@code Collector} accumulating entries into an {@code ImmutableSetMultimap}. Each
   * input element is mapped to a key and a stream of values, each of which are put into the
   * resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the
   * streams of values.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             flatteningToImmutableSetMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c));
   *
   * // is equivalent to
   *
   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     ImmutableSetMultimap.<Character, Character>builder()
   *         .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'))
   *         .putAll('a', Arrays.asList('p', 'p', 'l', 'e'))
   *         .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'))
   *         .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'))
   *         .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'))
   *         .build();
   *
   * // after deduplication, the resulting multimap is equivalent to
   *
   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     ImmutableSetMultimap.<Character, Character>builder()
   *         .putAll('b', Arrays.asList('a', 'n'))
   *         .putAll('a', Arrays.asList('p', 'l', 'e', 's', 'a', 'r', 'g', 'u'))
   *         .putAll('c', Arrays.asList('a', 'r', 'o', 't', 'h', 'e', 'y'))
   *         .build();
   * }
   *
   * }
   *
   * @since 21.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forCells,"com.google.common.collect.RegularImmutableTable:forCells(java.util.List,java.util.Comparator,java.util.Comparator)",118,147,"/**
* Creates a RegularImmutableTable from cells with optional sorting.
* @param cells list of table cells
* @param rowComparator comparator for row keys
* @param columnComparator comparator for column keys
* @return RegularImmutableTable instance
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forCells,com.google.common.collect.RegularImmutableTable:forCells(java.lang.Iterable),149,151,"/**
 * Creates an immutable table from a collection of cells.
 * @param cells iterable containing the cells to populate the table
 * @return RegularImmutableTable populated with the given cells
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,resolveSupertype,com.google.common.reflect.TypeToken:resolveSupertype(java.lang.reflect.Type),287,293,"/**
* Resolves the supertype of a given type.
* @param type the input type to resolve
* @return TypeToken representing the resolved supertype
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOfParameterizedType,com.google.common.reflect.TypeToken:isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType),894,917,"/**
* Checks if this type is a subtype of the given parameterized type.
* @param supertype the parameterized type to check against
* @return true if this type is a subtype, false otherwise
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,resolveType,com.google.common.reflect.TypeToken:resolveType(java.lang.reflect.Type),280,285,"/**
* Resolves the type using an invariant type resolver.
* @param type the type to be resolved
* @return TypeToken representing the resolved type
*/","* Resolves the given {@code type} against the type context represented by this type. For example:
   *
   * {@snippet :
   * new TypeToken<List<String>>() {}.resolveType(
   *     List.class.getMethod(""get"", int.class).getGenericReturnType())
   * => String.class
   * }",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue:create(),110,112,"/**
* Creates a MinMaxPriorityQueue with natural ordering.
* @return MinMaxPriorityQueue instance
*/","* Creates a new min-max priority queue with default settings: natural order, no maximum size, no
   * initial contents, and an initial expected size of 11.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transitiveClosure,com.google.common.graph.Graphs:transitiveClosure(com.google.common.graph.Graph),189,221,"/**
* Computes the transitive closure of a graph.
* @param graph input graph
* @return ImmutableGraph representing the transitive closure
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,contains,com.google.common.cache.LocalCache$Values:contains(java.lang.Object),4616,4619,"/**
 * Checks if the local cache contains a specific value.
 * @param o the value to check for presence in the cache
 * @return true if the value is found, false otherwise
 */",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,refresh,"com.google.common.cache.LocalCache$Segment:refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean)",2375,2392,"/**
* Refreshes cache entry for a key.
* @param key key to refresh
* @param hash hash of the key
* @param loader function to load new value
* @param checkTime whether to check time-based expiration
* @return refreshed value or null if not available immediately
*/","* Refreshes the value associated with {@code key}, unless another thread is already doing so.
     * Returns the newly refreshed value associated with {@code key} if it was refreshed inline, or
     * {@code null} if another thread is performing the refresh or if an error occurs during
     * refresh.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,put,"com.google.common.cache.LocalCache:put(java.lang.Object,java.lang.Object)",4209,4216,"/**
* Puts a key-value pair into the map.
* @param key non-null key to insert
* @param value non-null value associated with the key
* @return previous value for the key or null if not present
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,putIfAbsent,"com.google.common.cache.LocalCache:putIfAbsent(java.lang.Object,java.lang.Object)",4218,4224,"/**
* Inserts a key-value pair if the key is not already present.
* @param key the key to insert
* @param value the value associated with the key
* @return the previous value or null if no mapping existed
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache:replace(java.lang.Object,java.lang.Object,java.lang.Object)",4287,4297,"/**
 * Replaces the value for a key only if it currently matches the old value.
 * @param key key with which the specified value is associated
 * @param oldValue value expected to be associated with the specified key
 * @param newValue new value to associate with the specified key
 * @return true if the value was replaced, false otherwise
 */",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache:replace(java.lang.Object,java.lang.Object)",4299,4306,"/**
 * Replaces the value for a given key.
 * @param key key with which to associate the value
 * @param value new value to store
 * @return old value associated with the key, or null if not present
 */",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache:remove(java.lang.Object),4267,4275,"/**
* Removes the entry for a specified key.
* @param key the key whose mapping is to be removed
* @return the value associated with the removed key, or null if not found
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,"com.google.common.cache.LocalCache:remove(java.lang.Object,java.lang.Object)",4277,4285,"/**
 * Removes entry by key and value.
 * @param key the key to remove
 * @param value the value associated with the key
 * @return true if removed, false otherwise
 */",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAndRecordStats,"com.google.common.cache.LocalCache$Segment:getAndRecordStats(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.util.concurrent.ListenableFuture)",2327,2349,"/**
* Retrieves and records statistics for a cache entry.
* @param key the cache key
* @param hash hash code of the key
* @param loadingValueReference reference to the loading value
* @param newValue future representing the new value to be loaded
* @return the loaded value
* @throws ExecutionException if an error occurs during execution
*/","Waits uninterruptibly for {@code newValue} to be loaded, and then records loading stats.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache:clear(),4308,4313,"/**
* Clears all entries in each segment.
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,advanceTo,com.google.common.cache.LocalCache$HashIterator:advanceTo(com.google.common.cache.ReferenceEntry),4422,4437,"/**
* Advances to the next live entry.
* @param entry reference to the entry to check
* @return true if a live entry is found, false otherwise
*/","* Advances to the given entry. Returns true if the entry was valid, false if it should be
     * skipped.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsKey,"com.google.common.cache.LocalCache$Segment:containsKey(java.lang.Object,int)",2742,2757,"/**
 * Checks if the map contains a key with a non-null value.
 * @param key the key to check
 * @param hash precomputed hash of the key
 * @return true if the key exists and its value is not null, false otherwise
 */",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsValue,com.google.common.cache.LocalCache$Segment:containsValue(java.lang.Object),2763,2787,"/**
* Checks if the map contains a value equivalent to the specified object.
* @param value the value to search for
* @return true if a matching value is found, false otherwise
*/","* This method is a convenience for testing. Code should call {@link LocalCache#containsValue}
     * directly.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,cleanUp,com.google.common.cache.LocalCache$LocalManualCache:cleanUp(),4917,4920,"/**
 * Cleans up resources used by the local cache.
 */",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,toString,com.google.common.reflect.TypeToken$2:toString(),840,843,"/**
 * Returns string representation of runtime type.
 * @return Type name as string
 */",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,index,com.google.common.collect.FluentIterable:index(com.google.common.base.Function),727,730,"/**
* Creates an immutable multimap by indexing elements with a key function.
* @param keyFunction function to extract keys from elements
* @return ImmutableListMultimap of elements indexed by keys
*/","* Creates an index {@code ImmutableListMultimap} that contains the results of applying a
   * specified function to each item in this {@code FluentIterable} of values. Each element of this
   * iterable will be stored as a value in the resulting multimap, yielding a multimap with the same
   * size as this iterable. The key used to store that value in the multimap will be the result of
   * calling the function on that value. The resulting multimap is created as an immutable snapshot.
   * In the returned multimap, keys appear in the order they are first encountered, and the values
   * corresponding to each key appear in the same order as they are encountered.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))}
   * behaves similarly, but returns a mutable {@code Map<K, List<E>>} instead, and may not preserve
   * the order of entries.
   *
   * @param keyFunction the function used to produce the key for each value
   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key
   * @since 14.0",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withCharset,com.google.common.net.MediaType:withCharset(java.nio.charset.Charset),947,953,"/**
 * Creates a new MediaType with the specified Charset.
 * @param charset the character set to be associated with this media type
 * @return a new MediaType instance with the given charset
 */","* Returns a new instance with the same type and subtype as this instance, with the {@code
   * charset} parameter set to the {@link Charset#name name} of the given charset. Only one {@code
   * charset} parameter will be present on the new instance regardless of the number set on this
   * one.
   *
   * <p>If a charset must be specified that is not supported on this JVM (and thus is not
   * representable as a {@link Charset} instance), use {@link #withParameter}.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withoutParameters,com.google.common.net.MediaType:withoutParameters(),881,883,"/**
 * Returns media type without parameters.
 * @return new MediaType without parameters or current instance if none exist
 */","* Returns a new instance with the same type and subtype as this instance, but without any
   * parameters.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createApplicationType,com.google.common.net.MediaType:createApplicationType(java.lang.String),1034,1036,"/**
 * Creates an application media type with the specified subtype.
 * @param subtype the specific subtype of the application media type
 * @return a MediaType object representing the application type
 */","* Creates a media type with the ""application"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createAudioType,com.google.common.net.MediaType:createAudioType(java.lang.String),1043,1045,"/**
* Creates an audio media type.
* @param subtype specific audio subtype (e.g., ""mpeg"")
* @return MediaType object representing the audio type
*/","* Creates a media type with the ""audio"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createFontType,com.google.common.net.MediaType:createFontType(java.lang.String),1052,1054,"/**
 * Creates a font media type.
 * @param subtype specific font subtype
 * @return MediaType object representing the font type
 */","* Creates a media type with the ""font"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createImageType,com.google.common.net.MediaType:createImageType(java.lang.String),1061,1063,"/**
 * Creates an image media type with a specified subtype.
 * @param subtype specific image subtype (e.g., ""png"", ""jpg"")
 * @return MediaType object representing the image type
 */","* Creates a media type with the ""image"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createTextType,com.google.common.net.MediaType:createTextType(java.lang.String),1070,1072,"/**
 * Creates a text media type with a specified subtype.
 * @param subtype the specific subtype of the text media type
 * @return a MediaType object representing the text subtype
 */","* Creates a media type with the ""text"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createVideoType,com.google.common.net.MediaType:createVideoType(java.lang.String),1079,1081,"/**
 * Creates a video media type.
 * @param subtype specific video subtype (e.g., ""mp4"", ""avi"")
 * @return MediaType object representing the video type
 */","* Creates a media type with the ""video"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,buildOrThrow,com.google.common.collect.ImmutableTable$Builder:buildOrThrow(),285,295,"/**
* Builds an ImmutableTable from cells.
* @return ImmutableTable constructed from cells or throws if invalid
*/","* Returns a newly-created immutable table, or throws an exception if duplicate key pairs were
     * added.
     *
     * @throws IllegalArgumentException if duplicate key pairs were added
     * @since 31.0",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getGenericSuperclass,com.google.common.reflect.TypeToken:getGenericSuperclass(),307,323,"/**
* Retrieves the generic superclass type token.
* @return TypeToken representing the superclass or null if none exists
*/","* Returns the generic superclass of this type or {@code null} if the type represents {@link
   * Object} or an interface. This method is similar but different from {@link
   * Class#getGenericSuperclass}. For example, {@code new TypeToken<StringArrayList>()
   * {}.getGenericSuperclass()} will return {@code new TypeToken<ArrayList<String>>() {}}; while
   * {@code StringArrayList.class.getGenericSuperclass()} will return {@code ArrayList<E>}, where
   * {@code E} is the type variable declared by class {@code ArrayList}.
   *
   * <p>If this type is a type variable or wildcard, its first upper bound is examined and returned
   * if the bound is a class or extends from a class. This means that the returned type could be a
   * type variable too.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getGenericInterfaces,com.google.common.reflect.TypeToken:getGenericInterfaces(),347,362,"/**
* Retrieves generic interfaces for the current type.
* @return ImmutableList of TypeToken representing generic interfaces
*/","* Returns the generic interfaces that this type directly {@code implements}. This method is
   * similar but different from {@link Class#getGenericInterfaces()}. For example, {@code new
   * TypeToken<List<String>>() {}.getGenericInterfaces()} will return a list that contains {@code
   * new TypeToken<Iterable<String>>() {}}; while {@code List.class.getGenericInterfaces()} will
   * return an array that contains {@code Iterable<T>}, where the {@code T} is the type variable
   * declared by interface {@code Iterable}.
   *
   * <p>If this type is a type variable or wildcard, its upper bounds are examined and those that
   * are either an interface or upper-bounded only by interfaces are returned. This means that the
   * returned types could include type variables too.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSupertype,com.google.common.reflect.TypeToken:getSupertype(java.lang.Class),396,415,"/**
 * Retrieves the supertype for a given class.
 * @param superclass the superclass to check against
 * @return the TypeToken of the supertype or throws an exception if not found
 */","* Returns the generic form of {@code superclass}. For example, if this is {@code
   * ArrayList<String>}, {@code Iterable<String>} is returned given the input {@code
   * Iterable.class}.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,scheduleRefresh,"com.google.common.cache.LocalCache$Segment:scheduleRefresh(com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,long,com.google.common.cache.CacheLoader)",2351,2367,"/**
* Schedules cache entry refresh.
* @param entry reference to the cache entry
* @param key entry key
* @param hash key hash code
* @param oldValue current value of the entry
* @param now current time in nanoseconds
* @param loader CacheLoader for loading new values
* @return updated value if refreshed, otherwise old value
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,refresh,com.google.common.cache.LocalCache:refresh(java.lang.Object),4154,4157,"/**
 * Refreshes the value associated with the given key.
 * @param key the key whose value needs refreshing
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,put,"com.google.common.cache.LocalCache$LocalManualCache:put(java.lang.Object,java.lang.Object)",4871,4874,"/**
 * Stores a key-value pair in the local cache.
 * @param key unique identifier for the value
 * @param value data to be stored
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,setValue,com.google.common.cache.LocalCache$WriteThroughEntry:setValue(java.lang.Object),4516,4521,"/**
* Updates the value associated with the key.
* @param newValue new value to set
* @return old value before update or null if key not present
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadAll,"com.google.common.cache.LocalCache:loadAll(java.util.Set,com.google.common.cache.CacheLoader)",4082,4139,"/**
 * Loads multiple cache entries using a loader.
 * @param keys set of keys to load
 * @param loader CacheLoader to use for loading values
 * @return map of loaded key-value pairs or null if any error occurs
 * @throws ExecutionException if loading fails
 */","* Returns the result of calling {@link CacheLoader#loadAll}, or null if {@code loader} doesn't
   * implement {@code loadAll}.",,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,putAll,com.google.common.cache.LocalCache:putAll(java.util.Map),4260,4265,"/**
* Adds all entries from the specified map.
* @param m source map whose entries are to be added
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$HashIterator:remove(),4453,4458,"/**
* Removes the last accessed entry from the cache.
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$KeySet:remove(java.lang.Object),4583,4586,"/**
 * Removes an object from the local cache.
 * @param o the object to be removed
 * @return true if the object was present and removed, false otherwise
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidate,com.google.common.cache.LocalCache$LocalManualCache:invalidate(java.lang.Object),4881,4885,"/**
 * Removes an entry from the local cache by its key.
 * @param key unique identifier of the entry to remove
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidateAll,com.google.common.cache.LocalCache:invalidateAll(java.lang.Iterable),4315,4320,"/**
* Invalidates all entries for given keys.
* @param keys iterable collection of keys to be invalidated
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$EntrySet:remove(java.lang.Object),4650,4658,"/**
* Removes entry from cache by key and value.
* @param o entry object to remove
* @return true if removal is successful, false otherwise
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,compute,"com.google.common.cache.LocalCache$Segment:compute(java.lang.Object,int,java.util.function.BiFunction)",2211,2293,"/**
* Computes or retrieves the value for a key using a function.
* @param key the key to compute the value for
* @param hash the hash of the key
* @param function the function to compute the value
* @return the computed value or null if not found or computing fails
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadSync,"com.google.common.cache.LocalCache$Segment:loadSync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)",2297,2305,"/**
* Loads value synchronously using cache loader.
* @param key key to load value for
* @param hash hash of the key
* @param loadingValueReference reference for tracking loading status
* @param loader cache loader implementation
* @return loaded value
* @throws ExecutionException if an error occurs during loading
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$AbstractCacheSet:clear(),4548,4551,"/**
 * Clears all entries from the local cache.
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidateAll,com.google.common.cache.LocalCache$LocalManualCache:invalidateAll(),4892,4895,"/**
 * Clears all entries from the local cache.
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$Values:clear(),4600,4603,"/**
* Clears all entries from the local cache.
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nextInChain,com.google.common.cache.LocalCache$HashIterator:nextInChain(),4395,4404,"/**
* Advances to the next valid entry in a chain.
* @return true if a valid entry is found, false otherwise
*/",Finds the next entry in the current chain. Returns true if an entry was found.,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsKey,com.google.common.cache.LocalCache:containsKey(java.lang.Object),4159,4167,"/**
 * Checks if the map contains a key.
 * @param key the key to check for presence in the map
 * @return true if the map contains the specified key, false otherwise
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,build,com.google.common.collect.ImmutableTable$Builder:build(),274,276,"/**
 * Builds an immutable table.
 * @return ImmutableTable instance
 */","* Returns a newly-created immutable table.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate key pairs. The {@code build()} method will
     * soon be deprecated.
     *
     * @throws IllegalArgumentException if duplicate key pairs were added",,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSupertypeFromUpperBounds,"com.google.common.reflect.TypeToken:getSupertypeFromUpperBounds(java.lang.Class,java.lang.reflect.Type[])",1202,1214,"/**
 * Retrieves the supertype from upper bounds if it is a subtype of the specified class.
 * @param supertype the class to check against
 * @param upperBounds array of upper bounds types
 * @return TypeToken representing the supertype or throws IllegalArgumentException
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,resolveTypeArgsForSubclass,com.google.common.reflect.TypeToken:resolveTypeArgsForSubclass(java.lang.Class),1268,1293,"/**
 * Resolves type arguments for a subclass.
 * @param subclass the subclass to resolve type arguments for
 * @return resolved Type object
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache$Segment:get(java.lang.Object,int)",2083,2103,"/**
* Retrieves and refreshes a cached value by key.
* @param key the key to look up in the cache
* @param hash the precomputed hash of the key
* @return the refreshed value or null if not found
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,refresh,com.google.common.cache.LocalCache$LocalLoadingCache:refresh(java.lang.Object),4965,4968,"/**
 * Refreshes the cache entry for the specified key.
 * @param key unique identifier of the cache entry to refresh
 */",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,putAll,com.google.common.cache.LocalCache$LocalManualCache:putAll(java.util.Map),4876,4879,"/**
 * Adds all entries from the specified map to the cache.
 * @param m the map whose entries are to be added
 */",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidateAll,com.google.common.cache.LocalCache$LocalManualCache:invalidateAll(java.lang.Iterable),4887,4890,"/**
 * Invalidates all entries in the cache for given keys.
 * @param keys collection of keys to invalidate
 */",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,compute,"com.google.common.cache.LocalCache:compute(java.lang.Object,java.util.function.BiFunction)",4226,4233,"/**
* Computes value for key using provided function.
* @param key the key to compute
* @param function the computation function
* @return computed value or null
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,lockedGetOrLoad,"com.google.common.cache.LocalCache$Segment:lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader)",2105,2187,"/**
* Retrieves or loads a value by key with locking.
* @param key the key to retrieve
* @param hash the hash of the key
* @param loader the cache loader
* @return the loaded value
* @throws ExecutionException if loading fails
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nextInTable,com.google.common.cache.LocalCache$HashIterator:nextInTable(),4407,4416,"/**
* Advances to the next entry in the table or chain.
* @return true if a valid entry is found, false otherwise
*/",Finds the next entry in the current table. Returns true if an entry was found.,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,contains,com.google.common.cache.LocalCache$KeySet:contains(java.lang.Object),4578,4581,"/**
 * Checks if the local cache contains the specified key.
 * @param o key to check in the cache
 * @return true if the key is present, false otherwise
 */",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,copyOf,com.google.common.collect.ImmutableTable:copyOf(java.lang.Iterable),136,143,"/**
 * Creates an immutable table from a collection of cells.
 * @param cells iterable containing row, column, and value entries
 * @return ImmutableTable built from the given cells
 */",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toImmutableTable,"com.google.common.collect.TableCollectors:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function)",35,49,"/**
* Collects elements into an ImmutableTable.
* @param rowFunction extracts row key from element
* @param columnFunction extracts column key from element
* @param valueFunction extracts value from element
* @return Collector to build ImmutableTable
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSubtype,com.google.common.reflect.TypeToken:getSubtype(java.lang.Class),422,441,"/**
 * Retrieves the subtype for a given class.
 * @param subclass the subclass to retrieve the type token for
 * @return TypeToken representing the subclass or null if not applicable
 */","* Returns subtype of {@code this} with {@code subclass} as the raw class. For example, if this is
   * {@code Iterable<String>} and {@code subclass} is {@code List}, {@code List<String>} is
   * returned.",,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,com.google.common.cache.LocalCache:get(java.lang.Object),3974,3982,"/**
* Retrieves value by key.
* @param key the key to look up
* @return the value associated with the key or null if not found
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getIfPresent,com.google.common.cache.LocalCache:getIfPresent(java.lang.Object),3990,3999,"/**
* Retrieves value by key if present.
* @param key key to look up
* @return value associated with the key or null if absent
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,computeIfAbsent,"com.google.common.cache.LocalCache:computeIfAbsent(java.lang.Object,java.util.function.Function)",4235,4240,"/**
* Computes value if absent.
* @param key key to search for
* @param function function to compute value if not present
* @return computed or existing value associated with the key
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,computeIfPresent,"com.google.common.cache.LocalCache:computeIfPresent(java.lang.Object,java.util.function.BiFunction)",4242,4248,"/**
* Applies a function to the value if present.
* @param key key with which the specified value is associated
* @param function function to apply to the value
* @return new value after applying the function or null if no mapping exists
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,merge,"com.google.common.cache.LocalCache:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)",4250,4258,"/**
* Merges a new value with an existing one using a function.
* @param key key with which the specified value is to be associated
* @param newValue value to merge with existing value
* @param function function that defines how to merge values
* @return merged value or null if not applicable
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache$Segment:get(java.lang.Object,int,com.google.common.cache.CacheLoader)",2045,2081,"/**
 * Retrieves value for key, loading it if absent.
 * @param key key to retrieve
 * @param hash precomputed hash of the key
 * @param loader function to load value if not present
 * @return value associated with the key
 * @throws ExecutionException if loading fails
 */",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,advance,com.google.common.cache.LocalCache$HashIterator:advance(),4371,4392,"/**
* Advances to the next element in a segmented data structure.
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,copyOf,com.google.common.collect.ImmutableTable:copyOf(com.google.common.collect.Table),125,134,"/**
* Creates an immutable copy of the given table.
* @param table the table to copy
* @return an ImmutableTable instance
*/","* Returns an immutable copy of the provided table.
   *
   * <p>The {@link Table#cellSet()} iteration order of the provided table determines the iteration
   * ordering of all views in the returned table. Note that some views of the original table and the
   * copied table may have different iteration orders. For more control over the ordering, create a
   * {@link Builder} and call {@link Builder#orderRowsBy}, {@link Builder#orderColumnsBy}, and
   * {@link Builder#putAll}
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.",,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toTable,com.google.common.collect.TableCollectors$ImmutableTableCollectorState:toTable(),166,168,"/**
 * Converts insertion order map to an immutable table.
 * @return ImmutableTable representation of the data
 */",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,toImmutableTable,"com.google.common.collect.ImmutableTable:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function)",68,74,"/**
 * Collects elements into an ImmutableTable.
 * @param rowFunction extracts row key from element
 * @param columnFunction extracts column key from element
 * @param valueFunction extracts value from element
 * @return Collector that gathers elements into an ImmutableTable
 */","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each
   * input element is mapped to one cell in the returned table, with the rows, columns, and values
   * generated by applying the specified functions.
   *
   * <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time
   * if the row, column, or value functions return null on any input.
   *
   * @since 21.0",,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getArraySubtype,com.google.common.reflect.TypeToken:getArraySubtype(java.lang.Class),1251,1266,"/**
* Retrieves the array subtype for a given subclass.
* @param subclass the subclass of the array type
* @return TypeToken representing the array subtype
* @throws IllegalArgumentException if subclass is not an array or not a subtype
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,contains,com.google.common.cache.LocalCache$EntrySet:contains(java.lang.Object),4635,4648,"/**
* Checks if the map contains a mapping for the specified key-value pair.
* @param o object to check, expected to be an Entry
* @return true if the map contains the entry, false otherwise
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getOrDefault,"com.google.common.cache.LocalCache:getOrDefault(java.lang.Object,java.lang.Object)",4001,4005,"/**
* Retrieves value by key or returns default if not found.
* @param key the key to search for
* @param defaultValue the value to return if key is not present
* @return the value associated with the key, or default value
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAllPresent,com.google.common.cache.LocalCache:getAllPresent(java.lang.Iterable),4011,4031,"/**
* Retrieves values for given keys from the map.
* @param keys iterable of keys to retrieve values for
* @return ImmutableMap containing present key-value pairs
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeIf,com.google.common.cache.LocalCache:removeIf(java.util.function.BiPredicate),4554,4569,"/**
* Removes entries matching the given filter.
* @param filter condition to test each key-value pair
* @return true if any entries were removed
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getIfPresent,com.google.common.cache.LocalCache$LocalManualCache:getIfPresent(java.lang.Object),4848,4851,"/**
 * Retrieves value from cache if present.
 * @param key unique identifier for the value
 * @return cached value or null if not found
 */",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache:get(java.lang.Object,com.google.common.cache.CacheLoader)",3984,3988,"/**
* Retrieves value for a key using a cache loader if not present.
* @param key the key to look up
* @param loader the cache loader to use if key is not found
* @return value associated with the key
* @throws ExecutionException if loading fails
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nextEntry,com.google.common.cache.LocalCache$HashIterator:nextEntry(),4444,4451,"/**
 * Returns the next entry in the iteration.
 * @return the next WriteThroughEntry
 * @throws NoSuchElementException if no more entries are available
 */",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAllPresent,com.google.common.cache.LocalCache$LocalManualCache:getAllPresent(java.lang.Iterable),4866,4869,"/**
* Retrieves all present entries from the cache.
* @param keys iterable of keys to check
* @return an immutable map of present key-value pairs
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeIf,com.google.common.cache.LocalCache$EntrySet:removeIf(java.util.function.Predicate),4629,4633,"/**
* Removes entries matching the given predicate.
* @param filter condition to test each entry
* @return true if any entries were removed
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeIf,com.google.common.cache.LocalCache$Values:removeIf(java.util.function.Predicate),4610,4614,"/**
* Removes entries matching the given predicate.
* @param filter condition to test each value
* @return true if any elements were removed
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache$LocalManualCache:get(java.lang.Object,java.util.concurrent.Callable)",4853,4864,"/**
* Retrieves value from cache by key, loading if absent.
* @param key unique identifier for the value
* @param valueLoader callable to produce value if not cached
* @return value associated with key
* @throws ExecutionException if loading fails
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getOrLoad,com.google.common.cache.LocalCache:getOrLoad(java.lang.Object),4007,4009,"/**
 * Retrieves value by key, loading it with default loader if missing.
 * @param key identifier for the value
 * @return value associated with the key
 * @throws ExecutionException if an error occurs during loading
 */",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAll,com.google.common.cache.LocalCache:getAll(java.lang.Iterable),4033,4076,"/**
* Retrieves all values for given keys.
* @param keys iterable of keys to fetch
* @return immutable map of key-value pairs
* @throws ExecutionException if an error occurs during loading
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,com.google.common.cache.LocalCache$LocalLoadingCache:get(java.lang.Object),4945,4948,"/**
 * Retrieves value by key from local cache.
 * @param key unique identifier for the cached value
 * @return value associated with the key or null if not found
 * @throws ExecutionException if an error occurs during retrieval
 */",,,,True,21
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAll,com.google.common.cache.LocalCache$LocalLoadingCache:getAll(java.lang.Iterable),4960,4963,"/**
* Retrieves multiple values by their keys.
* @param keys iterable collection of keys to fetch
* @return immutable map of key-value pairs
* @throws ExecutionException if an error occurs during retrieval
*/",,,,True,21
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getUnchecked,com.google.common.cache.LocalCache$LocalLoadingCache:getUnchecked(java.lang.Object),4950,4958,"/**
 * Retrieves value by key without checked exceptions.
 * @param key the key to look up
 * @return the value associated with the key
 */",,,,True,22
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,apply,com.google.common.cache.LocalCache$LocalLoadingCache:apply(java.lang.Object),4970,4973,"/**
 * Applies the function to a key.
 * @param key input key
 * @return value associated with the key or throws an unchecked exception if not found
 */",,,,True,23
